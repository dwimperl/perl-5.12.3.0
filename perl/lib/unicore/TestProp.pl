# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is machine-generated by mktables from the Unicode
# database, Version 5.2.0.  Any changes made here will be lost!

use strict;
use warnings;

# Test qr/\X/ and the \p{} regular expression constructs.  This file is
# constructed by mktables from the tables it generates, so if mktables is
# buggy, this won't necessarily catch those bugs.  Tests are generated for all
# feasible properties; a few aren't currently feasible; see
# is_code_point_usable() in mktables for details.

# Standard test packages are not used because this manipulates SIG_WARN.  It
# exits 0 if every non-skipped test succeeded; -1 if any failed.

my $Tests = 0;
my $Fails = 0;

my $non_ASCII = (ord('A') != 65);

# The 256 8-bit characters in ASCII ordinal order, with the ones that don't
# have Perl names replaced by -1
my @ascii_ordered_chars = (
    "\0",
    (-1) x 6,
    "\a", "\b", "\t", "\n",
    -1,   # No Vt
    "\f", "\r",
    (-1) x 18,
    " ", "!", "\"", "#", '$', "%", "&", "'",
    "(", ")", "*", "+", ",", "-", ".", "/",
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
    ":", ";", "<", "=", ">", "?", "@",
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "[", "\\", "]", "^", "_", "`",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "{", "|", "}", "~",
    (-1) x 129
);

sub ASCII_ord_to_native ($) {
    # Converts input ordinal number to the native one, if can be done easily.
    # Returns -1 otherwise.

    my $ord = shift;

    return $ord if $ord > 255 || ! $non_ASCII;
    my $result = $ascii_ordered_chars[$ord];
    return $result if $result eq '-1';
    return ord($result);
}

sub Expect($$$$) {
    my $expected = shift;
    my $ord = shift;
    my $regex  = shift;
    my $warning_type = shift;   # Type of warning message, like 'deprecated'
                                # or empty if none
    my $line   = (caller)[2];

    # Convert the non-ASCII code points expressible as characters to their
    # ASCII equivalents, and skip the others.
    $ord = ASCII_ord_to_native($ord);
    if ($ord < 0) {
        $Tests++;
        print "ok $Tests - "
              . sprintf("\"\\x{%04X}\"", $ord)
              . " =~ $regex # Skipped: non-ASCII\n";
        return;
    }

    # Convert the code point to hex form
    my $string = sprintf "\"\\x{%04X}\"", $ord;

    my @tests = "";

    # The first time through, use all warnings.  If the input should generate
    # a warning, add another time through with them turned off
    push @tests, "no warnings '$warning_type';" if $warning_type;

    foreach my $no_warnings (@tests) {

        # Store any warning messages instead of outputting them
        local $SIG{__WARN__} = $SIG{__WARN__};
        my $warning_message;
        $SIG{__WARN__} = sub { $warning_message = $_[0] };

        $Tests++;

        # A string eval is needed because of the 'no warnings'.
        # Assumes no parens in the regular expression
        my $result = eval "$no_warnings
                            my \$RegObj = qr($regex);
                            $string =~ \$RegObj ? 1 : 0";
        if (not defined $result) {
            print "not ok $Tests - couldn't compile /$regex/; line $line: $@\n";
            $Fails++;
        }
        elsif ($result ^ $expected) {
            print "not ok $Tests - expected $expected but got $result for $string =~ qr/$regex/; line $line\n";
            $Fails++;
        }
        elsif ($warning_message) {
            if (! $warning_type || ($warning_type && $no_warnings)) {
                print "not ok $Tests - for qr/$regex/ did not expect warning message '$warning_message'; line $line\n";
                $Fails++;
            }
            else {
                print "ok $Tests - expected and got a warning message for qr/$regex/; line $line\n";
            }
        }
        elsif ($warning_type && ! $no_warnings) {
            print "not ok $Tests - for qr/$regex/ expected a $warning_type warning message, but got none; line $line\n";
            $Fails++;
        }
        else {
            print "ok $Tests - got $result for $string =~ qr/$regex/; line $line\n";
        }
    }
    return;
}

sub Error($) {
    my $regex  = shift;
    $Tests++;
    if (eval { 'x' =~ qr/$regex/; 1 }) {
        $Fails++;
        my $line = (caller)[2];
        print "not ok $Tests - re compiled ok, but expected error for qr/$regex/; line $line: $@\n";
    }
    else {
        my $line = (caller)[2];
        print "ok $Tests - got and expected error for qr/$regex/; line $line\n";
    }
    return;
}

# GCBTest.txt character that separates grapheme clusters
my $breakable_utf8 = my $breakable = chr(0xF7);
utf8::upgrade($breakable_utf8);

# GCBTest.txt character that indicates that the adjoining code points are part
# of the same grapheme cluster
my $nobreak_utf8 = my $nobreak = chr(0xD7);
utf8::upgrade($nobreak_utf8);

sub Test_X($) {
    # Test qr/\X/ matches.  The input is a line from auxiliary/GCBTest.txt
    # Each such line is a sequence of code points given by their hex numbers,
    # separated by the two characters defined just before this subroutine that
    # indicate that either there can or cannot be a break between the adjacent
    # code points.  If there isn't a break, that means the sequence forms an
    # extended grapheme cluster, which means that \X should match the whole
    # thing.  If there is a break, \X should stop there.  This is all
    # converted by this routine into a match:
    #   $string =~ /(\X)/,
    # Each \X should match the next cluster; and that is what is checked.

    my $template = shift;

    my $line   = (caller)[2];

    # The line contains characters above the ASCII range, but in Latin1.  It
    # may or may not be in utf8, and if it is, it may or may not know it.  So,
    # convert these characters to 8 bits.  If knows is in utf8, simply
    # downgrade.
    if (utf8::is_utf8($template)) {
        utf8::downgrade($template);
    } else {

        # Otherwise, if it is in utf8, but doesn't know it, the next lines
        # convert the two problematic characters to their 8-bit equivalents.
        # If it isn't in utf8, they don't harm anything.
        use bytes;
        $template =~ s/$nobreak_utf8/$nobreak/g;
        $template =~ s/$breakable_utf8/$breakable/g;
    }

    # Get rid of the leading and trailing breakables
    $template =~ s/^ \s* $breakable \s* //x;
    $template =~ s/ \s* $breakable \s* $ //x;

    # And no-breaks become just a space.
    $template =~ s/ \s* $nobreak \s* / /xg;

    # Split the input into segments that are breakable between them.
    my @segments = split /\s*$breakable\s*/, $template;

    my $string = "";
    my $display_string = "";
    my @should_match;
    my @should_display;

    # Convert the code point sequence in each segment into a Perl string of
    # characters
    foreach my $segment (@segments) {
        my @code_points = split /\s+/, $segment;
        my $this_string = "";
        my $this_display = "";
        foreach my $code_point (@code_points) {
            my $ord = ASCII_ord_to_native(hex $code_point);
            if ($ord < 0) {
                $Tests++;
                print "ok $Tests - String containing $code_point =~ /(\\X)/g # Skipped: non-ASCII\n";
                return;
            }
            $this_string .= chr $ord;
            $this_display .= "\\x{$code_point}";
        }

        # The next cluster should match the string in this segment.
        push @should_match, $this_string;
        push @should_display, $this_display;
        $string .= $this_string;
        $display_string .= $this_display;
    }

    # If a string can be represented in both non-ut8 and utf8, test both cases
    UPGRADE:
    for my $to_upgrade (0 .. 1) {

        if ($to_upgrade) {

            # If already in utf8, would just be a repeat
            next UPGRADE if utf8::is_utf8($string);

            utf8::upgrade($string);
        }

        # Finally, do the \X match.
        my @matches = $string =~ /(\X)/g;

        # Look through each matched cluster to verify that it matches what we
        # expect.
        my $min = (@matches < @should_match) ? @matches : @should_match;
        for my $i (0 .. $min - 1) {
            $Tests++;
            if ($matches[$i] eq $should_match[$i]) {
                print "ok $Tests - ";
                if ($i == 0) {
                    print "In \"$display_string\" =~ /(\\X)/g, \\X #1";
                } else {
                    print "And \\X #", $i + 1,
                }
                print " correctly matched $should_display[$i]; line $line\n";
            } else {
                $matches[$i] = join("", map { sprintf "\\x{%04X}", $_ }
                                                    unpack("U*", $matches[$i]));
                print "not ok $Tests - In \"$display_string\" =~ /(\\X)/g, \\X #",
                    $i + 1,
                    " should have matched $should_display[$i]",
                    " but instead matched $matches[$i]",
                    ".  Abandoning rest of line $line\n";
                next UPGRADE;
            }
        }

        # And the number of matches should equal the number of expected matches.
        $Tests++;
        if (@matches == @should_match) {
            print "ok $Tests - Nothing was left over; line $line\n";
        } else {
            print "not ok $Tests - There were ", scalar @should_match, " \\X matches expected, but got ", scalar @matches, " instead; line $line\n";
        }
    }

    return;
}

sub Finished() {
    print "1..$Tests\n";
    exit($Fails ? -1 : 0);
}

Error('\p{Script=InGreek}');    # Bug #69018
Test_X("1100 $nobreak 1161");  # Bug #70940
Expect(0, 0x2028, '\p{Print}', ""); # Bug # 71722
Expect(0, 0x2029, '\p{Print}', ""); # Bug # 71722
Expect(1, 0xFF10, '\p{XDigit}', ""); # Bug # 71726
Error('\p{Other_Lowercase:--YES/a/}');
Error('\P{Other_Lowercase:--YES/a/}');
Expect(1, 696, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\p{Other_Lowercase= YES}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase= YES}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase= YES}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase= YES}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase= YES}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase= YES}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase= YES}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase= YES}', 'deprecated');
Error('\p{OLower: :=	Y}');
Error('\P{OLower: :=	Y}');
Expect(1, 696, '\p{OLower: y}', 'deprecated');
Expect(0, 696, '\p{^OLower: y}', 'deprecated');
Expect(0, 696, '\P{OLower: y}', 'deprecated');
Expect(1, 696, '\P{^OLower: y}', 'deprecated');
Expect(0, 687, '\p{OLower: y}', 'deprecated');
Expect(1, 687, '\p{^OLower: y}', 'deprecated');
Expect(1, 687, '\P{OLower: y}', 'deprecated');
Expect(0, 687, '\P{^OLower: y}', 'deprecated');
Expect(1, 696, '\p{OLower=  Y}', 'deprecated');
Expect(0, 696, '\p{^OLower=  Y}', 'deprecated');
Expect(0, 696, '\P{OLower=  Y}', 'deprecated');
Expect(1, 696, '\P{^OLower=  Y}', 'deprecated');
Expect(0, 687, '\p{OLower=  Y}', 'deprecated');
Expect(1, 687, '\p{^OLower=  Y}', 'deprecated');
Expect(1, 687, '\P{OLower=  Y}', 'deprecated');
Expect(0, 687, '\P{^OLower=  Y}', 'deprecated');
Error('\p{Is_Other_Lowercase=_:=T}');
Error('\P{Is_Other_Lowercase=_:=T}');
Expect(1, 696, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\p{Is_Other_Lowercase=_-t}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=_-t}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=_-t}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=_-t}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=_-t}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=_-t}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=_-t}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=_-t}', 'deprecated');
Error('\p{Is_OLower=-/a/true}');
Error('\P{Is_OLower=-/a/true}');
Expect(1, 696, '\p{Is_OLower=true}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower=true}', 'deprecated');
Expect(0, 696, '\P{Is_OLower=true}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower=true}', 'deprecated');
Expect(0, 687, '\p{Is_OLower=true}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower=true}', 'deprecated');
Expect(1, 687, '\P{Is_OLower=true}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower=true}', 'deprecated');
Expect(1, 696, '\p{Is_OLower= True}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower= True}', 'deprecated');
Expect(0, 696, '\P{Is_OLower= True}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower= True}', 'deprecated');
Expect(0, 687, '\p{Is_OLower= True}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower= True}', 'deprecated');
Expect(1, 687, '\P{Is_OLower= True}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower= True}', 'deprecated');
Error('\p{Other_Lowercase=/a/ 	no}');
Error('\P{Other_Lowercase=/a/ 	no}');
Expect(1, 687, '\p{Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\p{Other_Lowercase= -No}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase= -No}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase= -No}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase= -No}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase= -No}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase= -No}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase= -No}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase= -No}', 'deprecated');
Error('\p{OLower=:=	n}');
Error('\P{OLower=:=	n}');
Expect(1, 687, '\p{OLower=n}', 'deprecated');
Expect(0, 687, '\p{^OLower=n}', 'deprecated');
Expect(0, 687, '\P{OLower=n}', 'deprecated');
Expect(1, 687, '\P{^OLower=n}', 'deprecated');
Expect(0, 696, '\p{OLower=n}', 'deprecated');
Expect(1, 696, '\p{^OLower=n}', 'deprecated');
Expect(1, 696, '\P{OLower=n}', 'deprecated');
Expect(0, 696, '\P{^OLower=n}', 'deprecated');
Expect(1, 687, '\p{OLower=-N}', 'deprecated');
Expect(0, 687, '\p{^OLower=-N}', 'deprecated');
Expect(0, 687, '\P{OLower=-N}', 'deprecated');
Expect(1, 687, '\P{^OLower=-N}', 'deprecated');
Expect(0, 696, '\p{OLower=-N}', 'deprecated');
Expect(1, 696, '\p{^OLower=-N}', 'deprecated');
Expect(1, 696, '\P{OLower=-N}', 'deprecated');
Expect(0, 696, '\P{^OLower=-N}', 'deprecated');
Error('\p{Is_Other_Lowercase=/a/	-F}');
Error('\P{Is_Other_Lowercase=/a/	-F}');
Expect(1, 687, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\p{Is_Other_Lowercase=		F}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase=		F}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase=		F}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase=		F}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase=		F}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase=		F}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase=		F}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase=		F}', 'deprecated');
Error('\p{Is_OLower=/a/__False}');
Error('\P{Is_OLower=/a/__False}');
Expect(1, 687, '\p{Is_OLower=false}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=false}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=false}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=false}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=false}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=false}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=false}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=false}', 'deprecated');
Expect(1, 687, '\p{Is_OLower=_ FALSE}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=_ FALSE}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=_ FALSE}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=_ FALSE}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=_ FALSE}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=_ FALSE}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=_ FALSE}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=_ FALSE}', 'deprecated');
Error('\p{Variation_Selector=/a/_Yes}');
Error('\P{Variation_Selector=/a/_Yes}');
Expect(1, 6157, '\p{Variation_Selector=yes}', "");
Expect(0, 6157, '\p{^Variation_Selector=yes}', "");
Expect(0, 6157, '\P{Variation_Selector=yes}', "");
Expect(1, 6157, '\P{^Variation_Selector=yes}', "");
Expect(0, 6154, '\p{Variation_Selector=yes}', "");
Expect(1, 6154, '\p{^Variation_Selector=yes}', "");
Expect(1, 6154, '\P{Variation_Selector=yes}', "");
Expect(0, 6154, '\P{^Variation_Selector=yes}', "");
Expect(1, 6157, '\p{Variation_Selector= 	yes}', "");
Expect(0, 6157, '\p{^Variation_Selector= 	yes}', "");
Expect(0, 6157, '\P{Variation_Selector= 	yes}', "");
Expect(1, 6157, '\P{^Variation_Selector= 	yes}', "");
Expect(0, 6154, '\p{Variation_Selector= 	yes}', "");
Expect(1, 6154, '\p{^Variation_Selector= 	yes}', "");
Expect(1, 6154, '\P{Variation_Selector= 	yes}', "");
Expect(0, 6154, '\P{^Variation_Selector= 	yes}', "");
Error('\p{VS=_ Y/a/}');
Error('\P{VS=_ Y/a/}');
Expect(1, 6157, '\p{VS=y}', "");
Expect(0, 6157, '\p{^VS=y}', "");
Expect(0, 6157, '\P{VS=y}', "");
Expect(1, 6157, '\P{^VS=y}', "");
Expect(0, 6154, '\p{VS=y}', "");
Expect(1, 6154, '\p{^VS=y}', "");
Expect(1, 6154, '\P{VS=y}', "");
Expect(0, 6154, '\P{^VS=y}', "");
Expect(1, 6157, '\p{VS=_Y}', "");
Expect(0, 6157, '\p{^VS=_Y}', "");
Expect(0, 6157, '\P{VS=_Y}', "");
Expect(1, 6157, '\P{^VS=_Y}', "");
Expect(0, 6154, '\p{VS=_Y}', "");
Expect(1, 6154, '\p{^VS=_Y}', "");
Expect(1, 6154, '\P{VS=_Y}', "");
Expect(0, 6154, '\P{^VS=_Y}', "");
Error('\p{Is_Variation_Selector=:=-	T}');
Error('\P{Is_Variation_Selector=:=-	T}');
Expect(1, 6157, '\p{Is_Variation_Selector:   t}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector:   t}', "");
Expect(0, 6157, '\P{Is_Variation_Selector:   t}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector:   t}', "");
Expect(0, 6154, '\p{Is_Variation_Selector:   t}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector:   t}', "");
Expect(1, 6154, '\P{Is_Variation_Selector:   t}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector:   t}', "");
Expect(1, 6157, '\p{Is_Variation_Selector= _T}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector= _T}', "");
Expect(0, 6157, '\P{Is_Variation_Selector= _T}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector= _T}', "");
Expect(0, 6154, '\p{Is_Variation_Selector= _T}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector= _T}', "");
Expect(1, 6154, '\P{Is_Variation_Selector= _T}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector= _T}', "");
Error('\p{Is_VS=_ TRUE/a/}');
Error('\P{Is_VS=_ TRUE/a/}');
Expect(1, 6157, '\p{Is_VS=true}', "");
Expect(0, 6157, '\p{^Is_VS=true}', "");
Expect(0, 6157, '\P{Is_VS=true}', "");
Expect(1, 6157, '\P{^Is_VS=true}', "");
Expect(0, 6154, '\p{Is_VS=true}', "");
Expect(1, 6154, '\p{^Is_VS=true}', "");
Expect(1, 6154, '\P{Is_VS=true}', "");
Expect(0, 6154, '\P{^Is_VS=true}', "");
Expect(1, 6157, '\p{Is_VS= 	True}', "");
Expect(0, 6157, '\p{^Is_VS= 	True}', "");
Expect(0, 6157, '\P{Is_VS= 	True}', "");
Expect(1, 6157, '\P{^Is_VS= 	True}', "");
Expect(0, 6154, '\p{Is_VS= 	True}', "");
Expect(1, 6154, '\p{^Is_VS= 	True}', "");
Expect(1, 6154, '\P{Is_VS= 	True}', "");
Expect(0, 6154, '\P{^Is_VS= 	True}', "");
Error('\p{Variation_Selector=/a/ -No}');
Error('\P{Variation_Selector=/a/ -No}');
Expect(1, 6154, '\p{Variation_Selector=no}', "");
Expect(0, 6154, '\p{^Variation_Selector=no}', "");
Expect(0, 6154, '\P{Variation_Selector=no}', "");
Expect(1, 6154, '\P{^Variation_Selector=no}', "");
Expect(0, 6157, '\p{Variation_Selector=no}', "");
Expect(1, 6157, '\p{^Variation_Selector=no}', "");
Expect(1, 6157, '\P{Variation_Selector=no}', "");
Expect(0, 6157, '\P{^Variation_Selector=no}', "");
Expect(1, 6154, '\p{Variation_Selector=_-no}', "");
Expect(0, 6154, '\p{^Variation_Selector=_-no}', "");
Expect(0, 6154, '\P{Variation_Selector=_-no}', "");
Expect(1, 6154, '\P{^Variation_Selector=_-no}', "");
Expect(0, 6157, '\p{Variation_Selector=_-no}', "");
Expect(1, 6157, '\p{^Variation_Selector=_-no}', "");
Expect(1, 6157, '\P{Variation_Selector=_-no}', "");
Expect(0, 6157, '\P{^Variation_Selector=_-no}', "");
Error('\p{VS=/a/-	N}');
Error('\P{VS=/a/-	N}');
Expect(1, 6154, '\p{VS=n}', "");
Expect(0, 6154, '\p{^VS=n}', "");
Expect(0, 6154, '\P{VS=n}', "");
Expect(1, 6154, '\P{^VS=n}', "");
Expect(0, 6157, '\p{VS=n}', "");
Expect(1, 6157, '\p{^VS=n}', "");
Expect(1, 6157, '\P{VS=n}', "");
Expect(0, 6157, '\P{^VS=n}', "");
Expect(1, 6154, '\p{VS=-	n}', "");
Expect(0, 6154, '\p{^VS=-	n}', "");
Expect(0, 6154, '\P{VS=-	n}', "");
Expect(1, 6154, '\P{^VS=-	n}', "");
Expect(0, 6157, '\p{VS=-	n}', "");
Expect(1, 6157, '\p{^VS=-	n}', "");
Expect(1, 6157, '\P{VS=-	n}', "");
Expect(0, 6157, '\P{^VS=-	n}', "");
Error('\p{Is_Variation_Selector=	-F/a/}');
Error('\P{Is_Variation_Selector=	-F/a/}');
Expect(1, 6154, '\p{Is_Variation_Selector=f}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector=f}', "");
Expect(0, 6154, '\P{Is_Variation_Selector=f}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector=f}', "");
Expect(0, 6157, '\p{Is_Variation_Selector=f}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector=f}', "");
Expect(1, 6157, '\P{Is_Variation_Selector=f}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector=f}', "");
Expect(1, 6154, '\p{Is_Variation_Selector= F}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector= F}', "");
Expect(0, 6154, '\P{Is_Variation_Selector= F}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector= F}', "");
Expect(0, 6157, '\p{Is_Variation_Selector= F}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector= F}', "");
Expect(1, 6157, '\P{Is_Variation_Selector= F}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector= F}', "");
Error('\p{Is_VS=-:=False}');
Error('\P{Is_VS=-:=False}');
Expect(1, 6154, '\p{Is_VS=false}', "");
Expect(0, 6154, '\p{^Is_VS=false}', "");
Expect(0, 6154, '\P{Is_VS=false}', "");
Expect(1, 6154, '\P{^Is_VS=false}', "");
Expect(0, 6157, '\p{Is_VS=false}', "");
Expect(1, 6157, '\p{^Is_VS=false}', "");
Expect(1, 6157, '\P{Is_VS=false}', "");
Expect(0, 6157, '\P{^Is_VS=false}', "");
Expect(1, 6154, '\p{Is_VS=_-False}', "");
Expect(0, 6154, '\p{^Is_VS=_-False}', "");
Expect(0, 6154, '\P{Is_VS=_-False}', "");
Expect(1, 6154, '\P{^Is_VS=_-False}', "");
Expect(0, 6157, '\p{Is_VS=_-False}', "");
Expect(1, 6157, '\p{^Is_VS=_-False}', "");
Expect(1, 6157, '\P{Is_VS=_-False}', "");
Expect(0, 6157, '\P{^Is_VS=_-False}', "");
Error('\p{Full_Composition_Exclusion=	/a/Yes}');
Error('\P{Full_Composition_Exclusion=	/a/Yes}');
Expect(1, 833, '\p{Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\p{Full_Composition_Exclusion=-Yes}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion=-Yes}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion=-Yes}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion=-Yes}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion=-Yes}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion=-Yes}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion=-Yes}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion=-Yes}', "");
Error('\p{Comp_Ex=	 Y/a/}');
Error('\P{Comp_Ex=	 Y/a/}');
Expect(1, 833, '\p{Comp_Ex=y}', "");
Expect(0, 833, '\p{^Comp_Ex=y}', "");
Expect(0, 833, '\P{Comp_Ex=y}', "");
Expect(1, 833, '\P{^Comp_Ex=y}', "");
Expect(0, 831, '\p{Comp_Ex=y}', "");
Expect(1, 831, '\p{^Comp_Ex=y}', "");
Expect(1, 831, '\P{Comp_Ex=y}', "");
Expect(0, 831, '\P{^Comp_Ex=y}', "");
Expect(1, 833, '\p{Comp_Ex= Y}', "");
Expect(0, 833, '\p{^Comp_Ex= Y}', "");
Expect(0, 833, '\P{Comp_Ex= Y}', "");
Expect(1, 833, '\P{^Comp_Ex= Y}', "");
Expect(0, 831, '\p{Comp_Ex= Y}', "");
Expect(1, 831, '\p{^Comp_Ex= Y}', "");
Expect(1, 831, '\P{Comp_Ex= Y}', "");
Expect(0, 831, '\P{^Comp_Ex= Y}', "");
Error('\p{Is_Full_Composition_Exclusion=-	T:=}');
Error('\P{Is_Full_Composition_Exclusion=-	T:=}');
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=	T}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=	T}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=	T}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=	T}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=	T}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=	T}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=	T}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=	T}', "");
Error('\p{Is_Comp_Ex=/a/_-TRUE}');
Error('\P{Is_Comp_Ex=/a/_-TRUE}');
Expect(1, 833, '\p{Is_Comp_Ex=true}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=true}', "");
Expect(0, 833, '\P{Is_Comp_Ex=true}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=true}', "");
Expect(0, 831, '\p{Is_Comp_Ex=true}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=true}', "");
Expect(1, 831, '\P{Is_Comp_Ex=true}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=true}', "");
Expect(1, 833, '\p{Is_Comp_Ex=  TRUE}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=  TRUE}', "");
Expect(0, 833, '\P{Is_Comp_Ex=  TRUE}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=  TRUE}', "");
Expect(0, 831, '\p{Is_Comp_Ex=  TRUE}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=  TRUE}', "");
Expect(1, 831, '\P{Is_Comp_Ex=  TRUE}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=  TRUE}', "");
Error('\p{Full_Composition_Exclusion:	--no/a/}');
Error('\P{Full_Composition_Exclusion:	--no/a/}');
Expect(1, 831, '\p{Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\p{Full_Composition_Exclusion=--No}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=--No}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=--No}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=--No}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=--No}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=--No}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=--No}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=--No}', "");
Error('\p{Comp_Ex=-_N:=}');
Error('\P{Comp_Ex=-_N:=}');
Expect(1, 831, '\p{Comp_Ex=n}', "");
Expect(0, 831, '\p{^Comp_Ex=n}', "");
Expect(0, 831, '\P{Comp_Ex=n}', "");
Expect(1, 831, '\P{^Comp_Ex=n}', "");
Expect(0, 833, '\p{Comp_Ex=n}', "");
Expect(1, 833, '\p{^Comp_Ex=n}', "");
Expect(1, 833, '\P{Comp_Ex=n}', "");
Expect(0, 833, '\P{^Comp_Ex=n}', "");
Expect(1, 831, '\p{Comp_Ex=	 n}', "");
Expect(0, 831, '\p{^Comp_Ex=	 n}', "");
Expect(0, 831, '\P{Comp_Ex=	 n}', "");
Expect(1, 831, '\P{^Comp_Ex=	 n}', "");
Expect(0, 833, '\p{Comp_Ex=	 n}', "");
Expect(1, 833, '\p{^Comp_Ex=	 n}', "");
Expect(1, 833, '\P{Comp_Ex=	 n}', "");
Expect(0, 833, '\P{^Comp_Ex=	 n}', "");
Error('\p{Is_Full_Composition_Exclusion=:=F}');
Error('\P{Is_Full_Composition_Exclusion=:=F}');
Expect(1, 831, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 831, '\P{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\P{^Is_Full_Composition_Exclusion=f}', "");
Error('\p{Is_Comp_Ex=/a/  False}');
Error('\P{Is_Comp_Ex=/a/  False}');
Expect(1, 831, '\p{Is_Comp_Ex=false}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=false}', "");
Expect(0, 831, '\P{Is_Comp_Ex=false}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=false}', "");
Expect(0, 833, '\p{Is_Comp_Ex=false}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=false}', "");
Expect(1, 833, '\P{Is_Comp_Ex=false}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=false}', "");
Expect(1, 831, '\p{Is_Comp_Ex=	False}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=	False}', "");
Expect(0, 831, '\P{Is_Comp_Ex=	False}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=	False}', "");
Expect(0, 833, '\p{Is_Comp_Ex=	False}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=	False}', "");
Expect(1, 833, '\P{Is_Comp_Ex=	False}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=	False}', "");
Error('\p{Changes_When_NFKC_Casefolded=	Yes/a/}');
Error('\P{Changes_When_NFKC_Casefolded=	Yes/a/}');
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=- Yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=- Yes}', "");
Error('\p{CWKCF=_/a/Y}');
Error('\P{CWKCF=_/a/Y}');
Expect(1, 90, '\p{CWKCF:	y}', "");
Expect(0, 90, '\p{^CWKCF:	y}', "");
Expect(0, 90, '\P{CWKCF:	y}', "");
Expect(1, 90, '\P{^CWKCF:	y}', "");
Expect(0, 64, '\p{CWKCF:	y}', "");
Expect(1, 64, '\p{^CWKCF:	y}', "");
Expect(1, 64, '\P{CWKCF:	y}', "");
Expect(0, 64, '\P{^CWKCF:	y}', "");
Expect(1, 90, '\p{CWKCF=	-y}', "");
Expect(0, 90, '\p{^CWKCF=	-y}', "");
Expect(0, 90, '\P{CWKCF=	-y}', "");
Expect(1, 90, '\P{^CWKCF=	-y}', "");
Expect(0, 64, '\p{CWKCF=	-y}', "");
Expect(1, 64, '\p{^CWKCF=	-y}', "");
Expect(1, 64, '\P{CWKCF=	-y}', "");
Expect(0, 64, '\P{^CWKCF=	-y}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded=	 T:=}');
Error('\P{Is_Changes_When_NFKC_Casefolded=	 T:=}');
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=_t}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=_t}', "");
Error('\p{Is_CWKCF=:=_ true}');
Error('\P{Is_CWKCF=:=_ true}');
Expect(1, 90, '\p{Is_CWKCF=true}', "");
Expect(0, 90, '\p{^Is_CWKCF=true}', "");
Expect(0, 90, '\P{Is_CWKCF=true}', "");
Expect(1, 90, '\P{^Is_CWKCF=true}', "");
Expect(0, 64, '\p{Is_CWKCF=true}', "");
Expect(1, 64, '\p{^Is_CWKCF=true}', "");
Expect(1, 64, '\P{Is_CWKCF=true}', "");
Expect(0, 64, '\P{^Is_CWKCF=true}', "");
Expect(1, 90, '\p{Is_CWKCF=__TRUE}', "");
Expect(0, 90, '\p{^Is_CWKCF=__TRUE}', "");
Expect(0, 90, '\P{Is_CWKCF=__TRUE}', "");
Expect(1, 90, '\P{^Is_CWKCF=__TRUE}', "");
Expect(0, 64, '\p{Is_CWKCF=__TRUE}', "");
Expect(1, 64, '\p{^Is_CWKCF=__TRUE}', "");
Expect(1, 64, '\P{Is_CWKCF=__TRUE}', "");
Expect(0, 64, '\P{^Is_CWKCF=__TRUE}', "");
Error('\p{Changes_When_NFKC_Casefolded=:=no}');
Error('\P{Changes_When_NFKC_Casefolded=:=no}');
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=-_No}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=-_No}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=-_No}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=-_No}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=-_No}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=-_No}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=-_No}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=-_No}', "");
Error('\p{CWKCF=N/a/}');
Error('\P{CWKCF=N/a/}');
Expect(1, 64, '\p{CWKCF=n}', "");
Expect(0, 64, '\p{^CWKCF=n}', "");
Expect(0, 64, '\P{CWKCF=n}', "");
Expect(1, 64, '\P{^CWKCF=n}', "");
Expect(0, 90, '\p{CWKCF=n}', "");
Expect(1, 90, '\p{^CWKCF=n}', "");
Expect(1, 90, '\P{CWKCF=n}', "");
Expect(0, 90, '\P{^CWKCF=n}', "");
Expect(1, 64, '\p{CWKCF= 	n}', "");
Expect(0, 64, '\p{^CWKCF= 	n}', "");
Expect(0, 64, '\P{CWKCF= 	n}', "");
Expect(1, 64, '\P{^CWKCF= 	n}', "");
Expect(0, 90, '\p{CWKCF= 	n}', "");
Expect(1, 90, '\p{^CWKCF= 	n}', "");
Expect(1, 90, '\P{CWKCF= 	n}', "");
Expect(0, 90, '\P{^CWKCF= 	n}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded: 	F:=}');
Error('\P{Is_Changes_When_NFKC_Casefolded: 	F:=}');
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=  F}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=  F}', "");
Error('\p{Is_CWKCF=/a/ false}');
Error('\P{Is_CWKCF=/a/ false}');
Expect(1, 64, '\p{Is_CWKCF=false}', "");
Expect(0, 64, '\p{^Is_CWKCF=false}', "");
Expect(0, 64, '\P{Is_CWKCF=false}', "");
Expect(1, 64, '\P{^Is_CWKCF=false}', "");
Expect(0, 90, '\p{Is_CWKCF=false}', "");
Expect(1, 90, '\p{^Is_CWKCF=false}', "");
Expect(1, 90, '\P{Is_CWKCF=false}', "");
Expect(0, 90, '\P{^Is_CWKCF=false}', "");
Expect(1, 64, '\p{Is_CWKCF= -false}', "");
Expect(0, 64, '\p{^Is_CWKCF= -false}', "");
Expect(0, 64, '\P{Is_CWKCF= -false}', "");
Expect(1, 64, '\P{^Is_CWKCF= -false}', "");
Expect(0, 90, '\p{Is_CWKCF= -false}', "");
Expect(1, 90, '\p{^Is_CWKCF= -false}', "");
Expect(1, 90, '\P{Is_CWKCF= -false}', "");
Expect(0, 90, '\P{^Is_CWKCF= -false}', "");
Error('\p{NFKC_Quick_Check=	-yes:=}');
Error('\P{NFKC_Quick_Check=	-yes:=}');
Expect(1, 159, '\p{NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\P{NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\p{NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\P{NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\p{NFKC_Quick_Check=-	YES}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check=-	YES}', "");
Expect(0, 159, '\P{NFKC_Quick_Check=-	YES}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check=-	YES}', "");
Expect(0, 160, '\p{NFKC_Quick_Check=-	YES}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check=-	YES}', "");
Expect(1, 160, '\P{NFKC_Quick_Check=-	YES}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check=-	YES}', "");
Error('\p{NFKC_QC=/a/	 Y}');
Error('\P{NFKC_QC=/a/	 Y}');
Expect(1, 159, '\p{NFKC_QC=y}', "");
Expect(0, 159, '\p{^NFKC_QC=y}', "");
Expect(0, 159, '\P{NFKC_QC=y}', "");
Expect(1, 159, '\P{^NFKC_QC=y}', "");
Expect(0, 160, '\p{NFKC_QC=y}', "");
Expect(1, 160, '\p{^NFKC_QC=y}', "");
Expect(1, 160, '\P{NFKC_QC=y}', "");
Expect(0, 160, '\P{^NFKC_QC=y}', "");
Expect(1, 159, '\p{NFKC_QC=	 Y}', "");
Expect(0, 159, '\p{^NFKC_QC=	 Y}', "");
Expect(0, 159, '\P{NFKC_QC=	 Y}', "");
Expect(1, 159, '\P{^NFKC_QC=	 Y}', "");
Expect(0, 160, '\p{NFKC_QC=	 Y}', "");
Expect(1, 160, '\p{^NFKC_QC=	 Y}', "");
Expect(1, 160, '\P{NFKC_QC=	 Y}', "");
Expect(0, 160, '\P{^NFKC_QC=	 Y}', "");
Error('\p{Is_NFKC_Quick_Check=__Yes/a/}');
Error('\P{Is_NFKC_Quick_Check=__Yes/a/}');
Expect(1, 159, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKC_Quick_Check= yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check= yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check= yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check= yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check= yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check= yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check= yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check= yes}', "");
Error('\p{Is_NFKC_QC=	:=y}');
Error('\P{Is_NFKC_QC=	:=y}');
Expect(1, 159, '\p{Is_NFKC_QC=y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC=y}', "");
Expect(0, 159, '\P{Is_NFKC_QC=y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC=y}', "");
Expect(0, 160, '\p{Is_NFKC_QC=y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC=y}', "");
Expect(1, 160, '\P{Is_NFKC_QC=y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC=y}', "");
Expect(1, 159, '\p{Is_NFKC_QC=Y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC=Y}', "");
Expect(0, 159, '\P{Is_NFKC_QC=Y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC=Y}', "");
Expect(0, 160, '\p{Is_NFKC_QC=Y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC=Y}', "");
Expect(1, 160, '\P{Is_NFKC_QC=Y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC=Y}', "");
Error('\p{NFKC_Quick_Check=no/a/}');
Error('\P{NFKC_Quick_Check=no/a/}');
Expect(1, 160, '\p{NFKC_Quick_Check=no}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check=no}', "");
Expect(0, 160, '\P{NFKC_Quick_Check=no}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check=no}', "");
Expect(0, 159, '\p{NFKC_Quick_Check=no}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check=no}', "");
Expect(1, 159, '\P{NFKC_Quick_Check=no}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check=no}', "");
Expect(1, 160, '\p{NFKC_Quick_Check=-no}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check=-no}', "");
Expect(0, 160, '\P{NFKC_Quick_Check=-no}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check=-no}', "");
Expect(0, 159, '\p{NFKC_Quick_Check=-no}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check=-no}', "");
Expect(1, 159, '\P{NFKC_Quick_Check=-no}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check=-no}', "");
Error('\p{NFKC_QC:	_:=N}');
Error('\P{NFKC_QC:	_:=N}');
Expect(1, 160, '\p{NFKC_QC=n}', "");
Expect(0, 160, '\p{^NFKC_QC=n}', "");
Expect(0, 160, '\P{NFKC_QC=n}', "");
Expect(1, 160, '\P{^NFKC_QC=n}', "");
Expect(0, 159, '\p{NFKC_QC=n}', "");
Expect(1, 159, '\p{^NFKC_QC=n}', "");
Expect(1, 159, '\P{NFKC_QC=n}', "");
Expect(0, 159, '\P{^NFKC_QC=n}', "");
Expect(1, 160, '\p{NFKC_QC= N}', "");
Expect(0, 160, '\p{^NFKC_QC= N}', "");
Expect(0, 160, '\P{NFKC_QC= N}', "");
Expect(1, 160, '\P{^NFKC_QC= N}', "");
Expect(0, 159, '\p{NFKC_QC= N}', "");
Expect(1, 159, '\p{^NFKC_QC= N}', "");
Expect(1, 159, '\P{NFKC_QC= N}', "");
Expect(0, 159, '\P{^NFKC_QC= N}', "");
Error('\p{Is_NFKC_Quick_Check:	 :=NO}');
Error('\P{Is_NFKC_Quick_Check:	 :=NO}');
Expect(1, 160, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\p{Is_NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=_	No}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=_	No}', "");
Error('\p{Is_NFKC_QC=:=N}');
Error('\P{Is_NFKC_QC=:=N}');
Expect(1, 160, '\p{Is_NFKC_QC=n}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=n}', "");
Expect(0, 160, '\P{Is_NFKC_QC=n}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=n}', "");
Expect(0, 159, '\p{Is_NFKC_QC=n}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=n}', "");
Expect(1, 159, '\P{Is_NFKC_QC=n}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=n}', "");
Expect(1, 160, '\p{Is_NFKC_QC=_ N}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=_ N}', "");
Expect(0, 160, '\P{Is_NFKC_QC=_ N}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=_ N}', "");
Expect(0, 159, '\p{Is_NFKC_QC=_ N}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=_ N}', "");
Expect(1, 159, '\P{Is_NFKC_QC=_ N}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=_ N}', "");
Error('\p{NFKC_Quick_Check=-	MAYBE:=}');
Error('\P{NFKC_Quick_Check=-	MAYBE:=}');
Expect(1, 772, '\p{NFKC_Quick_Check: maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check: maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check: maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check: maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check: maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check: maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check: maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check: maybe}', "");
Expect(1, 772, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check=__Maybe}', "");
Error('\p{NFKC_QC:   -m/a/}');
Error('\P{NFKC_QC:   -m/a/}');
Expect(1, 772, '\p{NFKC_QC=m}', "");
Expect(0, 772, '\p{^NFKC_QC=m}', "");
Expect(0, 772, '\P{NFKC_QC=m}', "");
Expect(1, 772, '\P{^NFKC_QC=m}', "");
Expect(0, 767, '\p{NFKC_QC=m}', "");
Expect(1, 767, '\p{^NFKC_QC=m}', "");
Expect(1, 767, '\P{NFKC_QC=m}', "");
Expect(0, 767, '\P{^NFKC_QC=m}', "");
Expect(1, 772, '\p{NFKC_QC= _M}', "");
Expect(0, 772, '\p{^NFKC_QC= _M}', "");
Expect(0, 772, '\P{NFKC_QC= _M}', "");
Expect(1, 772, '\P{^NFKC_QC= _M}', "");
Expect(0, 767, '\p{NFKC_QC= _M}', "");
Expect(1, 767, '\p{^NFKC_QC= _M}', "");
Expect(1, 767, '\P{NFKC_QC= _M}', "");
Expect(0, 767, '\P{^NFKC_QC= _M}', "");
Error('\p{Is_NFKC_Quick_Check=/a/-	maybe}');
Error('\P{Is_NFKC_Quick_Check=/a/-	maybe}');
Expect(1, 772, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{Is_NFKC_Quick_Check=	maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check=	maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check=	maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check=	maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check=	maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check=	maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check=	maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check=	maybe}', "");
Error('\p{Is_NFKC_QC=/a/_	M}');
Error('\P{Is_NFKC_QC=/a/_	M}');
Expect(1, 772, '\p{Is_NFKC_QC:m}', "");
Expect(0, 772, '\p{^Is_NFKC_QC:m}', "");
Expect(0, 772, '\P{Is_NFKC_QC:m}', "");
Expect(1, 772, '\P{^Is_NFKC_QC:m}', "");
Expect(0, 767, '\p{Is_NFKC_QC:m}', "");
Expect(1, 767, '\p{^Is_NFKC_QC:m}', "");
Expect(1, 767, '\P{Is_NFKC_QC:m}', "");
Expect(0, 767, '\P{^Is_NFKC_QC:m}', "");
Expect(1, 772, '\p{Is_NFKC_QC= m}', "");
Expect(0, 772, '\p{^Is_NFKC_QC= m}', "");
Expect(0, 772, '\P{Is_NFKC_QC= m}', "");
Expect(1, 772, '\P{^Is_NFKC_QC= m}', "");
Expect(0, 767, '\p{Is_NFKC_QC= m}', "");
Expect(1, 767, '\p{^Is_NFKC_QC= m}', "");
Expect(1, 767, '\P{Is_NFKC_QC= m}', "");
Expect(0, 767, '\P{^Is_NFKC_QC= m}', "");
Error('\p{Jamo_Short_Name=}');
Error('\P{Jamo_Short_Name=}');
Error('\p{JSN=}');
Error('\P{JSN=}');
Error('\p{Is_Jamo_Short_Name=}');
Error('\P{Is_Jamo_Short_Name=}');
Error('\p{Is_JSN=}');
Error('\P{Is_JSN=}');
Error('\p{Jamo_Short_Name=S}');
Error('\P{Jamo_Short_Name=S}');
Error('\p{JSN=S}');
Error('\P{JSN=S}');
Error('\p{Is_Jamo_Short_Name=S}');
Error('\P{Is_Jamo_Short_Name=S}');
Error('\p{Is_JSN=S}');
Error('\P{Is_JSN=S}');
Error('\p{Jamo_Short_Name=GG}');
Error('\P{Jamo_Short_Name=GG}');
Error('\p{JSN=GG}');
Error('\P{JSN=GG}');
Error('\p{Is_Jamo_Short_Name=GG}');
Error('\P{Is_Jamo_Short_Name=GG}');
Error('\p{Is_JSN=GG}');
Error('\P{Is_JSN=GG}');
Error('\p{Jamo_Short_Name=YU}');
Error('\P{Jamo_Short_Name=YU}');
Error('\p{JSN=YU}');
Error('\P{JSN=YU}');
Error('\p{Is_Jamo_Short_Name=YU}');
Error('\P{Is_Jamo_Short_Name=YU}');
Error('\p{Is_JSN=YU}');
Error('\P{Is_JSN=YU}');
Error('\p{Jamo_Short_Name=WE}');
Error('\P{Jamo_Short_Name=WE}');
Error('\p{JSN=WE}');
Error('\P{JSN=WE}');
Error('\p{Is_Jamo_Short_Name=WE}');
Error('\P{Is_Jamo_Short_Name=WE}');
Error('\p{Is_JSN=WE}');
Error('\P{Is_JSN=WE}');
Error('\p{Jamo_Short_Name=LM}');
Error('\P{Jamo_Short_Name=LM}');
Error('\p{JSN=LM}');
Error('\P{JSN=LM}');
Error('\p{Is_Jamo_Short_Name=LM}');
Error('\P{Is_Jamo_Short_Name=LM}');
Error('\p{Is_JSN=LM}');
Error('\P{Is_JSN=LM}');
Error('\p{Jamo_Short_Name=K}');
Error('\P{Jamo_Short_Name=K}');
Error('\p{JSN=K}');
Error('\P{JSN=K}');
Error('\p{Is_Jamo_Short_Name=K}');
Error('\P{Is_Jamo_Short_Name=K}');
Error('\p{Is_JSN=K}');
Error('\P{Is_JSN=K}');
Error('\p{Jamo_Short_Name:	BB}');
Error('\P{Jamo_Short_Name:	BB}');
Error('\p{JSN=BB}');
Error('\P{JSN=BB}');
Error('\p{Is_Jamo_Short_Name=BB}');
Error('\P{Is_Jamo_Short_Name=BB}');
Error('\p{Is_JSN=BB}');
Error('\P{Is_JSN=BB}');
Error('\p{Jamo_Short_Name=D}');
Error('\P{Jamo_Short_Name=D}');
Error('\p{JSN=D}');
Error('\P{JSN=D}');
Error('\p{Is_Jamo_Short_Name=D}');
Error('\P{Is_Jamo_Short_Name=D}');
Error('\p{Is_JSN=D}');
Error('\P{Is_JSN=D}');
Error('\p{Jamo_Short_Name=E}');
Error('\P{Jamo_Short_Name=E}');
Error('\p{JSN=E}');
Error('\P{JSN=E}');
Error('\p{Is_Jamo_Short_Name=E}');
Error('\P{Is_Jamo_Short_Name=E}');
Error('\p{Is_JSN=E}');
Error('\P{Is_JSN=E}');
Error('\p{Jamo_Short_Name=JJ}');
Error('\P{Jamo_Short_Name=JJ}');
Error('\p{JSN=JJ}');
Error('\P{JSN=JJ}');
Error('\p{Is_Jamo_Short_Name=JJ}');
Error('\P{Is_Jamo_Short_Name=JJ}');
Error('\p{Is_JSN=JJ}');
Error('\P{Is_JSN=JJ}');
Error('\p{Jamo_Short_Name=G}');
Error('\P{Jamo_Short_Name=G}');
Error('\p{JSN=G}');
Error('\P{JSN=G}');
Error('\p{Is_Jamo_Short_Name=G}');
Error('\P{Is_Jamo_Short_Name=G}');
Error('\p{Is_JSN=G}');
Error('\P{Is_JSN=G}');
Error('\p{Jamo_Short_Name=YA}');
Error('\P{Jamo_Short_Name=YA}');
Error('\p{JSN=YA}');
Error('\P{JSN=YA}');
Error('\p{Is_Jamo_Short_Name=YA}');
Error('\P{Is_Jamo_Short_Name=YA}');
Error('\p{Is_JSN=YA}');
Error('\P{Is_JSN=YA}');
Error('\p{Jamo_Short_Name=SS}');
Error('\P{Jamo_Short_Name=SS}');
Error('\p{JSN=SS}');
Error('\P{JSN=SS}');
Error('\p{Is_Jamo_Short_Name=SS}');
Error('\P{Is_Jamo_Short_Name=SS}');
Error('\p{Is_JSN=SS}');
Error('\P{Is_JSN=SS}');
Error('\p{Jamo_Short_Name=LB}');
Error('\P{Jamo_Short_Name=LB}');
Error('\p{JSN=LB}');
Error('\P{JSN=LB}');
Error('\p{Is_Jamo_Short_Name=LB}');
Error('\P{Is_Jamo_Short_Name=LB}');
Error('\p{Is_JSN=LB}');
Error('\P{Is_JSN=LB}');
Error('\p{Jamo_Short_Name=J}');
Error('\P{Jamo_Short_Name=J}');
Error('\p{JSN=J}');
Error('\P{JSN=J}');
Error('\p{Is_Jamo_Short_Name=J}');
Error('\P{Is_Jamo_Short_Name=J}');
Error('\p{Is_JSN=J}');
Error('\P{Is_JSN=J}');
Error('\p{Jamo_Short_Name=NH}');
Error('\P{Jamo_Short_Name=NH}');
Error('\p{JSN:NH}');
Error('\P{JSN:NH}');
Error('\p{Is_Jamo_Short_Name=NH}');
Error('\P{Is_Jamo_Short_Name=NH}');
Error('\p{Is_JSN=NH}');
Error('\P{Is_JSN=NH}');
Error('\p{Jamo_Short_Name=YEO}');
Error('\P{Jamo_Short_Name=YEO}');
Error('\p{JSN=YEO}');
Error('\P{JSN=YEO}');
Error('\p{Is_Jamo_Short_Name=YEO}');
Error('\P{Is_Jamo_Short_Name=YEO}');
Error('\p{Is_JSN=YEO}');
Error('\P{Is_JSN=YEO}');
Error('\p{Jamo_Short_Name=LP}');
Error('\P{Jamo_Short_Name=LP}');
Error('\p{JSN=LP}');
Error('\P{JSN=LP}');
Error('\p{Is_Jamo_Short_Name=LP}');
Error('\P{Is_Jamo_Short_Name=LP}');
Error('\p{Is_JSN=LP}');
Error('\P{Is_JSN=LP}');
Error('\p{Jamo_Short_Name=NJ}');
Error('\P{Jamo_Short_Name=NJ}');
Error('\p{JSN=NJ}');
Error('\P{JSN=NJ}');
Error('\p{Is_Jamo_Short_Name=NJ}');
Error('\P{Is_Jamo_Short_Name=NJ}');
Error('\p{Is_JSN=NJ}');
Error('\P{Is_JSN=NJ}');
Error('\p{Jamo_Short_Name=B}');
Error('\P{Jamo_Short_Name=B}');
Error('\p{JSN:	B}');
Error('\P{JSN:	B}');
Error('\p{Is_Jamo_Short_Name=B}');
Error('\P{Is_Jamo_Short_Name=B}');
Error('\p{Is_JSN=B}');
Error('\P{Is_JSN=B}');
Error('\p{Jamo_Short_Name=WA}');
Error('\P{Jamo_Short_Name=WA}');
Error('\p{JSN=WA}');
Error('\P{JSN=WA}');
Error('\p{Is_Jamo_Short_Name=WA}');
Error('\P{Is_Jamo_Short_Name=WA}');
Error('\p{Is_JSN=WA}');
Error('\P{Is_JSN=WA}');
Error('\p{Jamo_Short_Name=LH}');
Error('\P{Jamo_Short_Name=LH}');
Error('\p{JSN:   LH}');
Error('\P{JSN:   LH}');
Error('\p{Is_Jamo_Short_Name=LH}');
Error('\P{Is_Jamo_Short_Name=LH}');
Error('\p{Is_JSN=LH}');
Error('\P{Is_JSN=LH}');
Error('\p{Jamo_Short_Name=YI}');
Error('\P{Jamo_Short_Name=YI}');
Error('\p{JSN=YI}');
Error('\P{JSN=YI}');
Error('\p{Is_Jamo_Short_Name=YI}');
Error('\P{Is_Jamo_Short_Name=YI}');
Error('\p{Is_JSN=YI}');
Error('\P{Is_JSN=YI}');
Error('\p{Jamo_Short_Name=WEO}');
Error('\P{Jamo_Short_Name=WEO}');
Error('\p{JSN=WEO}');
Error('\P{JSN=WEO}');
Error('\p{Is_Jamo_Short_Name=WEO}');
Error('\P{Is_Jamo_Short_Name=WEO}');
Error('\p{Is_JSN=WEO}');
Error('\P{Is_JSN=WEO}');
Error('\p{Jamo_Short_Name=LS}');
Error('\P{Jamo_Short_Name=LS}');
Error('\p{JSN=LS}');
Error('\P{JSN=LS}');
Error('\p{Is_Jamo_Short_Name=LS}');
Error('\P{Is_Jamo_Short_Name=LS}');
Error('\p{Is_JSN=LS}');
Error('\P{Is_JSN=LS}');
Error('\p{Jamo_Short_Name=BS}');
Error('\P{Jamo_Short_Name=BS}');
Error('\p{JSN=BS}');
Error('\P{JSN=BS}');
Error('\p{Is_Jamo_Short_Name=BS}');
Error('\P{Is_Jamo_Short_Name=BS}');
Error('\p{Is_JSN:BS}');
Error('\P{Is_JSN:BS}');
Error('\p{Jamo_Short_Name=YO}');
Error('\P{Jamo_Short_Name=YO}');
Error('\p{JSN=YO}');
Error('\P{JSN=YO}');
Error('\p{Is_Jamo_Short_Name=YO}');
Error('\P{Is_Jamo_Short_Name=YO}');
Error('\p{Is_JSN=YO}');
Error('\P{Is_JSN=YO}');
Error('\p{Jamo_Short_Name=OE}');
Error('\P{Jamo_Short_Name=OE}');
Error('\p{JSN: OE}');
Error('\P{JSN: OE}');
Error('\p{Is_Jamo_Short_Name=OE}');
Error('\P{Is_Jamo_Short_Name=OE}');
Error('\p{Is_JSN=OE}');
Error('\P{Is_JSN=OE}');
Error('\p{Jamo_Short_Name=M}');
Error('\P{Jamo_Short_Name=M}');
Error('\p{JSN=M}');
Error('\P{JSN=M}');
Error('\p{Is_Jamo_Short_Name=M}');
Error('\P{Is_Jamo_Short_Name=M}');
Error('\p{Is_JSN=M}');
Error('\P{Is_JSN=M}');
Error('\p{Jamo_Short_Name=EO}');
Error('\P{Jamo_Short_Name=EO}');
Error('\p{JSN:EO}');
Error('\P{JSN:EO}');
Error('\p{Is_Jamo_Short_Name=EO}');
Error('\P{Is_Jamo_Short_Name=EO}');
Error('\p{Is_JSN=EO}');
Error('\P{Is_JSN=EO}');
Error('\p{Jamo_Short_Name=C}');
Error('\P{Jamo_Short_Name=C}');
Error('\p{JSN=C}');
Error('\P{JSN=C}');
Error('\p{Is_Jamo_Short_Name=C}');
Error('\P{Is_Jamo_Short_Name=C}');
Error('\p{Is_JSN=C}');
Error('\P{Is_JSN=C}');
Error('\p{Jamo_Short_Name=WI}');
Error('\P{Jamo_Short_Name=WI}');
Error('\p{JSN=WI}');
Error('\P{JSN=WI}');
Error('\p{Is_Jamo_Short_Name=WI}');
Error('\P{Is_Jamo_Short_Name=WI}');
Error('\p{Is_JSN=WI}');
Error('\P{Is_JSN=WI}');
Error('\p{Jamo_Short_Name=EU}');
Error('\P{Jamo_Short_Name=EU}');
Error('\p{JSN=EU}');
Error('\P{JSN=EU}');
Error('\p{Is_Jamo_Short_Name=EU}');
Error('\P{Is_Jamo_Short_Name=EU}');
Error('\p{Is_JSN=EU}');
Error('\P{Is_JSN=EU}');
Error('\p{Jamo_Short_Name=LG}');
Error('\P{Jamo_Short_Name=LG}');
Error('\p{JSN=LG}');
Error('\P{JSN=LG}');
Error('\p{Is_Jamo_Short_Name=LG}');
Error('\P{Is_Jamo_Short_Name=LG}');
Error('\p{Is_JSN=LG}');
Error('\P{Is_JSN=LG}');
Error('\p{Jamo_Short_Name=L}');
Error('\P{Jamo_Short_Name=L}');
Error('\p{JSN=L}');
Error('\P{JSN=L}');
Error('\p{Is_Jamo_Short_Name:L}');
Error('\P{Is_Jamo_Short_Name:L}');
Error('\p{Is_JSN=L}');
Error('\P{Is_JSN=L}');
Error('\p{Jamo_Short_Name=P}');
Error('\P{Jamo_Short_Name=P}');
Error('\p{JSN=P}');
Error('\P{JSN=P}');
Error('\p{Is_Jamo_Short_Name=P}');
Error('\P{Is_Jamo_Short_Name=P}');
Error('\p{Is_JSN=P}');
Error('\P{Is_JSN=P}');
Error('\p{Jamo_Short_Name=DD}');
Error('\P{Jamo_Short_Name=DD}');
Error('\p{JSN=DD}');
Error('\P{JSN=DD}');
Error('\p{Is_Jamo_Short_Name=DD}');
Error('\P{Is_Jamo_Short_Name=DD}');
Error('\p{Is_JSN=DD}');
Error('\P{Is_JSN=DD}');
Error('\p{Jamo_Short_Name=NG}');
Error('\P{Jamo_Short_Name=NG}');
Error('\p{JSN=NG}');
Error('\P{JSN=NG}');
Error('\p{Is_Jamo_Short_Name=NG}');
Error('\P{Is_Jamo_Short_Name=NG}');
Error('\p{Is_JSN=NG}');
Error('\P{Is_JSN=NG}');
Error('\p{Jamo_Short_Name=AE}');
Error('\P{Jamo_Short_Name=AE}');
Error('\p{JSN=AE}');
Error('\P{JSN=AE}');
Error('\p{Is_Jamo_Short_Name=AE}');
Error('\P{Is_Jamo_Short_Name=AE}');
Error('\p{Is_JSN=AE}');
Error('\P{Is_JSN=AE}');
Error('\p{Jamo_Short_Name=T}');
Error('\P{Jamo_Short_Name=T}');
Error('\p{JSN: T}');
Error('\P{JSN: T}');
Error('\p{Is_Jamo_Short_Name=T}');
Error('\P{Is_Jamo_Short_Name=T}');
Error('\p{Is_JSN=T}');
Error('\P{Is_JSN=T}');
Error('\p{Jamo_Short_Name=A}');
Error('\P{Jamo_Short_Name=A}');
Error('\p{JSN=A}');
Error('\P{JSN=A}');
Error('\p{Is_Jamo_Short_Name=A}');
Error('\P{Is_Jamo_Short_Name=A}');
Error('\p{Is_JSN=A}');
Error('\P{Is_JSN=A}');
Error('\p{Jamo_Short_Name=N}');
Error('\P{Jamo_Short_Name=N}');
Error('\p{JSN=N}');
Error('\P{JSN=N}');
Error('\p{Is_Jamo_Short_Name=N}');
Error('\P{Is_Jamo_Short_Name=N}');
Error('\p{Is_JSN=N}');
Error('\P{Is_JSN=N}');
Error('\p{Jamo_Short_Name=YAE}');
Error('\P{Jamo_Short_Name=YAE}');
Error('\p{JSN=YAE}');
Error('\P{JSN=YAE}');
Error('\p{Is_Jamo_Short_Name=YAE}');
Error('\P{Is_Jamo_Short_Name=YAE}');
Error('\p{Is_JSN=YAE}');
Error('\P{Is_JSN=YAE}');
Error('\p{Jamo_Short_Name=U}');
Error('\P{Jamo_Short_Name=U}');
Error('\p{JSN=U}');
Error('\P{JSN=U}');
Error('\p{Is_Jamo_Short_Name=U}');
Error('\P{Is_Jamo_Short_Name=U}');
Error('\p{Is_JSN: U}');
Error('\P{Is_JSN: U}');
Error('\p{Jamo_Short_Name=WAE}');
Error('\P{Jamo_Short_Name=WAE}');
Error('\p{JSN=WAE}');
Error('\P{JSN=WAE}');
Error('\p{Is_Jamo_Short_Name=WAE}');
Error('\P{Is_Jamo_Short_Name=WAE}');
Error('\p{Is_JSN=WAE}');
Error('\P{Is_JSN=WAE}');
Error('\p{Jamo_Short_Name=GS}');
Error('\P{Jamo_Short_Name=GS}');
Error('\p{JSN=GS}');
Error('\P{JSN=GS}');
Error('\p{Is_Jamo_Short_Name=GS}');
Error('\P{Is_Jamo_Short_Name=GS}');
Error('\p{Is_JSN:GS}');
Error('\P{Is_JSN:GS}');
Error('\p{Jamo_Short_Name=H}');
Error('\P{Jamo_Short_Name=H}');
Error('\p{JSN=H}');
Error('\P{JSN=H}');
Error('\p{Is_Jamo_Short_Name=H}');
Error('\P{Is_Jamo_Short_Name=H}');
Error('\p{Is_JSN=H}');
Error('\P{Is_JSN=H}');
Error('\p{Jamo_Short_Name=LT}');
Error('\P{Jamo_Short_Name=LT}');
Error('\p{JSN=LT}');
Error('\P{JSN=LT}');
Error('\p{Is_Jamo_Short_Name=LT}');
Error('\P{Is_Jamo_Short_Name=LT}');
Error('\p{Is_JSN=LT}');
Error('\P{Is_JSN=LT}');
Error('\p{Jamo_Short_Name=YE}');
Error('\P{Jamo_Short_Name=YE}');
Error('\p{JSN=YE}');
Error('\P{JSN=YE}');
Error('\p{Is_Jamo_Short_Name: YE}');
Error('\P{Is_Jamo_Short_Name: YE}');
Error('\p{Is_JSN=YE}');
Error('\P{Is_JSN=YE}');
Error('\p{Jamo_Short_Name=I}');
Error('\P{Jamo_Short_Name=I}');
Error('\p{JSN=I}');
Error('\P{JSN=I}');
Error('\p{Is_Jamo_Short_Name: I}');
Error('\P{Is_Jamo_Short_Name: I}');
Error('\p{Is_JSN=I}');
Error('\P{Is_JSN=I}');
Error('\p{Jamo_Short_Name=R}');
Error('\P{Jamo_Short_Name=R}');
Error('\p{JSN=R}');
Error('\P{JSN=R}');
Error('\p{Is_Jamo_Short_Name=R}');
Error('\P{Is_Jamo_Short_Name=R}');
Error('\p{Is_JSN=R}');
Error('\P{Is_JSN=R}');
Error('\p{Jamo_Short_Name=O}');
Error('\P{Jamo_Short_Name=O}');
Error('\p{JSN=O}');
Error('\P{JSN=O}');
Error('\p{Is_Jamo_Short_Name=O}');
Error('\P{Is_Jamo_Short_Name=O}');
Error('\p{Is_JSN=O}');
Error('\P{Is_JSN=O}');
Error('\p{Age=  00-00 00	003.2/a/}');
Error('\P{Age=  00-00 00	003.2/a/}');
Expect(1, 544, '\p{Age=+003.2}', "");
Expect(0, 544, '\p{^Age=+003.2}', "");
Expect(0, 544, '\P{Age=+003.2}', "");
Expect(1, 544, '\P{^Age=+003.2}', "");
Expect(0, 543, '\p{Age=+003.2}', "");
Expect(1, 543, '\p{^Age=+003.2}', "");
Expect(1, 543, '\P{Age=+003.2}', "");
Expect(0, 543, '\P{^Age=+003.2}', "");
Error('\p{Is_Age:   _-+00003.2/a/}');
Error('\P{Is_Age:   _-+00003.2/a/}');
Expect(1, 544, '\p{Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(0, 544, '\p{^Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(0, 544, '\P{Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(1, 544, '\P{^Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(0, 543, '\p{Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(1, 543, '\p{^Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(1, 543, '\P{Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Expect(0, 543, '\P{^Is_Age:   +0_0_0_0_0_0_0_003.2}', "");
Error('\p{Age=_0_0-0	0/a/0_0_0-02.0}');
Error('\P{Age=_0_0-0	0/a/0_0_0-02.0}');
Expect(1, 1441, '\p{Age=+000_000_02.0}', "");
Expect(0, 1441, '\p{^Age=+000_000_02.0}', "");
Expect(0, 1441, '\P{Age=+000_000_02.0}', "");
Expect(1, 1441, '\P{^Age=+000_000_02.0}', "");
Expect(0, 1424, '\p{Age=+000_000_02.0}', "");
Expect(1, 1424, '\p{^Age=+000_000_02.0}', "");
Expect(1, 1424, '\P{Age=+000_000_02.0}', "");
Expect(0, 1424, '\P{^Age=+000_000_02.0}', "");
Error('\p{Is_Age= :=02.0}');
Error('\P{Is_Age= :=02.0}');
Expect(1, 1441, '\p{Is_Age=+0_0_0_0_002.0}', "");
Expect(0, 1441, '\p{^Is_Age=+0_0_0_0_002.0}', "");
Expect(0, 1441, '\P{Is_Age=+0_0_0_0_002.0}', "");
Expect(1, 1441, '\P{^Is_Age=+0_0_0_0_002.0}', "");
Expect(0, 1424, '\p{Is_Age=+0_0_0_0_002.0}', "");
Expect(1, 1424, '\p{^Is_Age=+0_0_0_0_002.0}', "");
Expect(1, 1424, '\P{Is_Age=+0_0_0_0_002.0}', "");
Expect(0, 1424, '\P{^Is_Age=+0_0_0_0_002.0}', "");
Error('\p{Age=_/a/000000001.1}');
Error('\P{Age=_/a/000000001.1}');
Expect(1, 501, '\p{Age=000_000_1.1}', "");
Expect(0, 501, '\p{^Age=000_000_1.1}', "");
Expect(0, 501, '\P{Age=000_000_1.1}', "");
Expect(1, 501, '\P{^Age=000_000_1.1}', "");
Expect(0, 505, '\p{Age=000_000_1.1}', "");
Expect(1, 505, '\p{^Age=000_000_1.1}', "");
Expect(1, 505, '\P{Age=000_000_1.1}', "");
Expect(0, 505, '\P{^Age=000_000_1.1}', "");
Error('\p{Is_Age=-_+00000001.1/a/}');
Error('\P{Is_Age=-_+00000001.1/a/}');
Expect(1, 501, '\p{Is_Age=0001.1}', "");
Expect(0, 501, '\p{^Is_Age=0001.1}', "");
Expect(0, 501, '\P{Is_Age=0001.1}', "");
Expect(1, 501, '\P{^Is_Age=0001.1}', "");
Expect(0, 505, '\p{Is_Age=0001.1}', "");
Expect(1, 505, '\p{^Is_Age=0001.1}', "");
Expect(1, 505, '\P{Is_Age=0001.1}', "");
Expect(0, 505, '\P{^Is_Age=0001.1}', "");
Error('\p{Age= /a/0005.0}');
Error('\P{Age= /a/0005.0}');
Expect(1, 591, '\p{Age=+00000005.0}', "");
Expect(0, 591, '\p{^Age=+00000005.0}', "");
Expect(0, 591, '\P{Age=+00000005.0}', "");
Expect(1, 591, '\P{^Age=+00000005.0}', "");
Expect(0, 577, '\p{Age=+00000005.0}', "");
Expect(1, 577, '\p{^Age=+00000005.0}', "");
Expect(1, 577, '\P{Age=+00000005.0}', "");
Expect(0, 577, '\P{^Age=+00000005.0}', "");
Error('\p{Is_Age=	/a/+0000000 5.0}');
Error('\P{Is_Age=	/a/+0000000 5.0}');
Expect(1, 591, '\p{Is_Age=5.0}', "");
Expect(0, 591, '\p{^Is_Age=5.0}', "");
Expect(0, 591, '\P{Is_Age=5.0}', "");
Expect(1, 591, '\P{^Is_Age=5.0}', "");
Expect(0, 577, '\p{Is_Age=5.0}', "");
Expect(1, 577, '\p{^Is_Age=5.0}', "");
Expect(1, 577, '\P{Is_Age=5.0}', "");
Expect(0, 577, '\P{^Is_Age=5.0}', "");
Error('\p{Age:   :=		0000003.0}');
Error('\P{Age:   :=		0000003.0}');
Expect(1, 505, '\p{Age=0000003.0}', "");
Expect(0, 505, '\p{^Age=0000003.0}', "");
Expect(0, 505, '\P{Age=0000003.0}', "");
Expect(1, 505, '\P{^Age=0000003.0}', "");
Expect(0, 501, '\p{Age=0000003.0}', "");
Expect(1, 501, '\p{^Age=0000003.0}', "");
Expect(1, 501, '\P{Age=0000003.0}', "");
Expect(0, 501, '\P{^Age=0000003.0}', "");
Error('\p{Is_Age=/a/ _0 0_03.0}');
Error('\P{Is_Age=/a/ _0 0_03.0}');
Expect(1, 505, '\p{Is_Age=3.0}', "");
Expect(0, 505, '\p{^Is_Age=3.0}', "");
Expect(0, 505, '\P{Is_Age=3.0}', "");
Expect(1, 505, '\P{^Is_Age=3.0}', "");
Expect(0, 501, '\p{Is_Age=3.0}', "");
Expect(1, 501, '\p{^Is_Age=3.0}', "");
Expect(1, 501, '\P{Is_Age=3.0}', "");
Expect(0, 501, '\P{^Is_Age=3.0}', "");
Error('\p{Age=	/a/UNASSIGNED}');
Error('\P{Age=	/a/UNASSIGNED}');
Expect(1, 889, '\p{Age=unassigned}', "");
Expect(0, 889, '\p{^Age=unassigned}', "");
Expect(0, 889, '\P{Age=unassigned}', "");
Expect(1, 889, '\P{^Age=unassigned}', "");
Expect(0, 887, '\p{Age=unassigned}', "");
Expect(1, 887, '\p{^Age=unassigned}', "");
Expect(1, 887, '\P{Age=unassigned}', "");
Expect(0, 887, '\P{^Age=unassigned}', "");
Expect(1, 889, '\p{Age=__UNASSIGNED}', "");
Expect(0, 889, '\p{^Age=__UNASSIGNED}', "");
Expect(0, 889, '\P{Age=__UNASSIGNED}', "");
Expect(1, 889, '\P{^Age=__UNASSIGNED}', "");
Expect(0, 887, '\p{Age=__UNASSIGNED}', "");
Expect(1, 887, '\p{^Age=__UNASSIGNED}', "");
Expect(1, 887, '\P{Age=__UNASSIGNED}', "");
Expect(0, 887, '\P{^Age=__UNASSIGNED}', "");
Error('\p{Is_Age=	:=unassigned}');
Error('\P{Is_Age=	:=unassigned}');
Expect(1, 889, '\p{Is_Age=unassigned}', "");
Expect(0, 889, '\p{^Is_Age=unassigned}', "");
Expect(0, 889, '\P{Is_Age=unassigned}', "");
Expect(1, 889, '\P{^Is_Age=unassigned}', "");
Expect(0, 887, '\p{Is_Age=unassigned}', "");
Expect(1, 887, '\p{^Is_Age=unassigned}', "");
Expect(1, 887, '\P{Is_Age=unassigned}', "");
Expect(0, 887, '\P{^Is_Age=unassigned}', "");
Expect(1, 889, '\p{Is_Age:   Unassigned}', "");
Expect(0, 889, '\p{^Is_Age:   Unassigned}', "");
Expect(0, 889, '\P{Is_Age:   Unassigned}', "");
Expect(1, 889, '\P{^Is_Age:   Unassigned}', "");
Expect(0, 887, '\p{Is_Age:   Unassigned}', "");
Expect(1, 887, '\p{^Is_Age:   Unassigned}', "");
Expect(1, 887, '\P{Is_Age:   Unassigned}', "");
Expect(0, 887, '\P{^Is_Age:   Unassigned}', "");
Error('\p{Age=_+0-0 00	05.1:=}');
Error('\P{Age=_+0-0 00	05.1:=}');
Expect(1, 883, '\p{Age=0_0_0_005.1}', "");
Expect(0, 883, '\p{^Age=0_0_0_005.1}', "");
Expect(0, 883, '\P{Age=0_0_0_005.1}', "");
Expect(1, 883, '\P{^Age=0_0_0_005.1}', "");
Expect(0, 879, '\p{Age=0_0_0_005.1}', "");
Expect(1, 879, '\p{^Age=0_0_0_005.1}', "");
Expect(1, 879, '\P{Age=0_0_0_005.1}', "");
Expect(0, 879, '\P{^Age=0_0_0_005.1}', "");
Error('\p{Is_Age=/a/__5.1}');
Error('\P{Is_Age=/a/__5.1}');
Expect(1, 883, '\p{Is_Age=00000_5.1}', "");
Expect(0, 883, '\p{^Is_Age=00000_5.1}', "");
Expect(0, 883, '\P{Is_Age=00000_5.1}', "");
Expect(1, 883, '\P{^Is_Age=00000_5.1}', "");
Expect(0, 879, '\p{Is_Age=00000_5.1}', "");
Expect(1, 879, '\p{^Is_Age=00000_5.1}', "");
Expect(1, 879, '\P{Is_Age=00000_5.1}', "");
Expect(0, 879, '\P{^Is_Age=00000_5.1}', "");
Error('\p{Age= 0	00_0:=0_0004.0}');
Error('\P{Age= 0	00_0:=0_0004.0}');
Expect(1, 545, '\p{Age=00_00_4.0}', "");
Expect(0, 545, '\p{^Age=00_00_4.0}', "");
Expect(0, 545, '\P{Age=00_00_4.0}', "");
Expect(1, 545, '\P{^Age=00_00_4.0}', "");
Expect(0, 544, '\p{Age=00_00_4.0}', "");
Expect(1, 544, '\p{^Age=00_00_4.0}', "");
Expect(1, 544, '\P{Age=00_00_4.0}', "");
Expect(0, 544, '\P{^Age=00_00_4.0}', "");
Error('\p{Is_Age=/a/ _+0_4.0}');
Error('\P{Is_Age=/a/ _+0_4.0}');
Expect(1, 545, '\p{Is_Age=0000004.0}', "");
Expect(0, 545, '\p{^Is_Age=0000004.0}', "");
Expect(0, 545, '\P{Is_Age=0000004.0}', "");
Expect(1, 545, '\P{^Is_Age=0000004.0}', "");
Expect(0, 544, '\p{Is_Age=0000004.0}', "");
Expect(1, 544, '\p{^Is_Age=0000004.0}', "");
Expect(1, 544, '\P{Is_Age=0000004.0}', "");
Expect(0, 544, '\P{^Is_Age=0000004.0}', "");
Error('\p{Age=_0	0_0_0	005.2/a/}');
Error('\P{Age=_0	0_0_0	005.2/a/}');
Expect(1, 1317, '\p{Age=0_0_0_005.2}', "");
Expect(0, 1317, '\p{^Age=0_0_0_005.2}', "");
Expect(0, 1317, '\P{Age=0_0_0_005.2}', "");
Expect(1, 1317, '\P{^Age=0_0_0_005.2}', "");
Expect(0, 1315, '\p{Age=0_0_0_005.2}', "");
Expect(1, 1315, '\p{^Age=0_0_0_005.2}', "");
Expect(1, 1315, '\P{Age=0_0_0_005.2}', "");
Expect(0, 1315, '\P{^Age=0_0_0_005.2}', "");
Error('\p{Is_Age=_:=00 00_0005.2}');
Error('\P{Is_Age=_:=00 00_0005.2}');
Expect(1, 1317, '\p{Is_Age=+00005.2}', "");
Expect(0, 1317, '\p{^Is_Age=+00005.2}', "");
Expect(0, 1317, '\P{Is_Age=+00005.2}', "");
Expect(1, 1317, '\P{^Is_Age=+00005.2}', "");
Expect(0, 1315, '\p{Is_Age=+00005.2}', "");
Expect(1, 1315, '\p{^Is_Age=+00005.2}', "");
Expect(1, 1315, '\P{Is_Age=+00005.2}', "");
Expect(0, 1315, '\P{^Is_Age=+00005.2}', "");
Error('\p{Age=:=_0003.1}');
Error('\P{Age=:=_0003.1}');
Expect(1, 1013, '\p{Age=00_00_03.1}', "");
Expect(0, 1013, '\p{^Age=00_00_03.1}', "");
Expect(0, 1013, '\P{Age=00_00_03.1}', "");
Expect(1, 1013, '\P{^Age=00_00_03.1}', "");
Expect(0, 1011, '\p{Age=00_00_03.1}', "");
Expect(1, 1011, '\p{^Age=00_00_03.1}', "");
Expect(1, 1011, '\P{Age=00_00_03.1}', "");
Expect(0, 1011, '\P{^Age=00_00_03.1}', "");
Error('\p{Is_Age=/a/00 00	00-03.1}');
Error('\P{Is_Age=/a/00 00	00-03.1}');
Expect(1, 1013, '\p{Is_Age=000_3.1}', "");
Expect(0, 1013, '\p{^Is_Age=000_3.1}', "");
Expect(0, 1013, '\P{Is_Age=000_3.1}', "");
Expect(1, 1013, '\P{^Is_Age=000_3.1}', "");
Expect(0, 1011, '\p{Is_Age=000_3.1}', "");
Expect(1, 1011, '\p{^Is_Age=000_3.1}', "");
Expect(1, 1011, '\P{Is_Age=000_3.1}', "");
Expect(0, 1011, '\P{^Is_Age=000_3.1}', "");
Error('\p{Age=-00	2.1:=}');
Error('\P{Age=-00	2.1:=}');
Expect(1, 8364, '\p{Age=0_0_02.1}', "");
Expect(0, 8364, '\p{^Age=0_0_02.1}', "");
Expect(0, 8364, '\P{Age=0_0_02.1}', "");
Expect(1, 8364, '\P{^Age=0_0_02.1}', "");
Expect(0, 8363, '\p{Age=0_0_02.1}', "");
Expect(1, 8363, '\p{^Age=0_0_02.1}', "");
Expect(1, 8363, '\P{Age=0_0_02.1}', "");
Expect(0, 8363, '\P{^Age=0_0_02.1}', "");
Error('\p{Is_Age=- 0000000002.1:=}');
Error('\P{Is_Age=- 0000000002.1:=}');
Expect(1, 8364, '\p{Is_Age=0000000002.1}', "");
Expect(0, 8364, '\p{^Is_Age=0000000002.1}', "");
Expect(0, 8364, '\P{Is_Age=0000000002.1}', "");
Expect(1, 8364, '\P{^Is_Age=0000000002.1}', "");
Expect(0, 8363, '\p{Is_Age=0000000002.1}', "");
Expect(1, 8363, '\p{^Is_Age=0000000002.1}', "");
Expect(1, 8363, '\P{Is_Age=0000000002.1}', "");
Expect(0, 8363, '\P{^Is_Age=0000000002.1}', "");
Error('\p{Age=_004.1:=}');
Error('\P{Age=_004.1:=}');
Expect(1, 577, '\p{Age=+00000004.1}', "");
Expect(0, 577, '\p{^Age=+00000004.1}', "");
Expect(0, 577, '\P{Age=+00000004.1}', "");
Expect(1, 577, '\P{^Age=+00000004.1}', "");
Expect(0, 566, '\p{Age=+00000004.1}', "");
Expect(1, 566, '\p{^Age=+00000004.1}', "");
Expect(1, 566, '\P{Age=+00000004.1}', "");
Expect(0, 566, '\P{^Age=+00000004.1}', "");
Error('\p{Is_Age=--+0-0/a/0	0 00	0_004.1}');
Error('\P{Is_Age=--+0-0/a/0	0 00	0_004.1}');
Expect(1, 577, '\p{Is_Age=+00004.1}', "");
Expect(0, 577, '\p{^Is_Age=+00004.1}', "");
Expect(0, 577, '\P{Is_Age=+00004.1}', "");
Expect(1, 577, '\P{^Is_Age=+00004.1}', "");
Expect(0, 566, '\p{Is_Age=+00004.1}', "");
Expect(1, 566, '\p{^Is_Age=+00004.1}', "");
Expect(1, 566, '\P{Is_Age=+00004.1}', "");
Expect(0, 566, '\P{^Is_Age=+00004.1}', "");
Error('\p{Expands_On_NFKD=Yes}');
Error('\P{Expands_On_NFKD=Yes}');
Error('\p{XO_NFKD=Y}');
Error('\P{XO_NFKD=Y}');
Error('\p{Is_Expands_On_NFKD=T}');
Error('\P{Is_Expands_On_NFKD=T}');
Error('\p{Is_XO_NFKD=True}');
Error('\P{Is_XO_NFKD=True}');
Error('\p{Expands_On_NFKD=No}');
Error('\P{Expands_On_NFKD=No}');
Error('\p{XO_NFKD=N}');
Error('\P{XO_NFKD=N}');
Error('\p{Is_Expands_On_NFKD=F}');
Error('\P{Is_Expands_On_NFKD=F}');
Error('\p{Is_XO_NFKD=False}');
Error('\P{Is_XO_NFKD=False}');
Error('\p{Grapheme_Cluster_Break=/a/--spacingmark}');
Error('\P{Grapheme_Cluster_Break=/a/--spacingmark}');
Expect(1, 2307, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Grapheme_Cluster_Break= -spacingmark}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break= -spacingmark}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break= -spacingmark}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break= -spacingmark}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break= -spacingmark}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break= -spacingmark}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break= -spacingmark}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break= -spacingmark}', "");
Error('\p{GCB=-SM:=}');
Error('\P{GCB=-SM:=}');
Expect(1, 2307, '\p{GCB:	sm}', "");
Expect(0, 2307, '\p{^GCB:	sm}', "");
Expect(0, 2307, '\P{GCB:	sm}', "");
Expect(1, 2307, '\P{^GCB:	sm}', "");
Expect(0, 2306, '\p{GCB:	sm}', "");
Expect(1, 2306, '\p{^GCB:	sm}', "");
Expect(1, 2306, '\P{GCB:	sm}', "");
Expect(0, 2306, '\P{^GCB:	sm}', "");
Expect(1, 2307, '\p{GCB= -SM}', "");
Expect(0, 2307, '\p{^GCB= -SM}', "");
Expect(0, 2307, '\P{GCB= -SM}', "");
Expect(1, 2307, '\P{^GCB= -SM}', "");
Expect(0, 2306, '\p{GCB= -SM}', "");
Expect(1, 2306, '\p{^GCB= -SM}', "");
Expect(1, 2306, '\P{GCB= -SM}', "");
Expect(0, 2306, '\P{^GCB= -SM}', "");
Error('\p{Is_Grapheme_Cluster_Break=-:=SpacingMark}');
Error('\P{Is_Grapheme_Cluster_Break=-:=SpacingMark}');
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=_	SPACINGMARK}', "");
Error('\p{Is_GCB=	/a/SM}');
Error('\P{Is_GCB=	/a/SM}');
Expect(1, 2307, '\p{Is_GCB=sm}', "");
Expect(0, 2307, '\p{^Is_GCB=sm}', "");
Expect(0, 2307, '\P{Is_GCB=sm}', "");
Expect(1, 2307, '\P{^Is_GCB=sm}', "");
Expect(0, 2306, '\p{Is_GCB=sm}', "");
Expect(1, 2306, '\p{^Is_GCB=sm}', "");
Expect(1, 2306, '\P{Is_GCB=sm}', "");
Expect(0, 2306, '\P{^Is_GCB=sm}', "");
Expect(1, 2307, '\p{Is_GCB:    SM}', "");
Expect(0, 2307, '\p{^Is_GCB:    SM}', "");
Expect(0, 2307, '\P{Is_GCB:    SM}', "");
Expect(1, 2307, '\P{^Is_GCB:    SM}', "");
Expect(0, 2306, '\p{Is_GCB:    SM}', "");
Expect(1, 2306, '\p{^Is_GCB:    SM}', "");
Expect(1, 2306, '\P{Is_GCB:    SM}', "");
Expect(0, 2306, '\P{^Is_GCB:    SM}', "");
Error('\p{Grapheme_Cluster_Break=_/a/T}');
Error('\P{Grapheme_Cluster_Break=_/a/T}');
Expect(1, 4607, '\p{Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\p{Grapheme_Cluster_Break=_-T}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break=_-T}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break=_-T}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break=_-T}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break=_-T}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break=_-T}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break=_-T}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break=_-T}', "");
Error('\p{GCB=_/a/T}');
Error('\P{GCB=_/a/T}');
Expect(1, 4607, '\p{GCB=t}', "");
Expect(0, 4607, '\p{^GCB=t}', "");
Expect(0, 4607, '\P{GCB=t}', "");
Expect(1, 4607, '\P{^GCB=t}', "");
Expect(0, 4519, '\p{GCB=t}', "");
Expect(1, 4519, '\p{^GCB=t}', "");
Expect(1, 4519, '\P{GCB=t}', "");
Expect(0, 4519, '\P{^GCB=t}', "");
Expect(1, 4607, '\p{GCB:  T}', "");
Expect(0, 4607, '\p{^GCB:  T}', "");
Expect(0, 4607, '\P{GCB:  T}', "");
Expect(1, 4607, '\P{^GCB:  T}', "");
Expect(0, 4519, '\p{GCB:  T}', "");
Expect(1, 4519, '\p{^GCB:  T}', "");
Expect(1, 4519, '\P{GCB:  T}', "");
Expect(0, 4519, '\P{^GCB:  T}', "");
Error('\p{Is_Grapheme_Cluster_Break= /a/T}');
Error('\P{Is_Grapheme_Cluster_Break= /a/T}');
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break=_-t}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break=_-t}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break=_-t}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break=_-t}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break=_-t}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break=_-t}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break=_-t}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break=_-t}', "");
Error('\p{Is_GCB=-_T/a/}');
Error('\P{Is_GCB=-_T/a/}');
Expect(1, 4607, '\p{Is_GCB=t}', "");
Expect(0, 4607, '\p{^Is_GCB=t}', "");
Expect(0, 4607, '\P{Is_GCB=t}', "");
Expect(1, 4607, '\P{^Is_GCB=t}', "");
Expect(0, 4519, '\p{Is_GCB=t}', "");
Expect(1, 4519, '\p{^Is_GCB=t}', "");
Expect(1, 4519, '\P{Is_GCB=t}', "");
Expect(0, 4519, '\P{^Is_GCB=t}', "");
Expect(1, 4607, '\p{Is_GCB: __T}', "");
Expect(0, 4607, '\p{^Is_GCB: __T}', "");
Expect(0, 4607, '\P{Is_GCB: __T}', "");
Expect(1, 4607, '\P{^Is_GCB: __T}', "");
Expect(0, 4519, '\p{Is_GCB: __T}', "");
Expect(1, 4519, '\p{^Is_GCB: __T}', "");
Expect(1, 4519, '\P{Is_GCB: __T}', "");
Expect(0, 4519, '\P{^Is_GCB: __T}', "");
Error('\p{Grapheme_Cluster_Break:	:=_ LVT}');
Error('\P{Grapheme_Cluster_Break:	:=_ LVT}');
Expect(1, 44059, '\p{Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\p{Grapheme_Cluster_Break=	LVT}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break=	LVT}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break=	LVT}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break=	LVT}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break=	LVT}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break=	LVT}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break=	LVT}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break=	LVT}', "");
Error('\p{GCB=- lvt/a/}');
Error('\P{GCB=- lvt/a/}');
Expect(1, 44059, '\p{GCB=lvt}', "");
Expect(0, 44059, '\p{^GCB=lvt}', "");
Expect(0, 44059, '\P{GCB=lvt}', "");
Expect(1, 44059, '\P{^GCB=lvt}', "");
Expect(0, 44032, '\p{GCB=lvt}', "");
Expect(1, 44032, '\p{^GCB=lvt}', "");
Expect(1, 44032, '\P{GCB=lvt}', "");
Expect(0, 44032, '\P{^GCB=lvt}', "");
Expect(1, 44059, '\p{GCB=_-LVT}', "");
Expect(0, 44059, '\p{^GCB=_-LVT}', "");
Expect(0, 44059, '\P{GCB=_-LVT}', "");
Expect(1, 44059, '\P{^GCB=_-LVT}', "");
Expect(0, 44032, '\p{GCB=_-LVT}', "");
Expect(1, 44032, '\p{^GCB=_-LVT}', "");
Expect(1, 44032, '\P{GCB=_-LVT}', "");
Expect(0, 44032, '\P{^GCB=_-LVT}', "");
Error('\p{Is_Grapheme_Cluster_Break:			LVT/a/}');
Error('\P{Is_Grapheme_Cluster_Break:			LVT/a/}');
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break:	lvt}', "");
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break: --lvt}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break: --lvt}', "");
Error('\p{Is_GCB=_/a/LVT}');
Error('\P{Is_GCB=_/a/LVT}');
Expect(1, 44059, '\p{Is_GCB:   lvt}', "");
Expect(0, 44059, '\p{^Is_GCB:   lvt}', "");
Expect(0, 44059, '\P{Is_GCB:   lvt}', "");
Expect(1, 44059, '\P{^Is_GCB:   lvt}', "");
Expect(0, 44032, '\p{Is_GCB:   lvt}', "");
Expect(1, 44032, '\p{^Is_GCB:   lvt}', "");
Expect(1, 44032, '\P{Is_GCB:   lvt}', "");
Expect(0, 44032, '\P{^Is_GCB:   lvt}', "");
Expect(1, 44059, '\p{Is_GCB=	 LVT}', "");
Expect(0, 44059, '\p{^Is_GCB=	 LVT}', "");
Expect(0, 44059, '\P{Is_GCB=	 LVT}', "");
Expect(1, 44059, '\P{^Is_GCB=	 LVT}', "");
Expect(0, 44032, '\p{Is_GCB=	 LVT}', "");
Expect(1, 44032, '\p{^Is_GCB=	 LVT}', "");
Expect(1, 44032, '\P{Is_GCB=	 LVT}', "");
Expect(0, 44032, '\P{^Is_GCB=	 LVT}', "");
Error('\p{Grapheme_Cluster_Break=:=_	control}');
Error('\P{Grapheme_Cluster_Break=:=_	control}');
Expect(1, 9, '\p{Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Grapheme_Cluster_Break:    -Control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break:    -Control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break:    -Control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break:    -Control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break:    -Control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break:    -Control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break:    -Control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break:    -Control}', "");
Error('\p{GCB= :=CN}');
Error('\P{GCB= :=CN}');
Expect(1, 9, '\p{GCB=cn}', "");
Expect(0, 9, '\p{^GCB=cn}', "");
Expect(0, 9, '\P{GCB=cn}', "");
Expect(1, 9, '\P{^GCB=cn}', "");
Expect(0, 10, '\p{GCB=cn}', "");
Expect(1, 10, '\p{^GCB=cn}', "");
Expect(1, 10, '\P{GCB=cn}', "");
Expect(0, 10, '\P{^GCB=cn}', "");
Expect(1, 9, '\p{GCB:	 _cn}', "");
Expect(0, 9, '\p{^GCB:	 _cn}', "");
Expect(0, 9, '\P{GCB:	 _cn}', "");
Expect(1, 9, '\P{^GCB:	 _cn}', "");
Expect(0, 10, '\p{GCB:	 _cn}', "");
Expect(1, 10, '\p{^GCB:	 _cn}', "");
Expect(1, 10, '\P{GCB:	 _cn}', "");
Expect(0, 10, '\P{^GCB:	 _cn}', "");
Error('\p{Is_Grapheme_Cluster_Break: /a/ -CONTROL}');
Error('\P{Is_Grapheme_Cluster_Break: /a/ -CONTROL}');
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break=-CONTROL}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break=-CONTROL}', "");
Error('\p{Is_GCB=_/a/cn}');
Error('\P{Is_GCB=_/a/cn}');
Expect(1, 9, '\p{Is_GCB=cn}', "");
Expect(0, 9, '\p{^Is_GCB=cn}', "");
Expect(0, 9, '\P{Is_GCB=cn}', "");
Expect(1, 9, '\P{^Is_GCB=cn}', "");
Expect(0, 10, '\p{Is_GCB=cn}', "");
Expect(1, 10, '\p{^Is_GCB=cn}', "");
Expect(1, 10, '\P{Is_GCB=cn}', "");
Expect(0, 10, '\P{^Is_GCB=cn}', "");
Expect(1, 9, '\p{Is_GCB=-CN}', "");
Expect(0, 9, '\p{^Is_GCB=-CN}', "");
Expect(0, 9, '\P{Is_GCB=-CN}', "");
Expect(1, 9, '\P{^Is_GCB=-CN}', "");
Expect(0, 10, '\p{Is_GCB=-CN}', "");
Expect(1, 10, '\p{^Is_GCB=-CN}', "");
Expect(1, 10, '\P{Is_GCB=-CN}', "");
Expect(0, 10, '\P{^Is_GCB=-CN}', "");
Error('\p{Grapheme_Cluster_Break=	PREPEND:=}');
Error('\P{Grapheme_Cluster_Break=	PREPEND:=}');
Expect(1, 3652, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\p{Grapheme_Cluster_Break=	Prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break=	Prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break=	Prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break=	Prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break=	Prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break=	Prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break=	Prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break=	Prepend}', "");
Error('\p{GCB=/a/-PP}');
Error('\P{GCB=/a/-PP}');
Expect(1, 3652, '\p{GCB:   pp}', "");
Expect(0, 3652, '\p{^GCB:   pp}', "");
Expect(0, 3652, '\P{GCB:   pp}', "");
Expect(1, 3652, '\P{^GCB:   pp}', "");
Expect(0, 3647, '\p{GCB:   pp}', "");
Expect(1, 3647, '\p{^GCB:   pp}', "");
Expect(1, 3647, '\P{GCB:   pp}', "");
Expect(0, 3647, '\P{^GCB:   pp}', "");
Expect(1, 3652, '\p{GCB=- PP}', "");
Expect(0, 3652, '\p{^GCB=- PP}', "");
Expect(0, 3652, '\P{GCB=- PP}', "");
Expect(1, 3652, '\P{^GCB=- PP}', "");
Expect(0, 3647, '\p{GCB=- PP}', "");
Expect(1, 3647, '\p{^GCB=- PP}', "");
Expect(1, 3647, '\P{GCB=- PP}', "");
Expect(0, 3647, '\P{^GCB=- PP}', "");
Error('\p{Is_Grapheme_Cluster_Break=:= prepend}');
Error('\P{Is_Grapheme_Cluster_Break=:= prepend}');
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break:	 Prepend}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break:	 Prepend}', "");
Error('\p{Is_GCB:	:= 	pp}');
Error('\P{Is_GCB:	:= 	pp}');
Expect(1, 3652, '\p{Is_GCB:   pp}', "");
Expect(0, 3652, '\p{^Is_GCB:   pp}', "");
Expect(0, 3652, '\P{Is_GCB:   pp}', "");
Expect(1, 3652, '\P{^Is_GCB:   pp}', "");
Expect(0, 3647, '\p{Is_GCB:   pp}', "");
Expect(1, 3647, '\p{^Is_GCB:   pp}', "");
Expect(1, 3647, '\P{Is_GCB:   pp}', "");
Expect(0, 3647, '\P{^Is_GCB:   pp}', "");
Expect(1, 3652, '\p{Is_GCB=	 PP}', "");
Expect(0, 3652, '\p{^Is_GCB=	 PP}', "");
Expect(0, 3652, '\P{Is_GCB=	 PP}', "");
Expect(1, 3652, '\P{^Is_GCB=	 PP}', "");
Expect(0, 3647, '\p{Is_GCB=	 PP}', "");
Expect(1, 3647, '\p{^Is_GCB=	 PP}', "");
Expect(1, 3647, '\P{Is_GCB=	 PP}', "");
Expect(0, 3647, '\P{^Is_GCB=	 PP}', "");
Error('\p{Grapheme_Cluster_Break:	:=LV}');
Error('\P{Grapheme_Cluster_Break:	:=LV}');
Expect(1, 44032, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Grapheme_Cluster_Break=__lv}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=__lv}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=__lv}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=__lv}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=__lv}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=__lv}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=__lv}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=__lv}', "");
Error('\p{GCB=/a/		LV}');
Error('\P{GCB=/a/		LV}');
Expect(1, 44032, '\p{GCB=lv}', "");
Expect(0, 44032, '\p{^GCB=lv}', "");
Expect(0, 44032, '\P{GCB=lv}', "");
Expect(1, 44032, '\P{^GCB=lv}', "");
Expect(0, 44031, '\p{GCB=lv}', "");
Expect(1, 44031, '\p{^GCB=lv}', "");
Expect(1, 44031, '\P{GCB=lv}', "");
Expect(0, 44031, '\P{^GCB=lv}', "");
Expect(1, 44032, '\p{GCB=_lv}', "");
Expect(0, 44032, '\p{^GCB=_lv}', "");
Expect(0, 44032, '\P{GCB=_lv}', "");
Expect(1, 44032, '\P{^GCB=_lv}', "");
Expect(0, 44031, '\p{GCB=_lv}', "");
Expect(1, 44031, '\p{^GCB=_lv}', "");
Expect(1, 44031, '\P{GCB=_lv}', "");
Expect(0, 44031, '\P{^GCB=_lv}', "");
Error('\p{Is_Grapheme_Cluster_Break=-/a/LV}');
Error('\P{Is_Grapheme_Cluster_Break=-/a/LV}');
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break= -LV}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break= -LV}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break= -LV}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break= -LV}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break= -LV}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break= -LV}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break= -LV}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break= -LV}', "");
Error('\p{Is_GCB= lv/a/}');
Error('\P{Is_GCB= lv/a/}');
Expect(1, 44032, '\p{Is_GCB=lv}', "");
Expect(0, 44032, '\p{^Is_GCB=lv}', "");
Expect(0, 44032, '\P{Is_GCB=lv}', "");
Expect(1, 44032, '\P{^Is_GCB=lv}', "");
Expect(0, 44031, '\p{Is_GCB=lv}', "");
Expect(1, 44031, '\p{^Is_GCB=lv}', "");
Expect(1, 44031, '\P{Is_GCB=lv}', "");
Expect(0, 44031, '\P{^Is_GCB=lv}', "");
Expect(1, 44032, '\p{Is_GCB=	_LV}', "");
Expect(0, 44032, '\p{^Is_GCB=	_LV}', "");
Expect(0, 44032, '\P{Is_GCB=	_LV}', "");
Expect(1, 44032, '\P{^Is_GCB=	_LV}', "");
Expect(0, 44031, '\p{Is_GCB=	_LV}', "");
Expect(1, 44031, '\p{^Is_GCB=	_LV}', "");
Expect(1, 44031, '\P{Is_GCB=	_LV}', "");
Expect(0, 44031, '\P{^Is_GCB=	_LV}', "");
Error('\p{Grapheme_Cluster_Break=_CR:=}');
Error('\P{Grapheme_Cluster_Break=_CR:=}');
Expect(1, 13, '\p{Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\p{Grapheme_Cluster_Break:	-	CR}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break:	-	CR}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break:	-	CR}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break:	-	CR}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break:	-	CR}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break:	-	CR}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break:	-	CR}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break:	-	CR}', "");
Error('\p{GCB=/a/CR}');
Error('\P{GCB=/a/CR}');
Expect(1, 13, '\p{GCB=cr}', "");
Expect(0, 13, '\p{^GCB=cr}', "");
Expect(0, 13, '\P{GCB=cr}', "");
Expect(1, 13, '\P{^GCB=cr}', "");
Expect(0, 12, '\p{GCB=cr}', "");
Expect(1, 12, '\p{^GCB=cr}', "");
Expect(1, 12, '\P{GCB=cr}', "");
Expect(0, 12, '\P{^GCB=cr}', "");
Expect(1, 13, '\p{GCB=_ CR}', "");
Expect(0, 13, '\p{^GCB=_ CR}', "");
Expect(0, 13, '\P{GCB=_ CR}', "");
Expect(1, 13, '\P{^GCB=_ CR}', "");
Expect(0, 12, '\p{GCB=_ CR}', "");
Expect(1, 12, '\p{^GCB=_ CR}', "");
Expect(1, 12, '\P{GCB=_ CR}', "");
Expect(0, 12, '\P{^GCB=_ CR}', "");
Error('\p{Is_Grapheme_Cluster_Break=	:=CR}');
Error('\P{Is_Grapheme_Cluster_Break=	:=CR}');
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break=_-CR}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break=_-CR}', "");
Error('\p{Is_GCB=:=-CR}');
Error('\P{Is_GCB=:=-CR}');
Expect(1, 13, '\p{Is_GCB=cr}', "");
Expect(0, 13, '\p{^Is_GCB=cr}', "");
Expect(0, 13, '\P{Is_GCB=cr}', "");
Expect(1, 13, '\P{^Is_GCB=cr}', "");
Expect(0, 12, '\p{Is_GCB=cr}', "");
Expect(1, 12, '\p{^Is_GCB=cr}', "");
Expect(1, 12, '\P{Is_GCB=cr}', "");
Expect(0, 12, '\P{^Is_GCB=cr}', "");
Expect(1, 13, '\p{Is_GCB:	CR}', "");
Expect(0, 13, '\p{^Is_GCB:	CR}', "");
Expect(0, 13, '\P{Is_GCB:	CR}', "");
Expect(1, 13, '\P{^Is_GCB:	CR}', "");
Expect(0, 12, '\p{Is_GCB:	CR}', "");
Expect(1, 12, '\p{^Is_GCB:	CR}', "");
Expect(1, 12, '\P{Is_GCB:	CR}', "");
Expect(0, 12, '\P{^Is_GCB:	CR}', "");
Error('\p{Grapheme_Cluster_Break=		other/a/}');
Error('\P{Grapheme_Cluster_Break=		other/a/}');
Expect(1, 126, '\p{Grapheme_Cluster_Break:   other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break:   other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break:   other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break:   other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break:   other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break:   other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break:   other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break:   other}', "");
Expect(1, 126, '\p{Grapheme_Cluster_Break=	Other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break=	Other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break=	Other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break=	Other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break=	Other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break=	Other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break=	Other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break=	Other}', "");
Error('\p{GCB=_	xx/a/}');
Error('\P{GCB=_	xx/a/}');
Expect(1, 126, '\p{GCB=xx}', "");
Expect(0, 126, '\p{^GCB=xx}', "");
Expect(0, 126, '\P{GCB=xx}', "");
Expect(1, 126, '\P{^GCB=xx}', "");
Expect(0, 31, '\p{GCB=xx}', "");
Expect(1, 31, '\p{^GCB=xx}', "");
Expect(1, 31, '\P{GCB=xx}', "");
Expect(0, 31, '\P{^GCB=xx}', "");
Expect(1, 126, '\p{GCB:    XX}', "");
Expect(0, 126, '\p{^GCB:    XX}', "");
Expect(0, 126, '\P{GCB:    XX}', "");
Expect(1, 126, '\P{^GCB:    XX}', "");
Expect(0, 31, '\p{GCB:    XX}', "");
Expect(1, 31, '\p{^GCB:    XX}', "");
Expect(1, 31, '\P{GCB:    XX}', "");
Expect(0, 31, '\P{^GCB:    XX}', "");
Error('\p{Is_Grapheme_Cluster_Break:	_/a/Other}');
Error('\P{Is_Grapheme_Cluster_Break:	_/a/Other}');
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break=	-Other}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break=	-Other}', "");
Error('\p{Is_GCB=:=		XX}');
Error('\P{Is_GCB=:=		XX}');
Expect(1, 126, '\p{Is_GCB=xx}', "");
Expect(0, 126, '\p{^Is_GCB=xx}', "");
Expect(0, 126, '\P{Is_GCB=xx}', "");
Expect(1, 126, '\P{^Is_GCB=xx}', "");
Expect(0, 31, '\p{Is_GCB=xx}', "");
Expect(1, 31, '\p{^Is_GCB=xx}', "");
Expect(1, 31, '\P{Is_GCB=xx}', "");
Expect(0, 31, '\P{^Is_GCB=xx}', "");
Expect(1, 126, '\p{Is_GCB= 	XX}', "");
Expect(0, 126, '\p{^Is_GCB= 	XX}', "");
Expect(0, 126, '\P{Is_GCB= 	XX}', "");
Expect(1, 126, '\P{^Is_GCB= 	XX}', "");
Expect(0, 31, '\p{Is_GCB= 	XX}', "");
Expect(1, 31, '\p{^Is_GCB= 	XX}', "");
Expect(1, 31, '\P{Is_GCB= 	XX}', "");
Expect(0, 31, '\P{^Is_GCB= 	XX}', "");
Error('\p{Grapheme_Cluster_Break=	-Extend:=}');
Error('\P{Grapheme_Cluster_Break=	-Extend:=}');
Expect(1, 879, '\p{Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\p{Grapheme_Cluster_Break=-_Extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break=-_Extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break=-_Extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break=-_Extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break=-_Extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break=-_Extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break=-_Extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break=-_Extend}', "");
Error('\p{GCB=-:=ex}');
Error('\P{GCB=-:=ex}');
Expect(1, 879, '\p{GCB=ex}', "");
Expect(0, 879, '\p{^GCB=ex}', "");
Expect(0, 879, '\P{GCB=ex}', "");
Expect(1, 879, '\P{^GCB=ex}', "");
Expect(0, 767, '\p{GCB=ex}', "");
Expect(1, 767, '\p{^GCB=ex}', "");
Expect(1, 767, '\P{GCB=ex}', "");
Expect(0, 767, '\P{^GCB=ex}', "");
Expect(1, 879, '\p{GCB=	-EX}', "");
Expect(0, 879, '\p{^GCB=	-EX}', "");
Expect(0, 879, '\P{GCB=	-EX}', "");
Expect(1, 879, '\P{^GCB=	-EX}', "");
Expect(0, 767, '\p{GCB=	-EX}', "");
Expect(1, 767, '\p{^GCB=	-EX}', "");
Expect(1, 767, '\P{GCB=	-EX}', "");
Expect(0, 767, '\P{^GCB=	-EX}', "");
Error('\p{Is_Grapheme_Cluster_Break= extend/a/}');
Error('\P{Is_Grapheme_Cluster_Break= extend/a/}');
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break= -Extend}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break= -Extend}', "");
Error('\p{Is_GCB=	:=ex}');
Error('\P{Is_GCB=	:=ex}');
Expect(1, 879, '\p{Is_GCB=ex}', "");
Expect(0, 879, '\p{^Is_GCB=ex}', "");
Expect(0, 879, '\P{Is_GCB=ex}', "");
Expect(1, 879, '\P{^Is_GCB=ex}', "");
Expect(0, 767, '\p{Is_GCB=ex}', "");
Expect(1, 767, '\p{^Is_GCB=ex}', "");
Expect(1, 767, '\P{Is_GCB=ex}', "");
Expect(0, 767, '\P{^Is_GCB=ex}', "");
Expect(1, 879, '\p{Is_GCB: -_ex}', "");
Expect(0, 879, '\p{^Is_GCB: -_ex}', "");
Expect(0, 879, '\P{Is_GCB: -_ex}', "");
Expect(1, 879, '\P{^Is_GCB: -_ex}', "");
Expect(0, 767, '\p{Is_GCB: -_ex}', "");
Expect(1, 767, '\p{^Is_GCB: -_ex}', "");
Expect(1, 767, '\P{Is_GCB: -_ex}', "");
Expect(0, 767, '\P{^Is_GCB: -_ex}', "");
Error('\p{Grapheme_Cluster_Break=-v/a/}');
Error('\P{Grapheme_Cluster_Break=-v/a/}');
Expect(1, 4519, '\p{Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\p{Grapheme_Cluster_Break= v}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break= v}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break= v}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break= v}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break= v}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break= v}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break= v}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break= v}', "");
Error('\p{GCB=:=	V}');
Error('\P{GCB=:=	V}');
Expect(1, 4519, '\p{GCB=v}', "");
Expect(0, 4519, '\p{^GCB=v}', "");
Expect(0, 4519, '\P{GCB=v}', "");
Expect(1, 4519, '\P{^GCB=v}', "");
Expect(0, 4447, '\p{GCB=v}', "");
Expect(1, 4447, '\p{^GCB=v}', "");
Expect(1, 4447, '\P{GCB=v}', "");
Expect(0, 4447, '\P{^GCB=v}', "");
Expect(1, 4519, '\p{GCB=  V}', "");
Expect(0, 4519, '\p{^GCB=  V}', "");
Expect(0, 4519, '\P{GCB=  V}', "");
Expect(1, 4519, '\P{^GCB=  V}', "");
Expect(0, 4447, '\p{GCB=  V}', "");
Expect(1, 4447, '\p{^GCB=  V}', "");
Expect(1, 4447, '\P{GCB=  V}', "");
Expect(0, 4447, '\P{^GCB=  V}', "");
Error('\p{Is_Grapheme_Cluster_Break=:=		V}');
Error('\P{Is_Grapheme_Cluster_Break=:=		V}');
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break=  V}', "");
Error('\p{Is_GCB=	:=v}');
Error('\P{Is_GCB=	:=v}');
Expect(1, 4519, '\p{Is_GCB=v}', "");
Expect(0, 4519, '\p{^Is_GCB=v}', "");
Expect(0, 4519, '\P{Is_GCB=v}', "");
Expect(1, 4519, '\P{^Is_GCB=v}', "");
Expect(0, 4447, '\p{Is_GCB=v}', "");
Expect(1, 4447, '\p{^Is_GCB=v}', "");
Expect(1, 4447, '\P{Is_GCB=v}', "");
Expect(0, 4447, '\P{^Is_GCB=v}', "");
Expect(1, 4519, '\p{Is_GCB=-	V}', "");
Expect(0, 4519, '\p{^Is_GCB=-	V}', "");
Expect(0, 4519, '\P{Is_GCB=-	V}', "");
Expect(1, 4519, '\P{^Is_GCB=-	V}', "");
Expect(0, 4447, '\p{Is_GCB=-	V}', "");
Expect(1, 4447, '\p{^Is_GCB=-	V}', "");
Expect(1, 4447, '\P{Is_GCB=-	V}', "");
Expect(0, 4447, '\P{^Is_GCB=-	V}', "");
Error('\p{Grapheme_Cluster_Break=/a/	 LF}');
Error('\P{Grapheme_Cluster_Break=/a/	 LF}');
Expect(1, 10, '\p{Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\p{Grapheme_Cluster_Break=	-LF}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break=	-LF}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break=	-LF}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break=	-LF}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break=	-LF}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break=	-LF}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break=	-LF}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break=	-LF}', "");
Error('\p{GCB=-:=LF}');
Error('\P{GCB=-:=LF}');
Expect(1, 10, '\p{GCB: lf}', "");
Expect(0, 10, '\p{^GCB: lf}', "");
Expect(0, 10, '\P{GCB: lf}', "");
Expect(1, 10, '\P{^GCB: lf}', "");
Expect(0, 9, '\p{GCB: lf}', "");
Expect(1, 9, '\p{^GCB: lf}', "");
Expect(1, 9, '\P{GCB: lf}', "");
Expect(0, 9, '\P{^GCB: lf}', "");
Expect(1, 10, '\p{GCB=- LF}', "");
Expect(0, 10, '\p{^GCB=- LF}', "");
Expect(0, 10, '\P{GCB=- LF}', "");
Expect(1, 10, '\P{^GCB=- LF}', "");
Expect(0, 9, '\p{GCB=- LF}', "");
Expect(1, 9, '\p{^GCB=- LF}', "");
Expect(1, 9, '\P{GCB=- LF}', "");
Expect(0, 9, '\P{^GCB=- LF}', "");
Error('\p{Is_Grapheme_Cluster_Break=	LF:=}');
Error('\P{Is_Grapheme_Cluster_Break=	LF:=}');
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break=	 lf}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break=	 lf}', "");
Error('\p{Is_GCB= /a/LF}');
Error('\P{Is_GCB= /a/LF}');
Expect(1, 10, '\p{Is_GCB=lf}', "");
Expect(0, 10, '\p{^Is_GCB=lf}', "");
Expect(0, 10, '\P{Is_GCB=lf}', "");
Expect(1, 10, '\P{^Is_GCB=lf}', "");
Expect(0, 9, '\p{Is_GCB=lf}', "");
Expect(1, 9, '\p{^Is_GCB=lf}', "");
Expect(1, 9, '\P{Is_GCB=lf}', "");
Expect(0, 9, '\P{^Is_GCB=lf}', "");
Expect(1, 10, '\p{Is_GCB=  LF}', "");
Expect(0, 10, '\p{^Is_GCB=  LF}', "");
Expect(0, 10, '\P{Is_GCB=  LF}', "");
Expect(1, 10, '\P{^Is_GCB=  LF}', "");
Expect(0, 9, '\p{Is_GCB=  LF}', "");
Expect(1, 9, '\p{^Is_GCB=  LF}', "");
Expect(1, 9, '\P{Is_GCB=  LF}', "");
Expect(0, 9, '\P{^Is_GCB=  LF}', "");
Error('\p{Grapheme_Cluster_Break=/a/ L}');
Error('\P{Grapheme_Cluster_Break=/a/ L}');
Expect(1, 4447, '\p{Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Grapheme_Cluster_Break=-L}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=-L}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=-L}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=-L}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=-L}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=-L}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=-L}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=-L}', "");
Error('\p{GCB=-L:=}');
Error('\P{GCB=-L:=}');
Expect(1, 4447, '\p{GCB=l}', "");
Expect(0, 4447, '\p{^GCB=l}', "");
Expect(0, 4447, '\P{GCB=l}', "");
Expect(1, 4447, '\P{^GCB=l}', "");
Expect(0, 4351, '\p{GCB=l}', "");
Expect(1, 4351, '\p{^GCB=l}', "");
Expect(1, 4351, '\P{GCB=l}', "");
Expect(0, 4351, '\P{^GCB=l}', "");
Expect(1, 4447, '\p{GCB=	l}', "");
Expect(0, 4447, '\p{^GCB=	l}', "");
Expect(0, 4447, '\P{GCB=	l}', "");
Expect(1, 4447, '\P{^GCB=	l}', "");
Expect(0, 4351, '\p{GCB=	l}', "");
Expect(1, 4351, '\p{^GCB=	l}', "");
Expect(1, 4351, '\P{GCB=	l}', "");
Expect(0, 4351, '\P{^GCB=	l}', "");
Error('\p{Is_Grapheme_Cluster_Break=		L:=}');
Error('\P{Is_Grapheme_Cluster_Break=		L:=}');
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break=_-L}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break=_-L}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break=_-L}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break=_-L}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break=_-L}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break=_-L}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break=_-L}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break=_-L}', "");
Error('\p{Is_GCB= _L/a/}');
Error('\P{Is_GCB= _L/a/}');
Expect(1, 4447, '\p{Is_GCB=l}', "");
Expect(0, 4447, '\p{^Is_GCB=l}', "");
Expect(0, 4447, '\P{Is_GCB=l}', "");
Expect(1, 4447, '\P{^Is_GCB=l}', "");
Expect(0, 4351, '\p{Is_GCB=l}', "");
Expect(1, 4351, '\p{^Is_GCB=l}', "");
Expect(1, 4351, '\P{Is_GCB=l}', "");
Expect(0, 4351, '\P{^Is_GCB=l}', "");
Expect(1, 4447, '\p{Is_GCB= L}', "");
Expect(0, 4447, '\p{^Is_GCB= L}', "");
Expect(0, 4447, '\P{Is_GCB= L}', "");
Expect(1, 4447, '\P{^Is_GCB= L}', "");
Expect(0, 4351, '\p{Is_GCB= L}', "");
Expect(1, 4351, '\p{^Is_GCB= L}', "");
Expect(1, 4351, '\P{Is_GCB= L}', "");
Expect(0, 4351, '\P{^Is_GCB= L}', "");
Error('\p{Logical_Order_Exception=:=-Yes}');
Error('\P{Logical_Order_Exception=:=-Yes}');
Expect(1, 3652, '\p{Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\p{Logical_Order_Exception:	_yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception:	_yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception:	_yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception:	_yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception:	_yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception:	_yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception:	_yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception:	_yes}', "");
Error('\p{LOE=_:=y}');
Error('\P{LOE=_:=y}');
Expect(1, 3652, '\p{LOE=y}', "");
Expect(0, 3652, '\p{^LOE=y}', "");
Expect(0, 3652, '\P{LOE=y}', "");
Expect(1, 3652, '\P{^LOE=y}', "");
Expect(0, 3647, '\p{LOE=y}', "");
Expect(1, 3647, '\p{^LOE=y}', "");
Expect(1, 3647, '\P{LOE=y}', "");
Expect(0, 3647, '\P{^LOE=y}', "");
Expect(1, 3652, '\p{LOE=-Y}', "");
Expect(0, 3652, '\p{^LOE=-Y}', "");
Expect(0, 3652, '\P{LOE=-Y}', "");
Expect(1, 3652, '\P{^LOE=-Y}', "");
Expect(0, 3647, '\p{LOE=-Y}', "");
Expect(1, 3647, '\p{^LOE=-Y}', "");
Expect(1, 3647, '\P{LOE=-Y}', "");
Expect(0, 3647, '\P{^LOE=-Y}', "");
Error('\p{Is_Logical_Order_Exception= /a/T}');
Error('\P{Is_Logical_Order_Exception= /a/T}');
Expect(1, 3652, '\p{Is_Logical_Order_Exception=t}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception=t}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception=t}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception=t}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception=t}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception=t}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception=t}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception=t}', "");
Expect(1, 3652, '\p{Is_Logical_Order_Exception= -t}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception= -t}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception= -t}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception= -t}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception= -t}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception= -t}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception= -t}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception= -t}', "");
Error('\p{Is_LOE=/a/	_True}');
Error('\P{Is_LOE=/a/	_True}');
Expect(1, 3652, '\p{Is_LOE=true}', "");
Expect(0, 3652, '\p{^Is_LOE=true}', "");
Expect(0, 3652, '\P{Is_LOE=true}', "");
Expect(1, 3652, '\P{^Is_LOE=true}', "");
Expect(0, 3647, '\p{Is_LOE=true}', "");
Expect(1, 3647, '\p{^Is_LOE=true}', "");
Expect(1, 3647, '\P{Is_LOE=true}', "");
Expect(0, 3647, '\P{^Is_LOE=true}', "");
Expect(1, 3652, '\p{Is_LOE=__True}', "");
Expect(0, 3652, '\p{^Is_LOE=__True}', "");
Expect(0, 3652, '\P{Is_LOE=__True}', "");
Expect(1, 3652, '\P{^Is_LOE=__True}', "");
Expect(0, 3647, '\p{Is_LOE=__True}', "");
Expect(1, 3647, '\p{^Is_LOE=__True}', "");
Expect(1, 3647, '\P{Is_LOE=__True}', "");
Expect(0, 3647, '\P{^Is_LOE=__True}', "");
Error('\p{Logical_Order_Exception=	-No/a/}');
Error('\P{Logical_Order_Exception=	-No/a/}');
Expect(1, 3647, '\p{Logical_Order_Exception=no}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception=no}', "");
Expect(0, 3647, '\P{Logical_Order_Exception=no}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception=no}', "");
Expect(0, 3652, '\p{Logical_Order_Exception=no}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception=no}', "");
Expect(1, 3652, '\P{Logical_Order_Exception=no}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception=no}', "");
Expect(1, 3647, '\p{Logical_Order_Exception: -No}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception: -No}', "");
Expect(0, 3647, '\P{Logical_Order_Exception: -No}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception: -No}', "");
Expect(0, 3652, '\p{Logical_Order_Exception: -No}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception: -No}', "");
Expect(1, 3652, '\P{Logical_Order_Exception: -No}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception: -No}', "");
Error('\p{LOE=_n/a/}');
Error('\P{LOE=_n/a/}');
Expect(1, 3647, '\p{LOE:   n}', "");
Expect(0, 3647, '\p{^LOE:   n}', "");
Expect(0, 3647, '\P{LOE:   n}', "");
Expect(1, 3647, '\P{^LOE:   n}', "");
Expect(0, 3652, '\p{LOE:   n}', "");
Expect(1, 3652, '\p{^LOE:   n}', "");
Expect(1, 3652, '\P{LOE:   n}', "");
Expect(0, 3652, '\P{^LOE:   n}', "");
Expect(1, 3647, '\p{LOE=_-N}', "");
Expect(0, 3647, '\p{^LOE=_-N}', "");
Expect(0, 3647, '\P{LOE=_-N}', "");
Expect(1, 3647, '\P{^LOE=_-N}', "");
Expect(0, 3652, '\p{LOE=_-N}', "");
Expect(1, 3652, '\p{^LOE=_-N}', "");
Expect(1, 3652, '\P{LOE=_-N}', "");
Expect(0, 3652, '\P{^LOE=_-N}', "");
Error('\p{Is_Logical_Order_Exception=	 F:=}');
Error('\P{Is_Logical_Order_Exception=	 F:=}');
Expect(1, 3647, '\p{Is_Logical_Order_Exception=f}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception=f}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception=f}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception=f}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception=f}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception=f}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception=f}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception=f}', "");
Expect(1, 3647, '\p{Is_Logical_Order_Exception=F}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception=F}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception=F}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception=F}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception=F}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception=F}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception=F}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception=F}', "");
Error('\p{Is_LOE= _False/a/}');
Error('\P{Is_LOE= _False/a/}');
Expect(1, 3647, '\p{Is_LOE:false}', "");
Expect(0, 3647, '\p{^Is_LOE:false}', "");
Expect(0, 3647, '\P{Is_LOE:false}', "");
Expect(1, 3647, '\P{^Is_LOE:false}', "");
Expect(0, 3652, '\p{Is_LOE:false}', "");
Expect(1, 3652, '\p{^Is_LOE:false}', "");
Expect(1, 3652, '\P{Is_LOE:false}', "");
Expect(0, 3652, '\P{^Is_LOE:false}', "");
Expect(1, 3647, '\p{Is_LOE=--False}', "");
Expect(0, 3647, '\p{^Is_LOE=--False}', "");
Expect(0, 3647, '\P{Is_LOE=--False}', "");
Expect(1, 3647, '\P{^Is_LOE=--False}', "");
Expect(0, 3652, '\p{Is_LOE=--False}', "");
Expect(1, 3652, '\p{^Is_LOE=--False}', "");
Expect(1, 3652, '\P{Is_LOE=--False}', "");
Expect(0, 3652, '\P{^Is_LOE=--False}', "");
Error('\p{Bidi_Mirrored=/a/yes}');
Error('\P{Bidi_Mirrored=/a/yes}');
Expect(1, 41, '\p{Bidi_Mirrored=yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored=yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored=yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored=yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored=yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored=yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored=yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored=yes}', "");
Expect(1, 41, '\p{Bidi_Mirrored= -yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored= -yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored= -yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored= -yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored= -yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored= -yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored= -yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored= -yes}', "");
Error('\p{Bidi_M:	:=	-Y}');
Error('\P{Bidi_M:	:=	-Y}');
Expect(1, 41, '\p{Bidi_M=y}', "");
Expect(0, 41, '\p{^Bidi_M=y}', "");
Expect(0, 41, '\P{Bidi_M=y}', "");
Expect(1, 41, '\P{^Bidi_M=y}', "");
Expect(0, 39, '\p{Bidi_M=y}', "");
Expect(1, 39, '\p{^Bidi_M=y}', "");
Expect(1, 39, '\P{Bidi_M=y}', "");
Expect(0, 39, '\P{^Bidi_M=y}', "");
Expect(1, 41, '\p{Bidi_M=_y}', "");
Expect(0, 41, '\p{^Bidi_M=_y}', "");
Expect(0, 41, '\P{Bidi_M=_y}', "");
Expect(1, 41, '\P{^Bidi_M=_y}', "");
Expect(0, 39, '\p{Bidi_M=_y}', "");
Expect(1, 39, '\p{^Bidi_M=_y}', "");
Expect(1, 39, '\P{Bidi_M=_y}', "");
Expect(0, 39, '\P{^Bidi_M=_y}', "");
Error('\p{Is_Bidi_Mirrored=	T:=}');
Error('\P{Is_Bidi_Mirrored=	T:=}');
Expect(1, 41, '\p{Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\p{Is_Bidi_Mirrored=_ T}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored=_ T}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored=_ T}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored=_ T}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored=_ T}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored=_ T}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored=_ T}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored=_ T}', "");
Error('\p{Is_Bidi_M=_/a/True}');
Error('\P{Is_Bidi_M=_/a/True}');
Expect(1, 41, '\p{Is_Bidi_M=true}', "");
Expect(0, 41, '\p{^Is_Bidi_M=true}', "");
Expect(0, 41, '\P{Is_Bidi_M=true}', "");
Expect(1, 41, '\P{^Is_Bidi_M=true}', "");
Expect(0, 39, '\p{Is_Bidi_M=true}', "");
Expect(1, 39, '\p{^Is_Bidi_M=true}', "");
Expect(1, 39, '\P{Is_Bidi_M=true}', "");
Expect(0, 39, '\P{^Is_Bidi_M=true}', "");
Expect(1, 41, '\p{Is_Bidi_M=_	True}', "");
Expect(0, 41, '\p{^Is_Bidi_M=_	True}', "");
Expect(0, 41, '\P{Is_Bidi_M=_	True}', "");
Expect(1, 41, '\P{^Is_Bidi_M=_	True}', "");
Expect(0, 39, '\p{Is_Bidi_M=_	True}', "");
Expect(1, 39, '\p{^Is_Bidi_M=_	True}', "");
Expect(1, 39, '\P{Is_Bidi_M=_	True}', "");
Expect(0, 39, '\P{^Is_Bidi_M=_	True}', "");
Error('\p{Bidi_Mirrored= :=No}');
Error('\P{Bidi_Mirrored= :=No}');
Expect(1, 39, '\p{Bidi_Mirrored=no}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=no}', "");
Expect(0, 39, '\P{Bidi_Mirrored=no}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=no}', "");
Expect(0, 41, '\p{Bidi_Mirrored=no}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=no}', "");
Expect(1, 41, '\P{Bidi_Mirrored=no}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=no}', "");
Expect(1, 39, '\p{Bidi_Mirrored=__No}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=__No}', "");
Expect(0, 39, '\P{Bidi_Mirrored=__No}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=__No}', "");
Expect(0, 41, '\p{Bidi_Mirrored=__No}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=__No}', "");
Expect(1, 41, '\P{Bidi_Mirrored=__No}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=__No}', "");
Error('\p{Bidi_M= :=N}');
Error('\P{Bidi_M= :=N}');
Expect(1, 39, '\p{Bidi_M=n}', "");
Expect(0, 39, '\p{^Bidi_M=n}', "");
Expect(0, 39, '\P{Bidi_M=n}', "");
Expect(1, 39, '\P{^Bidi_M=n}', "");
Expect(0, 41, '\p{Bidi_M=n}', "");
Expect(1, 41, '\p{^Bidi_M=n}', "");
Expect(1, 41, '\P{Bidi_M=n}', "");
Expect(0, 41, '\P{^Bidi_M=n}', "");
Expect(1, 39, '\p{Bidi_M= N}', "");
Expect(0, 39, '\p{^Bidi_M= N}', "");
Expect(0, 39, '\P{Bidi_M= N}', "");
Expect(1, 39, '\P{^Bidi_M= N}', "");
Expect(0, 41, '\p{Bidi_M= N}', "");
Expect(1, 41, '\p{^Bidi_M= N}', "");
Expect(1, 41, '\P{Bidi_M= N}', "");
Expect(0, 41, '\P{^Bidi_M= N}', "");
Error('\p{Is_Bidi_Mirrored=/a/- F}');
Error('\P{Is_Bidi_Mirrored=/a/- F}');
Expect(1, 39, '\p{Is_Bidi_Mirrored=f}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored=f}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored=f}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored=f}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored=f}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored=f}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored=f}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored=f}', "");
Expect(1, 39, '\p{Is_Bidi_Mirrored=_f}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored=_f}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored=_f}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored=_f}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored=_f}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored=_f}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored=_f}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored=_f}', "");
Error('\p{Is_Bidi_M=  FALSE/a/}');
Error('\P{Is_Bidi_M=  FALSE/a/}');
Expect(1, 39, '\p{Is_Bidi_M=false}', "");
Expect(0, 39, '\p{^Is_Bidi_M=false}', "");
Expect(0, 39, '\P{Is_Bidi_M=false}', "");
Expect(1, 39, '\P{^Is_Bidi_M=false}', "");
Expect(0, 41, '\p{Is_Bidi_M=false}', "");
Expect(1, 41, '\p{^Is_Bidi_M=false}', "");
Expect(1, 41, '\P{Is_Bidi_M=false}', "");
Expect(0, 41, '\P{^Is_Bidi_M=false}', "");
Expect(1, 39, '\p{Is_Bidi_M:	-	False}', "");
Expect(0, 39, '\p{^Is_Bidi_M:	-	False}', "");
Expect(0, 39, '\P{Is_Bidi_M:	-	False}', "");
Expect(1, 39, '\P{^Is_Bidi_M:	-	False}', "");
Expect(0, 41, '\p{Is_Bidi_M:	-	False}', "");
Expect(1, 41, '\p{^Is_Bidi_M:	-	False}', "");
Expect(1, 41, '\P{Is_Bidi_M:	-	False}', "");
Expect(0, 41, '\P{^Is_Bidi_M:	-	False}', "");
Error('\p{Lowercase=:= YES}');
Error('\P{Lowercase=:= YES}');
Expect(1, 122, '\p{Lowercase=yes}', "");
Expect(0, 122, '\p{^Lowercase=yes}', "");
Expect(0, 122, '\P{Lowercase=yes}', "");
Expect(1, 122, '\P{^Lowercase=yes}', "");
Expect(0, 96, '\p{Lowercase=yes}', "");
Expect(1, 96, '\p{^Lowercase=yes}', "");
Expect(1, 96, '\P{Lowercase=yes}', "");
Expect(0, 96, '\P{^Lowercase=yes}', "");
Expect(1, 122, '\p{Lowercase=	 yes}', "");
Expect(0, 122, '\p{^Lowercase=	 yes}', "");
Expect(0, 122, '\P{Lowercase=	 yes}', "");
Expect(1, 122, '\P{^Lowercase=	 yes}', "");
Expect(0, 96, '\p{Lowercase=	 yes}', "");
Expect(1, 96, '\p{^Lowercase=	 yes}', "");
Expect(1, 96, '\P{Lowercase=	 yes}', "");
Expect(0, 96, '\P{^Lowercase=	 yes}', "");
Error('\p{Lower= Y/a/}');
Error('\P{Lower= Y/a/}');
Expect(1, 122, '\p{Lower=y}', "");
Expect(0, 122, '\p{^Lower=y}', "");
Expect(0, 122, '\P{Lower=y}', "");
Expect(1, 122, '\P{^Lower=y}', "");
Expect(0, 96, '\p{Lower=y}', "");
Expect(1, 96, '\p{^Lower=y}', "");
Expect(1, 96, '\P{Lower=y}', "");
Expect(0, 96, '\P{^Lower=y}', "");
Expect(1, 122, '\p{Lower:	-Y}', "");
Expect(0, 122, '\p{^Lower:	-Y}', "");
Expect(0, 122, '\P{Lower:	-Y}', "");
Expect(1, 122, '\P{^Lower:	-Y}', "");
Expect(0, 96, '\p{Lower:	-Y}', "");
Expect(1, 96, '\p{^Lower:	-Y}', "");
Expect(1, 96, '\P{Lower:	-Y}', "");
Expect(0, 96, '\P{^Lower:	-Y}', "");
Error('\p{Is_Lowercase=	T:=}');
Error('\P{Is_Lowercase=	T:=}');
Expect(1, 122, '\p{Is_Lowercase=t}', "");
Expect(0, 122, '\p{^Is_Lowercase=t}', "");
Expect(0, 122, '\P{Is_Lowercase=t}', "");
Expect(1, 122, '\P{^Is_Lowercase=t}', "");
Expect(0, 96, '\p{Is_Lowercase=t}', "");
Expect(1, 96, '\p{^Is_Lowercase=t}', "");
Expect(1, 96, '\P{Is_Lowercase=t}', "");
Expect(0, 96, '\P{^Is_Lowercase=t}', "");
Expect(1, 122, '\p{Is_Lowercase:	-_T}', "");
Expect(0, 122, '\p{^Is_Lowercase:	-_T}', "");
Expect(0, 122, '\P{Is_Lowercase:	-_T}', "");
Expect(1, 122, '\P{^Is_Lowercase:	-_T}', "");
Expect(0, 96, '\p{Is_Lowercase:	-_T}', "");
Expect(1, 96, '\p{^Is_Lowercase:	-_T}', "");
Expect(1, 96, '\P{Is_Lowercase:	-_T}', "");
Expect(0, 96, '\P{^Is_Lowercase:	-_T}', "");
Error('\p{Is_Lower=-	True:=}');
Error('\P{Is_Lower=-	True:=}');
Expect(1, 122, '\p{Is_Lower=true}', "");
Expect(0, 122, '\p{^Is_Lower=true}', "");
Expect(0, 122, '\P{Is_Lower=true}', "");
Expect(1, 122, '\P{^Is_Lower=true}', "");
Expect(0, 96, '\p{Is_Lower=true}', "");
Expect(1, 96, '\p{^Is_Lower=true}', "");
Expect(1, 96, '\P{Is_Lower=true}', "");
Expect(0, 96, '\P{^Is_Lower=true}', "");
Expect(1, 122, '\p{Is_Lower= _true}', "");
Expect(0, 122, '\p{^Is_Lower= _true}', "");
Expect(0, 122, '\P{Is_Lower= _true}', "");
Expect(1, 122, '\P{^Is_Lower= _true}', "");
Expect(0, 96, '\p{Is_Lower= _true}', "");
Expect(1, 96, '\p{^Is_Lower= _true}', "");
Expect(1, 96, '\P{Is_Lower= _true}', "");
Expect(0, 96, '\P{^Is_Lower= _true}', "");
Error('\p{Lowercase=-:=No}');
Error('\P{Lowercase=-:=No}');
Expect(1, 96, '\p{Lowercase=no}', "");
Expect(0, 96, '\p{^Lowercase=no}', "");
Expect(0, 96, '\P{Lowercase=no}', "");
Expect(1, 96, '\P{^Lowercase=no}', "");
Expect(0, 122, '\p{Lowercase=no}', "");
Expect(1, 122, '\p{^Lowercase=no}', "");
Expect(1, 122, '\P{Lowercase=no}', "");
Expect(0, 122, '\P{^Lowercase=no}', "");
Expect(1, 96, '\p{Lowercase=--No}', "");
Expect(0, 96, '\p{^Lowercase=--No}', "");
Expect(0, 96, '\P{Lowercase=--No}', "");
Expect(1, 96, '\P{^Lowercase=--No}', "");
Expect(0, 122, '\p{Lowercase=--No}', "");
Expect(1, 122, '\p{^Lowercase=--No}', "");
Expect(1, 122, '\P{Lowercase=--No}', "");
Expect(0, 122, '\P{^Lowercase=--No}', "");
Error('\p{Lower=/a/__N}');
Error('\P{Lower=/a/__N}');
Expect(1, 96, '\p{Lower=n}', "");
Expect(0, 96, '\p{^Lower=n}', "");
Expect(0, 96, '\P{Lower=n}', "");
Expect(1, 96, '\P{^Lower=n}', "");
Expect(0, 122, '\p{Lower=n}', "");
Expect(1, 122, '\p{^Lower=n}', "");
Expect(1, 122, '\P{Lower=n}', "");
Expect(0, 122, '\P{^Lower=n}', "");
Expect(1, 96, '\p{Lower= 	n}', "");
Expect(0, 96, '\p{^Lower= 	n}', "");
Expect(0, 96, '\P{Lower= 	n}', "");
Expect(1, 96, '\P{^Lower= 	n}', "");
Expect(0, 122, '\p{Lower= 	n}', "");
Expect(1, 122, '\p{^Lower= 	n}', "");
Expect(1, 122, '\P{Lower= 	n}', "");
Expect(0, 122, '\P{^Lower= 	n}', "");
Error('\p{Is_Lowercase=_F/a/}');
Error('\P{Is_Lowercase=_F/a/}');
Expect(1, 96, '\p{Is_Lowercase=f}', "");
Expect(0, 96, '\p{^Is_Lowercase=f}', "");
Expect(0, 96, '\P{Is_Lowercase=f}', "");
Expect(1, 96, '\P{^Is_Lowercase=f}', "");
Expect(0, 122, '\p{Is_Lowercase=f}', "");
Expect(1, 122, '\p{^Is_Lowercase=f}', "");
Expect(1, 122, '\P{Is_Lowercase=f}', "");
Expect(0, 122, '\P{^Is_Lowercase=f}', "");
Expect(1, 96, '\p{Is_Lowercase= F}', "");
Expect(0, 96, '\p{^Is_Lowercase= F}', "");
Expect(0, 96, '\P{Is_Lowercase= F}', "");
Expect(1, 96, '\P{^Is_Lowercase= F}', "");
Expect(0, 122, '\p{Is_Lowercase= F}', "");
Expect(1, 122, '\p{^Is_Lowercase= F}', "");
Expect(1, 122, '\P{Is_Lowercase= F}', "");
Expect(0, 122, '\P{^Is_Lowercase= F}', "");
Error('\p{Is_Lower= /a/FALSE}');
Error('\P{Is_Lower= /a/FALSE}');
Expect(1, 96, '\p{Is_Lower=false}', "");
Expect(0, 96, '\p{^Is_Lower=false}', "");
Expect(0, 96, '\P{Is_Lower=false}', "");
Expect(1, 96, '\P{^Is_Lower=false}', "");
Expect(0, 122, '\p{Is_Lower=false}', "");
Expect(1, 122, '\p{^Is_Lower=false}', "");
Expect(1, 122, '\P{Is_Lower=false}', "");
Expect(0, 122, '\P{^Is_Lower=false}', "");
Expect(1, 96, '\p{Is_Lower=- false}', "");
Expect(0, 96, '\p{^Is_Lower=- false}', "");
Expect(0, 96, '\P{Is_Lower=- false}', "");
Expect(1, 96, '\P{^Is_Lower=- false}', "");
Expect(0, 122, '\p{Is_Lower=- false}', "");
Expect(1, 122, '\p{^Is_Lower=- false}', "");
Expect(1, 122, '\P{Is_Lower=- false}', "");
Expect(0, 122, '\P{^Is_Lower=- false}', "");
Error('\p{Uppercase= YES/a/}');
Error('\P{Uppercase= YES/a/}');
Expect(1, 90, '\p{Uppercase=yes}', "");
Expect(0, 90, '\p{^Uppercase=yes}', "");
Expect(0, 90, '\P{Uppercase=yes}', "");
Expect(1, 90, '\P{^Uppercase=yes}', "");
Expect(0, 64, '\p{Uppercase=yes}', "");
Expect(1, 64, '\p{^Uppercase=yes}', "");
Expect(1, 64, '\P{Uppercase=yes}', "");
Expect(0, 64, '\P{^Uppercase=yes}', "");
Expect(1, 90, '\p{Uppercase=  Yes}', "");
Expect(0, 90, '\p{^Uppercase=  Yes}', "");
Expect(0, 90, '\P{Uppercase=  Yes}', "");
Expect(1, 90, '\P{^Uppercase=  Yes}', "");
Expect(0, 64, '\p{Uppercase=  Yes}', "");
Expect(1, 64, '\p{^Uppercase=  Yes}', "");
Expect(1, 64, '\P{Uppercase=  Yes}', "");
Expect(0, 64, '\P{^Uppercase=  Yes}', "");
Error('\p{Upper: :=Y}');
Error('\P{Upper: :=Y}');
Expect(1, 90, '\p{Upper=y}', "");
Expect(0, 90, '\p{^Upper=y}', "");
Expect(0, 90, '\P{Upper=y}', "");
Expect(1, 90, '\P{^Upper=y}', "");
Expect(0, 64, '\p{Upper=y}', "");
Expect(1, 64, '\p{^Upper=y}', "");
Expect(1, 64, '\P{Upper=y}', "");
Expect(0, 64, '\P{^Upper=y}', "");
Expect(1, 90, '\p{Upper=	y}', "");
Expect(0, 90, '\p{^Upper=	y}', "");
Expect(0, 90, '\P{Upper=	y}', "");
Expect(1, 90, '\P{^Upper=	y}', "");
Expect(0, 64, '\p{Upper=	y}', "");
Expect(1, 64, '\p{^Upper=	y}', "");
Expect(1, 64, '\P{Upper=	y}', "");
Expect(0, 64, '\P{^Upper=	y}', "");
Error('\p{Is_Uppercase=/a/__T}');
Error('\P{Is_Uppercase=/a/__T}');
Expect(1, 90, '\p{Is_Uppercase:   t}', "");
Expect(0, 90, '\p{^Is_Uppercase:   t}', "");
Expect(0, 90, '\P{Is_Uppercase:   t}', "");
Expect(1, 90, '\P{^Is_Uppercase:   t}', "");
Expect(0, 64, '\p{Is_Uppercase:   t}', "");
Expect(1, 64, '\p{^Is_Uppercase:   t}', "");
Expect(1, 64, '\P{Is_Uppercase:   t}', "");
Expect(0, 64, '\P{^Is_Uppercase:   t}', "");
Expect(1, 90, '\p{Is_Uppercase=_T}', "");
Expect(0, 90, '\p{^Is_Uppercase=_T}', "");
Expect(0, 90, '\P{Is_Uppercase=_T}', "");
Expect(1, 90, '\P{^Is_Uppercase=_T}', "");
Expect(0, 64, '\p{Is_Uppercase=_T}', "");
Expect(1, 64, '\p{^Is_Uppercase=_T}', "");
Expect(1, 64, '\P{Is_Uppercase=_T}', "");
Expect(0, 64, '\P{^Is_Uppercase=_T}', "");
Error('\p{Is_Upper=_/a/True}');
Error('\P{Is_Upper=_/a/True}');
Expect(1, 90, '\p{Is_Upper=true}', "");
Expect(0, 90, '\p{^Is_Upper=true}', "");
Expect(0, 90, '\P{Is_Upper=true}', "");
Expect(1, 90, '\P{^Is_Upper=true}', "");
Expect(0, 64, '\p{Is_Upper=true}', "");
Expect(1, 64, '\p{^Is_Upper=true}', "");
Expect(1, 64, '\P{Is_Upper=true}', "");
Expect(0, 64, '\P{^Is_Upper=true}', "");
Expect(1, 90, '\p{Is_Upper=_True}', "");
Expect(0, 90, '\p{^Is_Upper=_True}', "");
Expect(0, 90, '\P{Is_Upper=_True}', "");
Expect(1, 90, '\P{^Is_Upper=_True}', "");
Expect(0, 64, '\p{Is_Upper=_True}', "");
Expect(1, 64, '\p{^Is_Upper=_True}', "");
Expect(1, 64, '\P{Is_Upper=_True}', "");
Expect(0, 64, '\P{^Is_Upper=_True}', "");
Error('\p{Uppercase=/a/_	no}');
Error('\P{Uppercase=/a/_	no}');
Expect(1, 64, '\p{Uppercase=no}', "");
Expect(0, 64, '\p{^Uppercase=no}', "");
Expect(0, 64, '\P{Uppercase=no}', "");
Expect(1, 64, '\P{^Uppercase=no}', "");
Expect(0, 90, '\p{Uppercase=no}', "");
Expect(1, 90, '\p{^Uppercase=no}', "");
Expect(1, 90, '\P{Uppercase=no}', "");
Expect(0, 90, '\P{^Uppercase=no}', "");
Expect(1, 64, '\p{Uppercase= no}', "");
Expect(0, 64, '\p{^Uppercase= no}', "");
Expect(0, 64, '\P{Uppercase= no}', "");
Expect(1, 64, '\P{^Uppercase= no}', "");
Expect(0, 90, '\p{Uppercase= no}', "");
Expect(1, 90, '\p{^Uppercase= no}', "");
Expect(1, 90, '\P{Uppercase= no}', "");
Expect(0, 90, '\P{^Uppercase= no}', "");
Error('\p{Upper=__N:=}');
Error('\P{Upper=__N:=}');
Expect(1, 64, '\p{Upper=n}', "");
Expect(0, 64, '\p{^Upper=n}', "");
Expect(0, 64, '\P{Upper=n}', "");
Expect(1, 64, '\P{^Upper=n}', "");
Expect(0, 90, '\p{Upper=n}', "");
Expect(1, 90, '\p{^Upper=n}', "");
Expect(1, 90, '\P{Upper=n}', "");
Expect(0, 90, '\P{^Upper=n}', "");
Expect(1, 64, '\p{Upper:   	N}', "");
Expect(0, 64, '\p{^Upper:   	N}', "");
Expect(0, 64, '\P{Upper:   	N}', "");
Expect(1, 64, '\P{^Upper:   	N}', "");
Expect(0, 90, '\p{Upper:   	N}', "");
Expect(1, 90, '\p{^Upper:   	N}', "");
Expect(1, 90, '\P{Upper:   	N}', "");
Expect(0, 90, '\P{^Upper:   	N}', "");
Error('\p{Is_Uppercase=/a/F}');
Error('\P{Is_Uppercase=/a/F}');
Expect(1, 64, '\p{Is_Uppercase=f}', "");
Expect(0, 64, '\p{^Is_Uppercase=f}', "");
Expect(0, 64, '\P{Is_Uppercase=f}', "");
Expect(1, 64, '\P{^Is_Uppercase=f}', "");
Expect(0, 90, '\p{Is_Uppercase=f}', "");
Expect(1, 90, '\p{^Is_Uppercase=f}', "");
Expect(1, 90, '\P{Is_Uppercase=f}', "");
Expect(0, 90, '\P{^Is_Uppercase=f}', "");
Expect(1, 64, '\p{Is_Uppercase= -F}', "");
Expect(0, 64, '\p{^Is_Uppercase= -F}', "");
Expect(0, 64, '\P{Is_Uppercase= -F}', "");
Expect(1, 64, '\P{^Is_Uppercase= -F}', "");
Expect(0, 90, '\p{Is_Uppercase= -F}', "");
Expect(1, 90, '\p{^Is_Uppercase= -F}', "");
Expect(1, 90, '\P{Is_Uppercase= -F}', "");
Expect(0, 90, '\P{^Is_Uppercase= -F}', "");
Error('\p{Is_Upper=		FALSE:=}');
Error('\P{Is_Upper=		FALSE:=}');
Expect(1, 64, '\p{Is_Upper=false}', "");
Expect(0, 64, '\p{^Is_Upper=false}', "");
Expect(0, 64, '\P{Is_Upper=false}', "");
Expect(1, 64, '\P{^Is_Upper=false}', "");
Expect(0, 90, '\p{Is_Upper=false}', "");
Expect(1, 90, '\p{^Is_Upper=false}', "");
Expect(1, 90, '\P{Is_Upper=false}', "");
Expect(0, 90, '\P{^Is_Upper=false}', "");
Expect(1, 64, '\p{Is_Upper=_	False}', "");
Expect(0, 64, '\p{^Is_Upper=_	False}', "");
Expect(0, 64, '\P{Is_Upper=_	False}', "");
Expect(1, 64, '\P{^Is_Upper=_	False}', "");
Expect(0, 90, '\p{Is_Upper=_	False}', "");
Expect(1, 90, '\p{^Is_Upper=_	False}', "");
Expect(1, 90, '\P{Is_Upper=_	False}', "");
Expect(0, 90, '\P{^Is_Upper=_	False}', "");
Error('\p{Expands_On_NFKC=Yes}');
Error('\P{Expands_On_NFKC=Yes}');
Error('\p{XO_NFKC=Y}');
Error('\P{XO_NFKC=Y}');
Error('\p{Is_Expands_On_NFKC=T}');
Error('\P{Is_Expands_On_NFKC=T}');
Error('\p{Is_XO_NFKC=True}');
Error('\P{Is_XO_NFKC=True}');
Error('\p{Expands_On_NFKC:	No}');
Error('\P{Expands_On_NFKC:	No}');
Error('\p{XO_NFKC=N}');
Error('\P{XO_NFKC=N}');
Error('\p{Is_Expands_On_NFKC:F}');
Error('\P{Is_Expands_On_NFKC:F}');
Error('\p{Is_XO_NFKC: False}');
Error('\P{Is_XO_NFKC: False}');
Error('\p{NFD_Quick_Check=__YES/a/}');
Error('\P{NFD_Quick_Check=__YES/a/}');
Expect(1, 191, '\p{NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{NFD_Quick_Check=-	yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=-	yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=-	yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=-	yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=-	yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=-	yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=-	yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=-	yes}', "");
Error('\p{NFD_QC:   	/a/Y}');
Error('\P{NFD_QC:   	/a/Y}');
Expect(1, 191, '\p{NFD_QC=y}', "");
Expect(0, 191, '\p{^NFD_QC=y}', "");
Expect(0, 191, '\P{NFD_QC=y}', "");
Expect(1, 191, '\P{^NFD_QC=y}', "");
Expect(0, 197, '\p{NFD_QC=y}', "");
Expect(1, 197, '\p{^NFD_QC=y}', "");
Expect(1, 197, '\P{NFD_QC=y}', "");
Expect(0, 197, '\P{^NFD_QC=y}', "");
Expect(1, 191, '\p{NFD_QC= _Y}', "");
Expect(0, 191, '\p{^NFD_QC= _Y}', "");
Expect(0, 191, '\P{NFD_QC= _Y}', "");
Expect(1, 191, '\P{^NFD_QC= _Y}', "");
Expect(0, 197, '\p{NFD_QC= _Y}', "");
Expect(1, 197, '\p{^NFD_QC= _Y}', "");
Expect(1, 197, '\P{NFD_QC= _Y}', "");
Expect(0, 197, '\P{^NFD_QC= _Y}', "");
Error('\p{Is_NFD_Quick_Check= Yes:=}');
Error('\P{Is_NFD_Quick_Check= Yes:=}');
Expect(1, 191, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{Is_NFD_Quick_Check= 	yes}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check= 	yes}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check= 	yes}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check= 	yes}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check= 	yes}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check= 	yes}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check= 	yes}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check= 	yes}', "");
Error('\p{Is_NFD_QC=/a/-	Y}');
Error('\P{Is_NFD_QC=/a/-	Y}');
Expect(1, 191, '\p{Is_NFD_QC=y}', "");
Expect(0, 191, '\p{^Is_NFD_QC=y}', "");
Expect(0, 191, '\P{Is_NFD_QC=y}', "");
Expect(1, 191, '\P{^Is_NFD_QC=y}', "");
Expect(0, 197, '\p{Is_NFD_QC=y}', "");
Expect(1, 197, '\p{^Is_NFD_QC=y}', "");
Expect(1, 197, '\P{Is_NFD_QC=y}', "");
Expect(0, 197, '\P{^Is_NFD_QC=y}', "");
Expect(1, 191, '\p{Is_NFD_QC= -Y}', "");
Expect(0, 191, '\p{^Is_NFD_QC= -Y}', "");
Expect(0, 191, '\P{Is_NFD_QC= -Y}', "");
Expect(1, 191, '\P{^Is_NFD_QC= -Y}', "");
Expect(0, 197, '\p{Is_NFD_QC= -Y}', "");
Expect(1, 197, '\p{^Is_NFD_QC= -Y}', "");
Expect(1, 197, '\P{Is_NFD_QC= -Y}', "");
Expect(0, 197, '\P{^Is_NFD_QC= -Y}', "");
Error('\p{NFD_Quick_Check=:=_ No}');
Error('\P{NFD_Quick_Check=:=_ No}');
Expect(1, 197, '\p{NFD_Quick_Check: no}', "");
Expect(0, 197, '\p{^NFD_Quick_Check: no}', "");
Expect(0, 197, '\P{NFD_Quick_Check: no}', "");
Expect(1, 197, '\P{^NFD_Quick_Check: no}', "");
Expect(0, 191, '\p{NFD_Quick_Check: no}', "");
Expect(1, 191, '\p{^NFD_Quick_Check: no}', "");
Expect(1, 191, '\P{NFD_Quick_Check: no}', "");
Expect(0, 191, '\P{^NFD_Quick_Check: no}', "");
Expect(1, 197, '\p{NFD_Quick_Check= 	NO}', "");
Expect(0, 197, '\p{^NFD_Quick_Check= 	NO}', "");
Expect(0, 197, '\P{NFD_Quick_Check= 	NO}', "");
Expect(1, 197, '\P{^NFD_Quick_Check= 	NO}', "");
Expect(0, 191, '\p{NFD_Quick_Check= 	NO}', "");
Expect(1, 191, '\p{^NFD_Quick_Check= 	NO}', "");
Expect(1, 191, '\P{NFD_Quick_Check= 	NO}', "");
Expect(0, 191, '\P{^NFD_Quick_Check= 	NO}', "");
Error('\p{NFD_QC=	:=N}');
Error('\P{NFD_QC=	:=N}');
Expect(1, 197, '\p{NFD_QC: n}', "");
Expect(0, 197, '\p{^NFD_QC: n}', "");
Expect(0, 197, '\P{NFD_QC: n}', "");
Expect(1, 197, '\P{^NFD_QC: n}', "");
Expect(0, 191, '\p{NFD_QC: n}', "");
Expect(1, 191, '\p{^NFD_QC: n}', "");
Expect(1, 191, '\P{NFD_QC: n}', "");
Expect(0, 191, '\P{^NFD_QC: n}', "");
Expect(1, 197, '\p{NFD_QC:	_n}', "");
Expect(0, 197, '\p{^NFD_QC:	_n}', "");
Expect(0, 197, '\P{NFD_QC:	_n}', "");
Expect(1, 197, '\P{^NFD_QC:	_n}', "");
Expect(0, 191, '\p{NFD_QC:	_n}', "");
Expect(1, 191, '\p{^NFD_QC:	_n}', "");
Expect(1, 191, '\P{NFD_QC:	_n}', "");
Expect(0, 191, '\P{^NFD_QC:	_n}', "");
Error('\p{Is_NFD_Quick_Check=/a/_no}');
Error('\P{Is_NFD_Quick_Check=/a/_no}');
Expect(1, 197, '\p{Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\p{Is_NFD_Quick_Check:-	No}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check:-	No}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check:-	No}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check:-	No}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check:-	No}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check:-	No}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check:-	No}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check:-	No}', "");
Error('\p{Is_NFD_QC=	:=N}');
Error('\P{Is_NFD_QC=	:=N}');
Expect(1, 197, '\p{Is_NFD_QC=n}', "");
Expect(0, 197, '\p{^Is_NFD_QC=n}', "");
Expect(0, 197, '\P{Is_NFD_QC=n}', "");
Expect(1, 197, '\P{^Is_NFD_QC=n}', "");
Expect(0, 191, '\p{Is_NFD_QC=n}', "");
Expect(1, 191, '\p{^Is_NFD_QC=n}', "");
Expect(1, 191, '\P{Is_NFD_QC=n}', "");
Expect(0, 191, '\P{^Is_NFD_QC=n}', "");
Expect(1, 197, '\p{Is_NFD_QC=_ n}', "");
Expect(0, 197, '\p{^Is_NFD_QC=_ n}', "");
Expect(0, 197, '\P{Is_NFD_QC=_ n}', "");
Expect(1, 197, '\P{^Is_NFD_QC=_ n}', "");
Expect(0, 191, '\p{Is_NFD_QC=_ n}', "");
Expect(1, 191, '\p{^Is_NFD_QC=_ n}', "");
Expect(1, 191, '\P{Is_NFD_QC=_ n}', "");
Expect(0, 191, '\P{^Is_NFD_QC=_ n}', "");
Error('\p{Line_Break= -Space:=}');
Error('\P{Line_Break= -Space:=}');
Expect(1, 32, '\p{Line_Break:   space}', "");
Expect(0, 32, '\p{^Line_Break:   space}', "");
Expect(0, 32, '\P{Line_Break:   space}', "");
Expect(1, 32, '\P{^Line_Break:   space}', "");
Expect(0, 31, '\p{Line_Break:   space}', "");
Expect(1, 31, '\p{^Line_Break:   space}', "");
Expect(1, 31, '\P{Line_Break:   space}', "");
Expect(0, 31, '\P{^Line_Break:   space}', "");
Expect(1, 32, '\p{Line_Break=	SPACE}', "");
Expect(0, 32, '\p{^Line_Break=	SPACE}', "");
Expect(0, 32, '\P{Line_Break=	SPACE}', "");
Expect(1, 32, '\P{^Line_Break=	SPACE}', "");
Expect(0, 31, '\p{Line_Break=	SPACE}', "");
Expect(1, 31, '\p{^Line_Break=	SPACE}', "");
Expect(1, 31, '\P{Line_Break=	SPACE}', "");
Expect(0, 31, '\P{^Line_Break=	SPACE}', "");
Error('\p{Lb=:=-	SP}');
Error('\P{Lb=:=-	SP}');
Expect(1, 32, '\p{Lb=sp}', "");
Expect(0, 32, '\p{^Lb=sp}', "");
Expect(0, 32, '\P{Lb=sp}', "");
Expect(1, 32, '\P{^Lb=sp}', "");
Expect(0, 31, '\p{Lb=sp}', "");
Expect(1, 31, '\p{^Lb=sp}', "");
Expect(1, 31, '\P{Lb=sp}', "");
Expect(0, 31, '\P{^Lb=sp}', "");
Expect(1, 32, '\p{Lb: 	sp}', "");
Expect(0, 32, '\p{^Lb: 	sp}', "");
Expect(0, 32, '\P{Lb: 	sp}', "");
Expect(1, 32, '\P{^Lb: 	sp}', "");
Expect(0, 31, '\p{Lb: 	sp}', "");
Expect(1, 31, '\p{^Lb: 	sp}', "");
Expect(1, 31, '\P{Lb: 	sp}', "");
Expect(0, 31, '\P{^Lb: 	sp}', "");
Error('\p{Is_Line_Break=_:=Space}');
Error('\P{Is_Line_Break=_:=Space}');
Expect(1, 32, '\p{Is_Line_Break:space}', "");
Expect(0, 32, '\p{^Is_Line_Break:space}', "");
Expect(0, 32, '\P{Is_Line_Break:space}', "");
Expect(1, 32, '\P{^Is_Line_Break:space}', "");
Expect(0, 31, '\p{Is_Line_Break:space}', "");
Expect(1, 31, '\p{^Is_Line_Break:space}', "");
Expect(1, 31, '\P{Is_Line_Break:space}', "");
Expect(0, 31, '\P{^Is_Line_Break:space}', "");
Expect(1, 32, '\p{Is_Line_Break=--space}', "");
Expect(0, 32, '\p{^Is_Line_Break=--space}', "");
Expect(0, 32, '\P{Is_Line_Break=--space}', "");
Expect(1, 32, '\P{^Is_Line_Break=--space}', "");
Expect(0, 31, '\p{Is_Line_Break=--space}', "");
Expect(1, 31, '\p{^Is_Line_Break=--space}', "");
Expect(1, 31, '\P{Is_Line_Break=--space}', "");
Expect(0, 31, '\P{^Is_Line_Break=--space}', "");
Error('\p{Is_Lb=- sp:=}');
Error('\P{Is_Lb=- sp:=}');
Expect(1, 32, '\p{Is_Lb=sp}', "");
Expect(0, 32, '\p{^Is_Lb=sp}', "");
Expect(0, 32, '\P{Is_Lb=sp}', "");
Expect(1, 32, '\P{^Is_Lb=sp}', "");
Expect(0, 31, '\p{Is_Lb=sp}', "");
Expect(1, 31, '\p{^Is_Lb=sp}', "");
Expect(1, 31, '\P{Is_Lb=sp}', "");
Expect(0, 31, '\P{^Is_Lb=sp}', "");
Expect(1, 32, '\p{Is_Lb=SP}', "");
Expect(0, 32, '\p{^Is_Lb=SP}', "");
Expect(0, 32, '\P{Is_Lb=SP}', "");
Expect(1, 32, '\P{^Is_Lb=SP}', "");
Expect(0, 31, '\p{Is_Lb=SP}', "");
Expect(1, 31, '\p{^Is_Lb=SP}', "");
Expect(1, 31, '\P{Is_Lb=SP}', "");
Expect(0, 31, '\P{^Is_Lb=SP}', "");
Error('\p{Line_Break= -GLUE:=}');
Error('\P{Line_Break= -GLUE:=}');
Expect(1, 160, '\p{Line_Break=glue}', "");
Expect(0, 160, '\p{^Line_Break=glue}', "");
Expect(0, 160, '\P{Line_Break=glue}', "");
Expect(1, 160, '\P{^Line_Break=glue}', "");
Expect(0, 159, '\p{Line_Break=glue}', "");
Expect(1, 159, '\p{^Line_Break=glue}', "");
Expect(1, 159, '\P{Line_Break=glue}', "");
Expect(0, 159, '\P{^Line_Break=glue}', "");
Error('\p{Lb=:=		GL}');
Error('\P{Lb=:=		GL}');
Expect(1, 160, '\p{Lb=gl}', "");
Expect(0, 160, '\p{^Lb=gl}', "");
Expect(0, 160, '\P{Lb=gl}', "");
Expect(1, 160, '\P{^Lb=gl}', "");
Expect(0, 159, '\p{Lb=gl}', "");
Expect(1, 159, '\p{^Lb=gl}', "");
Expect(1, 159, '\P{Lb=gl}', "");
Expect(0, 159, '\P{^Lb=gl}', "");
Expect(1, 160, '\p{Lb=_-GL}', "");
Expect(0, 160, '\p{^Lb=_-GL}', "");
Expect(0, 160, '\P{Lb=_-GL}', "");
Expect(1, 160, '\P{^Lb=_-GL}', "");
Expect(0, 159, '\p{Lb=_-GL}', "");
Expect(1, 159, '\p{^Lb=_-GL}', "");
Expect(1, 159, '\P{Lb=_-GL}', "");
Expect(0, 159, '\P{^Lb=_-GL}', "");
Error('\p{Is_Line_Break=/a/	Glue}');
Error('\P{Is_Line_Break=/a/	Glue}');
Expect(1, 160, '\p{Is_Line_Break=glue}', "");
Expect(0, 160, '\p{^Is_Line_Break=glue}', "");
Expect(0, 160, '\P{Is_Line_Break=glue}', "");
Expect(1, 160, '\P{^Is_Line_Break=glue}', "");
Expect(0, 159, '\p{Is_Line_Break=glue}', "");
Expect(1, 159, '\p{^Is_Line_Break=glue}', "");
Expect(1, 159, '\P{Is_Line_Break=glue}', "");
Expect(0, 159, '\P{^Is_Line_Break=glue}', "");
Expect(1, 160, '\p{Is_Line_Break=_glue}', "");
Expect(0, 160, '\p{^Is_Line_Break=_glue}', "");
Expect(0, 160, '\P{Is_Line_Break=_glue}', "");
Expect(1, 160, '\P{^Is_Line_Break=_glue}', "");
Expect(0, 159, '\p{Is_Line_Break=_glue}', "");
Expect(1, 159, '\p{^Is_Line_Break=_glue}', "");
Expect(1, 159, '\P{Is_Line_Break=_glue}', "");
Expect(0, 159, '\P{^Is_Line_Break=_glue}', "");
Error('\p{Is_Lb=/a/_gl}');
Error('\P{Is_Lb=/a/_gl}');
Expect(1, 160, '\p{Is_Lb=gl}', "");
Expect(0, 160, '\p{^Is_Lb=gl}', "");
Expect(0, 160, '\P{Is_Lb=gl}', "");
Expect(1, 160, '\P{^Is_Lb=gl}', "");
Expect(0, 159, '\p{Is_Lb=gl}', "");
Expect(1, 159, '\p{^Is_Lb=gl}', "");
Expect(1, 159, '\P{Is_Lb=gl}', "");
Expect(0, 159, '\P{^Is_Lb=gl}', "");
Expect(1, 160, '\p{Is_Lb= 	GL}', "");
Expect(0, 160, '\p{^Is_Lb= 	GL}', "");
Expect(0, 160, '\P{Is_Lb= 	GL}', "");
Expect(1, 160, '\P{^Is_Lb= 	GL}', "");
Expect(0, 159, '\p{Is_Lb= 	GL}', "");
Expect(1, 159, '\p{^Is_Lb= 	GL}', "");
Expect(1, 159, '\P{Is_Lb= 	GL}', "");
Expect(0, 159, '\P{^Is_Lb= 	GL}', "");
Error('\p{Line_Break=/a/-SURROGATE}');
Error('\P{Line_Break=/a/-SURROGATE}');
Expect(0, 55295, '\p{Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\p{Line_Break=-_SURROGATE}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=-_SURROGATE}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=-_SURROGATE}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=-_SURROGATE}', 'deprecated');
Error('\p{Lb=		SG:=}');
Error('\P{Lb=		SG:=}');
Expect(0, 55295, '\p{Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Lb=--sg}', 'deprecated');
Expect(1, 55295, '\p{^Lb=--sg}', 'deprecated');
Expect(1, 55295, '\P{Lb=--sg}', 'deprecated');
Expect(0, 55295, '\P{^Lb=--sg}', 'deprecated');
Error('\p{Is_Line_Break=:= -Surrogate}');
Error('\P{Is_Line_Break=:= -Surrogate}');
Expect(0, 55295, '\p{Is_Line_Break:   surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break:   surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break:   surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break:   surrogate}', 'deprecated');
Expect(0, 55295, '\p{Is_Line_Break: 	_Surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break: 	_Surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break: 	_Surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break: 	_Surrogate}', 'deprecated');
Error('\p{Is_Lb=/a/SG}');
Error('\P{Is_Lb=/a/SG}');
Expect(0, 55295, '\p{Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Is_Lb=_SG}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=_SG}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=_SG}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=_SG}', 'deprecated');
Error('\p{Line_Break= Unknown:=}');
Error('\P{Line_Break= Unknown:=}');
Expect(1, 889, '\p{Line_Break=unknown}', "");
Expect(0, 889, '\p{^Line_Break=unknown}', "");
Expect(0, 889, '\P{Line_Break=unknown}', "");
Expect(1, 889, '\P{^Line_Break=unknown}', "");
Expect(0, 887, '\p{Line_Break=unknown}', "");
Expect(1, 887, '\p{^Line_Break=unknown}', "");
Expect(1, 887, '\P{Line_Break=unknown}', "");
Expect(0, 887, '\P{^Line_Break=unknown}', "");
Expect(1, 889, '\p{Line_Break=__UNKNOWN}', "");
Expect(0, 889, '\p{^Line_Break=__UNKNOWN}', "");
Expect(0, 889, '\P{Line_Break=__UNKNOWN}', "");
Expect(1, 889, '\P{^Line_Break=__UNKNOWN}', "");
Expect(0, 887, '\p{Line_Break=__UNKNOWN}', "");
Expect(1, 887, '\p{^Line_Break=__UNKNOWN}', "");
Expect(1, 887, '\P{Line_Break=__UNKNOWN}', "");
Expect(0, 887, '\P{^Line_Break=__UNKNOWN}', "");
Error('\p{Lb=/a/ XX}');
Error('\P{Lb=/a/ XX}');
Expect(1, 889, '\p{Lb:	xx}', "");
Expect(0, 889, '\p{^Lb:	xx}', "");
Expect(0, 889, '\P{Lb:	xx}', "");
Expect(1, 889, '\P{^Lb:	xx}', "");
Expect(0, 887, '\p{Lb:	xx}', "");
Expect(1, 887, '\p{^Lb:	xx}', "");
Expect(1, 887, '\P{Lb:	xx}', "");
Expect(0, 887, '\P{^Lb:	xx}', "");
Expect(1, 889, '\p{Lb= -xx}', "");
Expect(0, 889, '\p{^Lb= -xx}', "");
Expect(0, 889, '\P{Lb= -xx}', "");
Expect(1, 889, '\P{^Lb= -xx}', "");
Expect(0, 887, '\p{Lb= -xx}', "");
Expect(1, 887, '\p{^Lb= -xx}', "");
Expect(1, 887, '\P{Lb= -xx}', "");
Expect(0, 887, '\P{^Lb= -xx}', "");
Error('\p{Is_Line_Break=	 Unknown:=}');
Error('\P{Is_Line_Break=	 Unknown:=}');
Expect(1, 889, '\p{Is_Line_Break:	unknown}', "");
Expect(0, 889, '\p{^Is_Line_Break:	unknown}', "");
Expect(0, 889, '\P{Is_Line_Break:	unknown}', "");
Expect(1, 889, '\P{^Is_Line_Break:	unknown}', "");
Expect(0, 887, '\p{Is_Line_Break:	unknown}', "");
Expect(1, 887, '\p{^Is_Line_Break:	unknown}', "");
Expect(1, 887, '\P{Is_Line_Break:	unknown}', "");
Expect(0, 887, '\P{^Is_Line_Break:	unknown}', "");
Expect(1, 889, '\p{Is_Line_Break=_ UNKNOWN}', "");
Expect(0, 889, '\p{^Is_Line_Break=_ UNKNOWN}', "");
Expect(0, 889, '\P{Is_Line_Break=_ UNKNOWN}', "");
Expect(1, 889, '\P{^Is_Line_Break=_ UNKNOWN}', "");
Expect(0, 887, '\p{Is_Line_Break=_ UNKNOWN}', "");
Expect(1, 887, '\p{^Is_Line_Break=_ UNKNOWN}', "");
Expect(1, 887, '\P{Is_Line_Break=_ UNKNOWN}', "");
Expect(0, 887, '\P{^Is_Line_Break=_ UNKNOWN}', "");
Error('\p{Is_Lb= XX:=}');
Error('\P{Is_Lb= XX:=}');
Expect(1, 889, '\p{Is_Lb=xx}', "");
Expect(0, 889, '\p{^Is_Lb=xx}', "");
Expect(0, 889, '\P{Is_Lb=xx}', "");
Expect(1, 889, '\P{^Is_Lb=xx}', "");
Expect(0, 887, '\p{Is_Lb=xx}', "");
Expect(1, 887, '\p{^Is_Lb=xx}', "");
Expect(1, 887, '\P{Is_Lb=xx}', "");
Expect(0, 887, '\P{^Is_Lb=xx}', "");
Expect(1, 889, '\p{Is_Lb= -XX}', "");
Expect(0, 889, '\p{^Is_Lb= -XX}', "");
Expect(0, 889, '\P{Is_Lb= -XX}', "");
Expect(1, 889, '\P{^Is_Lb= -XX}', "");
Expect(0, 887, '\p{Is_Lb= -XX}', "");
Expect(1, 887, '\p{^Is_Lb= -XX}', "");
Expect(1, 887, '\P{Is_Lb= -XX}', "");
Expect(0, 887, '\P{^Is_Lb= -XX}', "");
Error('\p{Line_Break=_-Numeric:=}');
Error('\P{Line_Break=_-Numeric:=}');
Expect(1, 57, '\p{Line_Break=numeric}', "");
Expect(0, 57, '\p{^Line_Break=numeric}', "");
Expect(0, 57, '\P{Line_Break=numeric}', "");
Expect(1, 57, '\P{^Line_Break=numeric}', "");
Expect(0, 47, '\p{Line_Break=numeric}', "");
Expect(1, 47, '\p{^Line_Break=numeric}', "");
Expect(1, 47, '\P{Line_Break=numeric}', "");
Expect(0, 47, '\P{^Line_Break=numeric}', "");
Expect(1, 57, '\p{Line_Break=__Numeric}', "");
Expect(0, 57, '\p{^Line_Break=__Numeric}', "");
Expect(0, 57, '\P{Line_Break=__Numeric}', "");
Expect(1, 57, '\P{^Line_Break=__Numeric}', "");
Expect(0, 47, '\p{Line_Break=__Numeric}', "");
Expect(1, 47, '\p{^Line_Break=__Numeric}', "");
Expect(1, 47, '\P{Line_Break=__Numeric}', "");
Expect(0, 47, '\P{^Line_Break=__Numeric}', "");
Error('\p{Lb=-_NU/a/}');
Error('\P{Lb=-_NU/a/}');
Expect(1, 57, '\p{Lb: nu}', "");
Expect(0, 57, '\p{^Lb: nu}', "");
Expect(0, 57, '\P{Lb: nu}', "");
Expect(1, 57, '\P{^Lb: nu}', "");
Expect(0, 47, '\p{Lb: nu}', "");
Expect(1, 47, '\p{^Lb: nu}', "");
Expect(1, 47, '\P{Lb: nu}', "");
Expect(0, 47, '\P{^Lb: nu}', "");
Expect(1, 57, '\p{Lb:	--NU}', "");
Expect(0, 57, '\p{^Lb:	--NU}', "");
Expect(0, 57, '\P{Lb:	--NU}', "");
Expect(1, 57, '\P{^Lb:	--NU}', "");
Expect(0, 47, '\p{Lb:	--NU}', "");
Expect(1, 47, '\p{^Lb:	--NU}', "");
Expect(1, 47, '\P{Lb:	--NU}', "");
Expect(0, 47, '\P{^Lb:	--NU}', "");
Error('\p{Is_Line_Break=-:=Numeric}');
Error('\P{Is_Line_Break=-:=Numeric}');
Expect(1, 57, '\p{Is_Line_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Line_Break=numeric}', "");
Expect(0, 57, '\P{Is_Line_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Line_Break=numeric}', "");
Expect(0, 47, '\p{Is_Line_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Line_Break=numeric}', "");
Expect(1, 47, '\P{Is_Line_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Line_Break=numeric}', "");
Expect(1, 57, '\p{Is_Line_Break=	Numeric}', "");
Expect(0, 57, '\p{^Is_Line_Break=	Numeric}', "");
Expect(0, 57, '\P{Is_Line_Break=	Numeric}', "");
Expect(1, 57, '\P{^Is_Line_Break=	Numeric}', "");
Expect(0, 47, '\p{Is_Line_Break=	Numeric}', "");
Expect(1, 47, '\p{^Is_Line_Break=	Numeric}', "");
Expect(1, 47, '\P{Is_Line_Break=	Numeric}', "");
Expect(0, 47, '\P{^Is_Line_Break=	Numeric}', "");
Error('\p{Is_Lb=_NU:=}');
Error('\P{Is_Lb=_NU:=}');
Expect(1, 57, '\p{Is_Lb=nu}', "");
Expect(0, 57, '\p{^Is_Lb=nu}', "");
Expect(0, 57, '\P{Is_Lb=nu}', "");
Expect(1, 57, '\P{^Is_Lb=nu}', "");
Expect(0, 47, '\p{Is_Lb=nu}', "");
Expect(1, 47, '\p{^Is_Lb=nu}', "");
Expect(1, 47, '\P{Is_Lb=nu}', "");
Expect(0, 47, '\P{^Is_Lb=nu}', "");
Expect(1, 57, '\p{Is_Lb= _nu}', "");
Expect(0, 57, '\p{^Is_Lb= _nu}', "");
Expect(0, 57, '\P{Is_Lb= _nu}', "");
Expect(1, 57, '\P{^Is_Lb= _nu}', "");
Expect(0, 47, '\p{Is_Lb= _nu}', "");
Expect(1, 47, '\p{^Is_Lb= _nu}', "");
Expect(1, 47, '\P{Is_Lb= _nu}', "");
Expect(0, 47, '\P{^Is_Lb= _nu}', "");
Error('\p{Line_Break=_BREAK/a/BEFORE}');
Error('\P{Line_Break=_BREAK/a/BEFORE}');
Expect(1, 180, '\p{Line_Break=breakbefore}', "");
Expect(0, 180, '\p{^Line_Break=breakbefore}', "");
Expect(0, 180, '\P{Line_Break=breakbefore}', "");
Expect(1, 180, '\P{^Line_Break=breakbefore}', "");
Expect(0, 179, '\p{Line_Break=breakbefore}', "");
Expect(1, 179, '\p{^Line_Break=breakbefore}', "");
Expect(1, 179, '\P{Line_Break=breakbefore}', "");
Expect(0, 179, '\P{^Line_Break=breakbefore}', "");
Expect(1, 180, '\p{Line_Break= _BREAKBefore}', "");
Expect(0, 180, '\p{^Line_Break= _BREAKBefore}', "");
Expect(0, 180, '\P{Line_Break= _BREAKBefore}', "");
Expect(1, 180, '\P{^Line_Break= _BREAKBefore}', "");
Expect(0, 179, '\p{Line_Break= _BREAKBefore}', "");
Expect(1, 179, '\p{^Line_Break= _BREAKBefore}', "");
Expect(1, 179, '\P{Line_Break= _BREAKBefore}', "");
Expect(0, 179, '\P{^Line_Break= _BREAKBefore}', "");
Error('\p{Lb=	-BB/a/}');
Error('\P{Lb=	-BB/a/}');
Expect(1, 180, '\p{Lb=bb}', "");
Expect(0, 180, '\p{^Lb=bb}', "");
Expect(0, 180, '\P{Lb=bb}', "");
Expect(1, 180, '\P{^Lb=bb}', "");
Expect(0, 179, '\p{Lb=bb}', "");
Expect(1, 179, '\p{^Lb=bb}', "");
Expect(1, 179, '\P{Lb=bb}', "");
Expect(0, 179, '\P{^Lb=bb}', "");
Expect(1, 180, '\p{Lb= 	BB}', "");
Expect(0, 180, '\p{^Lb= 	BB}', "");
Expect(0, 180, '\P{Lb= 	BB}', "");
Expect(1, 180, '\P{^Lb= 	BB}', "");
Expect(0, 179, '\p{Lb= 	BB}', "");
Expect(1, 179, '\p{^Lb= 	BB}', "");
Expect(1, 179, '\P{Lb= 	BB}', "");
Expect(0, 179, '\P{^Lb= 	BB}', "");
Error('\p{Is_Line_Break=/a/break	Before}');
Error('\P{Is_Line_Break=/a/break	Before}');
Expect(1, 180, '\p{Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\p{^Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\P{Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\P{^Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\p{Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\p{^Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\P{Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\P{^Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\p{Is_Line_Break=	-BREAK	Before}', "");
Expect(0, 180, '\p{^Is_Line_Break=	-BREAK	Before}', "");
Expect(0, 180, '\P{Is_Line_Break=	-BREAK	Before}', "");
Expect(1, 180, '\P{^Is_Line_Break=	-BREAK	Before}', "");
Expect(0, 179, '\p{Is_Line_Break=	-BREAK	Before}', "");
Expect(1, 179, '\p{^Is_Line_Break=	-BREAK	Before}', "");
Expect(1, 179, '\P{Is_Line_Break=	-BREAK	Before}', "");
Expect(0, 179, '\P{^Is_Line_Break=	-BREAK	Before}', "");
Error('\p{Is_Lb=/a/BB}');
Error('\P{Is_Lb=/a/BB}');
Expect(1, 180, '\p{Is_Lb=bb}', "");
Expect(0, 180, '\p{^Is_Lb=bb}', "");
Expect(0, 180, '\P{Is_Lb=bb}', "");
Expect(1, 180, '\P{^Is_Lb=bb}', "");
Expect(0, 179, '\p{Is_Lb=bb}', "");
Expect(1, 179, '\p{^Is_Lb=bb}', "");
Expect(1, 179, '\P{Is_Lb=bb}', "");
Expect(0, 179, '\P{^Is_Lb=bb}', "");
Expect(1, 180, '\p{Is_Lb= BB}', "");
Expect(0, 180, '\p{^Is_Lb= BB}', "");
Expect(0, 180, '\P{Is_Lb= BB}', "");
Expect(1, 180, '\P{^Is_Lb= BB}', "");
Expect(0, 179, '\p{Is_Lb= BB}', "");
Expect(1, 179, '\p{^Is_Lb= BB}', "");
Expect(1, 179, '\P{Is_Lb= BB}', "");
Expect(0, 179, '\P{^Is_Lb= BB}', "");
Error('\p{Line_Break=/a/_ zwspace}');
Error('\P{Line_Break=/a/_ zwspace}');
Expect(1, 8203, '\p{Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Line_Break:-ZWSpace}', "");
Expect(0, 8203, '\p{^Line_Break:-ZWSpace}', "");
Expect(0, 8203, '\P{Line_Break:-ZWSpace}', "");
Expect(1, 8203, '\P{^Line_Break:-ZWSpace}', "");
Expect(0, 8202, '\p{Line_Break:-ZWSpace}', "");
Expect(1, 8202, '\p{^Line_Break:-ZWSpace}', "");
Expect(1, 8202, '\P{Line_Break:-ZWSpace}', "");
Expect(0, 8202, '\P{^Line_Break:-ZWSpace}', "");
Error('\p{Lb=	_ZW/a/}');
Error('\P{Lb=	_ZW/a/}');
Expect(1, 8203, '\p{Lb=zw}', "");
Expect(0, 8203, '\p{^Lb=zw}', "");
Expect(0, 8203, '\P{Lb=zw}', "");
Expect(1, 8203, '\P{^Lb=zw}', "");
Expect(0, 8202, '\p{Lb=zw}', "");
Expect(1, 8202, '\p{^Lb=zw}', "");
Expect(1, 8202, '\P{Lb=zw}', "");
Expect(0, 8202, '\P{^Lb=zw}', "");
Expect(1, 8203, '\p{Lb= 	ZW}', "");
Expect(0, 8203, '\p{^Lb= 	ZW}', "");
Expect(0, 8203, '\P{Lb= 	ZW}', "");
Expect(1, 8203, '\P{^Lb= 	ZW}', "");
Expect(0, 8202, '\p{Lb= 	ZW}', "");
Expect(1, 8202, '\p{^Lb= 	ZW}', "");
Expect(1, 8202, '\P{Lb= 	ZW}', "");
Expect(0, 8202, '\P{^Lb= 	ZW}', "");
Error('\p{Is_Line_Break=/a/--ZWSpace}');
Error('\P{Is_Line_Break=/a/--ZWSpace}');
Expect(1, 8203, '\p{Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Is_Line_Break=_	zwspace}', "");
Expect(0, 8203, '\p{^Is_Line_Break=_	zwspace}', "");
Expect(0, 8203, '\P{Is_Line_Break=_	zwspace}', "");
Expect(1, 8203, '\P{^Is_Line_Break=_	zwspace}', "");
Expect(0, 8202, '\p{Is_Line_Break=_	zwspace}', "");
Expect(1, 8202, '\p{^Is_Line_Break=_	zwspace}', "");
Expect(1, 8202, '\P{Is_Line_Break=_	zwspace}', "");
Expect(0, 8202, '\P{^Is_Line_Break=_	zwspace}', "");
Error('\p{Is_Lb=	-zw:=}');
Error('\P{Is_Lb=	-zw:=}');
Expect(1, 8203, '\p{Is_Lb=zw}', "");
Expect(0, 8203, '\p{^Is_Lb=zw}', "");
Expect(0, 8203, '\P{Is_Lb=zw}', "");
Expect(1, 8203, '\P{^Is_Lb=zw}', "");
Expect(0, 8202, '\p{Is_Lb=zw}', "");
Expect(1, 8202, '\p{^Is_Lb=zw}', "");
Expect(1, 8202, '\P{Is_Lb=zw}', "");
Expect(0, 8202, '\P{^Is_Lb=zw}', "");
Expect(1, 8203, '\p{Is_Lb= ZW}', "");
Expect(0, 8203, '\p{^Is_Lb= ZW}', "");
Expect(0, 8203, '\P{Is_Lb= ZW}', "");
Expect(1, 8203, '\P{^Is_Lb= ZW}', "");
Expect(0, 8202, '\p{Is_Lb= ZW}', "");
Expect(1, 8202, '\p{^Is_Lb= ZW}', "");
Expect(1, 8202, '\P{Is_Lb= ZW}', "");
Expect(0, 8202, '\P{^Is_Lb= ZW}', "");
Error('\p{Line_Break=:=  JL}');
Error('\P{Line_Break=:=  JL}');
Expect(1, 4447, '\p{Line_Break=jl}', "");
Expect(0, 4447, '\p{^Line_Break=jl}', "");
Expect(0, 4447, '\P{Line_Break=jl}', "");
Expect(1, 4447, '\P{^Line_Break=jl}', "");
Expect(0, 4351, '\p{Line_Break=jl}', "");
Expect(1, 4351, '\p{^Line_Break=jl}', "");
Expect(1, 4351, '\P{Line_Break=jl}', "");
Expect(0, 4351, '\P{^Line_Break=jl}', "");
Expect(1, 4447, '\p{Line_Break=-JL}', "");
Expect(0, 4447, '\p{^Line_Break=-JL}', "");
Expect(0, 4447, '\P{Line_Break=-JL}', "");
Expect(1, 4447, '\P{^Line_Break=-JL}', "");
Expect(0, 4351, '\p{Line_Break=-JL}', "");
Expect(1, 4351, '\p{^Line_Break=-JL}', "");
Expect(1, 4351, '\P{Line_Break=-JL}', "");
Expect(0, 4351, '\P{^Line_Break=-JL}', "");
Error('\p{Lb=/a/  JL}');
Error('\P{Lb=/a/  JL}');
Expect(1, 4447, '\p{Lb=jl}', "");
Expect(0, 4447, '\p{^Lb=jl}', "");
Expect(0, 4447, '\P{Lb=jl}', "");
Expect(1, 4447, '\P{^Lb=jl}', "");
Expect(0, 4351, '\p{Lb=jl}', "");
Expect(1, 4351, '\p{^Lb=jl}', "");
Expect(1, 4351, '\P{Lb=jl}', "");
Expect(0, 4351, '\P{^Lb=jl}', "");
Expect(1, 4447, '\p{Lb=-JL}', "");
Expect(0, 4447, '\p{^Lb=-JL}', "");
Expect(0, 4447, '\P{Lb=-JL}', "");
Expect(1, 4447, '\P{^Lb=-JL}', "");
Expect(0, 4351, '\p{Lb=-JL}', "");
Expect(1, 4351, '\p{^Lb=-JL}', "");
Expect(1, 4351, '\P{Lb=-JL}', "");
Expect(0, 4351, '\P{^Lb=-JL}', "");
Error('\p{Is_Line_Break: 	 JL/a/}');
Error('\P{Is_Line_Break: 	 JL/a/}');
Expect(1, 4447, '\p{Is_Line_Break=jl}', "");
Expect(0, 4447, '\p{^Is_Line_Break=jl}', "");
Expect(0, 4447, '\P{Is_Line_Break=jl}', "");
Expect(1, 4447, '\P{^Is_Line_Break=jl}', "");
Expect(0, 4351, '\p{Is_Line_Break=jl}', "");
Expect(1, 4351, '\p{^Is_Line_Break=jl}', "");
Expect(1, 4351, '\P{Is_Line_Break=jl}', "");
Expect(0, 4351, '\P{^Is_Line_Break=jl}', "");
Expect(1, 4447, '\p{Is_Line_Break= -jl}', "");
Expect(0, 4447, '\p{^Is_Line_Break= -jl}', "");
Expect(0, 4447, '\P{Is_Line_Break= -jl}', "");
Expect(1, 4447, '\P{^Is_Line_Break= -jl}', "");
Expect(0, 4351, '\p{Is_Line_Break= -jl}', "");
Expect(1, 4351, '\p{^Is_Line_Break= -jl}', "");
Expect(1, 4351, '\P{Is_Line_Break= -jl}', "");
Expect(0, 4351, '\P{^Is_Line_Break= -jl}', "");
Error('\p{Is_Lb=	:=JL}');
Error('\P{Is_Lb=	:=JL}');
Expect(1, 4447, '\p{Is_Lb=jl}', "");
Expect(0, 4447, '\p{^Is_Lb=jl}', "");
Expect(0, 4447, '\P{Is_Lb=jl}', "");
Expect(1, 4447, '\P{^Is_Lb=jl}', "");
Expect(0, 4351, '\p{Is_Lb=jl}', "");
Expect(1, 4351, '\p{^Is_Lb=jl}', "");
Expect(1, 4351, '\P{Is_Lb=jl}', "");
Expect(0, 4351, '\P{^Is_Lb=jl}', "");
Expect(1, 4447, '\p{Is_Lb=	_jl}', "");
Expect(0, 4447, '\p{^Is_Lb=	_jl}', "");
Expect(0, 4447, '\P{Is_Lb=	_jl}', "");
Expect(1, 4447, '\P{^Is_Lb=	_jl}', "");
Expect(0, 4351, '\p{Is_Lb=	_jl}', "");
Expect(1, 4351, '\p{^Is_Lb=	_jl}', "");
Expect(1, 4351, '\P{Is_Lb=	_jl}', "");
Expect(0, 4351, '\P{^Is_Lb=	_jl}', "");
Error('\p{Line_Break=-:=Break Symbols}');
Error('\P{Line_Break=-:=Break Symbols}');
Expect(1, 47, '\p{Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Line_Break=-Break_Symbols}', "");
Expect(0, 47, '\p{^Line_Break=-Break_Symbols}', "");
Expect(0, 47, '\P{Line_Break=-Break_Symbols}', "");
Expect(1, 47, '\P{^Line_Break=-Break_Symbols}', "");
Expect(0, 46, '\p{Line_Break=-Break_Symbols}', "");
Expect(1, 46, '\p{^Line_Break=-Break_Symbols}', "");
Expect(1, 46, '\P{Line_Break=-Break_Symbols}', "");
Expect(0, 46, '\P{^Line_Break=-Break_Symbols}', "");
Error('\p{Lb=_ SY/a/}');
Error('\P{Lb=_ SY/a/}');
Expect(1, 47, '\p{Lb=sy}', "");
Expect(0, 47, '\p{^Lb=sy}', "");
Expect(0, 47, '\P{Lb=sy}', "");
Expect(1, 47, '\P{^Lb=sy}', "");
Expect(0, 46, '\p{Lb=sy}', "");
Expect(1, 46, '\p{^Lb=sy}', "");
Expect(1, 46, '\P{Lb=sy}', "");
Expect(0, 46, '\P{^Lb=sy}', "");
Expect(1, 47, '\p{Lb=	 SY}', "");
Expect(0, 47, '\p{^Lb=	 SY}', "");
Expect(0, 47, '\P{Lb=	 SY}', "");
Expect(1, 47, '\P{^Lb=	 SY}', "");
Expect(0, 46, '\p{Lb=	 SY}', "");
Expect(1, 46, '\p{^Lb=	 SY}', "");
Expect(1, 46, '\P{Lb=	 SY}', "");
Expect(0, 46, '\P{^Lb=	 SY}', "");
Error('\p{Is_Line_Break=	_BREAK/a/SYMBOLS}');
Error('\P{Is_Line_Break=	_BREAK/a/SYMBOLS}');
Expect(1, 47, '\p{Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Is_Line_Break=  break_Symbols}', "");
Expect(0, 47, '\p{^Is_Line_Break=  break_Symbols}', "");
Expect(0, 47, '\P{Is_Line_Break=  break_Symbols}', "");
Expect(1, 47, '\P{^Is_Line_Break=  break_Symbols}', "");
Expect(0, 46, '\p{Is_Line_Break=  break_Symbols}', "");
Expect(1, 46, '\p{^Is_Line_Break=  break_Symbols}', "");
Expect(1, 46, '\P{Is_Line_Break=  break_Symbols}', "");
Expect(0, 46, '\P{^Is_Line_Break=  break_Symbols}', "");
Error('\p{Is_Lb= sy/a/}');
Error('\P{Is_Lb= sy/a/}');
Expect(1, 47, '\p{Is_Lb=sy}', "");
Expect(0, 47, '\p{^Is_Lb=sy}', "");
Expect(0, 47, '\P{Is_Lb=sy}', "");
Expect(1, 47, '\P{^Is_Lb=sy}', "");
Expect(0, 46, '\p{Is_Lb=sy}', "");
Expect(1, 46, '\p{^Is_Lb=sy}', "");
Expect(1, 46, '\P{Is_Lb=sy}', "");
Expect(0, 46, '\P{^Is_Lb=sy}', "");
Expect(1, 47, '\p{Is_Lb=_-SY}', "");
Expect(0, 47, '\p{^Is_Lb=_-SY}', "");
Expect(0, 47, '\P{Is_Lb=_-SY}', "");
Expect(1, 47, '\P{^Is_Lb=_-SY}', "");
Expect(0, 46, '\p{Is_Lb=_-SY}', "");
Expect(1, 46, '\p{^Is_Lb=_-SY}', "");
Expect(1, 46, '\P{Is_Lb=_-SY}', "");
Expect(0, 46, '\P{^Is_Lb=_-SY}', "");
Error('\p{Line_Break=-prefix	numeric/a/}');
Error('\P{Line_Break=-prefix	numeric/a/}');
Expect(1, 36, '\p{Line_Break:	prefixnumeric}', "");
Expect(0, 36, '\p{^Line_Break:	prefixnumeric}', "");
Expect(0, 36, '\P{Line_Break:	prefixnumeric}', "");
Expect(1, 36, '\P{^Line_Break:	prefixnumeric}', "");
Expect(0, 35, '\p{Line_Break:	prefixnumeric}', "");
Expect(1, 35, '\p{^Line_Break:	prefixnumeric}', "");
Expect(1, 35, '\P{Line_Break:	prefixnumeric}', "");
Expect(0, 35, '\P{^Line_Break:	prefixnumeric}', "");
Expect(1, 36, '\p{Line_Break=-prefix numeric}', "");
Expect(0, 36, '\p{^Line_Break=-prefix numeric}', "");
Expect(0, 36, '\P{Line_Break=-prefix numeric}', "");
Expect(1, 36, '\P{^Line_Break=-prefix numeric}', "");
Expect(0, 35, '\p{Line_Break=-prefix numeric}', "");
Expect(1, 35, '\p{^Line_Break=-prefix numeric}', "");
Expect(1, 35, '\P{Line_Break=-prefix numeric}', "");
Expect(0, 35, '\P{^Line_Break=-prefix numeric}', "");
Error('\p{Lb=	:=PR}');
Error('\P{Lb=	:=PR}');
Expect(1, 36, '\p{Lb=pr}', "");
Expect(0, 36, '\p{^Lb=pr}', "");
Expect(0, 36, '\P{Lb=pr}', "");
Expect(1, 36, '\P{^Lb=pr}', "");
Expect(0, 35, '\p{Lb=pr}', "");
Expect(1, 35, '\p{^Lb=pr}', "");
Expect(1, 35, '\P{Lb=pr}', "");
Expect(0, 35, '\P{^Lb=pr}', "");
Expect(1, 36, '\p{Lb:	PR}', "");
Expect(0, 36, '\p{^Lb:	PR}', "");
Expect(0, 36, '\P{Lb:	PR}', "");
Expect(1, 36, '\P{^Lb:	PR}', "");
Expect(0, 35, '\p{Lb:	PR}', "");
Expect(1, 35, '\p{^Lb:	PR}', "");
Expect(1, 35, '\P{Lb:	PR}', "");
Expect(0, 35, '\P{^Lb:	PR}', "");
Error('\p{Is_Line_Break=/a/ _Prefix	NUMERIC}');
Error('\P{Is_Line_Break=/a/ _Prefix	NUMERIC}');
Expect(1, 36, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\p{Is_Line_Break=-Prefix_numeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=-Prefix_numeric}', "");
Expect(0, 36, '\P{Is_Line_Break=-Prefix_numeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=-Prefix_numeric}', "");
Expect(0, 35, '\p{Is_Line_Break=-Prefix_numeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=-Prefix_numeric}', "");
Expect(1, 35, '\P{Is_Line_Break=-Prefix_numeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=-Prefix_numeric}', "");
Error('\p{Is_Lb:-/a/pr}');
Error('\P{Is_Lb:-/a/pr}');
Expect(1, 36, '\p{Is_Lb=pr}', "");
Expect(0, 36, '\p{^Is_Lb=pr}', "");
Expect(0, 36, '\P{Is_Lb=pr}', "");
Expect(1, 36, '\P{^Is_Lb=pr}', "");
Expect(0, 35, '\p{Is_Lb=pr}', "");
Expect(1, 35, '\p{^Is_Lb=pr}', "");
Expect(1, 35, '\P{Is_Lb=pr}', "");
Expect(0, 35, '\P{^Is_Lb=pr}', "");
Expect(1, 36, '\p{Is_Lb= 	pr}', "");
Expect(0, 36, '\p{^Is_Lb= 	pr}', "");
Expect(0, 36, '\P{Is_Lb= 	pr}', "");
Expect(1, 36, '\P{^Is_Lb= 	pr}', "");
Expect(0, 35, '\p{Is_Lb= 	pr}', "");
Expect(1, 35, '\p{^Is_Lb= 	pr}', "");
Expect(1, 35, '\P{Is_Lb= 	pr}', "");
Expect(0, 35, '\P{^Is_Lb= 	pr}', "");
Error('\p{Line_Break=/a/  close PARENTHESIS}');
Error('\P{Line_Break=/a/  close PARENTHESIS}');
Expect(1, 41, '\p{Line_Break=closeparenthesis}', "");
Expect(0, 41, '\p{^Line_Break=closeparenthesis}', "");
Expect(0, 41, '\P{Line_Break=closeparenthesis}', "");
Expect(1, 41, '\P{^Line_Break=closeparenthesis}', "");
Expect(0, 40, '\p{Line_Break=closeparenthesis}', "");
Expect(1, 40, '\p{^Line_Break=closeparenthesis}', "");
Expect(1, 40, '\P{Line_Break=closeparenthesis}', "");
Expect(0, 40, '\P{^Line_Break=closeparenthesis}', "");
Expect(1, 41, '\p{Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(0, 41, '\p{^Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(0, 41, '\P{Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(1, 41, '\P{^Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(0, 40, '\p{Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(1, 40, '\p{^Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(1, 40, '\P{Line_Break=-	CLOSE-PARENTHESIS}', "");
Expect(0, 40, '\P{^Line_Break=-	CLOSE-PARENTHESIS}', "");
Error('\p{Lb:/a/  CP}');
Error('\P{Lb:/a/  CP}');
Expect(1, 41, '\p{Lb:   cp}', "");
Expect(0, 41, '\p{^Lb:   cp}', "");
Expect(0, 41, '\P{Lb:   cp}', "");
Expect(1, 41, '\P{^Lb:   cp}', "");
Expect(0, 40, '\p{Lb:   cp}', "");
Expect(1, 40, '\p{^Lb:   cp}', "");
Expect(1, 40, '\P{Lb:   cp}', "");
Expect(0, 40, '\P{^Lb:   cp}', "");
Expect(1, 41, '\p{Lb=-CP}', "");
Expect(0, 41, '\p{^Lb=-CP}', "");
Expect(0, 41, '\P{Lb=-CP}', "");
Expect(1, 41, '\P{^Lb=-CP}', "");
Expect(0, 40, '\p{Lb=-CP}', "");
Expect(1, 40, '\p{^Lb=-CP}', "");
Expect(1, 40, '\P{Lb=-CP}', "");
Expect(0, 40, '\P{^Lb=-CP}', "");
Error('\p{Is_Line_Break=CloseParenthesis/a/}');
Error('\P{Is_Line_Break=CloseParenthesis/a/}');
Expect(1, 41, '\p{Is_Line_Break:	closeparenthesis}', "");
Expect(0, 41, '\p{^Is_Line_Break:	closeparenthesis}', "");
Expect(0, 41, '\P{Is_Line_Break:	closeparenthesis}', "");
Expect(1, 41, '\P{^Is_Line_Break:	closeparenthesis}', "");
Expect(0, 40, '\p{Is_Line_Break:	closeparenthesis}', "");
Expect(1, 40, '\p{^Is_Line_Break:	closeparenthesis}', "");
Expect(1, 40, '\P{Is_Line_Break:	closeparenthesis}', "");
Expect(0, 40, '\P{^Is_Line_Break:	closeparenthesis}', "");
Expect(1, 41, '\p{Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(0, 41, '\p{^Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(0, 41, '\P{Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(1, 41, '\P{^Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(0, 40, '\p{Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(1, 40, '\p{^Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(1, 40, '\P{Is_Line_Break=-Close	PARENTHESIS}', "");
Expect(0, 40, '\P{^Is_Line_Break=-Close	PARENTHESIS}', "");
Error('\p{Is_Lb=	:=CP}');
Error('\P{Is_Lb=	:=CP}');
Expect(1, 41, '\p{Is_Lb:cp}', "");
Expect(0, 41, '\p{^Is_Lb:cp}', "");
Expect(0, 41, '\P{Is_Lb:cp}', "");
Expect(1, 41, '\P{^Is_Lb:cp}', "");
Expect(0, 40, '\p{Is_Lb:cp}', "");
Expect(1, 40, '\p{^Is_Lb:cp}', "");
Expect(1, 40, '\P{Is_Lb:cp}', "");
Expect(0, 40, '\P{^Is_Lb:cp}', "");
Expect(1, 41, '\p{Is_Lb= _CP}', "");
Expect(0, 41, '\p{^Is_Lb= _CP}', "");
Expect(0, 41, '\P{Is_Lb= _CP}', "");
Expect(1, 41, '\P{^Is_Lb= _CP}', "");
Expect(0, 40, '\p{Is_Lb= _CP}', "");
Expect(1, 40, '\p{^Is_Lb= _CP}', "");
Expect(1, 40, '\P{Is_Lb= _CP}', "");
Expect(0, 40, '\P{^Is_Lb= _CP}', "");
Error('\p{Line_Break=-/a/h3}');
Error('\P{Line_Break=-/a/h3}');
Expect(1, 44059, '\p{Line_Break:h3}', "");
Expect(0, 44059, '\p{^Line_Break:h3}', "");
Expect(0, 44059, '\P{Line_Break:h3}', "");
Expect(1, 44059, '\P{^Line_Break:h3}', "");
Expect(0, 44032, '\p{Line_Break:h3}', "");
Expect(1, 44032, '\p{^Line_Break:h3}', "");
Expect(1, 44032, '\P{Line_Break:h3}', "");
Expect(0, 44032, '\P{^Line_Break:h3}', "");
Expect(1, 44059, '\p{Line_Break=	H3}', "");
Expect(0, 44059, '\p{^Line_Break=	H3}', "");
Expect(0, 44059, '\P{Line_Break=	H3}', "");
Expect(1, 44059, '\P{^Line_Break=	H3}', "");
Expect(0, 44032, '\p{Line_Break=	H3}', "");
Expect(1, 44032, '\p{^Line_Break=	H3}', "");
Expect(1, 44032, '\P{Line_Break=	H3}', "");
Expect(0, 44032, '\P{^Line_Break=	H3}', "");
Error('\p{Lb=	:=H3}');
Error('\P{Lb=	:=H3}');
Expect(1, 44059, '\p{Lb=h3}', "");
Expect(0, 44059, '\p{^Lb=h3}', "");
Expect(0, 44059, '\P{Lb=h3}', "");
Expect(1, 44059, '\P{^Lb=h3}', "");
Expect(0, 44032, '\p{Lb=h3}', "");
Expect(1, 44032, '\p{^Lb=h3}', "");
Expect(1, 44032, '\P{Lb=h3}', "");
Expect(0, 44032, '\P{^Lb=h3}', "");
Expect(1, 44059, '\p{Lb=-H3}', "");
Expect(0, 44059, '\p{^Lb=-H3}', "");
Expect(0, 44059, '\P{Lb=-H3}', "");
Expect(1, 44059, '\P{^Lb=-H3}', "");
Expect(0, 44032, '\p{Lb=-H3}', "");
Expect(1, 44032, '\p{^Lb=-H3}', "");
Expect(1, 44032, '\P{Lb=-H3}', "");
Expect(0, 44032, '\P{^Lb=-H3}', "");
Error('\p{Is_Line_Break: -	H3/a/}');
Error('\P{Is_Line_Break: -	H3/a/}');
Expect(1, 44059, '\p{Is_Line_Break=h3}', "");
Expect(0, 44059, '\p{^Is_Line_Break=h3}', "");
Expect(0, 44059, '\P{Is_Line_Break=h3}', "");
Expect(1, 44059, '\P{^Is_Line_Break=h3}', "");
Expect(0, 44032, '\p{Is_Line_Break=h3}', "");
Expect(1, 44032, '\p{^Is_Line_Break=h3}', "");
Expect(1, 44032, '\P{Is_Line_Break=h3}', "");
Expect(0, 44032, '\P{^Is_Line_Break=h3}', "");
Expect(1, 44059, '\p{Is_Line_Break=-H3}', "");
Expect(0, 44059, '\p{^Is_Line_Break=-H3}', "");
Expect(0, 44059, '\P{Is_Line_Break=-H3}', "");
Expect(1, 44059, '\P{^Is_Line_Break=-H3}', "");
Expect(0, 44032, '\p{Is_Line_Break=-H3}', "");
Expect(1, 44032, '\p{^Is_Line_Break=-H3}', "");
Expect(1, 44032, '\P{Is_Line_Break=-H3}', "");
Expect(0, 44032, '\P{^Is_Line_Break=-H3}', "");
Error('\p{Is_Lb=/a/H3}');
Error('\P{Is_Lb=/a/H3}');
Expect(1, 44059, '\p{Is_Lb=h3}', "");
Expect(0, 44059, '\p{^Is_Lb=h3}', "");
Expect(0, 44059, '\P{Is_Lb=h3}', "");
Expect(1, 44059, '\P{^Is_Lb=h3}', "");
Expect(0, 44032, '\p{Is_Lb=h3}', "");
Expect(1, 44032, '\p{^Is_Lb=h3}', "");
Expect(1, 44032, '\P{Is_Lb=h3}', "");
Expect(0, 44032, '\P{^Is_Lb=h3}', "");
Expect(1, 44059, '\p{Is_Lb:	_ h3}', "");
Expect(0, 44059, '\p{^Is_Lb:	_ h3}', "");
Expect(0, 44059, '\P{Is_Lb:	_ h3}', "");
Expect(1, 44059, '\P{^Is_Lb:	_ h3}', "");
Expect(0, 44032, '\p{Is_Lb:	_ h3}', "");
Expect(1, 44032, '\p{^Is_Lb:	_ h3}', "");
Expect(1, 44032, '\P{Is_Lb:	_ h3}', "");
Expect(0, 44032, '\P{^Is_Lb:	_ h3}', "");
Error('\p{Line_Break=- carriage-Return/a/}');
Error('\P{Line_Break=- carriage-Return/a/}');
Expect(1, 13, '\p{Line_Break:   carriagereturn}', "");
Expect(0, 13, '\p{^Line_Break:   carriagereturn}', "");
Expect(0, 13, '\P{Line_Break:   carriagereturn}', "");
Expect(1, 13, '\P{^Line_Break:   carriagereturn}', "");
Expect(0, 12, '\p{Line_Break:   carriagereturn}', "");
Expect(1, 12, '\p{^Line_Break:   carriagereturn}', "");
Expect(1, 12, '\P{Line_Break:   carriagereturn}', "");
Expect(0, 12, '\P{^Line_Break:   carriagereturn}', "");
Expect(1, 13, '\p{Line_Break=-Carriage	return}', "");
Expect(0, 13, '\p{^Line_Break=-Carriage	return}', "");
Expect(0, 13, '\P{Line_Break=-Carriage	return}', "");
Expect(1, 13, '\P{^Line_Break=-Carriage	return}', "");
Expect(0, 12, '\p{Line_Break=-Carriage	return}', "");
Expect(1, 12, '\p{^Line_Break=-Carriage	return}', "");
Expect(1, 12, '\P{Line_Break=-Carriage	return}', "");
Expect(0, 12, '\P{^Line_Break=-Carriage	return}', "");
Error('\p{Lb=	/a/CR}');
Error('\P{Lb=	/a/CR}');
Expect(1, 13, '\p{Lb=cr}', "");
Expect(0, 13, '\p{^Lb=cr}', "");
Expect(0, 13, '\P{Lb=cr}', "");
Expect(1, 13, '\P{^Lb=cr}', "");
Expect(0, 12, '\p{Lb=cr}', "");
Expect(1, 12, '\p{^Lb=cr}', "");
Expect(1, 12, '\P{Lb=cr}', "");
Expect(0, 12, '\P{^Lb=cr}', "");
Expect(1, 13, '\p{Lb=_-CR}', "");
Expect(0, 13, '\p{^Lb=_-CR}', "");
Expect(0, 13, '\P{Lb=_-CR}', "");
Expect(1, 13, '\P{^Lb=_-CR}', "");
Expect(0, 12, '\p{Lb=_-CR}', "");
Expect(1, 12, '\p{^Lb=_-CR}', "");
Expect(1, 12, '\P{Lb=_-CR}', "");
Expect(0, 12, '\P{^Lb=_-CR}', "");
Error('\p{Is_Line_Break= :=carriage Return}');
Error('\P{Is_Line_Break= :=carriage Return}');
Expect(1, 13, '\p{Is_Line_Break=carriagereturn}', "");
Expect(0, 13, '\p{^Is_Line_Break=carriagereturn}', "");
Expect(0, 13, '\P{Is_Line_Break=carriagereturn}', "");
Expect(1, 13, '\P{^Is_Line_Break=carriagereturn}', "");
Expect(0, 12, '\p{Is_Line_Break=carriagereturn}', "");
Expect(1, 12, '\p{^Is_Line_Break=carriagereturn}', "");
Expect(1, 12, '\P{Is_Line_Break=carriagereturn}', "");
Expect(0, 12, '\P{^Is_Line_Break=carriagereturn}', "");
Expect(1, 13, '\p{Is_Line_Break=-_Carriage RETURN}', "");
Expect(0, 13, '\p{^Is_Line_Break=-_Carriage RETURN}', "");
Expect(0, 13, '\P{Is_Line_Break=-_Carriage RETURN}', "");
Expect(1, 13, '\P{^Is_Line_Break=-_Carriage RETURN}', "");
Expect(0, 12, '\p{Is_Line_Break=-_Carriage RETURN}', "");
Expect(1, 12, '\p{^Is_Line_Break=-_Carriage RETURN}', "");
Expect(1, 12, '\P{Is_Line_Break=-_Carriage RETURN}', "");
Expect(0, 12, '\P{^Is_Line_Break=-_Carriage RETURN}', "");
Error('\p{Is_Lb=  CR:=}');
Error('\P{Is_Lb=  CR:=}');
Expect(1, 13, '\p{Is_Lb=cr}', "");
Expect(0, 13, '\p{^Is_Lb=cr}', "");
Expect(0, 13, '\P{Is_Lb=cr}', "");
Expect(1, 13, '\P{^Is_Lb=cr}', "");
Expect(0, 12, '\p{Is_Lb=cr}', "");
Expect(1, 12, '\p{^Is_Lb=cr}', "");
Expect(1, 12, '\P{Is_Lb=cr}', "");
Expect(0, 12, '\P{^Is_Lb=cr}', "");
Expect(1, 13, '\p{Is_Lb:   -	CR}', "");
Expect(0, 13, '\p{^Is_Lb:   -	CR}', "");
Expect(0, 13, '\P{Is_Lb:   -	CR}', "");
Expect(1, 13, '\P{^Is_Lb:   -	CR}', "");
Expect(0, 12, '\p{Is_Lb:   -	CR}', "");
Expect(1, 12, '\p{^Is_Lb:   -	CR}', "");
Expect(1, 12, '\P{Is_Lb:   -	CR}', "");
Expect(0, 12, '\P{^Is_Lb:   -	CR}', "");
Error('\p{Line_Break=:=  Closepunctuation}');
Error('\P{Line_Break=:=  Closepunctuation}');
Expect(1, 125, '\p{Line_Break=closepunctuation}', "");
Expect(0, 125, '\p{^Line_Break=closepunctuation}', "");
Expect(0, 125, '\P{Line_Break=closepunctuation}', "");
Expect(1, 125, '\P{^Line_Break=closepunctuation}', "");
Expect(0, 124, '\p{Line_Break=closepunctuation}', "");
Expect(1, 124, '\p{^Line_Break=closepunctuation}', "");
Expect(1, 124, '\P{Line_Break=closepunctuation}', "");
Expect(0, 124, '\P{^Line_Break=closepunctuation}', "");
Expect(1, 125, '\p{Line_Break:   _-CLOSE punctuation}', "");
Expect(0, 125, '\p{^Line_Break:   _-CLOSE punctuation}', "");
Expect(0, 125, '\P{Line_Break:   _-CLOSE punctuation}', "");
Expect(1, 125, '\P{^Line_Break:   _-CLOSE punctuation}', "");
Expect(0, 124, '\p{Line_Break:   _-CLOSE punctuation}', "");
Expect(1, 124, '\p{^Line_Break:   _-CLOSE punctuation}', "");
Expect(1, 124, '\P{Line_Break:   _-CLOSE punctuation}', "");
Expect(0, 124, '\P{^Line_Break:   _-CLOSE punctuation}', "");
Error('\p{Lb=:=-_CL}');
Error('\P{Lb=:=-_CL}');
Expect(1, 125, '\p{Lb: cl}', "");
Expect(0, 125, '\p{^Lb: cl}', "");
Expect(0, 125, '\P{Lb: cl}', "");
Expect(1, 125, '\P{^Lb: cl}', "");
Expect(0, 124, '\p{Lb: cl}', "");
Expect(1, 124, '\p{^Lb: cl}', "");
Expect(1, 124, '\P{Lb: cl}', "");
Expect(0, 124, '\P{^Lb: cl}', "");
Expect(1, 125, '\p{Lb=--CL}', "");
Expect(0, 125, '\p{^Lb=--CL}', "");
Expect(0, 125, '\P{Lb=--CL}', "");
Expect(1, 125, '\P{^Lb=--CL}', "");
Expect(0, 124, '\p{Lb=--CL}', "");
Expect(1, 124, '\p{^Lb=--CL}', "");
Expect(1, 124, '\P{Lb=--CL}', "");
Expect(0, 124, '\P{^Lb=--CL}', "");
Error('\p{Is_Line_Break=:=__Close-PUNCTUATION}');
Error('\P{Is_Line_Break=:=__Close-PUNCTUATION}');
Expect(1, 125, '\p{Is_Line_Break=closepunctuation}', "");
Expect(0, 125, '\p{^Is_Line_Break=closepunctuation}', "");
Expect(0, 125, '\P{Is_Line_Break=closepunctuation}', "");
Expect(1, 125, '\P{^Is_Line_Break=closepunctuation}', "");
Expect(0, 124, '\p{Is_Line_Break=closepunctuation}', "");
Expect(1, 124, '\p{^Is_Line_Break=closepunctuation}', "");
Expect(1, 124, '\P{Is_Line_Break=closepunctuation}', "");
Expect(0, 124, '\P{^Is_Line_Break=closepunctuation}', "");
Expect(1, 125, '\p{Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(0, 125, '\p{^Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(0, 125, '\P{Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(1, 125, '\P{^Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(0, 124, '\p{Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(1, 124, '\p{^Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(1, 124, '\P{Is_Line_Break=_Close-PUNCTUATION}', "");
Expect(0, 124, '\P{^Is_Line_Break=_Close-PUNCTUATION}', "");
Error('\p{Is_Lb=	:=cl}');
Error('\P{Is_Lb=	:=cl}');
Expect(1, 125, '\p{Is_Lb=cl}', "");
Expect(0, 125, '\p{^Is_Lb=cl}', "");
Expect(0, 125, '\P{Is_Lb=cl}', "");
Expect(1, 125, '\P{^Is_Lb=cl}', "");
Expect(0, 124, '\p{Is_Lb=cl}', "");
Expect(1, 124, '\p{^Is_Lb=cl}', "");
Expect(1, 124, '\P{Is_Lb=cl}', "");
Expect(0, 124, '\P{^Is_Lb=cl}', "");
Expect(1, 125, '\p{Is_Lb=_CL}', "");
Expect(0, 125, '\p{^Is_Lb=_CL}', "");
Expect(0, 125, '\P{Is_Lb=_CL}', "");
Expect(1, 125, '\P{^Is_Lb=_CL}', "");
Expect(0, 124, '\p{Is_Lb=_CL}', "");
Expect(1, 124, '\p{^Is_Lb=_CL}', "");
Expect(1, 124, '\P{Is_Lb=_CL}', "");
Expect(0, 124, '\P{^Is_Lb=_CL}', "");
Error('\p{Line_Break=:= -Combining	Mark}');
Error('\P{Line_Break=:= -Combining	Mark}');
Expect(1, 8, '\p{Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Line_Break=-combiningMark}', "");
Expect(0, 8, '\p{^Line_Break=-combiningMark}', "");
Expect(0, 8, '\P{Line_Break=-combiningMark}', "");
Expect(1, 8, '\P{^Line_Break=-combiningMark}', "");
Expect(0, 13, '\p{Line_Break=-combiningMark}', "");
Expect(1, 13, '\p{^Line_Break=-combiningMark}', "");
Expect(1, 13, '\P{Line_Break=-combiningMark}', "");
Expect(0, 13, '\P{^Line_Break=-combiningMark}', "");
Error('\p{Lb=:=cm}');
Error('\P{Lb=:=cm}');
Expect(1, 8, '\p{Lb=cm}', "");
Expect(0, 8, '\p{^Lb=cm}', "");
Expect(0, 8, '\P{Lb=cm}', "");
Expect(1, 8, '\P{^Lb=cm}', "");
Expect(0, 13, '\p{Lb=cm}', "");
Expect(1, 13, '\p{^Lb=cm}', "");
Expect(1, 13, '\P{Lb=cm}', "");
Expect(0, 13, '\P{^Lb=cm}', "");
Expect(1, 8, '\p{Lb=	cm}', "");
Expect(0, 8, '\p{^Lb=	cm}', "");
Expect(0, 8, '\P{Lb=	cm}', "");
Expect(1, 8, '\P{^Lb=	cm}', "");
Expect(0, 13, '\p{Lb=	cm}', "");
Expect(1, 13, '\p{^Lb=	cm}', "");
Expect(1, 13, '\P{Lb=	cm}', "");
Expect(0, 13, '\P{^Lb=	cm}', "");
Error('\p{Is_Line_Break= _Combining-MARK:=}');
Error('\P{Is_Line_Break= _Combining-MARK:=}');
Expect(1, 8, '\p{Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Is_Line_Break=_	Combiningmark}', "");
Expect(0, 8, '\p{^Is_Line_Break=_	Combiningmark}', "");
Expect(0, 8, '\P{Is_Line_Break=_	Combiningmark}', "");
Expect(1, 8, '\P{^Is_Line_Break=_	Combiningmark}', "");
Expect(0, 13, '\p{Is_Line_Break=_	Combiningmark}', "");
Expect(1, 13, '\p{^Is_Line_Break=_	Combiningmark}', "");
Expect(1, 13, '\P{Is_Line_Break=_	Combiningmark}', "");
Expect(0, 13, '\P{^Is_Line_Break=_	Combiningmark}', "");
Error('\p{Is_Lb=-/a/CM}');
Error('\P{Is_Lb=-/a/CM}');
Expect(1, 8, '\p{Is_Lb=cm}', "");
Expect(0, 8, '\p{^Is_Lb=cm}', "");
Expect(0, 8, '\P{Is_Lb=cm}', "");
Expect(1, 8, '\P{^Is_Lb=cm}', "");
Expect(0, 13, '\p{Is_Lb=cm}', "");
Expect(1, 13, '\p{^Is_Lb=cm}', "");
Expect(1, 13, '\P{Is_Lb=cm}', "");
Expect(0, 13, '\P{^Is_Lb=cm}', "");
Expect(1, 8, '\p{Is_Lb:_CM}', "");
Expect(0, 8, '\p{^Is_Lb:_CM}', "");
Expect(0, 8, '\P{Is_Lb:_CM}', "");
Expect(1, 8, '\P{^Is_Lb:_CM}', "");
Expect(0, 13, '\p{Is_Lb:_CM}', "");
Expect(1, 13, '\p{^Is_Lb:_CM}', "");
Expect(1, 13, '\P{Is_Lb:_CM}', "");
Expect(0, 13, '\P{^Is_Lb:_CM}', "");
Error('\p{Line_Break=:=-MANDATORY	Break}');
Error('\P{Line_Break=:=-MANDATORY	Break}');
Expect(1, 12, '\p{Line_Break:	mandatorybreak}', "");
Expect(0, 12, '\p{^Line_Break:	mandatorybreak}', "");
Expect(0, 12, '\P{Line_Break:	mandatorybreak}', "");
Expect(1, 12, '\P{^Line_Break:	mandatorybreak}', "");
Expect(0, 10, '\p{Line_Break:	mandatorybreak}', "");
Expect(1, 10, '\p{^Line_Break:	mandatorybreak}', "");
Expect(1, 10, '\P{Line_Break:	mandatorybreak}', "");
Expect(0, 10, '\P{^Line_Break:	mandatorybreak}', "");
Expect(1, 12, '\p{Line_Break=-MandatoryBreak}', "");
Expect(0, 12, '\p{^Line_Break=-MandatoryBreak}', "");
Expect(0, 12, '\P{Line_Break=-MandatoryBreak}', "");
Expect(1, 12, '\P{^Line_Break=-MandatoryBreak}', "");
Expect(0, 10, '\p{Line_Break=-MandatoryBreak}', "");
Expect(1, 10, '\p{^Line_Break=-MandatoryBreak}', "");
Expect(1, 10, '\P{Line_Break=-MandatoryBreak}', "");
Expect(0, 10, '\P{^Line_Break=-MandatoryBreak}', "");
Error('\p{Lb=	:=BK}');
Error('\P{Lb=	:=BK}');
Expect(1, 12, '\p{Lb=bk}', "");
Expect(0, 12, '\p{^Lb=bk}', "");
Expect(0, 12, '\P{Lb=bk}', "");
Expect(1, 12, '\P{^Lb=bk}', "");
Expect(0, 10, '\p{Lb=bk}', "");
Expect(1, 10, '\p{^Lb=bk}', "");
Expect(1, 10, '\P{Lb=bk}', "");
Expect(0, 10, '\P{^Lb=bk}', "");
Expect(1, 12, '\p{Lb: - BK}', "");
Expect(0, 12, '\p{^Lb: - BK}', "");
Expect(0, 12, '\P{Lb: - BK}', "");
Expect(1, 12, '\P{^Lb: - BK}', "");
Expect(0, 10, '\p{Lb: - BK}', "");
Expect(1, 10, '\p{^Lb: - BK}', "");
Expect(1, 10, '\P{Lb: - BK}', "");
Expect(0, 10, '\P{^Lb: - BK}', "");
Error('\p{Is_Line_Break=_Mandatory-break/a/}');
Error('\P{Is_Line_Break=_Mandatory-break/a/}');
Expect(1, 12, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\p{Is_Line_Break= -Mandatory_Break}', "");
Expect(0, 12, '\p{^Is_Line_Break= -Mandatory_Break}', "");
Expect(0, 12, '\P{Is_Line_Break= -Mandatory_Break}', "");
Expect(1, 12, '\P{^Is_Line_Break= -Mandatory_Break}', "");
Expect(0, 10, '\p{Is_Line_Break= -Mandatory_Break}', "");
Expect(1, 10, '\p{^Is_Line_Break= -Mandatory_Break}', "");
Expect(1, 10, '\P{Is_Line_Break= -Mandatory_Break}', "");
Expect(0, 10, '\P{^Is_Line_Break= -Mandatory_Break}', "");
Error('\p{Is_Lb=- bk:=}');
Error('\P{Is_Lb=- bk:=}');
Expect(1, 12, '\p{Is_Lb=bk}', "");
Expect(0, 12, '\p{^Is_Lb=bk}', "");
Expect(0, 12, '\P{Is_Lb=bk}', "");
Expect(1, 12, '\P{^Is_Lb=bk}', "");
Expect(0, 10, '\p{Is_Lb=bk}', "");
Expect(1, 10, '\p{^Is_Lb=bk}', "");
Expect(1, 10, '\P{Is_Lb=bk}', "");
Expect(0, 10, '\P{^Is_Lb=bk}', "");
Expect(1, 12, '\p{Is_Lb=-_bk}', "");
Expect(0, 12, '\p{^Is_Lb=-_bk}', "");
Expect(0, 12, '\P{Is_Lb=-_bk}', "");
Expect(1, 12, '\P{^Is_Lb=-_bk}', "");
Expect(0, 10, '\p{Is_Lb=-_bk}', "");
Expect(1, 10, '\p{^Is_Lb=-_bk}', "");
Expect(1, 10, '\P{Is_Lb=-_bk}', "");
Expect(0, 10, '\P{^Is_Lb=-_bk}', "");
Error('\p{Line_Break=__Nonstarter/a/}');
Error('\P{Line_Break=__Nonstarter/a/}');
Expect(1, 6102, '\p{Line_Break=nonstarter}', "");
Expect(0, 6102, '\p{^Line_Break=nonstarter}', "");
Expect(0, 6102, '\P{Line_Break=nonstarter}', "");
Expect(1, 6102, '\P{^Line_Break=nonstarter}', "");
Expect(0, 6101, '\p{Line_Break=nonstarter}', "");
Expect(1, 6101, '\p{^Line_Break=nonstarter}', "");
Expect(1, 6101, '\P{Line_Break=nonstarter}', "");
Expect(0, 6101, '\P{^Line_Break=nonstarter}', "");
Expect(1, 6102, '\p{Line_Break=-NONSTARTER}', "");
Expect(0, 6102, '\p{^Line_Break=-NONSTARTER}', "");
Expect(0, 6102, '\P{Line_Break=-NONSTARTER}', "");
Expect(1, 6102, '\P{^Line_Break=-NONSTARTER}', "");
Expect(0, 6101, '\p{Line_Break=-NONSTARTER}', "");
Expect(1, 6101, '\p{^Line_Break=-NONSTARTER}', "");
Expect(1, 6101, '\P{Line_Break=-NONSTARTER}', "");
Expect(0, 6101, '\P{^Line_Break=-NONSTARTER}', "");
Error('\p{Lb=:=	 NS}');
Error('\P{Lb=:=	 NS}');
Expect(1, 6102, '\p{Lb=ns}', "");
Expect(0, 6102, '\p{^Lb=ns}', "");
Expect(0, 6102, '\P{Lb=ns}', "");
Expect(1, 6102, '\P{^Lb=ns}', "");
Expect(0, 6101, '\p{Lb=ns}', "");
Expect(1, 6101, '\p{^Lb=ns}', "");
Expect(1, 6101, '\P{Lb=ns}', "");
Expect(0, 6101, '\P{^Lb=ns}', "");
Expect(1, 6102, '\p{Lb= _NS}', "");
Expect(0, 6102, '\p{^Lb= _NS}', "");
Expect(0, 6102, '\P{Lb= _NS}', "");
Expect(1, 6102, '\P{^Lb= _NS}', "");
Expect(0, 6101, '\p{Lb= _NS}', "");
Expect(1, 6101, '\p{^Lb= _NS}', "");
Expect(1, 6101, '\P{Lb= _NS}', "");
Expect(0, 6101, '\P{^Lb= _NS}', "");
Error('\p{Is_Line_Break=	:=NONSTARTER}');
Error('\P{Is_Line_Break=	:=NONSTARTER}');
Expect(1, 6102, '\p{Is_Line_Break:nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break:nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break:nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break:nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break:nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break:nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break:nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break:nonstarter}', "");
Expect(1, 6102, '\p{Is_Line_Break=_nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break=_nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break=_nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break=_nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break=_nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break=_nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break=_nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break=_nonstarter}', "");
Error('\p{Is_Lb=:=__NS}');
Error('\P{Is_Lb=:=__NS}');
Expect(1, 6102, '\p{Is_Lb=ns}', "");
Expect(0, 6102, '\p{^Is_Lb=ns}', "");
Expect(0, 6102, '\P{Is_Lb=ns}', "");
Expect(1, 6102, '\P{^Is_Lb=ns}', "");
Expect(0, 6101, '\p{Is_Lb=ns}', "");
Expect(1, 6101, '\p{^Is_Lb=ns}', "");
Expect(1, 6101, '\P{Is_Lb=ns}', "");
Expect(0, 6101, '\P{^Is_Lb=ns}', "");
Expect(1, 6102, '\p{Is_Lb=_-NS}', "");
Expect(0, 6102, '\p{^Is_Lb=_-NS}', "");
Expect(0, 6102, '\P{Is_Lb=_-NS}', "");
Expect(1, 6102, '\P{^Is_Lb=_-NS}', "");
Expect(0, 6101, '\p{Is_Lb=_-NS}', "");
Expect(1, 6101, '\p{^Is_Lb=_-NS}', "");
Expect(1, 6101, '\P{Is_Lb=_-NS}', "");
Expect(0, 6101, '\P{^Is_Lb=_-NS}', "");
Error('\p{Line_Break=/a/JV}');
Error('\P{Line_Break=/a/JV}');
Expect(1, 4519, '\p{Line_Break=jv}', "");
Expect(0, 4519, '\p{^Line_Break=jv}', "");
Expect(0, 4519, '\P{Line_Break=jv}', "");
Expect(1, 4519, '\P{^Line_Break=jv}', "");
Expect(0, 4447, '\p{Line_Break=jv}', "");
Expect(1, 4447, '\p{^Line_Break=jv}', "");
Expect(1, 4447, '\P{Line_Break=jv}', "");
Expect(0, 4447, '\P{^Line_Break=jv}', "");
Expect(1, 4519, '\p{Line_Break=	JV}', "");
Expect(0, 4519, '\p{^Line_Break=	JV}', "");
Expect(0, 4519, '\P{Line_Break=	JV}', "");
Expect(1, 4519, '\P{^Line_Break=	JV}', "");
Expect(0, 4447, '\p{Line_Break=	JV}', "");
Expect(1, 4447, '\p{^Line_Break=	JV}', "");
Expect(1, 4447, '\P{Line_Break=	JV}', "");
Expect(0, 4447, '\P{^Line_Break=	JV}', "");
Error('\p{Lb= jv/a/}');
Error('\P{Lb= jv/a/}');
Expect(1, 4519, '\p{Lb=jv}', "");
Expect(0, 4519, '\p{^Lb=jv}', "");
Expect(0, 4519, '\P{Lb=jv}', "");
Expect(1, 4519, '\P{^Lb=jv}', "");
Expect(0, 4447, '\p{Lb=jv}', "");
Expect(1, 4447, '\p{^Lb=jv}', "");
Expect(1, 4447, '\P{Lb=jv}', "");
Expect(0, 4447, '\P{^Lb=jv}', "");
Expect(1, 4519, '\p{Lb=-JV}', "");
Expect(0, 4519, '\p{^Lb=-JV}', "");
Expect(0, 4519, '\P{Lb=-JV}', "");
Expect(1, 4519, '\P{^Lb=-JV}', "");
Expect(0, 4447, '\p{Lb=-JV}', "");
Expect(1, 4447, '\p{^Lb=-JV}', "");
Expect(1, 4447, '\P{Lb=-JV}', "");
Expect(0, 4447, '\P{^Lb=-JV}', "");
Error('\p{Is_Line_Break=/a/	JV}');
Error('\P{Is_Line_Break=/a/	JV}');
Expect(1, 4519, '\p{Is_Line_Break:jv}', "");
Expect(0, 4519, '\p{^Is_Line_Break:jv}', "");
Expect(0, 4519, '\P{Is_Line_Break:jv}', "");
Expect(1, 4519, '\P{^Is_Line_Break:jv}', "");
Expect(0, 4447, '\p{Is_Line_Break:jv}', "");
Expect(1, 4447, '\p{^Is_Line_Break:jv}', "");
Expect(1, 4447, '\P{Is_Line_Break:jv}', "");
Expect(0, 4447, '\P{^Is_Line_Break:jv}', "");
Expect(1, 4519, '\p{Is_Line_Break=- JV}', "");
Expect(0, 4519, '\p{^Is_Line_Break=- JV}', "");
Expect(0, 4519, '\P{Is_Line_Break=- JV}', "");
Expect(1, 4519, '\P{^Is_Line_Break=- JV}', "");
Expect(0, 4447, '\p{Is_Line_Break=- JV}', "");
Expect(1, 4447, '\p{^Is_Line_Break=- JV}', "");
Expect(1, 4447, '\P{Is_Line_Break=- JV}', "");
Expect(0, 4447, '\P{^Is_Line_Break=- JV}', "");
Error('\p{Is_Lb=:=JV}');
Error('\P{Is_Lb=:=JV}');
Expect(1, 4519, '\p{Is_Lb=jv}', "");
Expect(0, 4519, '\p{^Is_Lb=jv}', "");
Expect(0, 4519, '\P{Is_Lb=jv}', "");
Expect(1, 4519, '\P{^Is_Lb=jv}', "");
Expect(0, 4447, '\p{Is_Lb=jv}', "");
Expect(1, 4447, '\p{^Is_Lb=jv}', "");
Expect(1, 4447, '\P{Is_Lb=jv}', "");
Expect(0, 4447, '\P{^Is_Lb=jv}', "");
Expect(1, 4519, '\p{Is_Lb=JV}', "");
Expect(0, 4519, '\p{^Is_Lb=JV}', "");
Expect(0, 4519, '\P{Is_Lb=JV}', "");
Expect(1, 4519, '\P{^Is_Lb=JV}', "");
Expect(0, 4447, '\p{Is_Lb=JV}', "");
Expect(1, 4447, '\p{^Is_Lb=JV}', "");
Expect(1, 4447, '\P{Is_Lb=JV}', "");
Expect(0, 4447, '\P{^Is_Lb=JV}', "");
Error('\p{Line_Break:	:=_-Quotation}');
Error('\P{Line_Break:	:=_-Quotation}');
Expect(1, 34, '\p{Line_Break=quotation}', "");
Expect(0, 34, '\p{^Line_Break=quotation}', "");
Expect(0, 34, '\P{Line_Break=quotation}', "");
Expect(1, 34, '\P{^Line_Break=quotation}', "");
Expect(0, 33, '\p{Line_Break=quotation}', "");
Expect(1, 33, '\p{^Line_Break=quotation}', "");
Expect(1, 33, '\P{Line_Break=quotation}', "");
Expect(0, 33, '\P{^Line_Break=quotation}', "");
Expect(1, 34, '\p{Line_Break= 	Quotation}', "");
Expect(0, 34, '\p{^Line_Break= 	Quotation}', "");
Expect(0, 34, '\P{Line_Break= 	Quotation}', "");
Expect(1, 34, '\P{^Line_Break= 	Quotation}', "");
Expect(0, 33, '\p{Line_Break= 	Quotation}', "");
Expect(1, 33, '\p{^Line_Break= 	Quotation}', "");
Expect(1, 33, '\P{Line_Break= 	Quotation}', "");
Expect(0, 33, '\P{^Line_Break= 	Quotation}', "");
Error('\p{Lb=_	QU:=}');
Error('\P{Lb=_	QU:=}');
Expect(1, 34, '\p{Lb=qu}', "");
Expect(0, 34, '\p{^Lb=qu}', "");
Expect(0, 34, '\P{Lb=qu}', "");
Expect(1, 34, '\P{^Lb=qu}', "");
Expect(0, 33, '\p{Lb=qu}', "");
Expect(1, 33, '\p{^Lb=qu}', "");
Expect(1, 33, '\P{Lb=qu}', "");
Expect(0, 33, '\P{^Lb=qu}', "");
Expect(1, 34, '\p{Lb:    -qu}', "");
Expect(0, 34, '\p{^Lb:    -qu}', "");
Expect(0, 34, '\P{Lb:    -qu}', "");
Expect(1, 34, '\P{^Lb:    -qu}', "");
Expect(0, 33, '\p{Lb:    -qu}', "");
Expect(1, 33, '\p{^Lb:    -qu}', "");
Expect(1, 33, '\P{Lb:    -qu}', "");
Expect(0, 33, '\P{^Lb:    -qu}', "");
Error('\p{Is_Line_Break=-/a/Quotation}');
Error('\P{Is_Line_Break=-/a/Quotation}');
Expect(1, 34, '\p{Is_Line_Break=quotation}', "");
Expect(0, 34, '\p{^Is_Line_Break=quotation}', "");
Expect(0, 34, '\P{Is_Line_Break=quotation}', "");
Expect(1, 34, '\P{^Is_Line_Break=quotation}', "");
Expect(0, 33, '\p{Is_Line_Break=quotation}', "");
Expect(1, 33, '\p{^Is_Line_Break=quotation}', "");
Expect(1, 33, '\P{Is_Line_Break=quotation}', "");
Expect(0, 33, '\P{^Is_Line_Break=quotation}', "");
Expect(1, 34, '\p{Is_Line_Break=-	quotation}', "");
Expect(0, 34, '\p{^Is_Line_Break=-	quotation}', "");
Expect(0, 34, '\P{Is_Line_Break=-	quotation}', "");
Expect(1, 34, '\P{^Is_Line_Break=-	quotation}', "");
Expect(0, 33, '\p{Is_Line_Break=-	quotation}', "");
Expect(1, 33, '\p{^Is_Line_Break=-	quotation}', "");
Expect(1, 33, '\P{Is_Line_Break=-	quotation}', "");
Expect(0, 33, '\P{^Is_Line_Break=-	quotation}', "");
Error('\p{Is_Lb=:=_	QU}');
Error('\P{Is_Lb=:=_	QU}');
Expect(1, 34, '\p{Is_Lb=qu}', "");
Expect(0, 34, '\p{^Is_Lb=qu}', "");
Expect(0, 34, '\P{Is_Lb=qu}', "");
Expect(1, 34, '\P{^Is_Lb=qu}', "");
Expect(0, 33, '\p{Is_Lb=qu}', "");
Expect(1, 33, '\p{^Is_Lb=qu}', "");
Expect(1, 33, '\P{Is_Lb=qu}', "");
Expect(0, 33, '\P{^Is_Lb=qu}', "");
Expect(1, 34, '\p{Is_Lb=	qu}', "");
Expect(0, 34, '\p{^Is_Lb=	qu}', "");
Expect(0, 34, '\P{Is_Lb=	qu}', "");
Expect(1, 34, '\P{^Is_Lb=	qu}', "");
Expect(0, 33, '\p{Is_Lb=	qu}', "");
Expect(1, 33, '\p{^Is_Lb=	qu}', "");
Expect(1, 33, '\P{Is_Lb=	qu}', "");
Expect(0, 33, '\P{^Is_Lb=	qu}', "");
Error('\p{Line_Break= :=Infix_Numeric}');
Error('\P{Line_Break= :=Infix_Numeric}');
Expect(1, 44, '\p{Line_Break=infixnumeric}', "");
Expect(0, 44, '\p{^Line_Break=infixnumeric}', "");
Expect(0, 44, '\P{Line_Break=infixnumeric}', "");
Expect(1, 44, '\P{^Line_Break=infixnumeric}', "");
Expect(0, 43, '\p{Line_Break=infixnumeric}', "");
Expect(1, 43, '\p{^Line_Break=infixnumeric}', "");
Expect(1, 43, '\P{Line_Break=infixnumeric}', "");
Expect(0, 43, '\P{^Line_Break=infixnumeric}', "");
Expect(1, 44, '\p{Line_Break= INFIXNumeric}', "");
Expect(0, 44, '\p{^Line_Break= INFIXNumeric}', "");
Expect(0, 44, '\P{Line_Break= INFIXNumeric}', "");
Expect(1, 44, '\P{^Line_Break= INFIXNumeric}', "");
Expect(0, 43, '\p{Line_Break= INFIXNumeric}', "");
Expect(1, 43, '\p{^Line_Break= INFIXNumeric}', "");
Expect(1, 43, '\P{Line_Break= INFIXNumeric}', "");
Expect(0, 43, '\P{^Line_Break= INFIXNumeric}', "");
Error('\p{Lb=_-IS:=}');
Error('\P{Lb=_-IS:=}');
Expect(1, 44, '\p{Lb=is}', "");
Expect(0, 44, '\p{^Lb=is}', "");
Expect(0, 44, '\P{Lb=is}', "");
Expect(1, 44, '\P{^Lb=is}', "");
Expect(0, 43, '\p{Lb=is}', "");
Expect(1, 43, '\p{^Lb=is}', "");
Expect(1, 43, '\P{Lb=is}', "");
Expect(0, 43, '\P{^Lb=is}', "");
Expect(1, 44, '\p{Lb:	 is}', "");
Expect(0, 44, '\p{^Lb:	 is}', "");
Expect(0, 44, '\P{Lb:	 is}', "");
Expect(1, 44, '\P{^Lb:	 is}', "");
Expect(0, 43, '\p{Lb:	 is}', "");
Expect(1, 43, '\p{^Lb:	 is}', "");
Expect(1, 43, '\P{Lb:	 is}', "");
Expect(0, 43, '\P{^Lb:	 is}', "");
Error('\p{Is_Line_Break=:=-INFIX NUMERIC}');
Error('\P{Is_Line_Break=:=-INFIX NUMERIC}');
Expect(1, 44, '\p{Is_Line_Break=infixnumeric}', "");
Expect(0, 44, '\p{^Is_Line_Break=infixnumeric}', "");
Expect(0, 44, '\P{Is_Line_Break=infixnumeric}', "");
Expect(1, 44, '\P{^Is_Line_Break=infixnumeric}', "");
Expect(0, 43, '\p{Is_Line_Break=infixnumeric}', "");
Expect(1, 43, '\p{^Is_Line_Break=infixnumeric}', "");
Expect(1, 43, '\P{Is_Line_Break=infixnumeric}', "");
Expect(0, 43, '\P{^Is_Line_Break=infixnumeric}', "");
Expect(1, 44, '\p{Is_Line_Break= Infixnumeric}', "");
Expect(0, 44, '\p{^Is_Line_Break= Infixnumeric}', "");
Expect(0, 44, '\P{Is_Line_Break= Infixnumeric}', "");
Expect(1, 44, '\P{^Is_Line_Break= Infixnumeric}', "");
Expect(0, 43, '\p{Is_Line_Break= Infixnumeric}', "");
Expect(1, 43, '\p{^Is_Line_Break= Infixnumeric}', "");
Expect(1, 43, '\P{Is_Line_Break= Infixnumeric}', "");
Expect(0, 43, '\P{^Is_Line_Break= Infixnumeric}', "");
Error('\p{Is_Lb=_	IS/a/}');
Error('\P{Is_Lb=_	IS/a/}');
Expect(1, 44, '\p{Is_Lb: is}', "");
Expect(0, 44, '\p{^Is_Lb: is}', "");
Expect(0, 44, '\P{Is_Lb: is}', "");
Expect(1, 44, '\P{^Is_Lb: is}', "");
Expect(0, 43, '\p{Is_Lb: is}', "");
Expect(1, 43, '\p{^Is_Lb: is}', "");
Expect(1, 43, '\P{Is_Lb: is}', "");
Expect(0, 43, '\P{^Is_Lb: is}', "");
Expect(1, 44, '\p{Is_Lb=	 is}', "");
Expect(0, 44, '\p{^Is_Lb=	 is}', "");
Expect(0, 44, '\P{Is_Lb=	 is}', "");
Expect(1, 44, '\P{^Is_Lb=	 is}', "");
Expect(0, 43, '\p{Is_Lb=	 is}', "");
Expect(1, 43, '\p{^Is_Lb=	 is}', "");
Expect(1, 43, '\P{Is_Lb=	 is}', "");
Expect(0, 43, '\P{^Is_Lb=	 is}', "");
Error('\p{Line_Break=_ Inseparable/a/}');
Error('\P{Line_Break=_ Inseparable/a/}');
Expect(1, 8230, '\p{Line_Break=inseparable}', "");
Expect(0, 8230, '\p{^Line_Break=inseparable}', "");
Expect(0, 8230, '\P{Line_Break=inseparable}', "");
Expect(1, 8230, '\P{^Line_Break=inseparable}', "");
Expect(0, 8227, '\p{Line_Break=inseparable}', "");
Expect(1, 8227, '\p{^Line_Break=inseparable}', "");
Expect(1, 8227, '\P{Line_Break=inseparable}', "");
Expect(0, 8227, '\P{^Line_Break=inseparable}', "");
Expect(1, 8230, '\p{Line_Break=-Inseparable}', "");
Expect(0, 8230, '\p{^Line_Break=-Inseparable}', "");
Expect(0, 8230, '\P{Line_Break=-Inseparable}', "");
Expect(1, 8230, '\P{^Line_Break=-Inseparable}', "");
Expect(0, 8227, '\p{Line_Break=-Inseparable}', "");
Expect(1, 8227, '\p{^Line_Break=-Inseparable}', "");
Expect(1, 8227, '\P{Line_Break=-Inseparable}', "");
Expect(0, 8227, '\P{^Line_Break=-Inseparable}', "");
Error('\p{Lb:		/a/IN}');
Error('\P{Lb:		/a/IN}');
Expect(1, 8230, '\p{Lb=in}', "");
Expect(0, 8230, '\p{^Lb=in}', "");
Expect(0, 8230, '\P{Lb=in}', "");
Expect(1, 8230, '\P{^Lb=in}', "");
Expect(0, 8227, '\p{Lb=in}', "");
Expect(1, 8227, '\p{^Lb=in}', "");
Expect(1, 8227, '\P{Lb=in}', "");
Expect(0, 8227, '\P{^Lb=in}', "");
Expect(1, 8230, '\p{Lb=--in}', "");
Expect(0, 8230, '\p{^Lb=--in}', "");
Expect(0, 8230, '\P{Lb=--in}', "");
Expect(1, 8230, '\P{^Lb=--in}', "");
Expect(0, 8227, '\p{Lb=--in}', "");
Expect(1, 8227, '\p{^Lb=--in}', "");
Expect(1, 8227, '\P{Lb=--in}', "");
Expect(0, 8227, '\P{^Lb=--in}', "");
Error('\p{Is_Line_Break=		inseperable/a/}');
Error('\P{Is_Line_Break=		inseperable/a/}');
Expect(1, 8230, '\p{Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\p{Is_Line_Break=_inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=_inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=_inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=_inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=_inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=_inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=_inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=_inseperable}', "");
Error('\p{Is_Lb=_INSEPARABLE:=}');
Error('\P{Is_Lb=_INSEPARABLE:=}');
Expect(1, 8230, '\p{Is_Lb=inseparable}', "");
Expect(0, 8230, '\p{^Is_Lb=inseparable}', "");
Expect(0, 8230, '\P{Is_Lb=inseparable}', "");
Expect(1, 8230, '\P{^Is_Lb=inseparable}', "");
Expect(0, 8227, '\p{Is_Lb=inseparable}', "");
Expect(1, 8227, '\p{^Is_Lb=inseparable}', "");
Expect(1, 8227, '\P{Is_Lb=inseparable}', "");
Expect(0, 8227, '\P{^Is_Lb=inseparable}', "");
Expect(1, 8230, '\p{Is_Lb=_inseparable}', "");
Expect(0, 8230, '\p{^Is_Lb=_inseparable}', "");
Expect(0, 8230, '\P{Is_Lb=_inseparable}', "");
Expect(1, 8230, '\P{^Is_Lb=_inseparable}', "");
Expect(0, 8227, '\p{Is_Lb=_inseparable}', "");
Expect(1, 8227, '\p{^Is_Lb=_inseparable}', "");
Expect(1, 8227, '\P{Is_Lb=_inseparable}', "");
Expect(0, 8227, '\P{^Is_Lb=_inseparable}', "");
Error('\p{Line_Break=:=- Complex	Context}');
Error('\P{Line_Break=:=- Complex	Context}');
Expect(1, 3642, '\p{Line_Break: complexcontext}', "");
Expect(0, 3642, '\p{^Line_Break: complexcontext}', "");
Expect(0, 3642, '\P{Line_Break: complexcontext}', "");
Expect(1, 3642, '\P{^Line_Break: complexcontext}', "");
Expect(0, 3584, '\p{Line_Break: complexcontext}', "");
Expect(1, 3584, '\p{^Line_Break: complexcontext}', "");
Expect(1, 3584, '\P{Line_Break: complexcontext}', "");
Expect(0, 3584, '\P{^Line_Break: complexcontext}', "");
Expect(1, 3642, '\p{Line_Break=_ complexContext}', "");
Expect(0, 3642, '\p{^Line_Break=_ complexContext}', "");
Expect(0, 3642, '\P{Line_Break=_ complexContext}', "");
Expect(1, 3642, '\P{^Line_Break=_ complexContext}', "");
Expect(0, 3584, '\p{Line_Break=_ complexContext}', "");
Expect(1, 3584, '\p{^Line_Break=_ complexContext}', "");
Expect(1, 3584, '\P{Line_Break=_ complexContext}', "");
Expect(0, 3584, '\P{^Line_Break=_ complexContext}', "");
Error('\p{Lb=/a/SA}');
Error('\P{Lb=/a/SA}');
Expect(1, 3642, '\p{Lb=sa}', "");
Expect(0, 3642, '\p{^Lb=sa}', "");
Expect(0, 3642, '\P{Lb=sa}', "");
Expect(1, 3642, '\P{^Lb=sa}', "");
Expect(0, 3584, '\p{Lb=sa}', "");
Expect(1, 3584, '\p{^Lb=sa}', "");
Expect(1, 3584, '\P{Lb=sa}', "");
Expect(0, 3584, '\P{^Lb=sa}', "");
Expect(1, 3642, '\p{Lb=-_SA}', "");
Expect(0, 3642, '\p{^Lb=-_SA}', "");
Expect(0, 3642, '\P{Lb=-_SA}', "");
Expect(1, 3642, '\P{^Lb=-_SA}', "");
Expect(0, 3584, '\p{Lb=-_SA}', "");
Expect(1, 3584, '\p{^Lb=-_SA}', "");
Expect(1, 3584, '\P{Lb=-_SA}', "");
Expect(0, 3584, '\P{^Lb=-_SA}', "");
Error('\p{Is_Line_Break= :=ComplexCONTEXT}');
Error('\P{Is_Line_Break= :=ComplexCONTEXT}');
Expect(1, 3642, '\p{Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\p{^Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\P{Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\P{^Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\p{Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\p{^Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\P{Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\P{^Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\p{Is_Line_Break=_-Complex	Context}', "");
Expect(0, 3642, '\p{^Is_Line_Break=_-Complex	Context}', "");
Expect(0, 3642, '\P{Is_Line_Break=_-Complex	Context}', "");
Expect(1, 3642, '\P{^Is_Line_Break=_-Complex	Context}', "");
Expect(0, 3584, '\p{Is_Line_Break=_-Complex	Context}', "");
Expect(1, 3584, '\p{^Is_Line_Break=_-Complex	Context}', "");
Expect(1, 3584, '\P{Is_Line_Break=_-Complex	Context}', "");
Expect(0, 3584, '\P{^Is_Line_Break=_-Complex	Context}', "");
Error('\p{Is_Lb=:=	 SA}');
Error('\P{Is_Lb=:=	 SA}');
Expect(1, 3642, '\p{Is_Lb=sa}', "");
Expect(0, 3642, '\p{^Is_Lb=sa}', "");
Expect(0, 3642, '\P{Is_Lb=sa}', "");
Expect(1, 3642, '\P{^Is_Lb=sa}', "");
Expect(0, 3584, '\p{Is_Lb=sa}', "");
Expect(1, 3584, '\p{^Is_Lb=sa}', "");
Expect(1, 3584, '\P{Is_Lb=sa}', "");
Expect(0, 3584, '\P{^Is_Lb=sa}', "");
Expect(1, 3642, '\p{Is_Lb= sa}', "");
Expect(0, 3642, '\p{^Is_Lb= sa}', "");
Expect(0, 3642, '\P{Is_Lb= sa}', "");
Expect(1, 3642, '\P{^Is_Lb= sa}', "");
Expect(0, 3584, '\p{Is_Lb= sa}', "");
Expect(1, 3584, '\p{^Is_Lb= sa}', "");
Expect(1, 3584, '\P{Is_Lb= sa}', "");
Expect(0, 3584, '\P{^Is_Lb= sa}', "");
Error('\p{Line_Break=	/a/HYPHEN}');
Error('\P{Line_Break=	/a/HYPHEN}');
Expect(1, 45, '\p{Line_Break=hyphen}', "");
Expect(0, 45, '\p{^Line_Break=hyphen}', "");
Expect(0, 45, '\P{Line_Break=hyphen}', "");
Expect(1, 45, '\P{^Line_Break=hyphen}', "");
Expect(0, 44, '\p{Line_Break=hyphen}', "");
Expect(1, 44, '\p{^Line_Break=hyphen}', "");
Expect(1, 44, '\P{Line_Break=hyphen}', "");
Expect(0, 44, '\P{^Line_Break=hyphen}', "");
Expect(1, 45, '\p{Line_Break=		hyphen}', "");
Expect(0, 45, '\p{^Line_Break=		hyphen}', "");
Expect(0, 45, '\P{Line_Break=		hyphen}', "");
Expect(1, 45, '\P{^Line_Break=		hyphen}', "");
Expect(0, 44, '\p{Line_Break=		hyphen}', "");
Expect(1, 44, '\p{^Line_Break=		hyphen}', "");
Expect(1, 44, '\P{Line_Break=		hyphen}', "");
Expect(0, 44, '\P{^Line_Break=		hyphen}', "");
Error('\p{Lb=_ HY:=}');
Error('\P{Lb=_ HY:=}');
Expect(1, 45, '\p{Lb=hy}', "");
Expect(0, 45, '\p{^Lb=hy}', "");
Expect(0, 45, '\P{Lb=hy}', "");
Expect(1, 45, '\P{^Lb=hy}', "");
Expect(0, 44, '\p{Lb=hy}', "");
Expect(1, 44, '\p{^Lb=hy}', "");
Expect(1, 44, '\P{Lb=hy}', "");
Expect(0, 44, '\P{^Lb=hy}', "");
Expect(1, 45, '\p{Lb=_	hy}', "");
Expect(0, 45, '\p{^Lb=_	hy}', "");
Expect(0, 45, '\P{Lb=_	hy}', "");
Expect(1, 45, '\P{^Lb=_	hy}', "");
Expect(0, 44, '\p{Lb=_	hy}', "");
Expect(1, 44, '\p{^Lb=_	hy}', "");
Expect(1, 44, '\P{Lb=_	hy}', "");
Expect(0, 44, '\P{^Lb=_	hy}', "");
Error('\p{Is_Line_Break=	-HYPHEN/a/}');
Error('\P{Is_Line_Break=	-HYPHEN/a/}');
Expect(1, 45, '\p{Is_Line_Break=hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=hyphen}', "");
Expect(1, 45, '\p{Is_Line_Break=_Hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=_Hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=_Hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=_Hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=_Hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=_Hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=_Hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=_Hyphen}', "");
Error('\p{Is_Lb=		hy:=}');
Error('\P{Is_Lb=		hy:=}');
Expect(1, 45, '\p{Is_Lb=hy}', "");
Expect(0, 45, '\p{^Is_Lb=hy}', "");
Expect(0, 45, '\P{Is_Lb=hy}', "");
Expect(1, 45, '\P{^Is_Lb=hy}', "");
Expect(0, 44, '\p{Is_Lb=hy}', "");
Expect(1, 44, '\p{^Is_Lb=hy}', "");
Expect(1, 44, '\P{Is_Lb=hy}', "");
Expect(0, 44, '\P{^Is_Lb=hy}', "");
Expect(1, 45, '\p{Is_Lb=-_HY}', "");
Expect(0, 45, '\p{^Is_Lb=-_HY}', "");
Expect(0, 45, '\P{Is_Lb=-_HY}', "");
Expect(1, 45, '\P{^Is_Lb=-_HY}', "");
Expect(0, 44, '\p{Is_Lb=-_HY}', "");
Expect(1, 44, '\p{^Is_Lb=-_HY}', "");
Expect(1, 44, '\P{Is_Lb=-_HY}', "");
Expect(0, 44, '\P{^Is_Lb=-_HY}', "");
Error('\p{Line_Break=_-break/a/after}');
Error('\P{Line_Break=_-break/a/after}');
Expect(1, 9, '\p{Line_Break=breakafter}', "");
Expect(0, 9, '\p{^Line_Break=breakafter}', "");
Expect(0, 9, '\P{Line_Break=breakafter}', "");
Expect(1, 9, '\P{^Line_Break=breakafter}', "");
Expect(0, 8, '\p{Line_Break=breakafter}', "");
Expect(1, 8, '\p{^Line_Break=breakafter}', "");
Expect(1, 8, '\P{Line_Break=breakafter}', "");
Expect(0, 8, '\P{^Line_Break=breakafter}', "");
Expect(1, 9, '\p{Line_Break=-	break_After}', "");
Expect(0, 9, '\p{^Line_Break=-	break_After}', "");
Expect(0, 9, '\P{Line_Break=-	break_After}', "");
Expect(1, 9, '\P{^Line_Break=-	break_After}', "");
Expect(0, 8, '\p{Line_Break=-	break_After}', "");
Expect(1, 8, '\p{^Line_Break=-	break_After}', "");
Expect(1, 8, '\P{Line_Break=-	break_After}', "");
Expect(0, 8, '\P{^Line_Break=-	break_After}', "");
Error('\p{Lb=:=_BA}');
Error('\P{Lb=:=_BA}');
Expect(1, 9, '\p{Lb=ba}', "");
Expect(0, 9, '\p{^Lb=ba}', "");
Expect(0, 9, '\P{Lb=ba}', "");
Expect(1, 9, '\P{^Lb=ba}', "");
Expect(0, 8, '\p{Lb=ba}', "");
Expect(1, 8, '\p{^Lb=ba}', "");
Expect(1, 8, '\P{Lb=ba}', "");
Expect(0, 8, '\P{^Lb=ba}', "");
Expect(1, 9, '\p{Lb=-BA}', "");
Expect(0, 9, '\p{^Lb=-BA}', "");
Expect(0, 9, '\P{Lb=-BA}', "");
Expect(1, 9, '\P{^Lb=-BA}', "");
Expect(0, 8, '\p{Lb=-BA}', "");
Expect(1, 8, '\p{^Lb=-BA}', "");
Expect(1, 8, '\P{Lb=-BA}', "");
Expect(0, 8, '\P{^Lb=-BA}', "");
Error('\p{Is_Line_Break=-Break	After/a/}');
Error('\P{Is_Line_Break=-Break	After/a/}');
Expect(1, 9, '\p{Is_Line_Break=breakafter}', "");
Expect(0, 9, '\p{^Is_Line_Break=breakafter}', "");
Expect(0, 9, '\P{Is_Line_Break=breakafter}', "");
Expect(1, 9, '\P{^Is_Line_Break=breakafter}', "");
Expect(0, 8, '\p{Is_Line_Break=breakafter}', "");
Expect(1, 8, '\p{^Is_Line_Break=breakafter}', "");
Expect(1, 8, '\P{Is_Line_Break=breakafter}', "");
Expect(0, 8, '\P{^Is_Line_Break=breakafter}', "");
Expect(1, 9, '\p{Is_Line_Break=-_BreakAfter}', "");
Expect(0, 9, '\p{^Is_Line_Break=-_BreakAfter}', "");
Expect(0, 9, '\P{Is_Line_Break=-_BreakAfter}', "");
Expect(1, 9, '\P{^Is_Line_Break=-_BreakAfter}', "");
Expect(0, 8, '\p{Is_Line_Break=-_BreakAfter}', "");
Expect(1, 8, '\p{^Is_Line_Break=-_BreakAfter}', "");
Expect(1, 8, '\P{Is_Line_Break=-_BreakAfter}', "");
Expect(0, 8, '\P{^Is_Line_Break=-_BreakAfter}', "");
Error('\p{Is_Lb=-BA/a/}');
Error('\P{Is_Lb=-BA/a/}');
Expect(1, 9, '\p{Is_Lb=ba}', "");
Expect(0, 9, '\p{^Is_Lb=ba}', "");
Expect(0, 9, '\P{Is_Lb=ba}', "");
Expect(1, 9, '\P{^Is_Lb=ba}', "");
Expect(0, 8, '\p{Is_Lb=ba}', "");
Expect(1, 8, '\p{^Is_Lb=ba}', "");
Expect(1, 8, '\P{Is_Lb=ba}', "");
Expect(0, 8, '\P{^Is_Lb=ba}', "");
Expect(1, 9, '\p{Is_Lb=_	BA}', "");
Expect(0, 9, '\p{^Is_Lb=_	BA}', "");
Expect(0, 9, '\P{Is_Lb=_	BA}', "");
Expect(1, 9, '\P{^Is_Lb=_	BA}', "");
Expect(0, 8, '\p{Is_Lb=_	BA}', "");
Expect(1, 8, '\p{^Is_Lb=_	BA}', "");
Expect(1, 8, '\P{Is_Lb=_	BA}', "");
Expect(0, 8, '\P{^Is_Lb=_	BA}', "");
Error('\p{Line_Break=_	LINE feed:=}');
Error('\P{Line_Break=_	LINE feed:=}');
Expect(1, 10, '\p{Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Line_Break=linefeed}', "");
Expect(0, 10, '\P{Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Line_Break=linefeed}', "");
Expect(0, 9, '\p{Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Line_Break=linefeed}', "");
Expect(1, 9, '\P{Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Line_Break=linefeed}', "");
Expect(1, 10, '\p{Line_Break:	_LINE_feed}', "");
Expect(0, 10, '\p{^Line_Break:	_LINE_feed}', "");
Expect(0, 10, '\P{Line_Break:	_LINE_feed}', "");
Expect(1, 10, '\P{^Line_Break:	_LINE_feed}', "");
Expect(0, 9, '\p{Line_Break:	_LINE_feed}', "");
Expect(1, 9, '\p{^Line_Break:	_LINE_feed}', "");
Expect(1, 9, '\P{Line_Break:	_LINE_feed}', "");
Expect(0, 9, '\P{^Line_Break:	_LINE_feed}', "");
Error('\p{Lb=:= -LF}');
Error('\P{Lb=:= -LF}');
Expect(1, 10, '\p{Lb=lf}', "");
Expect(0, 10, '\p{^Lb=lf}', "");
Expect(0, 10, '\P{Lb=lf}', "");
Expect(1, 10, '\P{^Lb=lf}', "");
Expect(0, 9, '\p{Lb=lf}', "");
Expect(1, 9, '\p{^Lb=lf}', "");
Expect(1, 9, '\P{Lb=lf}', "");
Expect(0, 9, '\P{^Lb=lf}', "");
Error('\p{Is_Line_Break=/a/- Line	FEED}');
Error('\P{Is_Line_Break=/a/- Line	FEED}');
Expect(1, 10, '\p{Is_Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Is_Line_Break=linefeed}', "");
Expect(0, 10, '\P{Is_Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Is_Line_Break=linefeed}', "");
Expect(0, 9, '\p{Is_Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Is_Line_Break=linefeed}', "");
Expect(1, 9, '\P{Is_Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Is_Line_Break=linefeed}', "");
Expect(1, 10, '\p{Is_Line_Break:   	 Line	FEED}', "");
Expect(0, 10, '\p{^Is_Line_Break:   	 Line	FEED}', "");
Expect(0, 10, '\P{Is_Line_Break:   	 Line	FEED}', "");
Expect(1, 10, '\P{^Is_Line_Break:   	 Line	FEED}', "");
Expect(0, 9, '\p{Is_Line_Break:   	 Line	FEED}', "");
Expect(1, 9, '\p{^Is_Line_Break:   	 Line	FEED}', "");
Expect(1, 9, '\P{Is_Line_Break:   	 Line	FEED}', "");
Expect(0, 9, '\P{^Is_Line_Break:   	 Line	FEED}', "");
Error('\p{Is_Lb=	:=LF}');
Error('\P{Is_Lb=	:=LF}');
Expect(1, 10, '\p{Is_Lb=lf}', "");
Expect(0, 10, '\p{^Is_Lb=lf}', "");
Expect(0, 10, '\P{Is_Lb=lf}', "");
Expect(1, 10, '\P{^Is_Lb=lf}', "");
Expect(0, 9, '\p{Is_Lb=lf}', "");
Expect(1, 9, '\p{^Is_Lb=lf}', "");
Expect(1, 9, '\P{Is_Lb=lf}', "");
Expect(0, 9, '\P{^Is_Lb=lf}', "");
Expect(1, 10, '\p{Is_Lb:   _-lf}', "");
Expect(0, 10, '\p{^Is_Lb:   _-lf}', "");
Expect(0, 10, '\P{Is_Lb:   _-lf}', "");
Expect(1, 10, '\P{^Is_Lb:   _-lf}', "");
Expect(0, 9, '\p{Is_Lb:   _-lf}', "");
Expect(1, 9, '\p{^Is_Lb:   _-lf}', "");
Expect(1, 9, '\P{Is_Lb:   _-lf}', "");
Expect(0, 9, '\P{^Is_Lb:   _-lf}', "");
Error('\p{Line_Break=_AMBIGUOUS:=}');
Error('\P{Line_Break=_AMBIGUOUS:=}');
Expect(1, 168, '\p{Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Line_Break=--Ambiguous}', "");
Expect(0, 168, '\p{^Line_Break=--Ambiguous}', "");
Expect(0, 168, '\P{Line_Break=--Ambiguous}', "");
Expect(1, 168, '\P{^Line_Break=--Ambiguous}', "");
Expect(0, 166, '\p{Line_Break=--Ambiguous}', "");
Expect(1, 166, '\p{^Line_Break=--Ambiguous}', "");
Expect(1, 166, '\P{Line_Break=--Ambiguous}', "");
Expect(0, 166, '\P{^Line_Break=--Ambiguous}', "");
Error('\p{Lb=-	AI/a/}');
Error('\P{Lb=-	AI/a/}');
Expect(1, 168, '\p{Lb=ai}', "");
Expect(0, 168, '\p{^Lb=ai}', "");
Expect(0, 168, '\P{Lb=ai}', "");
Expect(1, 168, '\P{^Lb=ai}', "");
Expect(0, 166, '\p{Lb=ai}', "");
Expect(1, 166, '\p{^Lb=ai}', "");
Expect(1, 166, '\P{Lb=ai}', "");
Expect(0, 166, '\P{^Lb=ai}', "");
Expect(1, 168, '\p{Lb=--AI}', "");
Expect(0, 168, '\p{^Lb=--AI}', "");
Expect(0, 168, '\P{Lb=--AI}', "");
Expect(1, 168, '\P{^Lb=--AI}', "");
Expect(0, 166, '\p{Lb=--AI}', "");
Expect(1, 166, '\p{^Lb=--AI}', "");
Expect(1, 166, '\P{Lb=--AI}', "");
Expect(0, 166, '\P{^Lb=--AI}', "");
Error('\p{Is_Line_Break= :=Ambiguous}');
Error('\P{Is_Line_Break= :=Ambiguous}');
Expect(1, 168, '\p{Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Is_Line_Break= AMBIGUOUS}', "");
Expect(0, 168, '\p{^Is_Line_Break= AMBIGUOUS}', "");
Expect(0, 168, '\P{Is_Line_Break= AMBIGUOUS}', "");
Expect(1, 168, '\P{^Is_Line_Break= AMBIGUOUS}', "");
Expect(0, 166, '\p{Is_Line_Break= AMBIGUOUS}', "");
Expect(1, 166, '\p{^Is_Line_Break= AMBIGUOUS}', "");
Expect(1, 166, '\P{Is_Line_Break= AMBIGUOUS}', "");
Expect(0, 166, '\P{^Is_Line_Break= AMBIGUOUS}', "");
Error('\p{Is_Lb=-ai/a/}');
Error('\P{Is_Lb=-ai/a/}');
Expect(1, 168, '\p{Is_Lb=ai}', "");
Expect(0, 168, '\p{^Is_Lb=ai}', "");
Expect(0, 168, '\P{Is_Lb=ai}', "");
Expect(1, 168, '\P{^Is_Lb=ai}', "");
Expect(0, 166, '\p{Is_Lb=ai}', "");
Expect(1, 166, '\p{^Is_Lb=ai}', "");
Expect(1, 166, '\P{Is_Lb=ai}', "");
Expect(0, 166, '\P{^Is_Lb=ai}', "");
Expect(1, 168, '\p{Is_Lb=		AI}', "");
Expect(0, 168, '\p{^Is_Lb=		AI}', "");
Expect(0, 168, '\P{Is_Lb=		AI}', "");
Expect(1, 168, '\P{^Is_Lb=		AI}', "");
Expect(0, 166, '\p{Is_Lb=		AI}', "");
Expect(1, 166, '\p{^Is_Lb=		AI}', "");
Expect(1, 166, '\P{Is_Lb=		AI}', "");
Expect(0, 166, '\P{^Is_Lb=		AI}', "");
Error('\p{Line_Break: /a/Contingent_Break}');
Error('\P{Line_Break: /a/Contingent_Break}');
Expect(1, 65532, '\p{Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Line_Break=_Contingent-BREAK}', "");
Expect(0, 65532, '\p{^Line_Break=_Contingent-BREAK}', "");
Expect(0, 65532, '\P{Line_Break=_Contingent-BREAK}', "");
Expect(1, 65532, '\P{^Line_Break=_Contingent-BREAK}', "");
Expect(0, 65531, '\p{Line_Break=_Contingent-BREAK}', "");
Expect(1, 65531, '\p{^Line_Break=_Contingent-BREAK}', "");
Expect(1, 65531, '\P{Line_Break=_Contingent-BREAK}', "");
Expect(0, 65531, '\P{^Line_Break=_Contingent-BREAK}', "");
Error('\p{Lb=_ CB:=}');
Error('\P{Lb=_ CB:=}');
Expect(1, 65532, '\p{Lb=cb}', "");
Expect(0, 65532, '\p{^Lb=cb}', "");
Expect(0, 65532, '\P{Lb=cb}', "");
Expect(1, 65532, '\P{^Lb=cb}', "");
Expect(0, 65531, '\p{Lb=cb}', "");
Expect(1, 65531, '\p{^Lb=cb}', "");
Expect(1, 65531, '\P{Lb=cb}', "");
Expect(0, 65531, '\P{^Lb=cb}', "");
Expect(1, 65532, '\p{Lb:_-CB}', "");
Expect(0, 65532, '\p{^Lb:_-CB}', "");
Expect(0, 65532, '\P{Lb:_-CB}', "");
Expect(1, 65532, '\P{^Lb:_-CB}', "");
Expect(0, 65531, '\p{Lb:_-CB}', "");
Expect(1, 65531, '\p{^Lb:_-CB}', "");
Expect(1, 65531, '\P{Lb:_-CB}', "");
Expect(0, 65531, '\P{^Lb:_-CB}', "");
Error('\p{Is_Line_Break=-	contingent:=break}');
Error('\P{Is_Line_Break=-	contingent:=break}');
Expect(1, 65532, '\p{Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Is_Line_Break=  Contingent_break}', "");
Expect(0, 65532, '\p{^Is_Line_Break=  Contingent_break}', "");
Expect(0, 65532, '\P{Is_Line_Break=  Contingent_break}', "");
Expect(1, 65532, '\P{^Is_Line_Break=  Contingent_break}', "");
Expect(0, 65531, '\p{Is_Line_Break=  Contingent_break}', "");
Expect(1, 65531, '\p{^Is_Line_Break=  Contingent_break}', "");
Expect(1, 65531, '\P{Is_Line_Break=  Contingent_break}', "");
Expect(0, 65531, '\P{^Is_Line_Break=  Contingent_break}', "");
Error('\p{Is_Lb=:=_CB}');
Error('\P{Is_Lb=:=_CB}');
Expect(1, 65532, '\p{Is_Lb=cb}', "");
Expect(0, 65532, '\p{^Is_Lb=cb}', "");
Expect(0, 65532, '\P{Is_Lb=cb}', "");
Expect(1, 65532, '\P{^Is_Lb=cb}', "");
Expect(0, 65531, '\p{Is_Lb=cb}', "");
Expect(1, 65531, '\p{^Is_Lb=cb}', "");
Expect(1, 65531, '\P{Is_Lb=cb}', "");
Expect(0, 65531, '\P{^Is_Lb=cb}', "");
Expect(1, 65532, '\p{Is_Lb:-_CB}', "");
Expect(0, 65532, '\p{^Is_Lb:-_CB}', "");
Expect(0, 65532, '\P{Is_Lb:-_CB}', "");
Expect(1, 65532, '\P{^Is_Lb:-_CB}', "");
Expect(0, 65531, '\p{Is_Lb:-_CB}', "");
Expect(1, 65531, '\p{^Is_Lb:-_CB}', "");
Expect(1, 65531, '\P{Is_Lb:-_CB}', "");
Expect(0, 65531, '\P{^Is_Lb:-_CB}', "");
Error('\p{Line_Break=:=		Exclamation}');
Error('\P{Line_Break=:=		Exclamation}');
Expect(1, 33, '\p{Line_Break=exclamation}', "");
Expect(0, 33, '\p{^Line_Break=exclamation}', "");
Expect(0, 33, '\P{Line_Break=exclamation}', "");
Expect(1, 33, '\P{^Line_Break=exclamation}', "");
Expect(0, 32, '\p{Line_Break=exclamation}', "");
Expect(1, 32, '\p{^Line_Break=exclamation}', "");
Expect(1, 32, '\P{Line_Break=exclamation}', "");
Expect(0, 32, '\P{^Line_Break=exclamation}', "");
Expect(1, 33, '\p{Line_Break= Exclamation}', "");
Expect(0, 33, '\p{^Line_Break= Exclamation}', "");
Expect(0, 33, '\P{Line_Break= Exclamation}', "");
Expect(1, 33, '\P{^Line_Break= Exclamation}', "");
Expect(0, 32, '\p{Line_Break= Exclamation}', "");
Expect(1, 32, '\p{^Line_Break= Exclamation}', "");
Expect(1, 32, '\P{Line_Break= Exclamation}', "");
Expect(0, 32, '\P{^Line_Break= Exclamation}', "");
Error('\p{Lb=-	EX/a/}');
Error('\P{Lb=-	EX/a/}');
Expect(1, 33, '\p{Lb=ex}', "");
Expect(0, 33, '\p{^Lb=ex}', "");
Expect(0, 33, '\P{Lb=ex}', "");
Expect(1, 33, '\P{^Lb=ex}', "");
Expect(0, 32, '\p{Lb=ex}', "");
Expect(1, 32, '\p{^Lb=ex}', "");
Expect(1, 32, '\P{Lb=ex}', "");
Expect(0, 32, '\P{^Lb=ex}', "");
Expect(1, 33, '\p{Lb= _EX}', "");
Expect(0, 33, '\p{^Lb= _EX}', "");
Expect(0, 33, '\P{Lb= _EX}', "");
Expect(1, 33, '\P{^Lb= _EX}', "");
Expect(0, 32, '\p{Lb= _EX}', "");
Expect(1, 32, '\p{^Lb= _EX}', "");
Expect(1, 32, '\P{Lb= _EX}', "");
Expect(0, 32, '\P{^Lb= _EX}', "");
Error('\p{Is_Line_Break=-Exclamation:=}');
Error('\P{Is_Line_Break=-Exclamation:=}');
Expect(1, 33, '\p{Is_Line_Break=exclamation}', "");
Expect(0, 33, '\p{^Is_Line_Break=exclamation}', "");
Expect(0, 33, '\P{Is_Line_Break=exclamation}', "");
Expect(1, 33, '\P{^Is_Line_Break=exclamation}', "");
Expect(0, 32, '\p{Is_Line_Break=exclamation}', "");
Expect(1, 32, '\p{^Is_Line_Break=exclamation}', "");
Expect(1, 32, '\P{Is_Line_Break=exclamation}', "");
Expect(0, 32, '\P{^Is_Line_Break=exclamation}', "");
Expect(1, 33, '\p{Is_Line_Break=	EXCLAMATION}', "");
Expect(0, 33, '\p{^Is_Line_Break=	EXCLAMATION}', "");
Expect(0, 33, '\P{Is_Line_Break=	EXCLAMATION}', "");
Expect(1, 33, '\P{^Is_Line_Break=	EXCLAMATION}', "");
Expect(0, 32, '\p{Is_Line_Break=	EXCLAMATION}', "");
Expect(1, 32, '\p{^Is_Line_Break=	EXCLAMATION}', "");
Expect(1, 32, '\P{Is_Line_Break=	EXCLAMATION}', "");
Expect(0, 32, '\P{^Is_Line_Break=	EXCLAMATION}', "");
Error('\p{Is_Lb=_/a/EX}');
Error('\P{Is_Lb=_/a/EX}');
Expect(1, 33, '\p{Is_Lb:ex}', "");
Expect(0, 33, '\p{^Is_Lb:ex}', "");
Expect(0, 33, '\P{Is_Lb:ex}', "");
Expect(1, 33, '\P{^Is_Lb:ex}', "");
Expect(0, 32, '\p{Is_Lb:ex}', "");
Expect(1, 32, '\p{^Is_Lb:ex}', "");
Expect(1, 32, '\P{Is_Lb:ex}', "");
Expect(0, 32, '\P{^Is_Lb:ex}', "");
Expect(1, 33, '\p{Is_Lb=-_ex}', "");
Expect(0, 33, '\p{^Is_Lb=-_ex}', "");
Expect(0, 33, '\P{Is_Lb=-_ex}', "");
Expect(1, 33, '\P{^Is_Lb=-_ex}', "");
Expect(0, 32, '\p{Is_Lb=-_ex}', "");
Expect(1, 32, '\p{^Is_Lb=-_ex}', "");
Expect(1, 32, '\P{Is_Lb=-_ex}', "");
Expect(0, 32, '\P{^Is_Lb=-_ex}', "");
Error('\p{Line_Break=:=_ Ideographic}');
Error('\P{Line_Break=:=_ Ideographic}');
Expect(1, 11929, '\p{Line_Break=ideographic}', "");
Expect(0, 11929, '\p{^Line_Break=ideographic}', "");
Expect(0, 11929, '\P{Line_Break=ideographic}', "");
Expect(1, 11929, '\P{^Line_Break=ideographic}', "");
Expect(0, 11903, '\p{Line_Break=ideographic}', "");
Expect(1, 11903, '\p{^Line_Break=ideographic}', "");
Expect(1, 11903, '\P{Line_Break=ideographic}', "");
Expect(0, 11903, '\P{^Line_Break=ideographic}', "");
Expect(1, 11929, '\p{Line_Break=- Ideographic}', "");
Expect(0, 11929, '\p{^Line_Break=- Ideographic}', "");
Expect(0, 11929, '\P{Line_Break=- Ideographic}', "");
Expect(1, 11929, '\P{^Line_Break=- Ideographic}', "");
Expect(0, 11903, '\p{Line_Break=- Ideographic}', "");
Expect(1, 11903, '\p{^Line_Break=- Ideographic}', "");
Expect(1, 11903, '\P{Line_Break=- Ideographic}', "");
Expect(0, 11903, '\P{^Line_Break=- Ideographic}', "");
Error('\p{Lb= :=ID}');
Error('\P{Lb= :=ID}');
Expect(1, 11929, '\p{Lb=id}', "");
Expect(0, 11929, '\p{^Lb=id}', "");
Expect(0, 11929, '\P{Lb=id}', "");
Expect(1, 11929, '\P{^Lb=id}', "");
Expect(0, 11903, '\p{Lb=id}', "");
Expect(1, 11903, '\p{^Lb=id}', "");
Expect(1, 11903, '\P{Lb=id}', "");
Expect(0, 11903, '\P{^Lb=id}', "");
Expect(1, 11929, '\p{Lb= _ID}', "");
Expect(0, 11929, '\p{^Lb= _ID}', "");
Expect(0, 11929, '\P{Lb= _ID}', "");
Expect(1, 11929, '\P{^Lb= _ID}', "");
Expect(0, 11903, '\p{Lb= _ID}', "");
Expect(1, 11903, '\p{^Lb= _ID}', "");
Expect(1, 11903, '\P{Lb= _ID}', "");
Expect(0, 11903, '\P{^Lb= _ID}', "");
Error('\p{Is_Line_Break=:=_Ideographic}');
Error('\P{Is_Line_Break=:=_Ideographic}');
Expect(1, 11929, '\p{Is_Line_Break=ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break=ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break=ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break=ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break=ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break=ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break=ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break=ideographic}', "");
Expect(1, 11929, '\p{Is_Line_Break=		ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break=		ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break=		ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break=		ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break=		ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break=		ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break=		ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break=		ideographic}', "");
Error('\p{Is_Lb=		ID/a/}');
Error('\P{Is_Lb=		ID/a/}');
Expect(1, 11929, '\p{Is_Lb=id}', "");
Expect(0, 11929, '\p{^Is_Lb=id}', "");
Expect(0, 11929, '\P{Is_Lb=id}', "");
Expect(1, 11929, '\P{^Is_Lb=id}', "");
Expect(0, 11903, '\p{Is_Lb=id}', "");
Expect(1, 11903, '\p{^Is_Lb=id}', "");
Expect(1, 11903, '\P{Is_Lb=id}', "");
Expect(0, 11903, '\P{^Is_Lb=id}', "");
Expect(1, 11929, '\p{Is_Lb=-ID}', "");
Expect(0, 11929, '\p{^Is_Lb=-ID}', "");
Expect(0, 11929, '\P{Is_Lb=-ID}', "");
Expect(1, 11929, '\P{^Is_Lb=-ID}', "");
Expect(0, 11903, '\p{Is_Lb=-ID}', "");
Expect(1, 11903, '\p{^Is_Lb=-ID}', "");
Expect(1, 11903, '\P{Is_Lb=-ID}', "");
Expect(0, 11903, '\P{^Is_Lb=-ID}', "");
Error('\p{Line_Break=WORD:=joiner}');
Error('\P{Line_Break=WORD:=joiner}');
Expect(1, 8288, '\p{Line_Break=wordjoiner}', "");
Expect(0, 8288, '\p{^Line_Break=wordjoiner}', "");
Expect(0, 8288, '\P{Line_Break=wordjoiner}', "");
Expect(1, 8288, '\P{^Line_Break=wordjoiner}', "");
Expect(0, 8287, '\p{Line_Break=wordjoiner}', "");
Expect(1, 8287, '\p{^Line_Break=wordjoiner}', "");
Expect(1, 8287, '\P{Line_Break=wordjoiner}', "");
Expect(0, 8287, '\P{^Line_Break=wordjoiner}', "");
Expect(1, 8288, '\p{Line_Break= _word-JOINER}', "");
Expect(0, 8288, '\p{^Line_Break= _word-JOINER}', "");
Expect(0, 8288, '\P{Line_Break= _word-JOINER}', "");
Expect(1, 8288, '\P{^Line_Break= _word-JOINER}', "");
Expect(0, 8287, '\p{Line_Break= _word-JOINER}', "");
Expect(1, 8287, '\p{^Line_Break= _word-JOINER}', "");
Expect(1, 8287, '\P{Line_Break= _word-JOINER}', "");
Expect(0, 8287, '\P{^Line_Break= _word-JOINER}', "");
Error('\p{Lb=-WJ/a/}');
Error('\P{Lb=-WJ/a/}');
Expect(1, 8288, '\p{Lb:	wj}', "");
Expect(0, 8288, '\p{^Lb:	wj}', "");
Expect(0, 8288, '\P{Lb:	wj}', "");
Expect(1, 8288, '\P{^Lb:	wj}', "");
Expect(0, 8287, '\p{Lb:	wj}', "");
Expect(1, 8287, '\p{^Lb:	wj}', "");
Expect(1, 8287, '\P{Lb:	wj}', "");
Expect(0, 8287, '\P{^Lb:	wj}', "");
Expect(1, 8288, '\p{Lb= WJ}', "");
Expect(0, 8288, '\p{^Lb= WJ}', "");
Expect(0, 8288, '\P{Lb= WJ}', "");
Expect(1, 8288, '\P{^Lb= WJ}', "");
Expect(0, 8287, '\p{Lb= WJ}', "");
Expect(1, 8287, '\p{^Lb= WJ}', "");
Expect(1, 8287, '\P{Lb= WJ}', "");
Expect(0, 8287, '\P{^Lb= WJ}', "");
Error('\p{Is_Line_Break=/a/ wordJOINER}');
Error('\P{Is_Line_Break=/a/ wordJOINER}');
Expect(1, 8288, '\p{Is_Line_Break:wordjoiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break:wordjoiner}', "");
Expect(0, 8288, '\P{Is_Line_Break:wordjoiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break:wordjoiner}', "");
Expect(0, 8287, '\p{Is_Line_Break:wordjoiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break:wordjoiner}', "");
Expect(1, 8287, '\P{Is_Line_Break:wordjoiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break:wordjoiner}', "");
Expect(1, 8288, '\p{Is_Line_Break=_ Word	Joiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break=_ Word	Joiner}', "");
Expect(0, 8288, '\P{Is_Line_Break=_ Word	Joiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break=_ Word	Joiner}', "");
Expect(0, 8287, '\p{Is_Line_Break=_ Word	Joiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break=_ Word	Joiner}', "");
Expect(1, 8287, '\P{Is_Line_Break=_ Word	Joiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break=_ Word	Joiner}', "");
Error('\p{Is_Lb=/a/_wj}');
Error('\P{Is_Lb=/a/_wj}');
Expect(1, 8288, '\p{Is_Lb=wj}', "");
Expect(0, 8288, '\p{^Is_Lb=wj}', "");
Expect(0, 8288, '\P{Is_Lb=wj}', "");
Expect(1, 8288, '\P{^Is_Lb=wj}', "");
Expect(0, 8287, '\p{Is_Lb=wj}', "");
Expect(1, 8287, '\p{^Is_Lb=wj}', "");
Expect(1, 8287, '\P{Is_Lb=wj}', "");
Expect(0, 8287, '\P{^Is_Lb=wj}', "");
Expect(1, 8288, '\p{Is_Lb=-	WJ}', "");
Expect(0, 8288, '\p{^Is_Lb=-	WJ}', "");
Expect(0, 8288, '\P{Is_Lb=-	WJ}', "");
Expect(1, 8288, '\P{^Is_Lb=-	WJ}', "");
Expect(0, 8287, '\p{Is_Lb=-	WJ}', "");
Expect(1, 8287, '\p{^Is_Lb=-	WJ}', "");
Expect(1, 8287, '\P{Is_Lb=-	WJ}', "");
Expect(0, 8287, '\P{^Is_Lb=-	WJ}', "");
Error('\p{Line_Break=:=h2}');
Error('\P{Line_Break=:=h2}');
Expect(1, 44032, '\p{Line_Break=h2}', "");
Expect(0, 44032, '\p{^Line_Break=h2}', "");
Expect(0, 44032, '\P{Line_Break=h2}', "");
Expect(1, 44032, '\P{^Line_Break=h2}', "");
Expect(0, 44031, '\p{Line_Break=h2}', "");
Expect(1, 44031, '\p{^Line_Break=h2}', "");
Expect(1, 44031, '\P{Line_Break=h2}', "");
Expect(0, 44031, '\P{^Line_Break=h2}', "");
Expect(1, 44032, '\p{Line_Break=-H2}', "");
Expect(0, 44032, '\p{^Line_Break=-H2}', "");
Expect(0, 44032, '\P{Line_Break=-H2}', "");
Expect(1, 44032, '\P{^Line_Break=-H2}', "");
Expect(0, 44031, '\p{Line_Break=-H2}', "");
Expect(1, 44031, '\p{^Line_Break=-H2}', "");
Expect(1, 44031, '\P{Line_Break=-H2}', "");
Expect(0, 44031, '\P{^Line_Break=-H2}', "");
Error('\p{Lb=-	h2:=}');
Error('\P{Lb=-	h2:=}');
Expect(1, 44032, '\p{Lb=h2}', "");
Expect(0, 44032, '\p{^Lb=h2}', "");
Expect(0, 44032, '\P{Lb=h2}', "");
Expect(1, 44032, '\P{^Lb=h2}', "");
Expect(0, 44031, '\p{Lb=h2}', "");
Expect(1, 44031, '\p{^Lb=h2}', "");
Expect(1, 44031, '\P{Lb=h2}', "");
Expect(0, 44031, '\P{^Lb=h2}', "");
Expect(1, 44032, '\p{Lb=_H2}', "");
Expect(0, 44032, '\p{^Lb=_H2}', "");
Expect(0, 44032, '\P{Lb=_H2}', "");
Expect(1, 44032, '\P{^Lb=_H2}', "");
Expect(0, 44031, '\p{Lb=_H2}', "");
Expect(1, 44031, '\p{^Lb=_H2}', "");
Expect(1, 44031, '\P{Lb=_H2}', "");
Expect(0, 44031, '\P{^Lb=_H2}', "");
Error('\p{Is_Line_Break=/a/	-h2}');
Error('\P{Is_Line_Break=/a/	-h2}');
Expect(1, 44032, '\p{Is_Line_Break=h2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=h2}', "");
Expect(0, 44032, '\P{Is_Line_Break=h2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=h2}', "");
Expect(0, 44031, '\p{Is_Line_Break=h2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=h2}', "");
Expect(1, 44031, '\P{Is_Line_Break=h2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=h2}', "");
Expect(1, 44032, '\p{Is_Line_Break=  H2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=  H2}', "");
Expect(0, 44032, '\P{Is_Line_Break=  H2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=  H2}', "");
Expect(0, 44031, '\p{Is_Line_Break=  H2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=  H2}', "");
Expect(1, 44031, '\P{Is_Line_Break=  H2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=  H2}', "");
Error('\p{Is_Lb=:=H2}');
Error('\P{Is_Lb=:=H2}');
Expect(1, 44032, '\p{Is_Lb=h2}', "");
Expect(0, 44032, '\p{^Is_Lb=h2}', "");
Expect(0, 44032, '\P{Is_Lb=h2}', "");
Expect(1, 44032, '\P{^Is_Lb=h2}', "");
Expect(0, 44031, '\p{Is_Lb=h2}', "");
Expect(1, 44031, '\p{^Is_Lb=h2}', "");
Expect(1, 44031, '\P{Is_Lb=h2}', "");
Expect(0, 44031, '\P{^Is_Lb=h2}', "");
Expect(1, 44032, '\p{Is_Lb=-h2}', "");
Expect(0, 44032, '\p{^Is_Lb=-h2}', "");
Expect(0, 44032, '\P{Is_Lb=-h2}', "");
Expect(1, 44032, '\P{^Is_Lb=-h2}', "");
Expect(0, 44031, '\p{Is_Lb=-h2}', "");
Expect(1, 44031, '\p{^Is_Lb=-h2}', "");
Expect(1, 44031, '\P{Is_Lb=-h2}', "");
Expect(0, 44031, '\P{^Is_Lb=-h2}', "");
Error('\p{Line_Break= -BREAK_both/a/}');
Error('\P{Line_Break= -BREAK_both/a/}');
Expect(1, 8212, '\p{Line_Break=breakboth}', "");
Expect(0, 8212, '\p{^Line_Break=breakboth}', "");
Expect(0, 8212, '\P{Line_Break=breakboth}', "");
Expect(1, 8212, '\P{^Line_Break=breakboth}', "");
Expect(0, 8211, '\p{Line_Break=breakboth}', "");
Expect(1, 8211, '\p{^Line_Break=breakboth}', "");
Expect(1, 8211, '\P{Line_Break=breakboth}', "");
Expect(0, 8211, '\P{^Line_Break=breakboth}', "");
Expect(1, 8212, '\p{Line_Break=__Break	BOTH}', "");
Expect(0, 8212, '\p{^Line_Break=__Break	BOTH}', "");
Expect(0, 8212, '\P{Line_Break=__Break	BOTH}', "");
Expect(1, 8212, '\P{^Line_Break=__Break	BOTH}', "");
Expect(0, 8211, '\p{Line_Break=__Break	BOTH}', "");
Expect(1, 8211, '\p{^Line_Break=__Break	BOTH}', "");
Expect(1, 8211, '\P{Line_Break=__Break	BOTH}', "");
Expect(0, 8211, '\P{^Line_Break=__Break	BOTH}', "");
Error('\p{Lb=/a/B2}');
Error('\P{Lb=/a/B2}');
Expect(1, 8212, '\p{Lb=b2}', "");
Expect(0, 8212, '\p{^Lb=b2}', "");
Expect(0, 8212, '\P{Lb=b2}', "");
Expect(1, 8212, '\P{^Lb=b2}', "");
Expect(0, 8211, '\p{Lb=b2}', "");
Expect(1, 8211, '\p{^Lb=b2}', "");
Expect(1, 8211, '\P{Lb=b2}', "");
Expect(0, 8211, '\P{^Lb=b2}', "");
Expect(1, 8212, '\p{Lb= _B2}', "");
Expect(0, 8212, '\p{^Lb= _B2}', "");
Expect(0, 8212, '\P{Lb= _B2}', "");
Expect(1, 8212, '\P{^Lb= _B2}', "");
Expect(0, 8211, '\p{Lb= _B2}', "");
Expect(1, 8211, '\p{^Lb= _B2}', "");
Expect(1, 8211, '\P{Lb= _B2}', "");
Expect(0, 8211, '\P{^Lb= _B2}', "");
Error('\p{Is_Line_Break=-	BreakBoth:=}');
Error('\P{Is_Line_Break=-	BreakBoth:=}');
Expect(1, 8212, '\p{Is_Line_Break=breakboth}', "");
Expect(0, 8212, '\p{^Is_Line_Break=breakboth}', "");
Expect(0, 8212, '\P{Is_Line_Break=breakboth}', "");
Expect(1, 8212, '\P{^Is_Line_Break=breakboth}', "");
Expect(0, 8211, '\p{Is_Line_Break=breakboth}', "");
Expect(1, 8211, '\p{^Is_Line_Break=breakboth}', "");
Expect(1, 8211, '\P{Is_Line_Break=breakboth}', "");
Expect(0, 8211, '\P{^Is_Line_Break=breakboth}', "");
Expect(1, 8212, '\p{Is_Line_Break=-BREAK	both}', "");
Expect(0, 8212, '\p{^Is_Line_Break=-BREAK	both}', "");
Expect(0, 8212, '\P{Is_Line_Break=-BREAK	both}', "");
Expect(1, 8212, '\P{^Is_Line_Break=-BREAK	both}', "");
Expect(0, 8211, '\p{Is_Line_Break=-BREAK	both}', "");
Expect(1, 8211, '\p{^Is_Line_Break=-BREAK	both}', "");
Expect(1, 8211, '\P{Is_Line_Break=-BREAK	both}', "");
Expect(0, 8211, '\P{^Is_Line_Break=-BREAK	both}', "");
Error('\p{Is_Lb= /a/b2}');
Error('\P{Is_Lb= /a/b2}');
Expect(1, 8212, '\p{Is_Lb:b2}', "");
Expect(0, 8212, '\p{^Is_Lb:b2}', "");
Expect(0, 8212, '\P{Is_Lb:b2}', "");
Expect(1, 8212, '\P{^Is_Lb:b2}', "");
Expect(0, 8211, '\p{Is_Lb:b2}', "");
Expect(1, 8211, '\p{^Is_Lb:b2}', "");
Expect(1, 8211, '\P{Is_Lb:b2}', "");
Expect(0, 8211, '\P{^Is_Lb:b2}', "");
Expect(1, 8212, '\p{Is_Lb=-B2}', "");
Expect(0, 8212, '\p{^Is_Lb=-B2}', "");
Expect(0, 8212, '\P{Is_Lb=-B2}', "");
Expect(1, 8212, '\P{^Is_Lb=-B2}', "");
Expect(0, 8211, '\p{Is_Lb=-B2}', "");
Expect(1, 8211, '\p{^Is_Lb=-B2}', "");
Expect(1, 8211, '\P{Is_Lb=-B2}', "");
Expect(0, 8211, '\P{^Is_Lb=-B2}', "");
Error('\p{Line_Break=	Alphabetic/a/}');
Error('\P{Line_Break=	Alphabetic/a/}');
Expect(1, 35, '\p{Line_Break:alphabetic}', "");
Expect(0, 35, '\p{^Line_Break:alphabetic}', "");
Expect(0, 35, '\P{Line_Break:alphabetic}', "");
Expect(1, 35, '\P{^Line_Break:alphabetic}', "");
Expect(0, 34, '\p{Line_Break:alphabetic}', "");
Expect(1, 34, '\p{^Line_Break:alphabetic}', "");
Expect(1, 34, '\P{Line_Break:alphabetic}', "");
Expect(0, 34, '\P{^Line_Break:alphabetic}', "");
Expect(1, 35, '\p{Line_Break=-_Alphabetic}', "");
Expect(0, 35, '\p{^Line_Break=-_Alphabetic}', "");
Expect(0, 35, '\P{Line_Break=-_Alphabetic}', "");
Expect(1, 35, '\P{^Line_Break=-_Alphabetic}', "");
Expect(0, 34, '\p{Line_Break=-_Alphabetic}', "");
Expect(1, 34, '\p{^Line_Break=-_Alphabetic}', "");
Expect(1, 34, '\P{Line_Break=-_Alphabetic}', "");
Expect(0, 34, '\P{^Line_Break=-_Alphabetic}', "");
Error('\p{Lb= :=al}');
Error('\P{Lb= :=al}');
Expect(1, 35, '\p{Lb=al}', "");
Expect(0, 35, '\p{^Lb=al}', "");
Expect(0, 35, '\P{Lb=al}', "");
Expect(1, 35, '\P{^Lb=al}', "");
Expect(0, 34, '\p{Lb=al}', "");
Expect(1, 34, '\p{^Lb=al}', "");
Expect(1, 34, '\P{Lb=al}', "");
Expect(0, 34, '\P{^Lb=al}', "");
Expect(1, 35, '\p{Lb=AL}', "");
Expect(0, 35, '\p{^Lb=AL}', "");
Expect(0, 35, '\P{Lb=AL}', "");
Expect(1, 35, '\P{^Lb=AL}', "");
Expect(0, 34, '\p{Lb=AL}', "");
Expect(1, 34, '\p{^Lb=AL}', "");
Expect(1, 34, '\P{Lb=AL}', "");
Expect(0, 34, '\P{^Lb=AL}', "");
Error('\p{Is_Line_Break=-/a/alphabetic}');
Error('\P{Is_Line_Break=-/a/alphabetic}');
Expect(1, 35, '\p{Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\p{Is_Line_Break=	_alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=	_alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=	_alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=	_alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=	_alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=	_alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=	_alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=	_alphabetic}', "");
Error('\p{Is_Lb:-	AL:=}');
Error('\P{Is_Lb:-	AL:=}');
Expect(1, 35, '\p{Is_Lb=al}', "");
Expect(0, 35, '\p{^Is_Lb=al}', "");
Expect(0, 35, '\P{Is_Lb=al}', "");
Expect(1, 35, '\P{^Is_Lb=al}', "");
Expect(0, 34, '\p{Is_Lb=al}', "");
Expect(1, 34, '\p{^Is_Lb=al}', "");
Expect(1, 34, '\P{Is_Lb=al}', "");
Expect(0, 34, '\P{^Is_Lb=al}', "");
Expect(1, 35, '\p{Is_Lb= _al}', "");
Expect(0, 35, '\p{^Is_Lb= _al}', "");
Expect(0, 35, '\P{Is_Lb= _al}', "");
Expect(1, 35, '\P{^Is_Lb= _al}', "");
Expect(0, 34, '\p{Is_Lb= _al}', "");
Expect(1, 34, '\p{^Is_Lb= _al}', "");
Expect(1, 34, '\P{Is_Lb= _al}', "");
Expect(0, 34, '\P{^Is_Lb= _al}', "");
Error('\p{Line_Break= :=postfixNUMERIC}');
Error('\P{Line_Break= :=postfixNUMERIC}');
Expect(1, 37, '\p{Line_Break=postfixnumeric}', "");
Expect(0, 37, '\p{^Line_Break=postfixnumeric}', "");
Expect(0, 37, '\P{Line_Break=postfixnumeric}', "");
Expect(1, 37, '\P{^Line_Break=postfixnumeric}', "");
Expect(0, 36, '\p{Line_Break=postfixnumeric}', "");
Expect(1, 36, '\p{^Line_Break=postfixnumeric}', "");
Expect(1, 36, '\P{Line_Break=postfixnumeric}', "");
Expect(0, 36, '\P{^Line_Break=postfixnumeric}', "");
Expect(1, 37, '\p{Line_Break=__POSTFIX Numeric}', "");
Expect(0, 37, '\p{^Line_Break=__POSTFIX Numeric}', "");
Expect(0, 37, '\P{Line_Break=__POSTFIX Numeric}', "");
Expect(1, 37, '\P{^Line_Break=__POSTFIX Numeric}', "");
Expect(0, 36, '\p{Line_Break=__POSTFIX Numeric}', "");
Expect(1, 36, '\p{^Line_Break=__POSTFIX Numeric}', "");
Expect(1, 36, '\P{Line_Break=__POSTFIX Numeric}', "");
Expect(0, 36, '\P{^Line_Break=__POSTFIX Numeric}', "");
Error('\p{Lb=/a/po}');
Error('\P{Lb=/a/po}');
Expect(1, 37, '\p{Lb=po}', "");
Expect(0, 37, '\p{^Lb=po}', "");
Expect(0, 37, '\P{Lb=po}', "");
Expect(1, 37, '\P{^Lb=po}', "");
Expect(0, 36, '\p{Lb=po}', "");
Expect(1, 36, '\p{^Lb=po}', "");
Expect(1, 36, '\P{Lb=po}', "");
Expect(0, 36, '\P{^Lb=po}', "");
Error('\p{Is_Line_Break=--postfixNumeric:=}');
Error('\P{Is_Line_Break=--postfixNumeric:=}');
Expect(1, 37, '\p{Is_Line_Break:   postfixnumeric}', "");
Expect(0, 37, '\p{^Is_Line_Break:   postfixnumeric}', "");
Expect(0, 37, '\P{Is_Line_Break:   postfixnumeric}', "");
Expect(1, 37, '\P{^Is_Line_Break:   postfixnumeric}', "");
Expect(0, 36, '\p{Is_Line_Break:   postfixnumeric}', "");
Expect(1, 36, '\p{^Is_Line_Break:   postfixnumeric}', "");
Expect(1, 36, '\P{Is_Line_Break:   postfixnumeric}', "");
Expect(0, 36, '\P{^Is_Line_Break:   postfixnumeric}', "");
Expect(1, 37, '\p{Is_Line_Break=	-Postfixnumeric}', "");
Expect(0, 37, '\p{^Is_Line_Break=	-Postfixnumeric}', "");
Expect(0, 37, '\P{Is_Line_Break=	-Postfixnumeric}', "");
Expect(1, 37, '\P{^Is_Line_Break=	-Postfixnumeric}', "");
Expect(0, 36, '\p{Is_Line_Break=	-Postfixnumeric}', "");
Expect(1, 36, '\p{^Is_Line_Break=	-Postfixnumeric}', "");
Expect(1, 36, '\P{Is_Line_Break=	-Postfixnumeric}', "");
Expect(0, 36, '\P{^Is_Line_Break=	-Postfixnumeric}', "");
Error('\p{Is_Lb=:= 	po}');
Error('\P{Is_Lb=:= 	po}');
Expect(1, 37, '\p{Is_Lb=po}', "");
Expect(0, 37, '\p{^Is_Lb=po}', "");
Expect(0, 37, '\P{Is_Lb=po}', "");
Expect(1, 37, '\P{^Is_Lb=po}', "");
Expect(0, 36, '\p{Is_Lb=po}', "");
Expect(1, 36, '\p{^Is_Lb=po}', "");
Expect(1, 36, '\P{Is_Lb=po}', "");
Expect(0, 36, '\P{^Is_Lb=po}', "");
Expect(1, 37, '\p{Is_Lb=_PO}', "");
Expect(0, 37, '\p{^Is_Lb=_PO}', "");
Expect(0, 37, '\P{Is_Lb=_PO}', "");
Expect(1, 37, '\P{^Is_Lb=_PO}', "");
Expect(0, 36, '\p{Is_Lb=_PO}', "");
Expect(1, 36, '\p{^Is_Lb=_PO}', "");
Expect(1, 36, '\P{Is_Lb=_PO}', "");
Expect(0, 36, '\P{^Is_Lb=_PO}', "");
Error('\p{Line_Break=-openPunctuation/a/}');
Error('\P{Line_Break=-openPunctuation/a/}');
Expect(1, 40, '\p{Line_Break=openpunctuation}', "");
Expect(0, 40, '\p{^Line_Break=openpunctuation}', "");
Expect(0, 40, '\P{Line_Break=openpunctuation}', "");
Expect(1, 40, '\P{^Line_Break=openpunctuation}', "");
Expect(0, 39, '\p{Line_Break=openpunctuation}', "");
Expect(1, 39, '\p{^Line_Break=openpunctuation}', "");
Expect(1, 39, '\P{Line_Break=openpunctuation}', "");
Expect(0, 39, '\P{^Line_Break=openpunctuation}', "");
Expect(1, 40, '\p{Line_Break=_	Open	PUNCTUATION}', "");
Expect(0, 40, '\p{^Line_Break=_	Open	PUNCTUATION}', "");
Expect(0, 40, '\P{Line_Break=_	Open	PUNCTUATION}', "");
Expect(1, 40, '\P{^Line_Break=_	Open	PUNCTUATION}', "");
Expect(0, 39, '\p{Line_Break=_	Open	PUNCTUATION}', "");
Expect(1, 39, '\p{^Line_Break=_	Open	PUNCTUATION}', "");
Expect(1, 39, '\P{Line_Break=_	Open	PUNCTUATION}', "");
Expect(0, 39, '\P{^Line_Break=_	Open	PUNCTUATION}', "");
Error('\p{Lb=:=- OP}');
Error('\P{Lb=:=- OP}');
Expect(1, 40, '\p{Lb=op}', "");
Expect(0, 40, '\p{^Lb=op}', "");
Expect(0, 40, '\P{Lb=op}', "");
Expect(1, 40, '\P{^Lb=op}', "");
Expect(0, 39, '\p{Lb=op}', "");
Expect(1, 39, '\p{^Lb=op}', "");
Expect(1, 39, '\P{Lb=op}', "");
Expect(0, 39, '\P{^Lb=op}', "");
Expect(1, 40, '\p{Lb=- OP}', "");
Expect(0, 40, '\p{^Lb=- OP}', "");
Expect(0, 40, '\P{Lb=- OP}', "");
Expect(1, 40, '\P{^Lb=- OP}', "");
Expect(0, 39, '\p{Lb=- OP}', "");
Expect(1, 39, '\p{^Lb=- OP}', "");
Expect(1, 39, '\P{Lb=- OP}', "");
Expect(0, 39, '\P{^Lb=- OP}', "");
Error('\p{Is_Line_Break=_/a/Open_Punctuation}');
Error('\P{Is_Line_Break=_/a/Open_Punctuation}');
Expect(1, 40, '\p{Is_Line_Break:   openpunctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break:   openpunctuation}', "");
Expect(0, 40, '\P{Is_Line_Break:   openpunctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break:   openpunctuation}', "");
Expect(0, 39, '\p{Is_Line_Break:   openpunctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break:   openpunctuation}', "");
Expect(1, 39, '\P{Is_Line_Break:   openpunctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break:   openpunctuation}', "");
Expect(1, 40, '\p{Is_Line_Break:   	open punctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break:   	open punctuation}', "");
Expect(0, 40, '\P{Is_Line_Break:   	open punctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break:   	open punctuation}', "");
Expect(0, 39, '\p{Is_Line_Break:   	open punctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break:   	open punctuation}', "");
Expect(1, 39, '\P{Is_Line_Break:   	open punctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break:   	open punctuation}', "");
Error('\p{Is_Lb=/a/_	OP}');
Error('\P{Is_Lb=/a/_	OP}');
Expect(1, 40, '\p{Is_Lb=op}', "");
Expect(0, 40, '\p{^Is_Lb=op}', "");
Expect(0, 40, '\P{Is_Lb=op}', "");
Expect(1, 40, '\P{^Is_Lb=op}', "");
Expect(0, 39, '\p{Is_Lb=op}', "");
Expect(1, 39, '\p{^Is_Lb=op}', "");
Expect(1, 39, '\P{Is_Lb=op}', "");
Expect(0, 39, '\P{^Is_Lb=op}', "");
Expect(1, 40, '\p{Is_Lb=- OP}', "");
Expect(0, 40, '\p{^Is_Lb=- OP}', "");
Expect(0, 40, '\P{Is_Lb=- OP}', "");
Expect(1, 40, '\P{^Is_Lb=- OP}', "");
Expect(0, 39, '\p{Is_Lb=- OP}', "");
Expect(1, 39, '\p{^Is_Lb=- OP}', "");
Expect(1, 39, '\P{Is_Lb=- OP}', "");
Expect(0, 39, '\P{^Is_Lb=- OP}', "");
Error('\p{Line_Break:	 -next	line:=}');
Error('\P{Line_Break:	 -next	line:=}');
Expect(1, 133, '\p{Line_Break=nextline}', "");
Expect(0, 133, '\p{^Line_Break=nextline}', "");
Expect(0, 133, '\P{Line_Break=nextline}', "");
Expect(1, 133, '\P{^Line_Break=nextline}', "");
Expect(0, 132, '\p{Line_Break=nextline}', "");
Expect(1, 132, '\p{^Line_Break=nextline}', "");
Expect(1, 132, '\P{Line_Break=nextline}', "");
Expect(0, 132, '\P{^Line_Break=nextline}', "");
Expect(1, 133, '\p{Line_Break=_-NEXT-Line}', "");
Expect(0, 133, '\p{^Line_Break=_-NEXT-Line}', "");
Expect(0, 133, '\P{Line_Break=_-NEXT-Line}', "");
Expect(1, 133, '\P{^Line_Break=_-NEXT-Line}', "");
Expect(0, 132, '\p{Line_Break=_-NEXT-Line}', "");
Expect(1, 132, '\p{^Line_Break=_-NEXT-Line}', "");
Expect(1, 132, '\P{Line_Break=_-NEXT-Line}', "");
Expect(0, 132, '\P{^Line_Break=_-NEXT-Line}', "");
Error('\p{Lb=_NL/a/}');
Error('\P{Lb=_NL/a/}');
Expect(1, 133, '\p{Lb=nl}', "");
Expect(0, 133, '\p{^Lb=nl}', "");
Expect(0, 133, '\P{Lb=nl}', "");
Expect(1, 133, '\P{^Lb=nl}', "");
Expect(0, 132, '\p{Lb=nl}', "");
Expect(1, 132, '\p{^Lb=nl}', "");
Expect(1, 132, '\P{Lb=nl}', "");
Expect(0, 132, '\P{^Lb=nl}', "");
Expect(1, 133, '\p{Lb=-NL}', "");
Expect(0, 133, '\p{^Lb=-NL}', "");
Expect(0, 133, '\P{Lb=-NL}', "");
Expect(1, 133, '\P{^Lb=-NL}', "");
Expect(0, 132, '\p{Lb=-NL}', "");
Expect(1, 132, '\p{^Lb=-NL}', "");
Expect(1, 132, '\P{Lb=-NL}', "");
Expect(0, 132, '\P{^Lb=-NL}', "");
Error('\p{Is_Line_Break=next	Line/a/}');
Error('\P{Is_Line_Break=next	Line/a/}');
Expect(1, 133, '\p{Is_Line_Break=nextline}', "");
Expect(0, 133, '\p{^Is_Line_Break=nextline}', "");
Expect(0, 133, '\P{Is_Line_Break=nextline}', "");
Expect(1, 133, '\P{^Is_Line_Break=nextline}', "");
Expect(0, 132, '\p{Is_Line_Break=nextline}', "");
Expect(1, 132, '\p{^Is_Line_Break=nextline}', "");
Expect(1, 132, '\P{Is_Line_Break=nextline}', "");
Expect(0, 132, '\P{^Is_Line_Break=nextline}', "");
Expect(1, 133, '\p{Is_Line_Break=-	Next_LINE}', "");
Expect(0, 133, '\p{^Is_Line_Break=-	Next_LINE}', "");
Expect(0, 133, '\P{Is_Line_Break=-	Next_LINE}', "");
Expect(1, 133, '\P{^Is_Line_Break=-	Next_LINE}', "");
Expect(0, 132, '\p{Is_Line_Break=-	Next_LINE}', "");
Expect(1, 132, '\p{^Is_Line_Break=-	Next_LINE}', "");
Expect(1, 132, '\P{Is_Line_Break=-	Next_LINE}', "");
Expect(0, 132, '\P{^Is_Line_Break=-	Next_LINE}', "");
Error('\p{Is_Lb=:=NL}');
Error('\P{Is_Lb=:=NL}');
Expect(1, 133, '\p{Is_Lb=nl}', "");
Expect(0, 133, '\p{^Is_Lb=nl}', "");
Expect(0, 133, '\P{Is_Lb=nl}', "");
Expect(1, 133, '\P{^Is_Lb=nl}', "");
Expect(0, 132, '\p{Is_Lb=nl}', "");
Expect(1, 132, '\p{^Is_Lb=nl}', "");
Expect(1, 132, '\P{Is_Lb=nl}', "");
Expect(0, 132, '\P{^Is_Lb=nl}', "");
Expect(1, 133, '\p{Is_Lb=	 NL}', "");
Expect(0, 133, '\p{^Is_Lb=	 NL}', "");
Expect(0, 133, '\P{Is_Lb=	 NL}', "");
Expect(1, 133, '\P{^Is_Lb=	 NL}', "");
Expect(0, 132, '\p{Is_Lb=	 NL}', "");
Expect(1, 132, '\p{^Is_Lb=	 NL}', "");
Expect(1, 132, '\P{Is_Lb=	 NL}', "");
Expect(0, 132, '\P{^Is_Lb=	 NL}', "");
Error('\p{Line_Break=-:=JT}');
Error('\P{Line_Break=-:=JT}');
Expect(1, 4607, '\p{Line_Break=jt}', "");
Expect(0, 4607, '\p{^Line_Break=jt}', "");
Expect(0, 4607, '\P{Line_Break=jt}', "");
Expect(1, 4607, '\P{^Line_Break=jt}', "");
Expect(0, 4519, '\p{Line_Break=jt}', "");
Expect(1, 4519, '\p{^Line_Break=jt}', "");
Expect(1, 4519, '\P{Line_Break=jt}', "");
Expect(0, 4519, '\P{^Line_Break=jt}', "");
Expect(1, 4607, '\p{Line_Break= -JT}', "");
Expect(0, 4607, '\p{^Line_Break= -JT}', "");
Expect(0, 4607, '\P{Line_Break= -JT}', "");
Expect(1, 4607, '\P{^Line_Break= -JT}', "");
Expect(0, 4519, '\p{Line_Break= -JT}', "");
Expect(1, 4519, '\p{^Line_Break= -JT}', "");
Expect(1, 4519, '\P{Line_Break= -JT}', "");
Expect(0, 4519, '\P{^Line_Break= -JT}', "");
Error('\p{Lb=:= jt}');
Error('\P{Lb=:= jt}');
Expect(1, 4607, '\p{Lb=jt}', "");
Expect(0, 4607, '\p{^Lb=jt}', "");
Expect(0, 4607, '\P{Lb=jt}', "");
Expect(1, 4607, '\P{^Lb=jt}', "");
Expect(0, 4519, '\p{Lb=jt}', "");
Expect(1, 4519, '\p{^Lb=jt}', "");
Expect(1, 4519, '\P{Lb=jt}', "");
Expect(0, 4519, '\P{^Lb=jt}', "");
Expect(1, 4607, '\p{Lb=--JT}', "");
Expect(0, 4607, '\p{^Lb=--JT}', "");
Expect(0, 4607, '\P{Lb=--JT}', "");
Expect(1, 4607, '\P{^Lb=--JT}', "");
Expect(0, 4519, '\p{Lb=--JT}', "");
Expect(1, 4519, '\p{^Lb=--JT}', "");
Expect(1, 4519, '\P{Lb=--JT}', "");
Expect(0, 4519, '\P{^Lb=--JT}', "");
Error('\p{Is_Line_Break=/a/JT}');
Error('\P{Is_Line_Break=/a/JT}');
Expect(1, 4607, '\p{Is_Line_Break=jt}', "");
Expect(0, 4607, '\p{^Is_Line_Break=jt}', "");
Expect(0, 4607, '\P{Is_Line_Break=jt}', "");
Expect(1, 4607, '\P{^Is_Line_Break=jt}', "");
Expect(0, 4519, '\p{Is_Line_Break=jt}', "");
Expect(1, 4519, '\p{^Is_Line_Break=jt}', "");
Expect(1, 4519, '\P{Is_Line_Break=jt}', "");
Expect(0, 4519, '\P{^Is_Line_Break=jt}', "");
Expect(1, 4607, '\p{Is_Line_Break=_JT}', "");
Expect(0, 4607, '\p{^Is_Line_Break=_JT}', "");
Expect(0, 4607, '\P{Is_Line_Break=_JT}', "");
Expect(1, 4607, '\P{^Is_Line_Break=_JT}', "");
Expect(0, 4519, '\p{Is_Line_Break=_JT}', "");
Expect(1, 4519, '\p{^Is_Line_Break=_JT}', "");
Expect(1, 4519, '\P{Is_Line_Break=_JT}', "");
Expect(0, 4519, '\P{^Is_Line_Break=_JT}', "");
Error('\p{Is_Lb=	:=JT}');
Error('\P{Is_Lb=	:=JT}');
Expect(1, 4607, '\p{Is_Lb=jt}', "");
Expect(0, 4607, '\p{^Is_Lb=jt}', "");
Expect(0, 4607, '\P{Is_Lb=jt}', "");
Expect(1, 4607, '\P{^Is_Lb=jt}', "");
Expect(0, 4519, '\p{Is_Lb=jt}', "");
Expect(1, 4519, '\p{^Is_Lb=jt}', "");
Expect(1, 4519, '\P{Is_Lb=jt}', "");
Expect(0, 4519, '\P{^Is_Lb=jt}', "");
Expect(1, 4607, '\p{Is_Lb=-	JT}', "");
Expect(0, 4607, '\p{^Is_Lb=-	JT}', "");
Expect(0, 4607, '\P{Is_Lb=-	JT}', "");
Expect(1, 4607, '\P{^Is_Lb=-	JT}', "");
Expect(0, 4519, '\p{Is_Lb=-	JT}', "");
Expect(1, 4519, '\p{^Is_Lb=-	JT}', "");
Expect(1, 4519, '\P{Is_Lb=-	JT}', "");
Expect(0, 4519, '\P{^Is_Lb=-	JT}', "");
Error('\p{Block=-:=new_Tai-Lue}');
Error('\P{Block=-:=new_Tai-Lue}');
Expect(1, 6623, '\p{Block=newtailue}', "");
Expect(0, 6623, '\p{^Block=newtailue}', "");
Expect(0, 6623, '\P{Block=newtailue}', "");
Expect(1, 6623, '\P{^Block=newtailue}', "");
Expect(0, 6527, '\p{Block=newtailue}', "");
Expect(1, 6527, '\p{^Block=newtailue}', "");
Expect(1, 6527, '\P{Block=newtailue}', "");
Expect(0, 6527, '\P{^Block=newtailue}', "");
Expect(1, 6623, '\p{Block=_ New-TAI_Lue}', "");
Expect(0, 6623, '\p{^Block=_ New-TAI_Lue}', "");
Expect(0, 6623, '\P{Block=_ New-TAI_Lue}', "");
Expect(1, 6623, '\P{^Block=_ New-TAI_Lue}', "");
Expect(0, 6527, '\p{Block=_ New-TAI_Lue}', "");
Expect(1, 6527, '\p{^Block=_ New-TAI_Lue}', "");
Expect(1, 6527, '\P{Block=_ New-TAI_Lue}', "");
Expect(0, 6527, '\P{^Block=_ New-TAI_Lue}', "");
Error('\p{Blk:	-	New-tai:=LUE}');
Error('\P{Blk:	-	New-tai:=LUE}');
Expect(1, 6623, '\p{Blk=newtailue}', "");
Expect(0, 6623, '\p{^Blk=newtailue}', "");
Expect(0, 6623, '\P{Blk=newtailue}', "");
Expect(1, 6623, '\P{^Blk=newtailue}', "");
Expect(0, 6527, '\p{Blk=newtailue}', "");
Expect(1, 6527, '\p{^Blk=newtailue}', "");
Expect(1, 6527, '\P{Blk=newtailue}', "");
Expect(0, 6527, '\P{^Blk=newtailue}', "");
Expect(1, 6623, '\p{Blk=	NEW	TAILue}', "");
Expect(0, 6623, '\p{^Blk=	NEW	TAILue}', "");
Expect(0, 6623, '\P{Blk=	NEW	TAILue}', "");
Expect(1, 6623, '\P{^Blk=	NEW	TAILue}', "");
Expect(0, 6527, '\p{Blk=	NEW	TAILue}', "");
Expect(1, 6527, '\p{^Blk=	NEW	TAILue}', "");
Expect(1, 6527, '\P{Blk=	NEW	TAILue}', "");
Expect(0, 6527, '\P{^Blk=	NEW	TAILue}', "");
Error('\p{Is_Block=/a/	_New TAI_Lue}');
Error('\P{Is_Block=/a/	_New TAI_Lue}');
Expect(1, 6623, '\p{Is_Block=newtailue}', "");
Expect(0, 6623, '\p{^Is_Block=newtailue}', "");
Expect(0, 6623, '\P{Is_Block=newtailue}', "");
Expect(1, 6623, '\P{^Is_Block=newtailue}', "");
Expect(0, 6527, '\p{Is_Block=newtailue}', "");
Expect(1, 6527, '\p{^Is_Block=newtailue}', "");
Expect(1, 6527, '\P{Is_Block=newtailue}', "");
Expect(0, 6527, '\P{^Is_Block=newtailue}', "");
Expect(1, 6623, '\p{Is_Block=__New	tailue}', "");
Expect(0, 6623, '\p{^Is_Block=__New	tailue}', "");
Expect(0, 6623, '\P{Is_Block=__New	tailue}', "");
Expect(1, 6623, '\P{^Is_Block=__New	tailue}', "");
Expect(0, 6527, '\p{Is_Block=__New	tailue}', "");
Expect(1, 6527, '\p{^Is_Block=__New	tailue}', "");
Expect(1, 6527, '\P{Is_Block=__New	tailue}', "");
Expect(0, 6527, '\P{^Is_Block=__New	tailue}', "");
Error('\p{Is_Blk=_ New	Tai/a/Lue}');
Error('\P{Is_Blk=_ New	Tai/a/Lue}');
Expect(1, 6623, '\p{Is_Blk: newtailue}', "");
Expect(0, 6623, '\p{^Is_Blk: newtailue}', "");
Expect(0, 6623, '\P{Is_Blk: newtailue}', "");
Expect(1, 6623, '\P{^Is_Blk: newtailue}', "");
Expect(0, 6527, '\p{Is_Blk: newtailue}', "");
Expect(1, 6527, '\p{^Is_Blk: newtailue}', "");
Expect(1, 6527, '\P{Is_Blk: newtailue}', "");
Expect(0, 6527, '\P{^Is_Blk: newtailue}', "");
Expect(1, 6623, '\p{Is_Blk=- New	Tai lue}', "");
Expect(0, 6623, '\p{^Is_Blk=- New	Tai lue}', "");
Expect(0, 6623, '\P{Is_Blk=- New	Tai lue}', "");
Expect(1, 6623, '\P{^Is_Blk=- New	Tai lue}', "");
Expect(0, 6527, '\p{Is_Blk=- New	Tai lue}', "");
Expect(1, 6527, '\p{^Is_Blk=- New	Tai lue}', "");
Expect(1, 6527, '\P{Is_Blk=- New	Tai lue}', "");
Expect(0, 6527, '\P{^Is_Blk=- New	Tai lue}', "");
Error('\p{Block= :=CJK UNIFIED	Ideographs	Extensiona}');
Error('\P{Block= :=CJK UNIFIED	Ideographs	Extensiona}');
Expect(1, 19903, '\p{Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(0, 19903, '\p{^Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(0, 19903, '\P{Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(1, 19903, '\P{^Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(0, 13311, '\p{Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(1, 13311, '\p{^Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(1, 13311, '\P{Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Expect(0, 13311, '\P{^Block:   _	CJK	UNIFIED-IDEOGRAPHS-ExtensionA}', "");
Error('\p{Blk=	/a/CJK_Unified_Ideographsextension A}');
Error('\P{Blk=	/a/CJK_Unified_Ideographsextension A}');
Expect(1, 19903, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(0, 19903, '\p{^Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(0, 19903, '\P{Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(1, 19903, '\P{^Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(0, 13311, '\p{Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(1, 13311, '\p{^Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(1, 13311, '\P{Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Expect(0, 13311, '\P{^Blk= cjk	Unified-IDEOGRAPHS-EXTENSION-A}', "");
Error('\p{Is_Block=CJK-Unified/a/Ideographs_ExtensionA}');
Error('\P{Is_Block=CJK-Unified/a/Ideographs_ExtensionA}');
Expect(1, 19903, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(0, 19903, '\p{^Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(0, 19903, '\P{Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(1, 19903, '\P{^Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(0, 13311, '\p{Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(1, 13311, '\p{^Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(1, 13311, '\P{Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Expect(0, 13311, '\P{^Is_Block=	-CJK-UnifiedIDEOGRAPHSextension	A}', "");
Error('\p{Is_Blk: 	CJKunified:=ideographs	EXTENSION-A}');
Error('\P{Is_Blk: 	CJKunified:=ideographs	EXTENSION-A}');
Expect(1, 19903, '\p{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(0, 19903, '\p{^Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(0, 19903, '\P{Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(1, 19903, '\P{^Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(0, 13311, '\p{Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(1, 13311, '\p{^Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(1, 13311, '\P{Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Expect(0, 13311, '\P{^Is_Blk=_-CJK	Unified-Ideographs EXTENSION-A}', "");
Error('\p{Block=-HANGULJAMO/a/}');
Error('\P{Block=-HANGULJAMO/a/}');
Expect(1, 4607, '\p{Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Block=hanguljamo}', "");
Expect(0, 4607, '\P{Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Block=hanguljamo}', "");
Expect(0, 4351, '\p{Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Block=hanguljamo}', "");
Expect(1, 4351, '\P{Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Block=hanguljamo}', "");
Expect(1, 4607, '\p{Block= -Hangul-jamo}', "");
Expect(0, 4607, '\p{^Block= -Hangul-jamo}', "");
Expect(0, 4607, '\P{Block= -Hangul-jamo}', "");
Expect(1, 4607, '\P{^Block= -Hangul-jamo}', "");
Expect(0, 4351, '\p{Block= -Hangul-jamo}', "");
Expect(1, 4351, '\p{^Block= -Hangul-jamo}', "");
Expect(1, 4351, '\P{Block= -Hangul-jamo}', "");
Expect(0, 4351, '\P{^Block= -Hangul-jamo}', "");
Error('\p{Blk=Hanguljamo:=}');
Error('\P{Blk=Hanguljamo:=}');
Expect(1, 4607, '\p{Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Blk:	-HangulJamo}', "");
Expect(0, 4607, '\p{^Blk:	-HangulJamo}', "");
Expect(0, 4607, '\P{Blk:	-HangulJamo}', "");
Expect(1, 4607, '\P{^Blk:	-HangulJamo}', "");
Expect(0, 4351, '\p{Blk:	-HangulJamo}', "");
Expect(1, 4351, '\p{^Blk:	-HangulJamo}', "");
Expect(1, 4351, '\P{Blk:	-HangulJamo}', "");
Expect(0, 4351, '\P{^Blk:	-HangulJamo}', "");
Error('\p{Is_Block=_hanguljamo:=}');
Error('\P{Is_Block=_hanguljamo:=}');
Expect(1, 4607, '\p{Is_Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Block=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Block=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Block=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Block=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Block=	 HANGUL	Jamo}', "");
Expect(0, 4607, '\p{^Is_Block=	 HANGUL	Jamo}', "");
Expect(0, 4607, '\P{Is_Block=	 HANGUL	Jamo}', "");
Expect(1, 4607, '\P{^Is_Block=	 HANGUL	Jamo}', "");
Expect(0, 4351, '\p{Is_Block=	 HANGUL	Jamo}', "");
Expect(1, 4351, '\p{^Is_Block=	 HANGUL	Jamo}', "");
Expect(1, 4351, '\P{Is_Block=	 HANGUL	Jamo}', "");
Expect(0, 4351, '\P{^Is_Block=	 HANGUL	Jamo}', "");
Error('\p{Is_Blk:	 /a/HANGUL-Jamo}');
Error('\P{Is_Blk:	 /a/HANGUL-Jamo}');
Expect(1, 4607, '\p{Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Blk= HANGUL_Jamo}', "");
Expect(0, 4607, '\p{^Is_Blk= HANGUL_Jamo}', "");
Expect(0, 4607, '\P{Is_Blk= HANGUL_Jamo}', "");
Expect(1, 4607, '\P{^Is_Blk= HANGUL_Jamo}', "");
Expect(0, 4351, '\p{Is_Blk= HANGUL_Jamo}', "");
Expect(1, 4351, '\p{^Is_Blk= HANGUL_Jamo}', "");
Expect(1, 4351, '\P{Is_Blk= HANGUL_Jamo}', "");
Expect(0, 4351, '\P{^Is_Blk= HANGUL_Jamo}', "");
Error('\p{Block:		Dingbats/a/}');
Error('\P{Block:		Dingbats/a/}');
Expect(1, 10175, '\p{Block=dingbats}', "");
Expect(0, 10175, '\p{^Block=dingbats}', "");
Expect(0, 10175, '\P{Block=dingbats}', "");
Expect(1, 10175, '\P{^Block=dingbats}', "");
Expect(0, 9983, '\p{Block=dingbats}', "");
Expect(1, 9983, '\p{^Block=dingbats}', "");
Expect(1, 9983, '\P{Block=dingbats}', "");
Expect(0, 9983, '\P{^Block=dingbats}', "");
Expect(1, 10175, '\p{Block=- DINGBATS}', "");
Expect(0, 10175, '\p{^Block=- DINGBATS}', "");
Expect(0, 10175, '\P{Block=- DINGBATS}', "");
Expect(1, 10175, '\P{^Block=- DINGBATS}', "");
Expect(0, 9983, '\p{Block=- DINGBATS}', "");
Expect(1, 9983, '\p{^Block=- DINGBATS}', "");
Expect(1, 9983, '\P{Block=- DINGBATS}', "");
Expect(0, 9983, '\P{^Block=- DINGBATS}', "");
Error('\p{Blk= -Dingbats:=}');
Error('\P{Blk= -Dingbats:=}');
Expect(1, 10175, '\p{Blk=dingbats}', "");
Expect(0, 10175, '\p{^Blk=dingbats}', "");
Expect(0, 10175, '\P{Blk=dingbats}', "");
Expect(1, 10175, '\P{^Blk=dingbats}', "");
Expect(0, 9983, '\p{Blk=dingbats}', "");
Expect(1, 9983, '\p{^Blk=dingbats}', "");
Expect(1, 9983, '\P{Blk=dingbats}', "");
Expect(0, 9983, '\P{^Blk=dingbats}', "");
Expect(1, 10175, '\p{Blk= 	dingbats}', "");
Expect(0, 10175, '\p{^Blk= 	dingbats}', "");
Expect(0, 10175, '\P{Blk= 	dingbats}', "");
Expect(1, 10175, '\P{^Blk= 	dingbats}', "");
Expect(0, 9983, '\p{Blk= 	dingbats}', "");
Expect(1, 9983, '\p{^Blk= 	dingbats}', "");
Expect(1, 9983, '\P{Blk= 	dingbats}', "");
Expect(0, 9983, '\P{^Blk= 	dingbats}', "");
Error('\p{Is_Block=:=_dingbats}');
Error('\P{Is_Block=:=_dingbats}');
Expect(1, 10175, '\p{Is_Block=dingbats}', "");
Expect(0, 10175, '\p{^Is_Block=dingbats}', "");
Expect(0, 10175, '\P{Is_Block=dingbats}', "");
Expect(1, 10175, '\P{^Is_Block=dingbats}', "");
Expect(0, 9983, '\p{Is_Block=dingbats}', "");
Expect(1, 9983, '\p{^Is_Block=dingbats}', "");
Expect(1, 9983, '\P{Is_Block=dingbats}', "");
Expect(0, 9983, '\P{^Is_Block=dingbats}', "");
Expect(1, 10175, '\p{Is_Block=Dingbats}', "");
Expect(0, 10175, '\p{^Is_Block=Dingbats}', "");
Expect(0, 10175, '\P{Is_Block=Dingbats}', "");
Expect(1, 10175, '\P{^Is_Block=Dingbats}', "");
Expect(0, 9983, '\p{Is_Block=Dingbats}', "");
Expect(1, 9983, '\p{^Is_Block=Dingbats}', "");
Expect(1, 9983, '\P{Is_Block=Dingbats}', "");
Expect(0, 9983, '\P{^Is_Block=Dingbats}', "");
Error('\p{Is_Blk=/a/dingbats}');
Error('\P{Is_Blk=/a/dingbats}');
Expect(1, 10175, '\p{Is_Blk:dingbats}', "");
Expect(0, 10175, '\p{^Is_Blk:dingbats}', "");
Expect(0, 10175, '\P{Is_Blk:dingbats}', "");
Expect(1, 10175, '\P{^Is_Blk:dingbats}', "");
Expect(0, 9983, '\p{Is_Blk:dingbats}', "");
Expect(1, 9983, '\p{^Is_Blk:dingbats}', "");
Expect(1, 9983, '\P{Is_Blk:dingbats}', "");
Expect(0, 9983, '\P{^Is_Blk:dingbats}', "");
Expect(1, 10175, '\p{Is_Blk=-	Dingbats}', "");
Expect(0, 10175, '\p{^Is_Blk=-	Dingbats}', "");
Expect(0, 10175, '\P{Is_Blk=-	Dingbats}', "");
Expect(1, 10175, '\P{^Is_Blk=-	Dingbats}', "");
Expect(0, 9983, '\p{Is_Blk=-	Dingbats}', "");
Expect(1, 9983, '\p{^Is_Blk=-	Dingbats}', "");
Expect(1, 9983, '\P{Is_Blk=-	Dingbats}', "");
Expect(0, 9983, '\P{^Is_Blk=-	Dingbats}', "");
Error('\p{Block=:=	 Bamum}');
Error('\P{Block=:=	 Bamum}');
Expect(1, 42751, '\p{Block=bamum}', "");
Expect(0, 42751, '\p{^Block=bamum}', "");
Expect(0, 42751, '\P{Block=bamum}', "");
Expect(1, 42751, '\P{^Block=bamum}', "");
Expect(0, 42655, '\p{Block=bamum}', "");
Expect(1, 42655, '\p{^Block=bamum}', "");
Expect(1, 42655, '\P{Block=bamum}', "");
Expect(0, 42655, '\P{^Block=bamum}', "");
Expect(1, 42751, '\p{Block=	 bamum}', "");
Expect(0, 42751, '\p{^Block=	 bamum}', "");
Expect(0, 42751, '\P{Block=	 bamum}', "");
Expect(1, 42751, '\P{^Block=	 bamum}', "");
Expect(0, 42655, '\p{Block=	 bamum}', "");
Expect(1, 42655, '\p{^Block=	 bamum}', "");
Expect(1, 42655, '\P{Block=	 bamum}', "");
Expect(0, 42655, '\P{^Block=	 bamum}', "");
Error('\p{Blk= /a/bamum}');
Error('\P{Blk= /a/bamum}');
Expect(1, 42751, '\p{Blk=bamum}', "");
Expect(0, 42751, '\p{^Blk=bamum}', "");
Expect(0, 42751, '\P{Blk=bamum}', "");
Expect(1, 42751, '\P{^Blk=bamum}', "");
Expect(0, 42655, '\p{Blk=bamum}', "");
Expect(1, 42655, '\p{^Blk=bamum}', "");
Expect(1, 42655, '\P{Blk=bamum}', "");
Expect(0, 42655, '\P{^Blk=bamum}', "");
Expect(1, 42751, '\p{Blk= 	BAMUM}', "");
Expect(0, 42751, '\p{^Blk= 	BAMUM}', "");
Expect(0, 42751, '\P{Blk= 	BAMUM}', "");
Expect(1, 42751, '\P{^Blk= 	BAMUM}', "");
Expect(0, 42655, '\p{Blk= 	BAMUM}', "");
Expect(1, 42655, '\p{^Blk= 	BAMUM}', "");
Expect(1, 42655, '\P{Blk= 	BAMUM}', "");
Expect(0, 42655, '\P{^Blk= 	BAMUM}', "");
Error('\p{Is_Block=:=-_bamum}');
Error('\P{Is_Block=:=-_bamum}');
Expect(1, 42751, '\p{Is_Block=bamum}', "");
Expect(0, 42751, '\p{^Is_Block=bamum}', "");
Expect(0, 42751, '\P{Is_Block=bamum}', "");
Expect(1, 42751, '\P{^Is_Block=bamum}', "");
Expect(0, 42655, '\p{Is_Block=bamum}', "");
Expect(1, 42655, '\p{^Is_Block=bamum}', "");
Expect(1, 42655, '\P{Is_Block=bamum}', "");
Expect(0, 42655, '\P{^Is_Block=bamum}', "");
Expect(1, 42751, '\p{Is_Block=	-BAMUM}', "");
Expect(0, 42751, '\p{^Is_Block=	-BAMUM}', "");
Expect(0, 42751, '\P{Is_Block=	-BAMUM}', "");
Expect(1, 42751, '\P{^Is_Block=	-BAMUM}', "");
Expect(0, 42655, '\p{Is_Block=	-BAMUM}', "");
Expect(1, 42655, '\p{^Is_Block=	-BAMUM}', "");
Expect(1, 42655, '\P{Is_Block=	-BAMUM}', "");
Expect(0, 42655, '\P{^Is_Block=	-BAMUM}', "");
Error('\p{Is_Blk=:=_bamum}');
Error('\P{Is_Blk=:=_bamum}');
Expect(1, 42751, '\p{Is_Blk=bamum}', "");
Expect(0, 42751, '\p{^Is_Blk=bamum}', "");
Expect(0, 42751, '\P{Is_Blk=bamum}', "");
Expect(1, 42751, '\P{^Is_Blk=bamum}', "");
Expect(0, 42655, '\p{Is_Blk=bamum}', "");
Expect(1, 42655, '\p{^Is_Blk=bamum}', "");
Expect(1, 42655, '\P{Is_Blk=bamum}', "");
Expect(0, 42655, '\P{^Is_Blk=bamum}', "");
Expect(1, 42751, '\p{Is_Blk=--Bamum}', "");
Expect(0, 42751, '\p{^Is_Blk=--Bamum}', "");
Expect(0, 42751, '\P{Is_Blk=--Bamum}', "");
Expect(1, 42751, '\P{^Is_Blk=--Bamum}', "");
Expect(0, 42655, '\p{Is_Blk=--Bamum}', "");
Expect(1, 42655, '\p{^Is_Blk=--Bamum}', "");
Expect(1, 42655, '\P{Is_Blk=--Bamum}', "");
Expect(0, 42655, '\P{^Is_Blk=--Bamum}', "");
Error('\p{Block=/a/	_Inscriptional	Parthian}');
Error('\P{Block=/a/	_Inscriptional	Parthian}');
Expect(1, 68447, '\p{Block=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Block=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Block=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Block=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Block=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Block=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Block=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Block=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Block:   	_InscriptionalParthian}', "");
Expect(0, 68447, '\p{^Block:   	_InscriptionalParthian}', "");
Expect(0, 68447, '\P{Block:   	_InscriptionalParthian}', "");
Expect(1, 68447, '\P{^Block:   	_InscriptionalParthian}', "");
Expect(0, 68415, '\p{Block:   	_InscriptionalParthian}', "");
Expect(1, 68415, '\p{^Block:   	_InscriptionalParthian}', "");
Expect(1, 68415, '\P{Block:   	_InscriptionalParthian}', "");
Expect(0, 68415, '\P{^Block:   	_InscriptionalParthian}', "");
Error('\p{Blk=/a/	INSCRIPTIONALparthian}');
Error('\P{Blk=/a/	INSCRIPTIONALparthian}');
Expect(1, 68447, '\p{Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(0, 68447, '\p{^Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(0, 68447, '\P{Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(1, 68447, '\P{^Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(0, 68415, '\p{Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(1, 68415, '\p{^Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(1, 68415, '\P{Blk=  INSCRIPTIONAL	Parthian}', "");
Expect(0, 68415, '\P{^Blk=  INSCRIPTIONAL	Parthian}', "");
Error('\p{Is_Block=	 INSCRIPTIONAL	PARTHIAN:=}');
Error('\P{Is_Block=	 INSCRIPTIONAL	PARTHIAN:=}');
Expect(1, 68447, '\p{Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(0, 68447, '\p{^Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(0, 68447, '\P{Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(1, 68447, '\P{^Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(0, 68415, '\p{Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(1, 68415, '\p{^Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(1, 68415, '\P{Is_Block=-	Inscriptional PARTHIAN}', "");
Expect(0, 68415, '\P{^Is_Block=-	Inscriptional PARTHIAN}', "");
Error('\p{Is_Blk= :=inscriptional parthian}');
Error('\P{Is_Blk= :=inscriptional parthian}');
Expect(1, 68447, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(0, 68447, '\p{^Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(0, 68447, '\P{Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(1, 68447, '\P{^Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\p{Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\p{^Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\P{Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\P{^Is_Blk= 	INSCRIPTIONAL-Parthian}', "");
Error('\p{Block=-:=UNIFIEDCanadian-Aboriginal-SYLLABICS}');
Error('\P{Block=-:=UNIFIEDCanadian-Aboriginal-SYLLABICS}');
Expect(1, 5759, '\p{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(0, 5759, '\p{^Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(0, 5759, '\P{Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(1, 5759, '\P{^Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(0, 5119, '\p{Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(1, 5119, '\p{^Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(1, 5119, '\P{Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Expect(0, 5119, '\P{^Block=-UnifiedCANADIAN	Aboriginal Syllabics}', "");
Error('\p{Blk=-Canadian/a/SYLLABICS}');
Error('\P{Blk=-Canadian/a/SYLLABICS}');
Expect(1, 5759, '\p{Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Blk= canadian	Syllabics}', "");
Expect(0, 5759, '\p{^Blk= canadian	Syllabics}', "");
Expect(0, 5759, '\P{Blk= canadian	Syllabics}', "");
Expect(1, 5759, '\P{^Blk= canadian	Syllabics}', "");
Expect(0, 5119, '\p{Blk= canadian	Syllabics}', "");
Expect(1, 5119, '\p{^Blk= canadian	Syllabics}', "");
Expect(1, 5119, '\P{Blk= canadian	Syllabics}', "");
Expect(0, 5119, '\P{^Blk= canadian	Syllabics}', "");
Error('\p{Is_Block=__Unified-CANADIAN:=Aboriginal	SYLLABICS}');
Error('\P{Is_Block=__Unified-CANADIAN:=Aboriginal	SYLLABICS}');
Expect(1, 5759, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(0, 5759, '\p{^Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(0, 5759, '\P{Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(1, 5759, '\P{^Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(0, 5119, '\p{Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(1, 5119, '\p{^Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(1, 5119, '\P{Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Expect(0, 5119, '\P{^Is_Block=_	UNIFIED CANADIAN ABORIGINAL-Syllabics}', "");
Error('\p{Is_Blk=_:=CanadianSyllabics}');
Error('\P{Is_Blk=_:=CanadianSyllabics}');
Expect(1, 5759, '\p{Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Is_Blk=_	CANADIANSyllabics}', "");
Expect(0, 5759, '\p{^Is_Blk=_	CANADIANSyllabics}', "");
Expect(0, 5759, '\P{Is_Blk=_	CANADIANSyllabics}', "");
Expect(1, 5759, '\P{^Is_Blk=_	CANADIANSyllabics}', "");
Expect(0, 5119, '\p{Is_Blk=_	CANADIANSyllabics}', "");
Expect(1, 5119, '\p{^Is_Blk=_	CANADIANSyllabics}', "");
Expect(1, 5119, '\P{Is_Blk=_	CANADIANSyllabics}', "");
Expect(0, 5119, '\P{^Is_Blk=_	CANADIANSyllabics}', "");
Error('\p{Block=/a/ Variation Selectors}');
Error('\P{Block=/a/ Variation Selectors}');
Expect(1, 65039, '\p{Block=variationselectors}', "");
Expect(0, 65039, '\p{^Block=variationselectors}', "");
Expect(0, 65039, '\P{Block=variationselectors}', "");
Expect(1, 65039, '\P{^Block=variationselectors}', "");
Expect(0, 65023, '\p{Block=variationselectors}', "");
Expect(1, 65023, '\p{^Block=variationselectors}', "");
Expect(1, 65023, '\P{Block=variationselectors}', "");
Expect(0, 65023, '\P{^Block=variationselectors}', "");
Expect(1, 65039, '\p{Block=	-VariationSelectors}', "");
Expect(0, 65039, '\p{^Block=	-VariationSelectors}', "");
Expect(0, 65039, '\P{Block=	-VariationSelectors}', "");
Expect(1, 65039, '\P{^Block=	-VariationSelectors}', "");
Expect(0, 65023, '\p{Block=	-VariationSelectors}', "");
Expect(1, 65023, '\p{^Block=	-VariationSelectors}', "");
Expect(1, 65023, '\P{Block=	-VariationSelectors}', "");
Expect(0, 65023, '\P{^Block=	-VariationSelectors}', "");
Error('\p{Blk: Variation	SELECTORS/a/}');
Error('\P{Blk: Variation	SELECTORS/a/}');
Expect(1, 65039, '\p{Blk=variationselectors}', "");
Expect(0, 65039, '\p{^Blk=variationselectors}', "");
Expect(0, 65039, '\P{Blk=variationselectors}', "");
Expect(1, 65039, '\P{^Blk=variationselectors}', "");
Expect(0, 65023, '\p{Blk=variationselectors}', "");
Expect(1, 65023, '\p{^Blk=variationselectors}', "");
Expect(1, 65023, '\P{Blk=variationselectors}', "");
Expect(0, 65023, '\P{^Blk=variationselectors}', "");
Expect(1, 65039, '\p{Blk=_variation_Selectors}', "");
Expect(0, 65039, '\p{^Blk=_variation_Selectors}', "");
Expect(0, 65039, '\P{Blk=_variation_Selectors}', "");
Expect(1, 65039, '\P{^Blk=_variation_Selectors}', "");
Expect(0, 65023, '\p{Blk=_variation_Selectors}', "");
Expect(1, 65023, '\p{^Blk=_variation_Selectors}', "");
Expect(1, 65023, '\P{Blk=_variation_Selectors}', "");
Expect(0, 65023, '\P{^Blk=_variation_Selectors}', "");
Error('\p{Is_Block=:= 	Variation SELECTORS}');
Error('\P{Is_Block=:= 	Variation SELECTORS}');
Expect(1, 65039, '\p{Is_Block=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Block=variationselectors}', "");
Expect(0, 65039, '\P{Is_Block=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Block=variationselectors}', "");
Expect(0, 65023, '\p{Is_Block=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Block=variationselectors}', "");
Expect(1, 65023, '\P{Is_Block=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Block=variationselectors}', "");
Expect(1, 65039, '\p{Is_Block=  variation SELECTORS}', "");
Expect(0, 65039, '\p{^Is_Block=  variation SELECTORS}', "");
Expect(0, 65039, '\P{Is_Block=  variation SELECTORS}', "");
Expect(1, 65039, '\P{^Is_Block=  variation SELECTORS}', "");
Expect(0, 65023, '\p{Is_Block=  variation SELECTORS}', "");
Expect(1, 65023, '\p{^Is_Block=  variation SELECTORS}', "");
Expect(1, 65023, '\P{Is_Block=  variation SELECTORS}', "");
Expect(0, 65023, '\P{^Is_Block=  variation SELECTORS}', "");
Error('\p{Is_Blk=	:=VARIATION	SELECTORS}');
Error('\P{Is_Blk=	:=VARIATION	SELECTORS}');
Expect(1, 65039, '\p{Is_Blk=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Blk=variationselectors}', "");
Expect(0, 65039, '\P{Is_Blk=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Blk=variationselectors}', "");
Expect(0, 65023, '\p{Is_Blk=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Blk=variationselectors}', "");
Expect(1, 65023, '\P{Is_Blk=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Blk=variationselectors}', "");
Expect(1, 65039, '\p{Is_Blk=VARIATION_Selectors}', "");
Expect(0, 65039, '\p{^Is_Blk=VARIATION_Selectors}', "");
Expect(0, 65039, '\P{Is_Blk=VARIATION_Selectors}', "");
Expect(1, 65039, '\P{^Is_Blk=VARIATION_Selectors}', "");
Expect(0, 65023, '\p{Is_Blk=VARIATION_Selectors}', "");
Expect(1, 65023, '\p{^Is_Blk=VARIATION_Selectors}', "");
Expect(1, 65023, '\P{Is_Blk=VARIATION_Selectors}', "");
Expect(0, 65023, '\P{^Is_Blk=VARIATION_Selectors}', "");
Error('\p{Block= -Number:=Forms}');
Error('\P{Block= -Number:=Forms}');
Expect(1, 8591, '\p{Block:	numberforms}', "");
Expect(0, 8591, '\p{^Block:	numberforms}', "");
Expect(0, 8591, '\P{Block:	numberforms}', "");
Expect(1, 8591, '\P{^Block:	numberforms}', "");
Expect(0, 8527, '\p{Block:	numberforms}', "");
Expect(1, 8527, '\p{^Block:	numberforms}', "");
Expect(1, 8527, '\P{Block:	numberforms}', "");
Expect(0, 8527, '\P{^Block:	numberforms}', "");
Expect(1, 8591, '\p{Block=-NumberFORMS}', "");
Expect(0, 8591, '\p{^Block=-NumberFORMS}', "");
Expect(0, 8591, '\P{Block=-NumberFORMS}', "");
Expect(1, 8591, '\P{^Block=-NumberFORMS}', "");
Expect(0, 8527, '\p{Block=-NumberFORMS}', "");
Expect(1, 8527, '\p{^Block=-NumberFORMS}', "");
Expect(1, 8527, '\P{Block=-NumberFORMS}', "");
Expect(0, 8527, '\P{^Block=-NumberFORMS}', "");
Error('\p{Blk= Number:=Forms}');
Error('\P{Blk= Number:=Forms}');
Expect(1, 8591, '\p{Blk=numberforms}', "");
Expect(0, 8591, '\p{^Blk=numberforms}', "");
Expect(0, 8591, '\P{Blk=numberforms}', "");
Expect(1, 8591, '\P{^Blk=numberforms}', "");
Expect(0, 8527, '\p{Blk=numberforms}', "");
Expect(1, 8527, '\p{^Blk=numberforms}', "");
Expect(1, 8527, '\P{Blk=numberforms}', "");
Expect(0, 8527, '\P{^Blk=numberforms}', "");
Expect(1, 8591, '\p{Blk:_ numberforms}', "");
Expect(0, 8591, '\p{^Blk:_ numberforms}', "");
Expect(0, 8591, '\P{Blk:_ numberforms}', "");
Expect(1, 8591, '\P{^Blk:_ numberforms}', "");
Expect(0, 8527, '\p{Blk:_ numberforms}', "");
Expect(1, 8527, '\p{^Blk:_ numberforms}', "");
Expect(1, 8527, '\P{Blk:_ numberforms}', "");
Expect(0, 8527, '\P{^Blk:_ numberforms}', "");
Error('\p{Is_Block=/a/ _number-Forms}');
Error('\P{Is_Block=/a/ _number-Forms}');
Expect(1, 8591, '\p{Is_Block=numberforms}', "");
Expect(0, 8591, '\p{^Is_Block=numberforms}', "");
Expect(0, 8591, '\P{Is_Block=numberforms}', "");
Expect(1, 8591, '\P{^Is_Block=numberforms}', "");
Expect(0, 8527, '\p{Is_Block=numberforms}', "");
Expect(1, 8527, '\p{^Is_Block=numberforms}', "");
Expect(1, 8527, '\P{Is_Block=numberforms}', "");
Expect(0, 8527, '\P{^Is_Block=numberforms}', "");
Expect(1, 8591, '\p{Is_Block=_Number	Forms}', "");
Expect(0, 8591, '\p{^Is_Block=_Number	Forms}', "");
Expect(0, 8591, '\P{Is_Block=_Number	Forms}', "");
Expect(1, 8591, '\P{^Is_Block=_Number	Forms}', "");
Expect(0, 8527, '\p{Is_Block=_Number	Forms}', "");
Expect(1, 8527, '\p{^Is_Block=_Number	Forms}', "");
Expect(1, 8527, '\P{Is_Block=_Number	Forms}', "");
Expect(0, 8527, '\P{^Is_Block=_Number	Forms}', "");
Error('\p{Is_Blk= _Number:=Forms}');
Error('\P{Is_Blk= _Number:=Forms}');
Expect(1, 8591, '\p{Is_Blk=numberforms}', "");
Expect(0, 8591, '\p{^Is_Blk=numberforms}', "");
Expect(0, 8591, '\P{Is_Blk=numberforms}', "");
Expect(1, 8591, '\P{^Is_Blk=numberforms}', "");
Expect(0, 8527, '\p{Is_Blk=numberforms}', "");
Expect(1, 8527, '\p{^Is_Blk=numberforms}', "");
Expect(1, 8527, '\P{Is_Blk=numberforms}', "");
Expect(0, 8527, '\P{^Is_Blk=numberforms}', "");
Expect(1, 8591, '\p{Is_Blk=	 Number	Forms}', "");
Expect(0, 8591, '\p{^Is_Blk=	 Number	Forms}', "");
Expect(0, 8591, '\P{Is_Blk=	 Number	Forms}', "");
Expect(1, 8591, '\P{^Is_Blk=	 Number	Forms}', "");
Expect(0, 8527, '\p{Is_Blk=	 Number	Forms}', "");
Expect(1, 8527, '\p{^Is_Blk=	 Number	Forms}', "");
Expect(1, 8527, '\P{Is_Blk=	 Number	Forms}', "");
Expect(0, 8527, '\P{^Is_Blk=	 Number	Forms}', "");
Error('\p{Block=/a/_	CONTROL	pictures}');
Error('\P{Block=/a/_	CONTROL	pictures}');
Expect(1, 9279, '\p{Block:controlpictures}', "");
Expect(0, 9279, '\p{^Block:controlpictures}', "");
Expect(0, 9279, '\P{Block:controlpictures}', "");
Expect(1, 9279, '\P{^Block:controlpictures}', "");
Expect(0, 9215, '\p{Block:controlpictures}', "");
Expect(1, 9215, '\p{^Block:controlpictures}', "");
Expect(1, 9215, '\P{Block:controlpictures}', "");
Expect(0, 9215, '\P{^Block:controlpictures}', "");
Expect(1, 9279, '\p{Block: 	Control	pictures}', "");
Expect(0, 9279, '\p{^Block: 	Control	pictures}', "");
Expect(0, 9279, '\P{Block: 	Control	pictures}', "");
Expect(1, 9279, '\P{^Block: 	Control	pictures}', "");
Expect(0, 9215, '\p{Block: 	Control	pictures}', "");
Expect(1, 9215, '\p{^Block: 	Control	pictures}', "");
Expect(1, 9215, '\P{Block: 	Control	pictures}', "");
Expect(0, 9215, '\P{^Block: 	Control	pictures}', "");
Error('\p{Blk=:=-Control pictures}');
Error('\P{Blk=:=-Control pictures}');
Expect(1, 9279, '\p{Blk:	controlpictures}', "");
Expect(0, 9279, '\p{^Blk:	controlpictures}', "");
Expect(0, 9279, '\P{Blk:	controlpictures}', "");
Expect(1, 9279, '\P{^Blk:	controlpictures}', "");
Expect(0, 9215, '\p{Blk:	controlpictures}', "");
Expect(1, 9215, '\p{^Blk:	controlpictures}', "");
Expect(1, 9215, '\P{Blk:	controlpictures}', "");
Expect(0, 9215, '\P{^Blk:	controlpictures}', "");
Expect(1, 9279, '\p{Blk=-Control	Pictures}', "");
Expect(0, 9279, '\p{^Blk=-Control	Pictures}', "");
Expect(0, 9279, '\P{Blk=-Control	Pictures}', "");
Expect(1, 9279, '\P{^Blk=-Control	Pictures}', "");
Expect(0, 9215, '\p{Blk=-Control	Pictures}', "");
Expect(1, 9215, '\p{^Blk=-Control	Pictures}', "");
Expect(1, 9215, '\P{Blk=-Control	Pictures}', "");
Expect(0, 9215, '\P{^Blk=-Control	Pictures}', "");
Error('\p{Is_Block=	/a/Control Pictures}');
Error('\P{Is_Block=	/a/Control Pictures}');
Expect(1, 9279, '\p{Is_Block=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Block=controlpictures}', "");
Expect(0, 9279, '\P{Is_Block=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Block=controlpictures}', "");
Expect(0, 9215, '\p{Is_Block=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Block=controlpictures}', "");
Expect(1, 9215, '\P{Is_Block=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Block=controlpictures}', "");
Expect(1, 9279, '\p{Is_Block= 	control	Pictures}', "");
Expect(0, 9279, '\p{^Is_Block= 	control	Pictures}', "");
Expect(0, 9279, '\P{Is_Block= 	control	Pictures}', "");
Expect(1, 9279, '\P{^Is_Block= 	control	Pictures}', "");
Expect(0, 9215, '\p{Is_Block= 	control	Pictures}', "");
Expect(1, 9215, '\p{^Is_Block= 	control	Pictures}', "");
Expect(1, 9215, '\P{Is_Block= 	control	Pictures}', "");
Expect(0, 9215, '\P{^Is_Block= 	control	Pictures}', "");
Error('\p{Is_Blk=/a/_control pictures}');
Error('\P{Is_Blk=/a/_control pictures}');
Expect(1, 9279, '\p{Is_Blk=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Blk=controlpictures}', "");
Expect(0, 9279, '\P{Is_Blk=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Blk=controlpictures}', "");
Expect(0, 9215, '\p{Is_Blk=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Blk=controlpictures}', "");
Expect(1, 9215, '\P{Is_Blk=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Blk=controlpictures}', "");
Expect(1, 9279, '\p{Is_Blk=-Controlpictures}', "");
Expect(0, 9279, '\p{^Is_Blk=-Controlpictures}', "");
Expect(0, 9279, '\P{Is_Blk=-Controlpictures}', "");
Expect(1, 9279, '\P{^Is_Blk=-Controlpictures}', "");
Expect(0, 9215, '\p{Is_Blk=-Controlpictures}', "");
Expect(1, 9215, '\p{^Is_Blk=-Controlpictures}', "");
Expect(1, 9215, '\P{Is_Blk=-Controlpictures}', "");
Expect(0, 9215, '\P{^Is_Blk=-Controlpictures}', "");
Error('\p{Block:     High Private:=Use Surrogates}');
Error('\P{Block:     High Private:=Use Surrogates}');
Expect(0, 1, '\p{Block:highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Block:highprivateusesurrogates}', "");
Expect(1, 1, '\P{Block:highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Block:highprivateusesurrogates}', "");
Expect(0, 1, '\p{Block=	 high_Private Use	SURROGATES}', "");
Expect(1, 1, '\p{^Block=	 high_Private Use	SURROGATES}', "");
Expect(1, 1, '\P{Block=	 high_Private Use	SURROGATES}', "");
Expect(0, 1, '\P{^Block=	 high_Private Use	SURROGATES}', "");
Error('\p{Blk=-HIGH-Private:=use Surrogates}');
Error('\P{Blk=-HIGH-Private:=use Surrogates}');
Expect(0, 1, '\p{Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Blk= _HIGHPrivateUse	SURROGATES}', "");
Expect(1, 1, '\p{^Blk= _HIGHPrivateUse	SURROGATES}', "");
Expect(1, 1, '\P{Blk= _HIGHPrivateUse	SURROGATES}', "");
Expect(0, 1, '\P{^Blk= _HIGHPrivateUse	SURROGATES}', "");
Error('\p{Is_Block=	:=High PRIVATE-USESurrogates}');
Error('\P{Is_Block=	:=High PRIVATE-USESurrogates}');
Expect(0, 1, '\p{Is_Block=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Block=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Block=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Block=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Block=	high	Private	Use_SURROGATES}', "");
Expect(1, 1, '\p{^Is_Block=	high	Private	Use_SURROGATES}', "");
Expect(1, 1, '\P{Is_Block=	high	Private	Use_SURROGATES}', "");
Expect(0, 1, '\P{^Is_Block=	high	Private	Use_SURROGATES}', "");
Error('\p{Is_Blk=_/a/High-private_use_surrogates}');
Error('\P{Is_Blk=_/a/High-private_use_surrogates}');
Expect(0, 1, '\p{Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Blk=-	HIGH-private_USE_Surrogates}', "");
Expect(1, 1, '\p{^Is_Blk=-	HIGH-private_USE_Surrogates}', "");
Expect(1, 1, '\P{Is_Blk=-	HIGH-private_USE_Surrogates}', "");
Expect(0, 1, '\P{^Is_Blk=-	HIGH-private_USE_Surrogates}', "");
Error('\p{Block:   	 Ugaritic:=}');
Error('\P{Block:   	 Ugaritic:=}');
Expect(1, 66463, '\p{Block=ugaritic}', "");
Expect(0, 66463, '\p{^Block=ugaritic}', "");
Expect(0, 66463, '\P{Block=ugaritic}', "");
Expect(1, 66463, '\P{^Block=ugaritic}', "");
Expect(0, 66431, '\p{Block=ugaritic}', "");
Expect(1, 66431, '\p{^Block=ugaritic}', "");
Expect(1, 66431, '\P{Block=ugaritic}', "");
Expect(0, 66431, '\P{^Block=ugaritic}', "");
Expect(1, 66463, '\p{Block=	_Ugaritic}', "");
Expect(0, 66463, '\p{^Block=	_Ugaritic}', "");
Expect(0, 66463, '\P{Block=	_Ugaritic}', "");
Expect(1, 66463, '\P{^Block=	_Ugaritic}', "");
Expect(0, 66431, '\p{Block=	_Ugaritic}', "");
Expect(1, 66431, '\p{^Block=	_Ugaritic}', "");
Expect(1, 66431, '\P{Block=	_Ugaritic}', "");
Expect(0, 66431, '\P{^Block=	_Ugaritic}', "");
Error('\p{Blk=/a/__UGARITIC}');
Error('\P{Blk=/a/__UGARITIC}');
Expect(1, 66463, '\p{Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Blk=ugaritic}', "");
Expect(0, 66463, '\P{Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Blk=ugaritic}', "");
Expect(0, 66431, '\p{Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Blk=ugaritic}', "");
Expect(1, 66431, '\P{Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Blk=ugaritic}', "");
Expect(1, 66463, '\p{Blk=		Ugaritic}', "");
Expect(0, 66463, '\p{^Blk=		Ugaritic}', "");
Expect(0, 66463, '\P{Blk=		Ugaritic}', "");
Expect(1, 66463, '\P{^Blk=		Ugaritic}', "");
Expect(0, 66431, '\p{Blk=		Ugaritic}', "");
Expect(1, 66431, '\p{^Blk=		Ugaritic}', "");
Expect(1, 66431, '\P{Blk=		Ugaritic}', "");
Expect(0, 66431, '\P{^Blk=		Ugaritic}', "");
Error('\p{Is_Block=--Ugaritic/a/}');
Error('\P{Is_Block=--Ugaritic/a/}');
Expect(1, 66463, '\p{Is_Block=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Block=ugaritic}', "");
Expect(0, 66463, '\P{Is_Block=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Block=ugaritic}', "");
Expect(0, 66431, '\p{Is_Block=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Block=ugaritic}', "");
Expect(1, 66431, '\P{Is_Block=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Block=ugaritic}', "");
Expect(1, 66463, '\p{Is_Block:     ugaritic}', "");
Expect(0, 66463, '\p{^Is_Block:     ugaritic}', "");
Expect(0, 66463, '\P{Is_Block:     ugaritic}', "");
Expect(1, 66463, '\P{^Is_Block:     ugaritic}', "");
Expect(0, 66431, '\p{Is_Block:     ugaritic}', "");
Expect(1, 66431, '\p{^Is_Block:     ugaritic}', "");
Expect(1, 66431, '\P{Is_Block:     ugaritic}', "");
Expect(0, 66431, '\P{^Is_Block:     ugaritic}', "");
Error('\p{Is_Blk=		Ugaritic/a/}');
Error('\P{Is_Blk=		Ugaritic/a/}');
Expect(1, 66463, '\p{Is_Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Blk=ugaritic}', "");
Expect(0, 66463, '\P{Is_Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Blk=ugaritic}', "");
Expect(0, 66431, '\p{Is_Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Blk=ugaritic}', "");
Expect(1, 66431, '\P{Is_Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Blk=ugaritic}', "");
Expect(1, 66463, '\p{Is_Blk=-_ugaritic}', "");
Expect(0, 66463, '\p{^Is_Blk=-_ugaritic}', "");
Expect(0, 66463, '\P{Is_Blk=-_ugaritic}', "");
Expect(1, 66463, '\P{^Is_Blk=-_ugaritic}', "");
Expect(0, 66431, '\p{Is_Blk=-_ugaritic}', "");
Expect(1, 66431, '\p{^Is_Blk=-_ugaritic}', "");
Expect(1, 66431, '\P{Is_Blk=-_ugaritic}', "");
Expect(0, 66431, '\P{^Is_Blk=-_ugaritic}', "");
Error('\p{Block=_/a/ARMENIAN}');
Error('\P{Block=_/a/ARMENIAN}');
Expect(1, 1423, '\p{Block=armenian}', "");
Expect(0, 1423, '\p{^Block=armenian}', "");
Expect(0, 1423, '\P{Block=armenian}', "");
Expect(1, 1423, '\P{^Block=armenian}', "");
Expect(0, 1327, '\p{Block=armenian}', "");
Expect(1, 1327, '\p{^Block=armenian}', "");
Expect(1, 1327, '\P{Block=armenian}', "");
Expect(0, 1327, '\P{^Block=armenian}', "");
Expect(1, 1423, '\p{Block=Armenian}', "");
Expect(0, 1423, '\p{^Block=Armenian}', "");
Expect(0, 1423, '\P{Block=Armenian}', "");
Expect(1, 1423, '\P{^Block=Armenian}', "");
Expect(0, 1327, '\p{Block=Armenian}', "");
Expect(1, 1327, '\p{^Block=Armenian}', "");
Expect(1, 1327, '\P{Block=Armenian}', "");
Expect(0, 1327, '\P{^Block=Armenian}', "");
Error('\p{Blk=:=-	ARMENIAN}');
Error('\P{Blk=:=-	ARMENIAN}');
Expect(1, 1423, '\p{Blk=armenian}', "");
Expect(0, 1423, '\p{^Blk=armenian}', "");
Expect(0, 1423, '\P{Blk=armenian}', "");
Expect(1, 1423, '\P{^Blk=armenian}', "");
Expect(0, 1327, '\p{Blk=armenian}', "");
Expect(1, 1327, '\p{^Blk=armenian}', "");
Expect(1, 1327, '\P{Blk=armenian}', "");
Expect(0, 1327, '\P{^Blk=armenian}', "");
Expect(1, 1423, '\p{Blk:_ Armenian}', "");
Expect(0, 1423, '\p{^Blk:_ Armenian}', "");
Expect(0, 1423, '\P{Blk:_ Armenian}', "");
Expect(1, 1423, '\P{^Blk:_ Armenian}', "");
Expect(0, 1327, '\p{Blk:_ Armenian}', "");
Expect(1, 1327, '\p{^Blk:_ Armenian}', "");
Expect(1, 1327, '\P{Blk:_ Armenian}', "");
Expect(0, 1327, '\P{^Blk:_ Armenian}', "");
Error('\p{Is_Block=:= ARMENIAN}');
Error('\P{Is_Block=:= ARMENIAN}');
Expect(1, 1423, '\p{Is_Block=armenian}', "");
Expect(0, 1423, '\p{^Is_Block=armenian}', "");
Expect(0, 1423, '\P{Is_Block=armenian}', "");
Expect(1, 1423, '\P{^Is_Block=armenian}', "");
Expect(0, 1327, '\p{Is_Block=armenian}', "");
Expect(1, 1327, '\p{^Is_Block=armenian}', "");
Expect(1, 1327, '\P{Is_Block=armenian}', "");
Expect(0, 1327, '\P{^Is_Block=armenian}', "");
Expect(1, 1423, '\p{Is_Block=_-ARMENIAN}', "");
Expect(0, 1423, '\p{^Is_Block=_-ARMENIAN}', "");
Expect(0, 1423, '\P{Is_Block=_-ARMENIAN}', "");
Expect(1, 1423, '\P{^Is_Block=_-ARMENIAN}', "");
Expect(0, 1327, '\p{Is_Block=_-ARMENIAN}', "");
Expect(1, 1327, '\p{^Is_Block=_-ARMENIAN}', "");
Expect(1, 1327, '\P{Is_Block=_-ARMENIAN}', "");
Expect(0, 1327, '\P{^Is_Block=_-ARMENIAN}', "");
Error('\p{Is_Blk=-:=Armenian}');
Error('\P{Is_Blk=-:=Armenian}');
Expect(1, 1423, '\p{Is_Blk=armenian}', "");
Expect(0, 1423, '\p{^Is_Blk=armenian}', "");
Expect(0, 1423, '\P{Is_Blk=armenian}', "");
Expect(1, 1423, '\P{^Is_Blk=armenian}', "");
Expect(0, 1327, '\p{Is_Blk=armenian}', "");
Expect(1, 1327, '\p{^Is_Blk=armenian}', "");
Expect(1, 1327, '\P{Is_Blk=armenian}', "");
Expect(0, 1327, '\P{^Is_Blk=armenian}', "");
Expect(1, 1423, '\p{Is_Blk=_Armenian}', "");
Expect(0, 1423, '\p{^Is_Blk=_Armenian}', "");
Expect(0, 1423, '\P{Is_Blk=_Armenian}', "");
Expect(1, 1423, '\P{^Is_Blk=_Armenian}', "");
Expect(0, 1327, '\p{Is_Blk=_Armenian}', "");
Expect(1, 1327, '\p{^Is_Blk=_Armenian}', "");
Expect(1, 1327, '\P{Is_Blk=_Armenian}', "");
Expect(0, 1327, '\P{^Is_Blk=_Armenian}', "");
Error('\p{Block=PRIVATE:=Use_area}');
Error('\P{Block=PRIVATE:=Use_area}');
Expect(1, 63743, '\p{Block=privateusearea}', "");
Expect(0, 63743, '\p{^Block=privateusearea}', "");
Expect(0, 63743, '\P{Block=privateusearea}', "");
Expect(1, 63743, '\P{^Block=privateusearea}', "");
Expect(0, 1, '\p{Block=privateusearea}', "");
Expect(1, 1, '\p{^Block=privateusearea}', "");
Expect(1, 1, '\P{Block=privateusearea}', "");
Expect(0, 1, '\P{^Block=privateusearea}', "");
Expect(1, 63743, '\p{Block=	-PRIVATE_USEarea}', "");
Expect(0, 63743, '\p{^Block=	-PRIVATE_USEarea}', "");
Expect(0, 63743, '\P{Block=	-PRIVATE_USEarea}', "");
Expect(1, 63743, '\P{^Block=	-PRIVATE_USEarea}', "");
Expect(0, 1, '\p{Block=	-PRIVATE_USEarea}', "");
Expect(1, 1, '\p{^Block=	-PRIVATE_USEarea}', "");
Expect(1, 1, '\P{Block=	-PRIVATE_USEarea}', "");
Expect(0, 1, '\P{^Block=	-PRIVATE_USEarea}', "");
Error('\p{Blk=:=--Private USE}');
Error('\P{Blk=:=--Private USE}');
Expect(1, 63743, '\p{Blk=privateuse}', "");
Expect(0, 63743, '\p{^Blk=privateuse}', "");
Expect(0, 63743, '\P{Blk=privateuse}', "");
Expect(1, 63743, '\P{^Blk=privateuse}', "");
Expect(0, 1, '\p{Blk=privateuse}', "");
Expect(1, 1, '\p{^Blk=privateuse}', "");
Expect(1, 1, '\P{Blk=privateuse}', "");
Expect(0, 1, '\P{^Blk=privateuse}', "");
Expect(1, 63743, '\p{Blk=-Private-use}', "");
Expect(0, 63743, '\p{^Blk=-Private-use}', "");
Expect(0, 63743, '\P{Blk=-Private-use}', "");
Expect(1, 63743, '\P{^Blk=-Private-use}', "");
Expect(0, 1, '\p{Blk=-Private-use}', "");
Expect(1, 1, '\p{^Blk=-Private-use}', "");
Expect(1, 1, '\P{Blk=-Private-use}', "");
Expect(0, 1, '\P{^Blk=-Private-use}', "");
Error('\p{Is_Block=  PRIVATE/a/use-Area}');
Error('\P{Is_Block=  PRIVATE/a/use-Area}');
Expect(1, 63743, '\p{Is_Block=privateusearea}', "");
Expect(0, 63743, '\p{^Is_Block=privateusearea}', "");
Expect(0, 63743, '\P{Is_Block=privateusearea}', "");
Expect(1, 63743, '\P{^Is_Block=privateusearea}', "");
Expect(0, 1, '\p{Is_Block=privateusearea}', "");
Expect(1, 1, '\p{^Is_Block=privateusearea}', "");
Expect(1, 1, '\P{Is_Block=privateusearea}', "");
Expect(0, 1, '\P{^Is_Block=privateusearea}', "");
Expect(1, 63743, '\p{Is_Block=-_PRIVATE UseArea}', "");
Expect(0, 63743, '\p{^Is_Block=-_PRIVATE UseArea}', "");
Expect(0, 63743, '\P{Is_Block=-_PRIVATE UseArea}', "");
Expect(1, 63743, '\P{^Is_Block=-_PRIVATE UseArea}', "");
Expect(0, 1, '\p{Is_Block=-_PRIVATE UseArea}', "");
Expect(1, 1, '\p{^Is_Block=-_PRIVATE UseArea}', "");
Expect(1, 1, '\P{Is_Block=-_PRIVATE UseArea}', "");
Expect(0, 1, '\P{^Is_Block=-_PRIVATE UseArea}', "");
Error('\p{Is_Blk=:= PRIVATEUse}');
Error('\P{Is_Blk=:= PRIVATEUse}');
Expect(1, 63743, '\p{Is_Blk=privateuse}', "");
Expect(0, 63743, '\p{^Is_Blk=privateuse}', "");
Expect(0, 63743, '\P{Is_Blk=privateuse}', "");
Expect(1, 63743, '\P{^Is_Blk=privateuse}', "");
Expect(0, 1, '\p{Is_Blk=privateuse}', "");
Expect(1, 1, '\p{^Is_Blk=privateuse}', "");
Expect(1, 1, '\P{Is_Blk=privateuse}', "");
Expect(0, 1, '\P{^Is_Blk=privateuse}', "");
Expect(1, 63743, '\p{Is_Blk=_PRIVATE-use}', "");
Expect(0, 63743, '\p{^Is_Blk=_PRIVATE-use}', "");
Expect(0, 63743, '\P{Is_Blk=_PRIVATE-use}', "");
Expect(1, 63743, '\P{^Is_Blk=_PRIVATE-use}', "");
Expect(0, 1, '\p{Is_Blk=_PRIVATE-use}', "");
Expect(1, 1, '\p{^Is_Blk=_PRIVATE-use}', "");
Expect(1, 1, '\P{Is_Blk=_PRIVATE-use}', "");
Expect(0, 1, '\P{^Is_Blk=_PRIVATE-use}', "");
Error('\p{Block=_-Syriac:=}');
Error('\P{Block=_-Syriac:=}');
Expect(1, 1871, '\p{Block=syriac}', "");
Expect(0, 1871, '\p{^Block=syriac}', "");
Expect(0, 1871, '\P{Block=syriac}', "");
Expect(1, 1871, '\P{^Block=syriac}', "");
Expect(0, 1791, '\p{Block=syriac}', "");
Expect(1, 1791, '\p{^Block=syriac}', "");
Expect(1, 1791, '\P{Block=syriac}', "");
Expect(0, 1791, '\P{^Block=syriac}', "");
Expect(1, 1871, '\p{Block=	Syriac}', "");
Expect(0, 1871, '\p{^Block=	Syriac}', "");
Expect(0, 1871, '\P{Block=	Syriac}', "");
Expect(1, 1871, '\P{^Block=	Syriac}', "");
Expect(0, 1791, '\p{Block=	Syriac}', "");
Expect(1, 1791, '\p{^Block=	Syriac}', "");
Expect(1, 1791, '\P{Block=	Syriac}', "");
Expect(0, 1791, '\P{^Block=	Syriac}', "");
Error('\p{Blk=/a/	SYRIAC}');
Error('\P{Blk=/a/	SYRIAC}');
Expect(1, 1871, '\p{Blk=syriac}', "");
Expect(0, 1871, '\p{^Blk=syriac}', "");
Expect(0, 1871, '\P{Blk=syriac}', "");
Expect(1, 1871, '\P{^Blk=syriac}', "");
Expect(0, 1791, '\p{Blk=syriac}', "");
Expect(1, 1791, '\p{^Blk=syriac}', "");
Expect(1, 1791, '\P{Blk=syriac}', "");
Expect(0, 1791, '\P{^Blk=syriac}', "");
Expect(1, 1871, '\p{Blk=__Syriac}', "");
Expect(0, 1871, '\p{^Blk=__Syriac}', "");
Expect(0, 1871, '\P{Blk=__Syriac}', "");
Expect(1, 1871, '\P{^Blk=__Syriac}', "");
Expect(0, 1791, '\p{Blk=__Syriac}', "");
Expect(1, 1791, '\p{^Blk=__Syriac}', "");
Expect(1, 1791, '\P{Blk=__Syriac}', "");
Expect(0, 1791, '\P{^Blk=__Syriac}', "");
Error('\p{Is_Block=-Syriac/a/}');
Error('\P{Is_Block=-Syriac/a/}');
Expect(1, 1871, '\p{Is_Block: syriac}', "");
Expect(0, 1871, '\p{^Is_Block: syriac}', "");
Expect(0, 1871, '\P{Is_Block: syriac}', "");
Expect(1, 1871, '\P{^Is_Block: syriac}', "");
Expect(0, 1791, '\p{Is_Block: syriac}', "");
Expect(1, 1791, '\p{^Is_Block: syriac}', "");
Expect(1, 1791, '\P{Is_Block: syriac}', "");
Expect(0, 1791, '\P{^Is_Block: syriac}', "");
Expect(1, 1871, '\p{Is_Block=	Syriac}', "");
Expect(0, 1871, '\p{^Is_Block=	Syriac}', "");
Expect(0, 1871, '\P{Is_Block=	Syriac}', "");
Expect(1, 1871, '\P{^Is_Block=	Syriac}', "");
Expect(0, 1791, '\p{Is_Block=	Syriac}', "");
Expect(1, 1791, '\p{^Is_Block=	Syriac}', "");
Expect(1, 1791, '\P{Is_Block=	Syriac}', "");
Expect(0, 1791, '\P{^Is_Block=	Syriac}', "");
Error('\p{Is_Blk=_SYRIAC/a/}');
Error('\P{Is_Blk=_SYRIAC/a/}');
Expect(1, 1871, '\p{Is_Blk=syriac}', "");
Expect(0, 1871, '\p{^Is_Blk=syriac}', "");
Expect(0, 1871, '\P{Is_Blk=syriac}', "");
Expect(1, 1871, '\P{^Is_Blk=syriac}', "");
Expect(0, 1791, '\p{Is_Blk=syriac}', "");
Expect(1, 1791, '\p{^Is_Blk=syriac}', "");
Expect(1, 1791, '\P{Is_Blk=syriac}', "");
Expect(0, 1791, '\P{^Is_Blk=syriac}', "");
Expect(1, 1871, '\p{Is_Blk=	 Syriac}', "");
Expect(0, 1871, '\p{^Is_Blk=	 Syriac}', "");
Expect(0, 1871, '\P{Is_Blk=	 Syriac}', "");
Expect(1, 1871, '\P{^Is_Blk=	 Syriac}', "");
Expect(0, 1791, '\p{Is_Blk=	 Syriac}', "");
Expect(1, 1791, '\p{^Is_Blk=	 Syriac}', "");
Expect(1, 1791, '\P{Is_Blk=	 Syriac}', "");
Expect(0, 1791, '\P{^Is_Blk=	 Syriac}', "");
Error('\p{Block:	_:=ancient-Greek Musical	Notation}');
Error('\P{Block:	_:=ancient-Greek Musical	Notation}');
Expect(1, 119375, '\p{Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(0, 119375, '\p{^Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(0, 119375, '\P{Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(1, 119375, '\P{^Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(0, 119295, '\p{Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(1, 119295, '\p{^Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(1, 119295, '\P{Block= 	Ancient-Greek_Musical	Notation}', "");
Expect(0, 119295, '\P{^Block= 	Ancient-Greek_Musical	Notation}', "");
Error('\p{Blk=  Ancient/a/Greek-Musical-Notation}');
Error('\P{Blk=  Ancient/a/Greek-Musical-Notation}');
Expect(1, 119375, '\p{Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(0, 119375, '\p{^Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(0, 119375, '\P{Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(1, 119375, '\P{^Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(0, 119295, '\p{Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(1, 119295, '\p{^Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(1, 119295, '\P{Blk=_	ancientgreek	MUSICAL-Notation}', "");
Expect(0, 119295, '\P{^Blk=_	ancientgreek	MUSICAL-Notation}', "");
Error('\p{Is_Block= ANCIENT/a/GREEK-Musical notation}');
Error('\P{Is_Block= ANCIENT/a/GREEK-Musical notation}');
Expect(1, 119375, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(0, 119375, '\p{^Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(0, 119375, '\P{Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(1, 119375, '\P{^Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(0, 119295, '\p{Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(1, 119295, '\p{^Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(1, 119295, '\P{Is_Block=  Ancient	Greek_Musical_Notation}', "");
Expect(0, 119295, '\P{^Is_Block=  Ancient	Greek_Musical_Notation}', "");
Error('\p{Is_Blk= 	Ancient:=Greek	MUSICAL-NOTATION}');
Error('\P{Is_Blk= 	Ancient:=Greek	MUSICAL-NOTATION}');
Expect(1, 119375, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(0, 119375, '\p{^Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(0, 119375, '\P{Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(1, 119375, '\P{^Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(0, 119295, '\p{Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(1, 119295, '\p{^Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(1, 119295, '\P{Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Expect(0, 119295, '\P{^Is_Blk=_ANCIENT-greek_musical	Notation}', "");
Error('\p{Block= :=Phags_Pa}');
Error('\P{Block= :=Phags_Pa}');
Expect(1, 43135, '\p{Block=phagspa}', "");
Expect(0, 43135, '\p{^Block=phagspa}', "");
Expect(0, 43135, '\P{Block=phagspa}', "");
Expect(1, 43135, '\P{^Block=phagspa}', "");
Expect(0, 43071, '\p{Block=phagspa}', "");
Expect(1, 43071, '\p{^Block=phagspa}', "");
Expect(1, 43071, '\P{Block=phagspa}', "");
Expect(0, 43071, '\P{^Block=phagspa}', "");
Expect(1, 43135, '\p{Block=__Phagspa}', "");
Expect(0, 43135, '\p{^Block=__Phagspa}', "");
Expect(0, 43135, '\P{Block=__Phagspa}', "");
Expect(1, 43135, '\P{^Block=__Phagspa}', "");
Expect(0, 43071, '\p{Block=__Phagspa}', "");
Expect(1, 43071, '\p{^Block=__Phagspa}', "");
Expect(1, 43071, '\P{Block=__Phagspa}', "");
Expect(0, 43071, '\P{^Block=__Phagspa}', "");
Error('\p{Blk= 	Phagspa:=}');
Error('\P{Blk= 	Phagspa:=}');
Expect(1, 43135, '\p{Blk=phagspa}', "");
Expect(0, 43135, '\p{^Blk=phagspa}', "");
Expect(0, 43135, '\P{Blk=phagspa}', "");
Expect(1, 43135, '\P{^Blk=phagspa}', "");
Expect(0, 43071, '\p{Blk=phagspa}', "");
Expect(1, 43071, '\p{^Blk=phagspa}', "");
Expect(1, 43071, '\P{Blk=phagspa}', "");
Expect(0, 43071, '\P{^Blk=phagspa}', "");
Expect(1, 43135, '\p{Blk=	Phags	Pa}', "");
Expect(0, 43135, '\p{^Blk=	Phags	Pa}', "");
Expect(0, 43135, '\P{Blk=	Phags	Pa}', "");
Expect(1, 43135, '\P{^Blk=	Phags	Pa}', "");
Expect(0, 43071, '\p{Blk=	Phags	Pa}', "");
Expect(1, 43071, '\p{^Blk=	Phags	Pa}', "");
Expect(1, 43071, '\P{Blk=	Phags	Pa}', "");
Expect(0, 43071, '\P{^Blk=	Phags	Pa}', "");
Error('\p{Is_Block=/a/phags	Pa}');
Error('\P{Is_Block=/a/phags	Pa}');
Expect(1, 43135, '\p{Is_Block=phagspa}', "");
Expect(0, 43135, '\p{^Is_Block=phagspa}', "");
Expect(0, 43135, '\P{Is_Block=phagspa}', "");
Expect(1, 43135, '\P{^Is_Block=phagspa}', "");
Expect(0, 43071, '\p{Is_Block=phagspa}', "");
Expect(1, 43071, '\p{^Is_Block=phagspa}', "");
Expect(1, 43071, '\P{Is_Block=phagspa}', "");
Expect(0, 43071, '\P{^Is_Block=phagspa}', "");
Expect(1, 43135, '\p{Is_Block=	_PHAGS	Pa}', "");
Expect(0, 43135, '\p{^Is_Block=	_PHAGS	Pa}', "");
Expect(0, 43135, '\P{Is_Block=	_PHAGS	Pa}', "");
Expect(1, 43135, '\P{^Is_Block=	_PHAGS	Pa}', "");
Expect(0, 43071, '\p{Is_Block=	_PHAGS	Pa}', "");
Expect(1, 43071, '\p{^Is_Block=	_PHAGS	Pa}', "");
Expect(1, 43071, '\P{Is_Block=	_PHAGS	Pa}', "");
Expect(0, 43071, '\P{^Is_Block=	_PHAGS	Pa}', "");
Error('\p{Is_Blk=_ Phags	pa/a/}');
Error('\P{Is_Blk=_ Phags	pa/a/}');
Expect(1, 43135, '\p{Is_Blk=phagspa}', "");
Expect(0, 43135, '\p{^Is_Blk=phagspa}', "");
Expect(0, 43135, '\P{Is_Blk=phagspa}', "");
Expect(1, 43135, '\P{^Is_Blk=phagspa}', "");
Expect(0, 43071, '\p{Is_Blk=phagspa}', "");
Expect(1, 43071, '\p{^Is_Blk=phagspa}', "");
Expect(1, 43071, '\P{Is_Blk=phagspa}', "");
Expect(0, 43071, '\P{^Is_Blk=phagspa}', "");
Expect(1, 43135, '\p{Is_Blk=_ phags pa}', "");
Expect(0, 43135, '\p{^Is_Blk=_ phags pa}', "");
Expect(0, 43135, '\P{Is_Blk=_ phags pa}', "");
Expect(1, 43135, '\P{^Is_Blk=_ phags pa}', "");
Expect(0, 43071, '\p{Is_Blk=_ phags pa}', "");
Expect(1, 43071, '\p{^Is_Blk=_ phags pa}', "");
Expect(1, 43071, '\P{Is_Blk=_ phags pa}', "");
Expect(0, 43071, '\P{^Is_Blk=_ phags pa}', "");
Error('\p{Block=_:=CJKCompatibility-Ideographs}');
Error('\P{Block=_:=CJKCompatibility-Ideographs}');
Expect(1, 64255, '\p{Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(0, 64255, '\p{^Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(0, 64255, '\P{Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(1, 64255, '\P{^Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(0, 63743, '\p{Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(1, 63743, '\p{^Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(1, 63743, '\P{Block:_CJK_compatibility-IDEOGRAPHS}', "");
Expect(0, 63743, '\P{^Block:_CJK_compatibility-IDEOGRAPHS}', "");
Error('\p{Blk=_ CJK/a/Compatibility ideographs}');
Error('\P{Blk=_ CJK/a/Compatibility ideographs}');
Expect(1, 64255, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(0, 64255, '\p{^Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(0, 64255, '\P{Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(1, 64255, '\P{^Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(0, 63743, '\p{Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(1, 63743, '\p{^Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(1, 63743, '\P{Blk=--CJKCOMPATIBILITYIdeographs}', "");
Expect(0, 63743, '\P{^Blk=--CJKCOMPATIBILITYIdeographs}', "");
Error('\p{Is_Block=:=_ cjk_COMPATIBILITY	Ideographs}');
Error('\P{Is_Block=:=_ cjk_COMPATIBILITY	Ideographs}');
Expect(1, 64255, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Block:	CJK Compatibility Ideographs}', "");
Expect(0, 64255, '\p{^Is_Block:	CJK Compatibility Ideographs}', "");
Expect(0, 64255, '\P{Is_Block:	CJK Compatibility Ideographs}', "");
Expect(1, 64255, '\P{^Is_Block:	CJK Compatibility Ideographs}', "");
Expect(0, 63743, '\p{Is_Block:	CJK Compatibility Ideographs}', "");
Expect(1, 63743, '\p{^Is_Block:	CJK Compatibility Ideographs}', "");
Expect(1, 63743, '\P{Is_Block:	CJK Compatibility Ideographs}', "");
Expect(0, 63743, '\P{^Is_Block:	CJK Compatibility Ideographs}', "");
Error('\p{Is_Blk= cjk_COMPATIBILITY ideographs:=}');
Error('\P{Is_Blk= cjk_COMPATIBILITY ideographs:=}');
Expect(1, 64255, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(0, 64255, '\P{Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(0, 63743, '\p{Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(1, 63743, '\P{Is_Blk=	 CJK-compatibility Ideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=	 CJK-compatibility Ideographs}', "");
Error('\p{Block=:=_-Thaana}');
Error('\P{Block=:=_-Thaana}');
Expect(1, 1983, '\p{Block=thaana}', "");
Expect(0, 1983, '\p{^Block=thaana}', "");
Expect(0, 1983, '\P{Block=thaana}', "");
Expect(1, 1983, '\P{^Block=thaana}', "");
Expect(0, 1919, '\p{Block=thaana}', "");
Expect(1, 1919, '\p{^Block=thaana}', "");
Expect(1, 1919, '\P{Block=thaana}', "");
Expect(0, 1919, '\P{^Block=thaana}', "");
Expect(1, 1983, '\p{Block=_	Thaana}', "");
Expect(0, 1983, '\p{^Block=_	Thaana}', "");
Expect(0, 1983, '\P{Block=_	Thaana}', "");
Expect(1, 1983, '\P{^Block=_	Thaana}', "");
Expect(0, 1919, '\p{Block=_	Thaana}', "");
Expect(1, 1919, '\p{^Block=_	Thaana}', "");
Expect(1, 1919, '\P{Block=_	Thaana}', "");
Expect(0, 1919, '\P{^Block=_	Thaana}', "");
Error('\p{Blk= :=Thaana}');
Error('\P{Blk= :=Thaana}');
Expect(1, 1983, '\p{Blk=thaana}', "");
Expect(0, 1983, '\p{^Blk=thaana}', "");
Expect(0, 1983, '\P{Blk=thaana}', "");
Expect(1, 1983, '\P{^Blk=thaana}', "");
Expect(0, 1919, '\p{Blk=thaana}', "");
Expect(1, 1919, '\p{^Blk=thaana}', "");
Expect(1, 1919, '\P{Blk=thaana}', "");
Expect(0, 1919, '\P{^Blk=thaana}', "");
Expect(1, 1983, '\p{Blk= _thaana}', "");
Expect(0, 1983, '\p{^Blk= _thaana}', "");
Expect(0, 1983, '\P{Blk= _thaana}', "");
Expect(1, 1983, '\P{^Blk= _thaana}', "");
Expect(0, 1919, '\p{Blk= _thaana}', "");
Expect(1, 1919, '\p{^Blk= _thaana}', "");
Expect(1, 1919, '\P{Blk= _thaana}', "");
Expect(0, 1919, '\P{^Blk= _thaana}', "");
Error('\p{Is_Block=/a/THAANA}');
Error('\P{Is_Block=/a/THAANA}');
Expect(1, 1983, '\p{Is_Block=thaana}', "");
Expect(0, 1983, '\p{^Is_Block=thaana}', "");
Expect(0, 1983, '\P{Is_Block=thaana}', "");
Expect(1, 1983, '\P{^Is_Block=thaana}', "");
Expect(0, 1919, '\p{Is_Block=thaana}', "");
Expect(1, 1919, '\p{^Is_Block=thaana}', "");
Expect(1, 1919, '\P{Is_Block=thaana}', "");
Expect(0, 1919, '\P{^Is_Block=thaana}', "");
Expect(1, 1983, '\p{Is_Block=	Thaana}', "");
Expect(0, 1983, '\p{^Is_Block=	Thaana}', "");
Expect(0, 1983, '\P{Is_Block=	Thaana}', "");
Expect(1, 1983, '\P{^Is_Block=	Thaana}', "");
Expect(0, 1919, '\p{Is_Block=	Thaana}', "");
Expect(1, 1919, '\p{^Is_Block=	Thaana}', "");
Expect(1, 1919, '\P{Is_Block=	Thaana}', "");
Expect(0, 1919, '\P{^Is_Block=	Thaana}', "");
Error('\p{Is_Blk=_:=Thaana}');
Error('\P{Is_Blk=_:=Thaana}');
Expect(1, 1983, '\p{Is_Blk=thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=thaana}', "");
Expect(0, 1983, '\P{Is_Blk=thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=thaana}', "");
Expect(0, 1919, '\p{Is_Blk=thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=thaana}', "");
Expect(1, 1919, '\P{Is_Blk=thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=thaana}', "");
Expect(1, 1983, '\p{Is_Blk=_-Thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=_-Thaana}', "");
Expect(0, 1983, '\P{Is_Blk=_-Thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=_-Thaana}', "");
Expect(0, 1919, '\p{Is_Blk=_-Thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=_-Thaana}', "");
Expect(1, 1919, '\P{Is_Blk=_-Thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=_-Thaana}', "");
Error('\p{Block=/a/-Enclosed-alphanumeric-Supplement}');
Error('\P{Block=/a/-Enclosed-alphanumeric-Supplement}');
Expect(1, 127487, '\p{Block:   enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Block:   enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Block:   enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Block:   enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Block:   enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Block:   enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Block:   enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Block:   enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(0, 127487, '\p{^Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(0, 127487, '\P{Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(1, 127487, '\P{^Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(0, 127231, '\p{Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(1, 127231, '\p{^Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(1, 127231, '\P{Block=- ENCLOSED-alphanumeric supplement}', "");
Expect(0, 127231, '\P{^Block=- ENCLOSED-alphanumeric supplement}', "");
Error('\p{Blk= -enclosed_Alphanumeric	Supplement:=}');
Error('\P{Blk= -enclosed_Alphanumeric	Supplement:=}');
Expect(1, 127487, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(0, 127487, '\p{^Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(0, 127487, '\P{Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(1, 127487, '\P{^Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(0, 127231, '\p{Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(1, 127231, '\p{^Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(1, 127231, '\P{Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Expect(0, 127231, '\P{^Blk=-	ENCLOSED_Alphanumeric	supplement}', "");
Error('\p{Is_Block= -Enclosed	alphanumeric/a/Supplement}');
Error('\P{Is_Block= -Enclosed	alphanumeric/a/Supplement}');
Expect(1, 127487, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(0, 127487, '\p{^Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(0, 127487, '\P{Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(1, 127487, '\P{^Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(0, 127231, '\p{Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(1, 127231, '\p{^Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(1, 127231, '\P{Is_Block=	 EnclosedalphanumericSupplement}', "");
Expect(0, 127231, '\P{^Is_Block=	 EnclosedalphanumericSupplement}', "");
Error('\p{Is_Blk=_ENCLOSED:=ALPHANUMERIC-supplement}');
Error('\P{Is_Blk=_ENCLOSED:=ALPHANUMERIC-supplement}');
Expect(1, 127487, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(0, 127487, '\p{^Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(0, 127487, '\P{Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(1, 127487, '\P{^Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(0, 127231, '\p{Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(1, 127231, '\p{^Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(1, 127231, '\P{Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Expect(0, 127231, '\P{^Is_Blk=enclosed	Alphanumeric_SUPPLEMENT}', "");
Error('\p{Block:	 Ethiopic_extended/a/}');
Error('\P{Block:	 Ethiopic_extended/a/}');
Expect(1, 11743, '\p{Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Block=_	ETHIOPICExtended}', "");
Expect(0, 11743, '\p{^Block=_	ETHIOPICExtended}', "");
Expect(0, 11743, '\P{Block=_	ETHIOPICExtended}', "");
Expect(1, 11743, '\P{^Block=_	ETHIOPICExtended}', "");
Expect(0, 11647, '\p{Block=_	ETHIOPICExtended}', "");
Expect(1, 11647, '\p{^Block=_	ETHIOPICExtended}', "");
Expect(1, 11647, '\P{Block=_	ETHIOPICExtended}', "");
Expect(0, 11647, '\P{^Block=_	ETHIOPICExtended}', "");
Error('\p{Blk=-/a/ETHIOPIC extended}');
Error('\P{Blk=-/a/ETHIOPIC extended}');
Expect(1, 11743, '\p{Blk=ethiopicextended}', "");
Expect(0, 11743, '\p{^Blk=ethiopicextended}', "");
Expect(0, 11743, '\P{Blk=ethiopicextended}', "");
Expect(1, 11743, '\P{^Blk=ethiopicextended}', "");
Expect(0, 11647, '\p{Blk=ethiopicextended}', "");
Expect(1, 11647, '\p{^Blk=ethiopicextended}', "");
Expect(1, 11647, '\P{Blk=ethiopicextended}', "");
Expect(0, 11647, '\P{^Blk=ethiopicextended}', "");
Expect(1, 11743, '\p{Blk:		ETHIOPIC-Extended}', "");
Expect(0, 11743, '\p{^Blk:		ETHIOPIC-Extended}', "");
Expect(0, 11743, '\P{Blk:		ETHIOPIC-Extended}', "");
Expect(1, 11743, '\P{^Blk:		ETHIOPIC-Extended}', "");
Expect(0, 11647, '\p{Blk:		ETHIOPIC-Extended}', "");
Expect(1, 11647, '\p{^Blk:		ETHIOPIC-Extended}', "");
Expect(1, 11647, '\P{Blk:		ETHIOPIC-Extended}', "");
Expect(0, 11647, '\P{^Blk:		ETHIOPIC-Extended}', "");
Error('\p{Is_Block=-/a/ETHIOPIC_Extended}');
Error('\P{Is_Block=-/a/ETHIOPIC_Extended}');
Expect(1, 11743, '\p{Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Block=--Ethiopic_extended}', "");
Expect(0, 11743, '\p{^Is_Block=--Ethiopic_extended}', "");
Expect(0, 11743, '\P{Is_Block=--Ethiopic_extended}', "");
Expect(1, 11743, '\P{^Is_Block=--Ethiopic_extended}', "");
Expect(0, 11647, '\p{Is_Block=--Ethiopic_extended}', "");
Expect(1, 11647, '\p{^Is_Block=--Ethiopic_extended}', "");
Expect(1, 11647, '\P{Is_Block=--Ethiopic_extended}', "");
Expect(0, 11647, '\P{^Is_Block=--Ethiopic_extended}', "");
Error('\p{Is_Blk=-/a/Ethiopic_extended}');
Error('\P{Is_Blk=-/a/Ethiopic_extended}');
Expect(1, 11743, '\p{Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Blk=	ETHIOPIC	Extended}', "");
Expect(0, 11743, '\p{^Is_Blk=	ETHIOPIC	Extended}', "");
Expect(0, 11743, '\P{Is_Blk=	ETHIOPIC	Extended}', "");
Expect(1, 11743, '\P{^Is_Blk=	ETHIOPIC	Extended}', "");
Expect(0, 11647, '\p{Is_Blk=	ETHIOPIC	Extended}', "");
Expect(1, 11647, '\p{^Is_Blk=	ETHIOPIC	Extended}', "");
Expect(1, 11647, '\P{Is_Blk=	ETHIOPIC	Extended}', "");
Expect(0, 11647, '\P{^Is_Blk=	ETHIOPIC	Extended}', "");
Error('\p{Block=_PHOENICIAN/a/}');
Error('\P{Block=_PHOENICIAN/a/}');
Expect(1, 67871, '\p{Block=phoenician}', "");
Expect(0, 67871, '\p{^Block=phoenician}', "");
Expect(0, 67871, '\P{Block=phoenician}', "");
Expect(1, 67871, '\P{^Block=phoenician}', "");
Expect(0, 67839, '\p{Block=phoenician}', "");
Expect(1, 67839, '\p{^Block=phoenician}', "");
Expect(1, 67839, '\P{Block=phoenician}', "");
Expect(0, 67839, '\P{^Block=phoenician}', "");
Expect(1, 67871, '\p{Block= 	Phoenician}', "");
Expect(0, 67871, '\p{^Block= 	Phoenician}', "");
Expect(0, 67871, '\P{Block= 	Phoenician}', "");
Expect(1, 67871, '\P{^Block= 	Phoenician}', "");
Expect(0, 67839, '\p{Block= 	Phoenician}', "");
Expect(1, 67839, '\p{^Block= 	Phoenician}', "");
Expect(1, 67839, '\P{Block= 	Phoenician}', "");
Expect(0, 67839, '\P{^Block= 	Phoenician}', "");
Error('\p{Blk::= PHOENICIAN}');
Error('\P{Blk::= PHOENICIAN}');
Expect(1, 67871, '\p{Blk=phoenician}', "");
Expect(0, 67871, '\p{^Blk=phoenician}', "");
Expect(0, 67871, '\P{Blk=phoenician}', "");
Expect(1, 67871, '\P{^Blk=phoenician}', "");
Expect(0, 67839, '\p{Blk=phoenician}', "");
Expect(1, 67839, '\p{^Blk=phoenician}', "");
Expect(1, 67839, '\P{Blk=phoenician}', "");
Expect(0, 67839, '\P{^Blk=phoenician}', "");
Expect(1, 67871, '\p{Blk=	-Phoenician}', "");
Expect(0, 67871, '\p{^Blk=	-Phoenician}', "");
Expect(0, 67871, '\P{Blk=	-Phoenician}', "");
Expect(1, 67871, '\P{^Blk=	-Phoenician}', "");
Expect(0, 67839, '\p{Blk=	-Phoenician}', "");
Expect(1, 67839, '\p{^Blk=	-Phoenician}', "");
Expect(1, 67839, '\P{Blk=	-Phoenician}', "");
Expect(0, 67839, '\P{^Blk=	-Phoenician}', "");
Error('\p{Is_Block=-	phoenician/a/}');
Error('\P{Is_Block=-	phoenician/a/}');
Expect(1, 67871, '\p{Is_Block=phoenician}', "");
Expect(0, 67871, '\p{^Is_Block=phoenician}', "");
Expect(0, 67871, '\P{Is_Block=phoenician}', "");
Expect(1, 67871, '\P{^Is_Block=phoenician}', "");
Expect(0, 67839, '\p{Is_Block=phoenician}', "");
Expect(1, 67839, '\p{^Is_Block=phoenician}', "");
Expect(1, 67839, '\P{Is_Block=phoenician}', "");
Expect(0, 67839, '\P{^Is_Block=phoenician}', "");
Expect(1, 67871, '\p{Is_Block=_phoenician}', "");
Expect(0, 67871, '\p{^Is_Block=_phoenician}', "");
Expect(0, 67871, '\P{Is_Block=_phoenician}', "");
Expect(1, 67871, '\P{^Is_Block=_phoenician}', "");
Expect(0, 67839, '\p{Is_Block=_phoenician}', "");
Expect(1, 67839, '\p{^Is_Block=_phoenician}', "");
Expect(1, 67839, '\P{Is_Block=_phoenician}', "");
Expect(0, 67839, '\P{^Is_Block=_phoenician}', "");
Error('\p{Is_Blk=/a/	_PHOENICIAN}');
Error('\P{Is_Blk=/a/	_PHOENICIAN}');
Expect(1, 67871, '\p{Is_Blk=phoenician}', "");
Expect(0, 67871, '\p{^Is_Blk=phoenician}', "");
Expect(0, 67871, '\P{Is_Blk=phoenician}', "");
Expect(1, 67871, '\P{^Is_Blk=phoenician}', "");
Expect(0, 67839, '\p{Is_Blk=phoenician}', "");
Expect(1, 67839, '\p{^Is_Blk=phoenician}', "");
Expect(1, 67839, '\P{Is_Blk=phoenician}', "");
Expect(0, 67839, '\P{^Is_Blk=phoenician}', "");
Expect(1, 67871, '\p{Is_Blk=_PHOENICIAN}', "");
Expect(0, 67871, '\p{^Is_Blk=_PHOENICIAN}', "");
Expect(0, 67871, '\P{Is_Blk=_PHOENICIAN}', "");
Expect(1, 67871, '\P{^Is_Blk=_PHOENICIAN}', "");
Expect(0, 67839, '\p{Is_Blk=_PHOENICIAN}', "");
Expect(1, 67839, '\p{^Is_Blk=_PHOENICIAN}', "");
Expect(1, 67839, '\P{Is_Blk=_PHOENICIAN}', "");
Expect(0, 67839, '\P{^Is_Blk=_PHOENICIAN}', "");
Error('\p{Block=:=  Latin	1-supplement}');
Error('\P{Block=:=  Latin	1-supplement}');
Expect(1, 255, '\p{Block=latin1supplement}', "");
Expect(0, 255, '\p{^Block=latin1supplement}', "");
Expect(0, 255, '\P{Block=latin1supplement}', "");
Expect(1, 255, '\P{^Block=latin1supplement}', "");
Expect(0, 127, '\p{Block=latin1supplement}', "");
Expect(1, 127, '\p{^Block=latin1supplement}', "");
Expect(1, 127, '\P{Block=latin1supplement}', "");
Expect(0, 127, '\P{^Block=latin1supplement}', "");
Expect(1, 255, '\p{Block=- Latin 1-Supplement}', "");
Expect(0, 255, '\p{^Block=- Latin 1-Supplement}', "");
Expect(0, 255, '\P{Block=- Latin 1-Supplement}', "");
Expect(1, 255, '\P{^Block=- Latin 1-Supplement}', "");
Expect(0, 127, '\p{Block=- Latin 1-Supplement}', "");
Expect(1, 127, '\p{^Block=- Latin 1-Supplement}', "");
Expect(1, 127, '\P{Block=- Latin 1-Supplement}', "");
Expect(0, 127, '\P{^Block=- Latin 1-Supplement}', "");
Error('\p{Blk=/a/		Latin1}');
Error('\P{Blk=/a/		Latin1}');
Expect(1, 255, '\p{Blk=latin1}', "");
Expect(0, 255, '\p{^Blk=latin1}', "");
Expect(0, 255, '\P{Blk=latin1}', "");
Expect(1, 255, '\P{^Blk=latin1}', "");
Expect(0, 127, '\p{Blk=latin1}', "");
Expect(1, 127, '\p{^Blk=latin1}', "");
Expect(1, 127, '\P{Blk=latin1}', "");
Expect(0, 127, '\P{^Blk=latin1}', "");
Expect(1, 255, '\p{Blk=		latin 1}', "");
Expect(0, 255, '\p{^Blk=		latin 1}', "");
Expect(0, 255, '\P{Blk=		latin 1}', "");
Expect(1, 255, '\P{^Blk=		latin 1}', "");
Expect(0, 127, '\p{Blk=		latin 1}', "");
Expect(1, 127, '\p{^Blk=		latin 1}', "");
Expect(1, 127, '\P{Blk=		latin 1}', "");
Expect(0, 127, '\P{^Blk=		latin 1}', "");
Error('\p{Is_Block= :=latin	1-SUPPLEMENT}');
Error('\P{Is_Block= :=latin	1-SUPPLEMENT}');
Expect(1, 255, '\p{Is_Block=latin1supplement}', "");
Expect(0, 255, '\p{^Is_Block=latin1supplement}', "");
Expect(0, 255, '\P{Is_Block=latin1supplement}', "");
Expect(1, 255, '\P{^Is_Block=latin1supplement}', "");
Expect(0, 127, '\p{Is_Block=latin1supplement}', "");
Expect(1, 127, '\p{^Is_Block=latin1supplement}', "");
Expect(1, 127, '\P{Is_Block=latin1supplement}', "");
Expect(0, 127, '\P{^Is_Block=latin1supplement}', "");
Expect(1, 255, '\p{Is_Block=-latin1supplement}', "");
Expect(0, 255, '\p{^Is_Block=-latin1supplement}', "");
Expect(0, 255, '\P{Is_Block=-latin1supplement}', "");
Expect(1, 255, '\P{^Is_Block=-latin1supplement}', "");
Expect(0, 127, '\p{Is_Block=-latin1supplement}', "");
Expect(1, 127, '\p{^Is_Block=-latin1supplement}', "");
Expect(1, 127, '\P{Is_Block=-latin1supplement}', "");
Expect(0, 127, '\P{^Is_Block=-latin1supplement}', "");
Error('\p{Is_Blk=  LATIN:=1}');
Error('\P{Is_Blk=  LATIN:=1}');
Expect(1, 255, '\p{Is_Blk=latin1}', "");
Expect(0, 255, '\p{^Is_Blk=latin1}', "");
Expect(0, 255, '\P{Is_Blk=latin1}', "");
Expect(1, 255, '\P{^Is_Blk=latin1}', "");
Expect(0, 127, '\p{Is_Blk=latin1}', "");
Expect(1, 127, '\p{^Is_Blk=latin1}', "");
Expect(1, 127, '\P{Is_Blk=latin1}', "");
Expect(0, 127, '\P{^Is_Blk=latin1}', "");
Expect(1, 255, '\p{Is_Blk=__Latin 1}', "");
Expect(0, 255, '\p{^Is_Blk=__Latin 1}', "");
Expect(0, 255, '\P{Is_Blk=__Latin 1}', "");
Expect(1, 255, '\P{^Is_Blk=__Latin 1}', "");
Expect(0, 127, '\p{Is_Blk=__Latin 1}', "");
Expect(1, 127, '\p{^Is_Blk=__Latin 1}', "");
Expect(1, 127, '\P{Is_Blk=__Latin 1}', "");
Expect(0, 127, '\P{^Is_Blk=__Latin 1}', "");
Error('\p{Block:	 Devanagari/a/}');
Error('\P{Block:	 Devanagari/a/}');
Expect(1, 2431, '\p{Block=devanagari}', "");
Expect(0, 2431, '\p{^Block=devanagari}', "");
Expect(0, 2431, '\P{Block=devanagari}', "");
Expect(1, 2431, '\P{^Block=devanagari}', "");
Expect(0, 2303, '\p{Block=devanagari}', "");
Expect(1, 2303, '\p{^Block=devanagari}', "");
Expect(1, 2303, '\P{Block=devanagari}', "");
Expect(0, 2303, '\P{^Block=devanagari}', "");
Expect(1, 2431, '\p{Block=Devanagari}', "");
Expect(0, 2431, '\p{^Block=Devanagari}', "");
Expect(0, 2431, '\P{Block=Devanagari}', "");
Expect(1, 2431, '\P{^Block=Devanagari}', "");
Expect(0, 2303, '\p{Block=Devanagari}', "");
Expect(1, 2303, '\p{^Block=Devanagari}', "");
Expect(1, 2303, '\P{Block=Devanagari}', "");
Expect(0, 2303, '\P{^Block=Devanagari}', "");
Error('\p{Blk=/a/-DEVANAGARI}');
Error('\P{Blk=/a/-DEVANAGARI}');
Expect(1, 2431, '\p{Blk=devanagari}', "");
Expect(0, 2431, '\p{^Blk=devanagari}', "");
Expect(0, 2431, '\P{Blk=devanagari}', "");
Expect(1, 2431, '\P{^Blk=devanagari}', "");
Expect(0, 2303, '\p{Blk=devanagari}', "");
Expect(1, 2303, '\p{^Blk=devanagari}', "");
Expect(1, 2303, '\P{Blk=devanagari}', "");
Expect(0, 2303, '\P{^Blk=devanagari}', "");
Expect(1, 2431, '\p{Blk=- Devanagari}', "");
Expect(0, 2431, '\p{^Blk=- Devanagari}', "");
Expect(0, 2431, '\P{Blk=- Devanagari}', "");
Expect(1, 2431, '\P{^Blk=- Devanagari}', "");
Expect(0, 2303, '\p{Blk=- Devanagari}', "");
Expect(1, 2303, '\p{^Blk=- Devanagari}', "");
Expect(1, 2303, '\P{Blk=- Devanagari}', "");
Expect(0, 2303, '\P{^Blk=- Devanagari}', "");
Error('\p{Is_Block= 	devanagari:=}');
Error('\P{Is_Block= 	devanagari:=}');
Expect(1, 2431, '\p{Is_Block:   devanagari}', "");
Expect(0, 2431, '\p{^Is_Block:   devanagari}', "");
Expect(0, 2431, '\P{Is_Block:   devanagari}', "");
Expect(1, 2431, '\P{^Is_Block:   devanagari}', "");
Expect(0, 2303, '\p{Is_Block:   devanagari}', "");
Expect(1, 2303, '\p{^Is_Block:   devanagari}', "");
Expect(1, 2303, '\P{Is_Block:   devanagari}', "");
Expect(0, 2303, '\P{^Is_Block:   devanagari}', "");
Expect(1, 2431, '\p{Is_Block: 	Devanagari}', "");
Expect(0, 2431, '\p{^Is_Block: 	Devanagari}', "");
Expect(0, 2431, '\P{Is_Block: 	Devanagari}', "");
Expect(1, 2431, '\P{^Is_Block: 	Devanagari}', "");
Expect(0, 2303, '\p{Is_Block: 	Devanagari}', "");
Expect(1, 2303, '\p{^Is_Block: 	Devanagari}', "");
Expect(1, 2303, '\P{Is_Block: 	Devanagari}', "");
Expect(0, 2303, '\P{^Is_Block: 	Devanagari}', "");
Error('\p{Is_Blk=/a/-Devanagari}');
Error('\P{Is_Blk=/a/-Devanagari}');
Expect(1, 2431, '\p{Is_Blk=devanagari}', "");
Expect(0, 2431, '\p{^Is_Blk=devanagari}', "");
Expect(0, 2431, '\P{Is_Blk=devanagari}', "");
Expect(1, 2431, '\P{^Is_Blk=devanagari}', "");
Expect(0, 2303, '\p{Is_Blk=devanagari}', "");
Expect(1, 2303, '\p{^Is_Blk=devanagari}', "");
Expect(1, 2303, '\P{Is_Blk=devanagari}', "");
Expect(0, 2303, '\P{^Is_Blk=devanagari}', "");
Expect(1, 2431, '\p{Is_Blk= DEVANAGARI}', "");
Expect(0, 2431, '\p{^Is_Blk= DEVANAGARI}', "");
Expect(0, 2431, '\P{Is_Blk= DEVANAGARI}', "");
Expect(1, 2431, '\P{^Is_Blk= DEVANAGARI}', "");
Expect(0, 2303, '\p{Is_Blk= DEVANAGARI}', "");
Expect(1, 2303, '\p{^Is_Blk= DEVANAGARI}', "");
Expect(1, 2303, '\P{Is_Blk= DEVANAGARI}', "");
Expect(0, 2303, '\P{^Is_Blk= DEVANAGARI}', "");
Error('\p{Block:   __HANGULJamo	EXTENDED-A:=}');
Error('\P{Block:   __HANGULJamo	EXTENDED-A:=}');
Expect(1, 43391, '\p{Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Block= 	Hangul_Jamo	extended a}', "");
Expect(0, 43391, '\p{^Block= 	Hangul_Jamo	extended a}', "");
Expect(0, 43391, '\P{Block= 	Hangul_Jamo	extended a}', "");
Expect(1, 43391, '\P{^Block= 	Hangul_Jamo	extended a}', "");
Expect(0, 43359, '\p{Block= 	Hangul_Jamo	extended a}', "");
Expect(1, 43359, '\p{^Block= 	Hangul_Jamo	extended a}', "");
Expect(1, 43359, '\P{Block= 	Hangul_Jamo	extended a}', "");
Expect(0, 43359, '\P{^Block= 	Hangul_Jamo	extended a}', "");
Error('\p{Blk= HANGUL	JAMO	Extended_A:=}');
Error('\P{Blk= HANGUL	JAMO	Extended_A:=}');
Expect(1, 43391, '\p{Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(0, 43391, '\p{^Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(0, 43391, '\P{Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(1, 43391, '\P{^Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(0, 43359, '\p{Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(1, 43359, '\p{^Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(1, 43359, '\P{Blk= 	hangul-JAMO EXTENDED_A}', "");
Expect(0, 43359, '\P{^Blk= 	hangul-JAMO EXTENDED_A}', "");
Error('\p{Is_Block= 	HANGULJAMO	Extended-A:=}');
Error('\P{Is_Block= 	HANGULJAMO	Extended-A:=}');
Expect(1, 43391, '\p{Is_Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Block=	hangul jamo	extended	a}', "");
Expect(0, 43391, '\p{^Is_Block=	hangul jamo	extended	a}', "");
Expect(0, 43391, '\P{Is_Block=	hangul jamo	extended	a}', "");
Expect(1, 43391, '\P{^Is_Block=	hangul jamo	extended	a}', "");
Expect(0, 43359, '\p{Is_Block=	hangul jamo	extended	a}', "");
Expect(1, 43359, '\p{^Is_Block=	hangul jamo	extended	a}', "");
Expect(1, 43359, '\P{Is_Block=	hangul jamo	extended	a}', "");
Expect(0, 43359, '\P{^Is_Block=	hangul jamo	extended	a}', "");
Error('\p{Is_Blk=- HangulJamo_EXTENDED/a/a}');
Error('\P{Is_Blk=- HangulJamo_EXTENDED/a/a}');
Expect(1, 43391, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(0, 43391, '\p{^Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(0, 43391, '\P{Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(1, 43391, '\P{^Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(0, 43359, '\p{Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(1, 43359, '\p{^Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(1, 43359, '\P{Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Expect(0, 43359, '\P{^Is_Blk= 	Hangul	Jamo EXTENDED A}', "");
Error('\p{Block=:=Carian}');
Error('\P{Block=:=Carian}');
Expect(1, 66271, '\p{Block=carian}', "");
Expect(0, 66271, '\p{^Block=carian}', "");
Expect(0, 66271, '\P{Block=carian}', "");
Expect(1, 66271, '\P{^Block=carian}', "");
Expect(0, 66207, '\p{Block=carian}', "");
Expect(1, 66207, '\p{^Block=carian}', "");
Expect(1, 66207, '\P{Block=carian}', "");
Expect(0, 66207, '\P{^Block=carian}', "");
Expect(1, 66271, '\p{Block=  CARIAN}', "");
Expect(0, 66271, '\p{^Block=  CARIAN}', "");
Expect(0, 66271, '\P{Block=  CARIAN}', "");
Expect(1, 66271, '\P{^Block=  CARIAN}', "");
Expect(0, 66207, '\p{Block=  CARIAN}', "");
Expect(1, 66207, '\p{^Block=  CARIAN}', "");
Expect(1, 66207, '\P{Block=  CARIAN}', "");
Expect(0, 66207, '\P{^Block=  CARIAN}', "");
Error('\p{Blk=	 Carian/a/}');
Error('\P{Blk=	 Carian/a/}');
Expect(1, 66271, '\p{Blk=carian}', "");
Expect(0, 66271, '\p{^Blk=carian}', "");
Expect(0, 66271, '\P{Blk=carian}', "");
Expect(1, 66271, '\P{^Blk=carian}', "");
Expect(0, 66207, '\p{Blk=carian}', "");
Expect(1, 66207, '\p{^Blk=carian}', "");
Expect(1, 66207, '\P{Blk=carian}', "");
Expect(0, 66207, '\P{^Blk=carian}', "");
Expect(1, 66271, '\p{Blk=	Carian}', "");
Expect(0, 66271, '\p{^Blk=	Carian}', "");
Expect(0, 66271, '\P{Blk=	Carian}', "");
Expect(1, 66271, '\P{^Blk=	Carian}', "");
Expect(0, 66207, '\p{Blk=	Carian}', "");
Expect(1, 66207, '\p{^Blk=	Carian}', "");
Expect(1, 66207, '\P{Blk=	Carian}', "");
Expect(0, 66207, '\P{^Blk=	Carian}', "");
Error('\p{Is_Block=:= Carian}');
Error('\P{Is_Block=:= Carian}');
Expect(1, 66271, '\p{Is_Block:carian}', "");
Expect(0, 66271, '\p{^Is_Block:carian}', "");
Expect(0, 66271, '\P{Is_Block:carian}', "");
Expect(1, 66271, '\P{^Is_Block:carian}', "");
Expect(0, 66207, '\p{Is_Block:carian}', "");
Expect(1, 66207, '\p{^Is_Block:carian}', "");
Expect(1, 66207, '\P{Is_Block:carian}', "");
Expect(0, 66207, '\P{^Is_Block:carian}', "");
Expect(1, 66271, '\p{Is_Block=	 CARIAN}', "");
Expect(0, 66271, '\p{^Is_Block=	 CARIAN}', "");
Expect(0, 66271, '\P{Is_Block=	 CARIAN}', "");
Expect(1, 66271, '\P{^Is_Block=	 CARIAN}', "");
Expect(0, 66207, '\p{Is_Block=	 CARIAN}', "");
Expect(1, 66207, '\p{^Is_Block=	 CARIAN}', "");
Expect(1, 66207, '\P{Is_Block=	 CARIAN}', "");
Expect(0, 66207, '\P{^Is_Block=	 CARIAN}', "");
Error('\p{Is_Blk:    /a/carian}');
Error('\P{Is_Blk:    /a/carian}');
Expect(1, 66271, '\p{Is_Blk=carian}', "");
Expect(0, 66271, '\p{^Is_Blk=carian}', "");
Expect(0, 66271, '\P{Is_Blk=carian}', "");
Expect(1, 66271, '\P{^Is_Blk=carian}', "");
Expect(0, 66207, '\p{Is_Blk=carian}', "");
Expect(1, 66207, '\p{^Is_Blk=carian}', "");
Expect(1, 66207, '\P{Is_Blk=carian}', "");
Expect(0, 66207, '\P{^Is_Blk=carian}', "");
Expect(1, 66271, '\p{Is_Blk=-_CARIAN}', "");
Expect(0, 66271, '\p{^Is_Blk=-_CARIAN}', "");
Expect(0, 66271, '\P{Is_Blk=-_CARIAN}', "");
Expect(1, 66271, '\P{^Is_Blk=-_CARIAN}', "");
Expect(0, 66207, '\p{Is_Blk=-_CARIAN}', "");
Expect(1, 66207, '\p{^Is_Blk=-_CARIAN}', "");
Expect(1, 66207, '\P{Is_Blk=-_CARIAN}', "");
Expect(0, 66207, '\P{^Is_Blk=-_CARIAN}', "");
Error('\p{Block=_/a/BUHID}');
Error('\P{Block=_/a/BUHID}');
Expect(1, 5983, '\p{Block=buhid}', "");
Expect(0, 5983, '\p{^Block=buhid}', "");
Expect(0, 5983, '\P{Block=buhid}', "");
Expect(1, 5983, '\P{^Block=buhid}', "");
Expect(0, 5951, '\p{Block=buhid}', "");
Expect(1, 5951, '\p{^Block=buhid}', "");
Expect(1, 5951, '\P{Block=buhid}', "");
Expect(0, 5951, '\P{^Block=buhid}', "");
Expect(1, 5983, '\p{Block=_Buhid}', "");
Expect(0, 5983, '\p{^Block=_Buhid}', "");
Expect(0, 5983, '\P{Block=_Buhid}', "");
Expect(1, 5983, '\P{^Block=_Buhid}', "");
Expect(0, 5951, '\p{Block=_Buhid}', "");
Expect(1, 5951, '\p{^Block=_Buhid}', "");
Expect(1, 5951, '\P{Block=_Buhid}', "");
Expect(0, 5951, '\P{^Block=_Buhid}', "");
Error('\p{Blk=_-Buhid/a/}');
Error('\P{Blk=_-Buhid/a/}');
Expect(1, 5983, '\p{Blk=buhid}', "");
Expect(0, 5983, '\p{^Blk=buhid}', "");
Expect(0, 5983, '\P{Blk=buhid}', "");
Expect(1, 5983, '\P{^Blk=buhid}', "");
Expect(0, 5951, '\p{Blk=buhid}', "");
Expect(1, 5951, '\p{^Blk=buhid}', "");
Expect(1, 5951, '\P{Blk=buhid}', "");
Expect(0, 5951, '\P{^Blk=buhid}', "");
Expect(1, 5983, '\p{Blk=  Buhid}', "");
Expect(0, 5983, '\p{^Blk=  Buhid}', "");
Expect(0, 5983, '\P{Blk=  Buhid}', "");
Expect(1, 5983, '\P{^Blk=  Buhid}', "");
Expect(0, 5951, '\p{Blk=  Buhid}', "");
Expect(1, 5951, '\p{^Blk=  Buhid}', "");
Expect(1, 5951, '\P{Blk=  Buhid}', "");
Expect(0, 5951, '\P{^Blk=  Buhid}', "");
Error('\p{Is_Block=/a/Buhid}');
Error('\P{Is_Block=/a/Buhid}');
Expect(1, 5983, '\p{Is_Block=buhid}', "");
Expect(0, 5983, '\p{^Is_Block=buhid}', "");
Expect(0, 5983, '\P{Is_Block=buhid}', "");
Expect(1, 5983, '\P{^Is_Block=buhid}', "");
Expect(0, 5951, '\p{Is_Block=buhid}', "");
Expect(1, 5951, '\p{^Is_Block=buhid}', "");
Expect(1, 5951, '\P{Is_Block=buhid}', "");
Expect(0, 5951, '\P{^Is_Block=buhid}', "");
Expect(1, 5983, '\p{Is_Block= Buhid}', "");
Expect(0, 5983, '\p{^Is_Block= Buhid}', "");
Expect(0, 5983, '\P{Is_Block= Buhid}', "");
Expect(1, 5983, '\P{^Is_Block= Buhid}', "");
Expect(0, 5951, '\p{Is_Block= Buhid}', "");
Expect(1, 5951, '\p{^Is_Block= Buhid}', "");
Expect(1, 5951, '\P{Is_Block= Buhid}', "");
Expect(0, 5951, '\P{^Is_Block= Buhid}', "");
Error('\p{Is_Blk=:= _buhid}');
Error('\P{Is_Blk=:= _buhid}');
Expect(1, 5983, '\p{Is_Blk=buhid}', "");
Expect(0, 5983, '\p{^Is_Blk=buhid}', "");
Expect(0, 5983, '\P{Is_Blk=buhid}', "");
Expect(1, 5983, '\P{^Is_Blk=buhid}', "");
Expect(0, 5951, '\p{Is_Blk=buhid}', "");
Expect(1, 5951, '\p{^Is_Blk=buhid}', "");
Expect(1, 5951, '\P{Is_Blk=buhid}', "");
Expect(0, 5951, '\P{^Is_Blk=buhid}', "");
Expect(1, 5983, '\p{Is_Blk=	_buhid}', "");
Expect(0, 5983, '\p{^Is_Blk=	_buhid}', "");
Expect(0, 5983, '\P{Is_Blk=	_buhid}', "");
Expect(1, 5983, '\P{^Is_Blk=	_buhid}', "");
Expect(0, 5951, '\p{Is_Blk=	_buhid}', "");
Expect(1, 5951, '\p{^Is_Blk=	_buhid}', "");
Expect(1, 5951, '\P{Is_Blk=	_buhid}', "");
Expect(0, 5951, '\P{^Is_Blk=	_buhid}', "");
Error('\p{Block=:=-Ideographic DescriptionCharacters}');
Error('\P{Block=:=-Ideographic DescriptionCharacters}');
Expect(1, 12287, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Block=  Ideographic	Description	Characters}', "");
Expect(0, 12287, '\p{^Block=  Ideographic	Description	Characters}', "");
Expect(0, 12287, '\P{Block=  Ideographic	Description	Characters}', "");
Expect(1, 12287, '\P{^Block=  Ideographic	Description	Characters}', "");
Expect(0, 12271, '\p{Block=  Ideographic	Description	Characters}', "");
Expect(1, 12271, '\p{^Block=  Ideographic	Description	Characters}', "");
Expect(1, 12271, '\P{Block=  Ideographic	Description	Characters}', "");
Expect(0, 12271, '\P{^Block=  Ideographic	Description	Characters}', "");
Error('\p{Blk=-_ideographic_Descriptioncharacters/a/}');
Error('\P{Blk=-_ideographic_Descriptioncharacters/a/}');
Expect(1, 12287, '\p{Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Blk=	-Ideographic description Characters}', "");
Expect(0, 12287, '\p{^Blk=	-Ideographic description Characters}', "");
Expect(0, 12287, '\P{Blk=	-Ideographic description Characters}', "");
Expect(1, 12287, '\P{^Blk=	-Ideographic description Characters}', "");
Expect(0, 12271, '\p{Blk=	-Ideographic description Characters}', "");
Expect(1, 12271, '\p{^Blk=	-Ideographic description Characters}', "");
Expect(1, 12271, '\P{Blk=	-Ideographic description Characters}', "");
Expect(0, 12271, '\P{^Blk=	-Ideographic description Characters}', "");
Error('\p{Is_Block=/a/  IDEOGRAPHIC_Description	Characters}');
Error('\P{Is_Block=/a/  IDEOGRAPHIC_Description	Characters}');
Expect(1, 12287, '\p{Is_Block: ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Block: ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Block: ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Block: ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Block: ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Block: ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Block: ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Block: ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Block:	-Ideographic descriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Block:	-Ideographic descriptioncharacters}', "");
Error('\p{Is_Blk=:= 	IDEOGRAPHIC_Descriptioncharacters}');
Error('\P{Is_Blk=:= 	IDEOGRAPHIC_Descriptioncharacters}');
Expect(1, 12287, '\p{Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Blk:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(0, 12287, '\p{^Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(0, 12287, '\P{Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(1, 12287, '\P{^Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(0, 12271, '\p{Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(1, 12271, '\p{^Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(1, 12271, '\P{Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Expect(0, 12271, '\P{^Is_Blk=_	IDEOGRAPHIC	Description_Characters}', "");
Error('\p{Block:CJK_Unified/a/IDEOGRAPHS	Extension_B}');
Error('\P{Block:CJK_Unified/a/IDEOGRAPHS	Extension_B}');
Expect(1, 173791, '\p{Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(0, 173791, '\p{^Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(0, 173791, '\P{Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(1, 173791, '\P{^Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(0, 1, '\p{Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(1, 1, '\p{^Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(1, 1, '\P{Block=	CJKUNIFIEDIdeographsExtension B}', "");
Expect(0, 1, '\P{^Block=	CJKUNIFIEDIdeographsExtension B}', "");
Error('\p{Blk= :=CJK Unified_IDEOGRAPHS Extension-B}');
Error('\P{Blk= :=CJK Unified_IDEOGRAPHS Extension-B}');
Expect(1, 173791, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(0, 173791, '\p{^Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(0, 173791, '\P{Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(1, 173791, '\P{^Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(0, 1, '\p{Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(1, 1, '\p{^Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(1, 1, '\P{Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Expect(0, 1, '\P{^Blk=__CJK	Unified ideographsEXTENSIONB}', "");
Error('\p{Is_Block:  	CJK/a/Unified-Ideographs_Extension-B}');
Error('\P{Is_Block:  	CJK/a/Unified-Ideographs_Extension-B}');
Expect(1, 173791, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(0, 173791, '\p{^Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(0, 173791, '\P{Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(1, 173791, '\P{^Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(0, 1, '\p{Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(1, 1, '\p{^Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(1, 1, '\P{Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Expect(0, 1, '\P{^Is_Block=	CJK-Unified_Ideographs_Extension b}', "");
Error('\p{Is_Blk=	_CJK_UNIFIED_Ideographs_ExtensionB:=}');
Error('\P{Is_Blk=	_CJK_UNIFIED_Ideographs_ExtensionB:=}');
Expect(1, 173791, '\p{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(0, 173791, '\p{^Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(0, 173791, '\P{Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(1, 173791, '\P{^Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(0, 1, '\p{Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(1, 1, '\p{^Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(1, 1, '\P{Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Expect(0, 1, '\P{^Is_Blk=_	CJK_unified_Ideographs EXTENSION B}', "");
Error('\p{Block=:=-Old	italic}');
Error('\P{Block=:=-Old	italic}');
Expect(1, 66351, '\p{Block=olditalic}', "");
Expect(0, 66351, '\p{^Block=olditalic}', "");
Expect(0, 66351, '\P{Block=olditalic}', "");
Expect(1, 66351, '\P{^Block=olditalic}', "");
Expect(0, 66303, '\p{Block=olditalic}', "");
Expect(1, 66303, '\p{^Block=olditalic}', "");
Expect(1, 66303, '\P{Block=olditalic}', "");
Expect(0, 66303, '\P{^Block=olditalic}', "");
Expect(1, 66351, '\p{Block=	_old_Italic}', "");
Expect(0, 66351, '\p{^Block=	_old_Italic}', "");
Expect(0, 66351, '\P{Block=	_old_Italic}', "");
Expect(1, 66351, '\P{^Block=	_old_Italic}', "");
Expect(0, 66303, '\p{Block=	_old_Italic}', "");
Expect(1, 66303, '\p{^Block=	_old_Italic}', "");
Expect(1, 66303, '\P{Block=	_old_Italic}', "");
Expect(0, 66303, '\P{^Block=	_old_Italic}', "");
Error('\p{Blk=:=_	OLD-Italic}');
Error('\P{Blk=:=_	OLD-Italic}');
Expect(1, 66351, '\p{Blk=olditalic}', "");
Expect(0, 66351, '\p{^Blk=olditalic}', "");
Expect(0, 66351, '\P{Blk=olditalic}', "");
Expect(1, 66351, '\P{^Blk=olditalic}', "");
Expect(0, 66303, '\p{Blk=olditalic}', "");
Expect(1, 66303, '\p{^Blk=olditalic}', "");
Expect(1, 66303, '\P{Blk=olditalic}', "");
Expect(0, 66303, '\P{^Blk=olditalic}', "");
Expect(1, 66351, '\p{Blk=_Old	Italic}', "");
Expect(0, 66351, '\p{^Blk=_Old	Italic}', "");
Expect(0, 66351, '\P{Blk=_Old	Italic}', "");
Expect(1, 66351, '\P{^Blk=_Old	Italic}', "");
Expect(0, 66303, '\p{Blk=_Old	Italic}', "");
Expect(1, 66303, '\p{^Blk=_Old	Italic}', "");
Expect(1, 66303, '\P{Blk=_Old	Italic}', "");
Expect(0, 66303, '\P{^Blk=_Old	Italic}', "");
Error('\p{Is_Block=	-OLD-italic:=}');
Error('\P{Is_Block=	-OLD-italic:=}');
Expect(1, 66351, '\p{Is_Block=olditalic}', "");
Expect(0, 66351, '\p{^Is_Block=olditalic}', "");
Expect(0, 66351, '\P{Is_Block=olditalic}', "");
Expect(1, 66351, '\P{^Is_Block=olditalic}', "");
Expect(0, 66303, '\p{Is_Block=olditalic}', "");
Expect(1, 66303, '\p{^Is_Block=olditalic}', "");
Expect(1, 66303, '\P{Is_Block=olditalic}', "");
Expect(0, 66303, '\P{^Is_Block=olditalic}', "");
Expect(1, 66351, '\p{Is_Block=- Old ITALIC}', "");
Expect(0, 66351, '\p{^Is_Block=- Old ITALIC}', "");
Expect(0, 66351, '\P{Is_Block=- Old ITALIC}', "");
Expect(1, 66351, '\P{^Is_Block=- Old ITALIC}', "");
Expect(0, 66303, '\p{Is_Block=- Old ITALIC}', "");
Expect(1, 66303, '\p{^Is_Block=- Old ITALIC}', "");
Expect(1, 66303, '\P{Is_Block=- Old ITALIC}', "");
Expect(0, 66303, '\P{^Is_Block=- Old ITALIC}', "");
Error('\p{Is_Blk= -Old_Italic:=}');
Error('\P{Is_Blk= -Old_Italic:=}');
Expect(1, 66351, '\p{Is_Blk=olditalic}', "");
Expect(0, 66351, '\p{^Is_Blk=olditalic}', "");
Expect(0, 66351, '\P{Is_Blk=olditalic}', "");
Expect(1, 66351, '\P{^Is_Blk=olditalic}', "");
Expect(0, 66303, '\p{Is_Blk=olditalic}', "");
Expect(1, 66303, '\p{^Is_Blk=olditalic}', "");
Expect(1, 66303, '\P{Is_Blk=olditalic}', "");
Expect(0, 66303, '\P{^Is_Blk=olditalic}', "");
Expect(1, 66351, '\p{Is_Blk=- OldItalic}', "");
Expect(0, 66351, '\p{^Is_Blk=- OldItalic}', "");
Expect(0, 66351, '\P{Is_Blk=- OldItalic}', "");
Expect(1, 66351, '\P{^Is_Blk=- OldItalic}', "");
Expect(0, 66303, '\p{Is_Blk=- OldItalic}', "");
Expect(1, 66303, '\p{^Is_Blk=- OldItalic}', "");
Expect(1, 66303, '\P{Is_Blk=- OldItalic}', "");
Expect(0, 66303, '\P{^Is_Blk=- OldItalic}', "");
Error('\p{Block:--Hangul	SYLLABLES/a/}');
Error('\P{Block:--Hangul	SYLLABLES/a/}');
Expect(1, 55215, '\p{Block=hangulsyllables}', "");
Expect(0, 55215, '\p{^Block=hangulsyllables}', "");
Expect(0, 55215, '\P{Block=hangulsyllables}', "");
Expect(1, 55215, '\P{^Block=hangulsyllables}', "");
Expect(0, 44031, '\p{Block=hangulsyllables}', "");
Expect(1, 44031, '\p{^Block=hangulsyllables}', "");
Expect(1, 44031, '\P{Block=hangulsyllables}', "");
Expect(0, 44031, '\P{^Block=hangulsyllables}', "");
Expect(1, 55215, '\p{Block=  Hangul	syllables}', "");
Expect(0, 55215, '\p{^Block=  Hangul	syllables}', "");
Expect(0, 55215, '\P{Block=  Hangul	syllables}', "");
Expect(1, 55215, '\P{^Block=  Hangul	syllables}', "");
Expect(0, 44031, '\p{Block=  Hangul	syllables}', "");
Expect(1, 44031, '\p{^Block=  Hangul	syllables}', "");
Expect(1, 44031, '\P{Block=  Hangul	syllables}', "");
Expect(0, 44031, '\P{^Block=  Hangul	syllables}', "");
Error('\p{Blk= hangul/a/Syllables}');
Error('\P{Blk= hangul/a/Syllables}');
Expect(1, 55215, '\p{Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Blk=	-HANGUL SYLLABLES}', "");
Expect(0, 55215, '\p{^Blk=	-HANGUL SYLLABLES}', "");
Expect(0, 55215, '\P{Blk=	-HANGUL SYLLABLES}', "");
Expect(1, 55215, '\P{^Blk=	-HANGUL SYLLABLES}', "");
Expect(0, 44031, '\p{Blk=	-HANGUL SYLLABLES}', "");
Expect(1, 44031, '\p{^Blk=	-HANGUL SYLLABLES}', "");
Expect(1, 44031, '\P{Blk=	-HANGUL SYLLABLES}', "");
Expect(0, 44031, '\P{^Blk=	-HANGUL SYLLABLES}', "");
Error('\p{Is_Block=-	HANGUL	SYLLABLES/a/}');
Error('\P{Is_Block=-	HANGUL	SYLLABLES/a/}');
Expect(1, 55215, '\p{Is_Block=hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Block=hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Block=hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Block=hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Block=hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Block=hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Block=hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Block=hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Block=-_Hangul-Syllables}', "");
Expect(0, 55215, '\p{^Is_Block=-_Hangul-Syllables}', "");
Expect(0, 55215, '\P{Is_Block=-_Hangul-Syllables}', "");
Expect(1, 55215, '\P{^Is_Block=-_Hangul-Syllables}', "");
Expect(0, 44031, '\p{Is_Block=-_Hangul-Syllables}', "");
Expect(1, 44031, '\p{^Is_Block=-_Hangul-Syllables}', "");
Expect(1, 44031, '\P{Is_Block=-_Hangul-Syllables}', "");
Expect(0, 44031, '\P{^Is_Block=-_Hangul-Syllables}', "");
Error('\p{Is_Blk=:=--HANGUL SYLLABLES}');
Error('\P{Is_Blk=:=--HANGUL SYLLABLES}');
Expect(1, 55215, '\p{Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Blk=hangul SYLLABLES}', "");
Expect(0, 55215, '\p{^Is_Blk=hangul SYLLABLES}', "");
Expect(0, 55215, '\P{Is_Blk=hangul SYLLABLES}', "");
Expect(1, 55215, '\P{^Is_Blk=hangul SYLLABLES}', "");
Expect(0, 44031, '\p{Is_Blk=hangul SYLLABLES}', "");
Expect(1, 44031, '\p{^Is_Blk=hangul SYLLABLES}', "");
Expect(1, 44031, '\P{Is_Blk=hangul SYLLABLES}', "");
Expect(0, 44031, '\P{^Is_Blk=hangul SYLLABLES}', "");
Error('\p{Block=	Yijing-HEXAGRAM_SYMBOLS:=}');
Error('\P{Block=	Yijing-HEXAGRAM_SYMBOLS:=}');
Expect(1, 19967, '\p{Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(0, 19967, '\p{^Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(0, 19967, '\P{Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(1, 19967, '\P{^Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(0, 19903, '\p{Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(1, 19903, '\p{^Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(1, 19903, '\P{Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Expect(0, 19903, '\P{^Block=		YIJING HEXAGRAM	SYMBOLS}', "");
Error('\p{Blk=/a/Yijing-Hexagram Symbols}');
Error('\P{Blk=/a/Yijing-Hexagram Symbols}');
Expect(1, 19967, '\p{Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(0, 19967, '\p{^Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(0, 19967, '\P{Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(1, 19967, '\P{^Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(0, 19903, '\p{Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(1, 19903, '\p{^Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(1, 19903, '\P{Blk=_yijing-HEXAGRAM_symbols}', "");
Expect(0, 19903, '\P{^Blk=_yijing-HEXAGRAM_symbols}', "");
Error('\p{Is_Block=	_Yijing/a/HexagramSymbols}');
Error('\P{Is_Block=	_Yijing/a/HexagramSymbols}');
Expect(1, 19967, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Block=_ yijing Hexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Block=_ yijing Hexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Block=_ yijing Hexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Block=_ yijing Hexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Block=_ yijing Hexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Block=_ yijing Hexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Block=_ yijing Hexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Block=_ yijing Hexagramsymbols}', "");
Error('\p{Is_Blk=-/a/Yijing-Hexagram-Symbols}');
Error('\P{Is_Blk=-/a/Yijing-Hexagram-Symbols}');
Expect(1, 19967, '\p{Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(0, 19967, '\p{^Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(0, 19967, '\P{Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(1, 19967, '\P{^Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(0, 19903, '\p{Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(1, 19903, '\p{^Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(1, 19903, '\P{Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Expect(0, 19903, '\P{^Is_Blk=		yijing HEXAGRAM-SYMBOLS}', "");
Error('\p{Block=	_Phaistos	DISC/a/}');
Error('\P{Block=	_Phaistos	DISC/a/}');
Expect(1, 66047, '\p{Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Block: -Phaistos_DISC}', "");
Expect(0, 66047, '\p{^Block: -Phaistos_DISC}', "");
Expect(0, 66047, '\P{Block: -Phaistos_DISC}', "");
Expect(1, 66047, '\P{^Block: -Phaistos_DISC}', "");
Expect(0, 65999, '\p{Block: -Phaistos_DISC}', "");
Expect(1, 65999, '\p{^Block: -Phaistos_DISC}', "");
Expect(1, 65999, '\P{Block: -Phaistos_DISC}', "");
Expect(0, 65999, '\P{^Block: -Phaistos_DISC}', "");
Error('\p{Blk:	:=Phaistos-disc}');
Error('\P{Blk:	:=Phaistos-disc}');
Expect(1, 66047, '\p{Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Blk=--Phaistos-Disc}', "");
Expect(0, 66047, '\p{^Blk=--Phaistos-Disc}', "");
Expect(0, 66047, '\P{Blk=--Phaistos-Disc}', "");
Expect(1, 66047, '\P{^Blk=--Phaistos-Disc}', "");
Expect(0, 65999, '\p{Blk=--Phaistos-Disc}', "");
Expect(1, 65999, '\p{^Blk=--Phaistos-Disc}', "");
Expect(1, 65999, '\P{Blk=--Phaistos-Disc}', "");
Expect(0, 65999, '\P{^Blk=--Phaistos-Disc}', "");
Error('\p{Is_Block=-/a/PHAISTOS-disc}');
Error('\P{Is_Block=-/a/PHAISTOS-disc}');
Expect(1, 66047, '\p{Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Block=-Phaistos-disc}', "");
Expect(0, 66047, '\p{^Is_Block=-Phaistos-disc}', "");
Expect(0, 66047, '\P{Is_Block=-Phaistos-disc}', "");
Expect(1, 66047, '\P{^Is_Block=-Phaistos-disc}', "");
Expect(0, 65999, '\p{Is_Block=-Phaistos-disc}', "");
Expect(1, 65999, '\p{^Is_Block=-Phaistos-disc}', "");
Expect(1, 65999, '\P{Is_Block=-Phaistos-disc}', "");
Expect(0, 65999, '\P{^Is_Block=-Phaistos-disc}', "");
Error('\p{Is_Blk=__Phaistos	Disc:=}');
Error('\P{Is_Blk=__Phaistos	Disc:=}');
Expect(1, 66047, '\p{Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Blk=		PhaistosDisc}', "");
Expect(0, 66047, '\p{^Is_Blk=		PhaistosDisc}', "");
Expect(0, 66047, '\P{Is_Blk=		PhaistosDisc}', "");
Expect(1, 66047, '\P{^Is_Blk=		PhaistosDisc}', "");
Expect(0, 65999, '\p{Is_Blk=		PhaistosDisc}', "");
Expect(1, 65999, '\p{^Is_Blk=		PhaistosDisc}', "");
Expect(1, 65999, '\P{Is_Blk=		PhaistosDisc}', "");
Expect(0, 65999, '\P{^Is_Blk=		PhaistosDisc}', "");
Error('\p{Block=- small:=form-Variants}');
Error('\P{Block=- small:=form-Variants}');
Expect(1, 65135, '\p{Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Block=smallformvariants}', "");
Expect(0, 65135, '\P{Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Block=smallformvariants}', "");
Expect(0, 65103, '\p{Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Block=smallformvariants}', "");
Expect(1, 65103, '\P{Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Block=smallformvariants}', "");
Expect(1, 65135, '\p{Block:	 	small-form_Variants}', "");
Expect(0, 65135, '\p{^Block:	 	small-form_Variants}', "");
Expect(0, 65135, '\P{Block:	 	small-form_Variants}', "");
Expect(1, 65135, '\P{^Block:	 	small-form_Variants}', "");
Expect(0, 65103, '\p{Block:	 	small-form_Variants}', "");
Expect(1, 65103, '\p{^Block:	 	small-form_Variants}', "");
Expect(1, 65103, '\P{Block:	 	small-form_Variants}', "");
Expect(0, 65103, '\P{^Block:	 	small-form_Variants}', "");
Error('\p{Blk= -SMALL:=form Variants}');
Error('\P{Blk= -SMALL:=form Variants}');
Expect(1, 65135, '\p{Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Blk=__Small Form_variants}', "");
Expect(0, 65135, '\p{^Blk=__Small Form_variants}', "");
Expect(0, 65135, '\P{Blk=__Small Form_variants}', "");
Expect(1, 65135, '\P{^Blk=__Small Form_variants}', "");
Expect(0, 65103, '\p{Blk=__Small Form_variants}', "");
Expect(1, 65103, '\p{^Blk=__Small Form_variants}', "");
Expect(1, 65103, '\P{Blk=__Small Form_variants}', "");
Expect(0, 65103, '\P{^Blk=__Small Form_variants}', "");
Error('\p{Is_Block:		Small:=form-Variants}');
Error('\P{Is_Block:		Small:=form-Variants}');
Expect(1, 65135, '\p{Is_Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Block=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Block=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Block=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Block=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Block=--Small	Form_Variants}', "");
Expect(0, 65135, '\p{^Is_Block=--Small	Form_Variants}', "");
Expect(0, 65135, '\P{Is_Block=--Small	Form_Variants}', "");
Expect(1, 65135, '\P{^Is_Block=--Small	Form_Variants}', "");
Expect(0, 65103, '\p{Is_Block=--Small	Form_Variants}', "");
Expect(1, 65103, '\p{^Is_Block=--Small	Form_Variants}', "");
Expect(1, 65103, '\P{Is_Block=--Small	Form_Variants}', "");
Expect(0, 65103, '\P{^Is_Block=--Small	Form_Variants}', "");
Error('\p{Is_Blk=- small_Form/a/variants}');
Error('\P{Is_Blk=- small_Form/a/variants}');
Expect(1, 65135, '\p{Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Blk=		Small FORM Variants}', "");
Expect(0, 65135, '\p{^Is_Blk=		Small FORM Variants}', "");
Expect(0, 65135, '\P{Is_Blk=		Small FORM Variants}', "");
Expect(1, 65135, '\P{^Is_Blk=		Small FORM Variants}', "");
Expect(0, 65103, '\p{Is_Blk=		Small FORM Variants}', "");
Expect(1, 65103, '\p{^Is_Blk=		Small FORM Variants}', "");
Expect(1, 65103, '\P{Is_Blk=		Small FORM Variants}', "");
Expect(0, 65103, '\P{^Is_Blk=		Small FORM Variants}', "");
Error('\p{Block=_:=EGYPTIANHieroglyphs}');
Error('\P{Block=_:=EGYPTIANHieroglyphs}');
Expect(1, 78895, '\p{Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Block=egyptian_hieroglyphs}', "");
Expect(0, 78895, '\p{^Block=egyptian_hieroglyphs}', "");
Expect(0, 78895, '\P{Block=egyptian_hieroglyphs}', "");
Expect(1, 78895, '\P{^Block=egyptian_hieroglyphs}', "");
Expect(0, 77823, '\p{Block=egyptian_hieroglyphs}', "");
Expect(1, 77823, '\p{^Block=egyptian_hieroglyphs}', "");
Expect(1, 77823, '\P{Block=egyptian_hieroglyphs}', "");
Expect(0, 77823, '\P{^Block=egyptian_hieroglyphs}', "");
Error('\p{Blk=:=	-egyptian	HIEROGLYPHS}');
Error('\P{Blk=:=	-egyptian	HIEROGLYPHS}');
Expect(1, 78895, '\p{Blk:   egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Blk:   egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Blk:   egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Blk:   egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Blk:   egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Blk:   egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Blk:   egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Blk:   egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Blk=	-EGYPTIAN HIEROGLYPHS}', "");
Error('\p{Is_Block=  EGYPTIAN:=hieroglyphs}');
Error('\P{Is_Block=  EGYPTIAN:=hieroglyphs}');
Expect(1, 78895, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Is_Block: --egyptian-HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Is_Block: --egyptian-HIEROGLYPHS}', "");
Error('\p{Is_Blk=  Egyptian-HIEROGLYPHS/a/}');
Error('\P{Is_Blk=  Egyptian-HIEROGLYPHS/a/}');
Expect(1, 78895, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Is_Blk=	-Egyptian	HIEROGLYPHS}', "");
Error('\p{Block= Latin:=Extended D}');
Error('\P{Block= Latin:=Extended D}');
Expect(1, 43007, '\p{Block=latinextendedd}', "");
Expect(0, 43007, '\p{^Block=latinextendedd}', "");
Expect(0, 43007, '\P{Block=latinextendedd}', "");
Expect(1, 43007, '\P{^Block=latinextendedd}', "");
Expect(0, 42783, '\p{Block=latinextendedd}', "");
Expect(1, 42783, '\p{^Block=latinextendedd}', "");
Expect(1, 42783, '\P{Block=latinextendedd}', "");
Expect(0, 42783, '\P{^Block=latinextendedd}', "");
Expect(1, 43007, '\p{Block:   __Latin Extended-D}', "");
Expect(0, 43007, '\p{^Block:   __Latin Extended-D}', "");
Expect(0, 43007, '\P{Block:   __Latin Extended-D}', "");
Expect(1, 43007, '\P{^Block:   __Latin Extended-D}', "");
Expect(0, 42783, '\p{Block:   __Latin Extended-D}', "");
Expect(1, 42783, '\p{^Block:   __Latin Extended-D}', "");
Expect(1, 42783, '\P{Block:   __Latin Extended-D}', "");
Expect(0, 42783, '\P{^Block:   __Latin Extended-D}', "");
Error('\p{Blk=:=latin-EXTENDED	D}');
Error('\P{Blk=:=latin-EXTENDED	D}');
Expect(1, 43007, '\p{Blk=latinextendedd}', "");
Expect(0, 43007, '\p{^Blk=latinextendedd}', "");
Expect(0, 43007, '\P{Blk=latinextendedd}', "");
Expect(1, 43007, '\P{^Blk=latinextendedd}', "");
Expect(0, 42783, '\p{Blk=latinextendedd}', "");
Expect(1, 42783, '\p{^Blk=latinextendedd}', "");
Expect(1, 42783, '\P{Blk=latinextendedd}', "");
Expect(0, 42783, '\P{^Blk=latinextendedd}', "");
Expect(1, 43007, '\p{Blk=_Latin-EXTENDED_D}', "");
Expect(0, 43007, '\p{^Blk=_Latin-EXTENDED_D}', "");
Expect(0, 43007, '\P{Blk=_Latin-EXTENDED_D}', "");
Expect(1, 43007, '\P{^Blk=_Latin-EXTENDED_D}', "");
Expect(0, 42783, '\p{Blk=_Latin-EXTENDED_D}', "");
Expect(1, 42783, '\p{^Blk=_Latin-EXTENDED_D}', "");
Expect(1, 42783, '\P{Blk=_Latin-EXTENDED_D}', "");
Expect(0, 42783, '\P{^Blk=_Latin-EXTENDED_D}', "");
Error('\p{Is_Block=_	Latin/a/EXTENDED	d}');
Error('\P{Is_Block=_	Latin/a/EXTENDED	d}');
Expect(1, 43007, '\p{Is_Block:latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Block:latinextendedd}', "");
Expect(0, 43007, '\P{Is_Block:latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Block:latinextendedd}', "");
Expect(0, 42783, '\p{Is_Block:latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Block:latinextendedd}', "");
Expect(1, 42783, '\P{Is_Block:latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Block:latinextendedd}', "");
Expect(1, 43007, '\p{Is_Block= -Latin_Extended-D}', "");
Expect(0, 43007, '\p{^Is_Block= -Latin_Extended-D}', "");
Expect(0, 43007, '\P{Is_Block= -Latin_Extended-D}', "");
Expect(1, 43007, '\P{^Is_Block= -Latin_Extended-D}', "");
Expect(0, 42783, '\p{Is_Block= -Latin_Extended-D}', "");
Expect(1, 42783, '\p{^Is_Block= -Latin_Extended-D}', "");
Expect(1, 42783, '\P{Is_Block= -Latin_Extended-D}', "");
Expect(0, 42783, '\P{^Is_Block= -Latin_Extended-D}', "");
Error('\p{Is_Blk=-_latin	extended-D/a/}');
Error('\P{Is_Blk=-_latin	extended-D/a/}');
Expect(1, 43007, '\p{Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\P{Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\p{Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\P{Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\p{Is_Blk=_	Latin-ExtendedD}', "");
Expect(0, 43007, '\p{^Is_Blk=_	Latin-ExtendedD}', "");
Expect(0, 43007, '\P{Is_Blk=_	Latin-ExtendedD}', "");
Expect(1, 43007, '\P{^Is_Blk=_	Latin-ExtendedD}', "");
Expect(0, 42783, '\p{Is_Blk=_	Latin-ExtendedD}', "");
Expect(1, 42783, '\p{^Is_Blk=_	Latin-ExtendedD}', "");
Expect(1, 42783, '\P{Is_Blk=_	Latin-ExtendedD}', "");
Expect(0, 42783, '\P{^Is_Blk=_	Latin-ExtendedD}', "");
Error('\p{Block=/a/Alphabetic	presentation	forms}');
Error('\P{Block=/a/Alphabetic	presentation	forms}');
Expect(1, 64335, '\p{Block:alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Block:alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Block:alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Block:alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Block:alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Block:alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Block:alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Block:alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64335, '\p{^Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64335, '\P{Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64335, '\P{^Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64255, '\p{Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64255, '\p{^Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64255, '\P{Block= Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64255, '\P{^Block= Alphabetic	PRESENTATION FORMS}', "");
Error('\p{Blk=-	Alphabetic/a/Presentation_forms}');
Error('\P{Blk=-	Alphabetic/a/Presentation_forms}');
Expect(1, 64335, '\p{Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Blk=- ALPHABETIC_PresentationForms}', "");
Expect(0, 64335, '\p{^Blk=- ALPHABETIC_PresentationForms}', "");
Expect(0, 64335, '\P{Blk=- ALPHABETIC_PresentationForms}', "");
Expect(1, 64335, '\P{^Blk=- ALPHABETIC_PresentationForms}', "");
Expect(0, 64255, '\p{Blk=- ALPHABETIC_PresentationForms}', "");
Expect(1, 64255, '\p{^Blk=- ALPHABETIC_PresentationForms}', "");
Expect(1, 64255, '\P{Blk=- ALPHABETIC_PresentationForms}', "");
Expect(0, 64255, '\P{^Blk=- ALPHABETIC_PresentationForms}', "");
Error('\p{Is_Block=:= Alphabetic-Presentation	FORMS}');
Error('\P{Is_Block=:= Alphabetic-Presentation	FORMS}');
Expect(1, 64335, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Block=	alphabetic presentation_FORMS}', "");
Expect(0, 64335, '\p{^Is_Block=	alphabetic presentation_FORMS}', "");
Expect(0, 64335, '\P{Is_Block=	alphabetic presentation_FORMS}', "");
Expect(1, 64335, '\P{^Is_Block=	alphabetic presentation_FORMS}', "");
Expect(0, 64255, '\p{Is_Block=	alphabetic presentation_FORMS}', "");
Expect(1, 64255, '\p{^Is_Block=	alphabetic presentation_FORMS}', "");
Expect(1, 64255, '\P{Is_Block=	alphabetic presentation_FORMS}', "");
Expect(0, 64255, '\P{^Is_Block=	alphabetic presentation_FORMS}', "");
Error('\p{Is_Blk= 	Alphabetic:=Presentation_Forms}');
Error('\P{Is_Blk= 	Alphabetic:=Presentation_Forms}');
Expect(1, 64335, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(0, 64335, '\p{^Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(0, 64335, '\P{Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(1, 64335, '\P{^Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(0, 64255, '\p{Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(1, 64255, '\p{^Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(1, 64255, '\P{Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Expect(0, 64255, '\P{^Is_Blk=-_Alphabetic-PRESENTATION_forms}', "");
Error('\p{Block= 	Optical_character	recognition:=}');
Error('\P{Block= 	Optical_character	recognition:=}');
Expect(1, 9311, '\p{Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Block= OPTICAL_Character_Recognition}', "");
Expect(0, 9311, '\p{^Block= OPTICAL_Character_Recognition}', "");
Expect(0, 9311, '\P{Block= OPTICAL_Character_Recognition}', "");
Expect(1, 9311, '\P{^Block= OPTICAL_Character_Recognition}', "");
Expect(0, 9279, '\p{Block= OPTICAL_Character_Recognition}', "");
Expect(1, 9279, '\p{^Block= OPTICAL_Character_Recognition}', "");
Expect(1, 9279, '\P{Block= OPTICAL_Character_Recognition}', "");
Expect(0, 9279, '\P{^Block= OPTICAL_Character_Recognition}', "");
Error('\p{Blk=/a/--OPTICAL_Character	recognition}');
Error('\P{Blk=/a/--OPTICAL_Character	recognition}');
Expect(1, 9311, '\p{Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Blk=	-Optical	Character Recognition}', "");
Expect(0, 9311, '\p{^Blk=	-Optical	Character Recognition}', "");
Expect(0, 9311, '\P{Blk=	-Optical	Character Recognition}', "");
Expect(1, 9311, '\P{^Blk=	-Optical	Character Recognition}', "");
Expect(0, 9279, '\p{Blk=	-Optical	Character Recognition}', "");
Expect(1, 9279, '\p{^Blk=	-Optical	Character Recognition}', "");
Expect(1, 9279, '\P{Blk=	-Optical	Character Recognition}', "");
Expect(0, 9279, '\P{^Blk=	-Optical	Character Recognition}', "");
Error('\p{Is_Block:-Optical	character-recognition:=}');
Error('\P{Is_Block:-Optical	character-recognition:=}');
Expect(1, 9311, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Block=-Optical-Character	recognition}', "");
Expect(0, 9311, '\p{^Is_Block=-Optical-Character	recognition}', "");
Expect(0, 9311, '\P{Is_Block=-Optical-Character	recognition}', "");
Expect(1, 9311, '\P{^Is_Block=-Optical-Character	recognition}', "");
Expect(0, 9279, '\p{Is_Block=-Optical-Character	recognition}', "");
Expect(1, 9279, '\p{^Is_Block=-Optical-Character	recognition}', "");
Expect(1, 9279, '\P{Is_Block=-Optical-Character	recognition}', "");
Expect(0, 9279, '\P{^Is_Block=-Optical-Character	recognition}', "");
Error('\p{Is_Blk=	/a/optical	characterRECOGNITION}');
Error('\P{Is_Blk=	/a/optical	characterRECOGNITION}');
Expect(1, 9311, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(0, 9311, '\p{^Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(0, 9311, '\P{Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(1, 9311, '\P{^Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(0, 9279, '\p{Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(1, 9279, '\p{^Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(1, 9279, '\P{Is_Blk:   -OpticalCHARACTERrecognition}', "");
Expect(0, 9279, '\P{^Is_Blk:   -OpticalCHARACTERrecognition}', "");
Error('\p{Block=:= 	CJK	Unified_ideographs}');
Error('\P{Block=:= 	CJK	Unified_ideographs}');
Expect(1, 40959, '\p{Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Block=_ cjkunified	Ideographs}', "");
Expect(0, 40959, '\p{^Block=_ cjkunified	Ideographs}', "");
Expect(0, 40959, '\P{Block=_ cjkunified	Ideographs}', "");
Expect(1, 40959, '\P{^Block=_ cjkunified	Ideographs}', "");
Expect(0, 19967, '\p{Block=_ cjkunified	Ideographs}', "");
Expect(1, 19967, '\p{^Block=_ cjkunified	Ideographs}', "");
Expect(1, 19967, '\P{Block=_ cjkunified	Ideographs}', "");
Expect(0, 19967, '\P{^Block=_ cjkunified	Ideographs}', "");
Error('\p{Blk= -CJK:=Unified-ideographs}');
Error('\P{Blk= -CJK:=Unified-ideographs}');
Expect(1, 40959, '\p{Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Blk= CJK UNIFIED-Ideographs}', "");
Expect(0, 40959, '\p{^Blk= CJK UNIFIED-Ideographs}', "");
Expect(0, 40959, '\P{Blk= CJK UNIFIED-Ideographs}', "");
Expect(1, 40959, '\P{^Blk= CJK UNIFIED-Ideographs}', "");
Expect(0, 19967, '\p{Blk= CJK UNIFIED-Ideographs}', "");
Expect(1, 19967, '\p{^Blk= CJK UNIFIED-Ideographs}', "");
Expect(1, 19967, '\P{Blk= CJK UNIFIED-Ideographs}', "");
Expect(0, 19967, '\P{^Blk= CJK UNIFIED-Ideographs}', "");
Error('\p{Is_Block:_CJKUnified	Ideographs:=}');
Error('\P{Is_Block:_CJKUnified	Ideographs:=}');
Expect(1, 40959, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\P{Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\p{Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\P{Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^Is_Block=		CJK_Unified IDEOGRAPHS}', "");
Error('\p{Is_Blk=		cjk:=Unified ideographs}');
Error('\P{Is_Blk=		cjk:=Unified ideographs}');
Expect(1, 40959, '\p{Is_Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\P{Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\p{Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\P{Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^Is_Blk=_-cjk Unified IDEOGRAPHS}', "");
Error('\p{Block= :=ANCIENT-SYMBOLS}');
Error('\P{Block= :=ANCIENT-SYMBOLS}');
Expect(1, 65999, '\p{Block:	ancientsymbols}', "");
Expect(0, 65999, '\p{^Block:	ancientsymbols}', "");
Expect(0, 65999, '\P{Block:	ancientsymbols}', "");
Expect(1, 65999, '\P{^Block:	ancientsymbols}', "");
Expect(0, 65935, '\p{Block:	ancientsymbols}', "");
Expect(1, 65935, '\p{^Block:	ancientsymbols}', "");
Expect(1, 65935, '\P{Block:	ancientsymbols}', "");
Expect(0, 65935, '\P{^Block:	ancientsymbols}', "");
Expect(1, 65999, '\p{Block=-	ANCIENT_symbols}', "");
Expect(0, 65999, '\p{^Block=-	ANCIENT_symbols}', "");
Expect(0, 65999, '\P{Block=-	ANCIENT_symbols}', "");
Expect(1, 65999, '\P{^Block=-	ANCIENT_symbols}', "");
Expect(0, 65935, '\p{Block=-	ANCIENT_symbols}', "");
Expect(1, 65935, '\p{^Block=-	ANCIENT_symbols}', "");
Expect(1, 65935, '\P{Block=-	ANCIENT_symbols}', "");
Expect(0, 65935, '\P{^Block=-	ANCIENT_symbols}', "");
Error('\p{Blk=	-ancient/a/symbols}');
Error('\P{Blk=	-ancient/a/symbols}');
Expect(1, 65999, '\p{Blk=ancientsymbols}', "");
Expect(0, 65999, '\p{^Blk=ancientsymbols}', "");
Expect(0, 65999, '\P{Blk=ancientsymbols}', "");
Expect(1, 65999, '\P{^Blk=ancientsymbols}', "");
Expect(0, 65935, '\p{Blk=ancientsymbols}', "");
Expect(1, 65935, '\p{^Blk=ancientsymbols}', "");
Expect(1, 65935, '\P{Blk=ancientsymbols}', "");
Expect(0, 65935, '\P{^Blk=ancientsymbols}', "");
Expect(1, 65999, '\p{Blk=	Ancient_SYMBOLS}', "");
Expect(0, 65999, '\p{^Blk=	Ancient_SYMBOLS}', "");
Expect(0, 65999, '\P{Blk=	Ancient_SYMBOLS}', "");
Expect(1, 65999, '\P{^Blk=	Ancient_SYMBOLS}', "");
Expect(0, 65935, '\p{Blk=	Ancient_SYMBOLS}', "");
Expect(1, 65935, '\p{^Blk=	Ancient_SYMBOLS}', "");
Expect(1, 65935, '\P{Blk=	Ancient_SYMBOLS}', "");
Expect(0, 65935, '\P{^Blk=	Ancient_SYMBOLS}', "");
Error('\p{Is_Block=-	AncientSymbols/a/}');
Error('\P{Is_Block=-	AncientSymbols/a/}');
Expect(1, 65999, '\p{Is_Block=ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Block=ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Block=ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Block=ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Block=ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Block=ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Block=ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Block=ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Block=	-Ancient-Symbols}', "");
Expect(0, 65999, '\p{^Is_Block=	-Ancient-Symbols}', "");
Expect(0, 65999, '\P{Is_Block=	-Ancient-Symbols}', "");
Expect(1, 65999, '\P{^Is_Block=	-Ancient-Symbols}', "");
Expect(0, 65935, '\p{Is_Block=	-Ancient-Symbols}', "");
Expect(1, 65935, '\p{^Is_Block=	-Ancient-Symbols}', "");
Expect(1, 65935, '\P{Is_Block=	-Ancient-Symbols}', "");
Expect(0, 65935, '\P{^Is_Block=	-Ancient-Symbols}', "");
Error('\p{Is_Blk=:=ANCIENT SYMBOLS}');
Error('\P{Is_Blk=:=ANCIENT SYMBOLS}');
Expect(1, 65999, '\p{Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Blk=_Ancient	symbols}', "");
Expect(0, 65999, '\p{^Is_Blk=_Ancient	symbols}', "");
Expect(0, 65999, '\P{Is_Blk=_Ancient	symbols}', "");
Expect(1, 65999, '\P{^Is_Blk=_Ancient	symbols}', "");
Expect(0, 65935, '\p{Is_Blk=_Ancient	symbols}', "");
Expect(1, 65935, '\p{^Is_Blk=_Ancient	symbols}', "");
Expect(1, 65935, '\P{Is_Blk=_Ancient	symbols}', "");
Expect(0, 65935, '\P{^Is_Blk=_Ancient	symbols}', "");
Error('\p{Block=:=- Gothic}');
Error('\P{Block=:=- Gothic}');
Expect(1, 66383, '\p{Block=gothic}', "");
Expect(0, 66383, '\p{^Block=gothic}', "");
Expect(0, 66383, '\P{Block=gothic}', "");
Expect(1, 66383, '\P{^Block=gothic}', "");
Expect(0, 66351, '\p{Block=gothic}', "");
Expect(1, 66351, '\p{^Block=gothic}', "");
Expect(1, 66351, '\P{Block=gothic}', "");
Expect(0, 66351, '\P{^Block=gothic}', "");
Expect(1, 66383, '\p{Block=_gothic}', "");
Expect(0, 66383, '\p{^Block=_gothic}', "");
Expect(0, 66383, '\P{Block=_gothic}', "");
Expect(1, 66383, '\P{^Block=_gothic}', "");
Expect(0, 66351, '\p{Block=_gothic}', "");
Expect(1, 66351, '\p{^Block=_gothic}', "");
Expect(1, 66351, '\P{Block=_gothic}', "");
Expect(0, 66351, '\P{^Block=_gothic}', "");
Error('\p{Blk=:=	Gothic}');
Error('\P{Blk=:=	Gothic}');
Expect(1, 66383, '\p{Blk=gothic}', "");
Expect(0, 66383, '\p{^Blk=gothic}', "");
Expect(0, 66383, '\P{Blk=gothic}', "");
Expect(1, 66383, '\P{^Blk=gothic}', "");
Expect(0, 66351, '\p{Blk=gothic}', "");
Expect(1, 66351, '\p{^Blk=gothic}', "");
Expect(1, 66351, '\P{Blk=gothic}', "");
Expect(0, 66351, '\P{^Blk=gothic}', "");
Expect(1, 66383, '\p{Blk=-_Gothic}', "");
Expect(0, 66383, '\p{^Blk=-_Gothic}', "");
Expect(0, 66383, '\P{Blk=-_Gothic}', "");
Expect(1, 66383, '\P{^Blk=-_Gothic}', "");
Expect(0, 66351, '\p{Blk=-_Gothic}', "");
Expect(1, 66351, '\p{^Blk=-_Gothic}', "");
Expect(1, 66351, '\P{Blk=-_Gothic}', "");
Expect(0, 66351, '\P{^Blk=-_Gothic}', "");
Error('\p{Is_Block=:=Gothic}');
Error('\P{Is_Block=:=Gothic}');
Expect(1, 66383, '\p{Is_Block=gothic}', "");
Expect(0, 66383, '\p{^Is_Block=gothic}', "");
Expect(0, 66383, '\P{Is_Block=gothic}', "");
Expect(1, 66383, '\P{^Is_Block=gothic}', "");
Expect(0, 66351, '\p{Is_Block=gothic}', "");
Expect(1, 66351, '\p{^Is_Block=gothic}', "");
Expect(1, 66351, '\P{Is_Block=gothic}', "");
Expect(0, 66351, '\P{^Is_Block=gothic}', "");
Expect(1, 66383, '\p{Is_Block= GOTHIC}', "");
Expect(0, 66383, '\p{^Is_Block= GOTHIC}', "");
Expect(0, 66383, '\P{Is_Block= GOTHIC}', "");
Expect(1, 66383, '\P{^Is_Block= GOTHIC}', "");
Expect(0, 66351, '\p{Is_Block= GOTHIC}', "");
Expect(1, 66351, '\p{^Is_Block= GOTHIC}', "");
Expect(1, 66351, '\P{Is_Block= GOTHIC}', "");
Expect(0, 66351, '\P{^Is_Block= GOTHIC}', "");
Error('\p{Is_Blk=:=GOTHIC}');
Error('\P{Is_Blk=:=GOTHIC}');
Expect(1, 66383, '\p{Is_Blk=gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=gothic}', "");
Expect(0, 66383, '\P{Is_Blk=gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=gothic}', "");
Expect(0, 66351, '\p{Is_Blk=gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=gothic}', "");
Expect(1, 66351, '\P{Is_Blk=gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=gothic}', "");
Expect(1, 66383, '\p{Is_Blk=_-Gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=_-Gothic}', "");
Expect(0, 66383, '\P{Is_Blk=_-Gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=_-Gothic}', "");
Expect(0, 66351, '\p{Is_Blk=_-Gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=_-Gothic}', "");
Expect(1, 66351, '\P{Is_Blk=_-Gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=_-Gothic}', "");
Error('\p{Block=_:=ETHIOPIC}');
Error('\P{Block=_:=ETHIOPIC}');
Expect(1, 4991, '\p{Block=ethiopic}', "");
Expect(0, 4991, '\p{^Block=ethiopic}', "");
Expect(0, 4991, '\P{Block=ethiopic}', "");
Expect(1, 4991, '\P{^Block=ethiopic}', "");
Expect(0, 4607, '\p{Block=ethiopic}', "");
Expect(1, 4607, '\p{^Block=ethiopic}', "");
Expect(1, 4607, '\P{Block=ethiopic}', "");
Expect(0, 4607, '\P{^Block=ethiopic}', "");
Expect(1, 4991, '\p{Block= Ethiopic}', "");
Expect(0, 4991, '\p{^Block= Ethiopic}', "");
Expect(0, 4991, '\P{Block= Ethiopic}', "");
Expect(1, 4991, '\P{^Block= Ethiopic}', "");
Expect(0, 4607, '\p{Block= Ethiopic}', "");
Expect(1, 4607, '\p{^Block= Ethiopic}', "");
Expect(1, 4607, '\P{Block= Ethiopic}', "");
Expect(0, 4607, '\P{^Block= Ethiopic}', "");
Error('\p{Blk=-	Ethiopic/a/}');
Error('\P{Blk=-	Ethiopic/a/}');
Expect(1, 4991, '\p{Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Blk=ethiopic}', "");
Expect(0, 4991, '\P{Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Blk=ethiopic}', "");
Expect(0, 4607, '\p{Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Blk=ethiopic}', "");
Expect(1, 4607, '\P{Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Blk=ethiopic}', "");
Expect(1, 4991, '\p{Blk=		ETHIOPIC}', "");
Expect(0, 4991, '\p{^Blk=		ETHIOPIC}', "");
Expect(0, 4991, '\P{Blk=		ETHIOPIC}', "");
Expect(1, 4991, '\P{^Blk=		ETHIOPIC}', "");
Expect(0, 4607, '\p{Blk=		ETHIOPIC}', "");
Expect(1, 4607, '\p{^Blk=		ETHIOPIC}', "");
Expect(1, 4607, '\P{Blk=		ETHIOPIC}', "");
Expect(0, 4607, '\P{^Blk=		ETHIOPIC}', "");
Error('\p{Is_Block:_/a/ETHIOPIC}');
Error('\P{Is_Block:_/a/ETHIOPIC}');
Expect(1, 4991, '\p{Is_Block=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Block=ethiopic}', "");
Expect(0, 4991, '\P{Is_Block=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Block=ethiopic}', "");
Expect(0, 4607, '\p{Is_Block=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Block=ethiopic}', "");
Expect(1, 4607, '\P{Is_Block=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Block=ethiopic}', "");
Expect(1, 4991, '\p{Is_Block= Ethiopic}', "");
Expect(0, 4991, '\p{^Is_Block= Ethiopic}', "");
Expect(0, 4991, '\P{Is_Block= Ethiopic}', "");
Expect(1, 4991, '\P{^Is_Block= Ethiopic}', "");
Expect(0, 4607, '\p{Is_Block= Ethiopic}', "");
Expect(1, 4607, '\p{^Is_Block= Ethiopic}', "");
Expect(1, 4607, '\P{Is_Block= Ethiopic}', "");
Expect(0, 4607, '\P{^Is_Block= Ethiopic}', "");
Error('\p{Is_Blk=/a/_ Ethiopic}');
Error('\P{Is_Blk=/a/_ Ethiopic}');
Expect(1, 4991, '\p{Is_Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Blk=ethiopic}', "");
Expect(0, 4991, '\P{Is_Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Blk=ethiopic}', "");
Expect(0, 4607, '\p{Is_Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Blk=ethiopic}', "");
Expect(1, 4607, '\P{Is_Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Blk=ethiopic}', "");
Expect(1, 4991, '\p{Is_Blk=_Ethiopic}', "");
Expect(0, 4991, '\p{^Is_Blk=_Ethiopic}', "");
Expect(0, 4991, '\P{Is_Blk=_Ethiopic}', "");
Expect(1, 4991, '\P{^Is_Blk=_Ethiopic}', "");
Expect(0, 4607, '\p{Is_Blk=_Ethiopic}', "");
Expect(1, 4607, '\p{^Is_Blk=_Ethiopic}', "");
Expect(1, 4607, '\P{Is_Blk=_Ethiopic}', "");
Expect(0, 4607, '\P{^Is_Blk=_Ethiopic}', "");
Error('\p{Block=_ BUGINESE:=}');
Error('\P{Block=_ BUGINESE:=}');
Expect(1, 6687, '\p{Block=buginese}', "");
Expect(0, 6687, '\p{^Block=buginese}', "");
Expect(0, 6687, '\P{Block=buginese}', "");
Expect(1, 6687, '\P{^Block=buginese}', "");
Expect(0, 6655, '\p{Block=buginese}', "");
Expect(1, 6655, '\p{^Block=buginese}', "");
Expect(1, 6655, '\P{Block=buginese}', "");
Expect(0, 6655, '\P{^Block=buginese}', "");
Expect(1, 6687, '\p{Block=	BUGINESE}', "");
Expect(0, 6687, '\p{^Block=	BUGINESE}', "");
Expect(0, 6687, '\P{Block=	BUGINESE}', "");
Expect(1, 6687, '\P{^Block=	BUGINESE}', "");
Expect(0, 6655, '\p{Block=	BUGINESE}', "");
Expect(1, 6655, '\p{^Block=	BUGINESE}', "");
Expect(1, 6655, '\P{Block=	BUGINESE}', "");
Expect(0, 6655, '\P{^Block=	BUGINESE}', "");
Error('\p{Blk= :=Buginese}');
Error('\P{Blk= :=Buginese}');
Expect(1, 6687, '\p{Blk=buginese}', "");
Expect(0, 6687, '\p{^Blk=buginese}', "");
Expect(0, 6687, '\P{Blk=buginese}', "");
Expect(1, 6687, '\P{^Blk=buginese}', "");
Expect(0, 6655, '\p{Blk=buginese}', "");
Expect(1, 6655, '\p{^Blk=buginese}', "");
Expect(1, 6655, '\P{Blk=buginese}', "");
Expect(0, 6655, '\P{^Blk=buginese}', "");
Expect(1, 6687, '\p{Blk:	 Buginese}', "");
Expect(0, 6687, '\p{^Blk:	 Buginese}', "");
Expect(0, 6687, '\P{Blk:	 Buginese}', "");
Expect(1, 6687, '\P{^Blk:	 Buginese}', "");
Expect(0, 6655, '\p{Blk:	 Buginese}', "");
Expect(1, 6655, '\p{^Blk:	 Buginese}', "");
Expect(1, 6655, '\P{Blk:	 Buginese}', "");
Expect(0, 6655, '\P{^Blk:	 Buginese}', "");
Error('\p{Is_Block=/a/ buginese}');
Error('\P{Is_Block=/a/ buginese}');
Expect(1, 6687, '\p{Is_Block=buginese}', "");
Expect(0, 6687, '\p{^Is_Block=buginese}', "");
Expect(0, 6687, '\P{Is_Block=buginese}', "");
Expect(1, 6687, '\P{^Is_Block=buginese}', "");
Expect(0, 6655, '\p{Is_Block=buginese}', "");
Expect(1, 6655, '\p{^Is_Block=buginese}', "");
Expect(1, 6655, '\P{Is_Block=buginese}', "");
Expect(0, 6655, '\P{^Is_Block=buginese}', "");
Expect(1, 6687, '\p{Is_Block:	 	Buginese}', "");
Expect(0, 6687, '\p{^Is_Block:	 	Buginese}', "");
Expect(0, 6687, '\P{Is_Block:	 	Buginese}', "");
Expect(1, 6687, '\P{^Is_Block:	 	Buginese}', "");
Expect(0, 6655, '\p{Is_Block:	 	Buginese}', "");
Expect(1, 6655, '\p{^Is_Block:	 	Buginese}', "");
Expect(1, 6655, '\P{Is_Block:	 	Buginese}', "");
Expect(0, 6655, '\P{^Is_Block:	 	Buginese}', "");
Error('\p{Is_Blk=	/a/BUGINESE}');
Error('\P{Is_Blk=	/a/BUGINESE}');
Expect(1, 6687, '\p{Is_Blk:   buginese}', "");
Expect(0, 6687, '\p{^Is_Blk:   buginese}', "");
Expect(0, 6687, '\P{Is_Blk:   buginese}', "");
Expect(1, 6687, '\P{^Is_Blk:   buginese}', "");
Expect(0, 6655, '\p{Is_Blk:   buginese}', "");
Expect(1, 6655, '\p{^Is_Blk:   buginese}', "");
Expect(1, 6655, '\P{Is_Blk:   buginese}', "");
Expect(0, 6655, '\P{^Is_Blk:   buginese}', "");
Expect(1, 6687, '\p{Is_Blk=--BUGINESE}', "");
Expect(0, 6687, '\p{^Is_Blk=--BUGINESE}', "");
Expect(0, 6687, '\P{Is_Blk=--BUGINESE}', "");
Expect(1, 6687, '\P{^Is_Blk=--BUGINESE}', "");
Expect(0, 6655, '\p{Is_Blk=--BUGINESE}', "");
Expect(1, 6655, '\p{^Is_Blk=--BUGINESE}', "");
Expect(1, 6655, '\P{Is_Blk=--BUGINESE}', "");
Expect(0, 6655, '\P{^Is_Blk=--BUGINESE}', "");
Error('\p{Block=-	MATHEMATICAL:=Alphanumeric	Symbols}');
Error('\P{Block=-	MATHEMATICAL:=Alphanumeric	Symbols}');
Expect(1, 120831, '\p{Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(0, 120831, '\p{^Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(0, 120831, '\P{Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(1, 120831, '\P{^Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(0, 119807, '\p{Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(1, 119807, '\p{^Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(1, 119807, '\P{Block= MathematicalAlphanumericSYMBOLS}', "");
Expect(0, 119807, '\P{^Block= MathematicalAlphanumericSYMBOLS}', "");
Error('\p{Blk=	-MATHEMATICAL/a/ALPHANUMERIC	symbols}');
Error('\P{Blk=	-MATHEMATICAL/a/ALPHANUMERIC	symbols}');
Expect(1, 120831, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Blk= Mathematical	Alphanumeric symbols}', "");
Expect(0, 120831, '\p{^Blk= Mathematical	Alphanumeric symbols}', "");
Expect(0, 120831, '\P{Blk= Mathematical	Alphanumeric symbols}', "");
Expect(1, 120831, '\P{^Blk= Mathematical	Alphanumeric symbols}', "");
Expect(0, 119807, '\p{Blk= Mathematical	Alphanumeric symbols}', "");
Expect(1, 119807, '\p{^Blk= Mathematical	Alphanumeric symbols}', "");
Expect(1, 119807, '\P{Blk= Mathematical	Alphanumeric symbols}', "");
Expect(0, 119807, '\P{^Blk= Mathematical	Alphanumeric symbols}', "");
Error('\p{Is_Block=	/a/mathematical_AlphanumericSymbols}');
Error('\P{Is_Block=	/a/mathematical_AlphanumericSymbols}');
Expect(1, 120831, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(0, 120831, '\p{^Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(0, 120831, '\P{Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(1, 120831, '\P{^Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(0, 119807, '\p{Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(1, 119807, '\p{^Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(1, 119807, '\P{Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Expect(0, 119807, '\P{^Is_Block:_Mathematical Alphanumeric_Symbols}', "");
Error('\p{Is_Blk=		MATHEMATICAL:=ALPHANUMERIC-symbols}');
Error('\P{Is_Blk=		MATHEMATICAL:=ALPHANUMERIC-symbols}');
Expect(1, 120831, '\p{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(0, 120831, '\p{^Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(0, 120831, '\P{Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(1, 120831, '\P{^Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(0, 119807, '\p{Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(1, 119807, '\p{^Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(1, 119807, '\P{Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Expect(0, 119807, '\P{^Is_Blk=- MathematicalALPHANUMERIC_Symbols}', "");
Error('\p{Block:	 _Inscriptional	Pahlavi:=}');
Error('\P{Block:	 _Inscriptional	Pahlavi:=}');
Expect(1, 68479, '\p{Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Block=		Inscriptional	Pahlavi}', "");
Expect(0, 68479, '\p{^Block=		Inscriptional	Pahlavi}', "");
Expect(0, 68479, '\P{Block=		Inscriptional	Pahlavi}', "");
Expect(1, 68479, '\P{^Block=		Inscriptional	Pahlavi}', "");
Expect(0, 68447, '\p{Block=		Inscriptional	Pahlavi}', "");
Expect(1, 68447, '\p{^Block=		Inscriptional	Pahlavi}', "");
Expect(1, 68447, '\P{Block=		Inscriptional	Pahlavi}', "");
Expect(0, 68447, '\P{^Block=		Inscriptional	Pahlavi}', "");
Error('\p{Blk=/a/_Inscriptional_Pahlavi}');
Error('\P{Blk=/a/_Inscriptional_Pahlavi}');
Expect(1, 68479, '\p{Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68479, '\p{^Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68479, '\P{Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68479, '\P{^Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68447, '\p{Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68447, '\p{^Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68447, '\P{Blk=INSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68447, '\P{^Blk=INSCRIPTIONAL	Pahlavi}', "");
Error('\p{Is_Block:	 _inscriptional Pahlavi/a/}');
Error('\P{Is_Block:	 _inscriptional Pahlavi/a/}');
Expect(1, 68479, '\p{Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Block=_inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Block=_inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Block=_inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Block=_inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Block=_inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Block=_inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Block=_inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Block=_inscriptionalpahlavi}', "");
Error('\p{Is_Blk= _Inscriptional-pahlavi:=}');
Error('\P{Is_Blk= _Inscriptional-pahlavi:=}');
Expect(1, 68479, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Blk=_	InscriptionalPahlavi}', "");
Expect(0, 68479, '\p{^Is_Blk=_	InscriptionalPahlavi}', "");
Expect(0, 68479, '\P{Is_Blk=_	InscriptionalPahlavi}', "");
Expect(1, 68479, '\P{^Is_Blk=_	InscriptionalPahlavi}', "");
Expect(0, 68447, '\p{Is_Blk=_	InscriptionalPahlavi}', "");
Expect(1, 68447, '\p{^Is_Blk=_	InscriptionalPahlavi}', "");
Expect(1, 68447, '\P{Is_Blk=_	InscriptionalPahlavi}', "");
Expect(0, 68447, '\P{^Is_Blk=_	InscriptionalPahlavi}', "");
Error('\p{Block= /a/Unified_CANADIAN-Aboriginal_syllabics-Extended}');
Error('\P{Block= /a/Unified_CANADIAN-Aboriginal_syllabics-Extended}');
Expect(1, 6399, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(0, 6399, '\p{^Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(0, 6399, '\P{Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(1, 6399, '\P{^Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(0, 6319, '\p{Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(1, 6319, '\p{^Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(1, 6319, '\P{Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Expect(0, 6319, '\P{^Block= unifiedCanadianAboriginalSYLLABICSEXTENDED}', "");
Error('\p{Blk=_ UnifiedCanadian:=ABORIGINAL	Syllabics-Extended}');
Error('\P{Blk=_ UnifiedCanadian:=ABORIGINAL	Syllabics-Extended}');
Expect(1, 6399, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(0, 6399, '\p{^Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(0, 6399, '\P{Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(1, 6399, '\P{^Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(0, 6319, '\p{Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(1, 6319, '\p{^Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(1, 6319, '\P{Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Expect(0, 6319, '\P{^Blk:    	UNIFIED	CANADIANAboriginal SYLLABICS-extended}', "");
Error('\p{Is_Block=-Unified-Canadian/a/Aboriginal-syllabics Extended}');
Error('\P{Is_Block=-Unified-Canadian/a/Aboriginal-syllabics Extended}');
Expect(1, 6399, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(0, 6399, '\p{^Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(0, 6399, '\P{Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(1, 6399, '\P{^Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(0, 6319, '\p{Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(1, 6319, '\p{^Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(1, 6319, '\P{Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Expect(0, 6319, '\P{^Is_Block=	 UNIFIED-Canadian	AboriginalSyllabics extended}', "");
Error('\p{Is_Blk=:=- Unifiedcanadian Aboriginal_SYLLABICS	Extended}');
Error('\P{Is_Blk=:=- Unifiedcanadian Aboriginal_SYLLABICS	Extended}');
Expect(1, 6399, '\p{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(0, 6399, '\p{^Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(0, 6399, '\P{Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(1, 6399, '\P{^Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(0, 6319, '\p{Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(1, 6319, '\p{^Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(1, 6319, '\P{Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Expect(0, 6319, '\P{^Is_Blk:	 unified canadian	ABORIGINAL	syllabics_EXTENDED}', "");
Error('\p{Block: -Kangxi_radicals/a/}');
Error('\P{Block: -Kangxi_radicals/a/}');
Expect(1, 12255, '\p{Block=kangxiradicals}', "");
Expect(0, 12255, '\p{^Block=kangxiradicals}', "");
Expect(0, 12255, '\P{Block=kangxiradicals}', "");
Expect(1, 12255, '\P{^Block=kangxiradicals}', "");
Expect(0, 12031, '\p{Block=kangxiradicals}', "");
Expect(1, 12031, '\p{^Block=kangxiradicals}', "");
Expect(1, 12031, '\P{Block=kangxiradicals}', "");
Expect(0, 12031, '\P{^Block=kangxiradicals}', "");
Expect(1, 12255, '\p{Block:KANGXI-Radicals}', "");
Expect(0, 12255, '\p{^Block:KANGXI-Radicals}', "");
Expect(0, 12255, '\P{Block:KANGXI-Radicals}', "");
Expect(1, 12255, '\P{^Block:KANGXI-Radicals}', "");
Expect(0, 12031, '\p{Block:KANGXI-Radicals}', "");
Expect(1, 12031, '\p{^Block:KANGXI-Radicals}', "");
Expect(1, 12031, '\P{Block:KANGXI-Radicals}', "");
Expect(0, 12031, '\P{^Block:KANGXI-Radicals}', "");
Error('\p{Blk:    _KANGXIradicals/a/}');
Error('\P{Blk:    _KANGXIradicals/a/}');
Expect(1, 12255, '\p{Blk=kangxiradicals}', "");
Expect(0, 12255, '\p{^Blk=kangxiradicals}', "");
Expect(0, 12255, '\P{Blk=kangxiradicals}', "");
Expect(1, 12255, '\P{^Blk=kangxiradicals}', "");
Expect(0, 12031, '\p{Blk=kangxiradicals}', "");
Expect(1, 12031, '\p{^Blk=kangxiradicals}', "");
Expect(1, 12031, '\P{Blk=kangxiradicals}', "");
Expect(0, 12031, '\P{^Blk=kangxiradicals}', "");
Expect(1, 12255, '\p{Blk=  kangxi_Radicals}', "");
Expect(0, 12255, '\p{^Blk=  kangxi_Radicals}', "");
Expect(0, 12255, '\P{Blk=  kangxi_Radicals}', "");
Expect(1, 12255, '\P{^Blk=  kangxi_Radicals}', "");
Expect(0, 12031, '\p{Blk=  kangxi_Radicals}', "");
Expect(1, 12031, '\p{^Blk=  kangxi_Radicals}', "");
Expect(1, 12031, '\P{Blk=  kangxi_Radicals}', "");
Expect(0, 12031, '\P{^Blk=  kangxi_Radicals}', "");
Error('\p{Is_Block=--Kangxi RADICALS/a/}');
Error('\P{Is_Block=--Kangxi RADICALS/a/}');
Expect(1, 12255, '\p{Is_Block=kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Block=kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Block=kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Block=kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Block=kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Block=kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Block=kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Block=kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Block=_ Kangxi-radicals}', "");
Expect(0, 12255, '\p{^Is_Block=_ Kangxi-radicals}', "");
Expect(0, 12255, '\P{Is_Block=_ Kangxi-radicals}', "");
Expect(1, 12255, '\P{^Is_Block=_ Kangxi-radicals}', "");
Expect(0, 12031, '\p{Is_Block=_ Kangxi-radicals}', "");
Expect(1, 12031, '\p{^Is_Block=_ Kangxi-radicals}', "");
Expect(1, 12031, '\P{Is_Block=_ Kangxi-radicals}', "");
Expect(0, 12031, '\P{^Is_Block=_ Kangxi-radicals}', "");
Error('\p{Is_Blk:	/a/KangxiRadicals}');
Error('\P{Is_Blk:	/a/KangxiRadicals}');
Expect(1, 12255, '\p{Is_Blk=kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Blk=kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Blk=kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Blk=kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Blk=kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Blk=kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Blk=kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Blk=kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Blk=	Kangxi-radicals}', "");
Expect(0, 12255, '\p{^Is_Blk=	Kangxi-radicals}', "");
Expect(0, 12255, '\P{Is_Blk=	Kangxi-radicals}', "");
Expect(1, 12255, '\P{^Is_Blk=	Kangxi-radicals}', "");
Expect(0, 12031, '\p{Is_Blk=	Kangxi-radicals}', "");
Expect(1, 12031, '\p{^Is_Blk=	Kangxi-radicals}', "");
Expect(1, 12031, '\P{Is_Blk=	Kangxi-radicals}', "");
Expect(0, 12031, '\P{^Is_Blk=	Kangxi-radicals}', "");
Error('\p{Block=-_Arabic presentation	FORMS_b:=}');
Error('\P{Block=-_Arabic presentation	FORMS_b:=}');
Expect(1, 65279, '\p{Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Block=_Arabic	presentation	FORMS-B}', "");
Expect(0, 65279, '\p{^Block=_Arabic	presentation	FORMS-B}', "");
Expect(0, 65279, '\P{Block=_Arabic	presentation	FORMS-B}', "");
Expect(1, 65279, '\P{^Block=_Arabic	presentation	FORMS-B}', "");
Expect(0, 65135, '\p{Block=_Arabic	presentation	FORMS-B}', "");
Expect(1, 65135, '\p{^Block=_Arabic	presentation	FORMS-B}', "");
Expect(1, 65135, '\P{Block=_Arabic	presentation	FORMS-B}', "");
Expect(0, 65135, '\P{^Block=_Arabic	presentation	FORMS-B}', "");
Error('\p{Blk=_-ARABIC/a/PresentationForms-B}');
Error('\P{Blk=_-ARABIC/a/PresentationForms-B}');
Expect(1, 65279, '\p{Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(0, 65279, '\p{^Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(0, 65279, '\P{Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(1, 65279, '\P{^Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(0, 65135, '\p{Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(1, 65135, '\p{^Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(1, 65135, '\P{Blk=_	ArabicPRESENTATION FORMS B}', "");
Expect(0, 65135, '\P{^Blk=_	ArabicPRESENTATION FORMS B}', "");
Error('\p{Is_Block=/a/	ARABIC	Presentation FORMSB}');
Error('\P{Is_Block=/a/	ARABIC	Presentation FORMSB}');
Expect(1, 65279, '\p{Is_Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Block=	arabic_presentation	Forms_b}', "");
Expect(0, 65279, '\p{^Is_Block=	arabic_presentation	Forms_b}', "");
Expect(0, 65279, '\P{Is_Block=	arabic_presentation	Forms_b}', "");
Expect(1, 65279, '\P{^Is_Block=	arabic_presentation	Forms_b}', "");
Expect(0, 65135, '\p{Is_Block=	arabic_presentation	Forms_b}', "");
Expect(1, 65135, '\p{^Is_Block=	arabic_presentation	Forms_b}', "");
Expect(1, 65135, '\P{Is_Block=	arabic_presentation	Forms_b}', "");
Expect(0, 65135, '\P{^Is_Block=	arabic_presentation	Forms_b}', "");
Error('\p{Is_Blk= :=arabic_presentation Forms B}');
Error('\P{Is_Blk= :=arabic_presentation Forms B}');
Expect(1, 65279, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(0, 65279, '\p{^Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(0, 65279, '\P{Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(1, 65279, '\P{^Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(0, 65135, '\p{Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(1, 65135, '\p{^Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(1, 65135, '\P{Is_Blk=_ARABIC_presentation_FORMS B}', "");
Expect(0, 65135, '\P{^Is_Blk=_ARABIC_presentation_FORMS B}', "");
Error('\p{Block=:=-_Gurmukhi}');
Error('\P{Block=:=-_Gurmukhi}');
Expect(1, 2687, '\p{Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Block=gurmukhi}', "");
Expect(0, 2687, '\P{Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Block=gurmukhi}', "");
Expect(0, 2559, '\p{Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Block=gurmukhi}', "");
Expect(1, 2559, '\P{Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Block=gurmukhi}', "");
Expect(1, 2687, '\p{Block=  GURMUKHI}', "");
Expect(0, 2687, '\p{^Block=  GURMUKHI}', "");
Expect(0, 2687, '\P{Block=  GURMUKHI}', "");
Expect(1, 2687, '\P{^Block=  GURMUKHI}', "");
Expect(0, 2559, '\p{Block=  GURMUKHI}', "");
Expect(1, 2559, '\p{^Block=  GURMUKHI}', "");
Expect(1, 2559, '\P{Block=  GURMUKHI}', "");
Expect(0, 2559, '\P{^Block=  GURMUKHI}', "");
Error('\p{Blk=-/a/Gurmukhi}');
Error('\P{Blk=-/a/Gurmukhi}');
Expect(1, 2687, '\p{Blk=gurmukhi}', "");
Expect(0, 2687, '\p{^Blk=gurmukhi}', "");
Expect(0, 2687, '\P{Blk=gurmukhi}', "");
Expect(1, 2687, '\P{^Blk=gurmukhi}', "");
Expect(0, 2559, '\p{Blk=gurmukhi}', "");
Expect(1, 2559, '\p{^Blk=gurmukhi}', "");
Expect(1, 2559, '\P{Blk=gurmukhi}', "");
Expect(0, 2559, '\P{^Blk=gurmukhi}', "");
Expect(1, 2687, '\p{Blk=_Gurmukhi}', "");
Expect(0, 2687, '\p{^Blk=_Gurmukhi}', "");
Expect(0, 2687, '\P{Blk=_Gurmukhi}', "");
Expect(1, 2687, '\P{^Blk=_Gurmukhi}', "");
Expect(0, 2559, '\p{Blk=_Gurmukhi}', "");
Expect(1, 2559, '\p{^Blk=_Gurmukhi}', "");
Expect(1, 2559, '\P{Blk=_Gurmukhi}', "");
Expect(0, 2559, '\P{^Blk=_Gurmukhi}', "");
Error('\p{Is_Block=/a/-GURMUKHI}');
Error('\P{Is_Block=/a/-GURMUKHI}');
Expect(1, 2687, '\p{Is_Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Block:    gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block:    gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block:    gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block:    gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block:    gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block:    gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block:    gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block:    gurmukhi}', "");
Error('\p{Is_Blk:   :=--gurmukhi}');
Error('\P{Is_Blk:   :=--gurmukhi}');
Expect(1, 2687, '\p{Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Blk=	Gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=	Gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=	Gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=	Gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=	Gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=	Gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=	Gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=	Gurmukhi}', "");
Error('\p{Block= /a/ENCLOSED_Ideographic	Supplement}');
Error('\P{Block= /a/ENCLOSED_Ideographic	Supplement}');
Expect(1, 127743, '\p{Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Block= Enclosed	ideographic-Supplement}', "");
Expect(0, 127743, '\p{^Block= Enclosed	ideographic-Supplement}', "");
Expect(0, 127743, '\P{Block= Enclosed	ideographic-Supplement}', "");
Expect(1, 127743, '\P{^Block= Enclosed	ideographic-Supplement}', "");
Expect(0, 127487, '\p{Block= Enclosed	ideographic-Supplement}', "");
Expect(1, 127487, '\p{^Block= Enclosed	ideographic-Supplement}', "");
Expect(1, 127487, '\P{Block= Enclosed	ideographic-Supplement}', "");
Expect(0, 127487, '\P{^Block= Enclosed	ideographic-Supplement}', "");
Error('\p{Blk=-	ENCLOSED_IDEOGRAPHIC_Supplement/a/}');
Error('\P{Blk=-	ENCLOSED_IDEOGRAPHIC_Supplement/a/}');
Expect(1, 127743, '\p{Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(0, 127743, '\p{^Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(0, 127743, '\P{Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(1, 127743, '\P{^Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(0, 127487, '\p{Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(1, 127487, '\p{^Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(1, 127487, '\P{Blk= ENCLOSED_Ideographic-Supplement}', "");
Expect(0, 127487, '\P{^Blk= ENCLOSED_Ideographic-Supplement}', "");
Error('\p{Is_Block:- ENCLOSED ideographic	supplement:=}');
Error('\P{Is_Block:- ENCLOSED ideographic	supplement:=}');
Expect(1, 127743, '\p{Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(0, 127743, '\p{^Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(0, 127743, '\P{Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(1, 127743, '\P{^Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(0, 127487, '\p{Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(1, 127487, '\p{^Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(1, 127487, '\P{Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Expect(0, 127487, '\P{^Is_Block= ENCLOSED-Ideographic	Supplement}', "");
Error('\p{Is_Blk=_-Enclosed-IDEOGRAPHIC/a/SUPPLEMENT}');
Error('\P{Is_Blk=_-Enclosed-IDEOGRAPHIC/a/SUPPLEMENT}');
Expect(1, 127743, '\p{Is_Blk:   enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Blk:   enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Blk:   enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Blk:   enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Blk:   enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Blk:   enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Blk:   enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Blk:   enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(0, 127743, '\p{^Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(0, 127743, '\P{Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(1, 127743, '\P{^Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(0, 127487, '\p{Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(1, 127487, '\p{^Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(1, 127487, '\P{Is_Blk= Enclosed	Ideographic-Supplement}', "");
Expect(0, 127487, '\P{^Is_Blk= Enclosed	Ideographic-Supplement}', "");
Error('\p{Block= _phoneticExtensions SUPPLEMENT/a/}');
Error('\P{Block= _phoneticExtensions SUPPLEMENT/a/}');
Expect(1, 7615, '\p{Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(0, 7615, '\p{^Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(0, 7615, '\P{Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(1, 7615, '\P{^Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(0, 7551, '\p{Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(1, 7551, '\p{^Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(1, 7551, '\P{Block=_-PHONETIC_Extensions-Supplement}', "");
Expect(0, 7551, '\P{^Block=_-PHONETIC_Extensions-Supplement}', "");
Error('\p{Blk=:=phonetic_extensions	Supplement}');
Error('\P{Blk=:=phonetic_extensions	Supplement}');
Expect(1, 7615, '\p{Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Blk= 	Phonetic_Extensions	supplement}', "");
Expect(0, 7615, '\p{^Blk= 	Phonetic_Extensions	supplement}', "");
Expect(0, 7615, '\P{Blk= 	Phonetic_Extensions	supplement}', "");
Expect(1, 7615, '\P{^Blk= 	Phonetic_Extensions	supplement}', "");
Expect(0, 7551, '\p{Blk= 	Phonetic_Extensions	supplement}', "");
Expect(1, 7551, '\p{^Blk= 	Phonetic_Extensions	supplement}', "");
Expect(1, 7551, '\P{Blk= 	Phonetic_Extensions	supplement}', "");
Expect(0, 7551, '\P{^Blk= 	Phonetic_Extensions	supplement}', "");
Error('\p{Is_Block=	Phonetic_Extensions/a/supplement}');
Error('\P{Is_Block=	Phonetic_Extensions/a/supplement}');
Expect(1, 7615, '\p{Is_Block:	phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Block:	phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Block:	phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Block:	phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Block:	phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Block:	phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Block:	phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Block:	phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(0, 7615, '\p{^Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(0, 7615, '\P{Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(1, 7615, '\P{^Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(0, 7551, '\p{Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(1, 7551, '\p{^Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(1, 7551, '\P{Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Expect(0, 7551, '\P{^Is_Block:__PHONETIC_EXTENSIONSSUPPLEMENT}', "");
Error('\p{Is_Blk=:=phonetic	ExtensionsSupplement}');
Error('\P{Is_Blk=:=phonetic	ExtensionsSupplement}');
Expect(1, 7615, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(0, 7615, '\p{^Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(0, 7615, '\P{Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(1, 7615, '\P{^Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(0, 7551, '\p{Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(1, 7551, '\p{^Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(1, 7551, '\P{Is_Blk=- Phonetic-extensions_supplement}', "");
Expect(0, 7551, '\P{^Is_Blk=- Phonetic-extensions_supplement}', "");
Error('\p{Block:   -GREEK/a/Extended}');
Error('\P{Block:   -GREEK/a/Extended}');
Expect(1, 8191, '\p{Block=greekextended}', "");
Expect(0, 8191, '\p{^Block=greekextended}', "");
Expect(0, 8191, '\P{Block=greekextended}', "");
Expect(1, 8191, '\P{^Block=greekextended}', "");
Expect(0, 7935, '\p{Block=greekextended}', "");
Expect(1, 7935, '\p{^Block=greekextended}', "");
Expect(1, 7935, '\P{Block=greekextended}', "");
Expect(0, 7935, '\P{^Block=greekextended}', "");
Expect(1, 8191, '\p{Block:  	greek Extended}', "");
Expect(0, 8191, '\p{^Block:  	greek Extended}', "");
Expect(0, 8191, '\P{Block:  	greek Extended}', "");
Expect(1, 8191, '\P{^Block:  	greek Extended}', "");
Expect(0, 7935, '\p{Block:  	greek Extended}', "");
Expect(1, 7935, '\p{^Block:  	greek Extended}', "");
Expect(1, 7935, '\P{Block:  	greek Extended}', "");
Expect(0, 7935, '\P{^Block:  	greek Extended}', "");
Error('\p{Blk=_/a/Greek EXTENDED}');
Error('\P{Blk=_/a/Greek EXTENDED}');
Expect(1, 8191, '\p{Blk:greekextended}', "");
Expect(0, 8191, '\p{^Blk:greekextended}', "");
Expect(0, 8191, '\P{Blk:greekextended}', "");
Expect(1, 8191, '\P{^Blk:greekextended}', "");
Expect(0, 7935, '\p{Blk:greekextended}', "");
Expect(1, 7935, '\p{^Blk:greekextended}', "");
Expect(1, 7935, '\P{Blk:greekextended}', "");
Expect(0, 7935, '\P{^Blk:greekextended}', "");
Expect(1, 8191, '\p{Blk=-	greek-Extended}', "");
Expect(0, 8191, '\p{^Blk=-	greek-Extended}', "");
Expect(0, 8191, '\P{Blk=-	greek-Extended}', "");
Expect(1, 8191, '\P{^Blk=-	greek-Extended}', "");
Expect(0, 7935, '\p{Blk=-	greek-Extended}', "");
Expect(1, 7935, '\p{^Blk=-	greek-Extended}', "");
Expect(1, 7935, '\P{Blk=-	greek-Extended}', "");
Expect(0, 7935, '\P{^Blk=-	greek-Extended}', "");
Error('\p{Is_Block:  /a/Greek_extended}');
Error('\P{Is_Block:  /a/Greek_extended}');
Expect(1, 8191, '\p{Is_Block: greekextended}', "");
Expect(0, 8191, '\p{^Is_Block: greekextended}', "");
Expect(0, 8191, '\P{Is_Block: greekextended}', "");
Expect(1, 8191, '\P{^Is_Block: greekextended}', "");
Expect(0, 7935, '\p{Is_Block: greekextended}', "");
Expect(1, 7935, '\p{^Is_Block: greekextended}', "");
Expect(1, 7935, '\P{Is_Block: greekextended}', "");
Expect(0, 7935, '\P{^Is_Block: greekextended}', "");
Expect(1, 8191, '\p{Is_Block:	_Greek Extended}', "");
Expect(0, 8191, '\p{^Is_Block:	_Greek Extended}', "");
Expect(0, 8191, '\P{Is_Block:	_Greek Extended}', "");
Expect(1, 8191, '\P{^Is_Block:	_Greek Extended}', "");
Expect(0, 7935, '\p{Is_Block:	_Greek Extended}', "");
Expect(1, 7935, '\p{^Is_Block:	_Greek Extended}', "");
Expect(1, 7935, '\P{Is_Block:	_Greek Extended}', "");
Expect(0, 7935, '\P{^Is_Block:	_Greek Extended}', "");
Error('\p{Is_Blk=/a/__GREEK_Extended}');
Error('\P{Is_Blk=/a/__GREEK_Extended}');
Expect(1, 8191, '\p{Is_Blk=greekextended}', "");
Expect(0, 8191, '\p{^Is_Blk=greekextended}', "");
Expect(0, 8191, '\P{Is_Blk=greekextended}', "");
Expect(1, 8191, '\P{^Is_Blk=greekextended}', "");
Expect(0, 7935, '\p{Is_Blk=greekextended}', "");
Expect(1, 7935, '\p{^Is_Blk=greekextended}', "");
Expect(1, 7935, '\P{Is_Blk=greekextended}', "");
Expect(0, 7935, '\P{^Is_Blk=greekextended}', "");
Expect(1, 8191, '\p{Is_Blk=greek_extended}', "");
Expect(0, 8191, '\p{^Is_Blk=greek_extended}', "");
Expect(0, 8191, '\P{Is_Blk=greek_extended}', "");
Expect(1, 8191, '\P{^Is_Blk=greek_extended}', "");
Expect(0, 7935, '\p{Is_Blk=greek_extended}', "");
Expect(1, 7935, '\p{^Is_Blk=greek_extended}', "");
Expect(1, 7935, '\P{Is_Blk=greek_extended}', "");
Expect(0, 7935, '\P{^Is_Blk=greek_extended}', "");
Error('\p{Block=/a/_deseret}');
Error('\P{Block=/a/_deseret}');
Expect(1, 66639, '\p{Block=deseret}', "");
Expect(0, 66639, '\p{^Block=deseret}', "");
Expect(0, 66639, '\P{Block=deseret}', "");
Expect(1, 66639, '\P{^Block=deseret}', "");
Expect(0, 66559, '\p{Block=deseret}', "");
Expect(1, 66559, '\p{^Block=deseret}', "");
Expect(1, 66559, '\P{Block=deseret}', "");
Expect(0, 66559, '\P{^Block=deseret}', "");
Expect(1, 66639, '\p{Block=_-Deseret}', "");
Expect(0, 66639, '\p{^Block=_-Deseret}', "");
Expect(0, 66639, '\P{Block=_-Deseret}', "");
Expect(1, 66639, '\P{^Block=_-Deseret}', "");
Expect(0, 66559, '\p{Block=_-Deseret}', "");
Expect(1, 66559, '\p{^Block=_-Deseret}', "");
Expect(1, 66559, '\P{Block=_-Deseret}', "");
Expect(0, 66559, '\P{^Block=_-Deseret}', "");
Error('\p{Blk= deseret/a/}');
Error('\P{Blk= deseret/a/}');
Expect(1, 66639, '\p{Blk=deseret}', "");
Expect(0, 66639, '\p{^Blk=deseret}', "");
Expect(0, 66639, '\P{Blk=deseret}', "");
Expect(1, 66639, '\P{^Blk=deseret}', "");
Expect(0, 66559, '\p{Blk=deseret}', "");
Expect(1, 66559, '\p{^Blk=deseret}', "");
Expect(1, 66559, '\P{Blk=deseret}', "");
Expect(0, 66559, '\P{^Blk=deseret}', "");
Expect(1, 66639, '\p{Blk=_DESERET}', "");
Expect(0, 66639, '\p{^Blk=_DESERET}', "");
Expect(0, 66639, '\P{Blk=_DESERET}', "");
Expect(1, 66639, '\P{^Blk=_DESERET}', "");
Expect(0, 66559, '\p{Blk=_DESERET}', "");
Expect(1, 66559, '\p{^Blk=_DESERET}', "");
Expect(1, 66559, '\P{Blk=_DESERET}', "");
Expect(0, 66559, '\P{^Blk=_DESERET}', "");
Error('\p{Is_Block=/a/Deseret}');
Error('\P{Is_Block=/a/Deseret}');
Expect(1, 66639, '\p{Is_Block=deseret}', "");
Expect(0, 66639, '\p{^Is_Block=deseret}', "");
Expect(0, 66639, '\P{Is_Block=deseret}', "");
Expect(1, 66639, '\P{^Is_Block=deseret}', "");
Expect(0, 66559, '\p{Is_Block=deseret}', "");
Expect(1, 66559, '\p{^Is_Block=deseret}', "");
Expect(1, 66559, '\P{Is_Block=deseret}', "");
Expect(0, 66559, '\P{^Is_Block=deseret}', "");
Expect(1, 66639, '\p{Is_Block=- Deseret}', "");
Expect(0, 66639, '\p{^Is_Block=- Deseret}', "");
Expect(0, 66639, '\P{Is_Block=- Deseret}', "");
Expect(1, 66639, '\P{^Is_Block=- Deseret}', "");
Expect(0, 66559, '\p{Is_Block=- Deseret}', "");
Expect(1, 66559, '\p{^Is_Block=- Deseret}', "");
Expect(1, 66559, '\P{Is_Block=- Deseret}', "");
Expect(0, 66559, '\P{^Is_Block=- Deseret}', "");
Error('\p{Is_Blk= :=DESERET}');
Error('\P{Is_Blk= :=DESERET}');
Expect(1, 66639, '\p{Is_Blk=deseret}', "");
Expect(0, 66639, '\p{^Is_Blk=deseret}', "");
Expect(0, 66639, '\P{Is_Blk=deseret}', "");
Expect(1, 66639, '\P{^Is_Blk=deseret}', "");
Expect(0, 66559, '\p{Is_Blk=deseret}', "");
Expect(1, 66559, '\p{^Is_Blk=deseret}', "");
Expect(1, 66559, '\P{Is_Blk=deseret}', "");
Expect(0, 66559, '\P{^Is_Blk=deseret}', "");
Expect(1, 66639, '\p{Is_Blk=	_DESERET}', "");
Expect(0, 66639, '\p{^Is_Blk=	_DESERET}', "");
Expect(0, 66639, '\P{Is_Blk=	_DESERET}', "");
Expect(1, 66639, '\P{^Is_Blk=	_DESERET}', "");
Expect(0, 66559, '\p{Is_Blk=	_DESERET}', "");
Expect(1, 66559, '\p{^Is_Blk=	_DESERET}', "");
Expect(1, 66559, '\P{Is_Blk=	_DESERET}', "");
Expect(0, 66559, '\P{^Is_Blk=	_DESERET}', "");
Error('\p{Block= Tai:=THAM}');
Error('\P{Block= Tai:=THAM}');
Expect(1, 6831, '\p{Block=taitham}', "");
Expect(0, 6831, '\p{^Block=taitham}', "");
Expect(0, 6831, '\P{Block=taitham}', "");
Expect(1, 6831, '\P{^Block=taitham}', "");
Expect(0, 6687, '\p{Block=taitham}', "");
Expect(1, 6687, '\p{^Block=taitham}', "");
Expect(1, 6687, '\P{Block=taitham}', "");
Expect(0, 6687, '\P{^Block=taitham}', "");
Expect(1, 6831, '\p{Block=_-TAI-Tham}', "");
Expect(0, 6831, '\p{^Block=_-TAI-Tham}', "");
Expect(0, 6831, '\P{Block=_-TAI-Tham}', "");
Expect(1, 6831, '\P{^Block=_-TAI-Tham}', "");
Expect(0, 6687, '\p{Block=_-TAI-Tham}', "");
Expect(1, 6687, '\p{^Block=_-TAI-Tham}', "");
Expect(1, 6687, '\P{Block=_-TAI-Tham}', "");
Expect(0, 6687, '\P{^Block=_-TAI-Tham}', "");
Error('\p{Blk=- Tai/a/Tham}');
Error('\P{Blk=- Tai/a/Tham}');
Expect(1, 6831, '\p{Blk=taitham}', "");
Expect(0, 6831, '\p{^Blk=taitham}', "");
Expect(0, 6831, '\P{Blk=taitham}', "");
Expect(1, 6831, '\P{^Blk=taitham}', "");
Expect(0, 6687, '\p{Blk=taitham}', "");
Expect(1, 6687, '\p{^Blk=taitham}', "");
Expect(1, 6687, '\P{Blk=taitham}', "");
Expect(0, 6687, '\P{^Blk=taitham}', "");
Expect(1, 6831, '\p{Blk=_-Tai_Tham}', "");
Expect(0, 6831, '\p{^Blk=_-Tai_Tham}', "");
Expect(0, 6831, '\P{Blk=_-Tai_Tham}', "");
Expect(1, 6831, '\P{^Blk=_-Tai_Tham}', "");
Expect(0, 6687, '\p{Blk=_-Tai_Tham}', "");
Expect(1, 6687, '\p{^Blk=_-Tai_Tham}', "");
Expect(1, 6687, '\P{Blk=_-Tai_Tham}', "");
Expect(0, 6687, '\P{^Blk=_-Tai_Tham}', "");
Error('\p{Is_Block: - Tai:=THAM}');
Error('\P{Is_Block: - Tai:=THAM}');
Expect(1, 6831, '\p{Is_Block:	taitham}', "");
Expect(0, 6831, '\p{^Is_Block:	taitham}', "");
Expect(0, 6831, '\P{Is_Block:	taitham}', "");
Expect(1, 6831, '\P{^Is_Block:	taitham}', "");
Expect(0, 6687, '\p{Is_Block:	taitham}', "");
Expect(1, 6687, '\p{^Is_Block:	taitham}', "");
Expect(1, 6687, '\P{Is_Block:	taitham}', "");
Expect(0, 6687, '\P{^Is_Block:	taitham}', "");
Expect(1, 6831, '\p{Is_Block= _TaiTham}', "");
Expect(0, 6831, '\p{^Is_Block= _TaiTham}', "");
Expect(0, 6831, '\P{Is_Block= _TaiTham}', "");
Expect(1, 6831, '\P{^Is_Block= _TaiTham}', "");
Expect(0, 6687, '\p{Is_Block= _TaiTham}', "");
Expect(1, 6687, '\p{^Is_Block= _TaiTham}', "");
Expect(1, 6687, '\P{Is_Block= _TaiTham}', "");
Expect(0, 6687, '\P{^Is_Block= _TaiTham}', "");
Error('\p{Is_Blk= Tai-Tham/a/}');
Error('\P{Is_Blk= Tai-Tham/a/}');
Expect(1, 6831, '\p{Is_Blk=taitham}', "");
Expect(0, 6831, '\p{^Is_Blk=taitham}', "");
Expect(0, 6831, '\P{Is_Blk=taitham}', "");
Expect(1, 6831, '\P{^Is_Blk=taitham}', "");
Expect(0, 6687, '\p{Is_Blk=taitham}', "");
Expect(1, 6687, '\p{^Is_Blk=taitham}', "");
Expect(1, 6687, '\P{Is_Blk=taitham}', "");
Expect(0, 6687, '\P{^Is_Blk=taitham}', "");
Expect(1, 6831, '\p{Is_Blk=__TAI-tham}', "");
Expect(0, 6831, '\p{^Is_Blk=__TAI-tham}', "");
Expect(0, 6831, '\P{Is_Blk=__TAI-tham}', "");
Expect(1, 6831, '\P{^Is_Blk=__TAI-tham}', "");
Expect(0, 6687, '\p{Is_Blk=__TAI-tham}', "");
Expect(1, 6687, '\p{^Is_Blk=__TAI-tham}', "");
Expect(1, 6687, '\P{Is_Blk=__TAI-tham}', "");
Expect(0, 6687, '\P{^Is_Blk=__TAI-tham}', "");
Error('\p{Block=:=_tagbanwa}');
Error('\P{Block=:=_tagbanwa}');
Expect(1, 6015, '\p{Block=tagbanwa}', "");
Expect(0, 6015, '\p{^Block=tagbanwa}', "");
Expect(0, 6015, '\P{Block=tagbanwa}', "");
Expect(1, 6015, '\P{^Block=tagbanwa}', "");
Expect(0, 5983, '\p{Block=tagbanwa}', "");
Expect(1, 5983, '\p{^Block=tagbanwa}', "");
Expect(1, 5983, '\P{Block=tagbanwa}', "");
Expect(0, 5983, '\P{^Block=tagbanwa}', "");
Expect(1, 6015, '\p{Block=_	Tagbanwa}', "");
Expect(0, 6015, '\p{^Block=_	Tagbanwa}', "");
Expect(0, 6015, '\P{Block=_	Tagbanwa}', "");
Expect(1, 6015, '\P{^Block=_	Tagbanwa}', "");
Expect(0, 5983, '\p{Block=_	Tagbanwa}', "");
Expect(1, 5983, '\p{^Block=_	Tagbanwa}', "");
Expect(1, 5983, '\P{Block=_	Tagbanwa}', "");
Expect(0, 5983, '\P{^Block=_	Tagbanwa}', "");
Error('\p{Blk:   /a/TAGBANWA}');
Error('\P{Blk:   /a/TAGBANWA}');
Expect(1, 6015, '\p{Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Blk= -TAGBANWA}', "");
Expect(0, 6015, '\p{^Blk= -TAGBANWA}', "");
Expect(0, 6015, '\P{Blk= -TAGBANWA}', "");
Expect(1, 6015, '\P{^Blk= -TAGBANWA}', "");
Expect(0, 5983, '\p{Blk= -TAGBANWA}', "");
Expect(1, 5983, '\p{^Blk= -TAGBANWA}', "");
Expect(1, 5983, '\P{Blk= -TAGBANWA}', "");
Expect(0, 5983, '\P{^Blk= -TAGBANWA}', "");
Error('\p{Is_Block=/a/	_Tagbanwa}');
Error('\P{Is_Block=/a/	_Tagbanwa}');
Expect(1, 6015, '\p{Is_Block=tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Block=tagbanwa}', "");
Expect(0, 6015, '\P{Is_Block=tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Block=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Block=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Block=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Block=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Block=tagbanwa}', "");
Expect(1, 6015, '\p{Is_Block:   	-Tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Block:   	-Tagbanwa}', "");
Expect(0, 6015, '\P{Is_Block:   	-Tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Block:   	-Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Block:   	-Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Block:   	-Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Block:   	-Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Block:   	-Tagbanwa}', "");
Error('\p{Is_Blk=	tagbanwa:=}');
Error('\P{Is_Blk=	tagbanwa:=}');
Expect(1, 6015, '\p{Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Is_Blk=	Tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Blk=	Tagbanwa}', "");
Expect(0, 6015, '\P{Is_Blk=	Tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Blk=	Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Blk=	Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Blk=	Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Blk=	Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Blk=	Tagbanwa}', "");
Error('\p{Block=	:=Arabic}');
Error('\P{Block=	:=Arabic}');
Expect(1, 1791, '\p{Block=arabic}', "");
Expect(0, 1791, '\p{^Block=arabic}', "");
Expect(0, 1791, '\P{Block=arabic}', "");
Expect(1, 1791, '\P{^Block=arabic}', "");
Expect(0, 1535, '\p{Block=arabic}', "");
Expect(1, 1535, '\p{^Block=arabic}', "");
Expect(1, 1535, '\P{Block=arabic}', "");
Expect(0, 1535, '\P{^Block=arabic}', "");
Expect(1, 1791, '\p{Block:	 arabic}', "");
Expect(0, 1791, '\p{^Block:	 arabic}', "");
Expect(0, 1791, '\P{Block:	 arabic}', "");
Expect(1, 1791, '\P{^Block:	 arabic}', "");
Expect(0, 1535, '\p{Block:	 arabic}', "");
Expect(1, 1535, '\p{^Block:	 arabic}', "");
Expect(1, 1535, '\P{Block:	 arabic}', "");
Expect(0, 1535, '\P{^Block:	 arabic}', "");
Error('\p{Blk=/a/Arabic}');
Error('\P{Blk=/a/Arabic}');
Expect(1, 1791, '\p{Blk:	arabic}', "");
Expect(0, 1791, '\p{^Blk:	arabic}', "");
Expect(0, 1791, '\P{Blk:	arabic}', "");
Expect(1, 1791, '\P{^Blk:	arabic}', "");
Expect(0, 1535, '\p{Blk:	arabic}', "");
Expect(1, 1535, '\p{^Blk:	arabic}', "");
Expect(1, 1535, '\P{Blk:	arabic}', "");
Expect(0, 1535, '\P{^Blk:	arabic}', "");
Expect(1, 1791, '\p{Blk=_ARABIC}', "");
Expect(0, 1791, '\p{^Blk=_ARABIC}', "");
Expect(0, 1791, '\P{Blk=_ARABIC}', "");
Expect(1, 1791, '\P{^Blk=_ARABIC}', "");
Expect(0, 1535, '\p{Blk=_ARABIC}', "");
Expect(1, 1535, '\p{^Blk=_ARABIC}', "");
Expect(1, 1535, '\P{Blk=_ARABIC}', "");
Expect(0, 1535, '\P{^Blk=_ARABIC}', "");
Error('\p{Is_Block:	_-Arabic:=}');
Error('\P{Is_Block:	_-Arabic:=}');
Expect(1, 1791, '\p{Is_Block: arabic}', "");
Expect(0, 1791, '\p{^Is_Block: arabic}', "");
Expect(0, 1791, '\P{Is_Block: arabic}', "");
Expect(1, 1791, '\P{^Is_Block: arabic}', "");
Expect(0, 1535, '\p{Is_Block: arabic}', "");
Expect(1, 1535, '\p{^Is_Block: arabic}', "");
Expect(1, 1535, '\P{Is_Block: arabic}', "");
Expect(0, 1535, '\P{^Is_Block: arabic}', "");
Expect(1, 1791, '\p{Is_Block= 	Arabic}', "");
Expect(0, 1791, '\p{^Is_Block= 	Arabic}', "");
Expect(0, 1791, '\P{Is_Block= 	Arabic}', "");
Expect(1, 1791, '\P{^Is_Block= 	Arabic}', "");
Expect(0, 1535, '\p{Is_Block= 	Arabic}', "");
Expect(1, 1535, '\p{^Is_Block= 	Arabic}', "");
Expect(1, 1535, '\P{Is_Block= 	Arabic}', "");
Expect(0, 1535, '\P{^Is_Block= 	Arabic}', "");
Error('\p{Is_Blk=	/a/Arabic}');
Error('\P{Is_Blk=	/a/Arabic}');
Expect(1, 1791, '\p{Is_Blk=arabic}', "");
Expect(0, 1791, '\p{^Is_Blk=arabic}', "");
Expect(0, 1791, '\P{Is_Blk=arabic}', "");
Expect(1, 1791, '\P{^Is_Blk=arabic}', "");
Expect(0, 1535, '\p{Is_Blk=arabic}', "");
Expect(1, 1535, '\p{^Is_Blk=arabic}', "");
Expect(1, 1535, '\P{Is_Blk=arabic}', "");
Expect(0, 1535, '\P{^Is_Blk=arabic}', "");
Expect(1, 1791, '\p{Is_Blk=  Arabic}', "");
Expect(0, 1791, '\p{^Is_Blk=  Arabic}', "");
Expect(0, 1791, '\P{Is_Blk=  Arabic}', "");
Expect(1, 1791, '\P{^Is_Blk=  Arabic}', "");
Expect(0, 1535, '\p{Is_Blk=  Arabic}', "");
Expect(1, 1535, '\p{^Is_Blk=  Arabic}', "");
Expect(1, 1535, '\P{Is_Blk=  Arabic}', "");
Expect(0, 1535, '\P{^Is_Blk=  Arabic}', "");
Error('\p{Block=_katakana Phonetic_Extensions:=}');
Error('\P{Block=_katakana Phonetic_Extensions:=}');
Expect(1, 12799, '\p{Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Block:	katakanaPhoneticExtensions}', "");
Expect(0, 12799, '\p{^Block:	katakanaPhoneticExtensions}', "");
Expect(0, 12799, '\P{Block:	katakanaPhoneticExtensions}', "");
Expect(1, 12799, '\P{^Block:	katakanaPhoneticExtensions}', "");
Expect(0, 12783, '\p{Block:	katakanaPhoneticExtensions}', "");
Expect(1, 12783, '\p{^Block:	katakanaPhoneticExtensions}', "");
Expect(1, 12783, '\P{Block:	katakanaPhoneticExtensions}', "");
Expect(0, 12783, '\P{^Block:	katakanaPhoneticExtensions}', "");
Error('\p{Blk=_-KATAKANAphonetic	EXTENSIONS:=}');
Error('\P{Blk=_-KATAKANAphonetic	EXTENSIONS:=}');
Expect(1, 12799, '\p{Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(0, 12799, '\p{^Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(0, 12799, '\P{Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(1, 12799, '\P{^Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(0, 12783, '\p{Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(1, 12783, '\p{^Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(1, 12783, '\P{Blk= 	katakanaPHONETIC	Extensions}', "");
Expect(0, 12783, '\P{^Blk= 	katakanaPHONETIC	Extensions}', "");
Error('\p{Is_Block= Katakana_Phonetic	Extensions:=}');
Error('\P{Is_Block= Katakana_Phonetic	Extensions:=}');
Expect(1, 12799, '\p{Is_Block:katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Block:katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Block:katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Block:katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Block:katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Block:katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Block:katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Block:katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Block=- Katakana_Phonetic extensions}', "");
Expect(0, 12799, '\p{^Is_Block=- Katakana_Phonetic extensions}', "");
Expect(0, 12799, '\P{Is_Block=- Katakana_Phonetic extensions}', "");
Expect(1, 12799, '\P{^Is_Block=- Katakana_Phonetic extensions}', "");
Expect(0, 12783, '\p{Is_Block=- Katakana_Phonetic extensions}', "");
Expect(1, 12783, '\p{^Is_Block=- Katakana_Phonetic extensions}', "");
Expect(1, 12783, '\P{Is_Block=- Katakana_Phonetic extensions}', "");
Expect(0, 12783, '\P{^Is_Block=- Katakana_Phonetic extensions}', "");
Error('\p{Is_Blk=	katakana_Phonetic	EXTENSIONS:=}');
Error('\P{Is_Blk=	katakana_Phonetic	EXTENSIONS:=}');
Expect(1, 12799, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Blk= katakana phonetic-Extensions}', "");
Expect(0, 12799, '\p{^Is_Blk= katakana phonetic-Extensions}', "");
Expect(0, 12799, '\P{Is_Blk= katakana phonetic-Extensions}', "");
Expect(1, 12799, '\P{^Is_Blk= katakana phonetic-Extensions}', "");
Expect(0, 12783, '\p{Is_Blk= katakana phonetic-Extensions}', "");
Expect(1, 12783, '\p{^Is_Blk= katakana phonetic-Extensions}', "");
Expect(1, 12783, '\P{Is_Blk= katakana phonetic-Extensions}', "");
Expect(0, 12783, '\P{^Is_Blk= katakana phonetic-Extensions}', "");
Error('\p{Block=_/a/LETTERLIKESymbols}');
Error('\P{Block=_/a/LETTERLIKESymbols}');
Expect(1, 8527, '\p{Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Block=	_LETTERLIKESymbols}', "");
Expect(0, 8527, '\p{^Block=	_LETTERLIKESymbols}', "");
Expect(0, 8527, '\P{Block=	_LETTERLIKESymbols}', "");
Expect(1, 8527, '\P{^Block=	_LETTERLIKESymbols}', "");
Expect(0, 8447, '\p{Block=	_LETTERLIKESymbols}', "");
Expect(1, 8447, '\p{^Block=	_LETTERLIKESymbols}', "");
Expect(1, 8447, '\P{Block=	_LETTERLIKESymbols}', "");
Expect(0, 8447, '\P{^Block=	_LETTERLIKESymbols}', "");
Error('\p{Blk=	_Letterlike	Symbols:=}');
Error('\P{Blk=	_Letterlike	Symbols:=}');
Expect(1, 8527, '\p{Blk=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Blk=letterlikesymbols}', "");
Expect(0, 8527, '\P{Blk=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Blk=letterlikesymbols}', "");
Expect(0, 8447, '\p{Blk=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Blk=letterlikesymbols}', "");
Expect(1, 8447, '\P{Blk=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Blk=letterlikesymbols}', "");
Expect(1, 8527, '\p{Blk=  letterlike Symbols}', "");
Expect(0, 8527, '\p{^Blk=  letterlike Symbols}', "");
Expect(0, 8527, '\P{Blk=  letterlike Symbols}', "");
Expect(1, 8527, '\P{^Blk=  letterlike Symbols}', "");
Expect(0, 8447, '\p{Blk=  letterlike Symbols}', "");
Expect(1, 8447, '\p{^Blk=  letterlike Symbols}', "");
Expect(1, 8447, '\P{Blk=  letterlike Symbols}', "");
Expect(0, 8447, '\P{^Blk=  letterlike Symbols}', "");
Error('\p{Is_Block=:= letterlikeSymbols}');
Error('\P{Is_Block=:= letterlikeSymbols}');
Expect(1, 8527, '\p{Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Block=Letterlike-symbols}', "");
Expect(0, 8527, '\p{^Is_Block=Letterlike-symbols}', "");
Expect(0, 8527, '\P{Is_Block=Letterlike-symbols}', "");
Expect(1, 8527, '\P{^Is_Block=Letterlike-symbols}', "");
Expect(0, 8447, '\p{Is_Block=Letterlike-symbols}', "");
Expect(1, 8447, '\p{^Is_Block=Letterlike-symbols}', "");
Expect(1, 8447, '\P{Is_Block=Letterlike-symbols}', "");
Expect(0, 8447, '\P{^Is_Block=Letterlike-symbols}', "");
Error('\p{Is_Blk=-Letterlike/a/SYMBOLS}');
Error('\P{Is_Blk=-Letterlike/a/SYMBOLS}');
Expect(1, 8527, '\p{Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Blk: -	Letterlike_Symbols}', "");
Expect(0, 8527, '\p{^Is_Blk: -	Letterlike_Symbols}', "");
Expect(0, 8527, '\P{Is_Blk: -	Letterlike_Symbols}', "");
Expect(1, 8527, '\P{^Is_Blk: -	Letterlike_Symbols}', "");
Expect(0, 8447, '\p{Is_Blk: -	Letterlike_Symbols}', "");
Expect(1, 8447, '\p{^Is_Blk: -	Letterlike_Symbols}', "");
Expect(1, 8447, '\P{Is_Blk: -	Letterlike_Symbols}', "");
Expect(0, 8447, '\P{^Is_Blk: -	Letterlike_Symbols}', "");
Error('\p{Block=	_LATIN:=EXTENDED	C}');
Error('\P{Block=	_LATIN:=EXTENDED	C}');
Expect(1, 11391, '\p{Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Block=latinextendedc}', "");
Expect(0, 11391, '\P{Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Block=latinextendedc}', "");
Expect(0, 11359, '\p{Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Block=latinextendedc}', "");
Expect(1, 11359, '\P{Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Block=latinextendedc}', "");
Expect(1, 11391, '\p{Block=_LatinEXTENDED	c}', "");
Expect(0, 11391, '\p{^Block=_LatinEXTENDED	c}', "");
Expect(0, 11391, '\P{Block=_LatinEXTENDED	c}', "");
Expect(1, 11391, '\P{^Block=_LatinEXTENDED	c}', "");
Expect(0, 11359, '\p{Block=_LatinEXTENDED	c}', "");
Expect(1, 11359, '\p{^Block=_LatinEXTENDED	c}', "");
Expect(1, 11359, '\P{Block=_LatinEXTENDED	c}', "");
Expect(0, 11359, '\P{^Block=_LatinEXTENDED	c}', "");
Error('\p{Blk:   -/a/Latin	EXTENDED C}');
Error('\P{Blk:   -/a/Latin	EXTENDED C}');
Expect(1, 11391, '\p{Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Blk=		LATINEXTENDEDc}', "");
Expect(0, 11391, '\p{^Blk=		LATINEXTENDEDc}', "");
Expect(0, 11391, '\P{Blk=		LATINEXTENDEDc}', "");
Expect(1, 11391, '\P{^Blk=		LATINEXTENDEDc}', "");
Expect(0, 11359, '\p{Blk=		LATINEXTENDEDc}', "");
Expect(1, 11359, '\p{^Blk=		LATINEXTENDEDc}', "");
Expect(1, 11359, '\P{Blk=		LATINEXTENDEDc}', "");
Expect(0, 11359, '\P{^Blk=		LATINEXTENDEDc}', "");
Error('\p{Is_Block= _LATIN_extended/a/C}');
Error('\P{Is_Block= _LATIN_extended/a/C}');
Expect(1, 11391, '\p{Is_Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Block=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Block=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Block=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Block=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Block=	_latinextended-C}', "");
Expect(0, 11391, '\p{^Is_Block=	_latinextended-C}', "");
Expect(0, 11391, '\P{Is_Block=	_latinextended-C}', "");
Expect(1, 11391, '\P{^Is_Block=	_latinextended-C}', "");
Expect(0, 11359, '\p{Is_Block=	_latinextended-C}', "");
Expect(1, 11359, '\p{^Is_Block=	_latinextended-C}', "");
Expect(1, 11359, '\P{Is_Block=	_latinextended-C}', "");
Expect(0, 11359, '\P{^Is_Block=	_latinextended-C}', "");
Error('\p{Is_Blk:		:=latin-Extended	C}');
Error('\P{Is_Blk:		:=latin-Extended	C}');
Expect(1, 11391, '\p{Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Blk=	_LATIN_extended	c}', "");
Expect(0, 11391, '\p{^Is_Blk=	_LATIN_extended	c}', "");
Expect(0, 11391, '\P{Is_Blk=	_LATIN_extended	c}', "");
Expect(1, 11391, '\P{^Is_Blk=	_LATIN_extended	c}', "");
Expect(0, 11359, '\p{Is_Blk=	_LATIN_extended	c}', "");
Expect(1, 11359, '\p{^Is_Blk=	_LATIN_extended	c}', "");
Expect(1, 11359, '\P{Is_Blk=	_LATIN_extended	c}', "");
Expect(0, 11359, '\P{^Is_Blk=	_LATIN_extended	c}', "");
Error('\p{Block=/a/-	common-indic number Forms}');
Error('\P{Block=/a/-	common-indic number Forms}');
Expect(1, 43071, '\p{Block:   commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Block:   commonindicnumberforms}', "");
Expect(0, 43071, '\P{Block:   commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Block:   commonindicnumberforms}', "");
Expect(0, 43055, '\p{Block:   commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Block:   commonindicnumberforms}', "");
Expect(1, 43055, '\P{Block:   commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Block:   commonindicnumberforms}', "");
Expect(1, 43071, '\p{Block=		common-INDIC_NUMBER forms}', "");
Expect(0, 43071, '\p{^Block=		common-INDIC_NUMBER forms}', "");
Expect(0, 43071, '\P{Block=		common-INDIC_NUMBER forms}', "");
Expect(1, 43071, '\P{^Block=		common-INDIC_NUMBER forms}', "");
Expect(0, 43055, '\p{Block=		common-INDIC_NUMBER forms}', "");
Expect(1, 43055, '\p{^Block=		common-INDIC_NUMBER forms}', "");
Expect(1, 43055, '\P{Block=		common-INDIC_NUMBER forms}', "");
Expect(0, 43055, '\P{^Block=		common-INDIC_NUMBER forms}', "");
Error('\p{Blk= Common/a/Indic Number	forms}');
Error('\P{Blk= Common/a/Indic Number	forms}');
Expect(1, 43071, '\p{Blk: commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Blk: commonindicnumberforms}', "");
Expect(0, 43071, '\P{Blk: commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Blk: commonindicnumberforms}', "");
Expect(0, 43055, '\p{Blk: commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Blk: commonindicnumberforms}', "");
Expect(1, 43055, '\P{Blk: commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Blk: commonindicnumberforms}', "");
Expect(1, 43071, '\p{Blk=	common_Indic_Number	Forms}', "");
Expect(0, 43071, '\p{^Blk=	common_Indic_Number	Forms}', "");
Expect(0, 43071, '\P{Blk=	common_Indic_Number	Forms}', "");
Expect(1, 43071, '\P{^Blk=	common_Indic_Number	Forms}', "");
Expect(0, 43055, '\p{Blk=	common_Indic_Number	Forms}', "");
Expect(1, 43055, '\p{^Blk=	common_Indic_Number	Forms}', "");
Expect(1, 43055, '\P{Blk=	common_Indic_Number	Forms}', "");
Expect(0, 43055, '\P{^Blk=	common_Indic_Number	Forms}', "");
Error('\p{Is_Block=:=COMMON Indic_NUMBER FORMS}');
Error('\P{Is_Block=:=COMMON Indic_NUMBER FORMS}');
Expect(1, 43071, '\p{Is_Block:commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Block:commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Block:commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Block:commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Block:commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Block:commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Block:commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Block:commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(0, 43071, '\p{^Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(0, 43071, '\P{Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(1, 43071, '\P{^Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(0, 43055, '\p{Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(1, 43055, '\p{^Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(1, 43055, '\P{Is_Block=	_COMMON-Indic	Number_Forms}', "");
Expect(0, 43055, '\P{^Is_Block=	_COMMON-Indic	Number_Forms}', "");
Error('\p{Is_Blk=	:=Common-INDIC number	Forms}');
Error('\P{Is_Blk=	:=Common-INDIC number	Forms}');
Expect(1, 43071, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(0, 43071, '\p{^Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(0, 43071, '\P{Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(1, 43071, '\P{^Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(0, 43055, '\p{Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(1, 43055, '\p{^Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(1, 43055, '\P{Is_Blk=-COMMON-IndicNumber-forms}', "");
Expect(0, 43055, '\P{^Is_Blk=-COMMON-IndicNumber-forms}', "");
Error('\p{Block=	-Meetei:=MAYEK}');
Error('\P{Block=	-Meetei:=MAYEK}');
Expect(1, 44031, '\p{Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Block=meeteimayek}', "");
Expect(0, 44031, '\P{Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Block=meeteimayek}', "");
Expect(0, 43967, '\p{Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Block=meeteimayek}', "");
Expect(1, 43967, '\P{Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Block=meeteimayek}', "");
Expect(1, 44031, '\p{Block=	Meetei_Mayek}', "");
Expect(0, 44031, '\p{^Block=	Meetei_Mayek}', "");
Expect(0, 44031, '\P{Block=	Meetei_Mayek}', "");
Expect(1, 44031, '\P{^Block=	Meetei_Mayek}', "");
Expect(0, 43967, '\p{Block=	Meetei_Mayek}', "");
Expect(1, 43967, '\p{^Block=	Meetei_Mayek}', "");
Expect(1, 43967, '\P{Block=	Meetei_Mayek}', "");
Expect(0, 43967, '\P{^Block=	Meetei_Mayek}', "");
Error('\p{Blk:	 :=Meetei	MAYEK}');
Error('\P{Blk:	 :=Meetei	MAYEK}');
Expect(1, 44031, '\p{Blk=meeteimayek}', "");
Expect(0, 44031, '\p{^Blk=meeteimayek}', "");
Expect(0, 44031, '\P{Blk=meeteimayek}', "");
Expect(1, 44031, '\P{^Blk=meeteimayek}', "");
Expect(0, 43967, '\p{Blk=meeteimayek}', "");
Expect(1, 43967, '\p{^Blk=meeteimayek}', "");
Expect(1, 43967, '\P{Blk=meeteimayek}', "");
Expect(0, 43967, '\P{^Blk=meeteimayek}', "");
Expect(1, 44031, '\p{Blk=_	MeeteiMayek}', "");
Expect(0, 44031, '\p{^Blk=_	MeeteiMayek}', "");
Expect(0, 44031, '\P{Blk=_	MeeteiMayek}', "");
Expect(1, 44031, '\P{^Blk=_	MeeteiMayek}', "");
Expect(0, 43967, '\p{Blk=_	MeeteiMayek}', "");
Expect(1, 43967, '\p{^Blk=_	MeeteiMayek}', "");
Expect(1, 43967, '\P{Blk=_	MeeteiMayek}', "");
Expect(0, 43967, '\P{^Blk=_	MeeteiMayek}', "");
Error('\p{Is_Block=:=MEETEI Mayek}');
Error('\P{Is_Block=:=MEETEI Mayek}');
Expect(1, 44031, '\p{Is_Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Block=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Block=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Block=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Block=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Block=		Meetei mayek}', "");
Expect(0, 44031, '\p{^Is_Block=		Meetei mayek}', "");
Expect(0, 44031, '\P{Is_Block=		Meetei mayek}', "");
Expect(1, 44031, '\P{^Is_Block=		Meetei mayek}', "");
Expect(0, 43967, '\p{Is_Block=		Meetei mayek}', "");
Expect(1, 43967, '\p{^Is_Block=		Meetei mayek}', "");
Expect(1, 43967, '\P{Is_Block=		Meetei mayek}', "");
Expect(0, 43967, '\P{^Is_Block=		Meetei mayek}', "");
Error('\p{Is_Blk:	  MEETEI	mayek/a/}');
Error('\P{Is_Blk:	  MEETEI	mayek/a/}');
Expect(1, 44031, '\p{Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Blk=- meetei-mayek}', "");
Expect(0, 44031, '\p{^Is_Blk=- meetei-mayek}', "");
Expect(0, 44031, '\P{Is_Blk=- meetei-mayek}', "");
Expect(1, 44031, '\P{^Is_Blk=- meetei-mayek}', "");
Expect(0, 43967, '\p{Is_Blk=- meetei-mayek}', "");
Expect(1, 43967, '\p{^Is_Blk=- meetei-mayek}', "");
Expect(1, 43967, '\P{Is_Blk=- meetei-mayek}', "");
Expect(0, 43967, '\P{^Is_Blk=- meetei-mayek}', "");
Error('\p{Block= :=Supplemental	mathematical-OPERATORS}');
Error('\P{Block= :=Supplemental	mathematical-OPERATORS}');
Expect(1, 11007, '\p{Block:supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Block:supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Block:supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Block:supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Block:supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Block:supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Block:supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Block:supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(0, 11007, '\p{^Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(0, 11007, '\P{Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(1, 11007, '\P{^Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(0, 10751, '\p{Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(1, 10751, '\p{^Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(1, 10751, '\P{Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Expect(0, 10751, '\P{^Block=	 SUPPLEMENTAL-MATHEMATICAL	operators}', "");
Error('\p{Blk=_:=SUPPLEMENTALMathematicalOPERATORS}');
Error('\P{Blk=_:=SUPPLEMENTALMathematicalOPERATORS}');
Expect(1, 11007, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Blk=--Supplemental-Mathematicaloperators}', "");
Expect(0, 11007, '\p{^Blk=--Supplemental-Mathematicaloperators}', "");
Expect(0, 11007, '\P{Blk=--Supplemental-Mathematicaloperators}', "");
Expect(1, 11007, '\P{^Blk=--Supplemental-Mathematicaloperators}', "");
Expect(0, 10751, '\p{Blk=--Supplemental-Mathematicaloperators}', "");
Expect(1, 10751, '\p{^Blk=--Supplemental-Mathematicaloperators}', "");
Expect(1, 10751, '\P{Blk=--Supplemental-Mathematicaloperators}', "");
Expect(0, 10751, '\P{^Blk=--Supplemental-Mathematicaloperators}', "");
Error('\p{Is_Block=__Supplemental/a/Mathematical-Operators}');
Error('\P{Is_Block=__Supplemental/a/Mathematical-Operators}');
Expect(1, 11007, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(0, 11007, '\p{^Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(0, 11007, '\P{Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(1, 11007, '\P{^Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(0, 10751, '\p{Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(1, 10751, '\p{^Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(1, 10751, '\P{Is_Block=_ supplemental_Mathematical-operators}', "");
Expect(0, 10751, '\P{^Is_Block=_ supplemental_Mathematical-operators}', "");
Error('\p{Is_Blk= SUPPLEMENTAL:=Mathematical_Operators}');
Error('\P{Is_Blk= SUPPLEMENTAL:=Mathematical_Operators}');
Expect(1, 11007, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(0, 11007, '\p{^Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(0, 11007, '\P{Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(1, 11007, '\P{^Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(0, 10751, '\p{Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(1, 10751, '\p{^Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(1, 10751, '\P{Is_Blk:	supplemental_Mathematical	Operators}', "");
Expect(0, 10751, '\P{^Is_Blk:	supplemental_Mathematical	Operators}', "");
Error('\p{Block=:= Shavian}');
Error('\P{Block=:= Shavian}');
Expect(1, 66687, '\p{Block:	shavian}', "");
Expect(0, 66687, '\p{^Block:	shavian}', "");
Expect(0, 66687, '\P{Block:	shavian}', "");
Expect(1, 66687, '\P{^Block:	shavian}', "");
Expect(0, 66639, '\p{Block:	shavian}', "");
Expect(1, 66639, '\p{^Block:	shavian}', "");
Expect(1, 66639, '\P{Block:	shavian}', "");
Expect(0, 66639, '\P{^Block:	shavian}', "");
Expect(1, 66687, '\p{Block=	Shavian}', "");
Expect(0, 66687, '\p{^Block=	Shavian}', "");
Expect(0, 66687, '\P{Block=	Shavian}', "");
Expect(1, 66687, '\P{^Block=	Shavian}', "");
Expect(0, 66639, '\p{Block=	Shavian}', "");
Expect(1, 66639, '\p{^Block=	Shavian}', "");
Expect(1, 66639, '\P{Block=	Shavian}', "");
Expect(0, 66639, '\P{^Block=	Shavian}', "");
Error('\p{Blk=		shavian:=}');
Error('\P{Blk=		shavian:=}');
Expect(1, 66687, '\p{Blk=shavian}', "");
Expect(0, 66687, '\p{^Blk=shavian}', "");
Expect(0, 66687, '\P{Blk=shavian}', "");
Expect(1, 66687, '\P{^Blk=shavian}', "");
Expect(0, 66639, '\p{Blk=shavian}', "");
Expect(1, 66639, '\p{^Blk=shavian}', "");
Expect(1, 66639, '\P{Blk=shavian}', "");
Expect(0, 66639, '\P{^Blk=shavian}', "");
Expect(1, 66687, '\p{Blk:   -shavian}', "");
Expect(0, 66687, '\p{^Blk:   -shavian}', "");
Expect(0, 66687, '\P{Blk:   -shavian}', "");
Expect(1, 66687, '\P{^Blk:   -shavian}', "");
Expect(0, 66639, '\p{Blk:   -shavian}', "");
Expect(1, 66639, '\p{^Blk:   -shavian}', "");
Expect(1, 66639, '\P{Blk:   -shavian}', "");
Expect(0, 66639, '\P{^Blk:   -shavian}', "");
Error('\p{Is_Block:   	/a/Shavian}');
Error('\P{Is_Block:   	/a/Shavian}');
Expect(1, 66687, '\p{Is_Block:	shavian}', "");
Expect(0, 66687, '\p{^Is_Block:	shavian}', "");
Expect(0, 66687, '\P{Is_Block:	shavian}', "");
Expect(1, 66687, '\P{^Is_Block:	shavian}', "");
Expect(0, 66639, '\p{Is_Block:	shavian}', "");
Expect(1, 66639, '\p{^Is_Block:	shavian}', "");
Expect(1, 66639, '\P{Is_Block:	shavian}', "");
Expect(0, 66639, '\P{^Is_Block:	shavian}', "");
Expect(1, 66687, '\p{Is_Block=	SHAVIAN}', "");
Expect(0, 66687, '\p{^Is_Block=	SHAVIAN}', "");
Expect(0, 66687, '\P{Is_Block=	SHAVIAN}', "");
Expect(1, 66687, '\P{^Is_Block=	SHAVIAN}', "");
Expect(0, 66639, '\p{Is_Block=	SHAVIAN}', "");
Expect(1, 66639, '\p{^Is_Block=	SHAVIAN}', "");
Expect(1, 66639, '\P{Is_Block=	SHAVIAN}', "");
Expect(0, 66639, '\P{^Is_Block=	SHAVIAN}', "");
Error('\p{Is_Blk:	:=Shavian}');
Error('\P{Is_Blk:	:=Shavian}');
Expect(1, 66687, '\p{Is_Blk=shavian}', "");
Expect(0, 66687, '\p{^Is_Blk=shavian}', "");
Expect(0, 66687, '\P{Is_Blk=shavian}', "");
Expect(1, 66687, '\P{^Is_Blk=shavian}', "");
Expect(0, 66639, '\p{Is_Blk=shavian}', "");
Expect(1, 66639, '\p{^Is_Blk=shavian}', "");
Expect(1, 66639, '\P{Is_Blk=shavian}', "");
Expect(0, 66639, '\P{^Is_Blk=shavian}', "");
Expect(1, 66687, '\p{Is_Blk=_shavian}', "");
Expect(0, 66687, '\p{^Is_Blk=_shavian}', "");
Expect(0, 66687, '\P{Is_Blk=_shavian}', "");
Expect(1, 66687, '\P{^Is_Blk=_shavian}', "");
Expect(0, 66639, '\p{Is_Blk=_shavian}', "");
Expect(1, 66639, '\p{^Is_Blk=_shavian}', "");
Expect(1, 66639, '\P{Is_Blk=_shavian}', "");
Expect(0, 66639, '\P{^Is_Blk=_shavian}', "");
Error('\p{Block=:= 	Lydian}');
Error('\P{Block=:= 	Lydian}');
Expect(1, 67903, '\p{Block=lydian}', "");
Expect(0, 67903, '\p{^Block=lydian}', "");
Expect(0, 67903, '\P{Block=lydian}', "");
Expect(1, 67903, '\P{^Block=lydian}', "");
Expect(0, 67871, '\p{Block=lydian}', "");
Expect(1, 67871, '\p{^Block=lydian}', "");
Expect(1, 67871, '\P{Block=lydian}', "");
Expect(0, 67871, '\P{^Block=lydian}', "");
Expect(1, 67903, '\p{Block=		lydian}', "");
Expect(0, 67903, '\p{^Block=		lydian}', "");
Expect(0, 67903, '\P{Block=		lydian}', "");
Expect(1, 67903, '\P{^Block=		lydian}', "");
Expect(0, 67871, '\p{Block=		lydian}', "");
Expect(1, 67871, '\p{^Block=		lydian}', "");
Expect(1, 67871, '\P{Block=		lydian}', "");
Expect(0, 67871, '\P{^Block=		lydian}', "");
Error('\p{Blk=-:=lydian}');
Error('\P{Blk=-:=lydian}');
Expect(1, 67903, '\p{Blk: lydian}', "");
Expect(0, 67903, '\p{^Blk: lydian}', "");
Expect(0, 67903, '\P{Blk: lydian}', "");
Expect(1, 67903, '\P{^Blk: lydian}', "");
Expect(0, 67871, '\p{Blk: lydian}', "");
Expect(1, 67871, '\p{^Blk: lydian}', "");
Expect(1, 67871, '\P{Blk: lydian}', "");
Expect(0, 67871, '\P{^Blk: lydian}', "");
Expect(1, 67903, '\p{Blk=	lydian}', "");
Expect(0, 67903, '\p{^Blk=	lydian}', "");
Expect(0, 67903, '\P{Blk=	lydian}', "");
Expect(1, 67903, '\P{^Blk=	lydian}', "");
Expect(0, 67871, '\p{Blk=	lydian}', "");
Expect(1, 67871, '\p{^Blk=	lydian}', "");
Expect(1, 67871, '\P{Blk=	lydian}', "");
Expect(0, 67871, '\P{^Blk=	lydian}', "");
Error('\p{Is_Block=-/a/Lydian}');
Error('\P{Is_Block=-/a/Lydian}');
Expect(1, 67903, '\p{Is_Block=lydian}', "");
Expect(0, 67903, '\p{^Is_Block=lydian}', "");
Expect(0, 67903, '\P{Is_Block=lydian}', "");
Expect(1, 67903, '\P{^Is_Block=lydian}', "");
Expect(0, 67871, '\p{Is_Block=lydian}', "");
Expect(1, 67871, '\p{^Is_Block=lydian}', "");
Expect(1, 67871, '\P{Is_Block=lydian}', "");
Expect(0, 67871, '\P{^Is_Block=lydian}', "");
Expect(1, 67903, '\p{Is_Block=_ Lydian}', "");
Expect(0, 67903, '\p{^Is_Block=_ Lydian}', "");
Expect(0, 67903, '\P{Is_Block=_ Lydian}', "");
Expect(1, 67903, '\P{^Is_Block=_ Lydian}', "");
Expect(0, 67871, '\p{Is_Block=_ Lydian}', "");
Expect(1, 67871, '\p{^Is_Block=_ Lydian}', "");
Expect(1, 67871, '\P{Is_Block=_ Lydian}', "");
Expect(0, 67871, '\P{^Is_Block=_ Lydian}', "");
Error('\p{Is_Blk=-/a/Lydian}');
Error('\P{Is_Blk=-/a/Lydian}');
Expect(1, 67903, '\p{Is_Blk=lydian}', "");
Expect(0, 67903, '\p{^Is_Blk=lydian}', "");
Expect(0, 67903, '\P{Is_Blk=lydian}', "");
Expect(1, 67903, '\P{^Is_Blk=lydian}', "");
Expect(0, 67871, '\p{Is_Blk=lydian}', "");
Expect(1, 67871, '\p{^Is_Blk=lydian}', "");
Expect(1, 67871, '\P{Is_Blk=lydian}', "");
Expect(0, 67871, '\P{^Is_Blk=lydian}', "");
Expect(1, 67903, '\p{Is_Blk=	-LYDIAN}', "");
Expect(0, 67903, '\p{^Is_Blk=	-LYDIAN}', "");
Expect(0, 67903, '\P{Is_Blk=	-LYDIAN}', "");
Expect(1, 67903, '\P{^Is_Blk=	-LYDIAN}', "");
Expect(0, 67871, '\p{Is_Blk=	-LYDIAN}', "");
Expect(1, 67871, '\p{^Is_Blk=	-LYDIAN}', "");
Expect(1, 67871, '\P{Is_Blk=	-LYDIAN}', "");
Expect(0, 67871, '\P{^Is_Blk=	-LYDIAN}', "");
Error('\p{Block=  cjkUnifiedIdeographs:=ExtensionC}');
Error('\P{Block=  cjkUnifiedIdeographs:=ExtensionC}');
Expect(1, 177983, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(0, 177983, '\p{^Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(0, 177983, '\P{Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(1, 177983, '\P{^Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(0, 173823, '\p{Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(1, 173823, '\p{^Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(1, 173823, '\P{Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Expect(0, 173823, '\P{^Block=_CJK	Unified ideographs	EXTENSION	C}', "");
Error('\p{Blk=	CJK Unified_IDEOGRAPHS-Extension_c:=}');
Error('\P{Blk=	CJK Unified_IDEOGRAPHS-Extension_c:=}');
Expect(1, 177983, '\p{Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(0, 177983, '\p{^Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(0, 177983, '\P{Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(1, 177983, '\P{^Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(0, 173823, '\p{Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(1, 173823, '\p{^Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(1, 173823, '\P{Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Expect(0, 173823, '\P{^Blk= _cjk	UNIFIED Ideographs_Extension-C}', "");
Error('\p{Is_Block=:=	cjk unified_Ideographs-extension_C}');
Error('\P{Is_Block=:=	cjk unified_Ideographs-extension_C}');
Expect(1, 177983, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(0, 177983, '\p{^Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(0, 177983, '\P{Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(1, 177983, '\P{^Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(0, 173823, '\p{Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(1, 173823, '\p{^Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(1, 173823, '\P{Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Expect(0, 173823, '\P{^Is_Block:	 CJK UNIFIED-ideographs-Extension-c}', "");
Error('\p{Is_Blk=--CJK:=Unified_ideographs Extension_C}');
Error('\P{Is_Blk=--CJK:=Unified_ideographs Extension_C}');
Expect(1, 177983, '\p{Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Blk: cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(0, 177983, '\p{^Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(0, 177983, '\P{Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(1, 177983, '\P{^Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(0, 173823, '\p{Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(1, 173823, '\p{^Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(1, 173823, '\P{Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Expect(0, 173823, '\P{^Is_Blk=_	CJK_UnifiedideographsExtension_c}', "");
Error('\p{Block:    Mongolian:=}');
Error('\P{Block:    Mongolian:=}');
Expect(1, 6319, '\p{Block=mongolian}', "");
Expect(0, 6319, '\p{^Block=mongolian}', "");
Expect(0, 6319, '\P{Block=mongolian}', "");
Expect(1, 6319, '\P{^Block=mongolian}', "");
Expect(0, 6143, '\p{Block=mongolian}', "");
Expect(1, 6143, '\p{^Block=mongolian}', "");
Expect(1, 6143, '\P{Block=mongolian}', "");
Expect(0, 6143, '\P{^Block=mongolian}', "");
Expect(1, 6319, '\p{Block=_Mongolian}', "");
Expect(0, 6319, '\p{^Block=_Mongolian}', "");
Expect(0, 6319, '\P{Block=_Mongolian}', "");
Expect(1, 6319, '\P{^Block=_Mongolian}', "");
Expect(0, 6143, '\p{Block=_Mongolian}', "");
Expect(1, 6143, '\p{^Block=_Mongolian}', "");
Expect(1, 6143, '\P{Block=_Mongolian}', "");
Expect(0, 6143, '\P{^Block=_Mongolian}', "");
Error('\p{Blk=:=Mongolian}');
Error('\P{Blk=:=Mongolian}');
Expect(1, 6319, '\p{Blk:   mongolian}', "");
Expect(0, 6319, '\p{^Blk:   mongolian}', "");
Expect(0, 6319, '\P{Blk:   mongolian}', "");
Expect(1, 6319, '\P{^Blk:   mongolian}', "");
Expect(0, 6143, '\p{Blk:   mongolian}', "");
Expect(1, 6143, '\p{^Blk:   mongolian}', "");
Expect(1, 6143, '\P{Blk:   mongolian}', "");
Expect(0, 6143, '\P{^Blk:   mongolian}', "");
Expect(1, 6319, '\p{Blk=	MONGOLIAN}', "");
Expect(0, 6319, '\p{^Blk=	MONGOLIAN}', "");
Expect(0, 6319, '\P{Blk=	MONGOLIAN}', "");
Expect(1, 6319, '\P{^Blk=	MONGOLIAN}', "");
Expect(0, 6143, '\p{Blk=	MONGOLIAN}', "");
Expect(1, 6143, '\p{^Blk=	MONGOLIAN}', "");
Expect(1, 6143, '\P{Blk=	MONGOLIAN}', "");
Expect(0, 6143, '\P{^Blk=	MONGOLIAN}', "");
Error('\p{Is_Block=/a/ _Mongolian}');
Error('\P{Is_Block=/a/ _Mongolian}');
Expect(1, 6319, '\p{Is_Block=mongolian}', "");
Expect(0, 6319, '\p{^Is_Block=mongolian}', "");
Expect(0, 6319, '\P{Is_Block=mongolian}', "");
Expect(1, 6319, '\P{^Is_Block=mongolian}', "");
Expect(0, 6143, '\p{Is_Block=mongolian}', "");
Expect(1, 6143, '\p{^Is_Block=mongolian}', "");
Expect(1, 6143, '\P{Is_Block=mongolian}', "");
Expect(0, 6143, '\P{^Is_Block=mongolian}', "");
Expect(1, 6319, '\p{Is_Block=-_mongolian}', "");
Expect(0, 6319, '\p{^Is_Block=-_mongolian}', "");
Expect(0, 6319, '\P{Is_Block=-_mongolian}', "");
Expect(1, 6319, '\P{^Is_Block=-_mongolian}', "");
Expect(0, 6143, '\p{Is_Block=-_mongolian}', "");
Expect(1, 6143, '\p{^Is_Block=-_mongolian}', "");
Expect(1, 6143, '\P{Is_Block=-_mongolian}', "");
Expect(0, 6143, '\P{^Is_Block=-_mongolian}', "");
Error('\p{Is_Blk=:= -mongolian}');
Error('\P{Is_Blk=:= -mongolian}');
Expect(1, 6319, '\p{Is_Blk=mongolian}', "");
Expect(0, 6319, '\p{^Is_Blk=mongolian}', "");
Expect(0, 6319, '\P{Is_Blk=mongolian}', "");
Expect(1, 6319, '\P{^Is_Blk=mongolian}', "");
Expect(0, 6143, '\p{Is_Blk=mongolian}', "");
Expect(1, 6143, '\p{^Is_Blk=mongolian}', "");
Expect(1, 6143, '\P{Is_Blk=mongolian}', "");
Expect(0, 6143, '\P{^Is_Blk=mongolian}', "");
Expect(1, 6319, '\p{Is_Blk=  MONGOLIAN}', "");
Expect(0, 6319, '\p{^Is_Blk=  MONGOLIAN}', "");
Expect(0, 6319, '\P{Is_Blk=  MONGOLIAN}', "");
Expect(1, 6319, '\P{^Is_Blk=  MONGOLIAN}', "");
Expect(0, 6143, '\p{Is_Blk=  MONGOLIAN}', "");
Expect(1, 6143, '\p{^Is_Blk=  MONGOLIAN}', "");
Expect(1, 6143, '\P{Is_Blk=  MONGOLIAN}', "");
Expect(0, 6143, '\P{^Is_Blk=  MONGOLIAN}', "");
Error('\p{Block=/a/ Lao}');
Error('\P{Block=/a/ Lao}');
Expect(1, 3839, '\p{Block=lao}', "");
Expect(0, 3839, '\p{^Block=lao}', "");
Expect(0, 3839, '\P{Block=lao}', "");
Expect(1, 3839, '\P{^Block=lao}', "");
Expect(0, 3711, '\p{Block=lao}', "");
Expect(1, 3711, '\p{^Block=lao}', "");
Expect(1, 3711, '\P{Block=lao}', "");
Expect(0, 3711, '\P{^Block=lao}', "");
Expect(1, 3839, '\p{Block=  Lao}', "");
Expect(0, 3839, '\p{^Block=  Lao}', "");
Expect(0, 3839, '\P{Block=  Lao}', "");
Expect(1, 3839, '\P{^Block=  Lao}', "");
Expect(0, 3711, '\p{Block=  Lao}', "");
Expect(1, 3711, '\p{^Block=  Lao}', "");
Expect(1, 3711, '\P{Block=  Lao}', "");
Expect(0, 3711, '\P{^Block=  Lao}', "");
Error('\p{Blk=/a/  lao}');
Error('\P{Blk=/a/  lao}');
Expect(1, 3839, '\p{Blk:   lao}', "");
Expect(0, 3839, '\p{^Blk:   lao}', "");
Expect(0, 3839, '\P{Blk:   lao}', "");
Expect(1, 3839, '\P{^Blk:   lao}', "");
Expect(0, 3711, '\p{Blk:   lao}', "");
Expect(1, 3711, '\p{^Blk:   lao}', "");
Expect(1, 3711, '\P{Blk:   lao}', "");
Expect(0, 3711, '\P{^Blk:   lao}', "");
Expect(1, 3839, '\p{Blk=- LAO}', "");
Expect(0, 3839, '\p{^Blk=- LAO}', "");
Expect(0, 3839, '\P{Blk=- LAO}', "");
Expect(1, 3839, '\P{^Blk=- LAO}', "");
Expect(0, 3711, '\p{Blk=- LAO}', "");
Expect(1, 3711, '\p{^Blk=- LAO}', "");
Expect(1, 3711, '\P{Blk=- LAO}', "");
Expect(0, 3711, '\P{^Blk=- LAO}', "");
Error('\p{Is_Block=:= -lao}');
Error('\P{Is_Block=:= -lao}');
Expect(1, 3839, '\p{Is_Block=lao}', "");
Expect(0, 3839, '\p{^Is_Block=lao}', "");
Expect(0, 3839, '\P{Is_Block=lao}', "");
Expect(1, 3839, '\P{^Is_Block=lao}', "");
Expect(0, 3711, '\p{Is_Block=lao}', "");
Expect(1, 3711, '\p{^Is_Block=lao}', "");
Expect(1, 3711, '\P{Is_Block=lao}', "");
Expect(0, 3711, '\P{^Is_Block=lao}', "");
Expect(1, 3839, '\p{Is_Block=	 lao}', "");
Expect(0, 3839, '\p{^Is_Block=	 lao}', "");
Expect(0, 3839, '\P{Is_Block=	 lao}', "");
Expect(1, 3839, '\P{^Is_Block=	 lao}', "");
Expect(0, 3711, '\p{Is_Block=	 lao}', "");
Expect(1, 3711, '\p{^Is_Block=	 lao}', "");
Expect(1, 3711, '\P{Is_Block=	 lao}', "");
Expect(0, 3711, '\P{^Is_Block=	 lao}', "");
Error('\p{Is_Blk=/a/_Lao}');
Error('\P{Is_Blk=/a/_Lao}');
Expect(1, 3839, '\p{Is_Blk:	lao}', "");
Expect(0, 3839, '\p{^Is_Blk:	lao}', "");
Expect(0, 3839, '\P{Is_Blk:	lao}', "");
Expect(1, 3839, '\P{^Is_Blk:	lao}', "");
Expect(0, 3711, '\p{Is_Blk:	lao}', "");
Expect(1, 3711, '\p{^Is_Blk:	lao}', "");
Expect(1, 3711, '\P{Is_Blk:	lao}', "");
Expect(0, 3711, '\P{^Is_Blk:	lao}', "");
Expect(1, 3839, '\p{Is_Blk=-	Lao}', "");
Expect(0, 3839, '\p{^Is_Blk=-	Lao}', "");
Expect(0, 3839, '\P{Is_Blk=-	Lao}', "");
Expect(1, 3839, '\P{^Is_Blk=-	Lao}', "");
Expect(0, 3711, '\p{Is_Blk=-	Lao}', "");
Expect(1, 3711, '\p{^Is_Blk=-	Lao}', "");
Expect(1, 3711, '\P{Is_Blk=-	Lao}', "");
Expect(0, 3711, '\P{^Is_Blk=-	Lao}', "");
Error('\p{Block=/a/	_Hiragana}');
Error('\P{Block=/a/	_Hiragana}');
Expect(1, 12447, '\p{Block=hiragana}', "");
Expect(0, 12447, '\p{^Block=hiragana}', "");
Expect(0, 12447, '\P{Block=hiragana}', "");
Expect(1, 12447, '\P{^Block=hiragana}', "");
Expect(0, 12351, '\p{Block=hiragana}', "");
Expect(1, 12351, '\p{^Block=hiragana}', "");
Expect(1, 12351, '\P{Block=hiragana}', "");
Expect(0, 12351, '\P{^Block=hiragana}', "");
Expect(1, 12447, '\p{Block=_HIRAGANA}', "");
Expect(0, 12447, '\p{^Block=_HIRAGANA}', "");
Expect(0, 12447, '\P{Block=_HIRAGANA}', "");
Expect(1, 12447, '\P{^Block=_HIRAGANA}', "");
Expect(0, 12351, '\p{Block=_HIRAGANA}', "");
Expect(1, 12351, '\p{^Block=_HIRAGANA}', "");
Expect(1, 12351, '\P{Block=_HIRAGANA}', "");
Expect(0, 12351, '\P{^Block=_HIRAGANA}', "");
Error('\p{Blk=:=_	hiragana}');
Error('\P{Blk=:=_	hiragana}');
Expect(1, 12447, '\p{Blk: hiragana}', "");
Expect(0, 12447, '\p{^Blk: hiragana}', "");
Expect(0, 12447, '\P{Blk: hiragana}', "");
Expect(1, 12447, '\P{^Blk: hiragana}', "");
Expect(0, 12351, '\p{Blk: hiragana}', "");
Expect(1, 12351, '\p{^Blk: hiragana}', "");
Expect(1, 12351, '\P{Blk: hiragana}', "");
Expect(0, 12351, '\P{^Blk: hiragana}', "");
Expect(1, 12447, '\p{Blk=  Hiragana}', "");
Expect(0, 12447, '\p{^Blk=  Hiragana}', "");
Expect(0, 12447, '\P{Blk=  Hiragana}', "");
Expect(1, 12447, '\P{^Blk=  Hiragana}', "");
Expect(0, 12351, '\p{Blk=  Hiragana}', "");
Expect(1, 12351, '\p{^Blk=  Hiragana}', "");
Expect(1, 12351, '\P{Blk=  Hiragana}', "");
Expect(0, 12351, '\P{^Blk=  Hiragana}', "");
Error('\p{Is_Block=:= HIRAGANA}');
Error('\P{Is_Block=:= HIRAGANA}');
Expect(1, 12447, '\p{Is_Block: hiragana}', "");
Expect(0, 12447, '\p{^Is_Block: hiragana}', "");
Expect(0, 12447, '\P{Is_Block: hiragana}', "");
Expect(1, 12447, '\P{^Is_Block: hiragana}', "");
Expect(0, 12351, '\p{Is_Block: hiragana}', "");
Expect(1, 12351, '\p{^Is_Block: hiragana}', "");
Expect(1, 12351, '\P{Is_Block: hiragana}', "");
Expect(0, 12351, '\P{^Is_Block: hiragana}', "");
Expect(1, 12447, '\p{Is_Block=-_Hiragana}', "");
Expect(0, 12447, '\p{^Is_Block=-_Hiragana}', "");
Expect(0, 12447, '\P{Is_Block=-_Hiragana}', "");
Expect(1, 12447, '\P{^Is_Block=-_Hiragana}', "");
Expect(0, 12351, '\p{Is_Block=-_Hiragana}', "");
Expect(1, 12351, '\p{^Is_Block=-_Hiragana}', "");
Expect(1, 12351, '\P{Is_Block=-_Hiragana}', "");
Expect(0, 12351, '\P{^Is_Block=-_Hiragana}', "");
Error('\p{Is_Blk: -:=hiragana}');
Error('\P{Is_Blk: -:=hiragana}');
Expect(1, 12447, '\p{Is_Blk=hiragana}', "");
Expect(0, 12447, '\p{^Is_Blk=hiragana}', "");
Expect(0, 12447, '\P{Is_Blk=hiragana}', "");
Expect(1, 12447, '\P{^Is_Blk=hiragana}', "");
Expect(0, 12351, '\p{Is_Blk=hiragana}', "");
Expect(1, 12351, '\p{^Is_Blk=hiragana}', "");
Expect(1, 12351, '\P{Is_Blk=hiragana}', "");
Expect(0, 12351, '\P{^Is_Blk=hiragana}', "");
Expect(1, 12447, '\p{Is_Blk=		Hiragana}', "");
Expect(0, 12447, '\p{^Is_Blk=		Hiragana}', "");
Expect(0, 12447, '\P{Is_Blk=		Hiragana}', "");
Expect(1, 12447, '\P{^Is_Blk=		Hiragana}', "");
Expect(0, 12351, '\p{Is_Blk=		Hiragana}', "");
Expect(1, 12351, '\p{^Is_Blk=		Hiragana}', "");
Expect(1, 12351, '\P{Is_Blk=		Hiragana}', "");
Expect(0, 12351, '\P{^Is_Blk=		Hiragana}', "");
Error('\p{Block=-LEPCHA/a/}');
Error('\P{Block=-LEPCHA/a/}');
Expect(1, 7247, '\p{Block=lepcha}', "");
Expect(0, 7247, '\p{^Block=lepcha}', "");
Expect(0, 7247, '\P{Block=lepcha}', "");
Expect(1, 7247, '\P{^Block=lepcha}', "");
Expect(0, 7167, '\p{Block=lepcha}', "");
Expect(1, 7167, '\p{^Block=lepcha}', "");
Expect(1, 7167, '\P{Block=lepcha}', "");
Expect(0, 7167, '\P{^Block=lepcha}', "");
Expect(1, 7247, '\p{Block= _lepcha}', "");
Expect(0, 7247, '\p{^Block= _lepcha}', "");
Expect(0, 7247, '\P{Block= _lepcha}', "");
Expect(1, 7247, '\P{^Block= _lepcha}', "");
Expect(0, 7167, '\p{Block= _lepcha}', "");
Expect(1, 7167, '\p{^Block= _lepcha}', "");
Expect(1, 7167, '\P{Block= _lepcha}', "");
Expect(0, 7167, '\P{^Block= _lepcha}', "");
Error('\p{Blk=/a/_ lepcha}');
Error('\P{Blk=/a/_ lepcha}');
Expect(1, 7247, '\p{Blk=lepcha}', "");
Expect(0, 7247, '\p{^Blk=lepcha}', "");
Expect(0, 7247, '\P{Blk=lepcha}', "");
Expect(1, 7247, '\P{^Blk=lepcha}', "");
Expect(0, 7167, '\p{Blk=lepcha}', "");
Expect(1, 7167, '\p{^Blk=lepcha}', "");
Expect(1, 7167, '\P{Blk=lepcha}', "");
Expect(0, 7167, '\P{^Blk=lepcha}', "");
Expect(1, 7247, '\p{Blk=-Lepcha}', "");
Expect(0, 7247, '\p{^Blk=-Lepcha}', "");
Expect(0, 7247, '\P{Blk=-Lepcha}', "");
Expect(1, 7247, '\P{^Blk=-Lepcha}', "");
Expect(0, 7167, '\p{Blk=-Lepcha}', "");
Expect(1, 7167, '\p{^Blk=-Lepcha}', "");
Expect(1, 7167, '\P{Blk=-Lepcha}', "");
Expect(0, 7167, '\P{^Blk=-Lepcha}', "");
Error('\p{Is_Block= _Lepcha:=}');
Error('\P{Is_Block= _Lepcha:=}');
Expect(1, 7247, '\p{Is_Block=lepcha}', "");
Expect(0, 7247, '\p{^Is_Block=lepcha}', "");
Expect(0, 7247, '\P{Is_Block=lepcha}', "");
Expect(1, 7247, '\P{^Is_Block=lepcha}', "");
Expect(0, 7167, '\p{Is_Block=lepcha}', "");
Expect(1, 7167, '\p{^Is_Block=lepcha}', "");
Expect(1, 7167, '\P{Is_Block=lepcha}', "");
Expect(0, 7167, '\P{^Is_Block=lepcha}', "");
Expect(1, 7247, '\p{Is_Block=-_Lepcha}', "");
Expect(0, 7247, '\p{^Is_Block=-_Lepcha}', "");
Expect(0, 7247, '\P{Is_Block=-_Lepcha}', "");
Expect(1, 7247, '\P{^Is_Block=-_Lepcha}', "");
Expect(0, 7167, '\p{Is_Block=-_Lepcha}', "");
Expect(1, 7167, '\p{^Is_Block=-_Lepcha}', "");
Expect(1, 7167, '\P{Is_Block=-_Lepcha}', "");
Expect(0, 7167, '\P{^Is_Block=-_Lepcha}', "");
Error('\p{Is_Blk=-:=LEPCHA}');
Error('\P{Is_Blk=-:=LEPCHA}');
Expect(1, 7247, '\p{Is_Blk:lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk:lepcha}', "");
Expect(0, 7247, '\P{Is_Blk:lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk:lepcha}', "");
Expect(0, 7167, '\p{Is_Blk:lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk:lepcha}', "");
Expect(1, 7167, '\P{Is_Blk:lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk:lepcha}', "");
Expect(1, 7247, '\p{Is_Blk=-	lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk=-	lepcha}', "");
Expect(0, 7247, '\P{Is_Blk=-	lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk=-	lepcha}', "");
Expect(0, 7167, '\p{Is_Blk=-	lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk=-	lepcha}', "");
Expect(1, 7167, '\P{Is_Blk=-	lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk=-	lepcha}', "");
Error('\p{Block=_ Syloti-nagri/a/}');
Error('\P{Block=_ Syloti-nagri/a/}');
Expect(1, 43055, '\p{Block=sylotinagri}', "");
Expect(0, 43055, '\p{^Block=sylotinagri}', "");
Expect(0, 43055, '\P{Block=sylotinagri}', "");
Expect(1, 43055, '\P{^Block=sylotinagri}', "");
Expect(0, 43007, '\p{Block=sylotinagri}', "");
Expect(1, 43007, '\p{^Block=sylotinagri}', "");
Expect(1, 43007, '\P{Block=sylotinagri}', "");
Expect(0, 43007, '\P{^Block=sylotinagri}', "");
Expect(1, 43055, '\p{Block=  syloti NAGRI}', "");
Expect(0, 43055, '\p{^Block=  syloti NAGRI}', "");
Expect(0, 43055, '\P{Block=  syloti NAGRI}', "");
Expect(1, 43055, '\P{^Block=  syloti NAGRI}', "");
Expect(0, 43007, '\p{Block=  syloti NAGRI}', "");
Expect(1, 43007, '\p{^Block=  syloti NAGRI}', "");
Expect(1, 43007, '\P{Block=  syloti NAGRI}', "");
Expect(0, 43007, '\P{^Block=  syloti NAGRI}', "");
Error('\p{Blk=:= -Syloti_Nagri}');
Error('\P{Blk=:= -Syloti_Nagri}');
Expect(1, 43055, '\p{Blk=sylotinagri}', "");
Expect(0, 43055, '\p{^Blk=sylotinagri}', "");
Expect(0, 43055, '\P{Blk=sylotinagri}', "");
Expect(1, 43055, '\P{^Blk=sylotinagri}', "");
Expect(0, 43007, '\p{Blk=sylotinagri}', "");
Expect(1, 43007, '\p{^Blk=sylotinagri}', "");
Expect(1, 43007, '\P{Blk=sylotinagri}', "");
Expect(0, 43007, '\P{^Blk=sylotinagri}', "");
Expect(1, 43055, '\p{Blk= sylotiNagri}', "");
Expect(0, 43055, '\p{^Blk= sylotiNagri}', "");
Expect(0, 43055, '\P{Blk= sylotiNagri}', "");
Expect(1, 43055, '\P{^Blk= sylotiNagri}', "");
Expect(0, 43007, '\p{Blk= sylotiNagri}', "");
Expect(1, 43007, '\p{^Blk= sylotiNagri}', "");
Expect(1, 43007, '\P{Blk= sylotiNagri}', "");
Expect(0, 43007, '\P{^Blk= sylotiNagri}', "");
Error('\p{Is_Block= :=Syloti_Nagri}');
Error('\P{Is_Block= :=Syloti_Nagri}');
Expect(1, 43055, '\p{Is_Block:   sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Block:   sylotinagri}', "");
Expect(0, 43055, '\P{Is_Block:   sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Block:   sylotinagri}', "");
Expect(0, 43007, '\p{Is_Block:   sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Block:   sylotinagri}', "");
Expect(1, 43007, '\P{Is_Block:   sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Block:   sylotinagri}', "");
Expect(1, 43055, '\p{Is_Block=_ syloti_Nagri}', "");
Expect(0, 43055, '\p{^Is_Block=_ syloti_Nagri}', "");
Expect(0, 43055, '\P{Is_Block=_ syloti_Nagri}', "");
Expect(1, 43055, '\P{^Is_Block=_ syloti_Nagri}', "");
Expect(0, 43007, '\p{Is_Block=_ syloti_Nagri}', "");
Expect(1, 43007, '\p{^Is_Block=_ syloti_Nagri}', "");
Expect(1, 43007, '\P{Is_Block=_ syloti_Nagri}', "");
Expect(0, 43007, '\P{^Is_Block=_ syloti_Nagri}', "");
Error('\p{Is_Blk=	 SYLOTI Nagri/a/}');
Error('\P{Is_Blk=	 SYLOTI Nagri/a/}');
Expect(1, 43055, '\p{Is_Blk=sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Blk=sylotinagri}', "");
Expect(0, 43055, '\P{Is_Blk=sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Blk=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Blk=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Blk=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Blk=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Blk=sylotinagri}', "");
Expect(1, 43055, '\p{Is_Blk= -Sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Blk= -Sylotinagri}', "");
Expect(0, 43055, '\P{Is_Blk= -Sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Blk= -Sylotinagri}', "");
Expect(0, 43007, '\p{Is_Blk= -Sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Blk= -Sylotinagri}', "");
Expect(1, 43007, '\P{Is_Blk= -Sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Blk= -Sylotinagri}', "");
Error('\p{Block= COMBINING/a/DIACRITICAL	marks	FOR	symbols}');
Error('\P{Block= COMBINING/a/DIACRITICAL	marks	FOR	symbols}');
Expect(1, 8447, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(0, 8447, '\p{^Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(0, 8447, '\P{Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(1, 8447, '\P{^Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(0, 8399, '\p{Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(1, 8399, '\p{^Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(1, 8399, '\P{Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Expect(0, 8399, '\P{^Block=		combining	DIACRITICAL Marks	For-SYMBOLS}', "");
Error('\p{Blk=-:=combiningmarks For SYMBOLS}');
Error('\P{Blk=-:=combiningmarks For SYMBOLS}');
Expect(1, 8447, '\p{Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Blk= 	Combining marks for_Symbols}', "");
Expect(0, 8447, '\p{^Blk= 	Combining marks for_Symbols}', "");
Expect(0, 8447, '\P{Blk= 	Combining marks for_Symbols}', "");
Expect(1, 8447, '\P{^Blk= 	Combining marks for_Symbols}', "");
Expect(0, 8399, '\p{Blk= 	Combining marks for_Symbols}', "");
Expect(1, 8399, '\p{^Blk= 	Combining marks for_Symbols}', "");
Expect(1, 8399, '\P{Blk= 	Combining marks for_Symbols}', "");
Expect(0, 8399, '\P{^Blk= 	Combining marks for_Symbols}', "");
Error('\p{Is_Block= :=combining_Diacritical marks For_symbols}');
Error('\P{Is_Block= :=combining_Diacritical marks For_symbols}');
Expect(1, 8447, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(0, 8447, '\p{^Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(0, 8447, '\P{Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(1, 8447, '\P{^Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(0, 8399, '\p{Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(1, 8399, '\p{^Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(1, 8399, '\P{Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Expect(0, 8399, '\P{^Is_Block=Combiningdiacritical_Marks-For-symbols}', "");
Error('\p{Is_Blk=_/a/Combining	Marks-For	Symbols}');
Error('\P{Is_Blk=_/a/Combining	Marks-For	Symbols}');
Expect(1, 8447, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(0, 8447, '\p{^Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(0, 8447, '\P{Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(1, 8447, '\P{^Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(0, 8399, '\p{Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(1, 8399, '\p{^Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(1, 8399, '\P{Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Expect(0, 8399, '\P{^Is_Blk=_COMBINING Marks_FOR	symbols}', "");
Error('\p{Block=	:=BasicLATIN}');
Error('\P{Block=	:=BasicLATIN}');
Expect(1, 127, '\p{Block=basiclatin}', "");
Expect(0, 127, '\p{^Block=basiclatin}', "");
Expect(0, 127, '\P{Block=basiclatin}', "");
Expect(1, 127, '\P{^Block=basiclatin}', "");
Expect(0, 128, '\p{Block=basiclatin}', "");
Expect(1, 128, '\p{^Block=basiclatin}', "");
Expect(1, 128, '\P{Block=basiclatin}', "");
Expect(0, 128, '\P{^Block=basiclatin}', "");
Expect(1, 127, '\p{Block=__basic	Latin}', "");
Expect(0, 127, '\p{^Block=__basic	Latin}', "");
Expect(0, 127, '\P{Block=__basic	Latin}', "");
Expect(1, 127, '\P{^Block=__basic	Latin}', "");
Expect(0, 128, '\p{Block=__basic	Latin}', "");
Expect(1, 128, '\p{^Block=__basic	Latin}', "");
Expect(1, 128, '\P{Block=__basic	Latin}', "");
Expect(0, 128, '\P{^Block=__basic	Latin}', "");
Error('\p{Blk=	ASCII/a/}');
Error('\P{Blk=	ASCII/a/}');
Expect(1, 127, '\p{Blk=ascii}', "");
Expect(0, 127, '\p{^Blk=ascii}', "");
Expect(0, 127, '\P{Blk=ascii}', "");
Expect(1, 127, '\P{^Blk=ascii}', "");
Expect(0, 128, '\p{Blk=ascii}', "");
Expect(1, 128, '\p{^Blk=ascii}', "");
Expect(1, 128, '\P{Blk=ascii}', "");
Expect(0, 128, '\P{^Blk=ascii}', "");
Expect(1, 127, '\p{Blk= ASCII}', "");
Expect(0, 127, '\p{^Blk= ASCII}', "");
Expect(0, 127, '\P{Blk= ASCII}', "");
Expect(1, 127, '\P{^Blk= ASCII}', "");
Expect(0, 128, '\p{Blk= ASCII}', "");
Expect(1, 128, '\p{^Blk= ASCII}', "");
Expect(1, 128, '\P{Blk= ASCII}', "");
Expect(0, 128, '\P{^Blk= ASCII}', "");
Error('\p{Is_Block=- Basic	Latin/a/}');
Error('\P{Is_Block=- Basic	Latin/a/}');
Expect(1, 127, '\p{Is_Block=basiclatin}', "");
Expect(0, 127, '\p{^Is_Block=basiclatin}', "");
Expect(0, 127, '\P{Is_Block=basiclatin}', "");
Expect(1, 127, '\P{^Is_Block=basiclatin}', "");
Expect(0, 128, '\p{Is_Block=basiclatin}', "");
Expect(1, 128, '\p{^Is_Block=basiclatin}', "");
Expect(1, 128, '\P{Is_Block=basiclatin}', "");
Expect(0, 128, '\P{^Is_Block=basiclatin}', "");
Expect(1, 127, '\p{Is_Block=	-BASICLATIN}', "");
Expect(0, 127, '\p{^Is_Block=	-BASICLATIN}', "");
Expect(0, 127, '\P{Is_Block=	-BASICLATIN}', "");
Expect(1, 127, '\P{^Is_Block=	-BASICLATIN}', "");
Expect(0, 128, '\p{Is_Block=	-BASICLATIN}', "");
Expect(1, 128, '\p{^Is_Block=	-BASICLATIN}', "");
Expect(1, 128, '\P{Is_Block=	-BASICLATIN}', "");
Expect(0, 128, '\P{^Is_Block=	-BASICLATIN}', "");
Error('\p{Is_Blk=/a/	 ascii}');
Error('\P{Is_Blk=/a/	 ascii}');
Expect(1, 127, '\p{Is_Blk:   ascii}', "");
Expect(0, 127, '\p{^Is_Blk:   ascii}', "");
Expect(0, 127, '\P{Is_Blk:   ascii}', "");
Expect(1, 127, '\P{^Is_Blk:   ascii}', "");
Expect(0, 128, '\p{Is_Blk:   ascii}', "");
Expect(1, 128, '\p{^Is_Blk:   ascii}', "");
Expect(1, 128, '\P{Is_Blk:   ascii}', "");
Expect(0, 128, '\P{^Is_Blk:   ascii}', "");
Expect(1, 127, '\p{Is_Blk=-	ASCII}', "");
Expect(0, 127, '\p{^Is_Blk=-	ASCII}', "");
Expect(0, 127, '\P{Is_Blk=-	ASCII}', "");
Expect(1, 127, '\P{^Is_Blk=-	ASCII}', "");
Expect(0, 128, '\p{Is_Blk=-	ASCII}', "");
Expect(1, 128, '\p{^Is_Blk=-	ASCII}', "");
Expect(1, 128, '\P{Is_Blk=-	ASCII}', "");
Expect(0, 128, '\P{^Is_Blk=-	ASCII}', "");
Error('\p{Block=	/a/Limbu}');
Error('\P{Block=	/a/Limbu}');
Expect(1, 6479, '\p{Block: limbu}', "");
Expect(0, 6479, '\p{^Block: limbu}', "");
Expect(0, 6479, '\P{Block: limbu}', "");
Expect(1, 6479, '\P{^Block: limbu}', "");
Expect(0, 6399, '\p{Block: limbu}', "");
Expect(1, 6399, '\p{^Block: limbu}', "");
Expect(1, 6399, '\P{Block: limbu}', "");
Expect(0, 6399, '\P{^Block: limbu}', "");
Expect(1, 6479, '\p{Block=		Limbu}', "");
Expect(0, 6479, '\p{^Block=		Limbu}', "");
Expect(0, 6479, '\P{Block=		Limbu}', "");
Expect(1, 6479, '\P{^Block=		Limbu}', "");
Expect(0, 6399, '\p{Block=		Limbu}', "");
Expect(1, 6399, '\p{^Block=		Limbu}', "");
Expect(1, 6399, '\P{Block=		Limbu}', "");
Expect(0, 6399, '\P{^Block=		Limbu}', "");
Error('\p{Blk=:=Limbu}');
Error('\P{Blk=:=Limbu}');
Expect(1, 6479, '\p{Blk:	limbu}', "");
Expect(0, 6479, '\p{^Blk:	limbu}', "");
Expect(0, 6479, '\P{Blk:	limbu}', "");
Expect(1, 6479, '\P{^Blk:	limbu}', "");
Expect(0, 6399, '\p{Blk:	limbu}', "");
Expect(1, 6399, '\p{^Blk:	limbu}', "");
Expect(1, 6399, '\P{Blk:	limbu}', "");
Expect(0, 6399, '\P{^Blk:	limbu}', "");
Expect(1, 6479, '\p{Blk=- Limbu}', "");
Expect(0, 6479, '\p{^Blk=- Limbu}', "");
Expect(0, 6479, '\P{Blk=- Limbu}', "");
Expect(1, 6479, '\P{^Blk=- Limbu}', "");
Expect(0, 6399, '\p{Blk=- Limbu}', "");
Expect(1, 6399, '\p{^Blk=- Limbu}', "");
Expect(1, 6399, '\P{Blk=- Limbu}', "");
Expect(0, 6399, '\P{^Blk=- Limbu}', "");
Error('\p{Is_Block:    	LIMBU:=}');
Error('\P{Is_Block:    	LIMBU:=}');
Expect(1, 6479, '\p{Is_Block=limbu}', "");
Expect(0, 6479, '\p{^Is_Block=limbu}', "");
Expect(0, 6479, '\P{Is_Block=limbu}', "");
Expect(1, 6479, '\P{^Is_Block=limbu}', "");
Expect(0, 6399, '\p{Is_Block=limbu}', "");
Expect(1, 6399, '\p{^Is_Block=limbu}', "");
Expect(1, 6399, '\P{Is_Block=limbu}', "");
Expect(0, 6399, '\P{^Is_Block=limbu}', "");
Expect(1, 6479, '\p{Is_Block=	LIMBU}', "");
Expect(0, 6479, '\p{^Is_Block=	LIMBU}', "");
Expect(0, 6479, '\P{Is_Block=	LIMBU}', "");
Expect(1, 6479, '\P{^Is_Block=	LIMBU}', "");
Expect(0, 6399, '\p{Is_Block=	LIMBU}', "");
Expect(1, 6399, '\p{^Is_Block=	LIMBU}', "");
Expect(1, 6399, '\P{Is_Block=	LIMBU}', "");
Expect(0, 6399, '\P{^Is_Block=	LIMBU}', "");
Error('\p{Is_Blk= -Limbu:=}');
Error('\P{Is_Blk= -Limbu:=}');
Expect(1, 6479, '\p{Is_Blk:	limbu}', "");
Expect(0, 6479, '\p{^Is_Blk:	limbu}', "");
Expect(0, 6479, '\P{Is_Blk:	limbu}', "");
Expect(1, 6479, '\P{^Is_Blk:	limbu}', "");
Expect(0, 6399, '\p{Is_Blk:	limbu}', "");
Expect(1, 6399, '\p{^Is_Blk:	limbu}', "");
Expect(1, 6399, '\P{Is_Blk:	limbu}', "");
Expect(0, 6399, '\P{^Is_Blk:	limbu}', "");
Expect(1, 6479, '\p{Is_Blk=_-limbu}', "");
Expect(0, 6479, '\p{^Is_Blk=_-limbu}', "");
Expect(0, 6479, '\P{Is_Blk=_-limbu}', "");
Expect(1, 6479, '\P{^Is_Blk=_-limbu}', "");
Expect(0, 6399, '\p{Is_Blk=_-limbu}', "");
Expect(1, 6399, '\p{^Is_Blk=_-limbu}', "");
Expect(1, 6399, '\P{Is_Blk=_-limbu}', "");
Expect(0, 6399, '\P{^Is_Blk=_-limbu}', "");
Error('\p{Block=:=_-CURRENCY_symbols}');
Error('\P{Block=:=_-CURRENCY_symbols}');
Expect(1, 8399, '\p{Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Block=currencysymbols}', "");
Expect(0, 8399, '\P{Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Block=currencysymbols}', "");
Expect(0, 8351, '\p{Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Block=currencysymbols}', "");
Expect(1, 8351, '\P{Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Block=currencysymbols}', "");
Expect(1, 8399, '\p{Block=--currency	Symbols}', "");
Expect(0, 8399, '\p{^Block=--currency	Symbols}', "");
Expect(0, 8399, '\P{Block=--currency	Symbols}', "");
Expect(1, 8399, '\P{^Block=--currency	Symbols}', "");
Expect(0, 8351, '\p{Block=--currency	Symbols}', "");
Expect(1, 8351, '\p{^Block=--currency	Symbols}', "");
Expect(1, 8351, '\P{Block=--currency	Symbols}', "");
Expect(0, 8351, '\P{^Block=--currency	Symbols}', "");
Error('\p{Blk=/a/Currency Symbols}');
Error('\P{Blk=/a/Currency Symbols}');
Expect(1, 8399, '\p{Blk=currencysymbols}', "");
Expect(0, 8399, '\p{^Blk=currencysymbols}', "");
Expect(0, 8399, '\P{Blk=currencysymbols}', "");
Expect(1, 8399, '\P{^Blk=currencysymbols}', "");
Expect(0, 8351, '\p{Blk=currencysymbols}', "");
Expect(1, 8351, '\p{^Blk=currencysymbols}', "");
Expect(1, 8351, '\P{Blk=currencysymbols}', "");
Expect(0, 8351, '\P{^Blk=currencysymbols}', "");
Expect(1, 8399, '\p{Blk=-CURRENCY	symbols}', "");
Expect(0, 8399, '\p{^Blk=-CURRENCY	symbols}', "");
Expect(0, 8399, '\P{Blk=-CURRENCY	symbols}', "");
Expect(1, 8399, '\P{^Blk=-CURRENCY	symbols}', "");
Expect(0, 8351, '\p{Blk=-CURRENCY	symbols}', "");
Expect(1, 8351, '\p{^Blk=-CURRENCY	symbols}', "");
Expect(1, 8351, '\P{Blk=-CURRENCY	symbols}', "");
Expect(0, 8351, '\P{^Blk=-CURRENCY	symbols}', "");
Error('\p{Is_Block=_ Currency	Symbols:=}');
Error('\P{Is_Block=_ Currency	Symbols:=}');
Expect(1, 8399, '\p{Is_Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Block=currencysymbols}', "");
Expect(0, 8399, '\P{Is_Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Block=currencysymbols}', "");
Expect(0, 8351, '\p{Is_Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Block=currencysymbols}', "");
Expect(1, 8351, '\P{Is_Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Block=currencysymbols}', "");
Expect(1, 8399, '\p{Is_Block=CURRENCY Symbols}', "");
Expect(0, 8399, '\p{^Is_Block=CURRENCY Symbols}', "");
Expect(0, 8399, '\P{Is_Block=CURRENCY Symbols}', "");
Expect(1, 8399, '\P{^Is_Block=CURRENCY Symbols}', "");
Expect(0, 8351, '\p{Is_Block=CURRENCY Symbols}', "");
Expect(1, 8351, '\p{^Is_Block=CURRENCY Symbols}', "");
Expect(1, 8351, '\P{Is_Block=CURRENCY Symbols}', "");
Expect(0, 8351, '\P{^Is_Block=CURRENCY Symbols}', "");
Error('\p{Is_Blk=:=_currency_Symbols}');
Error('\P{Is_Blk=:=_currency_Symbols}');
Expect(1, 8399, '\p{Is_Blk=currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Blk=currencysymbols}', "");
Expect(0, 8399, '\P{Is_Blk=currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Blk=currencysymbols}', "");
Expect(0, 8351, '\p{Is_Blk=currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Blk=currencysymbols}', "");
Expect(1, 8351, '\P{Is_Blk=currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Blk=currencysymbols}', "");
Expect(1, 8399, '\p{Is_Blk=-CURRENCY Symbols}', "");
Expect(0, 8399, '\p{^Is_Blk=-CURRENCY Symbols}', "");
Expect(0, 8399, '\P{Is_Blk=-CURRENCY Symbols}', "");
Expect(1, 8399, '\P{^Is_Blk=-CURRENCY Symbols}', "");
Expect(0, 8351, '\p{Is_Blk=-CURRENCY Symbols}', "");
Expect(1, 8351, '\p{^Is_Blk=-CURRENCY Symbols}', "");
Expect(1, 8351, '\P{Is_Blk=-CURRENCY Symbols}', "");
Expect(0, 8351, '\P{^Is_Blk=-CURRENCY Symbols}', "");
Error('\p{Block:   :=-_Spacing	modifierLetters}');
Error('\P{Block:   :=-_Spacing	modifierLetters}');
Expect(1, 767, '\p{Block:   spacingmodifierletters}', "");
Expect(0, 767, '\p{^Block:   spacingmodifierletters}', "");
Expect(0, 767, '\P{Block:   spacingmodifierletters}', "");
Expect(1, 767, '\P{^Block:   spacingmodifierletters}', "");
Expect(0, 687, '\p{Block:   spacingmodifierletters}', "");
Expect(1, 687, '\p{^Block:   spacingmodifierletters}', "");
Expect(1, 687, '\P{Block:   spacingmodifierletters}', "");
Expect(0, 687, '\P{^Block:   spacingmodifierletters}', "");
Expect(1, 767, '\p{Block=	_Spacing Modifier_Letters}', "");
Expect(0, 767, '\p{^Block=	_Spacing Modifier_Letters}', "");
Expect(0, 767, '\P{Block=	_Spacing Modifier_Letters}', "");
Expect(1, 767, '\P{^Block=	_Spacing Modifier_Letters}', "");
Expect(0, 687, '\p{Block=	_Spacing Modifier_Letters}', "");
Expect(1, 687, '\p{^Block=	_Spacing Modifier_Letters}', "");
Expect(1, 687, '\P{Block=	_Spacing Modifier_Letters}', "");
Expect(0, 687, '\P{^Block=	_Spacing Modifier_Letters}', "");
Error('\p{Blk=	Spacing-Modifier/a/Letters}');
Error('\P{Blk=	Spacing-Modifier/a/Letters}');
Expect(1, 767, '\p{Blk=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Blk=spacingmodifierletters}', "");
Expect(0, 767, '\P{Blk=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Blk=spacingmodifierletters}', "");
Expect(0, 687, '\p{Blk=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Blk=spacingmodifierletters}', "");
Expect(1, 687, '\P{Blk=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Blk=spacingmodifierletters}', "");
Expect(1, 767, '\p{Blk=	-SpacingMODIFIER-letters}', "");
Expect(0, 767, '\p{^Blk=	-SpacingMODIFIER-letters}', "");
Expect(0, 767, '\P{Blk=	-SpacingMODIFIER-letters}', "");
Expect(1, 767, '\P{^Blk=	-SpacingMODIFIER-letters}', "");
Expect(0, 687, '\p{Blk=	-SpacingMODIFIER-letters}', "");
Expect(1, 687, '\p{^Blk=	-SpacingMODIFIER-letters}', "");
Expect(1, 687, '\P{Blk=	-SpacingMODIFIER-letters}', "");
Expect(0, 687, '\P{^Blk=	-SpacingMODIFIER-letters}', "");
Error('\p{Is_Block=:=_ Spacing-Modifier	LETTERS}');
Error('\P{Is_Block=:=_ Spacing-Modifier	LETTERS}');
Expect(1, 767, '\p{Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(0, 767, '\p{^Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(0, 767, '\P{Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(1, 767, '\P{^Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(0, 687, '\p{Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(1, 687, '\p{^Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(1, 687, '\P{Is_Block=-	SPACING_MODIFIER	Letters}', "");
Expect(0, 687, '\P{^Is_Block=-	SPACING_MODIFIER	Letters}', "");
Error('\p{Is_Blk=		SPACING-Modifier	Letters:=}');
Error('\P{Is_Blk=		SPACING-Modifier	Letters:=}');
Expect(1, 767, '\p{Is_Blk=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Blk=spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Blk=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Blk=spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Blk=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Blk=spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Blk=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Blk=spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(0, 767, '\p{^Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(0, 767, '\P{Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(1, 767, '\P{^Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(0, 687, '\p{Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(1, 687, '\p{^Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(1, 687, '\P{Is_Blk= -SPACING Modifier LETTERS}', "");
Expect(0, 687, '\P{^Is_Blk= -SPACING Modifier LETTERS}', "");
Error('\p{Block= :=BOX DRAWING}');
Error('\P{Block= :=BOX DRAWING}');
Expect(1, 9599, '\p{Block=boxdrawing}', "");
Expect(0, 9599, '\p{^Block=boxdrawing}', "");
Expect(0, 9599, '\P{Block=boxdrawing}', "");
Expect(1, 9599, '\P{^Block=boxdrawing}', "");
Expect(0, 9471, '\p{Block=boxdrawing}', "");
Expect(1, 9471, '\p{^Block=boxdrawing}', "");
Expect(1, 9471, '\P{Block=boxdrawing}', "");
Expect(0, 9471, '\P{^Block=boxdrawing}', "");
Expect(1, 9599, '\p{Block=		Box DRAWING}', "");
Expect(0, 9599, '\p{^Block=		Box DRAWING}', "");
Expect(0, 9599, '\P{Block=		Box DRAWING}', "");
Expect(1, 9599, '\P{^Block=		Box DRAWING}', "");
Expect(0, 9471, '\p{Block=		Box DRAWING}', "");
Expect(1, 9471, '\p{^Block=		Box DRAWING}', "");
Expect(1, 9471, '\P{Block=		Box DRAWING}', "");
Expect(0, 9471, '\P{^Block=		Box DRAWING}', "");
Error('\p{Blk=- box_drawing/a/}');
Error('\P{Blk=- box_drawing/a/}');
Expect(1, 9599, '\p{Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Blk=	 box_Drawing}', "");
Expect(0, 9599, '\p{^Blk=	 box_Drawing}', "");
Expect(0, 9599, '\P{Blk=	 box_Drawing}', "");
Expect(1, 9599, '\P{^Blk=	 box_Drawing}', "");
Expect(0, 9471, '\p{Blk=	 box_Drawing}', "");
Expect(1, 9471, '\p{^Blk=	 box_Drawing}', "");
Expect(1, 9471, '\P{Blk=	 box_Drawing}', "");
Expect(0, 9471, '\P{^Blk=	 box_Drawing}', "");
Error('\p{Is_Block=:=	-Box_Drawing}');
Error('\P{Is_Block=:=	-Box_Drawing}');
Expect(1, 9599, '\p{Is_Block=boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Block=boxdrawing}', "");
Expect(0, 9599, '\P{Is_Block=boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Block=boxdrawing}', "");
Expect(0, 9471, '\p{Is_Block=boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Block=boxdrawing}', "");
Expect(1, 9471, '\P{Is_Block=boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Block=boxdrawing}', "");
Expect(1, 9599, '\p{Is_Block=-Box_drawing}', "");
Expect(0, 9599, '\p{^Is_Block=-Box_drawing}', "");
Expect(0, 9599, '\P{Is_Block=-Box_drawing}', "");
Expect(1, 9599, '\P{^Is_Block=-Box_drawing}', "");
Expect(0, 9471, '\p{Is_Block=-Box_drawing}', "");
Expect(1, 9471, '\p{^Is_Block=-Box_drawing}', "");
Expect(1, 9471, '\P{Is_Block=-Box_drawing}', "");
Expect(0, 9471, '\P{^Is_Block=-Box_drawing}', "");
Error('\p{Is_Blk=	/a/BoxDrawing}');
Error('\P{Is_Blk=	/a/BoxDrawing}');
Expect(1, 9599, '\p{Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Is_Blk= Box	Drawing}', "");
Expect(0, 9599, '\p{^Is_Blk= Box	Drawing}', "");
Expect(0, 9599, '\P{Is_Blk= Box	Drawing}', "");
Expect(1, 9599, '\P{^Is_Blk= Box	Drawing}', "");
Expect(0, 9471, '\p{Is_Blk= Box	Drawing}', "");
Expect(1, 9471, '\p{^Is_Blk= Box	Drawing}', "");
Expect(1, 9471, '\P{Is_Blk= Box	Drawing}', "");
Expect(0, 9471, '\P{^Is_Blk= Box	Drawing}', "");
Error('\p{Block= /a/SUPERSCRIPTS	AndSubscripts}');
Error('\P{Block= /a/SUPERSCRIPTS	AndSubscripts}');
Expect(1, 8351, '\p{Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Block=_-superscripts	AND-Subscripts}', "");
Expect(0, 8351, '\p{^Block=_-superscripts	AND-Subscripts}', "");
Expect(0, 8351, '\P{Block=_-superscripts	AND-Subscripts}', "");
Expect(1, 8351, '\P{^Block=_-superscripts	AND-Subscripts}', "");
Expect(0, 8303, '\p{Block=_-superscripts	AND-Subscripts}', "");
Expect(1, 8303, '\p{^Block=_-superscripts	AND-Subscripts}', "");
Expect(1, 8303, '\P{Block=_-superscripts	AND-Subscripts}', "");
Expect(0, 8303, '\P{^Block=_-superscripts	AND-Subscripts}', "");
Error('\p{Blk= 	Superscripts_and-Subscripts/a/}');
Error('\P{Blk= 	Superscripts_and-Subscripts/a/}');
Expect(1, 8351, '\p{Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Blk=_ Superscripts	And Subscripts}', "");
Expect(0, 8351, '\p{^Blk=_ Superscripts	And Subscripts}', "");
Expect(0, 8351, '\P{Blk=_ Superscripts	And Subscripts}', "");
Expect(1, 8351, '\P{^Blk=_ Superscripts	And Subscripts}', "");
Expect(0, 8303, '\p{Blk=_ Superscripts	And Subscripts}', "");
Expect(1, 8303, '\p{^Blk=_ Superscripts	And Subscripts}', "");
Expect(1, 8303, '\P{Blk=_ Superscripts	And Subscripts}', "");
Expect(0, 8303, '\P{^Blk=_ Superscripts	And Subscripts}', "");
Error('\p{Is_Block=/a/ _superscripts_AND_subscripts}');
Error('\P{Is_Block=/a/ _superscripts_AND_subscripts}');
Expect(1, 8351, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(0, 8351, '\p{^Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(0, 8351, '\P{Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(1, 8351, '\P{^Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(0, 8303, '\p{Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(1, 8303, '\p{^Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(1, 8303, '\P{Is_Block:   _-Superscripts	and	subscripts}', "");
Expect(0, 8303, '\P{^Is_Block:   _-Superscripts	and	subscripts}', "");
Error('\p{Is_Blk=/a/- SUPERSCRIPTS_ANDSubscripts}');
Error('\P{Is_Blk=/a/- SUPERSCRIPTS_ANDSubscripts}');
Expect(1, 8351, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(0, 8351, '\p{^Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(0, 8351, '\P{Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(1, 8351, '\P{^Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(0, 8303, '\p{Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(1, 8303, '\p{^Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(1, 8303, '\P{Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Expect(0, 8303, '\P{^Is_Blk=	_SUPERSCRIPTS and subscripts}', "");
Error('\p{Block=_Ancient-Greek-numbers/a/}');
Error('\P{Block=_Ancient-Greek-numbers/a/}');
Expect(1, 65935, '\p{Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(0, 65935, '\p{^Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(0, 65935, '\P{Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(1, 65935, '\P{^Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(0, 65855, '\p{Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(1, 65855, '\p{^Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(1, 65855, '\P{Block=_-ANCIENT	Greek NUMBERS}', "");
Expect(0, 65855, '\P{^Block=_-ANCIENT	Greek NUMBERS}', "");
Error('\p{Blk=/a/	ANCIENT_Greek	NUMBERS}');
Error('\P{Blk=/a/	ANCIENT_Greek	NUMBERS}');
Expect(1, 65935, '\p{Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Blk=_ Ancient-GREEK	numbers}', "");
Expect(0, 65935, '\p{^Blk=_ Ancient-GREEK	numbers}', "");
Expect(0, 65935, '\P{Blk=_ Ancient-GREEK	numbers}', "");
Expect(1, 65935, '\P{^Blk=_ Ancient-GREEK	numbers}', "");
Expect(0, 65855, '\p{Blk=_ Ancient-GREEK	numbers}', "");
Expect(1, 65855, '\p{^Blk=_ Ancient-GREEK	numbers}', "");
Expect(1, 65855, '\P{Blk=_ Ancient-GREEK	numbers}', "");
Expect(0, 65855, '\P{^Blk=_ Ancient-GREEK	numbers}', "");
Error('\p{Is_Block=/a/_ancient GREEK numbers}');
Error('\P{Is_Block=/a/_ancient GREEK numbers}');
Expect(1, 65935, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Block=  Ancient-greek Numbers}', "");
Expect(0, 65935, '\p{^Is_Block=  Ancient-greek Numbers}', "");
Expect(0, 65935, '\P{Is_Block=  Ancient-greek Numbers}', "");
Expect(1, 65935, '\P{^Is_Block=  Ancient-greek Numbers}', "");
Expect(0, 65855, '\p{Is_Block=  Ancient-greek Numbers}', "");
Expect(1, 65855, '\p{^Is_Block=  Ancient-greek Numbers}', "");
Expect(1, 65855, '\P{Is_Block=  Ancient-greek Numbers}', "");
Expect(0, 65855, '\P{^Is_Block=  Ancient-greek Numbers}', "");
Error('\p{Is_Blk=	-Ancient greek_Numbers:=}');
Error('\P{Is_Blk=	-Ancient greek_Numbers:=}');
Expect(1, 65935, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(0, 65935, '\p{^Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(0, 65935, '\P{Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(1, 65935, '\P{^Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(0, 65855, '\p{Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(1, 65855, '\p{^Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(1, 65855, '\P{Is_Blk= ANCIENT_GREEK	numbers}', "");
Expect(0, 65855, '\P{^Is_Blk= ANCIENT_GREEK	numbers}', "");
Error('\p{Block=-NKo/a/}');
Error('\P{Block=-NKo/a/}');
Expect(1, 2047, '\p{Block=nko}', "");
Expect(0, 2047, '\p{^Block=nko}', "");
Expect(0, 2047, '\P{Block=nko}', "");
Expect(1, 2047, '\P{^Block=nko}', "");
Expect(0, 1983, '\p{Block=nko}', "");
Expect(1, 1983, '\p{^Block=nko}', "");
Expect(1, 1983, '\P{Block=nko}', "");
Expect(0, 1983, '\P{^Block=nko}', "");
Expect(1, 2047, '\p{Block=	NKo}', "");
Expect(0, 2047, '\p{^Block=	NKo}', "");
Expect(0, 2047, '\P{Block=	NKo}', "");
Expect(1, 2047, '\P{^Block=	NKo}', "");
Expect(0, 1983, '\p{Block=	NKo}', "");
Expect(1, 1983, '\p{^Block=	NKo}', "");
Expect(1, 1983, '\P{Block=	NKo}', "");
Expect(0, 1983, '\P{^Block=	NKo}', "");
Error('\p{Blk:/a/--NKo}');
Error('\P{Blk:/a/--NKo}');
Expect(1, 2047, '\p{Blk=nko}', "");
Expect(0, 2047, '\p{^Blk=nko}', "");
Expect(0, 2047, '\P{Blk=nko}', "");
Expect(1, 2047, '\P{^Blk=nko}', "");
Expect(0, 1983, '\p{Blk=nko}', "");
Expect(1, 1983, '\p{^Blk=nko}', "");
Expect(1, 1983, '\P{Blk=nko}', "");
Expect(0, 1983, '\P{^Blk=nko}', "");
Expect(1, 2047, '\p{Blk:	- NKO}', "");
Expect(0, 2047, '\p{^Blk:	- NKO}', "");
Expect(0, 2047, '\P{Blk:	- NKO}', "");
Expect(1, 2047, '\P{^Blk:	- NKO}', "");
Expect(0, 1983, '\p{Blk:	- NKO}', "");
Expect(1, 1983, '\p{^Blk:	- NKO}', "");
Expect(1, 1983, '\P{Blk:	- NKO}', "");
Expect(0, 1983, '\P{^Blk:	- NKO}', "");
Error('\p{Is_Block=-/a/NKO}');
Error('\P{Is_Block=-/a/NKO}');
Expect(1, 2047, '\p{Is_Block=nko}', "");
Expect(0, 2047, '\p{^Is_Block=nko}', "");
Expect(0, 2047, '\P{Is_Block=nko}', "");
Expect(1, 2047, '\P{^Is_Block=nko}', "");
Expect(0, 1983, '\p{Is_Block=nko}', "");
Expect(1, 1983, '\p{^Is_Block=nko}', "");
Expect(1, 1983, '\P{Is_Block=nko}', "");
Expect(0, 1983, '\P{^Is_Block=nko}', "");
Expect(1, 2047, '\p{Is_Block= NKo}', "");
Expect(0, 2047, '\p{^Is_Block= NKo}', "");
Expect(0, 2047, '\P{Is_Block= NKo}', "");
Expect(1, 2047, '\P{^Is_Block= NKo}', "");
Expect(0, 1983, '\p{Is_Block= NKo}', "");
Expect(1, 1983, '\p{^Is_Block= NKo}', "");
Expect(1, 1983, '\P{Is_Block= NKo}', "");
Expect(0, 1983, '\P{^Is_Block= NKo}', "");
Error('\p{Is_Blk=-/a/NKo}');
Error('\P{Is_Blk=-/a/NKo}');
Expect(1, 2047, '\p{Is_Blk=nko}', "");
Expect(0, 2047, '\p{^Is_Blk=nko}', "");
Expect(0, 2047, '\P{Is_Blk=nko}', "");
Expect(1, 2047, '\P{^Is_Blk=nko}', "");
Expect(0, 1983, '\p{Is_Blk=nko}', "");
Expect(1, 1983, '\p{^Is_Blk=nko}', "");
Expect(1, 1983, '\P{Is_Blk=nko}', "");
Expect(0, 1983, '\P{^Is_Blk=nko}', "");
Expect(1, 2047, '\p{Is_Blk=__NKo}', "");
Expect(0, 2047, '\p{^Is_Blk=__NKo}', "");
Expect(0, 2047, '\P{Is_Blk=__NKo}', "");
Expect(1, 2047, '\P{^Is_Blk=__NKo}', "");
Expect(0, 1983, '\p{Is_Blk=__NKo}', "");
Expect(1, 1983, '\p{^Is_Blk=__NKo}', "");
Expect(1, 1983, '\P{Is_Blk=__NKo}', "");
Expect(0, 1983, '\P{^Is_Blk=__NKo}', "");
Error('\p{Block= 	MUSICAL:=Symbols}');
Error('\P{Block= 	MUSICAL:=Symbols}');
Expect(1, 119295, '\p{Block=musicalsymbols}', "");
Expect(0, 119295, '\p{^Block=musicalsymbols}', "");
Expect(0, 119295, '\P{Block=musicalsymbols}', "");
Expect(1, 119295, '\P{^Block=musicalsymbols}', "");
Expect(0, 119039, '\p{Block=musicalsymbols}', "");
Expect(1, 119039, '\p{^Block=musicalsymbols}', "");
Expect(1, 119039, '\P{Block=musicalsymbols}', "");
Expect(0, 119039, '\P{^Block=musicalsymbols}', "");
Expect(1, 119295, '\p{Block= _Musical-Symbols}', "");
Expect(0, 119295, '\p{^Block= _Musical-Symbols}', "");
Expect(0, 119295, '\P{Block= _Musical-Symbols}', "");
Expect(1, 119295, '\P{^Block= _Musical-Symbols}', "");
Expect(0, 119039, '\p{Block= _Musical-Symbols}', "");
Expect(1, 119039, '\p{^Block= _Musical-Symbols}', "");
Expect(1, 119039, '\P{Block= _Musical-Symbols}', "");
Expect(0, 119039, '\P{^Block= _Musical-Symbols}', "");
Error('\p{Blk=:=_MUSICAL_symbols}');
Error('\P{Blk=:=_MUSICAL_symbols}');
Expect(1, 119295, '\p{Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Blk=	-musical-Symbols}', "");
Expect(0, 119295, '\p{^Blk=	-musical-Symbols}', "");
Expect(0, 119295, '\P{Blk=	-musical-Symbols}', "");
Expect(1, 119295, '\P{^Blk=	-musical-Symbols}', "");
Expect(0, 119039, '\p{Blk=	-musical-Symbols}', "");
Expect(1, 119039, '\p{^Blk=	-musical-Symbols}', "");
Expect(1, 119039, '\P{Blk=	-musical-Symbols}', "");
Expect(0, 119039, '\P{^Blk=	-musical-Symbols}', "");
Error('\p{Is_Block=/a/ 	musical	symbols}');
Error('\P{Is_Block=/a/ 	musical	symbols}');
Expect(1, 119295, '\p{Is_Block=musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Block=musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Block=musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Block=musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Block=musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Block=musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Block=musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Block=musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Block=__Musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Block=__Musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Block=__Musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Block=__Musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Block=__Musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Block=__Musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Block=__Musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Block=__Musicalsymbols}', "");
Error('\p{Is_Blk=Musical/a/Symbols}');
Error('\P{Is_Blk=Musical/a/Symbols}');
Expect(1, 119295, '\p{Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Blk=-_Musical Symbols}', "");
Expect(0, 119295, '\p{^Is_Blk=-_Musical Symbols}', "");
Expect(0, 119295, '\P{Is_Blk=-_Musical Symbols}', "");
Expect(1, 119295, '\P{^Is_Blk=-_Musical Symbols}', "");
Expect(0, 119039, '\p{Is_Blk=-_Musical Symbols}', "");
Expect(1, 119039, '\p{^Is_Blk=-_Musical Symbols}', "");
Expect(1, 119039, '\P{Is_Blk=-_Musical Symbols}', "");
Expect(0, 119039, '\P{^Is_Blk=-_Musical Symbols}', "");
Error('\p{Block=/a/Miscellaneous	Symbols}');
Error('\P{Block=/a/Miscellaneous	Symbols}');
Expect(1, 9983, '\p{Block:	miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Block:	miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Block:	miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Block:	miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Block:	miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Block:	miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Block:	miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Block:	miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Block:		Miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Block:		Miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Block:		Miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Block:		Miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Block:		Miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Block:		Miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Block:		Miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Block:		Miscellaneoussymbols}', "");
Error('\p{Blk:   	-MiscellaneousSymbols:=}');
Error('\P{Blk:   	-MiscellaneousSymbols:=}');
Expect(1, 9983, '\p{Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Blk=_-MISCELLANEOUS Symbols}', "");
Expect(0, 9983, '\p{^Blk=_-MISCELLANEOUS Symbols}', "");
Expect(0, 9983, '\P{Blk=_-MISCELLANEOUS Symbols}', "");
Expect(1, 9983, '\P{^Blk=_-MISCELLANEOUS Symbols}', "");
Expect(0, 9727, '\p{Blk=_-MISCELLANEOUS Symbols}', "");
Expect(1, 9727, '\p{^Blk=_-MISCELLANEOUS Symbols}', "");
Expect(1, 9727, '\P{Blk=_-MISCELLANEOUS Symbols}', "");
Expect(0, 9727, '\P{^Blk=_-MISCELLANEOUS Symbols}', "");
Error('\p{Is_Block=-/a/miscellaneous	Symbols}');
Error('\P{Is_Block=-/a/miscellaneous	Symbols}');
Expect(1, 9983, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(0, 9983, '\p{^Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(0, 9983, '\P{Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(1, 9983, '\P{^Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(0, 9727, '\p{Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(1, 9727, '\p{^Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(1, 9727, '\P{Is_Block=	MISCELLANEOUS-Symbols}', "");
Expect(0, 9727, '\P{^Is_Block=	MISCELLANEOUS-Symbols}', "");
Error('\p{Is_Blk:	MISCELLANEOUS:=Symbols}');
Error('\P{Is_Blk:	MISCELLANEOUS:=Symbols}');
Expect(1, 9983, '\p{Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(0, 9983, '\p{^Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(0, 9983, '\P{Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(1, 9983, '\P{^Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(0, 9727, '\p{Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(1, 9727, '\p{^Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(1, 9727, '\P{Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Expect(0, 9727, '\P{^Is_Blk:    -MISCELLANEOUS	SYMBOLS}', "");
Error('\p{Block:   :=  RUNIC}');
Error('\P{Block:   :=  RUNIC}');
Expect(1, 5887, '\p{Block=runic}', "");
Expect(0, 5887, '\p{^Block=runic}', "");
Expect(0, 5887, '\P{Block=runic}', "");
Expect(1, 5887, '\P{^Block=runic}', "");
Expect(0, 5791, '\p{Block=runic}', "");
Expect(1, 5791, '\p{^Block=runic}', "");
Expect(1, 5791, '\P{Block=runic}', "");
Expect(0, 5791, '\P{^Block=runic}', "");
Expect(1, 5887, '\p{Block=	-Runic}', "");
Expect(0, 5887, '\p{^Block=	-Runic}', "");
Expect(0, 5887, '\P{Block=	-Runic}', "");
Expect(1, 5887, '\P{^Block=	-Runic}', "");
Expect(0, 5791, '\p{Block=	-Runic}', "");
Expect(1, 5791, '\p{^Block=	-Runic}', "");
Expect(1, 5791, '\P{Block=	-Runic}', "");
Expect(0, 5791, '\P{^Block=	-Runic}', "");
Error('\p{Blk= 	Runic/a/}');
Error('\P{Blk= 	Runic/a/}');
Expect(1, 5887, '\p{Blk=runic}', "");
Expect(0, 5887, '\p{^Blk=runic}', "");
Expect(0, 5887, '\P{Blk=runic}', "");
Expect(1, 5887, '\P{^Blk=runic}', "");
Expect(0, 5791, '\p{Blk=runic}', "");
Expect(1, 5791, '\p{^Blk=runic}', "");
Expect(1, 5791, '\P{Blk=runic}', "");
Expect(0, 5791, '\P{^Blk=runic}', "");
Expect(1, 5887, '\p{Blk=--RUNIC}', "");
Expect(0, 5887, '\p{^Blk=--RUNIC}', "");
Expect(0, 5887, '\P{Blk=--RUNIC}', "");
Expect(1, 5887, '\P{^Blk=--RUNIC}', "");
Expect(0, 5791, '\p{Blk=--RUNIC}', "");
Expect(1, 5791, '\p{^Blk=--RUNIC}', "");
Expect(1, 5791, '\P{Blk=--RUNIC}', "");
Expect(0, 5791, '\P{^Blk=--RUNIC}', "");
Error('\p{Is_Block=:=		Runic}');
Error('\P{Is_Block=:=		Runic}');
Expect(1, 5887, '\p{Is_Block=runic}', "");
Expect(0, 5887, '\p{^Is_Block=runic}', "");
Expect(0, 5887, '\P{Is_Block=runic}', "");
Expect(1, 5887, '\P{^Is_Block=runic}', "");
Expect(0, 5791, '\p{Is_Block=runic}', "");
Expect(1, 5791, '\p{^Is_Block=runic}', "");
Expect(1, 5791, '\P{Is_Block=runic}', "");
Expect(0, 5791, '\P{^Is_Block=runic}', "");
Expect(1, 5887, '\p{Is_Block=_ Runic}', "");
Expect(0, 5887, '\p{^Is_Block=_ Runic}', "");
Expect(0, 5887, '\P{Is_Block=_ Runic}', "");
Expect(1, 5887, '\P{^Is_Block=_ Runic}', "");
Expect(0, 5791, '\p{Is_Block=_ Runic}', "");
Expect(1, 5791, '\p{^Is_Block=_ Runic}', "");
Expect(1, 5791, '\P{Is_Block=_ Runic}', "");
Expect(0, 5791, '\P{^Is_Block=_ Runic}', "");
Error('\p{Is_Blk=-/a/runic}');
Error('\P{Is_Blk=-/a/runic}');
Expect(1, 5887, '\p{Is_Blk=runic}', "");
Expect(0, 5887, '\p{^Is_Blk=runic}', "");
Expect(0, 5887, '\P{Is_Blk=runic}', "");
Expect(1, 5887, '\P{^Is_Blk=runic}', "");
Expect(0, 5791, '\p{Is_Blk=runic}', "");
Expect(1, 5791, '\p{^Is_Blk=runic}', "");
Expect(1, 5791, '\P{Is_Blk=runic}', "");
Expect(0, 5791, '\P{^Is_Blk=runic}', "");
Expect(1, 5887, '\p{Is_Blk=	 Runic}', "");
Expect(0, 5887, '\p{^Is_Blk=	 Runic}', "");
Expect(0, 5887, '\P{Is_Blk=	 Runic}', "");
Expect(1, 5887, '\P{^Is_Blk=	 Runic}', "");
Expect(0, 5791, '\p{Is_Blk=	 Runic}', "");
Expect(1, 5791, '\p{^Is_Blk=	 Runic}', "");
Expect(1, 5791, '\P{Is_Blk=	 Runic}', "");
Expect(0, 5791, '\P{^Is_Blk=	 Runic}', "");
Error('\p{Block=:=	_lycian}');
Error('\P{Block=:=	_lycian}');
Expect(1, 66207, '\p{Block=lycian}', "");
Expect(0, 66207, '\p{^Block=lycian}', "");
Expect(0, 66207, '\P{Block=lycian}', "");
Expect(1, 66207, '\P{^Block=lycian}', "");
Expect(0, 66175, '\p{Block=lycian}', "");
Expect(1, 66175, '\p{^Block=lycian}', "");
Expect(1, 66175, '\P{Block=lycian}', "");
Expect(0, 66175, '\P{^Block=lycian}', "");
Expect(1, 66207, '\p{Block= _lycian}', "");
Expect(0, 66207, '\p{^Block= _lycian}', "");
Expect(0, 66207, '\P{Block= _lycian}', "");
Expect(1, 66207, '\P{^Block= _lycian}', "");
Expect(0, 66175, '\p{Block= _lycian}', "");
Expect(1, 66175, '\p{^Block= _lycian}', "");
Expect(1, 66175, '\P{Block= _lycian}', "");
Expect(0, 66175, '\P{^Block= _lycian}', "");
Error('\p{Blk:	_	lycian:=}');
Error('\P{Blk:	_	lycian:=}');
Expect(1, 66207, '\p{Blk=lycian}', "");
Expect(0, 66207, '\p{^Blk=lycian}', "");
Expect(0, 66207, '\P{Blk=lycian}', "");
Expect(1, 66207, '\P{^Blk=lycian}', "");
Expect(0, 66175, '\p{Blk=lycian}', "");
Expect(1, 66175, '\p{^Blk=lycian}', "");
Expect(1, 66175, '\P{Blk=lycian}', "");
Expect(0, 66175, '\P{^Blk=lycian}', "");
Expect(1, 66207, '\p{Blk=_	Lycian}', "");
Expect(0, 66207, '\p{^Blk=_	Lycian}', "");
Expect(0, 66207, '\P{Blk=_	Lycian}', "");
Expect(1, 66207, '\P{^Blk=_	Lycian}', "");
Expect(0, 66175, '\p{Blk=_	Lycian}', "");
Expect(1, 66175, '\p{^Blk=_	Lycian}', "");
Expect(1, 66175, '\P{Blk=_	Lycian}', "");
Expect(0, 66175, '\P{^Blk=_	Lycian}', "");
Error('\p{Is_Block=Lycian/a/}');
Error('\P{Is_Block=Lycian/a/}');
Expect(1, 66207, '\p{Is_Block:lycian}', "");
Expect(0, 66207, '\p{^Is_Block:lycian}', "");
Expect(0, 66207, '\P{Is_Block:lycian}', "");
Expect(1, 66207, '\P{^Is_Block:lycian}', "");
Expect(0, 66175, '\p{Is_Block:lycian}', "");
Expect(1, 66175, '\p{^Is_Block:lycian}', "");
Expect(1, 66175, '\P{Is_Block:lycian}', "");
Expect(0, 66175, '\P{^Is_Block:lycian}', "");
Expect(1, 66207, '\p{Is_Block=Lycian}', "");
Expect(0, 66207, '\p{^Is_Block=Lycian}', "");
Expect(0, 66207, '\P{Is_Block=Lycian}', "");
Expect(1, 66207, '\P{^Is_Block=Lycian}', "");
Expect(0, 66175, '\p{Is_Block=Lycian}', "");
Expect(1, 66175, '\p{^Is_Block=Lycian}', "");
Expect(1, 66175, '\P{Is_Block=Lycian}', "");
Expect(0, 66175, '\P{^Is_Block=Lycian}', "");
Error('\p{Is_Blk=:=Lycian}');
Error('\P{Is_Blk=:=Lycian}');
Expect(1, 66207, '\p{Is_Blk=lycian}', "");
Expect(0, 66207, '\p{^Is_Blk=lycian}', "");
Expect(0, 66207, '\P{Is_Blk=lycian}', "");
Expect(1, 66207, '\P{^Is_Blk=lycian}', "");
Expect(0, 66175, '\p{Is_Blk=lycian}', "");
Expect(1, 66175, '\p{^Is_Blk=lycian}', "");
Expect(1, 66175, '\P{Is_Blk=lycian}', "");
Expect(0, 66175, '\P{^Is_Blk=lycian}', "");
Expect(1, 66207, '\p{Is_Blk=- Lycian}', "");
Expect(0, 66207, '\p{^Is_Blk=- Lycian}', "");
Expect(0, 66207, '\P{Is_Blk=- Lycian}', "");
Expect(1, 66207, '\P{^Is_Blk=- Lycian}', "");
Expect(0, 66175, '\p{Is_Blk=- Lycian}', "");
Expect(1, 66175, '\p{^Is_Blk=- Lycian}', "");
Expect(1, 66175, '\P{Is_Blk=- Lycian}', "");
Expect(0, 66175, '\P{^Is_Blk=- Lycian}', "");
Error('\p{Block:   :=Geometric_Shapes}');
Error('\P{Block:   :=Geometric_Shapes}');
Expect(1, 9727, '\p{Block=geometricshapes}', "");
Expect(0, 9727, '\p{^Block=geometricshapes}', "");
Expect(0, 9727, '\P{Block=geometricshapes}', "");
Expect(1, 9727, '\P{^Block=geometricshapes}', "");
Expect(0, 9631, '\p{Block=geometricshapes}', "");
Expect(1, 9631, '\p{^Block=geometricshapes}', "");
Expect(1, 9631, '\P{Block=geometricshapes}', "");
Expect(0, 9631, '\P{^Block=geometricshapes}', "");
Expect(1, 9727, '\p{Block=		geometric	shapes}', "");
Expect(0, 9727, '\p{^Block=		geometric	shapes}', "");
Expect(0, 9727, '\P{Block=		geometric	shapes}', "");
Expect(1, 9727, '\P{^Block=		geometric	shapes}', "");
Expect(0, 9631, '\p{Block=		geometric	shapes}', "");
Expect(1, 9631, '\p{^Block=		geometric	shapes}', "");
Expect(1, 9631, '\P{Block=		geometric	shapes}', "");
Expect(0, 9631, '\P{^Block=		geometric	shapes}', "");
Error('\p{Blk:__Geometric:=shapes}');
Error('\P{Blk:__Geometric:=shapes}');
Expect(1, 9727, '\p{Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Blk:-GEOMETRIC	Shapes}', "");
Expect(0, 9727, '\p{^Blk:-GEOMETRIC	Shapes}', "");
Expect(0, 9727, '\P{Blk:-GEOMETRIC	Shapes}', "");
Expect(1, 9727, '\P{^Blk:-GEOMETRIC	Shapes}', "");
Expect(0, 9631, '\p{Blk:-GEOMETRIC	Shapes}', "");
Expect(1, 9631, '\p{^Blk:-GEOMETRIC	Shapes}', "");
Expect(1, 9631, '\P{Blk:-GEOMETRIC	Shapes}', "");
Expect(0, 9631, '\P{^Blk:-GEOMETRIC	Shapes}', "");
Error('\p{Is_Block=:=Geometric-Shapes}');
Error('\P{Is_Block=:=Geometric-Shapes}');
Expect(1, 9727, '\p{Is_Block:	geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Block:	geometricshapes}', "");
Expect(0, 9727, '\P{Is_Block:	geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Block:	geometricshapes}', "");
Expect(0, 9631, '\p{Is_Block:	geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Block:	geometricshapes}', "");
Expect(1, 9631, '\P{Is_Block:	geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Block:	geometricshapes}', "");
Expect(1, 9727, '\p{Is_Block=	geometricSHAPES}', "");
Expect(0, 9727, '\p{^Is_Block=	geometricSHAPES}', "");
Expect(0, 9727, '\P{Is_Block=	geometricSHAPES}', "");
Expect(1, 9727, '\P{^Is_Block=	geometricSHAPES}', "");
Expect(0, 9631, '\p{Is_Block=	geometricSHAPES}', "");
Expect(1, 9631, '\p{^Is_Block=	geometricSHAPES}', "");
Expect(1, 9631, '\P{Is_Block=	geometricSHAPES}', "");
Expect(0, 9631, '\P{^Is_Block=	geometricSHAPES}', "");
Error('\p{Is_Blk=	-Geometric SHAPES/a/}');
Error('\P{Is_Blk=	-Geometric SHAPES/a/}');
Expect(1, 9727, '\p{Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Is_Blk:	 Geometric	shapes}', "");
Expect(0, 9727, '\p{^Is_Blk:	 Geometric	shapes}', "");
Expect(0, 9727, '\P{Is_Blk:	 Geometric	shapes}', "");
Expect(1, 9727, '\P{^Is_Blk:	 Geometric	shapes}', "");
Expect(0, 9631, '\p{Is_Blk:	 Geometric	shapes}', "");
Expect(1, 9631, '\p{^Is_Blk:	 Geometric	shapes}', "");
Expect(1, 9631, '\P{Is_Blk:	 Geometric	shapes}', "");
Expect(0, 9631, '\P{^Is_Blk:	 Geometric	shapes}', "");
Error('\p{Block=_/a/Aegean_Numbers}');
Error('\P{Block=_/a/Aegean_Numbers}');
Expect(1, 65855, '\p{Block:	aegeannumbers}', "");
Expect(0, 65855, '\p{^Block:	aegeannumbers}', "");
Expect(0, 65855, '\P{Block:	aegeannumbers}', "");
Expect(1, 65855, '\P{^Block:	aegeannumbers}', "");
Expect(0, 65791, '\p{Block:	aegeannumbers}', "");
Expect(1, 65791, '\p{^Block:	aegeannumbers}', "");
Expect(1, 65791, '\P{Block:	aegeannumbers}', "");
Expect(0, 65791, '\P{^Block:	aegeannumbers}', "");
Expect(1, 65855, '\p{Block:_Aegean-NUMBERS}', "");
Expect(0, 65855, '\p{^Block:_Aegean-NUMBERS}', "");
Expect(0, 65855, '\P{Block:_Aegean-NUMBERS}', "");
Expect(1, 65855, '\P{^Block:_Aegean-NUMBERS}', "");
Expect(0, 65791, '\p{Block:_Aegean-NUMBERS}', "");
Expect(1, 65791, '\p{^Block:_Aegean-NUMBERS}', "");
Expect(1, 65791, '\P{Block:_Aegean-NUMBERS}', "");
Expect(0, 65791, '\P{^Block:_Aegean-NUMBERS}', "");
Error('\p{Blk= Aegean_numbers/a/}');
Error('\P{Blk= Aegean_numbers/a/}');
Expect(1, 65855, '\p{Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Blk=__AEGEAN_numbers}', "");
Expect(0, 65855, '\p{^Blk=__AEGEAN_numbers}', "");
Expect(0, 65855, '\P{Blk=__AEGEAN_numbers}', "");
Expect(1, 65855, '\P{^Blk=__AEGEAN_numbers}', "");
Expect(0, 65791, '\p{Blk=__AEGEAN_numbers}', "");
Expect(1, 65791, '\p{^Blk=__AEGEAN_numbers}', "");
Expect(1, 65791, '\P{Blk=__AEGEAN_numbers}', "");
Expect(0, 65791, '\P{^Blk=__AEGEAN_numbers}', "");
Error('\p{Is_Block=_ Aegean numbers/a/}');
Error('\P{Is_Block=_ Aegean numbers/a/}');
Expect(1, 65855, '\p{Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Block= 	Aegean-numbers}', "");
Expect(0, 65855, '\p{^Is_Block= 	Aegean-numbers}', "");
Expect(0, 65855, '\P{Is_Block= 	Aegean-numbers}', "");
Expect(1, 65855, '\P{^Is_Block= 	Aegean-numbers}', "");
Expect(0, 65791, '\p{Is_Block= 	Aegean-numbers}', "");
Expect(1, 65791, '\p{^Is_Block= 	Aegean-numbers}', "");
Expect(1, 65791, '\P{Is_Block= 	Aegean-numbers}', "");
Expect(0, 65791, '\P{^Is_Block= 	Aegean-numbers}', "");
Error('\p{Is_Blk= :=Aegean Numbers}');
Error('\P{Is_Blk= :=Aegean Numbers}');
Expect(1, 65855, '\p{Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Blk=aegean_numbers}', "");
Expect(0, 65855, '\p{^Is_Blk=aegean_numbers}', "");
Expect(0, 65855, '\P{Is_Blk=aegean_numbers}', "");
Expect(1, 65855, '\P{^Is_Blk=aegean_numbers}', "");
Expect(0, 65791, '\p{Is_Blk=aegean_numbers}', "");
Expect(1, 65791, '\p{^Is_Blk=aegean_numbers}', "");
Expect(1, 65791, '\P{Is_Blk=aegean_numbers}', "");
Expect(0, 65791, '\P{^Is_Blk=aegean_numbers}', "");
Error('\p{Block:   /a/ _khmer symbols}');
Error('\P{Block:   /a/ _khmer symbols}');
Expect(1, 6655, '\p{Block: khmersymbols}', "");
Expect(0, 6655, '\p{^Block: khmersymbols}', "");
Expect(0, 6655, '\P{Block: khmersymbols}', "");
Expect(1, 6655, '\P{^Block: khmersymbols}', "");
Expect(0, 6623, '\p{Block: khmersymbols}', "");
Expect(1, 6623, '\p{^Block: khmersymbols}', "");
Expect(1, 6623, '\P{Block: khmersymbols}', "");
Expect(0, 6623, '\P{^Block: khmersymbols}', "");
Expect(1, 6655, '\p{Block= _KHMER Symbols}', "");
Expect(0, 6655, '\p{^Block= _KHMER Symbols}', "");
Expect(0, 6655, '\P{Block= _KHMER Symbols}', "");
Expect(1, 6655, '\P{^Block= _KHMER Symbols}', "");
Expect(0, 6623, '\p{Block= _KHMER Symbols}', "");
Expect(1, 6623, '\p{^Block= _KHMER Symbols}', "");
Expect(1, 6623, '\P{Block= _KHMER Symbols}', "");
Expect(0, 6623, '\P{^Block= _KHMER Symbols}', "");
Error('\p{Blk= _Khmer	Symbols:=}');
Error('\P{Blk= _Khmer	Symbols:=}');
Expect(1, 6655, '\p{Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Blk: 	Khmer-Symbols}', "");
Expect(0, 6655, '\p{^Blk: 	Khmer-Symbols}', "");
Expect(0, 6655, '\P{Blk: 	Khmer-Symbols}', "");
Expect(1, 6655, '\P{^Blk: 	Khmer-Symbols}', "");
Expect(0, 6623, '\p{Blk: 	Khmer-Symbols}', "");
Expect(1, 6623, '\p{^Blk: 	Khmer-Symbols}', "");
Expect(1, 6623, '\P{Blk: 	Khmer-Symbols}', "");
Expect(0, 6623, '\P{^Blk: 	Khmer-Symbols}', "");
Error('\p{Is_Block=-/a/Khmer	Symbols}');
Error('\P{Is_Block=-/a/Khmer	Symbols}');
Expect(1, 6655, '\p{Is_Block=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Block=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Block=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Block=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Block=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Block=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Block=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Block=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Block=	Khmer_symbols}', "");
Expect(0, 6655, '\p{^Is_Block=	Khmer_symbols}', "");
Expect(0, 6655, '\P{Is_Block=	Khmer_symbols}', "");
Expect(1, 6655, '\P{^Is_Block=	Khmer_symbols}', "");
Expect(0, 6623, '\p{Is_Block=	Khmer_symbols}', "");
Expect(1, 6623, '\p{^Is_Block=	Khmer_symbols}', "");
Expect(1, 6623, '\P{Is_Block=	Khmer_symbols}', "");
Expect(0, 6623, '\P{^Is_Block=	Khmer_symbols}', "");
Error('\p{Is_Blk=:=khmer_symbols}');
Error('\P{Is_Blk=:=khmer_symbols}');
Expect(1, 6655, '\p{Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(0, 6655, '\p{^Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(0, 6655, '\P{Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(1, 6655, '\P{^Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(0, 6623, '\p{Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(1, 6623, '\p{^Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(1, 6623, '\P{Is_Blk:	_	KHMER	SYMBOLS}', "");
Expect(0, 6623, '\P{^Is_Blk:	_	KHMER	SYMBOLS}', "");
Error('\p{Block=:=CJK-Radicals	SUPPLEMENT}');
Error('\P{Block=:=CJK-Radicals	SUPPLEMENT}');
Expect(1, 12031, '\p{Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Block=-CJK	Radicalssupplement}', "");
Expect(0, 12031, '\p{^Block=-CJK	Radicalssupplement}', "");
Expect(0, 12031, '\P{Block=-CJK	Radicalssupplement}', "");
Expect(1, 12031, '\P{^Block=-CJK	Radicalssupplement}', "");
Expect(0, 11903, '\p{Block=-CJK	Radicalssupplement}', "");
Expect(1, 11903, '\p{^Block=-CJK	Radicalssupplement}', "");
Expect(1, 11903, '\P{Block=-CJK	Radicalssupplement}', "");
Expect(0, 11903, '\P{^Block=-CJK	Radicalssupplement}', "");
Error('\p{Blk=-CJK:=radicals SUPPLEMENT}');
Error('\P{Blk=-CJK:=radicals SUPPLEMENT}');
Expect(1, 12031, '\p{Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\p{^Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\P{Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(1, 12031, '\P{^Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\p{Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\p{^Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\P{Blk=_ CJK_radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\P{^Blk=_ CJK_radicals-SUPPLEMENT}', "");
Error('\p{Is_Block=:=CJKradicals-SUPPLEMENT}');
Error('\P{Is_Block=:=CJKradicals-SUPPLEMENT}');
Expect(1, 12031, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Block=  cjk	radicals Supplement}', "");
Expect(0, 12031, '\p{^Is_Block=  cjk	radicals Supplement}', "");
Expect(0, 12031, '\P{Is_Block=  cjk	radicals Supplement}', "");
Expect(1, 12031, '\P{^Is_Block=  cjk	radicals Supplement}', "");
Expect(0, 11903, '\p{Is_Block=  cjk	radicals Supplement}', "");
Expect(1, 11903, '\p{^Is_Block=  cjk	radicals Supplement}', "");
Expect(1, 11903, '\P{Is_Block=  cjk	radicals Supplement}', "");
Expect(0, 11903, '\P{^Is_Block=  cjk	radicals Supplement}', "");
Error('\p{Is_Blk=:=CJK-radicals	SUPPLEMENT}');
Error('\P{Is_Blk=:=CJK-radicals	SUPPLEMENT}');
Expect(1, 12031, '\p{Is_Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Blk= _cjkRadicals-Supplement}', "");
Expect(0, 12031, '\p{^Is_Blk= _cjkRadicals-Supplement}', "");
Expect(0, 12031, '\P{Is_Blk= _cjkRadicals-Supplement}', "");
Expect(1, 12031, '\P{^Is_Blk= _cjkRadicals-Supplement}', "");
Expect(0, 11903, '\p{Is_Blk= _cjkRadicals-Supplement}', "");
Expect(1, 11903, '\p{^Is_Blk= _cjkRadicals-Supplement}', "");
Expect(1, 11903, '\P{Is_Blk= _cjkRadicals-Supplement}', "");
Expect(0, 11903, '\P{^Is_Blk= _cjkRadicals-Supplement}', "");
Error('\p{Block=/a/ImperialAramaic}');
Error('\P{Block=/a/ImperialAramaic}');
Expect(1, 67679, '\p{Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Block=	Imperial_Aramaic}', "");
Expect(0, 67679, '\p{^Block=	Imperial_Aramaic}', "");
Expect(0, 67679, '\P{Block=	Imperial_Aramaic}', "");
Expect(1, 67679, '\P{^Block=	Imperial_Aramaic}', "");
Expect(0, 67647, '\p{Block=	Imperial_Aramaic}', "");
Expect(1, 67647, '\p{^Block=	Imperial_Aramaic}', "");
Expect(1, 67647, '\P{Block=	Imperial_Aramaic}', "");
Expect(0, 67647, '\P{^Block=	Imperial_Aramaic}', "");
Error('\p{Blk: _ IMPERIAL aramaic/a/}');
Error('\P{Blk: _ IMPERIAL aramaic/a/}');
Expect(1, 67679, '\p{Blk=imperialaramaic}', "");
Expect(0, 67679, '\p{^Blk=imperialaramaic}', "");
Expect(0, 67679, '\P{Blk=imperialaramaic}', "");
Expect(1, 67679, '\P{^Blk=imperialaramaic}', "");
Expect(0, 67647, '\p{Blk=imperialaramaic}', "");
Expect(1, 67647, '\p{^Blk=imperialaramaic}', "");
Expect(1, 67647, '\P{Blk=imperialaramaic}', "");
Expect(0, 67647, '\P{^Blk=imperialaramaic}', "");
Expect(1, 67679, '\p{Blk=--imperial	Aramaic}', "");
Expect(0, 67679, '\p{^Blk=--imperial	Aramaic}', "");
Expect(0, 67679, '\P{Blk=--imperial	Aramaic}', "");
Expect(1, 67679, '\P{^Blk=--imperial	Aramaic}', "");
Expect(0, 67647, '\p{Blk=--imperial	Aramaic}', "");
Expect(1, 67647, '\p{^Blk=--imperial	Aramaic}', "");
Expect(1, 67647, '\P{Blk=--imperial	Aramaic}', "");
Expect(0, 67647, '\P{^Blk=--imperial	Aramaic}', "");
Error('\p{Is_Block:    /a/imperial aramaic}');
Error('\P{Is_Block:    /a/imperial aramaic}');
Expect(1, 67679, '\p{Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Block=-_Imperial_aramaic}', "");
Expect(0, 67679, '\p{^Is_Block=-_Imperial_aramaic}', "");
Expect(0, 67679, '\P{Is_Block=-_Imperial_aramaic}', "");
Expect(1, 67679, '\P{^Is_Block=-_Imperial_aramaic}', "");
Expect(0, 67647, '\p{Is_Block=-_Imperial_aramaic}', "");
Expect(1, 67647, '\p{^Is_Block=-_Imperial_aramaic}', "");
Expect(1, 67647, '\P{Is_Block=-_Imperial_aramaic}', "");
Expect(0, 67647, '\P{^Is_Block=-_Imperial_aramaic}', "");
Error('\p{Is_Blk= Imperial-aramaic/a/}');
Error('\P{Is_Blk= Imperial-aramaic/a/}');
Expect(1, 67679, '\p{Is_Blk:	imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Blk:	imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Blk:	imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Blk:	imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Blk:	imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Blk:	imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Blk:	imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Blk:	imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Blk=_	imperial ARAMAIC}', "");
Expect(0, 67679, '\p{^Is_Blk=_	imperial ARAMAIC}', "");
Expect(0, 67679, '\P{Is_Blk=_	imperial ARAMAIC}', "");
Expect(1, 67679, '\P{^Is_Blk=_	imperial ARAMAIC}', "");
Expect(0, 67647, '\p{Is_Blk=_	imperial ARAMAIC}', "");
Expect(1, 67647, '\p{^Is_Blk=_	imperial ARAMAIC}', "");
Expect(1, 67647, '\P{Is_Blk=_	imperial ARAMAIC}', "");
Expect(0, 67647, '\P{^Is_Blk=_	imperial ARAMAIC}', "");
Error('\p{Block=_	Mathematical	OPERATORS/a/}');
Error('\P{Block=_	Mathematical	OPERATORS/a/}');
Expect(1, 8959, '\p{Block=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Block=mathematicaloperators}', "");
Expect(0, 8959, '\P{Block=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Block=mathematicaloperators}', "");
Expect(0, 8703, '\p{Block=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Block=mathematicaloperators}', "");
Expect(1, 8703, '\P{Block=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Block=mathematicaloperators}', "");
Expect(1, 8959, '\p{Block=MATHEMATICAL-Operators}', "");
Expect(0, 8959, '\p{^Block=MATHEMATICAL-Operators}', "");
Expect(0, 8959, '\P{Block=MATHEMATICAL-Operators}', "");
Expect(1, 8959, '\P{^Block=MATHEMATICAL-Operators}', "");
Expect(0, 8703, '\p{Block=MATHEMATICAL-Operators}', "");
Expect(1, 8703, '\p{^Block=MATHEMATICAL-Operators}', "");
Expect(1, 8703, '\P{Block=MATHEMATICAL-Operators}', "");
Expect(0, 8703, '\P{^Block=MATHEMATICAL-Operators}', "");
Error('\p{Blk: 	/a/mathematicalOperators}');
Error('\P{Blk: 	/a/mathematicalOperators}');
Expect(1, 8959, '\p{Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(0, 8959, '\p{^Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(0, 8959, '\P{Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(1, 8959, '\P{^Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(0, 8703, '\p{Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(1, 8703, '\p{^Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(1, 8703, '\P{Blk:	MATHEMATICAL	OPERATORS}', "");
Expect(0, 8703, '\P{^Blk:	MATHEMATICAL	OPERATORS}', "");
Error('\p{Is_Block=:=_mathematical-operators}');
Error('\P{Is_Block=:=_mathematical-operators}');
Expect(1, 8959, '\p{Is_Block=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Block=mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Block=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Block=mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Block=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Block=mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Block=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Block=mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Block=-_Mathematical_Operators}', "");
Expect(0, 8959, '\p{^Is_Block=-_Mathematical_Operators}', "");
Expect(0, 8959, '\P{Is_Block=-_Mathematical_Operators}', "");
Expect(1, 8959, '\P{^Is_Block=-_Mathematical_Operators}', "");
Expect(0, 8703, '\p{Is_Block=-_Mathematical_Operators}', "");
Expect(1, 8703, '\p{^Is_Block=-_Mathematical_Operators}', "");
Expect(1, 8703, '\P{Is_Block=-_Mathematical_Operators}', "");
Expect(0, 8703, '\P{^Is_Block=-_Mathematical_Operators}', "");
Error('\p{Is_Blk=	_MATHEMATICAL-Operators:=}');
Error('\P{Is_Blk=	_MATHEMATICAL-Operators:=}');
Expect(1, 8959, '\p{Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(0, 8959, '\p{^Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(0, 8959, '\P{Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(1, 8959, '\P{^Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(0, 8703, '\p{Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(1, 8703, '\p{^Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(1, 8703, '\P{Is_Blk=	-MATHEMATICAL Operators}', "");
Expect(0, 8703, '\P{^Is_Blk=	-MATHEMATICAL Operators}', "");
Error('\p{Block=- CJK/a/compatibilityIdeographs supplement}');
Error('\P{Block=- CJK/a/compatibilityIdeographs supplement}');
Expect(1, 195103, '\p{Block:cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Block:cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Block:cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Block:cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Block:cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Block:cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Block:cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Block:cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(0, 195103, '\p{^Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(0, 195103, '\P{Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(1, 195103, '\P{^Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(0, 194559, '\p{Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(1, 194559, '\p{^Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(1, 194559, '\P{Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Expect(0, 194559, '\P{^Block:			CJK_compatibilityIdeographs_SUPPLEMENT}', "");
Error('\p{Blk= 	CJK-Compatibility_Ideographs_Supplement/a/}');
Error('\P{Blk= 	CJK-Compatibility_Ideographs_Supplement/a/}');
Expect(1, 195103, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(0, 195103, '\p{^Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(0, 195103, '\P{Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(1, 195103, '\P{^Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(0, 194559, '\p{Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(1, 194559, '\p{^Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(1, 194559, '\P{Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Expect(0, 194559, '\P{^Blk:		CJK_Compatibility Ideographs	Supplement}', "");
Error('\p{Is_Block= _cjk:=Compatibility_Ideographs_Supplement}');
Error('\P{Is_Block= _cjk:=Compatibility_Ideographs_Supplement}');
Expect(1, 195103, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(0, 195103, '\p{^Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(0, 195103, '\P{Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(1, 195103, '\P{^Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(0, 194559, '\p{Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(1, 194559, '\p{^Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(1, 194559, '\P{Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Expect(0, 194559, '\P{^Is_Block=--cjk	Compatibility-ideographs	supplement}', "");
Error('\p{Is_Blk=	-cjk COMPATIBILITY	Ideographs:=supplement}');
Error('\P{Is_Blk=	-cjk COMPATIBILITY	Ideographs:=supplement}');
Expect(1, 195103, '\p{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\p{^Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\P{Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(1, 195103, '\P{^Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\p{Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\p{^Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\P{Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\P{^Is_Blk=__CJKcompatibility	IDEOGRAPHSSupplement}', "");
Error('\p{Block=:=  IPA	extensions}');
Error('\P{Block=:=  IPA	extensions}');
Expect(1, 687, '\p{Block=ipaextensions}', "");
Expect(0, 687, '\p{^Block=ipaextensions}', "");
Expect(0, 687, '\P{Block=ipaextensions}', "");
Expect(1, 687, '\P{^Block=ipaextensions}', "");
Expect(0, 591, '\p{Block=ipaextensions}', "");
Expect(1, 591, '\p{^Block=ipaextensions}', "");
Expect(1, 591, '\P{Block=ipaextensions}', "");
Expect(0, 591, '\P{^Block=ipaextensions}', "");
Expect(1, 687, '\p{Block=-IPA_extensions}', "");
Expect(0, 687, '\p{^Block=-IPA_extensions}', "");
Expect(0, 687, '\P{Block=-IPA_extensions}', "");
Expect(1, 687, '\P{^Block=-IPA_extensions}', "");
Expect(0, 591, '\p{Block=-IPA_extensions}', "");
Expect(1, 591, '\p{^Block=-IPA_extensions}', "");
Expect(1, 591, '\P{Block=-IPA_extensions}', "");
Expect(0, 591, '\P{^Block=-IPA_extensions}', "");
Error('\p{Blk=:=_ IPA-EXTENSIONS}');
Error('\P{Blk=:=_ IPA-EXTENSIONS}');
Expect(1, 687, '\p{Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Blk=ipaextensions}', "");
Expect(0, 687, '\P{Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Blk=ipaextensions}', "");
Expect(0, 591, '\p{Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Blk=ipaextensions}', "");
Expect(1, 591, '\P{Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Blk=ipaextensions}', "");
Expect(1, 687, '\p{Blk=IPA-Extensions}', "");
Expect(0, 687, '\p{^Blk=IPA-Extensions}', "");
Expect(0, 687, '\P{Blk=IPA-Extensions}', "");
Expect(1, 687, '\P{^Blk=IPA-Extensions}', "");
Expect(0, 591, '\p{Blk=IPA-Extensions}', "");
Expect(1, 591, '\p{^Blk=IPA-Extensions}', "");
Expect(1, 591, '\P{Blk=IPA-Extensions}', "");
Expect(0, 591, '\P{^Blk=IPA-Extensions}', "");
Error('\p{Is_Block=:= ipa	EXTENSIONS}');
Error('\P{Is_Block=:= ipa	EXTENSIONS}');
Expect(1, 687, '\p{Is_Block=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Block=ipaextensions}', "");
Expect(0, 687, '\P{Is_Block=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Block=ipaextensions}', "");
Expect(0, 591, '\p{Is_Block=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Block=ipaextensions}', "");
Expect(1, 591, '\P{Is_Block=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Block=ipaextensions}', "");
Expect(1, 687, '\p{Is_Block=_IPA_Extensions}', "");
Expect(0, 687, '\p{^Is_Block=_IPA_Extensions}', "");
Expect(0, 687, '\P{Is_Block=_IPA_Extensions}', "");
Expect(1, 687, '\P{^Is_Block=_IPA_Extensions}', "");
Expect(0, 591, '\p{Is_Block=_IPA_Extensions}', "");
Expect(1, 591, '\p{^Is_Block=_IPA_Extensions}', "");
Expect(1, 591, '\P{Is_Block=_IPA_Extensions}', "");
Expect(0, 591, '\P{^Is_Block=_IPA_Extensions}', "");
Error('\p{Is_Blk=:=IPAExtensions}');
Error('\P{Is_Blk=:=IPAExtensions}');
Expect(1, 687, '\p{Is_Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Blk=ipaextensions}', "");
Expect(0, 687, '\P{Is_Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Blk=ipaextensions}', "");
Expect(0, 591, '\p{Is_Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Blk=ipaextensions}', "");
Expect(1, 591, '\P{Is_Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Blk=ipaextensions}', "");
Expect(1, 687, '\p{Is_Blk:   	IPA extensions}', "");
Expect(0, 687, '\p{^Is_Blk:   	IPA extensions}', "");
Expect(0, 687, '\P{Is_Blk:   	IPA extensions}', "");
Expect(1, 687, '\P{^Is_Blk:   	IPA extensions}', "");
Expect(0, 591, '\p{Is_Blk:   	IPA extensions}', "");
Expect(1, 591, '\p{^Is_Blk:   	IPA extensions}', "");
Expect(1, 591, '\P{Is_Blk:   	IPA extensions}', "");
Expect(0, 591, '\P{^Is_Blk:   	IPA extensions}', "");
Error('\p{Block=  kannada:=}');
Error('\P{Block=  kannada:=}');
Expect(1, 3327, '\p{Block=kannada}', "");
Expect(0, 3327, '\p{^Block=kannada}', "");
Expect(0, 3327, '\P{Block=kannada}', "");
Expect(1, 3327, '\P{^Block=kannada}', "");
Expect(0, 3199, '\p{Block=kannada}', "");
Expect(1, 3199, '\p{^Block=kannada}', "");
Expect(1, 3199, '\P{Block=kannada}', "");
Expect(0, 3199, '\P{^Block=kannada}', "");
Expect(1, 3327, '\p{Block:   	_Kannada}', "");
Expect(0, 3327, '\p{^Block:   	_Kannada}', "");
Expect(0, 3327, '\P{Block:   	_Kannada}', "");
Expect(1, 3327, '\P{^Block:   	_Kannada}', "");
Expect(0, 3199, '\p{Block:   	_Kannada}', "");
Expect(1, 3199, '\p{^Block:   	_Kannada}', "");
Expect(1, 3199, '\P{Block:   	_Kannada}', "");
Expect(0, 3199, '\P{^Block:   	_Kannada}', "");
Error('\p{Blk=  kannada:=}');
Error('\P{Blk=  kannada:=}');
Expect(1, 3327, '\p{Blk=kannada}', "");
Expect(0, 3327, '\p{^Blk=kannada}', "");
Expect(0, 3327, '\P{Blk=kannada}', "");
Expect(1, 3327, '\P{^Blk=kannada}', "");
Expect(0, 3199, '\p{Blk=kannada}', "");
Expect(1, 3199, '\p{^Blk=kannada}', "");
Expect(1, 3199, '\P{Blk=kannada}', "");
Expect(0, 3199, '\P{^Blk=kannada}', "");
Expect(1, 3327, '\p{Blk=	Kannada}', "");
Expect(0, 3327, '\p{^Blk=	Kannada}', "");
Expect(0, 3327, '\P{Blk=	Kannada}', "");
Expect(1, 3327, '\P{^Blk=	Kannada}', "");
Expect(0, 3199, '\p{Blk=	Kannada}', "");
Expect(1, 3199, '\p{^Blk=	Kannada}', "");
Expect(1, 3199, '\P{Blk=	Kannada}', "");
Expect(0, 3199, '\P{^Blk=	Kannada}', "");
Error('\p{Is_Block=/a/- Kannada}');
Error('\P{Is_Block=/a/- Kannada}');
Expect(1, 3327, '\p{Is_Block=kannada}', "");
Expect(0, 3327, '\p{^Is_Block=kannada}', "");
Expect(0, 3327, '\P{Is_Block=kannada}', "");
Expect(1, 3327, '\P{^Is_Block=kannada}', "");
Expect(0, 3199, '\p{Is_Block=kannada}', "");
Expect(1, 3199, '\p{^Is_Block=kannada}', "");
Expect(1, 3199, '\P{Is_Block=kannada}', "");
Expect(0, 3199, '\P{^Is_Block=kannada}', "");
Expect(1, 3327, '\p{Is_Block= Kannada}', "");
Expect(0, 3327, '\p{^Is_Block= Kannada}', "");
Expect(0, 3327, '\P{Is_Block= Kannada}', "");
Expect(1, 3327, '\P{^Is_Block= Kannada}', "");
Expect(0, 3199, '\p{Is_Block= Kannada}', "");
Expect(1, 3199, '\p{^Is_Block= Kannada}', "");
Expect(1, 3199, '\P{Is_Block= Kannada}', "");
Expect(0, 3199, '\P{^Is_Block= Kannada}', "");
Error('\p{Is_Blk=_:=kannada}');
Error('\P{Is_Blk=_:=kannada}');
Expect(1, 3327, '\p{Is_Blk=kannada}', "");
Expect(0, 3327, '\p{^Is_Blk=kannada}', "");
Expect(0, 3327, '\P{Is_Blk=kannada}', "");
Expect(1, 3327, '\P{^Is_Blk=kannada}', "");
Expect(0, 3199, '\p{Is_Blk=kannada}', "");
Expect(1, 3199, '\p{^Is_Blk=kannada}', "");
Expect(1, 3199, '\P{Is_Blk=kannada}', "");
Expect(0, 3199, '\P{^Is_Blk=kannada}', "");
Expect(1, 3327, '\p{Is_Blk=	kannada}', "");
Expect(0, 3327, '\p{^Is_Blk=	kannada}', "");
Expect(0, 3327, '\P{Is_Blk=	kannada}', "");
Expect(1, 3327, '\P{^Is_Blk=	kannada}', "");
Expect(0, 3199, '\p{Is_Blk=	kannada}', "");
Expect(1, 3199, '\p{^Is_Blk=	kannada}', "");
Expect(1, 3199, '\P{Is_Blk=	kannada}', "");
Expect(0, 3199, '\P{^Is_Blk=	kannada}', "");
Error('\p{Block=:=	_latin_extended_Additional}');
Error('\P{Block=:=	_latin_extended_Additional}');
Expect(1, 7935, '\p{Block=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Block=latinextendedadditional}', "");
Expect(0, 7935, '\P{Block=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Block=latinextendedadditional}', "");
Expect(0, 7679, '\p{Block=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Block=latinextendedadditional}', "");
Expect(1, 7679, '\P{Block=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Block=latinextendedadditional}', "");
Expect(1, 7935, '\p{Block:	-Latin	EXTENDED_Additional}', "");
Expect(0, 7935, '\p{^Block:	-Latin	EXTENDED_Additional}', "");
Expect(0, 7935, '\P{Block:	-Latin	EXTENDED_Additional}', "");
Expect(1, 7935, '\P{^Block:	-Latin	EXTENDED_Additional}', "");
Expect(0, 7679, '\p{Block:	-Latin	EXTENDED_Additional}', "");
Expect(1, 7679, '\p{^Block:	-Latin	EXTENDED_Additional}', "");
Expect(1, 7679, '\P{Block:	-Latin	EXTENDED_Additional}', "");
Expect(0, 7679, '\P{^Block:	-Latin	EXTENDED_Additional}', "");
Error('\p{Blk=:=LATIN_extended_ADDITIONAL}');
Error('\P{Blk=:=LATIN_extended_ADDITIONAL}');
Expect(1, 7935, '\p{Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Blk=Latin	extended_Additional}', "");
Expect(0, 7935, '\p{^Blk=Latin	extended_Additional}', "");
Expect(0, 7935, '\P{Blk=Latin	extended_Additional}', "");
Expect(1, 7935, '\P{^Blk=Latin	extended_Additional}', "");
Expect(0, 7679, '\p{Blk=Latin	extended_Additional}', "");
Expect(1, 7679, '\p{^Blk=Latin	extended_Additional}', "");
Expect(1, 7679, '\P{Blk=Latin	extended_Additional}', "");
Expect(0, 7679, '\P{^Blk=Latin	extended_Additional}', "");
Error('\p{Is_Block: _	latin/a/EXTENDED-additional}');
Error('\P{Is_Block: _	latin/a/EXTENDED-additional}');
Expect(1, 7935, '\p{Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(0, 7935, '\p{^Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(0, 7935, '\P{Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(1, 7935, '\P{^Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(0, 7679, '\p{Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(1, 7679, '\p{^Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(1, 7679, '\P{Is_Block=	Latin-Extended_ADDITIONAL}', "");
Expect(0, 7679, '\P{^Is_Block=	Latin-Extended_ADDITIONAL}', "");
Error('\p{Is_Blk=_-Latin_Extended-Additional/a/}');
Error('\P{Is_Blk=_-Latin_Extended-Additional/a/}');
Expect(1, 7935, '\p{Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Blk=  latin	ExtendedAdditional}', "");
Expect(0, 7935, '\p{^Is_Blk=  latin	ExtendedAdditional}', "");
Expect(0, 7935, '\P{Is_Blk=  latin	ExtendedAdditional}', "");
Expect(1, 7935, '\P{^Is_Blk=  latin	ExtendedAdditional}', "");
Expect(0, 7679, '\p{Is_Blk=  latin	ExtendedAdditional}', "");
Expect(1, 7679, '\p{^Is_Blk=  latin	ExtendedAdditional}', "");
Expect(1, 7679, '\P{Is_Blk=  latin	ExtendedAdditional}', "");
Expect(0, 7679, '\P{^Is_Blk=  latin	ExtendedAdditional}', "");
Error('\p{Block=/a/-Cham}');
Error('\P{Block=/a/-Cham}');
Expect(1, 43615, '\p{Block=cham}', "");
Expect(0, 43615, '\p{^Block=cham}', "");
Expect(0, 43615, '\P{Block=cham}', "");
Expect(1, 43615, '\P{^Block=cham}', "");
Expect(0, 43519, '\p{Block=cham}', "");
Expect(1, 43519, '\p{^Block=cham}', "");
Expect(1, 43519, '\P{Block=cham}', "");
Expect(0, 43519, '\P{^Block=cham}', "");
Expect(1, 43615, '\p{Block=  CHAM}', "");
Expect(0, 43615, '\p{^Block=  CHAM}', "");
Expect(0, 43615, '\P{Block=  CHAM}', "");
Expect(1, 43615, '\P{^Block=  CHAM}', "");
Expect(0, 43519, '\p{Block=  CHAM}', "");
Expect(1, 43519, '\p{^Block=  CHAM}', "");
Expect(1, 43519, '\P{Block=  CHAM}', "");
Expect(0, 43519, '\P{^Block=  CHAM}', "");
Error('\p{Blk=_-cham/a/}');
Error('\P{Blk=_-cham/a/}');
Expect(1, 43615, '\p{Blk: cham}', "");
Expect(0, 43615, '\p{^Blk: cham}', "");
Expect(0, 43615, '\P{Blk: cham}', "");
Expect(1, 43615, '\P{^Blk: cham}', "");
Expect(0, 43519, '\p{Blk: cham}', "");
Expect(1, 43519, '\p{^Blk: cham}', "");
Expect(1, 43519, '\P{Blk: cham}', "");
Expect(0, 43519, '\P{^Blk: cham}', "");
Expect(1, 43615, '\p{Blk= 	Cham}', "");
Expect(0, 43615, '\p{^Blk= 	Cham}', "");
Expect(0, 43615, '\P{Blk= 	Cham}', "");
Expect(1, 43615, '\P{^Blk= 	Cham}', "");
Expect(0, 43519, '\p{Blk= 	Cham}', "");
Expect(1, 43519, '\p{^Blk= 	Cham}', "");
Expect(1, 43519, '\P{Blk= 	Cham}', "");
Expect(0, 43519, '\P{^Blk= 	Cham}', "");
Error('\p{Is_Block=:=__Cham}');
Error('\P{Is_Block=:=__Cham}');
Expect(1, 43615, '\p{Is_Block=cham}', "");
Expect(0, 43615, '\p{^Is_Block=cham}', "");
Expect(0, 43615, '\P{Is_Block=cham}', "");
Expect(1, 43615, '\P{^Is_Block=cham}', "");
Expect(0, 43519, '\p{Is_Block=cham}', "");
Expect(1, 43519, '\p{^Is_Block=cham}', "");
Expect(1, 43519, '\P{Is_Block=cham}', "");
Expect(0, 43519, '\P{^Is_Block=cham}', "");
Expect(1, 43615, '\p{Is_Block= 	Cham}', "");
Expect(0, 43615, '\p{^Is_Block= 	Cham}', "");
Expect(0, 43615, '\P{Is_Block= 	Cham}', "");
Expect(1, 43615, '\P{^Is_Block= 	Cham}', "");
Expect(0, 43519, '\p{Is_Block= 	Cham}', "");
Expect(1, 43519, '\p{^Is_Block= 	Cham}', "");
Expect(1, 43519, '\P{Is_Block= 	Cham}', "");
Expect(0, 43519, '\P{^Is_Block= 	Cham}', "");
Error('\p{Is_Blk:   /a/_CHAM}');
Error('\P{Is_Blk:   /a/_CHAM}');
Expect(1, 43615, '\p{Is_Blk=cham}', "");
Expect(0, 43615, '\p{^Is_Blk=cham}', "");
Expect(0, 43615, '\P{Is_Blk=cham}', "");
Expect(1, 43615, '\P{^Is_Blk=cham}', "");
Expect(0, 43519, '\p{Is_Blk=cham}', "");
Expect(1, 43519, '\p{^Is_Blk=cham}', "");
Expect(1, 43519, '\P{Is_Blk=cham}', "");
Expect(0, 43519, '\P{^Is_Blk=cham}', "");
Expect(1, 43615, '\p{Is_Blk= Cham}', "");
Expect(0, 43615, '\p{^Is_Blk= Cham}', "");
Expect(0, 43615, '\P{Is_Blk= Cham}', "");
Expect(1, 43615, '\P{^Is_Blk= Cham}', "");
Expect(0, 43519, '\p{Is_Blk= Cham}', "");
Expect(1, 43519, '\p{^Is_Blk= Cham}', "");
Expect(1, 43519, '\P{Is_Blk= Cham}', "");
Expect(0, 43519, '\P{^Is_Blk= Cham}', "");
Error('\p{Block=_:=Cyrillic-supplement}');
Error('\P{Block=_:=Cyrillic-supplement}');
Expect(1, 1327, '\p{Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Block:	-_CYRILLIC	Supplement}', "");
Expect(0, 1327, '\p{^Block:	-_CYRILLIC	Supplement}', "");
Expect(0, 1327, '\P{Block:	-_CYRILLIC	Supplement}', "");
Expect(1, 1327, '\P{^Block:	-_CYRILLIC	Supplement}', "");
Expect(0, 1279, '\p{Block:	-_CYRILLIC	Supplement}', "");
Expect(1, 1279, '\p{^Block:	-_CYRILLIC	Supplement}', "");
Expect(1, 1279, '\P{Block:	-_CYRILLIC	Supplement}', "");
Expect(0, 1279, '\P{^Block:	-_CYRILLIC	Supplement}', "");
Error('\p{Blk=:= CYRILLIC-SUPPLEMENTARY}');
Error('\P{Blk=:= CYRILLIC-SUPPLEMENTARY}');
Expect(1, 1327, '\p{Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Blk=--CYRILLIC supplementary}', "");
Expect(0, 1327, '\p{^Blk=--CYRILLIC supplementary}', "");
Expect(0, 1327, '\P{Blk=--CYRILLIC supplementary}', "");
Expect(1, 1327, '\P{^Blk=--CYRILLIC supplementary}', "");
Expect(0, 1279, '\p{Blk=--CYRILLIC supplementary}', "");
Expect(1, 1279, '\p{^Blk=--CYRILLIC supplementary}', "");
Expect(1, 1279, '\P{Blk=--CYRILLIC supplementary}', "");
Expect(0, 1279, '\P{^Blk=--CYRILLIC supplementary}', "");
Error('\p{Is_Block=:=	-CYRILLIC-Supplement}');
Error('\P{Is_Block=:=	-CYRILLIC-Supplement}');
Expect(1, 1327, '\p{Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Is_Block= Cyrillic	supplement}', "");
Expect(0, 1327, '\p{^Is_Block= Cyrillic	supplement}', "");
Expect(0, 1327, '\P{Is_Block= Cyrillic	supplement}', "");
Expect(1, 1327, '\P{^Is_Block= Cyrillic	supplement}', "");
Expect(0, 1279, '\p{Is_Block= Cyrillic	supplement}', "");
Expect(1, 1279, '\p{^Is_Block= Cyrillic	supplement}', "");
Expect(1, 1279, '\P{Is_Block= Cyrillic	supplement}', "");
Expect(0, 1279, '\P{^Is_Block= Cyrillic	supplement}', "");
Error('\p{Is_Blk=/a/		CYRILLIC-supplementary}');
Error('\P{Is_Blk=/a/		CYRILLIC-supplementary}');
Expect(1, 1327, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Is_Blk=-	Cyrillic Supplementary}', "");
Expect(0, 1327, '\p{^Is_Blk=-	Cyrillic Supplementary}', "");
Expect(0, 1327, '\P{Is_Blk=-	Cyrillic Supplementary}', "");
Expect(1, 1327, '\P{^Is_Blk=-	Cyrillic Supplementary}', "");
Expect(0, 1279, '\p{Is_Blk=-	Cyrillic Supplementary}', "");
Expect(1, 1279, '\p{^Is_Blk=-	Cyrillic Supplementary}', "");
Expect(1, 1279, '\P{Is_Blk=-	Cyrillic Supplementary}', "");
Expect(0, 1279, '\P{^Is_Blk=-	Cyrillic Supplementary}', "");
Error('\p{Block=/a/greek andCOPTIC}');
Error('\P{Block=/a/greek andCOPTIC}');
Expect(1, 1023, '\p{Block: greekandcoptic}', "");
Expect(0, 1023, '\p{^Block: greekandcoptic}', "");
Expect(0, 1023, '\P{Block: greekandcoptic}', "");
Expect(1, 1023, '\P{^Block: greekandcoptic}', "");
Expect(0, 879, '\p{Block: greekandcoptic}', "");
Expect(1, 879, '\p{^Block: greekandcoptic}', "");
Expect(1, 879, '\P{Block: greekandcoptic}', "");
Expect(0, 879, '\P{^Block: greekandcoptic}', "");
Expect(1, 1023, '\p{Block=-Greek_And	coptic}', "");
Expect(0, 1023, '\p{^Block=-Greek_And	coptic}', "");
Expect(0, 1023, '\P{Block=-Greek_And	coptic}', "");
Expect(1, 1023, '\P{^Block=-Greek_And	coptic}', "");
Expect(0, 879, '\p{Block=-Greek_And	coptic}', "");
Expect(1, 879, '\p{^Block=-Greek_And	coptic}', "");
Expect(1, 879, '\P{Block=-Greek_And	coptic}', "");
Expect(0, 879, '\P{^Block=-Greek_And	coptic}', "");
Error('\p{Blk=-:=Greek}');
Error('\P{Blk=-:=Greek}');
Expect(1, 1023, '\p{Blk=greek}', "");
Expect(0, 1023, '\p{^Blk=greek}', "");
Expect(0, 1023, '\P{Blk=greek}', "");
Expect(1, 1023, '\P{^Blk=greek}', "");
Expect(0, 879, '\p{Blk=greek}', "");
Expect(1, 879, '\p{^Blk=greek}', "");
Expect(1, 879, '\P{Blk=greek}', "");
Expect(0, 879, '\P{^Blk=greek}', "");
Expect(1, 1023, '\p{Blk=_	greek}', "");
Expect(0, 1023, '\p{^Blk=_	greek}', "");
Expect(0, 1023, '\P{Blk=_	greek}', "");
Expect(1, 1023, '\P{^Blk=_	greek}', "");
Expect(0, 879, '\p{Blk=_	greek}', "");
Expect(1, 879, '\p{^Blk=_	greek}', "");
Expect(1, 879, '\P{Blk=_	greek}', "");
Expect(0, 879, '\P{^Blk=_	greek}', "");
Error('\p{Is_Block:   Greek:=And-Coptic}');
Error('\P{Is_Block:   Greek:=And-Coptic}');
Expect(1, 1023, '\p{Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\p{^Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\P{Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\P{^Is_Block=greekandcoptic}', "");
Expect(0, 879, '\p{Is_Block=greekandcoptic}', "");
Expect(1, 879, '\p{^Is_Block=greekandcoptic}', "");
Expect(1, 879, '\P{Is_Block=greekandcoptic}', "");
Expect(0, 879, '\P{^Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\p{Is_Block=- greekand_coptic}', "");
Expect(0, 1023, '\p{^Is_Block=- greekand_coptic}', "");
Expect(0, 1023, '\P{Is_Block=- greekand_coptic}', "");
Expect(1, 1023, '\P{^Is_Block=- greekand_coptic}', "");
Expect(0, 879, '\p{Is_Block=- greekand_coptic}', "");
Expect(1, 879, '\p{^Is_Block=- greekand_coptic}', "");
Expect(1, 879, '\P{Is_Block=- greekand_coptic}', "");
Expect(0, 879, '\P{^Is_Block=- greekand_coptic}', "");
Error('\p{Is_Blk= 	GREEK/a/}');
Error('\P{Is_Blk= 	GREEK/a/}');
Expect(1, 1023, '\p{Is_Blk=greek}', "");
Expect(0, 1023, '\p{^Is_Blk=greek}', "");
Expect(0, 1023, '\P{Is_Blk=greek}', "");
Expect(1, 1023, '\P{^Is_Blk=greek}', "");
Expect(0, 879, '\p{Is_Blk=greek}', "");
Expect(1, 879, '\p{^Is_Blk=greek}', "");
Expect(1, 879, '\P{Is_Blk=greek}', "");
Expect(0, 879, '\P{^Is_Blk=greek}', "");
Expect(1, 1023, '\p{Is_Blk=- GREEK}', "");
Expect(0, 1023, '\p{^Is_Blk=- GREEK}', "");
Expect(0, 1023, '\P{Is_Blk=- GREEK}', "");
Expect(1, 1023, '\P{^Is_Blk=- GREEK}', "");
Expect(0, 879, '\p{Is_Blk=- GREEK}', "");
Expect(1, 879, '\p{^Is_Blk=- GREEK}', "");
Expect(1, 879, '\P{Is_Blk=- GREEK}', "");
Expect(0, 879, '\P{^Is_Blk=- GREEK}', "");
Error('\p{Block=- MISCELLANEOUS:=Mathematical Symbols_B}');
Error('\P{Block=- MISCELLANEOUS:=Mathematical Symbols_B}');
Expect(1, 10751, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(0, 10751, '\p{^Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(0, 10751, '\P{Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(1, 10751, '\P{^Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(0, 10623, '\p{Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(1, 10623, '\p{^Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(1, 10623, '\P{Block=-	MiscellaneousMathematicalSymbolsB}', "");
Expect(0, 10623, '\P{^Block=-	MiscellaneousMathematicalSymbolsB}', "");
Error('\p{Blk:-Miscellaneous-Mathematical_Symbols:=B}');
Error('\P{Blk:-Miscellaneous-Mathematical_Symbols:=B}');
Expect(1, 10751, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(0, 10751, '\p{^Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(0, 10751, '\P{Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(1, 10751, '\P{^Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(0, 10623, '\p{Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(1, 10623, '\p{^Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(1, 10623, '\P{Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Expect(0, 10623, '\P{^Blk:   Miscellaneousmathematical_SYMBOLSB}', "");
Error('\p{Is_Block= _Miscellaneous:=MATHEMATICAL_SYMBOLS-B}');
Error('\P{Is_Block= _Miscellaneous:=MATHEMATICAL_SYMBOLS-B}');
Expect(1, 10751, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(0, 10751, '\p{^Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(0, 10751, '\P{Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(1, 10751, '\P{^Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(0, 10623, '\p{Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(1, 10623, '\p{^Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(1, 10623, '\P{Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Expect(0, 10623, '\P{^Is_Block=	 Miscellaneous MathematicalSymbols-B}', "");
Error('\p{Is_Blk=/a/miscellaneous	mathematical symbols_B}');
Error('\P{Is_Blk=/a/miscellaneous	mathematical symbols_B}');
Expect(1, 10751, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(0, 10751, '\p{^Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(0, 10751, '\P{Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(1, 10751, '\P{^Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(0, 10623, '\p{Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(1, 10623, '\p{^Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(1, 10623, '\P{Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Expect(0, 10623, '\P{^Is_Blk=	 MISCELLANEOUS_mathematicalSymbols B}', "");
Error('\p{Block=	/a/Bengali}');
Error('\P{Block=	/a/Bengali}');
Expect(1, 2559, '\p{Block=bengali}', "");
Expect(0, 2559, '\p{^Block=bengali}', "");
Expect(0, 2559, '\P{Block=bengali}', "");
Expect(1, 2559, '\P{^Block=bengali}', "");
Expect(0, 2431, '\p{Block=bengali}', "");
Expect(1, 2431, '\p{^Block=bengali}', "");
Expect(1, 2431, '\P{Block=bengali}', "");
Expect(0, 2431, '\P{^Block=bengali}', "");
Expect(1, 2559, '\p{Block=		bengali}', "");
Expect(0, 2559, '\p{^Block=		bengali}', "");
Expect(0, 2559, '\P{Block=		bengali}', "");
Expect(1, 2559, '\P{^Block=		bengali}', "");
Expect(0, 2431, '\p{Block=		bengali}', "");
Expect(1, 2431, '\p{^Block=		bengali}', "");
Expect(1, 2431, '\P{Block=		bengali}', "");
Expect(0, 2431, '\P{^Block=		bengali}', "");
Error('\p{Blk=:=-_Bengali}');
Error('\P{Blk=:=-_Bengali}');
Expect(1, 2559, '\p{Blk=bengali}', "");
Expect(0, 2559, '\p{^Blk=bengali}', "");
Expect(0, 2559, '\P{Blk=bengali}', "");
Expect(1, 2559, '\P{^Blk=bengali}', "");
Expect(0, 2431, '\p{Blk=bengali}', "");
Expect(1, 2431, '\p{^Blk=bengali}', "");
Expect(1, 2431, '\P{Blk=bengali}', "");
Expect(0, 2431, '\P{^Blk=bengali}', "");
Expect(1, 2559, '\p{Blk=-Bengali}', "");
Expect(0, 2559, '\p{^Blk=-Bengali}', "");
Expect(0, 2559, '\P{Blk=-Bengali}', "");
Expect(1, 2559, '\P{^Blk=-Bengali}', "");
Expect(0, 2431, '\p{Blk=-Bengali}', "");
Expect(1, 2431, '\p{^Blk=-Bengali}', "");
Expect(1, 2431, '\P{Blk=-Bengali}', "");
Expect(0, 2431, '\P{^Blk=-Bengali}', "");
Error('\p{Is_Block:   :=_BENGALI}');
Error('\P{Is_Block:   :=_BENGALI}');
Expect(1, 2559, '\p{Is_Block=bengali}', "");
Expect(0, 2559, '\p{^Is_Block=bengali}', "");
Expect(0, 2559, '\P{Is_Block=bengali}', "");
Expect(1, 2559, '\P{^Is_Block=bengali}', "");
Expect(0, 2431, '\p{Is_Block=bengali}', "");
Expect(1, 2431, '\p{^Is_Block=bengali}', "");
Expect(1, 2431, '\P{Is_Block=bengali}', "");
Expect(0, 2431, '\P{^Is_Block=bengali}', "");
Expect(1, 2559, '\p{Is_Block=_BENGALI}', "");
Expect(0, 2559, '\p{^Is_Block=_BENGALI}', "");
Expect(0, 2559, '\P{Is_Block=_BENGALI}', "");
Expect(1, 2559, '\P{^Is_Block=_BENGALI}', "");
Expect(0, 2431, '\p{Is_Block=_BENGALI}', "");
Expect(1, 2431, '\p{^Is_Block=_BENGALI}', "");
Expect(1, 2431, '\P{Is_Block=_BENGALI}', "");
Expect(0, 2431, '\P{^Is_Block=_BENGALI}', "");
Error('\p{Is_Blk= :=Bengali}');
Error('\P{Is_Blk= :=Bengali}');
Expect(1, 2559, '\p{Is_Blk=bengali}', "");
Expect(0, 2559, '\p{^Is_Blk=bengali}', "");
Expect(0, 2559, '\P{Is_Blk=bengali}', "");
Expect(1, 2559, '\P{^Is_Blk=bengali}', "");
Expect(0, 2431, '\p{Is_Blk=bengali}', "");
Expect(1, 2431, '\p{^Is_Blk=bengali}', "");
Expect(1, 2431, '\P{Is_Blk=bengali}', "");
Expect(0, 2431, '\P{^Is_Blk=bengali}', "");
Expect(1, 2559, '\p{Is_Blk=		BENGALI}', "");
Expect(0, 2559, '\p{^Is_Blk=		BENGALI}', "");
Expect(0, 2559, '\P{Is_Blk=		BENGALI}', "");
Expect(1, 2559, '\P{^Is_Blk=		BENGALI}', "");
Expect(0, 2431, '\p{Is_Blk=		BENGALI}', "");
Expect(1, 2431, '\p{^Is_Blk=		BENGALI}', "");
Expect(1, 2431, '\P{Is_Blk=		BENGALI}', "");
Expect(0, 2431, '\P{^Is_Blk=		BENGALI}', "");
Error('\p{Block= Cypriot/a/Syllabary}');
Error('\P{Block= Cypriot/a/Syllabary}');
Expect(1, 67647, '\p{Block=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Block=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Block=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Block=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Block=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Block=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Block=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Block=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Block=CYPRIOT Syllabary}', "");
Expect(0, 67647, '\p{^Block=CYPRIOT Syllabary}', "");
Expect(0, 67647, '\P{Block=CYPRIOT Syllabary}', "");
Expect(1, 67647, '\P{^Block=CYPRIOT Syllabary}', "");
Expect(0, 67583, '\p{Block=CYPRIOT Syllabary}', "");
Expect(1, 67583, '\p{^Block=CYPRIOT Syllabary}', "");
Expect(1, 67583, '\P{Block=CYPRIOT Syllabary}', "");
Expect(0, 67583, '\P{^Block=CYPRIOT Syllabary}', "");
Error('\p{Blk=-/a/cypriot-Syllabary}');
Error('\P{Blk=-/a/cypriot-Syllabary}');
Expect(1, 67647, '\p{Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Blk=	CYPRIOTSYLLABARY}', "");
Expect(0, 67647, '\p{^Blk=	CYPRIOTSYLLABARY}', "");
Expect(0, 67647, '\P{Blk=	CYPRIOTSYLLABARY}', "");
Expect(1, 67647, '\P{^Blk=	CYPRIOTSYLLABARY}', "");
Expect(0, 67583, '\p{Blk=	CYPRIOTSYLLABARY}', "");
Expect(1, 67583, '\p{^Blk=	CYPRIOTSYLLABARY}', "");
Expect(1, 67583, '\P{Blk=	CYPRIOTSYLLABARY}', "");
Expect(0, 67583, '\P{^Blk=	CYPRIOTSYLLABARY}', "");
Error('\p{Is_Block=_:=CypriotSyllabary}');
Error('\P{Is_Block=_:=CypriotSyllabary}');
Expect(1, 67647, '\p{Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(0, 67647, '\p{^Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(0, 67647, '\P{Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(1, 67647, '\P{^Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(0, 67583, '\p{Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(1, 67583, '\p{^Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(1, 67583, '\P{Is_Block:   _CYPRIOTSYLLABARY}', "");
Expect(0, 67583, '\P{^Is_Block:   _CYPRIOTSYLLABARY}', "");
Error('\p{Is_Blk=_/a/Cypriot_Syllabary}');
Error('\P{Is_Blk=_/a/Cypriot_Syllabary}');
Expect(1, 67647, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Blk=	-CypriotSyllabary}', "");
Expect(0, 67647, '\p{^Is_Blk=	-CypriotSyllabary}', "");
Expect(0, 67647, '\P{Is_Blk=	-CypriotSyllabary}', "");
Expect(1, 67647, '\P{^Is_Blk=	-CypriotSyllabary}', "");
Expect(0, 67583, '\p{Is_Blk=	-CypriotSyllabary}', "");
Expect(1, 67583, '\p{^Is_Blk=	-CypriotSyllabary}', "");
Expect(1, 67583, '\P{Is_Blk=	-CypriotSyllabary}', "");
Expect(0, 67583, '\P{^Is_Blk=	-CypriotSyllabary}', "");
Error('\p{Block=	/a/SUPPLEMENTAL-Punctuation}');
Error('\P{Block=	/a/SUPPLEMENTAL-Punctuation}');
Expect(1, 11903, '\p{Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Block=_SUPPLEMENTAL Punctuation}', "");
Expect(0, 11903, '\p{^Block=_SUPPLEMENTAL Punctuation}', "");
Expect(0, 11903, '\P{Block=_SUPPLEMENTAL Punctuation}', "");
Expect(1, 11903, '\P{^Block=_SUPPLEMENTAL Punctuation}', "");
Expect(0, 11775, '\p{Block=_SUPPLEMENTAL Punctuation}', "");
Expect(1, 11775, '\p{^Block=_SUPPLEMENTAL Punctuation}', "");
Expect(1, 11775, '\P{Block=_SUPPLEMENTAL Punctuation}', "");
Expect(0, 11775, '\P{^Block=_SUPPLEMENTAL Punctuation}', "");
Error('\p{Blk= supplemental-PUNCTUATION/a/}');
Error('\P{Blk= supplemental-PUNCTUATION/a/}');
Expect(1, 11903, '\p{Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Blk=-supplementalPUNCTUATION}', "");
Expect(0, 11903, '\p{^Blk=-supplementalPUNCTUATION}', "");
Expect(0, 11903, '\P{Blk=-supplementalPUNCTUATION}', "");
Expect(1, 11903, '\P{^Blk=-supplementalPUNCTUATION}', "");
Expect(0, 11775, '\p{Blk=-supplementalPUNCTUATION}', "");
Expect(1, 11775, '\p{^Blk=-supplementalPUNCTUATION}', "");
Expect(1, 11775, '\P{Blk=-supplementalPUNCTUATION}', "");
Expect(0, 11775, '\P{^Blk=-supplementalPUNCTUATION}', "");
Error('\p{Is_Block= :=supplemental_Punctuation}');
Error('\P{Is_Block= :=supplemental_Punctuation}');
Expect(1, 11903, '\p{Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Block:		-supplemental Punctuation}', "");
Expect(0, 11903, '\p{^Is_Block:		-supplemental Punctuation}', "");
Expect(0, 11903, '\P{Is_Block:		-supplemental Punctuation}', "");
Expect(1, 11903, '\P{^Is_Block:		-supplemental Punctuation}', "");
Expect(0, 11775, '\p{Is_Block:		-supplemental Punctuation}', "");
Expect(1, 11775, '\p{^Is_Block:		-supplemental Punctuation}', "");
Expect(1, 11775, '\P{Is_Block:		-supplemental Punctuation}', "");
Expect(0, 11775, '\P{^Is_Block:		-supplemental Punctuation}', "");
Error('\p{Is_Blk=/a/-	Supplemental	Punctuation}');
Error('\P{Is_Blk=/a/-	Supplemental	Punctuation}');
Expect(1, 11903, '\p{Is_Blk: supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Blk: supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Blk: supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Blk: supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Blk: supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Blk: supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Blk: supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Blk: supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Blk= supplemental	PUNCTUATION}', "");
Expect(0, 11903, '\p{^Is_Blk= supplemental	PUNCTUATION}', "");
Expect(0, 11903, '\P{Is_Blk= supplemental	PUNCTUATION}', "");
Expect(1, 11903, '\P{^Is_Blk= supplemental	PUNCTUATION}', "");
Expect(0, 11775, '\p{Is_Blk= supplemental	PUNCTUATION}', "");
Expect(1, 11775, '\p{^Is_Blk= supplemental	PUNCTUATION}', "");
Expect(1, 11775, '\P{Is_Blk= supplemental	PUNCTUATION}', "");
Expect(0, 11775, '\P{^Is_Blk= supplemental	PUNCTUATION}', "");
Error('\p{Block=		Coptic:=}');
Error('\P{Block=		Coptic:=}');
Expect(1, 11519, '\p{Block=coptic}', "");
Expect(0, 11519, '\p{^Block=coptic}', "");
Expect(0, 11519, '\P{Block=coptic}', "");
Expect(1, 11519, '\P{^Block=coptic}', "");
Expect(0, 11391, '\p{Block=coptic}', "");
Expect(1, 11391, '\p{^Block=coptic}', "");
Expect(1, 11391, '\P{Block=coptic}', "");
Expect(0, 11391, '\P{^Block=coptic}', "");
Expect(1, 11519, '\p{Block= _COPTIC}', "");
Expect(0, 11519, '\p{^Block= _COPTIC}', "");
Expect(0, 11519, '\P{Block= _COPTIC}', "");
Expect(1, 11519, '\P{^Block= _COPTIC}', "");
Expect(0, 11391, '\p{Block= _COPTIC}', "");
Expect(1, 11391, '\p{^Block= _COPTIC}', "");
Expect(1, 11391, '\P{Block= _COPTIC}', "");
Expect(0, 11391, '\P{^Block= _COPTIC}', "");
Error('\p{Blk=/a/coptic}');
Error('\P{Blk=/a/coptic}');
Expect(1, 11519, '\p{Blk=coptic}', "");
Expect(0, 11519, '\p{^Blk=coptic}', "");
Expect(0, 11519, '\P{Blk=coptic}', "");
Expect(1, 11519, '\P{^Blk=coptic}', "");
Expect(0, 11391, '\p{Blk=coptic}', "");
Expect(1, 11391, '\p{^Blk=coptic}', "");
Expect(1, 11391, '\P{Blk=coptic}', "");
Expect(0, 11391, '\P{^Blk=coptic}', "");
Expect(1, 11519, '\p{Blk= Coptic}', "");
Expect(0, 11519, '\p{^Blk= Coptic}', "");
Expect(0, 11519, '\P{Blk= Coptic}', "");
Expect(1, 11519, '\P{^Blk= Coptic}', "");
Expect(0, 11391, '\p{Blk= Coptic}', "");
Expect(1, 11391, '\p{^Blk= Coptic}', "");
Expect(1, 11391, '\P{Blk= Coptic}', "");
Expect(0, 11391, '\P{^Blk= Coptic}', "");
Error('\p{Is_Block=_ Coptic:=}');
Error('\P{Is_Block=_ Coptic:=}');
Expect(1, 11519, '\p{Is_Block=coptic}', "");
Expect(0, 11519, '\p{^Is_Block=coptic}', "");
Expect(0, 11519, '\P{Is_Block=coptic}', "");
Expect(1, 11519, '\P{^Is_Block=coptic}', "");
Expect(0, 11391, '\p{Is_Block=coptic}', "");
Expect(1, 11391, '\p{^Is_Block=coptic}', "");
Expect(1, 11391, '\P{Is_Block=coptic}', "");
Expect(0, 11391, '\P{^Is_Block=coptic}', "");
Expect(1, 11519, '\p{Is_Block= 	COPTIC}', "");
Expect(0, 11519, '\p{^Is_Block= 	COPTIC}', "");
Expect(0, 11519, '\P{Is_Block= 	COPTIC}', "");
Expect(1, 11519, '\P{^Is_Block= 	COPTIC}', "");
Expect(0, 11391, '\p{Is_Block= 	COPTIC}', "");
Expect(1, 11391, '\p{^Is_Block= 	COPTIC}', "");
Expect(1, 11391, '\P{Is_Block= 	COPTIC}', "");
Expect(0, 11391, '\P{^Is_Block= 	COPTIC}', "");
Error('\p{Is_Blk=_:=Coptic}');
Error('\P{Is_Blk=_:=Coptic}');
Expect(1, 11519, '\p{Is_Blk=coptic}', "");
Expect(0, 11519, '\p{^Is_Blk=coptic}', "");
Expect(0, 11519, '\P{Is_Blk=coptic}', "");
Expect(1, 11519, '\P{^Is_Blk=coptic}', "");
Expect(0, 11391, '\p{Is_Blk=coptic}', "");
Expect(1, 11391, '\p{^Is_Blk=coptic}', "");
Expect(1, 11391, '\P{Is_Blk=coptic}', "");
Expect(0, 11391, '\P{^Is_Blk=coptic}', "");
Expect(1, 11519, '\p{Is_Blk=	Coptic}', "");
Expect(0, 11519, '\p{^Is_Blk=	Coptic}', "");
Expect(0, 11519, '\P{Is_Blk=	Coptic}', "");
Expect(1, 11519, '\P{^Is_Blk=	Coptic}', "");
Expect(0, 11391, '\p{Is_Blk=	Coptic}', "");
Expect(1, 11391, '\p{^Is_Blk=	Coptic}', "");
Expect(1, 11391, '\P{Is_Blk=	Coptic}', "");
Expect(0, 11391, '\P{^Is_Blk=	Coptic}', "");
Error('\p{Block=_-SUPPLEMENTAL ARROWS:=B}');
Error('\P{Block=_-SUPPLEMENTAL ARROWS:=B}');
Expect(1, 10623, '\p{Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Block=Supplementalarrows	B}', "");
Expect(0, 10623, '\p{^Block=Supplementalarrows	B}', "");
Expect(0, 10623, '\P{Block=Supplementalarrows	B}', "");
Expect(1, 10623, '\P{^Block=Supplementalarrows	B}', "");
Expect(0, 10495, '\p{Block=Supplementalarrows	B}', "");
Expect(1, 10495, '\p{^Block=Supplementalarrows	B}', "");
Expect(1, 10495, '\P{Block=Supplementalarrows	B}', "");
Expect(0, 10495, '\P{^Block=Supplementalarrows	B}', "");
Error('\p{Blk=-:=Supplemental ARROWSB}');
Error('\P{Blk=-:=Supplemental ARROWSB}');
Expect(1, 10623, '\p{Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(0, 10623, '\p{^Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(0, 10623, '\P{Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(1, 10623, '\P{^Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(0, 10495, '\p{Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(1, 10495, '\p{^Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(1, 10495, '\P{Blk= SUPPLEMENTAL_Arrows	B}', "");
Expect(0, 10495, '\P{^Blk= SUPPLEMENTAL_Arrows	B}', "");
Error('\p{Is_Block=_SUPPLEMENTAL	Arrows:=B}');
Error('\P{Is_Block=_SUPPLEMENTAL	Arrows:=B}');
Expect(1, 10623, '\p{Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Block= SupplementalArrows B}', "");
Expect(0, 10623, '\p{^Is_Block= SupplementalArrows B}', "");
Expect(0, 10623, '\P{Is_Block= SupplementalArrows B}', "");
Expect(1, 10623, '\P{^Is_Block= SupplementalArrows B}', "");
Expect(0, 10495, '\p{Is_Block= SupplementalArrows B}', "");
Expect(1, 10495, '\p{^Is_Block= SupplementalArrows B}', "");
Expect(1, 10495, '\P{Is_Block= SupplementalArrows B}', "");
Expect(0, 10495, '\P{^Is_Block= SupplementalArrows B}', "");
Error('\p{Is_Blk=	SUPPLEMENTAL:=arrowsB}');
Error('\P{Is_Blk=	SUPPLEMENTAL:=arrowsB}');
Expect(1, 10623, '\p{Is_Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Blk=_-Supplementalarrows-B}', "");
Expect(0, 10623, '\p{^Is_Blk=_-Supplementalarrows-B}', "");
Expect(0, 10623, '\P{Is_Blk=_-Supplementalarrows-B}', "");
Expect(1, 10623, '\P{^Is_Blk=_-Supplementalarrows-B}', "");
Expect(0, 10495, '\p{Is_Blk=_-Supplementalarrows-B}', "");
Expect(1, 10495, '\p{^Is_Blk=_-Supplementalarrows-B}', "");
Expect(1, 10495, '\P{Is_Blk=_-Supplementalarrows-B}', "");
Expect(0, 10495, '\P{^Is_Blk=_-Supplementalarrows-B}', "");
Error('\p{Block=-:=Tibetan}');
Error('\P{Block=-:=Tibetan}');
Expect(1, 4095, '\p{Block=tibetan}', "");
Expect(0, 4095, '\p{^Block=tibetan}', "");
Expect(0, 4095, '\P{Block=tibetan}', "");
Expect(1, 4095, '\P{^Block=tibetan}', "");
Expect(0, 3839, '\p{Block=tibetan}', "");
Expect(1, 3839, '\p{^Block=tibetan}', "");
Expect(1, 3839, '\P{Block=tibetan}', "");
Expect(0, 3839, '\P{^Block=tibetan}', "");
Expect(1, 4095, '\p{Block=--TIBETAN}', "");
Expect(0, 4095, '\p{^Block=--TIBETAN}', "");
Expect(0, 4095, '\P{Block=--TIBETAN}', "");
Expect(1, 4095, '\P{^Block=--TIBETAN}', "");
Expect(0, 3839, '\p{Block=--TIBETAN}', "");
Expect(1, 3839, '\p{^Block=--TIBETAN}', "");
Expect(1, 3839, '\P{Block=--TIBETAN}', "");
Expect(0, 3839, '\P{^Block=--TIBETAN}', "");
Error('\p{Blk=_tibetan:=}');
Error('\P{Blk=_tibetan:=}');
Expect(1, 4095, '\p{Blk=tibetan}', "");
Expect(0, 4095, '\p{^Blk=tibetan}', "");
Expect(0, 4095, '\P{Blk=tibetan}', "");
Expect(1, 4095, '\P{^Blk=tibetan}', "");
Expect(0, 3839, '\p{Blk=tibetan}', "");
Expect(1, 3839, '\p{^Blk=tibetan}', "");
Expect(1, 3839, '\P{Blk=tibetan}', "");
Expect(0, 3839, '\P{^Blk=tibetan}', "");
Expect(1, 4095, '\p{Blk=_Tibetan}', "");
Expect(0, 4095, '\p{^Blk=_Tibetan}', "");
Expect(0, 4095, '\P{Blk=_Tibetan}', "");
Expect(1, 4095, '\P{^Blk=_Tibetan}', "");
Expect(0, 3839, '\p{Blk=_Tibetan}', "");
Expect(1, 3839, '\p{^Blk=_Tibetan}', "");
Expect(1, 3839, '\P{Blk=_Tibetan}', "");
Expect(0, 3839, '\P{^Blk=_Tibetan}', "");
Error('\p{Is_Block:	tibetan/a/}');
Error('\P{Is_Block:	tibetan/a/}');
Expect(1, 4095, '\p{Is_Block=tibetan}', "");
Expect(0, 4095, '\p{^Is_Block=tibetan}', "");
Expect(0, 4095, '\P{Is_Block=tibetan}', "");
Expect(1, 4095, '\P{^Is_Block=tibetan}', "");
Expect(0, 3839, '\p{Is_Block=tibetan}', "");
Expect(1, 3839, '\p{^Is_Block=tibetan}', "");
Expect(1, 3839, '\P{Is_Block=tibetan}', "");
Expect(0, 3839, '\P{^Is_Block=tibetan}', "");
Expect(1, 4095, '\p{Is_Block= 	TIBETAN}', "");
Expect(0, 4095, '\p{^Is_Block= 	TIBETAN}', "");
Expect(0, 4095, '\P{Is_Block= 	TIBETAN}', "");
Expect(1, 4095, '\P{^Is_Block= 	TIBETAN}', "");
Expect(0, 3839, '\p{Is_Block= 	TIBETAN}', "");
Expect(1, 3839, '\p{^Is_Block= 	TIBETAN}', "");
Expect(1, 3839, '\P{Is_Block= 	TIBETAN}', "");
Expect(0, 3839, '\P{^Is_Block= 	TIBETAN}', "");
Error('\p{Is_Blk=:=_-TIBETAN}');
Error('\P{Is_Blk=:=_-TIBETAN}');
Expect(1, 4095, '\p{Is_Blk=tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk=tibetan}', "");
Expect(0, 4095, '\P{Is_Blk=tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk=tibetan}', "");
Expect(0, 3839, '\p{Is_Blk=tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk=tibetan}', "");
Expect(1, 3839, '\P{Is_Blk=tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk=tibetan}', "");
Expect(1, 4095, '\p{Is_Blk=--tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk=--tibetan}', "");
Expect(0, 4095, '\P{Is_Blk=--tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk=--tibetan}', "");
Expect(0, 3839, '\p{Is_Blk=--tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk=--tibetan}', "");
Expect(1, 3839, '\P{Is_Blk=--tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk=--tibetan}', "");
Error('\p{Block=-:=domino Tiles}');
Error('\P{Block=-:=domino Tiles}');
Expect(1, 127135, '\p{Block=dominotiles}', "");
Expect(0, 127135, '\p{^Block=dominotiles}', "");
Expect(0, 127135, '\P{Block=dominotiles}', "");
Expect(1, 127135, '\P{^Block=dominotiles}', "");
Expect(0, 127023, '\p{Block=dominotiles}', "");
Expect(1, 127023, '\p{^Block=dominotiles}', "");
Expect(1, 127023, '\P{Block=dominotiles}', "");
Expect(0, 127023, '\P{^Block=dominotiles}', "");
Expect(1, 127135, '\p{Block=		domino-Tiles}', "");
Expect(0, 127135, '\p{^Block=		domino-Tiles}', "");
Expect(0, 127135, '\P{Block=		domino-Tiles}', "");
Expect(1, 127135, '\P{^Block=		domino-Tiles}', "");
Expect(0, 127023, '\p{Block=		domino-Tiles}', "");
Expect(1, 127023, '\p{^Block=		domino-Tiles}', "");
Expect(1, 127023, '\P{Block=		domino-Tiles}', "");
Expect(0, 127023, '\P{^Block=		domino-Tiles}', "");
Error('\p{Blk:/a/-Domino	Tiles}');
Error('\P{Blk:/a/-Domino	Tiles}');
Expect(1, 127135, '\p{Blk:	dominotiles}', "");
Expect(0, 127135, '\p{^Blk:	dominotiles}', "");
Expect(0, 127135, '\P{Blk:	dominotiles}', "");
Expect(1, 127135, '\P{^Blk:	dominotiles}', "");
Expect(0, 127023, '\p{Blk:	dominotiles}', "");
Expect(1, 127023, '\p{^Blk:	dominotiles}', "");
Expect(1, 127023, '\P{Blk:	dominotiles}', "");
Expect(0, 127023, '\P{^Blk:	dominotiles}', "");
Expect(1, 127135, '\p{Blk=_	DOMINO_Tiles}', "");
Expect(0, 127135, '\p{^Blk=_	DOMINO_Tiles}', "");
Expect(0, 127135, '\P{Blk=_	DOMINO_Tiles}', "");
Expect(1, 127135, '\P{^Blk=_	DOMINO_Tiles}', "");
Expect(0, 127023, '\p{Blk=_	DOMINO_Tiles}', "");
Expect(1, 127023, '\p{^Blk=_	DOMINO_Tiles}', "");
Expect(1, 127023, '\P{Blk=_	DOMINO_Tiles}', "");
Expect(0, 127023, '\P{^Blk=_	DOMINO_Tiles}', "");
Error('\p{Is_Block=	Domino:=Tiles}');
Error('\P{Is_Block=	Domino:=Tiles}');
Expect(1, 127135, '\p{Is_Block=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Block=dominotiles}', "");
Expect(0, 127135, '\P{Is_Block=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Block=dominotiles}', "");
Expect(0, 127023, '\p{Is_Block=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Block=dominotiles}', "");
Expect(1, 127023, '\P{Is_Block=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Block=dominotiles}', "");
Expect(1, 127135, '\p{Is_Block:	 domino_TILES}', "");
Expect(0, 127135, '\p{^Is_Block:	 domino_TILES}', "");
Expect(0, 127135, '\P{Is_Block:	 domino_TILES}', "");
Expect(1, 127135, '\P{^Is_Block:	 domino_TILES}', "");
Expect(0, 127023, '\p{Is_Block:	 domino_TILES}', "");
Expect(1, 127023, '\p{^Is_Block:	 domino_TILES}', "");
Expect(1, 127023, '\P{Is_Block:	 domino_TILES}', "");
Expect(0, 127023, '\P{^Is_Block:	 domino_TILES}', "");
Error('\p{Is_Blk=/a/ domino TILES}');
Error('\P{Is_Blk=/a/ domino TILES}');
Expect(1, 127135, '\p{Is_Blk=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Blk=dominotiles}', "");
Expect(0, 127135, '\P{Is_Blk=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Blk=dominotiles}', "");
Expect(0, 127023, '\p{Is_Blk=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Blk=dominotiles}', "");
Expect(1, 127023, '\P{Is_Blk=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Blk=dominotiles}', "");
Expect(1, 127135, '\p{Is_Blk=	Domino	Tiles}', "");
Expect(0, 127135, '\p{^Is_Blk=	Domino	Tiles}', "");
Expect(0, 127135, '\P{Is_Blk=	Domino	Tiles}', "");
Expect(1, 127135, '\P{^Is_Blk=	Domino	Tiles}', "");
Expect(0, 127023, '\p{Is_Blk=	Domino	Tiles}', "");
Expect(1, 127023, '\p{^Is_Blk=	Domino	Tiles}', "");
Expect(1, 127023, '\P{Is_Blk=	Domino	Tiles}', "");
Expect(0, 127023, '\P{^Is_Blk=	Domino	Tiles}', "");
Error('\p{Block=/a/CJK-Symbols And	punctuation}');
Error('\P{Block=/a/CJK-Symbols And	punctuation}');
Expect(1, 12351, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(0, 12351, '\p{^Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(0, 12351, '\P{Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(1, 12351, '\P{^Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(0, 12287, '\p{Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(1, 12287, '\p{^Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(1, 12287, '\P{Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Expect(0, 12287, '\P{^Block:	CJK_SYMBOLSAND-PUNCTUATION}', "");
Error('\p{Blk=	_CJK SYMBOLS and/a/Punctuation}');
Error('\P{Blk=	_CJK SYMBOLS and/a/Punctuation}');
Expect(1, 12351, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Blk=-_CJK_symbols Andpunctuation}', "");
Expect(0, 12351, '\p{^Blk=-_CJK_symbols Andpunctuation}', "");
Expect(0, 12351, '\P{Blk=-_CJK_symbols Andpunctuation}', "");
Expect(1, 12351, '\P{^Blk=-_CJK_symbols Andpunctuation}', "");
Expect(0, 12287, '\p{Blk=-_CJK_symbols Andpunctuation}', "");
Expect(1, 12287, '\p{^Blk=-_CJK_symbols Andpunctuation}', "");
Expect(1, 12287, '\P{Blk=-_CJK_symbols Andpunctuation}', "");
Expect(0, 12287, '\P{^Blk=-_CJK_symbols Andpunctuation}', "");
Error('\p{Is_Block=-	cjk_Symbols/a/AND	punctuation}');
Error('\P{Is_Block=-	cjk_Symbols/a/AND	punctuation}');
Expect(1, 12351, '\p{Is_Block:cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Block:cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Block:cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Block:cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Block:cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Block:cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Block:cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Block:cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Block=		CJK-symbols	And punctuation}', "");
Expect(0, 12351, '\p{^Is_Block=		CJK-symbols	And punctuation}', "");
Expect(0, 12351, '\P{Is_Block=		CJK-symbols	And punctuation}', "");
Expect(1, 12351, '\P{^Is_Block=		CJK-symbols	And punctuation}', "");
Expect(0, 12287, '\p{Is_Block=		CJK-symbols	And punctuation}', "");
Expect(1, 12287, '\p{^Is_Block=		CJK-symbols	And punctuation}', "");
Expect(1, 12287, '\P{Is_Block=		CJK-symbols	And punctuation}', "");
Expect(0, 12287, '\P{^Is_Block=		CJK-symbols	And punctuation}', "");
Error('\p{Is_Blk:   -/a/CJK-symbolsANDpunctuation}');
Error('\P{Is_Blk:   -/a/CJK-symbolsANDpunctuation}');
Expect(1, 12351, '\p{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(0, 12351, '\p{^Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(0, 12351, '\P{Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(1, 12351, '\P{^Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(0, 12287, '\p{Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(1, 12287, '\p{^Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(1, 12287, '\P{Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Expect(0, 12287, '\P{^Is_Blk=_CJKSymbolsand-PUNCTUATION}', "");
Error('\p{Block= hangulCOMPATIBILITY Jamo:=}');
Error('\P{Block= hangulCOMPATIBILITY Jamo:=}');
Expect(1, 12687, '\p{Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Block=_Hangul_compatibility jamo}', "");
Expect(0, 12687, '\p{^Block=_Hangul_compatibility jamo}', "");
Expect(0, 12687, '\P{Block=_Hangul_compatibility jamo}', "");
Expect(1, 12687, '\P{^Block=_Hangul_compatibility jamo}', "");
Expect(0, 12591, '\p{Block=_Hangul_compatibility jamo}', "");
Expect(1, 12591, '\p{^Block=_Hangul_compatibility jamo}', "");
Expect(1, 12591, '\P{Block=_Hangul_compatibility jamo}', "");
Expect(0, 12591, '\P{^Block=_Hangul_compatibility jamo}', "");
Error('\p{Blk=		Hangul:=compatibility jamo}');
Error('\P{Blk=		Hangul:=compatibility jamo}');
Expect(1, 12687, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Blk= -hangulCompatibility_JAMO}', "");
Expect(0, 12687, '\p{^Blk= -hangulCompatibility_JAMO}', "");
Expect(0, 12687, '\P{Blk= -hangulCompatibility_JAMO}', "");
Expect(1, 12687, '\P{^Blk= -hangulCompatibility_JAMO}', "");
Expect(0, 12591, '\p{Blk= -hangulCompatibility_JAMO}', "");
Expect(1, 12591, '\p{^Blk= -hangulCompatibility_JAMO}', "");
Expect(1, 12591, '\P{Blk= -hangulCompatibility_JAMO}', "");
Expect(0, 12591, '\P{^Blk= -hangulCompatibility_JAMO}', "");
Error('\p{Is_Block:   :=HANGUL_compatibility JAMO}');
Error('\P{Is_Block:   :=HANGUL_compatibility JAMO}');
Expect(1, 12687, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Block=_ HangulCompatibilityJamo}', "");
Expect(0, 12687, '\p{^Is_Block=_ HangulCompatibilityJamo}', "");
Expect(0, 12687, '\P{Is_Block=_ HangulCompatibilityJamo}', "");
Expect(1, 12687, '\P{^Is_Block=_ HangulCompatibilityJamo}', "");
Expect(0, 12591, '\p{Is_Block=_ HangulCompatibilityJamo}', "");
Expect(1, 12591, '\p{^Is_Block=_ HangulCompatibilityJamo}', "");
Expect(1, 12591, '\P{Is_Block=_ HangulCompatibilityJamo}', "");
Expect(0, 12591, '\P{^Is_Block=_ HangulCompatibilityJamo}', "");
Error('\p{Is_Blk=/a/Hangul-COMPATIBILITY	Jamo}');
Error('\P{Is_Blk=/a/Hangul-COMPATIBILITY	Jamo}');
Expect(1, 12687, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(0, 12687, '\p{^Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(0, 12687, '\P{Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(1, 12687, '\P{^Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(0, 12591, '\p{Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(1, 12591, '\p{^Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(1, 12591, '\P{Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Expect(0, 12591, '\P{^Is_Blk=__hangulCOMPATIBILITY	jamo}', "");
Error('\p{Block:-	old:=PERSIAN}');
Error('\P{Block:-	old:=PERSIAN}');
Expect(1, 66527, '\p{Block=oldpersian}', "");
Expect(0, 66527, '\p{^Block=oldpersian}', "");
Expect(0, 66527, '\P{Block=oldpersian}', "");
Expect(1, 66527, '\P{^Block=oldpersian}', "");
Expect(0, 66463, '\p{Block=oldpersian}', "");
Expect(1, 66463, '\p{^Block=oldpersian}', "");
Expect(1, 66463, '\P{Block=oldpersian}', "");
Expect(0, 66463, '\P{^Block=oldpersian}', "");
Expect(1, 66527, '\p{Block=-	OLD PERSIAN}', "");
Expect(0, 66527, '\p{^Block=-	OLD PERSIAN}', "");
Expect(0, 66527, '\P{Block=-	OLD PERSIAN}', "");
Expect(1, 66527, '\P{^Block=-	OLD PERSIAN}', "");
Expect(0, 66463, '\p{Block=-	OLD PERSIAN}', "");
Expect(1, 66463, '\p{^Block=-	OLD PERSIAN}', "");
Expect(1, 66463, '\P{Block=-	OLD PERSIAN}', "");
Expect(0, 66463, '\P{^Block=-	OLD PERSIAN}', "");
Error('\p{Blk:   /a/_OLD	Persian}');
Error('\P{Blk:   /a/_OLD	Persian}');
Expect(1, 66527, '\p{Blk=oldpersian}', "");
Expect(0, 66527, '\p{^Blk=oldpersian}', "");
Expect(0, 66527, '\P{Blk=oldpersian}', "");
Expect(1, 66527, '\P{^Blk=oldpersian}', "");
Expect(0, 66463, '\p{Blk=oldpersian}', "");
Expect(1, 66463, '\p{^Blk=oldpersian}', "");
Expect(1, 66463, '\P{Blk=oldpersian}', "");
Expect(0, 66463, '\P{^Blk=oldpersian}', "");
Expect(1, 66527, '\p{Blk=-Old-PERSIAN}', "");
Expect(0, 66527, '\p{^Blk=-Old-PERSIAN}', "");
Expect(0, 66527, '\P{Blk=-Old-PERSIAN}', "");
Expect(1, 66527, '\P{^Blk=-Old-PERSIAN}', "");
Expect(0, 66463, '\p{Blk=-Old-PERSIAN}', "");
Expect(1, 66463, '\p{^Blk=-Old-PERSIAN}', "");
Expect(1, 66463, '\P{Blk=-Old-PERSIAN}', "");
Expect(0, 66463, '\P{^Blk=-Old-PERSIAN}', "");
Error('\p{Is_Block=old-persian/a/}');
Error('\P{Is_Block=old-persian/a/}');
Expect(1, 66527, '\p{Is_Block=oldpersian}', "");
Expect(0, 66527, '\p{^Is_Block=oldpersian}', "");
Expect(0, 66527, '\P{Is_Block=oldpersian}', "");
Expect(1, 66527, '\P{^Is_Block=oldpersian}', "");
Expect(0, 66463, '\p{Is_Block=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Block=oldpersian}', "");
Expect(1, 66463, '\P{Is_Block=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Block=oldpersian}', "");
Expect(1, 66527, '\p{Is_Block=-Old Persian}', "");
Expect(0, 66527, '\p{^Is_Block=-Old Persian}', "");
Expect(0, 66527, '\P{Is_Block=-Old Persian}', "");
Expect(1, 66527, '\P{^Is_Block=-Old Persian}', "");
Expect(0, 66463, '\p{Is_Block=-Old Persian}', "");
Expect(1, 66463, '\p{^Is_Block=-Old Persian}', "");
Expect(1, 66463, '\P{Is_Block=-Old Persian}', "");
Expect(0, 66463, '\P{^Is_Block=-Old Persian}', "");
Error('\p{Is_Blk= :=Old-Persian}');
Error('\P{Is_Blk= :=Old-Persian}');
Expect(1, 66527, '\p{Is_Blk:oldpersian}', "");
Expect(0, 66527, '\p{^Is_Blk:oldpersian}', "");
Expect(0, 66527, '\P{Is_Blk:oldpersian}', "");
Expect(1, 66527, '\P{^Is_Blk:oldpersian}', "");
Expect(0, 66463, '\p{Is_Blk:oldpersian}', "");
Expect(1, 66463, '\p{^Is_Blk:oldpersian}', "");
Expect(1, 66463, '\P{Is_Blk:oldpersian}', "");
Expect(0, 66463, '\P{^Is_Blk:oldpersian}', "");
Expect(1, 66527, '\p{Is_Blk= Oldpersian}', "");
Expect(0, 66527, '\p{^Is_Blk= Oldpersian}', "");
Expect(0, 66527, '\P{Is_Blk= Oldpersian}', "");
Expect(1, 66527, '\P{^Is_Blk= Oldpersian}', "");
Expect(0, 66463, '\p{Is_Blk= Oldpersian}', "");
Expect(1, 66463, '\p{^Is_Blk= Oldpersian}', "");
Expect(1, 66463, '\P{Is_Blk= Oldpersian}', "");
Expect(0, 66463, '\P{^Is_Blk= Oldpersian}', "");
Error('\p{Block=Modifier_Tone_Letters/a/}');
Error('\P{Block=Modifier_Tone_Letters/a/}');
Expect(1, 42783, '\p{Block=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Block=modifiertoneletters}', "");
Expect(0, 42783, '\P{Block=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Block=modifiertoneletters}', "");
Expect(0, 42751, '\p{Block=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Block=modifiertoneletters}', "");
Expect(1, 42751, '\P{Block=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Block=modifiertoneletters}', "");
Expect(1, 42783, '\p{Block=__Modifier Tone_Letters}', "");
Expect(0, 42783, '\p{^Block=__Modifier Tone_Letters}', "");
Expect(0, 42783, '\P{Block=__Modifier Tone_Letters}', "");
Expect(1, 42783, '\P{^Block=__Modifier Tone_Letters}', "");
Expect(0, 42751, '\p{Block=__Modifier Tone_Letters}', "");
Expect(1, 42751, '\p{^Block=__Modifier Tone_Letters}', "");
Expect(1, 42751, '\P{Block=__Modifier Tone_Letters}', "");
Expect(0, 42751, '\P{^Block=__Modifier Tone_Letters}', "");
Error('\p{Blk=MODIFIER-Tone/a/letters}');
Error('\P{Blk=MODIFIER-Tone/a/letters}');
Expect(1, 42783, '\p{Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Blk= -MODIFIERTONE	letters}', "");
Expect(0, 42783, '\p{^Blk= -MODIFIERTONE	letters}', "");
Expect(0, 42783, '\P{Blk= -MODIFIERTONE	letters}', "");
Expect(1, 42783, '\P{^Blk= -MODIFIERTONE	letters}', "");
Expect(0, 42751, '\p{Blk= -MODIFIERTONE	letters}', "");
Expect(1, 42751, '\p{^Blk= -MODIFIERTONE	letters}', "");
Expect(1, 42751, '\P{Blk= -MODIFIERTONE	letters}', "");
Expect(0, 42751, '\P{^Blk= -MODIFIERTONE	letters}', "");
Error('\p{Is_Block= -Modifier TONE_Letters:=}');
Error('\P{Is_Block= -Modifier TONE_Letters:=}');
Expect(1, 42783, '\p{Is_Block=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Block=modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Block=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Block=modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Block=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Block=modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Block=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Block=modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(0, 42783, '\p{^Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(0, 42783, '\P{Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(1, 42783, '\P{^Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(0, 42751, '\p{Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(1, 42751, '\p{^Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(1, 42751, '\P{Is_Block=	_modifier	TONE	LETTERS}', "");
Expect(0, 42751, '\P{^Is_Block=	_modifier	TONE	LETTERS}', "");
Error('\p{Is_Blk=_-MODIFIER	tone	letters/a/}');
Error('\P{Is_Blk=_-MODIFIER	tone	letters/a/}');
Expect(1, 42783, '\p{Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Blk=-	modifier-Tone letters}', "");
Expect(0, 42783, '\p{^Is_Blk=-	modifier-Tone letters}', "");
Expect(0, 42783, '\P{Is_Blk=-	modifier-Tone letters}', "");
Expect(1, 42783, '\P{^Is_Blk=-	modifier-Tone letters}', "");
Expect(0, 42751, '\p{Is_Blk=-	modifier-Tone letters}', "");
Expect(1, 42751, '\p{^Is_Blk=-	modifier-Tone letters}', "");
Expect(1, 42751, '\P{Is_Blk=-	modifier-Tone letters}', "");
Expect(0, 42751, '\P{^Is_Blk=-	modifier-Tone letters}', "");
Error('\p{Block= :=Ethiopic-SUPPLEMENT}');
Error('\P{Block= :=Ethiopic-SUPPLEMENT}');
Expect(1, 5023, '\p{Block=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Block=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Block=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Block=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Block=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Block=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Block=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Block=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Block=	-ethiopic Supplement}', "");
Expect(0, 5023, '\p{^Block=	-ethiopic Supplement}', "");
Expect(0, 5023, '\P{Block=	-ethiopic Supplement}', "");
Expect(1, 5023, '\P{^Block=	-ethiopic Supplement}', "");
Expect(0, 4991, '\p{Block=	-ethiopic Supplement}', "");
Expect(1, 4991, '\p{^Block=	-ethiopic Supplement}', "");
Expect(1, 4991, '\P{Block=	-ethiopic Supplement}', "");
Expect(0, 4991, '\P{^Block=	-ethiopic Supplement}', "");
Error('\p{Blk=__ethiopicSupplement:=}');
Error('\P{Blk=__ethiopicSupplement:=}');
Expect(1, 5023, '\p{Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Blk=-	Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^Blk=-	Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{Blk=-	Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^Blk=-	Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{Blk=-	Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^Blk=-	Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{Blk=-	Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^Blk=-	Ethiopic	Supplement}', "");
Error('\p{Is_Block=	-Ethiopic Supplement/a/}');
Error('\P{Is_Block=	-Ethiopic Supplement/a/}');
Expect(1, 5023, '\p{Is_Block=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Block=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Block=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Block=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Block=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Block=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Block=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Block=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(0, 5023, '\p{^Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(0, 5023, '\P{Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(1, 5023, '\P{^Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(0, 4991, '\p{Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(1, 4991, '\p{^Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(1, 4991, '\P{Is_Block=	Ethiopic SUPPLEMENT}', "");
Expect(0, 4991, '\P{^Is_Block=	Ethiopic SUPPLEMENT}', "");
Error('\p{Is_Blk= -Ethiopic/a/Supplement}');
Error('\P{Is_Blk= -Ethiopic/a/Supplement}');
Expect(1, 5023, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Blk= 	Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^Is_Blk= 	Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{Is_Blk= 	Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^Is_Blk= 	Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{Is_Blk= 	Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^Is_Blk= 	Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{Is_Blk= 	Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^Is_Blk= 	Ethiopic	Supplement}', "");
Error('\p{Block= :=linear-B SYLLABARY}');
Error('\P{Block= :=linear-B SYLLABARY}');
Expect(1, 65663, '\p{Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Block=  Linear_B_syllabary}', "");
Expect(0, 65663, '\p{^Block=  Linear_B_syllabary}', "");
Expect(0, 65663, '\P{Block=  Linear_B_syllabary}', "");
Expect(1, 65663, '\P{^Block=  Linear_B_syllabary}', "");
Expect(0, 1, '\p{Block=  Linear_B_syllabary}', "");
Expect(1, 1, '\p{^Block=  Linear_B_syllabary}', "");
Expect(1, 1, '\P{Block=  Linear_B_syllabary}', "");
Expect(0, 1, '\P{^Block=  Linear_B_syllabary}', "");
Error('\p{Blk=:=_-linear_B	SYLLABARY}');
Error('\P{Blk=:=_-linear_B	SYLLABARY}');
Expect(1, 65663, '\p{Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Blk=--Linear B_SYLLABARY}', "");
Expect(0, 65663, '\p{^Blk=--Linear B_SYLLABARY}', "");
Expect(0, 65663, '\P{Blk=--Linear B_SYLLABARY}', "");
Expect(1, 65663, '\P{^Blk=--Linear B_SYLLABARY}', "");
Expect(0, 1, '\p{Blk=--Linear B_SYLLABARY}', "");
Expect(1, 1, '\p{^Blk=--Linear B_SYLLABARY}', "");
Expect(1, 1, '\P{Blk=--Linear B_SYLLABARY}', "");
Expect(0, 1, '\P{^Blk=--Linear B_SYLLABARY}', "");
Error('\p{Is_Block=:=_	LinearbSyllabary}');
Error('\P{Is_Block=:=_	LinearbSyllabary}');
Expect(1, 65663, '\p{Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Block= -linear_B Syllabary}', "");
Expect(0, 65663, '\p{^Is_Block= -linear_B Syllabary}', "");
Expect(0, 65663, '\P{Is_Block= -linear_B Syllabary}', "");
Expect(1, 65663, '\P{^Is_Block= -linear_B Syllabary}', "");
Expect(0, 1, '\p{Is_Block= -linear_B Syllabary}', "");
Expect(1, 1, '\p{^Is_Block= -linear_B Syllabary}', "");
Expect(1, 1, '\P{Is_Block= -linear_B Syllabary}', "");
Expect(0, 1, '\P{^Is_Block= -linear_B Syllabary}', "");
Error('\p{Is_Blk=-:=Linear-b_Syllabary}');
Error('\P{Is_Blk=-:=Linear-b_Syllabary}');
Expect(1, 65663, '\p{Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Blk= Linear B_syllabary}', "");
Expect(0, 65663, '\p{^Is_Blk= Linear B_syllabary}', "");
Expect(0, 65663, '\P{Is_Blk= Linear B_syllabary}', "");
Expect(1, 65663, '\P{^Is_Blk= Linear B_syllabary}', "");
Expect(0, 1, '\p{Is_Blk= Linear B_syllabary}', "");
Expect(1, 1, '\p{^Is_Blk= Linear B_syllabary}', "");
Expect(1, 1, '\P{Is_Blk= Linear B_syllabary}', "");
Expect(0, 1, '\P{^Is_Blk= Linear B_syllabary}', "");
Error('\p{Block= -Enclosed CJK-letters	and:=Months}');
Error('\P{Block= -Enclosed CJK-letters	and:=Months}');
Expect(1, 13055, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Block=__enclosedcjk-Letters-and-Months}', "");
Expect(0, 13055, '\p{^Block=__enclosedcjk-Letters-and-Months}', "");
Expect(0, 13055, '\P{Block=__enclosedcjk-Letters-and-Months}', "");
Expect(1, 13055, '\P{^Block=__enclosedcjk-Letters-and-Months}', "");
Expect(0, 12799, '\p{Block=__enclosedcjk-Letters-and-Months}', "");
Expect(1, 12799, '\p{^Block=__enclosedcjk-Letters-and-Months}', "");
Expect(1, 12799, '\P{Block=__enclosedcjk-Letters-and-Months}', "");
Expect(0, 12799, '\P{^Block=__enclosedcjk-Letters-and-Months}', "");
Error('\p{Blk=  enclosedcjk Letters:=andMonths}');
Error('\P{Blk=  enclosedcjk Letters:=andMonths}');
Expect(1, 13055, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(0, 13055, '\p{^Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(0, 13055, '\P{Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(1, 13055, '\P{^Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(0, 12799, '\p{Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(1, 12799, '\p{^Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(1, 12799, '\P{Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Expect(0, 12799, '\P{^Blk:	 Enclosed CJK	LETTERS And-Months}', "");
Error('\p{Is_Block=_/a/EnclosedcjkLetters AND	months}');
Error('\P{Is_Block=_/a/EnclosedcjkLetters AND	months}');
Expect(1, 13055, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(0, 13055, '\p{^Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(0, 13055, '\P{Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(1, 13055, '\P{^Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(0, 12799, '\p{Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(1, 12799, '\p{^Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(1, 12799, '\P{Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Expect(0, 12799, '\P{^Is_Block=__enclosed CJK-letters	AndMONTHS}', "");
Error('\p{Is_Blk=-ENCLOSED cjkLetters:=ANDMonths}');
Error('\P{Is_Blk=-ENCLOSED cjkLetters:=ANDMonths}');
Expect(1, 13055, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(0, 13055, '\p{^Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(0, 13055, '\P{Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(1, 13055, '\P{^Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(0, 12799, '\p{Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(1, 12799, '\p{^Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(1, 12799, '\P{Is_Blk=-Enclosed	CJKLetters And	months}', "");
Expect(0, 12799, '\P{^Is_Blk=-Enclosed	CJKLetters And	months}', "");
Error('\p{Block= /a/Combining_Diacritical_Marks_supplement}');
Error('\P{Block= /a/Combining_Diacritical_Marks_supplement}');
Expect(1, 7679, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Block=	combining	diacritical marksSupplement}', "");
Expect(0, 7679, '\p{^Block=	combining	diacritical marksSupplement}', "");
Expect(0, 7679, '\P{Block=	combining	diacritical marksSupplement}', "");
Expect(1, 7679, '\P{^Block=	combining	diacritical marksSupplement}', "");
Expect(0, 7615, '\p{Block=	combining	diacritical marksSupplement}', "");
Expect(1, 7615, '\p{^Block=	combining	diacritical marksSupplement}', "");
Expect(1, 7615, '\P{Block=	combining	diacritical marksSupplement}', "");
Expect(0, 7615, '\P{^Block=	combining	diacritical marksSupplement}', "");
Error('\p{Blk=--COMBINING:=diacritical-MarksSupplement}');
Error('\P{Blk=--COMBINING:=diacritical-MarksSupplement}');
Expect(1, 7679, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(0, 7679, '\p{^Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(0, 7679, '\P{Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(1, 7679, '\P{^Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(0, 7615, '\p{Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(1, 7615, '\p{^Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(1, 7615, '\P{Blk=		Combining diacritical MARKS-Supplement}', "");
Expect(0, 7615, '\P{^Blk=		Combining diacritical MARKS-Supplement}', "");
Error('\p{Is_Block= Combining DIACRITICAL:=marks-Supplement}');
Error('\P{Is_Block= Combining DIACRITICAL:=marks-Supplement}');
Expect(1, 7679, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(0, 7679, '\p{^Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(0, 7679, '\P{Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(1, 7679, '\P{^Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(0, 7615, '\p{Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(1, 7615, '\p{^Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(1, 7615, '\P{Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Expect(0, 7615, '\P{^Is_Block= Combining-DIACRITICAL	Marks_Supplement}', "");
Error('\p{Is_Blk= /a/Combiningdiacritical marks	SUPPLEMENT}');
Error('\P{Is_Blk= /a/Combiningdiacritical marks	SUPPLEMENT}');
Expect(1, 7679, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(0, 7679, '\p{^Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(0, 7679, '\P{Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(1, 7679, '\P{^Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(0, 7615, '\p{Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(1, 7615, '\p{^Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(1, 7615, '\P{Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Expect(0, 7615, '\P{^Is_Blk=	_combining-DIACRITICALmarks_Supplement}', "");
Error('\p{Block=/a/	 BOPOMOFO}');
Error('\P{Block=/a/	 BOPOMOFO}');
Expect(1, 12591, '\p{Block=bopomofo}', "");
Expect(0, 12591, '\p{^Block=bopomofo}', "");
Expect(0, 12591, '\P{Block=bopomofo}', "");
Expect(1, 12591, '\P{^Block=bopomofo}', "");
Expect(0, 12543, '\p{Block=bopomofo}', "");
Expect(1, 12543, '\p{^Block=bopomofo}', "");
Expect(1, 12543, '\P{Block=bopomofo}', "");
Expect(0, 12543, '\P{^Block=bopomofo}', "");
Expect(1, 12591, '\p{Block=- Bopomofo}', "");
Expect(0, 12591, '\p{^Block=- Bopomofo}', "");
Expect(0, 12591, '\P{Block=- Bopomofo}', "");
Expect(1, 12591, '\P{^Block=- Bopomofo}', "");
Expect(0, 12543, '\p{Block=- Bopomofo}', "");
Expect(1, 12543, '\p{^Block=- Bopomofo}', "");
Expect(1, 12543, '\P{Block=- Bopomofo}', "");
Expect(0, 12543, '\P{^Block=- Bopomofo}', "");
Error('\p{Blk=	BOPOMOFO:=}');
Error('\P{Blk=	BOPOMOFO:=}');
Expect(1, 12591, '\p{Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Blk=bopomofo}', "");
Expect(0, 12591, '\P{Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Blk=bopomofo}', "");
Expect(0, 12543, '\p{Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Blk=bopomofo}', "");
Expect(1, 12543, '\P{Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Blk=bopomofo}', "");
Expect(1, 12591, '\p{Blk:   		BOPOMOFO}', "");
Expect(0, 12591, '\p{^Blk:   		BOPOMOFO}', "");
Expect(0, 12591, '\P{Blk:   		BOPOMOFO}', "");
Expect(1, 12591, '\P{^Blk:   		BOPOMOFO}', "");
Expect(0, 12543, '\p{Blk:   		BOPOMOFO}', "");
Expect(1, 12543, '\p{^Blk:   		BOPOMOFO}', "");
Expect(1, 12543, '\P{Blk:   		BOPOMOFO}', "");
Expect(0, 12543, '\P{^Blk:   		BOPOMOFO}', "");
Error('\p{Is_Block=/a/- BOPOMOFO}');
Error('\P{Is_Block=/a/- BOPOMOFO}');
Expect(1, 12591, '\p{Is_Block=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Block=bopomofo}', "");
Expect(0, 12591, '\P{Is_Block=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Block=bopomofo}', "");
Expect(0, 12543, '\p{Is_Block=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Block=bopomofo}', "");
Expect(1, 12543, '\P{Is_Block=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Block=bopomofo}', "");
Expect(1, 12591, '\p{Is_Block=_ BOPOMOFO}', "");
Expect(0, 12591, '\p{^Is_Block=_ BOPOMOFO}', "");
Expect(0, 12591, '\P{Is_Block=_ BOPOMOFO}', "");
Expect(1, 12591, '\P{^Is_Block=_ BOPOMOFO}', "");
Expect(0, 12543, '\p{Is_Block=_ BOPOMOFO}', "");
Expect(1, 12543, '\p{^Is_Block=_ BOPOMOFO}', "");
Expect(1, 12543, '\P{Is_Block=_ BOPOMOFO}', "");
Expect(0, 12543, '\P{^Is_Block=_ BOPOMOFO}', "");
Error('\p{Is_Blk: :=  bopomofo}');
Error('\P{Is_Blk: :=  bopomofo}');
Expect(1, 12591, '\p{Is_Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Blk=bopomofo}', "");
Expect(0, 12591, '\P{Is_Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Blk=bopomofo}', "");
Expect(0, 12543, '\p{Is_Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Blk=bopomofo}', "");
Expect(1, 12543, '\P{Is_Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Blk=bopomofo}', "");
Expect(1, 12591, '\p{Is_Blk=		Bopomofo}', "");
Expect(0, 12591, '\p{^Is_Blk=		Bopomofo}', "");
Expect(0, 12591, '\P{Is_Blk=		Bopomofo}', "");
Expect(1, 12591, '\P{^Is_Blk=		Bopomofo}', "");
Expect(0, 12543, '\p{Is_Blk=		Bopomofo}', "");
Expect(1, 12543, '\p{^Is_Blk=		Bopomofo}', "");
Expect(1, 12543, '\P{Is_Blk=		Bopomofo}', "");
Expect(0, 12543, '\P{^Is_Blk=		Bopomofo}', "");
Error('\p{Block=/a/ _MISCELLANEOUS-technical}');
Error('\P{Block=/a/ _MISCELLANEOUS-technical}');
Expect(1, 9215, '\p{Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Block= Miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\p{^Block= Miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\P{Block= Miscellaneous-TECHNICAL}', "");
Expect(1, 9215, '\P{^Block= Miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\p{Block= Miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\p{^Block= Miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\P{Block= Miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\P{^Block= Miscellaneous-TECHNICAL}', "");
Error('\p{Blk=_MISCELLANEOUS/a/Technical}');
Error('\P{Blk=_MISCELLANEOUS/a/Technical}');
Expect(1, 9215, '\p{Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Blk=MiscellaneousTechnical}', "");
Expect(0, 9215, '\p{^Blk=MiscellaneousTechnical}', "");
Expect(0, 9215, '\P{Blk=MiscellaneousTechnical}', "");
Expect(1, 9215, '\P{^Blk=MiscellaneousTechnical}', "");
Expect(0, 8959, '\p{Blk=MiscellaneousTechnical}', "");
Expect(1, 8959, '\p{^Blk=MiscellaneousTechnical}', "");
Expect(1, 8959, '\P{Blk=MiscellaneousTechnical}', "");
Expect(0, 8959, '\P{^Blk=MiscellaneousTechnical}', "");
Error('\p{Is_Block=/a/	Miscellaneous-Technical}');
Error('\P{Is_Block=/a/	Miscellaneous-Technical}');
Expect(1, 9215, '\p{Is_Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(0, 9215, '\p{^Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(0, 9215, '\P{Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(1, 9215, '\P{^Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(0, 8959, '\p{Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(1, 8959, '\p{^Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(1, 8959, '\P{Is_Block=_Miscellaneous TECHNICAL}', "");
Expect(0, 8959, '\P{^Is_Block=_Miscellaneous TECHNICAL}', "");
Error('\p{Is_Blk=_/a/MISCELLANEOUS Technical}');
Error('\P{Is_Blk=_/a/MISCELLANEOUS Technical}');
Expect(1, 9215, '\p{Is_Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(0, 9215, '\p{^Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(0, 9215, '\P{Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(1, 9215, '\P{^Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(0, 8959, '\p{Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(1, 8959, '\p{^Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(1, 8959, '\P{Is_Blk= _miscellaneous	TECHNICAL}', "");
Expect(0, 8959, '\P{^Is_Blk= _miscellaneous	TECHNICAL}', "");
Error('\p{Block=	_Osmanya/a/}');
Error('\P{Block=	_Osmanya/a/}');
Expect(1, 66735, '\p{Block=osmanya}', "");
Expect(0, 66735, '\p{^Block=osmanya}', "");
Expect(0, 66735, '\P{Block=osmanya}', "");
Expect(1, 66735, '\P{^Block=osmanya}', "");
Expect(0, 66687, '\p{Block=osmanya}', "");
Expect(1, 66687, '\p{^Block=osmanya}', "");
Expect(1, 66687, '\P{Block=osmanya}', "");
Expect(0, 66687, '\P{^Block=osmanya}', "");
Expect(1, 66735, '\p{Block=_	Osmanya}', "");
Expect(0, 66735, '\p{^Block=_	Osmanya}', "");
Expect(0, 66735, '\P{Block=_	Osmanya}', "");
Expect(1, 66735, '\P{^Block=_	Osmanya}', "");
Expect(0, 66687, '\p{Block=_	Osmanya}', "");
Expect(1, 66687, '\p{^Block=_	Osmanya}', "");
Expect(1, 66687, '\P{Block=_	Osmanya}', "");
Expect(0, 66687, '\P{^Block=_	Osmanya}', "");
Error('\p{Blk=-/a/OSMANYA}');
Error('\P{Blk=-/a/OSMANYA}');
Expect(1, 66735, '\p{Blk=osmanya}', "");
Expect(0, 66735, '\p{^Blk=osmanya}', "");
Expect(0, 66735, '\P{Blk=osmanya}', "");
Expect(1, 66735, '\P{^Blk=osmanya}', "");
Expect(0, 66687, '\p{Blk=osmanya}', "");
Expect(1, 66687, '\p{^Blk=osmanya}', "");
Expect(1, 66687, '\P{Blk=osmanya}', "");
Expect(0, 66687, '\P{^Blk=osmanya}', "");
Expect(1, 66735, '\p{Blk=	-OSMANYA}', "");
Expect(0, 66735, '\p{^Blk=	-OSMANYA}', "");
Expect(0, 66735, '\P{Blk=	-OSMANYA}', "");
Expect(1, 66735, '\P{^Blk=	-OSMANYA}', "");
Expect(0, 66687, '\p{Blk=	-OSMANYA}', "");
Expect(1, 66687, '\p{^Blk=	-OSMANYA}', "");
Expect(1, 66687, '\P{Blk=	-OSMANYA}', "");
Expect(0, 66687, '\P{^Blk=	-OSMANYA}', "");
Error('\p{Is_Block= :=OSMANYA}');
Error('\P{Is_Block= :=OSMANYA}');
Expect(1, 66735, '\p{Is_Block=osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=osmanya}', "");
Expect(0, 66735, '\P{Is_Block=osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=osmanya}', "");
Expect(0, 66687, '\p{Is_Block=osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=osmanya}', "");
Expect(1, 66687, '\P{Is_Block=osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=osmanya}', "");
Expect(1, 66735, '\p{Is_Block=  Osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=  Osmanya}', "");
Expect(0, 66735, '\P{Is_Block=  Osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=  Osmanya}', "");
Expect(0, 66687, '\p{Is_Block=  Osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=  Osmanya}', "");
Expect(1, 66687, '\P{Is_Block=  Osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=  Osmanya}', "");
Error('\p{Is_Blk=:=- osmanya}');
Error('\P{Is_Blk=:=- osmanya}');
Expect(1, 66735, '\p{Is_Blk=osmanya}', "");
Expect(0, 66735, '\p{^Is_Blk=osmanya}', "");
Expect(0, 66735, '\P{Is_Blk=osmanya}', "");
Expect(1, 66735, '\P{^Is_Blk=osmanya}', "");
Expect(0, 66687, '\p{Is_Blk=osmanya}', "");
Expect(1, 66687, '\p{^Is_Blk=osmanya}', "");
Expect(1, 66687, '\P{Is_Blk=osmanya}', "");
Expect(0, 66687, '\P{^Is_Blk=osmanya}', "");
Expect(1, 66735, '\p{Is_Blk=-OSMANYA}', "");
Expect(0, 66735, '\p{^Is_Blk=-OSMANYA}', "");
Expect(0, 66735, '\P{Is_Blk=-OSMANYA}', "");
Expect(1, 66735, '\P{^Is_Blk=-OSMANYA}', "");
Expect(0, 66687, '\p{Is_Blk=-OSMANYA}', "");
Expect(1, 66687, '\p{^Is_Blk=-OSMANYA}', "");
Expect(1, 66687, '\P{Is_Blk=-OSMANYA}', "");
Expect(0, 66687, '\P{^Is_Blk=-OSMANYA}', "");
Error('\p{Block=_ MAHJONG:=tiles}');
Error('\P{Block=_ MAHJONG:=tiles}');
Expect(1, 127023, '\p{Block=mahjongtiles}', "");
Expect(0, 127023, '\p{^Block=mahjongtiles}', "");
Expect(0, 127023, '\P{Block=mahjongtiles}', "");
Expect(1, 127023, '\P{^Block=mahjongtiles}', "");
Expect(0, 126975, '\p{Block=mahjongtiles}', "");
Expect(1, 126975, '\p{^Block=mahjongtiles}', "");
Expect(1, 126975, '\P{Block=mahjongtiles}', "");
Expect(0, 126975, '\P{^Block=mahjongtiles}', "");
Expect(1, 127023, '\p{Block=_-Mahjong	Tiles}', "");
Expect(0, 127023, '\p{^Block=_-Mahjong	Tiles}', "");
Expect(0, 127023, '\P{Block=_-Mahjong	Tiles}', "");
Expect(1, 127023, '\P{^Block=_-Mahjong	Tiles}', "");
Expect(0, 126975, '\p{Block=_-Mahjong	Tiles}', "");
Expect(1, 126975, '\p{^Block=_-Mahjong	Tiles}', "");
Expect(1, 126975, '\P{Block=_-Mahjong	Tiles}', "");
Expect(0, 126975, '\P{^Block=_-Mahjong	Tiles}', "");
Error('\p{Blk=_ Mahjong:=Tiles}');
Error('\P{Blk=_ Mahjong:=Tiles}');
Expect(1, 127023, '\p{Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Blk=_mahjong-Tiles}', "");
Expect(0, 127023, '\p{^Blk=_mahjong-Tiles}', "");
Expect(0, 127023, '\P{Blk=_mahjong-Tiles}', "");
Expect(1, 127023, '\P{^Blk=_mahjong-Tiles}', "");
Expect(0, 126975, '\p{Blk=_mahjong-Tiles}', "");
Expect(1, 126975, '\p{^Blk=_mahjong-Tiles}', "");
Expect(1, 126975, '\P{Blk=_mahjong-Tiles}', "");
Expect(0, 126975, '\P{^Blk=_mahjong-Tiles}', "");
Error('\p{Is_Block=/a/Mahjong	TILES}');
Error('\P{Is_Block=/a/Mahjong	TILES}');
Expect(1, 127023, '\p{Is_Block=mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Block=mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Block=mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Block=mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Block=mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Block=mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Block=mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Block=mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Block=_mahjong_tiles}', "");
Expect(0, 127023, '\p{^Is_Block=_mahjong_tiles}', "");
Expect(0, 127023, '\P{Is_Block=_mahjong_tiles}', "");
Expect(1, 127023, '\P{^Is_Block=_mahjong_tiles}', "");
Expect(0, 126975, '\p{Is_Block=_mahjong_tiles}', "");
Expect(1, 126975, '\p{^Is_Block=_mahjong_tiles}', "");
Expect(1, 126975, '\P{Is_Block=_mahjong_tiles}', "");
Expect(0, 126975, '\P{^Is_Block=_mahjong_tiles}', "");
Error('\p{Is_Blk:	/a/	Mahjong-TILES}');
Error('\P{Is_Blk:	/a/	Mahjong-TILES}');
Expect(1, 127023, '\p{Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Blk= _mahjong_TILES}', "");
Expect(0, 127023, '\p{^Is_Blk= _mahjong_TILES}', "");
Expect(0, 127023, '\P{Is_Blk= _mahjong_TILES}', "");
Expect(1, 127023, '\P{^Is_Blk= _mahjong_TILES}', "");
Expect(0, 126975, '\p{Is_Blk= _mahjong_TILES}', "");
Expect(1, 126975, '\p{^Is_Blk= _mahjong_TILES}', "");
Expect(1, 126975, '\P{Is_Blk= _mahjong_TILES}', "");
Expect(0, 126975, '\P{^Is_Blk= _mahjong_TILES}', "");
Error('\p{Block=		ARROWS/a/}');
Error('\P{Block=		ARROWS/a/}');
Expect(1, 8703, '\p{Block: arrows}', "");
Expect(0, 8703, '\p{^Block: arrows}', "");
Expect(0, 8703, '\P{Block: arrows}', "");
Expect(1, 8703, '\P{^Block: arrows}', "");
Expect(0, 8591, '\p{Block: arrows}', "");
Expect(1, 8591, '\p{^Block: arrows}', "");
Expect(1, 8591, '\P{Block: arrows}', "");
Expect(0, 8591, '\P{^Block: arrows}', "");
Expect(1, 8703, '\p{Block=	-Arrows}', "");
Expect(0, 8703, '\p{^Block=	-Arrows}', "");
Expect(0, 8703, '\P{Block=	-Arrows}', "");
Expect(1, 8703, '\P{^Block=	-Arrows}', "");
Expect(0, 8591, '\p{Block=	-Arrows}', "");
Expect(1, 8591, '\p{^Block=	-Arrows}', "");
Expect(1, 8591, '\P{Block=	-Arrows}', "");
Expect(0, 8591, '\P{^Block=	-Arrows}', "");
Error('\p{Blk=	_ARROWS/a/}');
Error('\P{Blk=	_ARROWS/a/}');
Expect(1, 8703, '\p{Blk=arrows}', "");
Expect(0, 8703, '\p{^Blk=arrows}', "");
Expect(0, 8703, '\P{Blk=arrows}', "");
Expect(1, 8703, '\P{^Blk=arrows}', "");
Expect(0, 8591, '\p{Blk=arrows}', "");
Expect(1, 8591, '\p{^Blk=arrows}', "");
Expect(1, 8591, '\P{Blk=arrows}', "");
Expect(0, 8591, '\P{^Blk=arrows}', "");
Expect(1, 8703, '\p{Blk= _arrows}', "");
Expect(0, 8703, '\p{^Blk= _arrows}', "");
Expect(0, 8703, '\P{Blk= _arrows}', "");
Expect(1, 8703, '\P{^Blk= _arrows}', "");
Expect(0, 8591, '\p{Blk= _arrows}', "");
Expect(1, 8591, '\p{^Blk= _arrows}', "");
Expect(1, 8591, '\P{Blk= _arrows}', "");
Expect(0, 8591, '\P{^Blk= _arrows}', "");
Error('\p{Is_Block=:=Arrows}');
Error('\P{Is_Block=:=Arrows}');
Expect(1, 8703, '\p{Is_Block=arrows}', "");
Expect(0, 8703, '\p{^Is_Block=arrows}', "");
Expect(0, 8703, '\P{Is_Block=arrows}', "");
Expect(1, 8703, '\P{^Is_Block=arrows}', "");
Expect(0, 8591, '\p{Is_Block=arrows}', "");
Expect(1, 8591, '\p{^Is_Block=arrows}', "");
Expect(1, 8591, '\P{Is_Block=arrows}', "");
Expect(0, 8591, '\P{^Is_Block=arrows}', "");
Expect(1, 8703, '\p{Is_Block=  Arrows}', "");
Expect(0, 8703, '\p{^Is_Block=  Arrows}', "");
Expect(0, 8703, '\P{Is_Block=  Arrows}', "");
Expect(1, 8703, '\P{^Is_Block=  Arrows}', "");
Expect(0, 8591, '\p{Is_Block=  Arrows}', "");
Expect(1, 8591, '\p{^Is_Block=  Arrows}', "");
Expect(1, 8591, '\P{Is_Block=  Arrows}', "");
Expect(0, 8591, '\P{^Is_Block=  Arrows}', "");
Error('\p{Is_Blk=:=	Arrows}');
Error('\P{Is_Blk=:=	Arrows}');
Expect(1, 8703, '\p{Is_Blk=arrows}', "");
Expect(0, 8703, '\p{^Is_Blk=arrows}', "");
Expect(0, 8703, '\P{Is_Blk=arrows}', "");
Expect(1, 8703, '\P{^Is_Blk=arrows}', "");
Expect(0, 8591, '\p{Is_Blk=arrows}', "");
Expect(1, 8591, '\p{^Is_Blk=arrows}', "");
Expect(1, 8591, '\P{Is_Blk=arrows}', "");
Expect(0, 8591, '\P{^Is_Blk=arrows}', "");
Expect(1, 8703, '\p{Is_Blk=--Arrows}', "");
Expect(0, 8703, '\p{^Is_Blk=--Arrows}', "");
Expect(0, 8703, '\P{Is_Blk=--Arrows}', "");
Expect(1, 8703, '\P{^Is_Blk=--Arrows}', "");
Expect(0, 8591, '\p{Is_Blk=--Arrows}', "");
Expect(1, 8591, '\p{^Is_Blk=--Arrows}', "");
Expect(1, 8591, '\P{Is_Blk=--Arrows}', "");
Expect(0, 8591, '\P{^Is_Blk=--Arrows}', "");
Error('\p{Block=		block/a/elements}');
Error('\P{Block=		block/a/elements}');
Expect(1, 9631, '\p{Block=blockelements}', "");
Expect(0, 9631, '\p{^Block=blockelements}', "");
Expect(0, 9631, '\P{Block=blockelements}', "");
Expect(1, 9631, '\P{^Block=blockelements}', "");
Expect(0, 9599, '\p{Block=blockelements}', "");
Expect(1, 9599, '\p{^Block=blockelements}', "");
Expect(1, 9599, '\P{Block=blockelements}', "");
Expect(0, 9599, '\P{^Block=blockelements}', "");
Expect(1, 9631, '\p{Block=	BLOCKElements}', "");
Expect(0, 9631, '\p{^Block=	BLOCKElements}', "");
Expect(0, 9631, '\P{Block=	BLOCKElements}', "");
Expect(1, 9631, '\P{^Block=	BLOCKElements}', "");
Expect(0, 9599, '\p{Block=	BLOCKElements}', "");
Expect(1, 9599, '\p{^Block=	BLOCKElements}', "");
Expect(1, 9599, '\P{Block=	BLOCKElements}', "");
Expect(0, 9599, '\P{^Block=	BLOCKElements}', "");
Error('\p{Blk=	:=block Elements}');
Error('\P{Blk=	:=block Elements}');
Expect(1, 9631, '\p{Blk=blockelements}', "");
Expect(0, 9631, '\p{^Blk=blockelements}', "");
Expect(0, 9631, '\P{Blk=blockelements}', "");
Expect(1, 9631, '\P{^Blk=blockelements}', "");
Expect(0, 9599, '\p{Blk=blockelements}', "");
Expect(1, 9599, '\p{^Blk=blockelements}', "");
Expect(1, 9599, '\P{Blk=blockelements}', "");
Expect(0, 9599, '\P{^Blk=blockelements}', "");
Expect(1, 9631, '\p{Blk:_ BlockELEMENTS}', "");
Expect(0, 9631, '\p{^Blk:_ BlockELEMENTS}', "");
Expect(0, 9631, '\P{Blk:_ BlockELEMENTS}', "");
Expect(1, 9631, '\P{^Blk:_ BlockELEMENTS}', "");
Expect(0, 9599, '\p{Blk:_ BlockELEMENTS}', "");
Expect(1, 9599, '\p{^Blk:_ BlockELEMENTS}', "");
Expect(1, 9599, '\P{Blk:_ BlockELEMENTS}', "");
Expect(0, 9599, '\P{^Blk:_ BlockELEMENTS}', "");
Error('\p{Is_Block:--BLOCK/a/elements}');
Error('\P{Is_Block:--BLOCK/a/elements}');
Expect(1, 9631, '\p{Is_Block:   blockelements}', "");
Expect(0, 9631, '\p{^Is_Block:   blockelements}', "");
Expect(0, 9631, '\P{Is_Block:   blockelements}', "");
Expect(1, 9631, '\P{^Is_Block:   blockelements}', "");
Expect(0, 9599, '\p{Is_Block:   blockelements}', "");
Expect(1, 9599, '\p{^Is_Block:   blockelements}', "");
Expect(1, 9599, '\P{Is_Block:   blockelements}', "");
Expect(0, 9599, '\P{^Is_Block:   blockelements}', "");
Expect(1, 9631, '\p{Is_Block=	-BLOCK-Elements}', "");
Expect(0, 9631, '\p{^Is_Block=	-BLOCK-Elements}', "");
Expect(0, 9631, '\P{Is_Block=	-BLOCK-Elements}', "");
Expect(1, 9631, '\P{^Is_Block=	-BLOCK-Elements}', "");
Expect(0, 9599, '\p{Is_Block=	-BLOCK-Elements}', "");
Expect(1, 9599, '\p{^Is_Block=	-BLOCK-Elements}', "");
Expect(1, 9599, '\P{Is_Block=	-BLOCK-Elements}', "");
Expect(0, 9599, '\P{^Is_Block=	-BLOCK-Elements}', "");
Error('\p{Is_Blk=		Block_ELEMENTS:=}');
Error('\P{Is_Blk=		Block_ELEMENTS:=}');
Expect(1, 9631, '\p{Is_Blk=blockelements}', "");
Expect(0, 9631, '\p{^Is_Blk=blockelements}', "");
Expect(0, 9631, '\P{Is_Blk=blockelements}', "");
Expect(1, 9631, '\P{^Is_Blk=blockelements}', "");
Expect(0, 9599, '\p{Is_Blk=blockelements}', "");
Expect(1, 9599, '\p{^Is_Blk=blockelements}', "");
Expect(1, 9599, '\P{Is_Blk=blockelements}', "");
Expect(0, 9599, '\P{^Is_Blk=blockelements}', "");
Expect(1, 9631, '\p{Is_Blk=_	BLOCK_Elements}', "");
Expect(0, 9631, '\p{^Is_Blk=_	BLOCK_Elements}', "");
Expect(0, 9631, '\P{Is_Blk=_	BLOCK_Elements}', "");
Expect(1, 9631, '\P{^Is_Blk=_	BLOCK_Elements}', "");
Expect(0, 9599, '\p{Is_Blk=_	BLOCK_Elements}', "");
Expect(1, 9599, '\p{^Is_Blk=_	BLOCK_Elements}', "");
Expect(1, 9599, '\P{Is_Blk=_	BLOCK_Elements}', "");
Expect(0, 9599, '\P{^Is_Blk=_	BLOCK_Elements}', "");
Error('\p{Block= _cjk Strokes:=}');
Error('\P{Block= _cjk Strokes:=}');
Expect(1, 12783, '\p{Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Block=_ CJK_strokes}', "");
Expect(0, 12783, '\p{^Block=_ CJK_strokes}', "");
Expect(0, 12783, '\P{Block=_ CJK_strokes}', "");
Expect(1, 12783, '\P{^Block=_ CJK_strokes}', "");
Expect(0, 12735, '\p{Block=_ CJK_strokes}', "");
Expect(1, 12735, '\p{^Block=_ CJK_strokes}', "");
Expect(1, 12735, '\P{Block=_ CJK_strokes}', "");
Expect(0, 12735, '\P{^Block=_ CJK_strokes}', "");
Error('\p{Blk=	/a/CJK_STROKES}');
Error('\P{Blk=	/a/CJK_STROKES}');
Expect(1, 12783, '\p{Blk: cjkstrokes}', "");
Expect(0, 12783, '\p{^Blk: cjkstrokes}', "");
Expect(0, 12783, '\P{Blk: cjkstrokes}', "");
Expect(1, 12783, '\P{^Blk: cjkstrokes}', "");
Expect(0, 12735, '\p{Blk: cjkstrokes}', "");
Expect(1, 12735, '\p{^Blk: cjkstrokes}', "");
Expect(1, 12735, '\P{Blk: cjkstrokes}', "");
Expect(0, 12735, '\P{^Blk: cjkstrokes}', "");
Expect(1, 12783, '\p{Blk= cjk-strokes}', "");
Expect(0, 12783, '\p{^Blk= cjk-strokes}', "");
Expect(0, 12783, '\P{Blk= cjk-strokes}', "");
Expect(1, 12783, '\P{^Blk= cjk-strokes}', "");
Expect(0, 12735, '\p{Blk= cjk-strokes}', "");
Expect(1, 12735, '\p{^Blk= cjk-strokes}', "");
Expect(1, 12735, '\P{Blk= cjk-strokes}', "");
Expect(0, 12735, '\P{^Blk= cjk-strokes}', "");
Error('\p{Is_Block:	CJK	strokes/a/}');
Error('\P{Is_Block:	CJK	strokes/a/}');
Expect(1, 12783, '\p{Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Block=		CJK	strokes}', "");
Expect(0, 12783, '\p{^Is_Block=		CJK	strokes}', "");
Expect(0, 12783, '\P{Is_Block=		CJK	strokes}', "");
Expect(1, 12783, '\P{^Is_Block=		CJK	strokes}', "");
Expect(0, 12735, '\p{Is_Block=		CJK	strokes}', "");
Expect(1, 12735, '\p{^Is_Block=		CJK	strokes}', "");
Expect(1, 12735, '\P{Is_Block=		CJK	strokes}', "");
Expect(0, 12735, '\P{^Is_Block=		CJK	strokes}', "");
Error('\p{Is_Blk=	:=cjk	Strokes}');
Error('\P{Is_Blk=	:=cjk	Strokes}');
Expect(1, 12783, '\p{Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Blk=_	CJK Strokes}', "");
Expect(0, 12783, '\p{^Is_Blk=_	CJK Strokes}', "");
Expect(0, 12783, '\P{Is_Blk=_	CJK Strokes}', "");
Expect(1, 12783, '\P{^Is_Blk=_	CJK Strokes}', "");
Expect(0, 12735, '\p{Is_Blk=_	CJK Strokes}', "");
Expect(1, 12735, '\p{^Is_Blk=_	CJK Strokes}', "");
Expect(1, 12735, '\P{Is_Blk=_	CJK Strokes}', "");
Expect(0, 12735, '\P{^Is_Blk=_	CJK Strokes}', "");
Error('\p{Block=	/a/no	Block}');
Error('\P{Block=	/a/no	Block}');
Expect(1, 2303, '\p{Block=noblock}', "");
Expect(0, 2303, '\p{^Block=noblock}', "");
Expect(0, 2303, '\P{Block=noblock}', "");
Expect(1, 2303, '\P{^Block=noblock}', "");
Expect(0, 2111, '\p{Block=noblock}', "");
Expect(1, 2111, '\p{^Block=noblock}', "");
Expect(1, 2111, '\P{Block=noblock}', "");
Expect(0, 2111, '\P{^Block=noblock}', "");
Expect(1, 2303, '\p{Block=-noBLOCK}', "");
Expect(0, 2303, '\p{^Block=-noBLOCK}', "");
Expect(0, 2303, '\P{Block=-noBLOCK}', "");
Expect(1, 2303, '\P{^Block=-noBLOCK}', "");
Expect(0, 2111, '\p{Block=-noBLOCK}', "");
Expect(1, 2111, '\p{^Block=-noBLOCK}', "");
Expect(1, 2111, '\P{Block=-noBLOCK}', "");
Expect(0, 2111, '\P{^Block=-noBLOCK}', "");
Error('\p{Blk=/a/		No Block}');
Error('\P{Blk=/a/		No Block}');
Expect(1, 2303, '\p{Blk=noblock}', "");
Expect(0, 2303, '\p{^Blk=noblock}', "");
Expect(0, 2303, '\P{Blk=noblock}', "");
Expect(1, 2303, '\P{^Blk=noblock}', "");
Expect(0, 2111, '\p{Blk=noblock}', "");
Expect(1, 2111, '\p{^Blk=noblock}', "");
Expect(1, 2111, '\P{Blk=noblock}', "");
Expect(0, 2111, '\P{^Blk=noblock}', "");
Expect(1, 2303, '\p{Blk= no	block}', "");
Expect(0, 2303, '\p{^Blk= no	block}', "");
Expect(0, 2303, '\P{Blk= no	block}', "");
Expect(1, 2303, '\P{^Blk= no	block}', "");
Expect(0, 2111, '\p{Blk= no	block}', "");
Expect(1, 2111, '\p{^Blk= no	block}', "");
Expect(1, 2111, '\P{Blk= no	block}', "");
Expect(0, 2111, '\P{^Blk= no	block}', "");
Error('\p{Is_Block=:=_ NO_Block}');
Error('\P{Is_Block=:=_ NO_Block}');
Expect(1, 2303, '\p{Is_Block=noblock}', "");
Expect(0, 2303, '\p{^Is_Block=noblock}', "");
Expect(0, 2303, '\P{Is_Block=noblock}', "");
Expect(1, 2303, '\P{^Is_Block=noblock}', "");
Expect(0, 2111, '\p{Is_Block=noblock}', "");
Expect(1, 2111, '\p{^Is_Block=noblock}', "");
Expect(1, 2111, '\P{Is_Block=noblock}', "");
Expect(0, 2111, '\P{^Is_Block=noblock}', "");
Expect(1, 2303, '\p{Is_Block:		 NO	Block}', "");
Expect(0, 2303, '\p{^Is_Block:		 NO	Block}', "");
Expect(0, 2303, '\P{Is_Block:		 NO	Block}', "");
Expect(1, 2303, '\P{^Is_Block:		 NO	Block}', "");
Expect(0, 2111, '\p{Is_Block:		 NO	Block}', "");
Expect(1, 2111, '\p{^Is_Block:		 NO	Block}', "");
Expect(1, 2111, '\P{Is_Block:		 NO	Block}', "");
Expect(0, 2111, '\P{^Is_Block:		 NO	Block}', "");
Error('\p{Is_Blk=	no-Block:=}');
Error('\P{Is_Blk=	no-Block:=}');
Expect(1, 2303, '\p{Is_Blk: noblock}', "");
Expect(0, 2303, '\p{^Is_Blk: noblock}', "");
Expect(0, 2303, '\P{Is_Blk: noblock}', "");
Expect(1, 2303, '\P{^Is_Blk: noblock}', "");
Expect(0, 2111, '\p{Is_Blk: noblock}', "");
Expect(1, 2111, '\p{^Is_Blk: noblock}', "");
Expect(1, 2111, '\P{Is_Blk: noblock}', "");
Expect(0, 2111, '\P{^Is_Blk: noblock}', "");
Expect(1, 2303, '\p{Is_Blk=no_block}', "");
Expect(0, 2303, '\p{^Is_Blk=no_block}', "");
Expect(0, 2303, '\P{Is_Blk=no_block}', "");
Expect(1, 2303, '\P{^Is_Blk=no_block}', "");
Expect(0, 2111, '\p{Is_Blk=no_block}', "");
Expect(1, 2111, '\p{^Is_Blk=no_block}', "");
Expect(1, 2111, '\P{Is_Blk=no_block}', "");
Expect(0, 2111, '\P{^Is_Blk=no_block}', "");
Error('\p{Block=:= _CJK-Compatibility}');
Error('\P{Block=:= _CJK-Compatibility}');
Expect(1, 13311, '\p{Block=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Block=cjkcompatibility}', "");
Expect(0, 13311, '\P{Block=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Block=cjkcompatibility}', "");
Expect(0, 13055, '\p{Block=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Block=cjkcompatibility}', "");
Expect(1, 13055, '\P{Block=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Block=cjkcompatibility}', "");
Expect(1, 13311, '\p{Block=-	CJKCompatibility}', "");
Expect(0, 13311, '\p{^Block=-	CJKCompatibility}', "");
Expect(0, 13311, '\P{Block=-	CJKCompatibility}', "");
Expect(1, 13311, '\P{^Block=-	CJKCompatibility}', "");
Expect(0, 13055, '\p{Block=-	CJKCompatibility}', "");
Expect(1, 13055, '\p{^Block=-	CJKCompatibility}', "");
Expect(1, 13055, '\P{Block=-	CJKCompatibility}', "");
Expect(0, 13055, '\P{^Block=-	CJKCompatibility}', "");
Error('\p{Blk=-CJK/a/COMPATIBILITY}');
Error('\P{Blk=-CJK/a/COMPATIBILITY}');
Expect(1, 13311, '\p{Blk=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Blk=cjkcompatibility}', "");
Expect(0, 13311, '\P{Blk=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Blk=cjkcompatibility}', "");
Expect(0, 13055, '\p{Blk=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Blk=cjkcompatibility}', "");
Expect(1, 13055, '\P{Blk=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Blk=cjkcompatibility}', "");
Expect(1, 13311, '\p{Blk= _cjk_COMPATIBILITY}', "");
Expect(0, 13311, '\p{^Blk= _cjk_COMPATIBILITY}', "");
Expect(0, 13311, '\P{Blk= _cjk_COMPATIBILITY}', "");
Expect(1, 13311, '\P{^Blk= _cjk_COMPATIBILITY}', "");
Expect(0, 13055, '\p{Blk= _cjk_COMPATIBILITY}', "");
Expect(1, 13055, '\p{^Blk= _cjk_COMPATIBILITY}', "");
Expect(1, 13055, '\P{Blk= _cjk_COMPATIBILITY}', "");
Expect(0, 13055, '\P{^Blk= _cjk_COMPATIBILITY}', "");
Error('\p{Is_Block=/a/-	CJK	Compatibility}');
Error('\P{Is_Block=/a/-	CJK	Compatibility}');
Expect(1, 13311, '\p{Is_Block:cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Block:cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Block:cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Block:cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Block:cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Block:cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Block:cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Block:cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Block= -CJK	Compatibility}', "");
Expect(0, 13311, '\p{^Is_Block= -CJK	Compatibility}', "");
Expect(0, 13311, '\P{Is_Block= -CJK	Compatibility}', "");
Expect(1, 13311, '\P{^Is_Block= -CJK	Compatibility}', "");
Expect(0, 13055, '\p{Is_Block= -CJK	Compatibility}', "");
Expect(1, 13055, '\p{^Is_Block= -CJK	Compatibility}', "");
Expect(1, 13055, '\P{Is_Block= -CJK	Compatibility}', "");
Expect(0, 13055, '\P{^Is_Block= -CJK	Compatibility}', "");
Error('\p{Is_Blk=CJK-compatibility/a/}');
Error('\P{Is_Blk=CJK-compatibility/a/}');
Expect(1, 13311, '\p{Is_Blk:   cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Blk:   cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Blk:   cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Blk:   cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Blk:   cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Blk:   cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Blk:   cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Blk:   cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Blk= CJK	Compatibility}', "");
Expect(0, 13311, '\p{^Is_Blk= CJK	Compatibility}', "");
Expect(0, 13311, '\P{Is_Blk= CJK	Compatibility}', "");
Expect(1, 13311, '\P{^Is_Blk= CJK	Compatibility}', "");
Expect(0, 13055, '\p{Is_Blk= CJK	Compatibility}', "");
Expect(1, 13055, '\p{^Is_Blk= CJK	Compatibility}', "");
Expect(1, 13055, '\P{Is_Blk= CJK	Compatibility}', "");
Expect(0, 13055, '\P{^Is_Blk= CJK	Compatibility}', "");
Error('\p{Block=-:=VEDIC-EXTENSIONS}');
Error('\P{Block=-:=VEDIC-EXTENSIONS}');
Expect(1, 7423, '\p{Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Block=vedicextensions}', "");
Expect(0, 7423, '\P{Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Block=vedicextensions}', "");
Expect(0, 7375, '\p{Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Block=vedicextensions}', "");
Expect(1, 7375, '\P{Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Block=vedicextensions}', "");
Expect(1, 7423, '\p{Block=	 VEDIC_Extensions}', "");
Expect(0, 7423, '\p{^Block=	 VEDIC_Extensions}', "");
Expect(0, 7423, '\P{Block=	 VEDIC_Extensions}', "");
Expect(1, 7423, '\P{^Block=	 VEDIC_Extensions}', "");
Expect(0, 7375, '\p{Block=	 VEDIC_Extensions}', "");
Expect(1, 7375, '\p{^Block=	 VEDIC_Extensions}', "");
Expect(1, 7375, '\P{Block=	 VEDIC_Extensions}', "");
Expect(0, 7375, '\P{^Block=	 VEDIC_Extensions}', "");
Error('\p{Blk=:=-	Vedicextensions}');
Error('\P{Blk=:=-	Vedicextensions}');
Expect(1, 7423, '\p{Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Blk=- Vedic-extensions}', "");
Expect(0, 7423, '\p{^Blk=- Vedic-extensions}', "");
Expect(0, 7423, '\P{Blk=- Vedic-extensions}', "");
Expect(1, 7423, '\P{^Blk=- Vedic-extensions}', "");
Expect(0, 7375, '\p{Blk=- Vedic-extensions}', "");
Expect(1, 7375, '\p{^Blk=- Vedic-extensions}', "");
Expect(1, 7375, '\P{Blk=- Vedic-extensions}', "");
Expect(0, 7375, '\P{^Blk=- Vedic-extensions}', "");
Error('\p{Is_Block=:=__vedic-extensions}');
Error('\P{Is_Block=:=__vedic-extensions}');
Expect(1, 7423, '\p{Is_Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Block=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Block=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Block=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Block=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Block= 	Vedic	Extensions}', "");
Expect(0, 7423, '\p{^Is_Block= 	Vedic	Extensions}', "");
Expect(0, 7423, '\P{Is_Block= 	Vedic	Extensions}', "");
Expect(1, 7423, '\P{^Is_Block= 	Vedic	Extensions}', "");
Expect(0, 7375, '\p{Is_Block= 	Vedic	Extensions}', "");
Expect(1, 7375, '\p{^Is_Block= 	Vedic	Extensions}', "");
Expect(1, 7375, '\P{Is_Block= 	Vedic	Extensions}', "");
Expect(0, 7375, '\P{^Is_Block= 	Vedic	Extensions}', "");
Error('\p{Is_Blk= :=vedic-Extensions}');
Error('\P{Is_Blk= :=vedic-Extensions}');
Expect(1, 7423, '\p{Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Blk=_-Vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Blk=_-Vedicextensions}', "");
Expect(0, 7423, '\P{Is_Blk=_-Vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Blk=_-Vedicextensions}', "");
Expect(0, 7375, '\p{Is_Blk=_-Vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Blk=_-Vedicextensions}', "");
Expect(1, 7375, '\P{Is_Blk=_-Vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Blk=_-Vedicextensions}', "");
Error('\p{Block:		:=Tai_VIET}');
Error('\P{Block:		:=Tai_VIET}');
Expect(1, 43743, '\p{Block=taiviet}', "");
Expect(0, 43743, '\p{^Block=taiviet}', "");
Expect(0, 43743, '\P{Block=taiviet}', "");
Expect(1, 43743, '\P{^Block=taiviet}', "");
Expect(0, 43647, '\p{Block=taiviet}', "");
Expect(1, 43647, '\p{^Block=taiviet}', "");
Expect(1, 43647, '\P{Block=taiviet}', "");
Expect(0, 43647, '\P{^Block=taiviet}', "");
Expect(1, 43743, '\p{Block=	TAI	viet}', "");
Expect(0, 43743, '\p{^Block=	TAI	viet}', "");
Expect(0, 43743, '\P{Block=	TAI	viet}', "");
Expect(1, 43743, '\P{^Block=	TAI	viet}', "");
Expect(0, 43647, '\p{Block=	TAI	viet}', "");
Expect(1, 43647, '\p{^Block=	TAI	viet}', "");
Expect(1, 43647, '\P{Block=	TAI	viet}', "");
Expect(0, 43647, '\P{^Block=	TAI	viet}', "");
Error('\p{Blk=:=  Tai	Viet}');
Error('\P{Blk=:=  Tai	Viet}');
Expect(1, 43743, '\p{Blk=taiviet}', "");
Expect(0, 43743, '\p{^Blk=taiviet}', "");
Expect(0, 43743, '\P{Blk=taiviet}', "");
Expect(1, 43743, '\P{^Blk=taiviet}', "");
Expect(0, 43647, '\p{Blk=taiviet}', "");
Expect(1, 43647, '\p{^Blk=taiviet}', "");
Expect(1, 43647, '\P{Blk=taiviet}', "");
Expect(0, 43647, '\P{^Blk=taiviet}', "");
Expect(1, 43743, '\p{Blk=_ Tai-viet}', "");
Expect(0, 43743, '\p{^Blk=_ Tai-viet}', "");
Expect(0, 43743, '\P{Blk=_ Tai-viet}', "");
Expect(1, 43743, '\P{^Blk=_ Tai-viet}', "");
Expect(0, 43647, '\p{Blk=_ Tai-viet}', "");
Expect(1, 43647, '\p{^Blk=_ Tai-viet}', "");
Expect(1, 43647, '\P{Blk=_ Tai-viet}', "");
Expect(0, 43647, '\P{^Blk=_ Tai-viet}', "");
Error('\p{Is_Block=--Tai	VIET:=}');
Error('\P{Is_Block=--Tai	VIET:=}');
Expect(1, 43743, '\p{Is_Block=taiviet}', "");
Expect(0, 43743, '\p{^Is_Block=taiviet}', "");
Expect(0, 43743, '\P{Is_Block=taiviet}', "");
Expect(1, 43743, '\P{^Is_Block=taiviet}', "");
Expect(0, 43647, '\p{Is_Block=taiviet}', "");
Expect(1, 43647, '\p{^Is_Block=taiviet}', "");
Expect(1, 43647, '\P{Is_Block=taiviet}', "");
Expect(0, 43647, '\P{^Is_Block=taiviet}', "");
Expect(1, 43743, '\p{Is_Block=_	tai_Viet}', "");
Expect(0, 43743, '\p{^Is_Block=_	tai_Viet}', "");
Expect(0, 43743, '\P{Is_Block=_	tai_Viet}', "");
Expect(1, 43743, '\P{^Is_Block=_	tai_Viet}', "");
Expect(0, 43647, '\p{Is_Block=_	tai_Viet}', "");
Expect(1, 43647, '\p{^Is_Block=_	tai_Viet}', "");
Expect(1, 43647, '\P{Is_Block=_	tai_Viet}', "");
Expect(0, 43647, '\P{^Is_Block=_	tai_Viet}', "");
Error('\p{Is_Blk=_/a/TaiViet}');
Error('\P{Is_Blk=_/a/TaiViet}');
Expect(1, 43743, '\p{Is_Blk:	taiviet}', "");
Expect(0, 43743, '\p{^Is_Blk:	taiviet}', "");
Expect(0, 43743, '\P{Is_Blk:	taiviet}', "");
Expect(1, 43743, '\P{^Is_Blk:	taiviet}', "");
Expect(0, 43647, '\p{Is_Blk:	taiviet}', "");
Expect(1, 43647, '\p{^Is_Blk:	taiviet}', "");
Expect(1, 43647, '\P{Is_Blk:	taiviet}', "");
Expect(0, 43647, '\P{^Is_Blk:	taiviet}', "");
Expect(1, 43743, '\p{Is_Blk:	_-tai viet}', "");
Expect(0, 43743, '\p{^Is_Blk:	_-tai viet}', "");
Expect(0, 43743, '\P{Is_Blk:	_-tai viet}', "");
Expect(1, 43743, '\P{^Is_Blk:	_-tai viet}', "");
Expect(0, 43647, '\p{Is_Blk:	_-tai viet}', "");
Expect(1, 43647, '\p{^Is_Blk:	_-tai viet}', "");
Expect(1, 43647, '\P{Is_Blk:	_-tai viet}', "");
Expect(0, 43647, '\P{^Is_Blk:	_-tai viet}', "");
Error('\p{Block=:=-CYRILLIC_Extended	b}');
Error('\P{Block=:=-CYRILLIC_Extended	b}');
Expect(1, 42655, '\p{Block:	cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Block:	cyrillicextendedb}', "");
Expect(0, 42655, '\P{Block:	cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Block:	cyrillicextendedb}', "");
Expect(0, 42559, '\p{Block:	cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Block:	cyrillicextendedb}', "");
Expect(1, 42559, '\P{Block:	cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Block:	cyrillicextendedb}', "");
Expect(1, 42655, '\p{Block= -CYRILLIC extended-b}', "");
Expect(0, 42655, '\p{^Block= -CYRILLIC extended-b}', "");
Expect(0, 42655, '\P{Block= -CYRILLIC extended-b}', "");
Expect(1, 42655, '\P{^Block= -CYRILLIC extended-b}', "");
Expect(0, 42559, '\p{Block= -CYRILLIC extended-b}', "");
Expect(1, 42559, '\p{^Block= -CYRILLIC extended-b}', "");
Expect(1, 42559, '\P{Block= -CYRILLIC extended-b}', "");
Expect(0, 42559, '\P{^Block= -CYRILLIC extended-b}', "");
Error('\p{Blk=-cyrillic/a/Extended-B}');
Error('\P{Blk=-cyrillic/a/Extended-B}');
Expect(1, 42655, '\p{Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Blk=_cyrillic Extended	B}', "");
Expect(0, 42655, '\p{^Blk=_cyrillic Extended	B}', "");
Expect(0, 42655, '\P{Blk=_cyrillic Extended	B}', "");
Expect(1, 42655, '\P{^Blk=_cyrillic Extended	B}', "");
Expect(0, 42559, '\p{Blk=_cyrillic Extended	B}', "");
Expect(1, 42559, '\p{^Blk=_cyrillic Extended	B}', "");
Expect(1, 42559, '\P{Blk=_cyrillic Extended	B}', "");
Expect(0, 42559, '\P{^Blk=_cyrillic Extended	B}', "");
Error('\p{Is_Block=-CYRILLIC-Extended-B/a/}');
Error('\P{Is_Block=-CYRILLIC-Extended-B/a/}');
Expect(1, 42655, '\p{Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Block= 	CYRILLICExtended-b}', "");
Expect(0, 42655, '\p{^Is_Block= 	CYRILLICExtended-b}', "");
Expect(0, 42655, '\P{Is_Block= 	CYRILLICExtended-b}', "");
Expect(1, 42655, '\P{^Is_Block= 	CYRILLICExtended-b}', "");
Expect(0, 42559, '\p{Is_Block= 	CYRILLICExtended-b}', "");
Expect(1, 42559, '\p{^Is_Block= 	CYRILLICExtended-b}', "");
Expect(1, 42559, '\P{Is_Block= 	CYRILLICExtended-b}', "");
Expect(0, 42559, '\P{^Is_Block= 	CYRILLICExtended-b}', "");
Error('\p{Is_Blk=/a/-	cyrillic_EXTENDED-B}');
Error('\P{Is_Blk=/a/-	cyrillic_EXTENDED-B}');
Expect(1, 42655, '\p{Is_Blk:	cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Blk:	cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Blk:	cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Blk:	cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Blk:	cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Blk:	cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Blk:	cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Blk:	cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Blk=_Cyrillic Extended_B}', "");
Expect(0, 42655, '\p{^Is_Blk=_Cyrillic Extended_B}', "");
Expect(0, 42655, '\P{Is_Blk=_Cyrillic Extended_B}', "");
Expect(1, 42655, '\P{^Is_Blk=_Cyrillic Extended_B}', "");
Expect(0, 42559, '\p{Is_Blk=_Cyrillic Extended_B}', "");
Expect(1, 42559, '\p{^Is_Blk=_Cyrillic Extended_B}', "");
Expect(1, 42559, '\P{Is_Blk=_Cyrillic Extended_B}', "");
Expect(0, 42559, '\P{^Is_Blk=_Cyrillic Extended_B}', "");
Error('\p{Block:	/a/phonetic	Extensions}');
Error('\P{Block:	/a/phonetic	Extensions}');
Expect(1, 7551, '\p{Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Block= _PHONETIC-Extensions}', "");
Expect(0, 7551, '\p{^Block= _PHONETIC-Extensions}', "");
Expect(0, 7551, '\P{Block= _PHONETIC-Extensions}', "");
Expect(1, 7551, '\P{^Block= _PHONETIC-Extensions}', "");
Expect(0, 7423, '\p{Block= _PHONETIC-Extensions}', "");
Expect(1, 7423, '\p{^Block= _PHONETIC-Extensions}', "");
Expect(1, 7423, '\P{Block= _PHONETIC-Extensions}', "");
Expect(0, 7423, '\P{^Block= _PHONETIC-Extensions}', "");
Error('\p{Blk=:= _phonetic-EXTENSIONS}');
Error('\P{Blk=:= _phonetic-EXTENSIONS}');
Expect(1, 7551, '\p{Blk:	phoneticextensions}', "");
Expect(0, 7551, '\p{^Blk:	phoneticextensions}', "");
Expect(0, 7551, '\P{Blk:	phoneticextensions}', "");
Expect(1, 7551, '\P{^Blk:	phoneticextensions}', "");
Expect(0, 7423, '\p{Blk:	phoneticextensions}', "");
Expect(1, 7423, '\p{^Blk:	phoneticextensions}', "");
Expect(1, 7423, '\P{Blk:	phoneticextensions}', "");
Expect(0, 7423, '\P{^Blk:	phoneticextensions}', "");
Expect(1, 7551, '\p{Blk=	PHONETIC-Extensions}', "");
Expect(0, 7551, '\p{^Blk=	PHONETIC-Extensions}', "");
Expect(0, 7551, '\P{Blk=	PHONETIC-Extensions}', "");
Expect(1, 7551, '\P{^Blk=	PHONETIC-Extensions}', "");
Expect(0, 7423, '\p{Blk=	PHONETIC-Extensions}', "");
Expect(1, 7423, '\p{^Blk=	PHONETIC-Extensions}', "");
Expect(1, 7423, '\P{Blk=	PHONETIC-Extensions}', "");
Expect(0, 7423, '\P{^Blk=	PHONETIC-Extensions}', "");
Error('\p{Is_Block=-_Phonetic_Extensions:=}');
Error('\P{Is_Block=-_Phonetic_Extensions:=}');
Expect(1, 7551, '\p{Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Block=_	phonetic_Extensions}', "");
Expect(0, 7551, '\p{^Is_Block=_	phonetic_Extensions}', "");
Expect(0, 7551, '\P{Is_Block=_	phonetic_Extensions}', "");
Expect(1, 7551, '\P{^Is_Block=_	phonetic_Extensions}', "");
Expect(0, 7423, '\p{Is_Block=_	phonetic_Extensions}', "");
Expect(1, 7423, '\p{^Is_Block=_	phonetic_Extensions}', "");
Expect(1, 7423, '\P{Is_Block=_	phonetic_Extensions}', "");
Expect(0, 7423, '\P{^Is_Block=_	phonetic_Extensions}', "");
Error('\p{Is_Blk=	-Phonetic:=EXTENSIONS}');
Error('\P{Is_Blk=	-Phonetic:=EXTENSIONS}');
Expect(1, 7551, '\p{Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Blk= _Phonetic	extensions}', "");
Expect(0, 7551, '\p{^Is_Blk= _Phonetic	extensions}', "");
Expect(0, 7551, '\P{Is_Blk= _Phonetic	extensions}', "");
Expect(1, 7551, '\P{^Is_Blk= _Phonetic	extensions}', "");
Expect(0, 7423, '\p{Is_Blk= _Phonetic	extensions}', "");
Expect(1, 7423, '\p{^Is_Blk= _Phonetic	extensions}', "");
Expect(1, 7423, '\P{Is_Blk= _Phonetic	extensions}', "");
Expect(0, 7423, '\P{^Is_Blk= _Phonetic	extensions}', "");
Error('\p{Block=/a/tai_Xuan	JING Symbols}');
Error('\P{Block=/a/tai_Xuan	JING Symbols}');
Expect(1, 119647, '\p{Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Block=--tai	Xuan Jing symbols}', "");
Expect(0, 119647, '\p{^Block=--tai	Xuan Jing symbols}', "");
Expect(0, 119647, '\P{Block=--tai	Xuan Jing symbols}', "");
Expect(1, 119647, '\P{^Block=--tai	Xuan Jing symbols}', "");
Expect(0, 119551, '\p{Block=--tai	Xuan Jing symbols}', "");
Expect(1, 119551, '\p{^Block=--tai	Xuan Jing symbols}', "");
Expect(1, 119551, '\P{Block=--tai	Xuan Jing symbols}', "");
Expect(0, 119551, '\P{^Block=--tai	Xuan Jing symbols}', "");
Error('\p{Blk= 	taiXuanJINGSymbols:=}');
Error('\P{Blk= 	taiXuanJINGSymbols:=}');
Expect(1, 119647, '\p{Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Blk= TAI	Xuan_JINGSymbols}', "");
Expect(0, 119647, '\p{^Blk= TAI	Xuan_JINGSymbols}', "");
Expect(0, 119647, '\P{Blk= TAI	Xuan_JINGSymbols}', "");
Expect(1, 119647, '\P{^Blk= TAI	Xuan_JINGSymbols}', "");
Expect(0, 119551, '\p{Blk= TAI	Xuan_JINGSymbols}', "");
Expect(1, 119551, '\p{^Blk= TAI	Xuan_JINGSymbols}', "");
Expect(1, 119551, '\P{Blk= TAI	Xuan_JINGSymbols}', "");
Expect(0, 119551, '\P{^Blk= TAI	Xuan_JINGSymbols}', "");
Error('\p{Is_Block=/a/_Taixuan_Jing_SYMBOLS}');
Error('\P{Is_Block=/a/_Taixuan_Jing_SYMBOLS}');
Expect(1, 119647, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(0, 119647, '\p{^Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(0, 119647, '\P{Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(1, 119647, '\P{^Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(0, 119551, '\p{Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(1, 119551, '\p{^Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(1, 119551, '\P{Is_Block=--tai Xuan Jing-Symbols}', "");
Expect(0, 119551, '\P{^Is_Block=--tai Xuan Jing-Symbols}', "");
Error('\p{Is_Blk= TAI	Xuan:=JING	SYMBOLS}');
Error('\P{Is_Blk= TAI	Xuan:=JING	SYMBOLS}');
Expect(1, 119647, '\p{Is_Blk: taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Blk: taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Blk: taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Blk: taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Blk: taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Blk: taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Blk: taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Blk: taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(0, 119647, '\p{^Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(0, 119647, '\P{Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(1, 119647, '\P{^Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(0, 119551, '\p{Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(1, 119551, '\p{^Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(1, 119551, '\P{Is_Blk= _taiXUAN jing	Symbols}', "");
Expect(0, 119551, '\P{^Is_Blk= _taiXUAN jing	Symbols}', "");
Error('\p{Block=:=Malayalam}');
Error('\P{Block=:=Malayalam}');
Expect(1, 3455, '\p{Block=malayalam}', "");
Expect(0, 3455, '\p{^Block=malayalam}', "");
Expect(0, 3455, '\P{Block=malayalam}', "");
Expect(1, 3455, '\P{^Block=malayalam}', "");
Expect(0, 3327, '\p{Block=malayalam}', "");
Expect(1, 3327, '\p{^Block=malayalam}', "");
Expect(1, 3327, '\P{Block=malayalam}', "");
Expect(0, 3327, '\P{^Block=malayalam}', "");
Expect(1, 3455, '\p{Block= -Malayalam}', "");
Expect(0, 3455, '\p{^Block= -Malayalam}', "");
Expect(0, 3455, '\P{Block= -Malayalam}', "");
Expect(1, 3455, '\P{^Block= -Malayalam}', "");
Expect(0, 3327, '\p{Block= -Malayalam}', "");
Expect(1, 3327, '\p{^Block= -Malayalam}', "");
Expect(1, 3327, '\P{Block= -Malayalam}', "");
Expect(0, 3327, '\P{^Block= -Malayalam}', "");
Error('\p{Blk=-	Malayalam:=}');
Error('\P{Blk=-	Malayalam:=}');
Expect(1, 3455, '\p{Blk=malayalam}', "");
Expect(0, 3455, '\p{^Blk=malayalam}', "");
Expect(0, 3455, '\P{Blk=malayalam}', "");
Expect(1, 3455, '\P{^Blk=malayalam}', "");
Expect(0, 3327, '\p{Blk=malayalam}', "");
Expect(1, 3327, '\p{^Blk=malayalam}', "");
Expect(1, 3327, '\P{Blk=malayalam}', "");
Expect(0, 3327, '\P{^Blk=malayalam}', "");
Expect(1, 3455, '\p{Blk=-_malayalam}', "");
Expect(0, 3455, '\p{^Blk=-_malayalam}', "");
Expect(0, 3455, '\P{Blk=-_malayalam}', "");
Expect(1, 3455, '\P{^Blk=-_malayalam}', "");
Expect(0, 3327, '\p{Blk=-_malayalam}', "");
Expect(1, 3327, '\p{^Blk=-_malayalam}', "");
Expect(1, 3327, '\P{Blk=-_malayalam}', "");
Expect(0, 3327, '\P{^Blk=-_malayalam}', "");
Error('\p{Is_Block=/a/		Malayalam}');
Error('\P{Is_Block=/a/		Malayalam}');
Expect(1, 3455, '\p{Is_Block=malayalam}', "");
Expect(0, 3455, '\p{^Is_Block=malayalam}', "");
Expect(0, 3455, '\P{Is_Block=malayalam}', "");
Expect(1, 3455, '\P{^Is_Block=malayalam}', "");
Expect(0, 3327, '\p{Is_Block=malayalam}', "");
Expect(1, 3327, '\p{^Is_Block=malayalam}', "");
Expect(1, 3327, '\P{Is_Block=malayalam}', "");
Expect(0, 3327, '\P{^Is_Block=malayalam}', "");
Expect(1, 3455, '\p{Is_Block: - Malayalam}', "");
Expect(0, 3455, '\p{^Is_Block: - Malayalam}', "");
Expect(0, 3455, '\P{Is_Block: - Malayalam}', "");
Expect(1, 3455, '\P{^Is_Block: - Malayalam}', "");
Expect(0, 3327, '\p{Is_Block: - Malayalam}', "");
Expect(1, 3327, '\p{^Is_Block: - Malayalam}', "");
Expect(1, 3327, '\P{Is_Block: - Malayalam}', "");
Expect(0, 3327, '\P{^Is_Block: - Malayalam}', "");
Error('\p{Is_Blk=__Malayalam/a/}');
Error('\P{Is_Blk=__Malayalam/a/}');
Expect(1, 3455, '\p{Is_Blk=malayalam}', "");
Expect(0, 3455, '\p{^Is_Blk=malayalam}', "");
Expect(0, 3455, '\P{Is_Blk=malayalam}', "");
Expect(1, 3455, '\P{^Is_Blk=malayalam}', "");
Expect(0, 3327, '\p{Is_Blk=malayalam}', "");
Expect(1, 3327, '\p{^Is_Blk=malayalam}', "");
Expect(1, 3327, '\P{Is_Blk=malayalam}', "");
Expect(0, 3327, '\P{^Is_Blk=malayalam}', "");
Expect(1, 3455, '\p{Is_Blk=  malayalam}', "");
Expect(0, 3455, '\p{^Is_Blk=  malayalam}', "");
Expect(0, 3455, '\P{Is_Blk=  malayalam}', "");
Expect(1, 3455, '\P{^Is_Blk=  malayalam}', "");
Expect(0, 3327, '\p{Is_Blk=  malayalam}', "");
Expect(1, 3327, '\p{^Is_Blk=  malayalam}', "");
Expect(1, 3327, '\P{Is_Blk=  malayalam}', "");
Expect(0, 3327, '\P{^Is_Blk=  malayalam}', "");
Error('\p{Block=	_lisu:=}');
Error('\P{Block=	_lisu:=}');
Expect(1, 42239, '\p{Block=lisu}', "");
Expect(0, 42239, '\p{^Block=lisu}', "");
Expect(0, 42239, '\P{Block=lisu}', "");
Expect(1, 42239, '\P{^Block=lisu}', "");
Expect(0, 42191, '\p{Block=lisu}', "");
Expect(1, 42191, '\p{^Block=lisu}', "");
Expect(1, 42191, '\P{Block=lisu}', "");
Expect(0, 42191, '\P{^Block=lisu}', "");
Expect(1, 42239, '\p{Block= 	Lisu}', "");
Expect(0, 42239, '\p{^Block= 	Lisu}', "");
Expect(0, 42239, '\P{Block= 	Lisu}', "");
Expect(1, 42239, '\P{^Block= 	Lisu}', "");
Expect(0, 42191, '\p{Block= 	Lisu}', "");
Expect(1, 42191, '\p{^Block= 	Lisu}', "");
Expect(1, 42191, '\P{Block= 	Lisu}', "");
Expect(0, 42191, '\P{^Block= 	Lisu}', "");
Error('\p{Blk=_:=Lisu}');
Error('\P{Blk=_:=Lisu}');
Expect(1, 42239, '\p{Blk=lisu}', "");
Expect(0, 42239, '\p{^Blk=lisu}', "");
Expect(0, 42239, '\P{Blk=lisu}', "");
Expect(1, 42239, '\P{^Blk=lisu}', "");
Expect(0, 42191, '\p{Blk=lisu}', "");
Expect(1, 42191, '\p{^Blk=lisu}', "");
Expect(1, 42191, '\P{Blk=lisu}', "");
Expect(0, 42191, '\P{^Blk=lisu}', "");
Expect(1, 42239, '\p{Blk= -LISU}', "");
Expect(0, 42239, '\p{^Blk= -LISU}', "");
Expect(0, 42239, '\P{Blk= -LISU}', "");
Expect(1, 42239, '\P{^Blk= -LISU}', "");
Expect(0, 42191, '\p{Blk= -LISU}', "");
Expect(1, 42191, '\p{^Blk= -LISU}', "");
Expect(1, 42191, '\P{Blk= -LISU}', "");
Expect(0, 42191, '\P{^Blk= -LISU}', "");
Error('\p{Is_Block=:= lisu}');
Error('\P{Is_Block=:= lisu}');
Expect(1, 42239, '\p{Is_Block=lisu}', "");
Expect(0, 42239, '\p{^Is_Block=lisu}', "");
Expect(0, 42239, '\P{Is_Block=lisu}', "");
Expect(1, 42239, '\P{^Is_Block=lisu}', "");
Expect(0, 42191, '\p{Is_Block=lisu}', "");
Expect(1, 42191, '\p{^Is_Block=lisu}', "");
Expect(1, 42191, '\P{Is_Block=lisu}', "");
Expect(0, 42191, '\P{^Is_Block=lisu}', "");
Expect(1, 42239, '\p{Is_Block=	-Lisu}', "");
Expect(0, 42239, '\p{^Is_Block=	-Lisu}', "");
Expect(0, 42239, '\P{Is_Block=	-Lisu}', "");
Expect(1, 42239, '\P{^Is_Block=	-Lisu}', "");
Expect(0, 42191, '\p{Is_Block=	-Lisu}', "");
Expect(1, 42191, '\p{^Is_Block=	-Lisu}', "");
Expect(1, 42191, '\P{Is_Block=	-Lisu}', "");
Expect(0, 42191, '\P{^Is_Block=	-Lisu}', "");
Error('\p{Is_Blk= 	lisu/a/}');
Error('\P{Is_Blk= 	lisu/a/}');
Expect(1, 42239, '\p{Is_Blk=lisu}', "");
Expect(0, 42239, '\p{^Is_Blk=lisu}', "");
Expect(0, 42239, '\P{Is_Blk=lisu}', "");
Expect(1, 42239, '\P{^Is_Blk=lisu}', "");
Expect(0, 42191, '\p{Is_Blk=lisu}', "");
Expect(1, 42191, '\p{^Is_Blk=lisu}', "");
Expect(1, 42191, '\P{Is_Blk=lisu}', "");
Expect(0, 42191, '\P{^Is_Blk=lisu}', "");
Expect(1, 42239, '\p{Is_Blk= 	LISU}', "");
Expect(0, 42239, '\p{^Is_Blk= 	LISU}', "");
Expect(0, 42239, '\P{Is_Blk= 	LISU}', "");
Expect(1, 42239, '\P{^Is_Blk= 	LISU}', "");
Expect(0, 42191, '\p{Is_Blk= 	LISU}', "");
Expect(1, 42191, '\p{^Is_Blk= 	LISU}', "");
Expect(1, 42191, '\P{Is_Blk= 	LISU}', "");
Expect(0, 42191, '\P{^Is_Blk= 	LISU}', "");
Error('\p{Block:	_-ARABIC PresentationFORMS:=A}');
Error('\P{Block:	_-ARABIC PresentationFORMS:=A}');
Expect(1, 65023, '\p{Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Block=-Arabic Presentation-FORMSA}', "");
Expect(0, 65023, '\p{^Block=-Arabic Presentation-FORMSA}', "");
Expect(0, 65023, '\P{Block=-Arabic Presentation-FORMSA}', "");
Expect(1, 65023, '\P{^Block=-Arabic Presentation-FORMSA}', "");
Expect(0, 64335, '\p{Block=-Arabic Presentation-FORMSA}', "");
Expect(1, 64335, '\p{^Block=-Arabic Presentation-FORMSA}', "");
Expect(1, 64335, '\P{Block=-Arabic Presentation-FORMSA}', "");
Expect(0, 64335, '\P{^Block=-Arabic Presentation-FORMSA}', "");
Error('\p{Blk=	:=Arabic-Presentation-Forms A}');
Error('\P{Blk=	:=Arabic-Presentation-Forms A}');
Expect(1, 65023, '\p{Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Blk=ARABIC	Presentation FORMSA}', "");
Expect(0, 65023, '\p{^Blk=ARABIC	Presentation FORMSA}', "");
Expect(0, 65023, '\P{Blk=ARABIC	Presentation FORMSA}', "");
Expect(1, 65023, '\P{^Blk=ARABIC	Presentation FORMSA}', "");
Expect(0, 64335, '\p{Blk=ARABIC	Presentation FORMSA}', "");
Expect(1, 64335, '\p{^Blk=ARABIC	Presentation FORMSA}', "");
Expect(1, 64335, '\P{Blk=ARABIC	Presentation FORMSA}', "");
Expect(0, 64335, '\P{^Blk=ARABIC	Presentation FORMSA}', "");
Error('\p{Is_Block=_:=Arabic	presentation	forms-A}');
Error('\P{Is_Block=_:=Arabic	presentation	forms-A}');
Expect(1, 65023, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Block=		Arabic-presentation Forms	a}', "");
Expect(0, 65023, '\p{^Is_Block=		Arabic-presentation Forms	a}', "");
Expect(0, 65023, '\P{Is_Block=		Arabic-presentation Forms	a}', "");
Expect(1, 65023, '\P{^Is_Block=		Arabic-presentation Forms	a}', "");
Expect(0, 64335, '\p{Is_Block=		Arabic-presentation Forms	a}', "");
Expect(1, 64335, '\p{^Is_Block=		Arabic-presentation Forms	a}', "");
Expect(1, 64335, '\P{Is_Block=		Arabic-presentation Forms	a}', "");
Expect(0, 64335, '\P{^Is_Block=		Arabic-presentation Forms	a}', "");
Error('\p{Is_Blk=_Arabic-presentation Forms A:=}');
Error('\P{Is_Blk=_Arabic-presentation Forms A:=}');
Expect(1, 65023, '\p{Is_Blk: arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Blk: arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Blk: arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Blk: arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Blk: arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Blk: arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Blk: arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Blk: arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Blk=	-arabicpresentationForms A}', "");
Expect(0, 65023, '\p{^Is_Blk=	-arabicpresentationForms A}', "");
Expect(0, 65023, '\P{Is_Blk=	-arabicpresentationForms A}', "");
Expect(1, 65023, '\P{^Is_Blk=	-arabicpresentationForms A}', "");
Expect(0, 64335, '\p{Is_Blk=	-arabicpresentationForms A}', "");
Expect(1, 64335, '\p{^Is_Blk=	-arabicpresentationForms A}', "");
Expect(1, 64335, '\P{Is_Blk=	-arabicpresentationForms A}', "");
Expect(0, 64335, '\P{^Is_Blk=	-arabicpresentationForms A}', "");
Error('\p{Block=:=Taile}');
Error('\P{Block=:=Taile}');
Expect(1, 6527, '\p{Block:   taile}', "");
Expect(0, 6527, '\p{^Block:   taile}', "");
Expect(0, 6527, '\P{Block:   taile}', "");
Expect(1, 6527, '\P{^Block:   taile}', "");
Expect(0, 6479, '\p{Block:   taile}', "");
Expect(1, 6479, '\p{^Block:   taile}', "");
Expect(1, 6479, '\P{Block:   taile}', "");
Expect(0, 6479, '\P{^Block:   taile}', "");
Expect(1, 6527, '\p{Block= 	TaiLe}', "");
Expect(0, 6527, '\p{^Block= 	TaiLe}', "");
Expect(0, 6527, '\P{Block= 	TaiLe}', "");
Expect(1, 6527, '\P{^Block= 	TaiLe}', "");
Expect(0, 6479, '\p{Block= 	TaiLe}', "");
Expect(1, 6479, '\p{^Block= 	TaiLe}', "");
Expect(1, 6479, '\P{Block= 	TaiLe}', "");
Expect(0, 6479, '\P{^Block= 	TaiLe}', "");
Error('\p{Blk=-tai	le/a/}');
Error('\P{Blk=-tai	le/a/}');
Expect(1, 6527, '\p{Blk=taile}', "");
Expect(0, 6527, '\p{^Blk=taile}', "");
Expect(0, 6527, '\P{Blk=taile}', "");
Expect(1, 6527, '\P{^Blk=taile}', "");
Expect(0, 6479, '\p{Blk=taile}', "");
Expect(1, 6479, '\p{^Blk=taile}', "");
Expect(1, 6479, '\P{Blk=taile}', "");
Expect(0, 6479, '\P{^Blk=taile}', "");
Expect(1, 6527, '\p{Blk=	Taile}', "");
Expect(0, 6527, '\p{^Blk=	Taile}', "");
Expect(0, 6527, '\P{Blk=	Taile}', "");
Expect(1, 6527, '\P{^Blk=	Taile}', "");
Expect(0, 6479, '\p{Blk=	Taile}', "");
Expect(1, 6479, '\p{^Blk=	Taile}', "");
Expect(1, 6479, '\P{Blk=	Taile}', "");
Expect(0, 6479, '\P{^Blk=	Taile}', "");
Error('\p{Is_Block=/a/tai Le}');
Error('\P{Is_Block=/a/tai Le}');
Expect(1, 6527, '\p{Is_Block=taile}', "");
Expect(0, 6527, '\p{^Is_Block=taile}', "");
Expect(0, 6527, '\P{Is_Block=taile}', "");
Expect(1, 6527, '\P{^Is_Block=taile}', "");
Expect(0, 6479, '\p{Is_Block=taile}', "");
Expect(1, 6479, '\p{^Is_Block=taile}', "");
Expect(1, 6479, '\P{Is_Block=taile}', "");
Expect(0, 6479, '\P{^Is_Block=taile}', "");
Expect(1, 6527, '\p{Is_Block= _Tai le}', "");
Expect(0, 6527, '\p{^Is_Block= _Tai le}', "");
Expect(0, 6527, '\P{Is_Block= _Tai le}', "");
Expect(1, 6527, '\P{^Is_Block= _Tai le}', "");
Expect(0, 6479, '\p{Is_Block= _Tai le}', "");
Expect(1, 6479, '\p{^Is_Block= _Tai le}', "");
Expect(1, 6479, '\P{Is_Block= _Tai le}', "");
Expect(0, 6479, '\P{^Is_Block= _Tai le}', "");
Error('\p{Is_Blk=-	TAI/a/LE}');
Error('\P{Is_Blk=-	TAI/a/LE}');
Expect(1, 6527, '\p{Is_Blk=taile}', "");
Expect(0, 6527, '\p{^Is_Blk=taile}', "");
Expect(0, 6527, '\P{Is_Blk=taile}', "");
Expect(1, 6527, '\P{^Is_Blk=taile}', "");
Expect(0, 6479, '\p{Is_Blk=taile}', "");
Expect(1, 6479, '\p{^Is_Blk=taile}', "");
Expect(1, 6479, '\P{Is_Blk=taile}', "");
Expect(0, 6479, '\P{^Is_Blk=taile}', "");
Expect(1, 6527, '\p{Is_Blk=_Tai-le}', "");
Expect(0, 6527, '\p{^Is_Blk=_Tai-le}', "");
Expect(0, 6527, '\P{Is_Blk=_Tai-le}', "");
Expect(1, 6527, '\P{^Is_Blk=_Tai-le}', "");
Expect(0, 6479, '\p{Is_Blk=_Tai-le}', "");
Expect(1, 6479, '\p{^Is_Blk=_Tai-le}', "");
Expect(1, 6479, '\P{Is_Blk=_Tai-le}', "");
Expect(0, 6479, '\P{^Is_Blk=_Tai-le}', "");
Error('\p{Block= /a/Combining Diacritical	Marks}');
Error('\P{Block= /a/Combining Diacritical	Marks}');
Expect(1, 879, '\p{Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(0, 879, '\p{^Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(0, 879, '\P{Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(1, 879, '\P{^Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(0, 767, '\p{Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(1, 767, '\p{^Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(1, 767, '\P{Block=-_Combining	DIACRITICAL	MARKS}', "");
Expect(0, 767, '\P{^Block=-_Combining	DIACRITICAL	MARKS}', "");
Error('\p{Blk=__COMBINING_DIACRITICAL:=Marks}');
Error('\P{Blk=__COMBINING_DIACRITICAL:=Marks}');
Expect(1, 879, '\p{Blk: combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Blk: combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Blk: combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Blk: combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Blk: combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Blk: combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Blk: combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Blk: combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Blk= 	COMBINING	Diacritical	marks}', "");
Expect(0, 879, '\p{^Blk= 	COMBINING	Diacritical	marks}', "");
Expect(0, 879, '\P{Blk= 	COMBINING	Diacritical	marks}', "");
Expect(1, 879, '\P{^Blk= 	COMBINING	Diacritical	marks}', "");
Expect(0, 767, '\p{Blk= 	COMBINING	Diacritical	marks}', "");
Expect(1, 767, '\p{^Blk= 	COMBINING	Diacritical	marks}', "");
Expect(1, 767, '\P{Blk= 	COMBINING	Diacritical	marks}', "");
Expect(0, 767, '\P{^Blk= 	COMBINING	Diacritical	marks}', "");
Error('\p{Is_Block=-Combining:=diacritical-MARKS}');
Error('\P{Is_Block=-Combining:=diacritical-MARKS}');
Expect(1, 879, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(0, 879, '\p{^Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(0, 879, '\P{Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(1, 879, '\P{^Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(0, 767, '\p{Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(1, 767, '\p{^Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(1, 767, '\P{Is_Block=	_COMBINING_diacritical_Marks}', "");
Expect(0, 767, '\P{^Is_Block=	_COMBINING_diacritical_Marks}', "");
Error('\p{Is_Blk= Combining_Diacritical:=Marks}');
Error('\P{Is_Blk= Combining_Diacritical:=Marks}');
Expect(1, 879, '\p{Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Blk=	Combining Diacritical_Marks}', "");
Expect(0, 879, '\p{^Is_Blk=	Combining Diacritical_Marks}', "");
Expect(0, 879, '\P{Is_Blk=	Combining Diacritical_Marks}', "");
Expect(1, 879, '\P{^Is_Blk=	Combining Diacritical_Marks}', "");
Expect(0, 767, '\p{Is_Blk=	Combining Diacritical_Marks}', "");
Expect(1, 767, '\p{^Is_Blk=	Combining Diacritical_Marks}', "");
Expect(1, 767, '\P{Is_Blk=	Combining Diacritical_Marks}', "");
Expect(0, 767, '\P{^Is_Blk=	Combining Diacritical_Marks}', "");
Error('\p{Block:	-Latin-extended-b:=}');
Error('\P{Block:	-Latin-extended-b:=}');
Expect(1, 591, '\p{Block=latinextendedb}', "");
Expect(0, 591, '\p{^Block=latinextendedb}', "");
Expect(0, 591, '\P{Block=latinextendedb}', "");
Expect(1, 591, '\P{^Block=latinextendedb}', "");
Expect(0, 383, '\p{Block=latinextendedb}', "");
Expect(1, 383, '\p{^Block=latinextendedb}', "");
Expect(1, 383, '\P{Block=latinextendedb}', "");
Expect(0, 383, '\P{^Block=latinextendedb}', "");
Expect(1, 591, '\p{Block=-Latin extended_B}', "");
Expect(0, 591, '\p{^Block=-Latin extended_B}', "");
Expect(0, 591, '\P{Block=-Latin extended_B}', "");
Expect(1, 591, '\P{^Block=-Latin extended_B}', "");
Expect(0, 383, '\p{Block=-Latin extended_B}', "");
Expect(1, 383, '\p{^Block=-Latin extended_B}', "");
Expect(1, 383, '\P{Block=-Latin extended_B}', "");
Expect(0, 383, '\P{^Block=-Latin extended_B}', "");
Error('\p{Blk=	:=latin	extended-B}');
Error('\P{Blk=	:=latin	extended-B}');
Expect(1, 591, '\p{Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Blk=latinextendedb}', "");
Expect(0, 591, '\P{Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Blk=latinextendedb}', "");
Expect(0, 383, '\p{Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Blk=latinextendedb}', "");
Expect(1, 383, '\P{Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Blk=latinextendedb}', "");
Expect(1, 591, '\p{Blk=	 Latin-EXTENDED	b}', "");
Expect(0, 591, '\p{^Blk=	 Latin-EXTENDED	b}', "");
Expect(0, 591, '\P{Blk=	 Latin-EXTENDED	b}', "");
Expect(1, 591, '\P{^Blk=	 Latin-EXTENDED	b}', "");
Expect(0, 383, '\p{Blk=	 Latin-EXTENDED	b}', "");
Expect(1, 383, '\p{^Blk=	 Latin-EXTENDED	b}', "");
Expect(1, 383, '\P{Blk=	 Latin-EXTENDED	b}', "");
Expect(0, 383, '\P{^Blk=	 Latin-EXTENDED	b}', "");
Error('\p{Is_Block= Latin EXTENDED_b:=}');
Error('\P{Is_Block= Latin EXTENDED_b:=}');
Expect(1, 591, '\p{Is_Block=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Block=latinextendedb}', "");
Expect(0, 591, '\P{Is_Block=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Block=latinextendedb}', "");
Expect(0, 383, '\p{Is_Block=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Block=latinextendedb}', "");
Expect(1, 383, '\P{Is_Block=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Block=latinextendedb}', "");
Expect(1, 591, '\p{Is_Block=  latin_ExtendedB}', "");
Expect(0, 591, '\p{^Is_Block=  latin_ExtendedB}', "");
Expect(0, 591, '\P{Is_Block=  latin_ExtendedB}', "");
Expect(1, 591, '\P{^Is_Block=  latin_ExtendedB}', "");
Expect(0, 383, '\p{Is_Block=  latin_ExtendedB}', "");
Expect(1, 383, '\p{^Is_Block=  latin_ExtendedB}', "");
Expect(1, 383, '\P{Is_Block=  latin_ExtendedB}', "");
Expect(0, 383, '\P{^Is_Block=  latin_ExtendedB}', "");
Error('\p{Is_Blk=-_Latin/a/Extended_b}');
Error('\P{Is_Blk=-_Latin/a/Extended_b}');
Expect(1, 591, '\p{Is_Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Blk=latinextendedb}', "");
Expect(0, 591, '\P{Is_Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Blk=latinextendedb}', "");
Expect(0, 383, '\p{Is_Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Blk=latinextendedb}', "");
Expect(1, 383, '\P{Is_Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Blk=latinextendedb}', "");
Expect(1, 591, '\p{Is_Blk=	-LATIN-Extended	B}', "");
Expect(0, 591, '\p{^Is_Blk=	-LATIN-Extended	B}', "");
Expect(0, 591, '\P{Is_Blk=	-LATIN-Extended	B}', "");
Expect(1, 591, '\P{^Is_Blk=	-LATIN-Extended	B}', "");
Expect(0, 383, '\p{Is_Blk=	-LATIN-Extended	B}', "");
Expect(1, 383, '\p{^Is_Blk=	-LATIN-Extended	B}', "");
Expect(1, 383, '\P{Is_Blk=	-LATIN-Extended	B}', "");
Expect(0, 383, '\P{^Is_Blk=	-LATIN-Extended	B}', "");
Error('\p{Block=Supplemental:=ARROWSA}');
Error('\P{Block=Supplemental:=ARROWSA}');
Expect(1, 10239, '\p{Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(0, 10239, '\p{^Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(0, 10239, '\P{Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(1, 10239, '\P{^Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(0, 10223, '\p{Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(1, 10223, '\p{^Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(1, 10223, '\P{Block=	-SUPPLEMENTAL_arrowsA}', "");
Expect(0, 10223, '\P{^Block=	-SUPPLEMENTAL_arrowsA}', "");
Error('\p{Blk=/a/_supplementalArrows	A}');
Error('\P{Blk=/a/_supplementalArrows	A}');
Expect(1, 10239, '\p{Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Blk=__supplemental-Arrowsa}', "");
Expect(0, 10239, '\p{^Blk=__supplemental-Arrowsa}', "");
Expect(0, 10239, '\P{Blk=__supplemental-Arrowsa}', "");
Expect(1, 10239, '\P{^Blk=__supplemental-Arrowsa}', "");
Expect(0, 10223, '\p{Blk=__supplemental-Arrowsa}', "");
Expect(1, 10223, '\p{^Blk=__supplemental-Arrowsa}', "");
Expect(1, 10223, '\P{Blk=__supplemental-Arrowsa}', "");
Expect(0, 10223, '\P{^Blk=__supplemental-Arrowsa}', "");
Error('\p{Is_Block=	 SUPPLEMENTAL:=ARROWS_a}');
Error('\P{Is_Block=	 SUPPLEMENTAL:=ARROWS_a}');
Expect(1, 10239, '\p{Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Block=		supplementalArrowsA}', "");
Expect(0, 10239, '\p{^Is_Block=		supplementalArrowsA}', "");
Expect(0, 10239, '\P{Is_Block=		supplementalArrowsA}', "");
Expect(1, 10239, '\P{^Is_Block=		supplementalArrowsA}', "");
Expect(0, 10223, '\p{Is_Block=		supplementalArrowsA}', "");
Expect(1, 10223, '\p{^Is_Block=		supplementalArrowsA}', "");
Expect(1, 10223, '\P{Is_Block=		supplementalArrowsA}', "");
Expect(0, 10223, '\P{^Is_Block=		supplementalArrowsA}', "");
Error('\p{Is_Blk:		-Supplemental:=Arrows A}');
Error('\P{Is_Blk:		-Supplemental:=Arrows A}');
Expect(1, 10239, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(0, 10239, '\p{^Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(0, 10239, '\P{Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(1, 10239, '\P{^Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(0, 10223, '\p{Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(1, 10223, '\p{^Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(1, 10223, '\P{Is_Blk=	 Supplemental	ARROWS A}', "");
Expect(0, 10223, '\P{^Is_Blk=	 Supplemental	ARROWS A}', "");
Error('\p{Block=--Javanese/a/}');
Error('\P{Block=--Javanese/a/}');
Expect(1, 43487, '\p{Block=javanese}', "");
Expect(0, 43487, '\p{^Block=javanese}', "");
Expect(0, 43487, '\P{Block=javanese}', "");
Expect(1, 43487, '\P{^Block=javanese}', "");
Expect(0, 43391, '\p{Block=javanese}', "");
Expect(1, 43391, '\p{^Block=javanese}', "");
Expect(1, 43391, '\P{Block=javanese}', "");
Expect(0, 43391, '\P{^Block=javanese}', "");
Expect(1, 43487, '\p{Block=-javanese}', "");
Expect(0, 43487, '\p{^Block=-javanese}', "");
Expect(0, 43487, '\P{Block=-javanese}', "");
Expect(1, 43487, '\P{^Block=-javanese}', "");
Expect(0, 43391, '\p{Block=-javanese}', "");
Expect(1, 43391, '\p{^Block=-javanese}', "");
Expect(1, 43391, '\P{Block=-javanese}', "");
Expect(0, 43391, '\P{^Block=-javanese}', "");
Error('\p{Blk=	-Javanese/a/}');
Error('\P{Blk=	-Javanese/a/}');
Expect(1, 43487, '\p{Blk=javanese}', "");
Expect(0, 43487, '\p{^Blk=javanese}', "");
Expect(0, 43487, '\P{Blk=javanese}', "");
Expect(1, 43487, '\P{^Blk=javanese}', "");
Expect(0, 43391, '\p{Blk=javanese}', "");
Expect(1, 43391, '\p{^Blk=javanese}', "");
Expect(1, 43391, '\P{Blk=javanese}', "");
Expect(0, 43391, '\P{^Blk=javanese}', "");
Expect(1, 43487, '\p{Blk=_ javanese}', "");
Expect(0, 43487, '\p{^Blk=_ javanese}', "");
Expect(0, 43487, '\P{Blk=_ javanese}', "");
Expect(1, 43487, '\P{^Blk=_ javanese}', "");
Expect(0, 43391, '\p{Blk=_ javanese}', "");
Expect(1, 43391, '\p{^Blk=_ javanese}', "");
Expect(1, 43391, '\P{Blk=_ javanese}', "");
Expect(0, 43391, '\P{^Blk=_ javanese}', "");
Error('\p{Is_Block:_:=Javanese}');
Error('\P{Is_Block:_:=Javanese}');
Expect(1, 43487, '\p{Is_Block=javanese}', "");
Expect(0, 43487, '\p{^Is_Block=javanese}', "");
Expect(0, 43487, '\P{Is_Block=javanese}', "");
Expect(1, 43487, '\P{^Is_Block=javanese}', "");
Expect(0, 43391, '\p{Is_Block=javanese}', "");
Expect(1, 43391, '\p{^Is_Block=javanese}', "");
Expect(1, 43391, '\P{Is_Block=javanese}', "");
Expect(0, 43391, '\P{^Is_Block=javanese}', "");
Expect(1, 43487, '\p{Is_Block= Javanese}', "");
Expect(0, 43487, '\p{^Is_Block= Javanese}', "");
Expect(0, 43487, '\P{Is_Block= Javanese}', "");
Expect(1, 43487, '\P{^Is_Block= Javanese}', "");
Expect(0, 43391, '\p{Is_Block= Javanese}', "");
Expect(1, 43391, '\p{^Is_Block= Javanese}', "");
Expect(1, 43391, '\P{Is_Block= Javanese}', "");
Expect(0, 43391, '\P{^Is_Block= Javanese}', "");
Error('\p{Is_Blk= -Javanese:=}');
Error('\P{Is_Blk= -Javanese:=}');
Expect(1, 43487, '\p{Is_Blk=javanese}', "");
Expect(0, 43487, '\p{^Is_Blk=javanese}', "");
Expect(0, 43487, '\P{Is_Blk=javanese}', "");
Expect(1, 43487, '\P{^Is_Blk=javanese}', "");
Expect(0, 43391, '\p{Is_Blk=javanese}', "");
Expect(1, 43391, '\p{^Is_Blk=javanese}', "");
Expect(1, 43391, '\P{Is_Blk=javanese}', "");
Expect(0, 43391, '\P{^Is_Blk=javanese}', "");
Expect(1, 43487, '\p{Is_Blk=-Javanese}', "");
Expect(0, 43487, '\p{^Is_Blk=-Javanese}', "");
Expect(0, 43487, '\P{Is_Blk=-Javanese}', "");
Expect(1, 43487, '\P{^Is_Blk=-Javanese}', "");
Expect(0, 43391, '\p{Is_Blk=-Javanese}', "");
Expect(1, 43391, '\p{^Is_Blk=-Javanese}', "");
Expect(1, 43391, '\P{Is_Blk=-Javanese}', "");
Expect(0, 43391, '\P{^Is_Blk=-Javanese}', "");
Error('\p{Block=:=Supplementary-Private	UseArea_A}');
Error('\P{Block=:=Supplementary-Private	UseArea_A}');
Expect(1, 983040, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(0, 983040, '\p{^Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(0, 983040, '\P{Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(1, 983040, '\P{^Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(0, 1, '\p{Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(1, 1, '\p{^Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(1, 1, '\P{Block=-	supplementary_PrivateUSE-Area_A}', "");
Expect(0, 1, '\P{^Block=-	supplementary_PrivateUSE-Area_A}', "");
Error('\p{Blk=-Supplementary-PRIVATE	Use area:=A}');
Error('\P{Blk=-Supplementary-PRIVATE	Use area:=A}');
Expect(1, 983040, '\p{Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(0, 983040, '\p{^Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(0, 983040, '\P{Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(1, 983040, '\P{^Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(0, 1, '\p{Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(1, 1, '\p{^Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(1, 1, '\P{Blk=--SupplementaryPrivate Usearea_A}', "");
Expect(0, 1, '\P{^Blk=--SupplementaryPrivate Usearea_A}', "");
Error('\p{Is_Block=_Supplementary/a/PRIVATE USE AREA	A}');
Error('\P{Is_Block=_Supplementary/a/PRIVATE USE AREA	A}');
Expect(1, 983040, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(0, 983040, '\p{^Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(0, 983040, '\P{Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(1, 983040, '\P{^Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(0, 1, '\p{Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(1, 1, '\p{^Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(1, 1, '\P{Is_Block=	 Supplementary Private_UseareaA}', "");
Expect(0, 1, '\P{^Is_Block=	 Supplementary Private_UseareaA}', "");
Error('\p{Is_Blk:  /a/SUPPLEMENTARY	PRIVATE_use-Area	A}');
Error('\P{Is_Blk:  /a/SUPPLEMENTARY	PRIVATE_use-Area	A}');
Expect(1, 983040, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(0, 983040, '\p{^Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(0, 983040, '\P{Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(1, 983040, '\P{^Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(0, 1, '\p{Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(1, 1, '\p{^Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(1, 1, '\P{Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Expect(0, 1, '\P{^Is_Blk=	SUPPLEMENTARY PRIVATE_use-Area-A}', "");
Error('\p{Block=-:=hanunoo}');
Error('\P{Block=-:=hanunoo}');
Expect(1, 5951, '\p{Block=hanunoo}', "");
Expect(0, 5951, '\p{^Block=hanunoo}', "");
Expect(0, 5951, '\P{Block=hanunoo}', "");
Expect(1, 5951, '\P{^Block=hanunoo}', "");
Expect(0, 5919, '\p{Block=hanunoo}', "");
Expect(1, 5919, '\p{^Block=hanunoo}', "");
Expect(1, 5919, '\P{Block=hanunoo}', "");
Expect(0, 5919, '\P{^Block=hanunoo}', "");
Expect(1, 5951, '\p{Block=--Hanunoo}', "");
Expect(0, 5951, '\p{^Block=--Hanunoo}', "");
Expect(0, 5951, '\P{Block=--Hanunoo}', "");
Expect(1, 5951, '\P{^Block=--Hanunoo}', "");
Expect(0, 5919, '\p{Block=--Hanunoo}', "");
Expect(1, 5919, '\p{^Block=--Hanunoo}', "");
Expect(1, 5919, '\P{Block=--Hanunoo}', "");
Expect(0, 5919, '\P{^Block=--Hanunoo}', "");
Error('\p{Blk= 	hanunoo/a/}');
Error('\P{Blk= 	hanunoo/a/}');
Expect(1, 5951, '\p{Blk=hanunoo}', "");
Expect(0, 5951, '\p{^Blk=hanunoo}', "");
Expect(0, 5951, '\P{Blk=hanunoo}', "");
Expect(1, 5951, '\P{^Blk=hanunoo}', "");
Expect(0, 5919, '\p{Blk=hanunoo}', "");
Expect(1, 5919, '\p{^Blk=hanunoo}', "");
Expect(1, 5919, '\P{Blk=hanunoo}', "");
Expect(0, 5919, '\P{^Blk=hanunoo}', "");
Expect(1, 5951, '\p{Blk:  	HANUNOO}', "");
Expect(0, 5951, '\p{^Blk:  	HANUNOO}', "");
Expect(0, 5951, '\P{Blk:  	HANUNOO}', "");
Expect(1, 5951, '\P{^Blk:  	HANUNOO}', "");
Expect(0, 5919, '\p{Blk:  	HANUNOO}', "");
Expect(1, 5919, '\p{^Blk:  	HANUNOO}', "");
Expect(1, 5919, '\P{Blk:  	HANUNOO}', "");
Expect(0, 5919, '\P{^Blk:  	HANUNOO}', "");
Error('\p{Is_Block=		Hanunoo/a/}');
Error('\P{Is_Block=		Hanunoo/a/}');
Expect(1, 5951, '\p{Is_Block=hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=hanunoo}', "");
Expect(1, 5951, '\p{Is_Block=		Hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=		Hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=		Hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=		Hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=		Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=		Hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=		Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=		Hanunoo}', "");
Error('\p{Is_Blk=/a/_	HANUNOO}');
Error('\P{Is_Blk=/a/_	HANUNOO}');
Expect(1, 5951, '\p{Is_Blk=hanunoo}', "");
Expect(0, 5951, '\p{^Is_Blk=hanunoo}', "");
Expect(0, 5951, '\P{Is_Blk=hanunoo}', "");
Expect(1, 5951, '\P{^Is_Blk=hanunoo}', "");
Expect(0, 5919, '\p{Is_Blk=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Blk=hanunoo}', "");
Expect(1, 5919, '\P{Is_Blk=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Blk=hanunoo}', "");
Expect(1, 5951, '\p{Is_Blk=-Hanunoo}', "");
Expect(0, 5951, '\p{^Is_Blk=-Hanunoo}', "");
Expect(0, 5951, '\P{Is_Blk=-Hanunoo}', "");
Expect(1, 5951, '\P{^Is_Blk=-Hanunoo}', "");
Expect(0, 5919, '\p{Is_Blk=-Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Blk=-Hanunoo}', "");
Expect(1, 5919, '\P{Is_Blk=-Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Blk=-Hanunoo}', "");
Error('\p{Block=_/a/low surrogates}');
Error('\P{Block=_/a/low surrogates}');
Expect(0, 1, '\p{Block=lowsurrogates}', "");
Expect(1, 1, '\p{^Block=lowsurrogates}', "");
Expect(1, 1, '\P{Block=lowsurrogates}', "");
Expect(0, 1, '\P{^Block=lowsurrogates}', "");
Expect(0, 1, '\p{Block=--LOW	Surrogates}', "");
Expect(1, 1, '\p{^Block=--LOW	Surrogates}', "");
Expect(1, 1, '\P{Block=--LOW	Surrogates}', "");
Expect(0, 1, '\P{^Block=--LOW	Surrogates}', "");
Error('\p{Blk=-_Low:=Surrogates}');
Error('\P{Blk=-_Low:=Surrogates}');
Expect(0, 1, '\p{Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Blk=  LowSurrogates}', "");
Expect(1, 1, '\p{^Blk=  LowSurrogates}', "");
Expect(1, 1, '\P{Blk=  LowSurrogates}', "");
Expect(0, 1, '\P{^Blk=  LowSurrogates}', "");
Error('\p{Is_Block=/a/	 Low	Surrogates}');
Error('\P{Is_Block=/a/	 Low	Surrogates}');
Expect(0, 1, '\p{Is_Block=lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Block=lowsurrogates}', "");
Expect(1, 1, '\P{Is_Block=lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Block=lowsurrogates}', "");
Expect(0, 1, '\p{Is_Block=_ low	Surrogates}', "");
Expect(1, 1, '\p{^Is_Block=_ low	Surrogates}', "");
Expect(1, 1, '\P{Is_Block=_ low	Surrogates}', "");
Expect(0, 1, '\P{^Is_Block=_ low	Surrogates}', "");
Error('\p{Is_Blk=- LOW-Surrogates/a/}');
Error('\P{Is_Blk=- LOW-Surrogates/a/}');
Expect(0, 1, '\p{Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Is_Blk=_	low-Surrogates}', "");
Expect(1, 1, '\p{^Is_Blk=_	low-Surrogates}', "");
Expect(1, 1, '\P{Is_Blk=_	low-Surrogates}', "");
Expect(0, 1, '\P{^Is_Blk=_	low-Surrogates}', "");
Error('\p{Block=	/a/Katakana}');
Error('\P{Block=	/a/Katakana}');
Expect(1, 12543, '\p{Block=katakana}', "");
Expect(0, 12543, '\p{^Block=katakana}', "");
Expect(0, 12543, '\P{Block=katakana}', "");
Expect(1, 12543, '\P{^Block=katakana}', "");
Expect(0, 12447, '\p{Block=katakana}', "");
Expect(1, 12447, '\p{^Block=katakana}', "");
Expect(1, 12447, '\P{Block=katakana}', "");
Expect(0, 12447, '\P{^Block=katakana}', "");
Expect(1, 12543, '\p{Block=	KATAKANA}', "");
Expect(0, 12543, '\p{^Block=	KATAKANA}', "");
Expect(0, 12543, '\P{Block=	KATAKANA}', "");
Expect(1, 12543, '\P{^Block=	KATAKANA}', "");
Expect(0, 12447, '\p{Block=	KATAKANA}', "");
Expect(1, 12447, '\p{^Block=	KATAKANA}', "");
Expect(1, 12447, '\P{Block=	KATAKANA}', "");
Expect(0, 12447, '\P{^Block=	KATAKANA}', "");
Error('\p{Blk: 		katakana/a/}');
Error('\P{Blk: 		katakana/a/}');
Expect(1, 12543, '\p{Blk=katakana}', "");
Expect(0, 12543, '\p{^Blk=katakana}', "");
Expect(0, 12543, '\P{Blk=katakana}', "");
Expect(1, 12543, '\P{^Blk=katakana}', "");
Expect(0, 12447, '\p{Blk=katakana}', "");
Expect(1, 12447, '\p{^Blk=katakana}', "");
Expect(1, 12447, '\P{Blk=katakana}', "");
Expect(0, 12447, '\P{^Blk=katakana}', "");
Expect(1, 12543, '\p{Blk:-Katakana}', "");
Expect(0, 12543, '\p{^Blk:-Katakana}', "");
Expect(0, 12543, '\P{Blk:-Katakana}', "");
Expect(1, 12543, '\P{^Blk:-Katakana}', "");
Expect(0, 12447, '\p{Blk:-Katakana}', "");
Expect(1, 12447, '\p{^Blk:-Katakana}', "");
Expect(1, 12447, '\P{Blk:-Katakana}', "");
Expect(0, 12447, '\P{^Blk:-Katakana}', "");
Error('\p{Is_Block=-KATAKANA:=}');
Error('\P{Is_Block=-KATAKANA:=}');
Expect(1, 12543, '\p{Is_Block=katakana}', "");
Expect(0, 12543, '\p{^Is_Block=katakana}', "");
Expect(0, 12543, '\P{Is_Block=katakana}', "");
Expect(1, 12543, '\P{^Is_Block=katakana}', "");
Expect(0, 12447, '\p{Is_Block=katakana}', "");
Expect(1, 12447, '\p{^Is_Block=katakana}', "");
Expect(1, 12447, '\P{Is_Block=katakana}', "");
Expect(0, 12447, '\P{^Is_Block=katakana}', "");
Expect(1, 12543, '\p{Is_Block= _Katakana}', "");
Expect(0, 12543, '\p{^Is_Block= _Katakana}', "");
Expect(0, 12543, '\P{Is_Block= _Katakana}', "");
Expect(1, 12543, '\P{^Is_Block= _Katakana}', "");
Expect(0, 12447, '\p{Is_Block= _Katakana}', "");
Expect(1, 12447, '\p{^Is_Block= _Katakana}', "");
Expect(1, 12447, '\P{Is_Block= _Katakana}', "");
Expect(0, 12447, '\P{^Is_Block= _Katakana}', "");
Error('\p{Is_Blk=:=	 KATAKANA}');
Error('\P{Is_Blk=:=	 KATAKANA}');
Expect(1, 12543, '\p{Is_Blk=katakana}', "");
Expect(0, 12543, '\p{^Is_Blk=katakana}', "");
Expect(0, 12543, '\P{Is_Blk=katakana}', "");
Expect(1, 12543, '\P{^Is_Blk=katakana}', "");
Expect(0, 12447, '\p{Is_Blk=katakana}', "");
Expect(1, 12447, '\p{^Is_Blk=katakana}', "");
Expect(1, 12447, '\P{Is_Blk=katakana}', "");
Expect(0, 12447, '\P{^Is_Blk=katakana}', "");
Expect(1, 12543, '\p{Is_Blk:		Katakana}', "");
Expect(0, 12543, '\p{^Is_Blk:		Katakana}', "");
Expect(0, 12543, '\P{Is_Blk:		Katakana}', "");
Expect(1, 12543, '\P{^Is_Blk:		Katakana}', "");
Expect(0, 12447, '\p{Is_Blk:		Katakana}', "");
Expect(1, 12447, '\p{^Is_Blk:		Katakana}', "");
Expect(1, 12447, '\P{Is_Blk:		Katakana}', "");
Expect(0, 12447, '\P{^Is_Blk:		Katakana}', "");
Error('\p{Block=/a/Cuneiform}');
Error('\P{Block=/a/Cuneiform}');
Expect(1, 74751, '\p{Block=cuneiform}', "");
Expect(0, 74751, '\p{^Block=cuneiform}', "");
Expect(0, 74751, '\P{Block=cuneiform}', "");
Expect(1, 74751, '\P{^Block=cuneiform}', "");
Expect(0, 73727, '\p{Block=cuneiform}', "");
Expect(1, 73727, '\p{^Block=cuneiform}', "");
Expect(1, 73727, '\P{Block=cuneiform}', "");
Expect(0, 73727, '\P{^Block=cuneiform}', "");
Expect(1, 74751, '\p{Block= -cuneiform}', "");
Expect(0, 74751, '\p{^Block= -cuneiform}', "");
Expect(0, 74751, '\P{Block= -cuneiform}', "");
Expect(1, 74751, '\P{^Block= -cuneiform}', "");
Expect(0, 73727, '\p{Block= -cuneiform}', "");
Expect(1, 73727, '\p{^Block= -cuneiform}', "");
Expect(1, 73727, '\P{Block= -cuneiform}', "");
Expect(0, 73727, '\P{^Block= -cuneiform}', "");
Error('\p{Blk=-	CUNEIFORM/a/}');
Error('\P{Blk=-	CUNEIFORM/a/}');
Expect(1, 74751, '\p{Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Blk=cuneiform}', "");
Expect(0, 74751, '\P{Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Blk=cuneiform}', "");
Expect(0, 73727, '\p{Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Blk=cuneiform}', "");
Expect(1, 73727, '\P{Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Blk=cuneiform}', "");
Expect(1, 74751, '\p{Blk:	CUNEIFORM}', "");
Expect(0, 74751, '\p{^Blk:	CUNEIFORM}', "");
Expect(0, 74751, '\P{Blk:	CUNEIFORM}', "");
Expect(1, 74751, '\P{^Blk:	CUNEIFORM}', "");
Expect(0, 73727, '\p{Blk:	CUNEIFORM}', "");
Expect(1, 73727, '\p{^Blk:	CUNEIFORM}', "");
Expect(1, 73727, '\P{Blk:	CUNEIFORM}', "");
Expect(0, 73727, '\P{^Blk:	CUNEIFORM}', "");
Error('\p{Is_Block:			CUNEIFORM:=}');
Error('\P{Is_Block:			CUNEIFORM:=}');
Expect(1, 74751, '\p{Is_Block=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Block=cuneiform}', "");
Expect(0, 74751, '\P{Is_Block=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Block=cuneiform}', "");
Expect(0, 73727, '\p{Is_Block=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Block=cuneiform}', "");
Expect(1, 73727, '\P{Is_Block=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Block=cuneiform}', "");
Expect(1, 74751, '\p{Is_Block= -CUNEIFORM}', "");
Expect(0, 74751, '\p{^Is_Block= -CUNEIFORM}', "");
Expect(0, 74751, '\P{Is_Block= -CUNEIFORM}', "");
Expect(1, 74751, '\P{^Is_Block= -CUNEIFORM}', "");
Expect(0, 73727, '\p{Is_Block= -CUNEIFORM}', "");
Expect(1, 73727, '\p{^Is_Block= -CUNEIFORM}', "");
Expect(1, 73727, '\P{Is_Block= -CUNEIFORM}', "");
Expect(0, 73727, '\P{^Is_Block= -CUNEIFORM}', "");
Error('\p{Is_Blk=:= -CUNEIFORM}');
Error('\P{Is_Blk=:= -CUNEIFORM}');
Expect(1, 74751, '\p{Is_Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Blk=cuneiform}', "");
Expect(0, 74751, '\P{Is_Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Blk=cuneiform}', "");
Expect(0, 73727, '\p{Is_Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Blk=cuneiform}', "");
Expect(1, 73727, '\P{Is_Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Blk=cuneiform}', "");
Expect(1, 74751, '\p{Is_Blk:	-cuneiform}', "");
Expect(0, 74751, '\p{^Is_Blk:	-cuneiform}', "");
Expect(0, 74751, '\P{Is_Blk:	-cuneiform}', "");
Expect(1, 74751, '\P{^Is_Blk:	-cuneiform}', "");
Expect(0, 73727, '\p{Is_Blk:	-cuneiform}', "");
Expect(1, 73727, '\p{^Is_Blk:	-cuneiform}', "");
Expect(1, 73727, '\P{Is_Blk:	-cuneiform}', "");
Expect(0, 73727, '\P{^Is_Blk:	-cuneiform}', "");
Error('\p{Block= High/a/SURROGATES}');
Error('\P{Block= High/a/SURROGATES}');
Expect(0, 55295, '\p{Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Block=highsurrogates}', "");
Expect(1, 55295, '\P{Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Block=highsurrogates}', "");
Expect(0, 55295, '\p{Block=		high	Surrogates}', "");
Expect(1, 55295, '\p{^Block=		high	Surrogates}', "");
Expect(1, 55295, '\P{Block=		high	Surrogates}', "");
Expect(0, 55295, '\P{^Block=		high	Surrogates}', "");
Error('\p{Blk=-High/a/Surrogates}');
Error('\P{Blk=-High/a/Surrogates}');
Expect(0, 55295, '\p{Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Blk=high_surrogates}', "");
Expect(1, 55295, '\p{^Blk=high_surrogates}', "");
Expect(1, 55295, '\P{Blk=high_surrogates}', "");
Expect(0, 55295, '\P{^Blk=high_surrogates}', "");
Error('\p{Is_Block=-	High/a/Surrogates}');
Error('\P{Is_Block=-	High/a/Surrogates}');
Expect(0, 55295, '\p{Is_Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Block=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Block=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Block=		highSurrogates}', "");
Expect(1, 55295, '\p{^Is_Block=		highSurrogates}', "");
Expect(1, 55295, '\P{Is_Block=		highSurrogates}', "");
Expect(0, 55295, '\P{^Is_Block=		highSurrogates}', "");
Error('\p{Is_Blk=--High-Surrogates/a/}');
Error('\P{Is_Blk=--High-Surrogates/a/}');
Expect(0, 55295, '\p{Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Blk=_ highSURROGATES}', "");
Expect(1, 55295, '\p{^Is_Blk=_ highSURROGATES}', "");
Expect(1, 55295, '\P{Is_Blk=_ highSURROGATES}', "");
Expect(0, 55295, '\P{^Is_Blk=_ highSURROGATES}', "");
Error('\p{Block=:=	 rumi-NUMERAL	SYMBOLS}');
Error('\P{Block=:=	 rumi-NUMERAL	SYMBOLS}');
Expect(1, 69247, '\p{Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(0, 69247, '\p{^Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(0, 69247, '\P{Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(1, 69247, '\P{^Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(0, 69215, '\p{Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(1, 69215, '\p{^Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(1, 69215, '\P{Block= 	Rumi-Numeral SYMBOLS}', "");
Expect(0, 69215, '\P{^Block= 	Rumi-Numeral SYMBOLS}', "");
Error('\p{Blk=:= RUMI	Numeralsymbols}');
Error('\P{Blk=:= RUMI	Numeralsymbols}');
Expect(1, 69247, '\p{Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Blk=_-RumiNumeral-symbols}', "");
Expect(0, 69247, '\p{^Blk=_-RumiNumeral-symbols}', "");
Expect(0, 69247, '\P{Blk=_-RumiNumeral-symbols}', "");
Expect(1, 69247, '\P{^Blk=_-RumiNumeral-symbols}', "");
Expect(0, 69215, '\p{Blk=_-RumiNumeral-symbols}', "");
Expect(1, 69215, '\p{^Blk=_-RumiNumeral-symbols}', "");
Expect(1, 69215, '\P{Blk=_-RumiNumeral-symbols}', "");
Expect(0, 69215, '\P{^Blk=_-RumiNumeral-symbols}', "");
Error('\p{Is_Block=/a/Rumi-NumeralSYMBOLS}');
Error('\P{Is_Block=/a/Rumi-NumeralSYMBOLS}');
Expect(1, 69247, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(0, 69247, '\p{^Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(0, 69247, '\P{Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(1, 69247, '\P{^Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(0, 69215, '\p{Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(1, 69215, '\p{^Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(1, 69215, '\P{Is_Block=	Rumi_Numeral	Symbols}', "");
Expect(0, 69215, '\P{^Is_Block=	Rumi_Numeral	Symbols}', "");
Error('\p{Is_Blk=	_RUMI-NUMERAL:=Symbols}');
Error('\P{Is_Blk=	_RUMI-NUMERAL:=Symbols}');
Expect(1, 69247, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(0, 69247, '\p{^Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(0, 69247, '\P{Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(1, 69247, '\P{^Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(0, 69215, '\p{Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(1, 69215, '\p{^Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(1, 69215, '\P{Is_Blk=--RUMI Numeral-Symbols}', "");
Expect(0, 69215, '\P{^Is_Blk=--RUMI Numeral-Symbols}', "");
Error('\p{Block=:=	_variation	selectors	SUPPLEMENT}');
Error('\P{Block=:=	_variation	selectors	SUPPLEMENT}');
Expect(1, 917999, '\p{Block=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Block=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Block=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Block=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Block=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Block=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Block=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Block=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Block=- Variation_SELECTORSsupplement}', "");
Expect(0, 917999, '\p{^Block=- Variation_SELECTORSsupplement}', "");
Expect(0, 917999, '\P{Block=- Variation_SELECTORSsupplement}', "");
Expect(1, 917999, '\P{^Block=- Variation_SELECTORSsupplement}', "");
Expect(0, 917759, '\p{Block=- Variation_SELECTORSsupplement}', "");
Expect(1, 917759, '\p{^Block=- Variation_SELECTORSsupplement}', "");
Expect(1, 917759, '\P{Block=- Variation_SELECTORSsupplement}', "");
Expect(0, 917759, '\P{^Block=- Variation_SELECTORSsupplement}', "");
Error('\p{Blk=/a/ -Variation	selectorssupplement}');
Error('\P{Blk=/a/ -Variation	selectorssupplement}');
Expect(1, 917999, '\p{Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(0, 917999, '\p{^Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(0, 917999, '\P{Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(1, 917999, '\P{^Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(0, 917759, '\p{Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(1, 917759, '\p{^Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(1, 917759, '\P{Blk= -variationSELECTORS	SUPPLEMENT}', "");
Expect(0, 917759, '\P{^Blk= -variationSELECTORS	SUPPLEMENT}', "");
Error('\p{Is_Block=		variation:=SELECTORSSupplement}');
Error('\P{Is_Block=		variation:=SELECTORSSupplement}');
Expect(1, 917999, '\p{Is_Block=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Block=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Block=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Block=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Block=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Block=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Block=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Block=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Block:   --variation	Selectors Supplement}', "");
Expect(0, 917999, '\p{^Is_Block:   --variation	Selectors Supplement}', "");
Expect(0, 917999, '\P{Is_Block:   --variation	Selectors Supplement}', "");
Expect(1, 917999, '\P{^Is_Block:   --variation	Selectors Supplement}', "");
Expect(0, 917759, '\p{Is_Block:   --variation	Selectors Supplement}', "");
Expect(1, 917759, '\p{^Is_Block:   --variation	Selectors Supplement}', "");
Expect(1, 917759, '\P{Is_Block:   --variation	Selectors Supplement}', "");
Expect(0, 917759, '\P{^Is_Block:   --variation	Selectors Supplement}', "");
Error('\p{Is_Blk=-	VARIATIONSelectors:=Supplement}');
Error('\P{Is_Blk=-	VARIATIONSelectors:=Supplement}');
Expect(1, 917999, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(0, 917999, '\p{^Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(0, 917999, '\P{Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(1, 917999, '\P{^Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(0, 917759, '\p{Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(1, 917759, '\p{^Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(1, 917759, '\P{Is_Blk=_	Variation	Selectors_supplement}', "");
Expect(0, 917759, '\P{^Is_Blk=_	Variation	Selectors_supplement}', "");
Error('\p{Block=_	Georgian:=Supplement}');
Error('\P{Block=_	Georgian:=Supplement}');
Expect(1, 11567, '\p{Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Block=		Georgian	supplement}', "");
Expect(0, 11567, '\p{^Block=		Georgian	supplement}', "");
Expect(0, 11567, '\P{Block=		Georgian	supplement}', "");
Expect(1, 11567, '\P{^Block=		Georgian	supplement}', "");
Expect(0, 11519, '\p{Block=		Georgian	supplement}', "");
Expect(1, 11519, '\p{^Block=		Georgian	supplement}', "");
Expect(1, 11519, '\P{Block=		Georgian	supplement}', "");
Expect(0, 11519, '\P{^Block=		Georgian	supplement}', "");
Error('\p{Blk=_:=Georgian_supplement}');
Error('\P{Blk=_:=Georgian_supplement}');
Expect(1, 11567, '\p{Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Blk=__Georgian supplement}', "");
Expect(0, 11567, '\p{^Blk=__Georgian supplement}', "");
Expect(0, 11567, '\P{Blk=__Georgian supplement}', "");
Expect(1, 11567, '\P{^Blk=__Georgian supplement}', "");
Expect(0, 11519, '\p{Blk=__Georgian supplement}', "");
Expect(1, 11519, '\p{^Blk=__Georgian supplement}', "");
Expect(1, 11519, '\P{Blk=__Georgian supplement}', "");
Expect(0, 11519, '\P{^Blk=__Georgian supplement}', "");
Error('\p{Is_Block:		:=GEORGIAN-Supplement}');
Error('\P{Is_Block:		:=GEORGIAN-Supplement}');
Expect(1, 11567, '\p{Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Block=_ Georgian	Supplement}', "");
Expect(0, 11567, '\p{^Is_Block=_ Georgian	Supplement}', "");
Expect(0, 11567, '\P{Is_Block=_ Georgian	Supplement}', "");
Expect(1, 11567, '\P{^Is_Block=_ Georgian	Supplement}', "");
Expect(0, 11519, '\p{Is_Block=_ Georgian	Supplement}', "");
Expect(1, 11519, '\p{^Is_Block=_ Georgian	Supplement}', "");
Expect(1, 11519, '\P{Is_Block=_ Georgian	Supplement}', "");
Expect(0, 11519, '\P{^Is_Block=_ Georgian	Supplement}', "");
Error('\p{Is_Blk=		Georgian_Supplement:=}');
Error('\P{Is_Blk=		Georgian_Supplement:=}');
Expect(1, 11567, '\p{Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Blk=GEORGIAN-Supplement}', "");
Expect(0, 11567, '\p{^Is_Blk=GEORGIAN-Supplement}', "");
Expect(0, 11567, '\P{Is_Blk=GEORGIAN-Supplement}', "");
Expect(1, 11567, '\P{^Is_Blk=GEORGIAN-Supplement}', "");
Expect(0, 11519, '\p{Is_Blk=GEORGIAN-Supplement}', "");
Expect(1, 11519, '\p{^Is_Blk=GEORGIAN-Supplement}', "");
Expect(1, 11519, '\P{Is_Blk=GEORGIAN-Supplement}', "");
Expect(0, 11519, '\P{^Is_Blk=GEORGIAN-Supplement}', "");
Error('\p{Block=-/a/myanmar}');
Error('\P{Block=-/a/myanmar}');
Expect(1, 4255, '\p{Block=myanmar}', "");
Expect(0, 4255, '\p{^Block=myanmar}', "");
Expect(0, 4255, '\P{Block=myanmar}', "");
Expect(1, 4255, '\P{^Block=myanmar}', "");
Expect(0, 4095, '\p{Block=myanmar}', "");
Expect(1, 4095, '\p{^Block=myanmar}', "");
Expect(1, 4095, '\P{Block=myanmar}', "");
Expect(0, 4095, '\P{^Block=myanmar}', "");
Expect(1, 4255, '\p{Block:   _Myanmar}', "");
Expect(0, 4255, '\p{^Block:   _Myanmar}', "");
Expect(0, 4255, '\P{Block:   _Myanmar}', "");
Expect(1, 4255, '\P{^Block:   _Myanmar}', "");
Expect(0, 4095, '\p{Block:   _Myanmar}', "");
Expect(1, 4095, '\p{^Block:   _Myanmar}', "");
Expect(1, 4095, '\P{Block:   _Myanmar}', "");
Expect(0, 4095, '\P{^Block:   _Myanmar}', "");
Error('\p{Blk= /a/MYANMAR}');
Error('\P{Blk= /a/MYANMAR}');
Expect(1, 4255, '\p{Blk:myanmar}', "");
Expect(0, 4255, '\p{^Blk:myanmar}', "");
Expect(0, 4255, '\P{Blk:myanmar}', "");
Expect(1, 4255, '\P{^Blk:myanmar}', "");
Expect(0, 4095, '\p{Blk:myanmar}', "");
Expect(1, 4095, '\p{^Blk:myanmar}', "");
Expect(1, 4095, '\P{Blk:myanmar}', "");
Expect(0, 4095, '\P{^Blk:myanmar}', "");
Expect(1, 4255, '\p{Blk=_Myanmar}', "");
Expect(0, 4255, '\p{^Blk=_Myanmar}', "");
Expect(0, 4255, '\P{Blk=_Myanmar}', "");
Expect(1, 4255, '\P{^Blk=_Myanmar}', "");
Expect(0, 4095, '\p{Blk=_Myanmar}', "");
Expect(1, 4095, '\p{^Blk=_Myanmar}', "");
Expect(1, 4095, '\P{Blk=_Myanmar}', "");
Expect(0, 4095, '\P{^Blk=_Myanmar}', "");
Error('\p{Is_Block=_/a/Myanmar}');
Error('\P{Is_Block=_/a/Myanmar}');
Expect(1, 4255, '\p{Is_Block=myanmar}', "");
Expect(0, 4255, '\p{^Is_Block=myanmar}', "");
Expect(0, 4255, '\P{Is_Block=myanmar}', "");
Expect(1, 4255, '\P{^Is_Block=myanmar}', "");
Expect(0, 4095, '\p{Is_Block=myanmar}', "");
Expect(1, 4095, '\p{^Is_Block=myanmar}', "");
Expect(1, 4095, '\P{Is_Block=myanmar}', "");
Expect(0, 4095, '\P{^Is_Block=myanmar}', "");
Expect(1, 4255, '\p{Is_Block= 	MYANMAR}', "");
Expect(0, 4255, '\p{^Is_Block= 	MYANMAR}', "");
Expect(0, 4255, '\P{Is_Block= 	MYANMAR}', "");
Expect(1, 4255, '\P{^Is_Block= 	MYANMAR}', "");
Expect(0, 4095, '\p{Is_Block= 	MYANMAR}', "");
Expect(1, 4095, '\p{^Is_Block= 	MYANMAR}', "");
Expect(1, 4095, '\P{Is_Block= 	MYANMAR}', "");
Expect(0, 4095, '\P{^Is_Block= 	MYANMAR}', "");
Error('\p{Is_Blk=__Myanmar:=}');
Error('\P{Is_Blk=__Myanmar:=}');
Expect(1, 4255, '\p{Is_Blk=myanmar}', "");
Expect(0, 4255, '\p{^Is_Blk=myanmar}', "");
Expect(0, 4255, '\P{Is_Blk=myanmar}', "");
Expect(1, 4255, '\P{^Is_Blk=myanmar}', "");
Expect(0, 4095, '\p{Is_Blk=myanmar}', "");
Expect(1, 4095, '\p{^Is_Blk=myanmar}', "");
Expect(1, 4095, '\P{Is_Blk=myanmar}', "");
Expect(0, 4095, '\P{^Is_Blk=myanmar}', "");
Expect(1, 4255, '\p{Is_Blk=--Myanmar}', "");
Expect(0, 4255, '\p{^Is_Blk=--Myanmar}', "");
Expect(0, 4255, '\P{Is_Blk=--Myanmar}', "");
Expect(1, 4255, '\P{^Is_Blk=--Myanmar}', "");
Expect(0, 4095, '\p{Is_Blk=--Myanmar}', "");
Expect(1, 4095, '\p{^Is_Blk=--Myanmar}', "");
Expect(1, 4095, '\P{Is_Blk=--Myanmar}', "");
Expect(0, 4095, '\P{^Is_Blk=--Myanmar}', "");
Error('\p{Block=_Vertical	Forms:=}');
Error('\P{Block=_Vertical	Forms:=}');
Expect(1, 65055, '\p{Block=verticalforms}', "");
Expect(0, 65055, '\p{^Block=verticalforms}', "");
Expect(0, 65055, '\P{Block=verticalforms}', "");
Expect(1, 65055, '\P{^Block=verticalforms}', "");
Expect(0, 65039, '\p{Block=verticalforms}', "");
Expect(1, 65039, '\p{^Block=verticalforms}', "");
Expect(1, 65039, '\P{Block=verticalforms}', "");
Expect(0, 65039, '\P{^Block=verticalforms}', "");
Expect(1, 65055, '\p{Block:-_Vertical_Forms}', "");
Expect(0, 65055, '\p{^Block:-_Vertical_Forms}', "");
Expect(0, 65055, '\P{Block:-_Vertical_Forms}', "");
Expect(1, 65055, '\P{^Block:-_Vertical_Forms}', "");
Expect(0, 65039, '\p{Block:-_Vertical_Forms}', "");
Expect(1, 65039, '\p{^Block:-_Vertical_Forms}', "");
Expect(1, 65039, '\P{Block:-_Vertical_Forms}', "");
Expect(0, 65039, '\P{^Block:-_Vertical_Forms}', "");
Error('\p{Blk=__Vertical	FORMS:=}');
Error('\P{Blk=__Vertical	FORMS:=}');
Expect(1, 65055, '\p{Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Blk=verticalforms}', "");
Expect(0, 65055, '\P{Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Blk=verticalforms}', "");
Expect(0, 65039, '\p{Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Blk=verticalforms}', "");
Expect(1, 65039, '\P{Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Blk=verticalforms}', "");
Expect(1, 65055, '\p{Blk=-vertical_FORMS}', "");
Expect(0, 65055, '\p{^Blk=-vertical_FORMS}', "");
Expect(0, 65055, '\P{Blk=-vertical_FORMS}', "");
Expect(1, 65055, '\P{^Blk=-vertical_FORMS}', "");
Expect(0, 65039, '\p{Blk=-vertical_FORMS}', "");
Expect(1, 65039, '\p{^Blk=-vertical_FORMS}', "");
Expect(1, 65039, '\P{Blk=-vertical_FORMS}', "");
Expect(0, 65039, '\P{^Blk=-vertical_FORMS}', "");
Error('\p{Is_Block=/a/_Vertical-forms}');
Error('\P{Is_Block=/a/_Vertical-forms}');
Expect(1, 65055, '\p{Is_Block=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Block=verticalforms}', "");
Expect(0, 65055, '\P{Is_Block=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Block=verticalforms}', "");
Expect(0, 65039, '\p{Is_Block=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Block=verticalforms}', "");
Expect(1, 65039, '\P{Is_Block=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Block=verticalforms}', "");
Expect(1, 65055, '\p{Is_Block=  Vertical	FORMS}', "");
Expect(0, 65055, '\p{^Is_Block=  Vertical	FORMS}', "");
Expect(0, 65055, '\P{Is_Block=  Vertical	FORMS}', "");
Expect(1, 65055, '\P{^Is_Block=  Vertical	FORMS}', "");
Expect(0, 65039, '\p{Is_Block=  Vertical	FORMS}', "");
Expect(1, 65039, '\p{^Is_Block=  Vertical	FORMS}', "");
Expect(1, 65039, '\P{Is_Block=  Vertical	FORMS}', "");
Expect(0, 65039, '\P{^Is_Block=  Vertical	FORMS}', "");
Error('\p{Is_Blk:	  VERTICAL/a/forms}');
Error('\P{Is_Blk:	  VERTICAL/a/forms}');
Expect(1, 65055, '\p{Is_Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Blk=verticalforms}', "");
Expect(0, 65055, '\P{Is_Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Blk=verticalforms}', "");
Expect(0, 65039, '\p{Is_Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Blk=verticalforms}', "");
Expect(1, 65039, '\P{Is_Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Blk=verticalforms}', "");
Expect(1, 65055, '\p{Is_Blk:   -_Vertical-Forms}', "");
Expect(0, 65055, '\p{^Is_Blk:   -_Vertical-Forms}', "");
Expect(0, 65055, '\P{Is_Blk:   -_Vertical-Forms}', "");
Expect(1, 65055, '\P{^Is_Blk:   -_Vertical-Forms}', "");
Expect(0, 65039, '\p{Is_Blk:   -_Vertical-Forms}', "");
Expect(1, 65039, '\p{^Is_Blk:   -_Vertical-Forms}', "");
Expect(1, 65039, '\P{Is_Blk:   -_Vertical-Forms}', "");
Expect(0, 65039, '\P{^Is_Blk:   -_Vertical-Forms}', "");
Error('\p{Block=:=-Kaithi}');
Error('\P{Block=:=-Kaithi}');
Expect(1, 69839, '\p{Block=kaithi}', "");
Expect(0, 69839, '\p{^Block=kaithi}', "");
Expect(0, 69839, '\P{Block=kaithi}', "");
Expect(1, 69839, '\P{^Block=kaithi}', "");
Expect(0, 69759, '\p{Block=kaithi}', "");
Expect(1, 69759, '\p{^Block=kaithi}', "");
Expect(1, 69759, '\P{Block=kaithi}', "");
Expect(0, 69759, '\P{^Block=kaithi}', "");
Expect(1, 69839, '\p{Block=_ Kaithi}', "");
Expect(0, 69839, '\p{^Block=_ Kaithi}', "");
Expect(0, 69839, '\P{Block=_ Kaithi}', "");
Expect(1, 69839, '\P{^Block=_ Kaithi}', "");
Expect(0, 69759, '\p{Block=_ Kaithi}', "");
Expect(1, 69759, '\p{^Block=_ Kaithi}', "");
Expect(1, 69759, '\P{Block=_ Kaithi}', "");
Expect(0, 69759, '\P{^Block=_ Kaithi}', "");
Error('\p{Blk=/a/kaithi}');
Error('\P{Blk=/a/kaithi}');
Expect(1, 69839, '\p{Blk=kaithi}', "");
Expect(0, 69839, '\p{^Blk=kaithi}', "");
Expect(0, 69839, '\P{Blk=kaithi}', "");
Expect(1, 69839, '\P{^Blk=kaithi}', "");
Expect(0, 69759, '\p{Blk=kaithi}', "");
Expect(1, 69759, '\p{^Blk=kaithi}', "");
Expect(1, 69759, '\P{Blk=kaithi}', "");
Expect(0, 69759, '\P{^Blk=kaithi}', "");
Expect(1, 69839, '\p{Blk=-	kaithi}', "");
Expect(0, 69839, '\p{^Blk=-	kaithi}', "");
Expect(0, 69839, '\P{Blk=-	kaithi}', "");
Expect(1, 69839, '\P{^Blk=-	kaithi}', "");
Expect(0, 69759, '\p{Blk=-	kaithi}', "");
Expect(1, 69759, '\p{^Blk=-	kaithi}', "");
Expect(1, 69759, '\P{Blk=-	kaithi}', "");
Expect(0, 69759, '\P{^Blk=-	kaithi}', "");
Error('\p{Is_Block= _Kaithi:=}');
Error('\P{Is_Block= _Kaithi:=}');
Expect(1, 69839, '\p{Is_Block=kaithi}', "");
Expect(0, 69839, '\p{^Is_Block=kaithi}', "");
Expect(0, 69839, '\P{Is_Block=kaithi}', "");
Expect(1, 69839, '\P{^Is_Block=kaithi}', "");
Expect(0, 69759, '\p{Is_Block=kaithi}', "");
Expect(1, 69759, '\p{^Is_Block=kaithi}', "");
Expect(1, 69759, '\P{Is_Block=kaithi}', "");
Expect(0, 69759, '\P{^Is_Block=kaithi}', "");
Expect(1, 69839, '\p{Is_Block=-	Kaithi}', "");
Expect(0, 69839, '\p{^Is_Block=-	Kaithi}', "");
Expect(0, 69839, '\P{Is_Block=-	Kaithi}', "");
Expect(1, 69839, '\P{^Is_Block=-	Kaithi}', "");
Expect(0, 69759, '\p{Is_Block=-	Kaithi}', "");
Expect(1, 69759, '\p{^Is_Block=-	Kaithi}', "");
Expect(1, 69759, '\P{Is_Block=-	Kaithi}', "");
Expect(0, 69759, '\P{^Is_Block=-	Kaithi}', "");
Error('\p{Is_Blk:/a/Kaithi}');
Error('\P{Is_Blk:/a/Kaithi}');
Expect(1, 69839, '\p{Is_Blk=kaithi}', "");
Expect(0, 69839, '\p{^Is_Blk=kaithi}', "");
Expect(0, 69839, '\P{Is_Blk=kaithi}', "");
Expect(1, 69839, '\P{^Is_Blk=kaithi}', "");
Expect(0, 69759, '\p{Is_Blk=kaithi}', "");
Expect(1, 69759, '\p{^Is_Blk=kaithi}', "");
Expect(1, 69759, '\P{Is_Blk=kaithi}', "");
Expect(0, 69759, '\P{^Is_Blk=kaithi}', "");
Expect(1, 69839, '\p{Is_Blk=	KAITHI}', "");
Expect(0, 69839, '\p{^Is_Blk=	KAITHI}', "");
Expect(0, 69839, '\P{Is_Blk=	KAITHI}', "");
Expect(1, 69839, '\P{^Is_Blk=	KAITHI}', "");
Expect(0, 69759, '\p{Is_Blk=	KAITHI}', "");
Expect(1, 69759, '\p{^Is_Blk=	KAITHI}', "");
Expect(1, 69759, '\P{Is_Blk=	KAITHI}', "");
Expect(0, 69759, '\P{^Is_Blk=	KAITHI}', "");
Error('\p{Block:/a/-	sinhala}');
Error('\P{Block:/a/-	sinhala}');
Expect(1, 3583, '\p{Block=sinhala}', "");
Expect(0, 3583, '\p{^Block=sinhala}', "");
Expect(0, 3583, '\P{Block=sinhala}', "");
Expect(1, 3583, '\P{^Block=sinhala}', "");
Expect(0, 3455, '\p{Block=sinhala}', "");
Expect(1, 3455, '\p{^Block=sinhala}', "");
Expect(1, 3455, '\P{Block=sinhala}', "");
Expect(0, 3455, '\P{^Block=sinhala}', "");
Expect(1, 3583, '\p{Block=  Sinhala}', "");
Expect(0, 3583, '\p{^Block=  Sinhala}', "");
Expect(0, 3583, '\P{Block=  Sinhala}', "");
Expect(1, 3583, '\P{^Block=  Sinhala}', "");
Expect(0, 3455, '\p{Block=  Sinhala}', "");
Expect(1, 3455, '\p{^Block=  Sinhala}', "");
Expect(1, 3455, '\P{Block=  Sinhala}', "");
Expect(0, 3455, '\P{^Block=  Sinhala}', "");
Error('\p{Blk=:=_ Sinhala}');
Error('\P{Blk=:=_ Sinhala}');
Expect(1, 3583, '\p{Blk=sinhala}', "");
Expect(0, 3583, '\p{^Blk=sinhala}', "");
Expect(0, 3583, '\P{Blk=sinhala}', "");
Expect(1, 3583, '\P{^Blk=sinhala}', "");
Expect(0, 3455, '\p{Blk=sinhala}', "");
Expect(1, 3455, '\p{^Blk=sinhala}', "");
Expect(1, 3455, '\P{Blk=sinhala}', "");
Expect(0, 3455, '\P{^Blk=sinhala}', "");
Expect(1, 3583, '\p{Blk=_sinhala}', "");
Expect(0, 3583, '\p{^Blk=_sinhala}', "");
Expect(0, 3583, '\P{Blk=_sinhala}', "");
Expect(1, 3583, '\P{^Blk=_sinhala}', "");
Expect(0, 3455, '\p{Blk=_sinhala}', "");
Expect(1, 3455, '\p{^Blk=_sinhala}', "");
Expect(1, 3455, '\P{Blk=_sinhala}', "");
Expect(0, 3455, '\P{^Blk=_sinhala}', "");
Error('\p{Is_Block= :=SINHALA}');
Error('\P{Is_Block= :=SINHALA}');
Expect(1, 3583, '\p{Is_Block=sinhala}', "");
Expect(0, 3583, '\p{^Is_Block=sinhala}', "");
Expect(0, 3583, '\P{Is_Block=sinhala}', "");
Expect(1, 3583, '\P{^Is_Block=sinhala}', "");
Expect(0, 3455, '\p{Is_Block=sinhala}', "");
Expect(1, 3455, '\p{^Is_Block=sinhala}', "");
Expect(1, 3455, '\P{Is_Block=sinhala}', "");
Expect(0, 3455, '\P{^Is_Block=sinhala}', "");
Expect(1, 3583, '\p{Is_Block=__SINHALA}', "");
Expect(0, 3583, '\p{^Is_Block=__SINHALA}', "");
Expect(0, 3583, '\P{Is_Block=__SINHALA}', "");
Expect(1, 3583, '\P{^Is_Block=__SINHALA}', "");
Expect(0, 3455, '\p{Is_Block=__SINHALA}', "");
Expect(1, 3455, '\p{^Is_Block=__SINHALA}', "");
Expect(1, 3455, '\P{Is_Block=__SINHALA}', "");
Expect(0, 3455, '\P{^Is_Block=__SINHALA}', "");
Error('\p{Is_Blk=:=Sinhala}');
Error('\P{Is_Blk=:=Sinhala}');
Expect(1, 3583, '\p{Is_Blk:	sinhala}', "");
Expect(0, 3583, '\p{^Is_Blk:	sinhala}', "");
Expect(0, 3583, '\P{Is_Blk:	sinhala}', "");
Expect(1, 3583, '\P{^Is_Blk:	sinhala}', "");
Expect(0, 3455, '\p{Is_Blk:	sinhala}', "");
Expect(1, 3455, '\p{^Is_Blk:	sinhala}', "");
Expect(1, 3455, '\P{Is_Blk:	sinhala}', "");
Expect(0, 3455, '\P{^Is_Blk:	sinhala}', "");
Expect(1, 3583, '\p{Is_Blk=	 Sinhala}', "");
Expect(0, 3583, '\p{^Is_Blk=	 Sinhala}', "");
Expect(0, 3583, '\P{Is_Blk=	 Sinhala}', "");
Expect(1, 3583, '\P{^Is_Blk=	 Sinhala}', "");
Expect(0, 3455, '\p{Is_Blk=	 Sinhala}', "");
Expect(1, 3455, '\p{^Is_Blk=	 Sinhala}', "");
Expect(1, 3455, '\P{Is_Blk=	 Sinhala}', "");
Expect(0, 3455, '\P{^Is_Blk=	 Sinhala}', "");
Error('\p{Block::=glagolitic}');
Error('\P{Block::=glagolitic}');
Expect(1, 11359, '\p{Block=glagolitic}', "");
Expect(0, 11359, '\p{^Block=glagolitic}', "");
Expect(0, 11359, '\P{Block=glagolitic}', "");
Expect(1, 11359, '\P{^Block=glagolitic}', "");
Expect(0, 11263, '\p{Block=glagolitic}', "");
Expect(1, 11263, '\p{^Block=glagolitic}', "");
Expect(1, 11263, '\P{Block=glagolitic}', "");
Expect(0, 11263, '\P{^Block=glagolitic}', "");
Expect(1, 11359, '\p{Block=	glagolitic}', "");
Expect(0, 11359, '\p{^Block=	glagolitic}', "");
Expect(0, 11359, '\P{Block=	glagolitic}', "");
Expect(1, 11359, '\P{^Block=	glagolitic}', "");
Expect(0, 11263, '\p{Block=	glagolitic}', "");
Expect(1, 11263, '\p{^Block=	glagolitic}', "");
Expect(1, 11263, '\P{Block=	glagolitic}', "");
Expect(0, 11263, '\P{^Block=	glagolitic}', "");
Error('\p{Blk=-Glagolitic:=}');
Error('\P{Blk=-Glagolitic:=}');
Expect(1, 11359, '\p{Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Blk=glagolitic}', "");
Expect(0, 11359, '\P{Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Blk=glagolitic}', "");
Expect(0, 11263, '\p{Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Blk=glagolitic}', "");
Expect(1, 11263, '\P{Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Blk=glagolitic}', "");
Expect(1, 11359, '\p{Blk= GLAGOLITIC}', "");
Expect(0, 11359, '\p{^Blk= GLAGOLITIC}', "");
Expect(0, 11359, '\P{Blk= GLAGOLITIC}', "");
Expect(1, 11359, '\P{^Blk= GLAGOLITIC}', "");
Expect(0, 11263, '\p{Blk= GLAGOLITIC}', "");
Expect(1, 11263, '\p{^Blk= GLAGOLITIC}', "");
Expect(1, 11263, '\P{Blk= GLAGOLITIC}', "");
Expect(0, 11263, '\P{^Blk= GLAGOLITIC}', "");
Error('\p{Is_Block=/a/ -GLAGOLITIC}');
Error('\P{Is_Block=/a/ -GLAGOLITIC}');
Expect(1, 11359, '\p{Is_Block=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block=glagolitic}', "");
Expect(0, 11359, '\P{Is_Block=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block=glagolitic}', "");
Expect(0, 11263, '\p{Is_Block=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block=glagolitic}', "");
Expect(1, 11263, '\P{Is_Block=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block=glagolitic}', "");
Expect(1, 11359, '\p{Is_Block=_Glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block=_Glagolitic}', "");
Expect(0, 11359, '\P{Is_Block=_Glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block=_Glagolitic}', "");
Expect(0, 11263, '\p{Is_Block=_Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block=_Glagolitic}', "");
Expect(1, 11263, '\P{Is_Block=_Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block=_Glagolitic}', "");
Error('\p{Is_Blk=:=Glagolitic}');
Error('\P{Is_Blk=:=Glagolitic}');
Expect(1, 11359, '\p{Is_Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Blk=glagolitic}', "");
Expect(0, 11359, '\P{Is_Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Blk=glagolitic}', "");
Expect(0, 11263, '\p{Is_Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Blk=glagolitic}', "");
Expect(1, 11263, '\P{Is_Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Blk=glagolitic}', "");
Expect(1, 11359, '\p{Is_Blk=_GLAGOLITIC}', "");
Expect(0, 11359, '\p{^Is_Blk=_GLAGOLITIC}', "");
Expect(0, 11359, '\P{Is_Blk=_GLAGOLITIC}', "");
Expect(1, 11359, '\P{^Is_Blk=_GLAGOLITIC}', "");
Expect(0, 11263, '\p{Is_Blk=_GLAGOLITIC}', "");
Expect(1, 11263, '\p{^Is_Blk=_GLAGOLITIC}', "");
Expect(1, 11263, '\P{Is_Blk=_GLAGOLITIC}', "");
Expect(0, 11263, '\P{^Is_Blk=_GLAGOLITIC}', "");
Error('\p{Block=	tagalog/a/}');
Error('\P{Block=	tagalog/a/}');
Expect(1, 5919, '\p{Block=tagalog}', "");
Expect(0, 5919, '\p{^Block=tagalog}', "");
Expect(0, 5919, '\P{Block=tagalog}', "");
Expect(1, 5919, '\P{^Block=tagalog}', "");
Expect(0, 5887, '\p{Block=tagalog}', "");
Expect(1, 5887, '\p{^Block=tagalog}', "");
Expect(1, 5887, '\P{Block=tagalog}', "");
Expect(0, 5887, '\P{^Block=tagalog}', "");
Expect(1, 5919, '\p{Block:	_tagalog}', "");
Expect(0, 5919, '\p{^Block:	_tagalog}', "");
Expect(0, 5919, '\P{Block:	_tagalog}', "");
Expect(1, 5919, '\P{^Block:	_tagalog}', "");
Expect(0, 5887, '\p{Block:	_tagalog}', "");
Expect(1, 5887, '\p{^Block:	_tagalog}', "");
Expect(1, 5887, '\P{Block:	_tagalog}', "");
Expect(0, 5887, '\P{^Block:	_tagalog}', "");
Error('\p{Blk=/a/TAGALOG}');
Error('\P{Blk=/a/TAGALOG}');
Expect(1, 5919, '\p{Blk=tagalog}', "");
Expect(0, 5919, '\p{^Blk=tagalog}', "");
Expect(0, 5919, '\P{Blk=tagalog}', "");
Expect(1, 5919, '\P{^Blk=tagalog}', "");
Expect(0, 5887, '\p{Blk=tagalog}', "");
Expect(1, 5887, '\p{^Blk=tagalog}', "");
Expect(1, 5887, '\P{Blk=tagalog}', "");
Expect(0, 5887, '\P{^Blk=tagalog}', "");
Expect(1, 5919, '\p{Blk= 	TAGALOG}', "");
Expect(0, 5919, '\p{^Blk= 	TAGALOG}', "");
Expect(0, 5919, '\P{Blk= 	TAGALOG}', "");
Expect(1, 5919, '\P{^Blk= 	TAGALOG}', "");
Expect(0, 5887, '\p{Blk= 	TAGALOG}', "");
Expect(1, 5887, '\p{^Blk= 	TAGALOG}', "");
Expect(1, 5887, '\P{Blk= 	TAGALOG}', "");
Expect(0, 5887, '\P{^Blk= 	TAGALOG}', "");
Error('\p{Is_Block=_	Tagalog:=}');
Error('\P{Is_Block=_	Tagalog:=}');
Expect(1, 5919, '\p{Is_Block=tagalog}', "");
Expect(0, 5919, '\p{^Is_Block=tagalog}', "");
Expect(0, 5919, '\P{Is_Block=tagalog}', "");
Expect(1, 5919, '\P{^Is_Block=tagalog}', "");
Expect(0, 5887, '\p{Is_Block=tagalog}', "");
Expect(1, 5887, '\p{^Is_Block=tagalog}', "");
Expect(1, 5887, '\P{Is_Block=tagalog}', "");
Expect(0, 5887, '\P{^Is_Block=tagalog}', "");
Expect(1, 5919, '\p{Is_Block= 	Tagalog}', "");
Expect(0, 5919, '\p{^Is_Block= 	Tagalog}', "");
Expect(0, 5919, '\P{Is_Block= 	Tagalog}', "");
Expect(1, 5919, '\P{^Is_Block= 	Tagalog}', "");
Expect(0, 5887, '\p{Is_Block= 	Tagalog}', "");
Expect(1, 5887, '\p{^Is_Block= 	Tagalog}', "");
Expect(1, 5887, '\P{Is_Block= 	Tagalog}', "");
Expect(0, 5887, '\P{^Is_Block= 	Tagalog}', "");
Error('\p{Is_Blk=_:=TAGALOG}');
Error('\P{Is_Blk=_:=TAGALOG}');
Expect(1, 5919, '\p{Is_Blk: tagalog}', "");
Expect(0, 5919, '\p{^Is_Blk: tagalog}', "");
Expect(0, 5919, '\P{Is_Blk: tagalog}', "");
Expect(1, 5919, '\P{^Is_Blk: tagalog}', "");
Expect(0, 5887, '\p{Is_Blk: tagalog}', "");
Expect(1, 5887, '\p{^Is_Blk: tagalog}', "");
Expect(1, 5887, '\P{Is_Blk: tagalog}', "");
Expect(0, 5887, '\P{^Is_Blk: tagalog}', "");
Expect(1, 5919, '\p{Is_Blk= TAGALOG}', "");
Expect(0, 5919, '\p{^Is_Blk= TAGALOG}', "");
Expect(0, 5919, '\P{Is_Blk= TAGALOG}', "");
Expect(1, 5919, '\P{^Is_Blk= TAGALOG}', "");
Expect(0, 5887, '\p{Is_Blk= TAGALOG}', "");
Expect(1, 5887, '\p{^Is_Blk= TAGALOG}', "");
Expect(1, 5887, '\P{Is_Blk= TAGALOG}', "");
Expect(0, 5887, '\P{^Is_Blk= TAGALOG}', "");
Error('\p{Block=	 kharoshthi/a/}');
Error('\P{Block=	 kharoshthi/a/}');
Expect(1, 68191, '\p{Block: kharoshthi}', "");
Expect(0, 68191, '\p{^Block: kharoshthi}', "");
Expect(0, 68191, '\P{Block: kharoshthi}', "");
Expect(1, 68191, '\P{^Block: kharoshthi}', "");
Expect(0, 68095, '\p{Block: kharoshthi}', "");
Expect(1, 68095, '\p{^Block: kharoshthi}', "");
Expect(1, 68095, '\P{Block: kharoshthi}', "");
Expect(0, 68095, '\P{^Block: kharoshthi}', "");
Expect(1, 68191, '\p{Block=-KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Block=-KHAROSHTHI}', "");
Expect(0, 68191, '\P{Block=-KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Block=-KHAROSHTHI}', "");
Expect(0, 68095, '\p{Block=-KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Block=-KHAROSHTHI}', "");
Expect(1, 68095, '\P{Block=-KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Block=-KHAROSHTHI}', "");
Error('\p{Blk=		KHAROSHTHI:=}');
Error('\P{Blk=		KHAROSHTHI:=}');
Expect(1, 68191, '\p{Blk=kharoshthi}', "");
Expect(0, 68191, '\p{^Blk=kharoshthi}', "");
Expect(0, 68191, '\P{Blk=kharoshthi}', "");
Expect(1, 68191, '\P{^Blk=kharoshthi}', "");
Expect(0, 68095, '\p{Blk=kharoshthi}', "");
Expect(1, 68095, '\p{^Blk=kharoshthi}', "");
Expect(1, 68095, '\P{Blk=kharoshthi}', "");
Expect(0, 68095, '\P{^Blk=kharoshthi}', "");
Expect(1, 68191, '\p{Blk=_Kharoshthi}', "");
Expect(0, 68191, '\p{^Blk=_Kharoshthi}', "");
Expect(0, 68191, '\P{Blk=_Kharoshthi}', "");
Expect(1, 68191, '\P{^Blk=_Kharoshthi}', "");
Expect(0, 68095, '\p{Blk=_Kharoshthi}', "");
Expect(1, 68095, '\p{^Blk=_Kharoshthi}', "");
Expect(1, 68095, '\P{Blk=_Kharoshthi}', "");
Expect(0, 68095, '\P{^Blk=_Kharoshthi}', "");
Error('\p{Is_Block=  Kharoshthi/a/}');
Error('\P{Is_Block=  Kharoshthi/a/}');
Expect(1, 68191, '\p{Is_Block=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Block=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Block=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Block=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Block=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Block=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Block=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Block=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Block=	kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Block=	kharoshthi}', "");
Expect(0, 68191, '\P{Is_Block=	kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Block=	kharoshthi}', "");
Expect(0, 68095, '\p{Is_Block=	kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Block=	kharoshthi}', "");
Expect(1, 68095, '\P{Is_Block=	kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Block=	kharoshthi}', "");
Error('\p{Is_Blk=/a/-	KHAROSHTHI}');
Error('\P{Is_Blk=/a/-	KHAROSHTHI}');
Expect(1, 68191, '\p{Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Blk= 	KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Is_Blk= 	KHAROSHTHI}', "");
Expect(0, 68191, '\P{Is_Blk= 	KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Is_Blk= 	KHAROSHTHI}', "");
Expect(0, 68095, '\p{Is_Blk= 	KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Is_Blk= 	KHAROSHTHI}', "");
Expect(1, 68095, '\P{Is_Blk= 	KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Is_Blk= 	KHAROSHTHI}', "");
Error('\p{Block=_ arabic-Supplement/a/}');
Error('\P{Block=_ arabic-Supplement/a/}');
Expect(1, 1919, '\p{Block=arabicsupplement}', "");
Expect(0, 1919, '\p{^Block=arabicsupplement}', "");
Expect(0, 1919, '\P{Block=arabicsupplement}', "");
Expect(1, 1919, '\P{^Block=arabicsupplement}', "");
Expect(0, 1871, '\p{Block=arabicsupplement}', "");
Expect(1, 1871, '\p{^Block=arabicsupplement}', "");
Expect(1, 1871, '\P{Block=arabicsupplement}', "");
Expect(0, 1871, '\P{^Block=arabicsupplement}', "");
Expect(1, 1919, '\p{Block=		arabic-Supplement}', "");
Expect(0, 1919, '\p{^Block=		arabic-Supplement}', "");
Expect(0, 1919, '\P{Block=		arabic-Supplement}', "");
Expect(1, 1919, '\P{^Block=		arabic-Supplement}', "");
Expect(0, 1871, '\p{Block=		arabic-Supplement}', "");
Expect(1, 1871, '\p{^Block=		arabic-Supplement}', "");
Expect(1, 1871, '\P{Block=		arabic-Supplement}', "");
Expect(0, 1871, '\P{^Block=		arabic-Supplement}', "");
Error('\p{Blk=-_ArabicSupplement:=}');
Error('\P{Blk=-_ArabicSupplement:=}');
Expect(1, 1919, '\p{Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Blk=- Arabic SUPPLEMENT}', "");
Expect(0, 1919, '\p{^Blk=- Arabic SUPPLEMENT}', "");
Expect(0, 1919, '\P{Blk=- Arabic SUPPLEMENT}', "");
Expect(1, 1919, '\P{^Blk=- Arabic SUPPLEMENT}', "");
Expect(0, 1871, '\p{Blk=- Arabic SUPPLEMENT}', "");
Expect(1, 1871, '\p{^Blk=- Arabic SUPPLEMENT}', "");
Expect(1, 1871, '\P{Blk=- Arabic SUPPLEMENT}', "");
Expect(0, 1871, '\P{^Blk=- Arabic SUPPLEMENT}', "");
Error('\p{Is_Block=:=ARABIC-Supplement}');
Error('\P{Is_Block=:=ARABIC-Supplement}');
Expect(1, 1919, '\p{Is_Block=arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Block=arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Block=arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Block=arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Block=arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Block=arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Block=arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Block=arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Block= Arabic-supplement}', "");
Expect(0, 1919, '\p{^Is_Block= Arabic-supplement}', "");
Expect(0, 1919, '\P{Is_Block= Arabic-supplement}', "");
Expect(1, 1919, '\P{^Is_Block= Arabic-supplement}', "");
Expect(0, 1871, '\p{Is_Block= Arabic-supplement}', "");
Expect(1, 1871, '\p{^Is_Block= Arabic-supplement}', "");
Expect(1, 1871, '\P{Is_Block= Arabic-supplement}', "");
Expect(0, 1871, '\P{^Is_Block= Arabic-supplement}', "");
Error('\p{Is_Blk=/a/Arabic-Supplement}');
Error('\P{Is_Blk=/a/Arabic-Supplement}');
Expect(1, 1919, '\p{Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(0, 1919, '\p{^Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(0, 1919, '\P{Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(1, 1919, '\P{^Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(0, 1871, '\p{Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(1, 1871, '\p{^Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(1, 1871, '\P{Is_Blk=_Arabic	SUPPLEMENT}', "");
Expect(0, 1871, '\P{^Is_Blk=_Arabic	SUPPLEMENT}', "");
Error('\p{Block=	:=cuneiform	numbersAnd_punctuation}');
Error('\P{Block=	:=cuneiform	numbersAnd_punctuation}');
Expect(1, 74879, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(0, 74879, '\p{^Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(0, 74879, '\P{Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(1, 74879, '\P{^Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(0, 74751, '\p{Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(1, 74751, '\p{^Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(1, 74751, '\P{Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Expect(0, 74751, '\P{^Block=-Cuneiform	NUMBERS_And Punctuation}', "");
Error('\p{Blk=-/a/CUNEIFORM NUMBERS-And_Punctuation}');
Error('\P{Blk=-/a/CUNEIFORM NUMBERS-And_Punctuation}');
Expect(1, 74879, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(0, 74879, '\p{^Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(0, 74879, '\P{Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(1, 74879, '\P{^Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(0, 74751, '\p{Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(1, 74751, '\p{^Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(1, 74751, '\P{Blk=	-Cuneiform-numbers_and Punctuation}', "");
Expect(0, 74751, '\P{^Blk=	-Cuneiform-numbers_and Punctuation}', "");
Error('\p{Is_Block=:=- Cuneiform NUMBERS_AND-PUNCTUATION}');
Error('\P{Is_Block=:=- Cuneiform NUMBERS_AND-PUNCTUATION}');
Expect(1, 74879, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(0, 74879, '\p{^Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(0, 74879, '\P{Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(1, 74879, '\P{^Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(0, 74751, '\p{Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(1, 74751, '\p{^Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(1, 74751, '\P{Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Expect(0, 74751, '\P{^Is_Block=	-CUNEIFORM-Numbers_and Punctuation}', "");
Error('\p{Is_Blk=-cuneiformnumbers and Punctuation:=}');
Error('\P{Is_Blk=-cuneiformnumbers and Punctuation:=}');
Expect(1, 74879, '\p{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(0, 74879, '\p{^Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(0, 74879, '\P{Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(1, 74879, '\P{^Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(0, 74751, '\p{Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(1, 74751, '\p{^Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(1, 74751, '\P{Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Expect(0, 74751, '\P{^Is_Blk=--Cuneiform-Numbers	And	Punctuation}', "");
Error('\p{Block=_devanagari:=extended}');
Error('\P{Block=_devanagari:=extended}');
Expect(1, 43263, '\p{Block=devanagariextended}', "");
Expect(0, 43263, '\p{^Block=devanagariextended}', "");
Expect(0, 43263, '\P{Block=devanagariextended}', "");
Expect(1, 43263, '\P{^Block=devanagariextended}', "");
Expect(0, 43231, '\p{Block=devanagariextended}', "");
Expect(1, 43231, '\p{^Block=devanagariextended}', "");
Expect(1, 43231, '\P{Block=devanagariextended}', "");
Expect(0, 43231, '\P{^Block=devanagariextended}', "");
Expect(1, 43263, '\p{Block=-	Devanagari-EXTENDED}', "");
Expect(0, 43263, '\p{^Block=-	Devanagari-EXTENDED}', "");
Expect(0, 43263, '\P{Block=-	Devanagari-EXTENDED}', "");
Expect(1, 43263, '\P{^Block=-	Devanagari-EXTENDED}', "");
Expect(0, 43231, '\p{Block=-	Devanagari-EXTENDED}', "");
Expect(1, 43231, '\p{^Block=-	Devanagari-EXTENDED}', "");
Expect(1, 43231, '\P{Block=-	Devanagari-EXTENDED}', "");
Expect(0, 43231, '\P{^Block=-	Devanagari-EXTENDED}', "");
Error('\p{Blk=	Devanagari_Extended:=}');
Error('\P{Blk=	Devanagari_Extended:=}');
Expect(1, 43263, '\p{Blk=devanagariextended}', "");
Expect(0, 43263, '\p{^Blk=devanagariextended}', "");
Expect(0, 43263, '\P{Blk=devanagariextended}', "");
Expect(1, 43263, '\P{^Blk=devanagariextended}', "");
Expect(0, 43231, '\p{Blk=devanagariextended}', "");
Expect(1, 43231, '\p{^Blk=devanagariextended}', "");
Expect(1, 43231, '\P{Blk=devanagariextended}', "");
Expect(0, 43231, '\P{^Blk=devanagariextended}', "");
Expect(1, 43263, '\p{Blk=_Devanagari EXTENDED}', "");
Expect(0, 43263, '\p{^Blk=_Devanagari EXTENDED}', "");
Expect(0, 43263, '\P{Blk=_Devanagari EXTENDED}', "");
Expect(1, 43263, '\P{^Blk=_Devanagari EXTENDED}', "");
Expect(0, 43231, '\p{Blk=_Devanagari EXTENDED}', "");
Expect(1, 43231, '\p{^Blk=_Devanagari EXTENDED}', "");
Expect(1, 43231, '\P{Blk=_Devanagari EXTENDED}', "");
Expect(0, 43231, '\P{^Blk=_Devanagari EXTENDED}', "");
Error('\p{Is_Block= -devanagari	extended:=}');
Error('\P{Is_Block= -devanagari	extended:=}');
Expect(1, 43263, '\p{Is_Block=devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Block=devanagariextended}', "");
Expect(0, 43263, '\P{Is_Block=devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Block=devanagariextended}', "");
Expect(0, 43231, '\p{Is_Block=devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Block=devanagariextended}', "");
Expect(1, 43231, '\P{Is_Block=devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Block=devanagariextended}', "");
Expect(1, 43263, '\p{Is_Block=	DevanagariExtended}', "");
Expect(0, 43263, '\p{^Is_Block=	DevanagariExtended}', "");
Expect(0, 43263, '\P{Is_Block=	DevanagariExtended}', "");
Expect(1, 43263, '\P{^Is_Block=	DevanagariExtended}', "");
Expect(0, 43231, '\p{Is_Block=	DevanagariExtended}', "");
Expect(1, 43231, '\p{^Is_Block=	DevanagariExtended}', "");
Expect(1, 43231, '\P{Is_Block=	DevanagariExtended}', "");
Expect(0, 43231, '\P{^Is_Block=	DevanagariExtended}', "");
Error('\p{Is_Blk:    DEVANAGARI/a/EXTENDED}');
Error('\P{Is_Blk:    DEVANAGARI/a/EXTENDED}');
Expect(1, 43263, '\p{Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\P{Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\p{Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\P{Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\p{Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(0, 43263, '\p{^Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(0, 43263, '\P{Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(1, 43263, '\P{^Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(0, 43231, '\p{Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(1, 43231, '\p{^Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(1, 43231, '\P{Is_Blk:	 _DEVANAGARI-Extended}', "");
Expect(0, 43231, '\P{^Is_Blk:	 _DEVANAGARI-Extended}', "");
Error('\p{Block: /a/--yi_syllables}');
Error('\P{Block: /a/--yi_syllables}');
Expect(1, 42127, '\p{Block=yisyllables}', "");
Expect(0, 42127, '\p{^Block=yisyllables}', "");
Expect(0, 42127, '\P{Block=yisyllables}', "");
Expect(1, 42127, '\P{^Block=yisyllables}', "");
Expect(0, 40959, '\p{Block=yisyllables}', "");
Expect(1, 40959, '\p{^Block=yisyllables}', "");
Expect(1, 40959, '\P{Block=yisyllables}', "");
Expect(0, 40959, '\P{^Block=yisyllables}', "");
Expect(1, 42127, '\p{Block:   _Yisyllables}', "");
Expect(0, 42127, '\p{^Block:   _Yisyllables}', "");
Expect(0, 42127, '\P{Block:   _Yisyllables}', "");
Expect(1, 42127, '\P{^Block:   _Yisyllables}', "");
Expect(0, 40959, '\p{Block:   _Yisyllables}', "");
Expect(1, 40959, '\p{^Block:   _Yisyllables}', "");
Expect(1, 40959, '\P{Block:   _Yisyllables}', "");
Expect(0, 40959, '\P{^Block:   _Yisyllables}', "");
Error('\p{Blk=_Yi/a/SYLLABLES}');
Error('\P{Blk=_Yi/a/SYLLABLES}');
Expect(1, 42127, '\p{Blk=yisyllables}', "");
Expect(0, 42127, '\p{^Blk=yisyllables}', "");
Expect(0, 42127, '\P{Blk=yisyllables}', "");
Expect(1, 42127, '\P{^Blk=yisyllables}', "");
Expect(0, 40959, '\p{Blk=yisyllables}', "");
Expect(1, 40959, '\p{^Blk=yisyllables}', "");
Expect(1, 40959, '\P{Blk=yisyllables}', "");
Expect(0, 40959, '\P{^Blk=yisyllables}', "");
Expect(1, 42127, '\p{Blk=		Yi Syllables}', "");
Expect(0, 42127, '\p{^Blk=		Yi Syllables}', "");
Expect(0, 42127, '\P{Blk=		Yi Syllables}', "");
Expect(1, 42127, '\P{^Blk=		Yi Syllables}', "");
Expect(0, 40959, '\p{Blk=		Yi Syllables}', "");
Expect(1, 40959, '\p{^Blk=		Yi Syllables}', "");
Expect(1, 40959, '\P{Blk=		Yi Syllables}', "");
Expect(0, 40959, '\P{^Blk=		Yi Syllables}', "");
Error('\p{Is_Block:  	Yi Syllables/a/}');
Error('\P{Is_Block:  	Yi Syllables/a/}');
Expect(1, 42127, '\p{Is_Block=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Block=yisyllables}', "");
Expect(0, 42127, '\P{Is_Block=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Block=yisyllables}', "");
Expect(0, 40959, '\p{Is_Block=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Block=yisyllables}', "");
Expect(1, 40959, '\P{Is_Block=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Block=yisyllables}', "");
Expect(1, 42127, '\p{Is_Block=_Yi_Syllables}', "");
Expect(0, 42127, '\p{^Is_Block=_Yi_Syllables}', "");
Expect(0, 42127, '\P{Is_Block=_Yi_Syllables}', "");
Expect(1, 42127, '\P{^Is_Block=_Yi_Syllables}', "");
Expect(0, 40959, '\p{Is_Block=_Yi_Syllables}', "");
Expect(1, 40959, '\p{^Is_Block=_Yi_Syllables}', "");
Expect(1, 40959, '\P{Is_Block=_Yi_Syllables}', "");
Expect(0, 40959, '\P{^Is_Block=_Yi_Syllables}', "");
Error('\p{Is_Blk=_ Yi/a/syllables}');
Error('\P{Is_Blk=_ Yi/a/syllables}');
Expect(1, 42127, '\p{Is_Blk=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Blk=yisyllables}', "");
Expect(0, 42127, '\P{Is_Blk=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Blk=yisyllables}', "");
Expect(0, 40959, '\p{Is_Blk=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Blk=yisyllables}', "");
Expect(1, 40959, '\P{Is_Blk=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Blk=yisyllables}', "");
Expect(1, 42127, '\p{Is_Blk: -Yi	Syllables}', "");
Expect(0, 42127, '\p{^Is_Blk: -Yi	Syllables}', "");
Expect(0, 42127, '\P{Is_Blk: -Yi	Syllables}', "");
Expect(1, 42127, '\P{^Is_Blk: -Yi	Syllables}', "");
Expect(0, 40959, '\p{Is_Blk: -Yi	Syllables}', "");
Expect(1, 40959, '\p{^Is_Blk: -Yi	Syllables}', "");
Expect(1, 40959, '\P{Is_Blk: -Yi	Syllables}', "");
Expect(0, 40959, '\P{^Is_Blk: -Yi	Syllables}', "");
Error('\p{Block=:=- combining-Half-marks}');
Error('\P{Block=:=- combining-Half-marks}');
Expect(1, 65071, '\p{Block=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Block=combininghalfmarks}', "");
Expect(0, 65071, '\P{Block=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Block=combininghalfmarks}', "");
Expect(0, 65055, '\p{Block=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Block=combininghalfmarks}', "");
Expect(1, 65055, '\P{Block=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Block=combininghalfmarks}', "");
Expect(1, 65071, '\p{Block=	Combining	HALFmarks}', "");
Expect(0, 65071, '\p{^Block=	Combining	HALFmarks}', "");
Expect(0, 65071, '\P{Block=	Combining	HALFmarks}', "");
Expect(1, 65071, '\P{^Block=	Combining	HALFmarks}', "");
Expect(0, 65055, '\p{Block=	Combining	HALFmarks}', "");
Expect(1, 65055, '\p{^Block=	Combining	HALFmarks}', "");
Expect(1, 65055, '\P{Block=	Combining	HALFmarks}', "");
Expect(0, 65055, '\P{^Block=	Combining	HALFmarks}', "");
Error('\p{Blk=-combining HALF	marks:=}');
Error('\P{Blk=-combining HALF	marks:=}');
Expect(1, 65071, '\p{Blk:combininghalfmarks}', "");
Expect(0, 65071, '\p{^Blk:combininghalfmarks}', "");
Expect(0, 65071, '\P{Blk:combininghalfmarks}', "");
Expect(1, 65071, '\P{^Blk:combininghalfmarks}', "");
Expect(0, 65055, '\p{Blk:combininghalfmarks}', "");
Expect(1, 65055, '\p{^Blk:combininghalfmarks}', "");
Expect(1, 65055, '\P{Blk:combininghalfmarks}', "");
Expect(0, 65055, '\P{^Blk:combininghalfmarks}', "");
Expect(1, 65071, '\p{Blk=_ Combining-half-marks}', "");
Expect(0, 65071, '\p{^Blk=_ Combining-half-marks}', "");
Expect(0, 65071, '\P{Blk=_ Combining-half-marks}', "");
Expect(1, 65071, '\P{^Blk=_ Combining-half-marks}', "");
Expect(0, 65055, '\p{Blk=_ Combining-half-marks}', "");
Expect(1, 65055, '\p{^Blk=_ Combining-half-marks}', "");
Expect(1, 65055, '\P{Blk=_ Combining-half-marks}', "");
Expect(0, 65055, '\P{^Blk=_ Combining-half-marks}', "");
Error('\p{Is_Block=_-Combininghalf	Marks:=}');
Error('\P{Is_Block=_-Combininghalf	Marks:=}');
Expect(1, 65071, '\p{Is_Block:combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Block:combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Block:combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Block:combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Block:combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Block:combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Block:combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Block:combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Block=	 COMBININGhalf MARKS}', "");
Expect(0, 65071, '\p{^Is_Block=	 COMBININGhalf MARKS}', "");
Expect(0, 65071, '\P{Is_Block=	 COMBININGhalf MARKS}', "");
Expect(1, 65071, '\P{^Is_Block=	 COMBININGhalf MARKS}', "");
Expect(0, 65055, '\p{Is_Block=	 COMBININGhalf MARKS}', "");
Expect(1, 65055, '\p{^Is_Block=	 COMBININGhalf MARKS}', "");
Expect(1, 65055, '\P{Is_Block=	 COMBININGhalf MARKS}', "");
Expect(0, 65055, '\P{^Is_Block=	 COMBININGhalf MARKS}', "");
Error('\p{Is_Blk= -combining:=Half	MARKS}');
Error('\P{Is_Blk= -combining:=Half	MARKS}');
Expect(1, 65071, '\p{Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Blk=		CombiningHalfMARKS}', "");
Expect(0, 65071, '\p{^Is_Blk=		CombiningHalfMARKS}', "");
Expect(0, 65071, '\P{Is_Blk=		CombiningHalfMARKS}', "");
Expect(1, 65071, '\P{^Is_Blk=		CombiningHalfMARKS}', "");
Expect(0, 65055, '\p{Is_Blk=		CombiningHalfMARKS}', "");
Expect(1, 65055, '\p{^Is_Blk=		CombiningHalfMARKS}', "");
Expect(1, 65055, '\P{Is_Blk=		CombiningHalfMARKS}', "");
Expect(0, 65055, '\P{^Is_Blk=		CombiningHalfMARKS}', "");
Error('\p{Block= /a/miscellaneousSYMBOLSand-Arrows}');
Error('\P{Block= /a/miscellaneousSYMBOLSand-Arrows}');
Expect(1, 11263, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(0, 11263, '\p{^Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(0, 11263, '\P{Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(1, 11263, '\P{^Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(0, 11007, '\p{Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(1, 11007, '\p{^Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(1, 11007, '\P{Block=_ MiscellaneousSymbols	andArrows}', "");
Expect(0, 11007, '\P{^Block=_ MiscellaneousSymbols	andArrows}', "");
Error('\p{Blk=-	Miscellaneous_Symbols	And/a/Arrows}');
Error('\P{Blk=-	Miscellaneous_Symbols	And/a/Arrows}');
Expect(1, 11263, '\p{Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(0, 11263, '\p{^Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(0, 11263, '\P{Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(1, 11263, '\P{^Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(0, 11007, '\p{Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(1, 11007, '\p{^Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(1, 11007, '\P{Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Expect(0, 11007, '\P{^Blk=	-Miscellaneous SYMBOLSAnd ARROWS}', "");
Error('\p{Is_Block=__miscellaneous_Symbols And:=ARROWS}');
Error('\P{Is_Block=__miscellaneous_Symbols And:=ARROWS}');
Expect(1, 11263, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(0, 11263, '\p{^Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(0, 11263, '\P{Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(1, 11263, '\P{^Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(0, 11007, '\p{Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(1, 11007, '\p{^Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(1, 11007, '\P{Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Expect(0, 11007, '\P{^Is_Block:	- Miscellaneous_Symbols	And Arrows}', "");
Error('\p{Is_Blk= /a/MISCELLANEOUS_Symbols	And Arrows}');
Error('\P{Is_Blk= /a/MISCELLANEOUS_Symbols	And Arrows}');
Expect(1, 11263, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(0, 11263, '\p{^Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(0, 11263, '\P{Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(1, 11263, '\P{^Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(0, 11007, '\p{Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(1, 11007, '\p{^Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(1, 11007, '\P{Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Expect(0, 11007, '\P{^Is_Blk=--MISCELLANEOUS_SymbolsAnd_Arrows}', "");
Error('\p{Block=:=Halfwidth And_fullwidth-Forms}');
Error('\P{Block=:=Halfwidth And_fullwidth-Forms}');
Expect(1, 65519, '\p{Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(0, 65519, '\p{^Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(0, 65519, '\P{Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(1, 65519, '\P{^Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(0, 65279, '\p{Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(1, 65279, '\p{^Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(1, 65279, '\P{Block=	 Halfwidth	AndFullwidthforms}', "");
Expect(0, 65279, '\P{^Block=	 Halfwidth	AndFullwidthforms}', "");
Error('\p{Blk=	/a/Halfwidth_and_fullwidth Forms}');
Error('\P{Blk=	/a/Halfwidth_and_fullwidth Forms}');
Expect(1, 65519, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(0, 65519, '\p{^Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(0, 65519, '\P{Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(1, 65519, '\P{^Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(0, 65279, '\p{Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(1, 65279, '\p{^Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(1, 65279, '\P{Blk= halfwidth	and_Fullwidth Forms}', "");
Expect(0, 65279, '\P{^Blk= halfwidth	and_Fullwidth Forms}', "");
Error('\p{Is_Block= /a/halfwidth-AND_fullwidth	forms}');
Error('\P{Is_Block= /a/halfwidth-AND_fullwidth	forms}');
Expect(1, 65519, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(0, 65519, '\p{^Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(0, 65519, '\P{Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(1, 65519, '\P{^Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(0, 65279, '\p{Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(1, 65279, '\p{^Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(1, 65279, '\P{Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Expect(0, 65279, '\P{^Is_Block=_ Halfwidth	And Fullwidth_Forms}', "");
Error('\p{Is_Blk=_/a/HALFWIDTH-and-Fullwidth	Forms}');
Error('\P{Is_Blk=_/a/HALFWIDTH-and-Fullwidth	Forms}');
Expect(1, 65519, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(0, 65519, '\p{^Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(0, 65519, '\P{Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(1, 65519, '\P{^Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(0, 65279, '\p{Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(1, 65279, '\p{^Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(1, 65279, '\P{Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Expect(0, 65279, '\P{^Is_Blk=	_Halfwidth	and	FullwidthForms}', "");
Error('\p{Block=_SupplementaryPrivate	Use/a/AreaB}');
Error('\P{Block=_SupplementaryPrivate	Use/a/AreaB}');
Expect(1, 1048576, '\p{Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Block=-Supplementary-private	Use-area-B}', "");
Expect(0, 1048576, '\p{^Block=-Supplementary-private	Use-area-B}', "");
Expect(0, 1048576, '\P{Block=-Supplementary-private	Use-area-B}', "");
Expect(1, 1048576, '\P{^Block=-Supplementary-private	Use-area-B}', "");
Expect(0, 1, '\p{Block=-Supplementary-private	Use-area-B}', "");
Expect(1, 1, '\p{^Block=-Supplementary-private	Use-area-B}', "");
Expect(1, 1, '\P{Block=-Supplementary-private	Use-area-B}', "");
Expect(0, 1, '\P{^Block=-Supplementary-private	Use-area-B}', "");
Error('\p{Blk=_Supplementary/a/Private Use areab}');
Error('\P{Blk=_Supplementary/a/Private Use areab}');
Expect(1, 1048576, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(0, 1048576, '\p{^Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(0, 1048576, '\P{Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(1, 1048576, '\P{^Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(0, 1, '\p{Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(1, 1, '\p{^Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(1, 1, '\P{Blk= SupplementaryprivateUSE-AREA-B}', "");
Expect(0, 1, '\P{^Blk= SupplementaryprivateUSE-AREA-B}', "");
Error('\p{Is_Block=- Supplementary:=Private-Use-Area-B}');
Error('\P{Is_Block=- Supplementary:=Private-Use-Area-B}');
Expect(1, 1048576, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(0, 1048576, '\p{^Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(0, 1048576, '\P{Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(1, 1048576, '\P{^Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(0, 1, '\p{Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(1, 1, '\p{^Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(1, 1, '\P{Is_Block=-_Supplementary Private use-Area_B}', "");
Expect(0, 1, '\P{^Is_Block=-_Supplementary Private use-Area_B}', "");
Error('\p{Is_Blk=_	SUPPLEMENTARY	Private:=Use AREAB}');
Error('\P{Is_Blk=_	SUPPLEMENTARY	Private:=Use AREAB}');
Expect(1, 1048576, '\p{Is_Blk:   supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Blk:   supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Blk:   supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Blk:   supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Blk:   supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Blk:   supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Blk:   supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Blk:   supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(0, 1048576, '\p{^Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(0, 1048576, '\P{Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(1, 1048576, '\P{^Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(0, 1, '\p{Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(1, 1, '\p{^Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(1, 1, '\P{Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Expect(0, 1, '\P{^Is_Blk=-	supplementary PRIVATE	use AREA-b}', "");
Error('\p{Block:   /a/ _Sundanese}');
Error('\P{Block:   /a/ _Sundanese}');
Expect(1, 7103, '\p{Block=sundanese}', "");
Expect(0, 7103, '\p{^Block=sundanese}', "");
Expect(0, 7103, '\P{Block=sundanese}', "");
Expect(1, 7103, '\P{^Block=sundanese}', "");
Expect(0, 7039, '\p{Block=sundanese}', "");
Expect(1, 7039, '\p{^Block=sundanese}', "");
Expect(1, 7039, '\P{Block=sundanese}', "");
Expect(0, 7039, '\P{^Block=sundanese}', "");
Expect(1, 7103, '\p{Block=	_Sundanese}', "");
Expect(0, 7103, '\p{^Block=	_Sundanese}', "");
Expect(0, 7103, '\P{Block=	_Sundanese}', "");
Expect(1, 7103, '\P{^Block=	_Sundanese}', "");
Expect(0, 7039, '\p{Block=	_Sundanese}', "");
Expect(1, 7039, '\p{^Block=	_Sundanese}', "");
Expect(1, 7039, '\P{Block=	_Sundanese}', "");
Expect(0, 7039, '\P{^Block=	_Sundanese}', "");
Error('\p{Blk:   	:=sundanese}');
Error('\P{Blk:   	:=sundanese}');
Expect(1, 7103, '\p{Blk=sundanese}', "");
Expect(0, 7103, '\p{^Blk=sundanese}', "");
Expect(0, 7103, '\P{Blk=sundanese}', "");
Expect(1, 7103, '\P{^Blk=sundanese}', "");
Expect(0, 7039, '\p{Blk=sundanese}', "");
Expect(1, 7039, '\p{^Blk=sundanese}', "");
Expect(1, 7039, '\P{Blk=sundanese}', "");
Expect(0, 7039, '\P{^Blk=sundanese}', "");
Expect(1, 7103, '\p{Blk=	 sundanese}', "");
Expect(0, 7103, '\p{^Blk=	 sundanese}', "");
Expect(0, 7103, '\P{Blk=	 sundanese}', "");
Expect(1, 7103, '\P{^Blk=	 sundanese}', "");
Expect(0, 7039, '\p{Blk=	 sundanese}', "");
Expect(1, 7039, '\p{^Blk=	 sundanese}', "");
Expect(1, 7039, '\P{Blk=	 sundanese}', "");
Expect(0, 7039, '\P{^Blk=	 sundanese}', "");
Error('\p{Is_Block=_ Sundanese/a/}');
Error('\P{Is_Block=_ Sundanese/a/}');
Expect(1, 7103, '\p{Is_Block=sundanese}', "");
Expect(0, 7103, '\p{^Is_Block=sundanese}', "");
Expect(0, 7103, '\P{Is_Block=sundanese}', "");
Expect(1, 7103, '\P{^Is_Block=sundanese}', "");
Expect(0, 7039, '\p{Is_Block=sundanese}', "");
Expect(1, 7039, '\p{^Is_Block=sundanese}', "");
Expect(1, 7039, '\P{Is_Block=sundanese}', "");
Expect(0, 7039, '\P{^Is_Block=sundanese}', "");
Expect(1, 7103, '\p{Is_Block=	_Sundanese}', "");
Expect(0, 7103, '\p{^Is_Block=	_Sundanese}', "");
Expect(0, 7103, '\P{Is_Block=	_Sundanese}', "");
Expect(1, 7103, '\P{^Is_Block=	_Sundanese}', "");
Expect(0, 7039, '\p{Is_Block=	_Sundanese}', "");
Expect(1, 7039, '\p{^Is_Block=	_Sundanese}', "");
Expect(1, 7039, '\P{Is_Block=	_Sundanese}', "");
Expect(0, 7039, '\P{^Is_Block=	_Sundanese}', "");
Error('\p{Is_Blk=	:=SUNDANESE}');
Error('\P{Is_Blk=	:=SUNDANESE}');
Expect(1, 7103, '\p{Is_Blk=sundanese}', "");
Expect(0, 7103, '\p{^Is_Blk=sundanese}', "");
Expect(0, 7103, '\P{Is_Blk=sundanese}', "");
Expect(1, 7103, '\P{^Is_Blk=sundanese}', "");
Expect(0, 7039, '\p{Is_Blk=sundanese}', "");
Expect(1, 7039, '\p{^Is_Blk=sundanese}', "");
Expect(1, 7039, '\P{Is_Blk=sundanese}', "");
Expect(0, 7039, '\P{^Is_Blk=sundanese}', "");
Expect(1, 7103, '\p{Is_Blk=_-Sundanese}', "");
Expect(0, 7103, '\p{^Is_Blk=_-Sundanese}', "");
Expect(0, 7103, '\P{Is_Blk=_-Sundanese}', "");
Expect(1, 7103, '\P{^Is_Blk=_-Sundanese}', "");
Expect(0, 7039, '\p{Is_Blk=_-Sundanese}', "");
Expect(1, 7039, '\p{^Is_Blk=_-Sundanese}', "");
Expect(1, 7039, '\P{Is_Blk=_-Sundanese}', "");
Expect(0, 7039, '\P{^Is_Blk=_-Sundanese}', "");
Error('\p{Block=--Enclosed:=ALPHANUMERICS}');
Error('\P{Block=--Enclosed:=ALPHANUMERICS}');
Expect(1, 9471, '\p{Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Block= 	enclosed-alphanumerics}', "");
Expect(0, 9471, '\p{^Block= 	enclosed-alphanumerics}', "");
Expect(0, 9471, '\P{Block= 	enclosed-alphanumerics}', "");
Expect(1, 9471, '\P{^Block= 	enclosed-alphanumerics}', "");
Expect(0, 9311, '\p{Block= 	enclosed-alphanumerics}', "");
Expect(1, 9311, '\p{^Block= 	enclosed-alphanumerics}', "");
Expect(1, 9311, '\P{Block= 	enclosed-alphanumerics}', "");
Expect(0, 9311, '\P{^Block= 	enclosed-alphanumerics}', "");
Error('\p{Blk=		Enclosed:=ALPHANUMERICS}');
Error('\P{Blk=		Enclosed:=ALPHANUMERICS}');
Expect(1, 9471, '\p{Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Blk= -EnclosedAlphanumerics}', "");
Expect(0, 9471, '\p{^Blk= -EnclosedAlphanumerics}', "");
Expect(0, 9471, '\P{Blk= -EnclosedAlphanumerics}', "");
Expect(1, 9471, '\P{^Blk= -EnclosedAlphanumerics}', "");
Expect(0, 9311, '\p{Blk= -EnclosedAlphanumerics}', "");
Expect(1, 9311, '\p{^Blk= -EnclosedAlphanumerics}', "");
Expect(1, 9311, '\P{Blk= -EnclosedAlphanumerics}', "");
Expect(0, 9311, '\P{^Blk= -EnclosedAlphanumerics}', "");
Error('\p{Is_Block=_Enclosed-Alphanumerics:=}');
Error('\P{Is_Block=_Enclosed-Alphanumerics:=}');
Expect(1, 9471, '\p{Is_Block: enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Block: enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Block: enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Block: enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Block: enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Block: enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Block: enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Block: enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(0, 9471, '\p{^Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(0, 9471, '\P{Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(1, 9471, '\P{^Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(0, 9311, '\p{Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(1, 9311, '\p{^Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(1, 9311, '\P{Is_Block=	-enclosed-ALPHANUMERICS}', "");
Expect(0, 9311, '\P{^Is_Block=	-enclosed-ALPHANUMERICS}', "");
Error('\p{Is_Blk=/a/_ Enclosed-Alphanumerics}');
Error('\P{Is_Blk=/a/_ Enclosed-Alphanumerics}');
Expect(1, 9471, '\p{Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(0, 9471, '\p{^Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(0, 9471, '\P{Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(1, 9471, '\P{^Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(0, 9311, '\p{Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(1, 9311, '\p{^Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(1, 9311, '\P{Is_Blk: - EnclosedALPHANUMERICS}', "");
Expect(0, 9311, '\P{^Is_Blk: - EnclosedALPHANUMERICS}', "");
Error('\p{Block=	:=Old	SouthARABIAN}');
Error('\P{Block=	:=Old	SouthARABIAN}');
Expect(1, 68223, '\p{Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Block=_-Old_SOUTH arabian}', "");
Expect(0, 68223, '\p{^Block=_-Old_SOUTH arabian}', "");
Expect(0, 68223, '\P{Block=_-Old_SOUTH arabian}', "");
Expect(1, 68223, '\P{^Block=_-Old_SOUTH arabian}', "");
Expect(0, 68191, '\p{Block=_-Old_SOUTH arabian}', "");
Expect(1, 68191, '\p{^Block=_-Old_SOUTH arabian}', "");
Expect(1, 68191, '\P{Block=_-Old_SOUTH arabian}', "");
Expect(0, 68191, '\P{^Block=_-Old_SOUTH arabian}', "");
Error('\p{Blk=/a/__old SOUTH	Arabian}');
Error('\P{Blk=/a/__old SOUTH	Arabian}');
Expect(1, 68223, '\p{Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Blk=Old South ARABIAN}', "");
Expect(0, 68223, '\p{^Blk=Old South ARABIAN}', "");
Expect(0, 68223, '\P{Blk=Old South ARABIAN}', "");
Expect(1, 68223, '\P{^Blk=Old South ARABIAN}', "");
Expect(0, 68191, '\p{Blk=Old South ARABIAN}', "");
Expect(1, 68191, '\p{^Blk=Old South ARABIAN}', "");
Expect(1, 68191, '\P{Blk=Old South ARABIAN}', "");
Expect(0, 68191, '\P{^Blk=Old South ARABIAN}', "");
Error('\p{Is_Block=_:=old	SOUTHARABIAN}');
Error('\P{Is_Block=_:=old	SOUTHARABIAN}');
Expect(1, 68223, '\p{Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Block:   _oldSOUTH Arabian}', "");
Expect(0, 68223, '\p{^Is_Block:   _oldSOUTH Arabian}', "");
Expect(0, 68223, '\P{Is_Block:   _oldSOUTH Arabian}', "");
Expect(1, 68223, '\P{^Is_Block:   _oldSOUTH Arabian}', "");
Expect(0, 68191, '\p{Is_Block:   _oldSOUTH Arabian}', "");
Expect(1, 68191, '\p{^Is_Block:   _oldSOUTH Arabian}', "");
Expect(1, 68191, '\P{Is_Block:   _oldSOUTH Arabian}', "");
Expect(0, 68191, '\P{^Is_Block:   _oldSOUTH Arabian}', "");
Error('\p{Is_Blk=_	old south Arabian/a/}');
Error('\P{Is_Blk=_	old south Arabian/a/}');
Expect(1, 68223, '\p{Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Blk=		OLD south arabian}', "");
Expect(0, 68223, '\p{^Is_Blk=		OLD south arabian}', "");
Expect(0, 68223, '\P{Is_Blk=		OLD south arabian}', "");
Expect(1, 68223, '\P{^Is_Blk=		OLD south arabian}', "");
Expect(0, 68191, '\p{Is_Blk=		OLD south arabian}', "");
Expect(1, 68191, '\p{^Is_Blk=		OLD south arabian}', "");
Expect(1, 68191, '\P{Is_Blk=		OLD south arabian}', "");
Expect(0, 68191, '\P{^Is_Blk=		OLD south arabian}', "");
Error('\p{Block:	_/a/Tags}');
Error('\P{Block:	_/a/Tags}');
Expect(1, 917631, '\p{Block=tags}', "");
Expect(0, 917631, '\p{^Block=tags}', "");
Expect(0, 917631, '\P{Block=tags}', "");
Expect(1, 917631, '\P{^Block=tags}', "");
Expect(0, 1, '\p{Block=tags}', "");
Expect(1, 1, '\p{^Block=tags}', "");
Expect(1, 1, '\P{Block=tags}', "");
Expect(0, 1, '\P{^Block=tags}', "");
Expect(1, 917631, '\p{Block=- Tags}', "");
Expect(0, 917631, '\p{^Block=- Tags}', "");
Expect(0, 917631, '\P{Block=- Tags}', "");
Expect(1, 917631, '\P{^Block=- Tags}', "");
Expect(0, 1, '\p{Block=- Tags}', "");
Expect(1, 1, '\p{^Block=- Tags}', "");
Expect(1, 1, '\P{Block=- Tags}', "");
Expect(0, 1, '\P{^Block=- Tags}', "");
Error('\p{Blk=--Tags/a/}');
Error('\P{Blk=--Tags/a/}');
Expect(1, 917631, '\p{Blk=tags}', "");
Expect(0, 917631, '\p{^Blk=tags}', "");
Expect(0, 917631, '\P{Blk=tags}', "");
Expect(1, 917631, '\P{^Blk=tags}', "");
Expect(0, 1, '\p{Blk=tags}', "");
Expect(1, 1, '\p{^Blk=tags}', "");
Expect(1, 1, '\P{Blk=tags}', "");
Expect(0, 1, '\P{^Blk=tags}', "");
Expect(1, 917631, '\p{Blk=_	tags}', "");
Expect(0, 917631, '\p{^Blk=_	tags}', "");
Expect(0, 917631, '\P{Blk=_	tags}', "");
Expect(1, 917631, '\P{^Blk=_	tags}', "");
Expect(0, 1, '\p{Blk=_	tags}', "");
Expect(1, 1, '\p{^Blk=_	tags}', "");
Expect(1, 1, '\P{Blk=_	tags}', "");
Expect(0, 1, '\P{^Blk=_	tags}', "");
Error('\p{Is_Block=/a/-Tags}');
Error('\P{Is_Block=/a/-Tags}');
Expect(1, 917631, '\p{Is_Block=tags}', "");
Expect(0, 917631, '\p{^Is_Block=tags}', "");
Expect(0, 917631, '\P{Is_Block=tags}', "");
Expect(1, 917631, '\P{^Is_Block=tags}', "");
Expect(0, 1, '\p{Is_Block=tags}', "");
Expect(1, 1, '\p{^Is_Block=tags}', "");
Expect(1, 1, '\P{Is_Block=tags}', "");
Expect(0, 1, '\P{^Is_Block=tags}', "");
Expect(1, 917631, '\p{Is_Block=	 Tags}', "");
Expect(0, 917631, '\p{^Is_Block=	 Tags}', "");
Expect(0, 917631, '\P{Is_Block=	 Tags}', "");
Expect(1, 917631, '\P{^Is_Block=	 Tags}', "");
Expect(0, 1, '\p{Is_Block=	 Tags}', "");
Expect(1, 1, '\p{^Is_Block=	 Tags}', "");
Expect(1, 1, '\P{Is_Block=	 Tags}', "");
Expect(0, 1, '\P{^Is_Block=	 Tags}', "");
Error('\p{Is_Blk=_-Tags:=}');
Error('\P{Is_Blk=_-Tags:=}');
Expect(1, 917631, '\p{Is_Blk=tags}', "");
Expect(0, 917631, '\p{^Is_Blk=tags}', "");
Expect(0, 917631, '\P{Is_Blk=tags}', "");
Expect(1, 917631, '\P{^Is_Blk=tags}', "");
Expect(0, 1, '\p{Is_Blk=tags}', "");
Expect(1, 1, '\p{^Is_Blk=tags}', "");
Expect(1, 1, '\P{Is_Blk=tags}', "");
Expect(0, 1, '\P{^Is_Blk=tags}', "");
Expect(1, 917631, '\p{Is_Blk=  Tags}', "");
Expect(0, 917631, '\p{^Is_Blk=  Tags}', "");
Expect(0, 917631, '\P{Is_Blk=  Tags}', "");
Expect(1, 917631, '\P{^Is_Blk=  Tags}', "");
Expect(0, 1, '\p{Is_Blk=  Tags}', "");
Expect(1, 1, '\p{^Is_Blk=  Tags}', "");
Expect(1, 1, '\P{Is_Blk=  Tags}', "");
Expect(0, 1, '\P{^Is_Blk=  Tags}', "");
Error('\p{Block=_Miscellaneous-MATHEMATICAL:=SymbolsA}');
Error('\P{Block=_Miscellaneous-MATHEMATICAL:=SymbolsA}');
Expect(1, 10223, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(0, 10223, '\p{^Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(0, 10223, '\P{Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(1, 10223, '\P{^Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(0, 10175, '\p{Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(1, 10175, '\p{^Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(1, 10175, '\P{Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Expect(0, 10175, '\P{^Block=-	Miscellaneous-MATHEMATICAL-SYMBOLS	A}', "");
Error('\p{Blk=  Miscellaneous_mathematical Symbols:=A}');
Error('\P{Blk=  Miscellaneous_mathematical Symbols:=A}');
Expect(1, 10223, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(0, 10223, '\p{^Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(0, 10223, '\P{Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(1, 10223, '\P{^Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(0, 10175, '\p{Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(1, 10175, '\p{^Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(1, 10175, '\P{Blk=	 miscellaneous	mathematical-symbols_A}', "");
Expect(0, 10175, '\P{^Blk=	 miscellaneous	mathematical-symbols_A}', "");
Error('\p{Is_Block= MISCELLANEOUS_MATHEMATICAL_symbols	A/a/}');
Error('\P{Is_Block= MISCELLANEOUS_MATHEMATICAL_symbols	A/a/}');
Expect(1, 10223, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(0, 10223, '\p{^Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(0, 10223, '\P{Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(1, 10223, '\P{^Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(0, 10175, '\p{Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(1, 10175, '\p{^Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(1, 10175, '\P{Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Expect(0, 10175, '\P{^Is_Block: 		miscellaneous_MathematicalSymbols a}', "");
Error('\p{Is_Blk= -MISCELLANEOUS/a/MathematicalSymbols A}');
Error('\P{Is_Blk= -MISCELLANEOUS/a/MathematicalSymbols A}');
Expect(1, 10223, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(0, 10223, '\p{^Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(0, 10223, '\P{Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(1, 10223, '\P{^Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(0, 10175, '\p{Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(1, 10175, '\p{^Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(1, 10175, '\P{Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Expect(0, 10175, '\P{^Is_Blk=-miscellaneousMathematical_symbols-a}', "");
Error('\p{Block=:=-braillepatterns}');
Error('\P{Block=:=-braillepatterns}');
Expect(1, 10495, '\p{Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Block=braillepatterns}', "");
Expect(0, 10495, '\P{Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Block=braillepatterns}', "");
Expect(0, 10239, '\p{Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Block=braillepatterns}', "");
Expect(1, 10239, '\P{Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Block=braillepatterns}', "");
Expect(1, 10495, '\p{Block= _Braillepatterns}', "");
Expect(0, 10495, '\p{^Block= _Braillepatterns}', "");
Expect(0, 10495, '\P{Block= _Braillepatterns}', "");
Expect(1, 10495, '\P{^Block= _Braillepatterns}', "");
Expect(0, 10239, '\p{Block= _Braillepatterns}', "");
Expect(1, 10239, '\p{^Block= _Braillepatterns}', "");
Expect(1, 10239, '\P{Block= _Braillepatterns}', "");
Expect(0, 10239, '\P{^Block= _Braillepatterns}', "");
Error('\p{Blk=:=	BRAILLE	PATTERNS}');
Error('\P{Blk=:=	BRAILLE	PATTERNS}');
Expect(1, 10495, '\p{Blk=braillepatterns}', "");
Expect(0, 10495, '\p{^Blk=braillepatterns}', "");
Expect(0, 10495, '\P{Blk=braillepatterns}', "");
Expect(1, 10495, '\P{^Blk=braillepatterns}', "");
Expect(0, 10239, '\p{Blk=braillepatterns}', "");
Expect(1, 10239, '\p{^Blk=braillepatterns}', "");
Expect(1, 10239, '\P{Blk=braillepatterns}', "");
Expect(0, 10239, '\P{^Blk=braillepatterns}', "");
Expect(1, 10495, '\p{Blk= Braillepatterns}', "");
Expect(0, 10495, '\p{^Blk= Braillepatterns}', "");
Expect(0, 10495, '\P{Blk= Braillepatterns}', "");
Expect(1, 10495, '\P{^Blk= Braillepatterns}', "");
Expect(0, 10239, '\p{Blk= Braillepatterns}', "");
Expect(1, 10239, '\p{^Blk= Braillepatterns}', "");
Expect(1, 10239, '\P{Blk= Braillepatterns}', "");
Expect(0, 10239, '\P{^Blk= Braillepatterns}', "");
Error('\p{Is_Block= 	braille:=Patterns}');
Error('\P{Is_Block= 	braille:=Patterns}');
Expect(1, 10495, '\p{Is_Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Block=braillepatterns}', "");
Expect(0, 10495, '\P{Is_Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Block=braillepatterns}', "");
Expect(0, 10239, '\p{Is_Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Block=braillepatterns}', "");
Expect(1, 10239, '\P{Is_Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Block=braillepatterns}', "");
Expect(1, 10495, '\p{Is_Block=__BRAILLEPATTERNS}', "");
Expect(0, 10495, '\p{^Is_Block=__BRAILLEPATTERNS}', "");
Expect(0, 10495, '\P{Is_Block=__BRAILLEPATTERNS}', "");
Expect(1, 10495, '\P{^Is_Block=__BRAILLEPATTERNS}', "");
Expect(0, 10239, '\p{Is_Block=__BRAILLEPATTERNS}', "");
Expect(1, 10239, '\p{^Is_Block=__BRAILLEPATTERNS}', "");
Expect(1, 10239, '\P{Is_Block=__BRAILLEPATTERNS}', "");
Expect(0, 10239, '\P{^Is_Block=__BRAILLEPATTERNS}', "");
Error('\p{Is_Blk: :=_Braille Patterns}');
Error('\P{Is_Blk: :=_Braille Patterns}');
Expect(1, 10495, '\p{Is_Blk: braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Blk: braillepatterns}', "");
Expect(0, 10495, '\P{Is_Blk: braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Blk: braillepatterns}', "");
Expect(0, 10239, '\p{Is_Blk: braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Blk: braillepatterns}', "");
Expect(1, 10239, '\P{Is_Blk: braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Blk: braillepatterns}', "");
Expect(1, 10495, '\p{Is_Blk=_ BRAILLEpatterns}', "");
Expect(0, 10495, '\p{^Is_Blk=_ BRAILLEpatterns}', "");
Expect(0, 10495, '\P{Is_Blk=_ BRAILLEpatterns}', "");
Expect(1, 10495, '\P{^Is_Blk=_ BRAILLEpatterns}', "");
Expect(0, 10239, '\p{Is_Blk=_ BRAILLEpatterns}', "");
Expect(1, 10239, '\p{^Is_Blk=_ BRAILLEpatterns}', "");
Expect(1, 10239, '\P{Is_Blk=_ BRAILLEpatterns}', "");
Expect(0, 10239, '\P{^Is_Blk=_ BRAILLEpatterns}', "");
Error('\p{Block=/a/ORIYA}');
Error('\P{Block=/a/ORIYA}');
Expect(1, 2943, '\p{Block=oriya}', "");
Expect(0, 2943, '\p{^Block=oriya}', "");
Expect(0, 2943, '\P{Block=oriya}', "");
Expect(1, 2943, '\P{^Block=oriya}', "");
Expect(0, 2815, '\p{Block=oriya}', "");
Expect(1, 2815, '\p{^Block=oriya}', "");
Expect(1, 2815, '\P{Block=oriya}', "");
Expect(0, 2815, '\P{^Block=oriya}', "");
Expect(1, 2943, '\p{Block=  Oriya}', "");
Expect(0, 2943, '\p{^Block=  Oriya}', "");
Expect(0, 2943, '\P{Block=  Oriya}', "");
Expect(1, 2943, '\P{^Block=  Oriya}', "");
Expect(0, 2815, '\p{Block=  Oriya}', "");
Expect(1, 2815, '\p{^Block=  Oriya}', "");
Expect(1, 2815, '\P{Block=  Oriya}', "");
Expect(0, 2815, '\P{^Block=  Oriya}', "");
Error('\p{Blk=:=--ORIYA}');
Error('\P{Blk=:=--ORIYA}');
Expect(1, 2943, '\p{Blk=oriya}', "");
Expect(0, 2943, '\p{^Blk=oriya}', "");
Expect(0, 2943, '\P{Blk=oriya}', "");
Expect(1, 2943, '\P{^Blk=oriya}', "");
Expect(0, 2815, '\p{Blk=oriya}', "");
Expect(1, 2815, '\p{^Blk=oriya}', "");
Expect(1, 2815, '\P{Blk=oriya}', "");
Expect(0, 2815, '\P{^Blk=oriya}', "");
Expect(1, 2943, '\p{Blk=_-ORIYA}', "");
Expect(0, 2943, '\p{^Blk=_-ORIYA}', "");
Expect(0, 2943, '\P{Blk=_-ORIYA}', "");
Expect(1, 2943, '\P{^Blk=_-ORIYA}', "");
Expect(0, 2815, '\p{Blk=_-ORIYA}', "");
Expect(1, 2815, '\p{^Blk=_-ORIYA}', "");
Expect(1, 2815, '\P{Blk=_-ORIYA}', "");
Expect(0, 2815, '\P{^Blk=_-ORIYA}', "");
Error('\p{Is_Block=/a/	-ORIYA}');
Error('\P{Is_Block=/a/	-ORIYA}');
Expect(1, 2943, '\p{Is_Block=oriya}', "");
Expect(0, 2943, '\p{^Is_Block=oriya}', "");
Expect(0, 2943, '\P{Is_Block=oriya}', "");
Expect(1, 2943, '\P{^Is_Block=oriya}', "");
Expect(0, 2815, '\p{Is_Block=oriya}', "");
Expect(1, 2815, '\p{^Is_Block=oriya}', "");
Expect(1, 2815, '\P{Is_Block=oriya}', "");
Expect(0, 2815, '\P{^Is_Block=oriya}', "");
Expect(1, 2943, '\p{Is_Block= -Oriya}', "");
Expect(0, 2943, '\p{^Is_Block= -Oriya}', "");
Expect(0, 2943, '\P{Is_Block= -Oriya}', "");
Expect(1, 2943, '\P{^Is_Block= -Oriya}', "");
Expect(0, 2815, '\p{Is_Block= -Oriya}', "");
Expect(1, 2815, '\p{^Is_Block= -Oriya}', "");
Expect(1, 2815, '\P{Is_Block= -Oriya}', "");
Expect(0, 2815, '\P{^Is_Block= -Oriya}', "");
Error('\p{Is_Blk=:=_ORIYA}');
Error('\P{Is_Blk=:=_ORIYA}');
Expect(1, 2943, '\p{Is_Blk=oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=oriya}', "");
Expect(0, 2943, '\P{Is_Blk=oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=oriya}', "");
Expect(0, 2815, '\p{Is_Blk=oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=oriya}', "");
Expect(1, 2815, '\P{Is_Blk=oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=oriya}', "");
Expect(1, 2943, '\p{Is_Blk=--oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=--oriya}', "");
Expect(0, 2943, '\P{Is_Blk=--oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=--oriya}', "");
Expect(0, 2815, '\p{Is_Blk=--oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=--oriya}', "");
Expect(1, 2815, '\P{Is_Blk=--oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=--oriya}', "");
Error('\p{Block:_-Linear/a/BIdeograms}');
Error('\P{Block:_-Linear/a/BIdeograms}');
Expect(1, 65791, '\p{Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Block=linearbideograms}', "");
Expect(0, 65791, '\P{Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Block=linearbideograms}', "");
Expect(0, 65663, '\p{Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Block=linearbideograms}', "");
Expect(1, 65663, '\P{Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Block=linearbideograms}', "");
Expect(1, 65791, '\p{Block=-Linear	B_ideograms}', "");
Expect(0, 65791, '\p{^Block=-Linear	B_ideograms}', "");
Expect(0, 65791, '\P{Block=-Linear	B_ideograms}', "");
Expect(1, 65791, '\P{^Block=-Linear	B_ideograms}', "");
Expect(0, 65663, '\p{Block=-Linear	B_ideograms}', "");
Expect(1, 65663, '\p{^Block=-Linear	B_ideograms}', "");
Expect(1, 65663, '\P{Block=-Linear	B_ideograms}', "");
Expect(0, 65663, '\P{^Block=-Linear	B_ideograms}', "");
Error('\p{Blk=_:=Linear-b_Ideograms}');
Error('\P{Blk=_:=Linear-b_Ideograms}');
Expect(1, 65791, '\p{Blk=linearbideograms}', "");
Expect(0, 65791, '\p{^Blk=linearbideograms}', "");
Expect(0, 65791, '\P{Blk=linearbideograms}', "");
Expect(1, 65791, '\P{^Blk=linearbideograms}', "");
Expect(0, 65663, '\p{Blk=linearbideograms}', "");
Expect(1, 65663, '\p{^Blk=linearbideograms}', "");
Expect(1, 65663, '\P{Blk=linearbideograms}', "");
Expect(0, 65663, '\P{^Blk=linearbideograms}', "");
Expect(1, 65791, '\p{Blk=-_LinearB	Ideograms}', "");
Expect(0, 65791, '\p{^Blk=-_LinearB	Ideograms}', "");
Expect(0, 65791, '\P{Blk=-_LinearB	Ideograms}', "");
Expect(1, 65791, '\P{^Blk=-_LinearB	Ideograms}', "");
Expect(0, 65663, '\p{Blk=-_LinearB	Ideograms}', "");
Expect(1, 65663, '\p{^Blk=-_LinearB	Ideograms}', "");
Expect(1, 65663, '\P{Blk=-_LinearB	Ideograms}', "");
Expect(0, 65663, '\P{^Blk=-_LinearB	Ideograms}', "");
Error('\p{Is_Block= /a/linear-B Ideograms}');
Error('\P{Is_Block= /a/linear-B Ideograms}');
Expect(1, 65791, '\p{Is_Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Block=linearbideograms}', "");
Expect(0, 65791, '\P{Is_Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Block=linearbideograms}', "");
Expect(0, 65663, '\p{Is_Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Block=linearbideograms}', "");
Expect(1, 65663, '\P{Is_Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Block=linearbideograms}', "");
Expect(1, 65791, '\p{Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(0, 65791, '\p{^Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(0, 65791, '\P{Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(1, 65791, '\P{^Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(0, 65663, '\p{Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(1, 65663, '\p{^Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(1, 65663, '\P{Is_Block=_-LinearBIDEOGRAMS}', "");
Expect(0, 65663, '\P{^Is_Block=_-LinearBIDEOGRAMS}', "");
Error('\p{Is_Blk=  Linear_B:=Ideograms}');
Error('\P{Is_Blk=  Linear_B:=Ideograms}');
Expect(1, 65791, '\p{Is_Blk=linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Blk=linearbideograms}', "");
Expect(0, 65791, '\P{Is_Blk=linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Blk=linearbideograms}', "");
Expect(0, 65663, '\p{Is_Blk=linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Blk=linearbideograms}', "");
Expect(1, 65663, '\P{Is_Blk=linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Blk=linearbideograms}', "");
Expect(1, 65791, '\p{Is_Blk:   _Linear-BIdeograms}', "");
Expect(0, 65791, '\p{^Is_Blk:   _Linear-BIdeograms}', "");
Expect(0, 65791, '\P{Is_Blk:   _Linear-BIdeograms}', "");
Expect(1, 65791, '\P{^Is_Blk:   _Linear-BIdeograms}', "");
Expect(0, 65663, '\p{Is_Blk:   _Linear-BIdeograms}', "");
Expect(1, 65663, '\p{^Is_Blk:   _Linear-BIdeograms}', "");
Expect(1, 65663, '\P{Is_Blk:   _Linear-BIdeograms}', "");
Expect(0, 65663, '\P{^Is_Blk:   _Linear-BIdeograms}', "");
Error('\p{Block:   -	Cherokee/a/}');
Error('\P{Block:   -	Cherokee/a/}');
Expect(1, 5119, '\p{Block=cherokee}', "");
Expect(0, 5119, '\p{^Block=cherokee}', "");
Expect(0, 5119, '\P{Block=cherokee}', "");
Expect(1, 5119, '\P{^Block=cherokee}', "");
Expect(0, 5023, '\p{Block=cherokee}', "");
Expect(1, 5023, '\p{^Block=cherokee}', "");
Expect(1, 5023, '\P{Block=cherokee}', "");
Expect(0, 5023, '\P{^Block=cherokee}', "");
Expect(1, 5119, '\p{Block=-	Cherokee}', "");
Expect(0, 5119, '\p{^Block=-	Cherokee}', "");
Expect(0, 5119, '\P{Block=-	Cherokee}', "");
Expect(1, 5119, '\P{^Block=-	Cherokee}', "");
Expect(0, 5023, '\p{Block=-	Cherokee}', "");
Expect(1, 5023, '\p{^Block=-	Cherokee}', "");
Expect(1, 5023, '\P{Block=-	Cherokee}', "");
Expect(0, 5023, '\P{^Block=-	Cherokee}', "");
Error('\p{Blk=:=_-Cherokee}');
Error('\P{Blk=:=_-Cherokee}');
Expect(1, 5119, '\p{Blk=cherokee}', "");
Expect(0, 5119, '\p{^Blk=cherokee}', "");
Expect(0, 5119, '\P{Blk=cherokee}', "");
Expect(1, 5119, '\P{^Blk=cherokee}', "");
Expect(0, 5023, '\p{Blk=cherokee}', "");
Expect(1, 5023, '\p{^Blk=cherokee}', "");
Expect(1, 5023, '\P{Blk=cherokee}', "");
Expect(0, 5023, '\P{^Blk=cherokee}', "");
Expect(1, 5119, '\p{Blk=-Cherokee}', "");
Expect(0, 5119, '\p{^Blk=-Cherokee}', "");
Expect(0, 5119, '\P{Blk=-Cherokee}', "");
Expect(1, 5119, '\P{^Blk=-Cherokee}', "");
Expect(0, 5023, '\p{Blk=-Cherokee}', "");
Expect(1, 5023, '\p{^Blk=-Cherokee}', "");
Expect(1, 5023, '\P{Blk=-Cherokee}', "");
Expect(0, 5023, '\P{^Blk=-Cherokee}', "");
Error('\p{Is_Block:   /a/  Cherokee}');
Error('\P{Is_Block:   /a/  Cherokee}');
Expect(1, 5119, '\p{Is_Block=cherokee}', "");
Expect(0, 5119, '\p{^Is_Block=cherokee}', "");
Expect(0, 5119, '\P{Is_Block=cherokee}', "");
Expect(1, 5119, '\P{^Is_Block=cherokee}', "");
Expect(0, 5023, '\p{Is_Block=cherokee}', "");
Expect(1, 5023, '\p{^Is_Block=cherokee}', "");
Expect(1, 5023, '\P{Is_Block=cherokee}', "");
Expect(0, 5023, '\P{^Is_Block=cherokee}', "");
Expect(1, 5119, '\p{Is_Block=Cherokee}', "");
Expect(0, 5119, '\p{^Is_Block=Cherokee}', "");
Expect(0, 5119, '\P{Is_Block=Cherokee}', "");
Expect(1, 5119, '\P{^Is_Block=Cherokee}', "");
Expect(0, 5023, '\p{Is_Block=Cherokee}', "");
Expect(1, 5023, '\p{^Is_Block=Cherokee}', "");
Expect(1, 5023, '\P{Is_Block=Cherokee}', "");
Expect(0, 5023, '\P{^Is_Block=Cherokee}', "");
Error('\p{Is_Blk= /a/Cherokee}');
Error('\P{Is_Blk= /a/Cherokee}');
Expect(1, 5119, '\p{Is_Blk=cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk=cherokee}', "");
Expect(0, 5119, '\P{Is_Blk=cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk=cherokee}', "");
Expect(0, 5023, '\p{Is_Blk=cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk=cherokee}', "");
Expect(1, 5023, '\P{Is_Blk=cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk=cherokee}', "");
Expect(1, 5119, '\p{Is_Blk=-_Cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk=-_Cherokee}', "");
Expect(0, 5119, '\P{Is_Blk=-_Cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk=-_Cherokee}', "");
Expect(0, 5023, '\p{Is_Blk=-_Cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk=-_Cherokee}', "");
Expect(1, 5023, '\P{Is_Blk=-_Cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk=-_Cherokee}', "");
Error('\p{Block=		Bopomofo:=Extended}');
Error('\P{Block=		Bopomofo:=Extended}');
Expect(1, 12735, '\p{Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Block=_-bopomofo Extended}', "");
Expect(0, 12735, '\p{^Block=_-bopomofo Extended}', "");
Expect(0, 12735, '\P{Block=_-bopomofo Extended}', "");
Expect(1, 12735, '\P{^Block=_-bopomofo Extended}', "");
Expect(0, 12703, '\p{Block=_-bopomofo Extended}', "");
Expect(1, 12703, '\p{^Block=_-bopomofo Extended}', "");
Expect(1, 12703, '\P{Block=_-bopomofo Extended}', "");
Expect(0, 12703, '\P{^Block=_-bopomofo Extended}', "");
Error('\p{Blk:	:=BOPOMOFO_Extended}');
Error('\P{Blk:	:=BOPOMOFO_Extended}');
Expect(1, 12735, '\p{Blk:   bopomofoextended}', "");
Expect(0, 12735, '\p{^Blk:   bopomofoextended}', "");
Expect(0, 12735, '\P{Blk:   bopomofoextended}', "");
Expect(1, 12735, '\P{^Blk:   bopomofoextended}', "");
Expect(0, 12703, '\p{Blk:   bopomofoextended}', "");
Expect(1, 12703, '\p{^Blk:   bopomofoextended}', "");
Expect(1, 12703, '\P{Blk:   bopomofoextended}', "");
Expect(0, 12703, '\P{^Blk:   bopomofoextended}', "");
Expect(1, 12735, '\p{Blk= BopomofoExtended}', "");
Expect(0, 12735, '\p{^Blk= BopomofoExtended}', "");
Expect(0, 12735, '\P{Blk= BopomofoExtended}', "");
Expect(1, 12735, '\P{^Blk= BopomofoExtended}', "");
Expect(0, 12703, '\p{Blk= BopomofoExtended}', "");
Expect(1, 12703, '\p{^Blk= BopomofoExtended}', "");
Expect(1, 12703, '\P{Blk= BopomofoExtended}', "");
Expect(0, 12703, '\P{^Blk= BopomofoExtended}', "");
Error('\p{Is_Block=-:=Bopomofo	Extended}');
Error('\P{Is_Block=-:=Bopomofo	Extended}');
Expect(1, 12735, '\p{Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Block=__Bopomofo extended}', "");
Expect(0, 12735, '\p{^Is_Block=__Bopomofo extended}', "");
Expect(0, 12735, '\P{Is_Block=__Bopomofo extended}', "");
Expect(1, 12735, '\P{^Is_Block=__Bopomofo extended}', "");
Expect(0, 12703, '\p{Is_Block=__Bopomofo extended}', "");
Expect(1, 12703, '\p{^Is_Block=__Bopomofo extended}', "");
Expect(1, 12703, '\P{Is_Block=__Bopomofo extended}', "");
Expect(0, 12703, '\P{^Is_Block=__Bopomofo extended}', "");
Error('\p{Is_Blk=_	Bopomofo-EXTENDED:=}');
Error('\P{Is_Blk=_	Bopomofo-EXTENDED:=}');
Expect(1, 12735, '\p{Is_Blk=bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Blk=bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Blk=bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Blk=bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Blk=bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Blk=bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Blk=bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Blk=bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(0, 12735, '\p{^Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(0, 12735, '\P{Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(1, 12735, '\P{^Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(0, 12703, '\p{Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(1, 12703, '\p{^Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(1, 12703, '\P{Is_Blk=	 Bopomofo EXTENDED}', "");
Expect(0, 12703, '\P{^Is_Blk=	 Bopomofo EXTENDED}', "");
Error('\p{Block=  OGHAM/a/}');
Error('\P{Block=  OGHAM/a/}');
Expect(1, 5791, '\p{Block=ogham}', "");
Expect(0, 5791, '\p{^Block=ogham}', "");
Expect(0, 5791, '\P{Block=ogham}', "");
Expect(1, 5791, '\P{^Block=ogham}', "");
Expect(0, 5759, '\p{Block=ogham}', "");
Expect(1, 5759, '\p{^Block=ogham}', "");
Expect(1, 5759, '\P{Block=ogham}', "");
Expect(0, 5759, '\P{^Block=ogham}', "");
Expect(1, 5791, '\p{Block=	-ogham}', "");
Expect(0, 5791, '\p{^Block=	-ogham}', "");
Expect(0, 5791, '\P{Block=	-ogham}', "");
Expect(1, 5791, '\P{^Block=	-ogham}', "");
Expect(0, 5759, '\p{Block=	-ogham}', "");
Expect(1, 5759, '\p{^Block=	-ogham}', "");
Expect(1, 5759, '\P{Block=	-ogham}', "");
Expect(0, 5759, '\P{^Block=	-ogham}', "");
Error('\p{Blk: :=	_Ogham}');
Error('\P{Blk: :=	_Ogham}');
Expect(1, 5791, '\p{Blk=ogham}', "");
Expect(0, 5791, '\p{^Blk=ogham}', "");
Expect(0, 5791, '\P{Blk=ogham}', "");
Expect(1, 5791, '\P{^Blk=ogham}', "");
Expect(0, 5759, '\p{Blk=ogham}', "");
Expect(1, 5759, '\p{^Blk=ogham}', "");
Expect(1, 5759, '\P{Blk=ogham}', "");
Expect(0, 5759, '\P{^Blk=ogham}', "");
Expect(1, 5791, '\p{Blk=-ogham}', "");
Expect(0, 5791, '\p{^Blk=-ogham}', "");
Expect(0, 5791, '\P{Blk=-ogham}', "");
Expect(1, 5791, '\P{^Blk=-ogham}', "");
Expect(0, 5759, '\p{Blk=-ogham}', "");
Expect(1, 5759, '\p{^Blk=-ogham}', "");
Expect(1, 5759, '\P{Blk=-ogham}', "");
Expect(0, 5759, '\P{^Blk=-ogham}', "");
Error('\p{Is_Block=:= ogham}');
Error('\P{Is_Block=:= ogham}');
Expect(1, 5791, '\p{Is_Block=ogham}', "");
Expect(0, 5791, '\p{^Is_Block=ogham}', "");
Expect(0, 5791, '\P{Is_Block=ogham}', "");
Expect(1, 5791, '\P{^Is_Block=ogham}', "");
Expect(0, 5759, '\p{Is_Block=ogham}', "");
Expect(1, 5759, '\p{^Is_Block=ogham}', "");
Expect(1, 5759, '\P{Is_Block=ogham}', "");
Expect(0, 5759, '\P{^Is_Block=ogham}', "");
Expect(1, 5791, '\p{Is_Block= Ogham}', "");
Expect(0, 5791, '\p{^Is_Block= Ogham}', "");
Expect(0, 5791, '\P{Is_Block= Ogham}', "");
Expect(1, 5791, '\P{^Is_Block= Ogham}', "");
Expect(0, 5759, '\p{Is_Block= Ogham}', "");
Expect(1, 5759, '\p{^Is_Block= Ogham}', "");
Expect(1, 5759, '\P{Is_Block= Ogham}', "");
Expect(0, 5759, '\P{^Is_Block= Ogham}', "");
Error('\p{Is_Blk=:=Ogham}');
Error('\P{Is_Blk=:=Ogham}');
Expect(1, 5791, '\p{Is_Blk=ogham}', "");
Expect(0, 5791, '\p{^Is_Blk=ogham}', "");
Expect(0, 5791, '\P{Is_Blk=ogham}', "");
Expect(1, 5791, '\P{^Is_Blk=ogham}', "");
Expect(0, 5759, '\p{Is_Blk=ogham}', "");
Expect(1, 5759, '\p{^Is_Blk=ogham}', "");
Expect(1, 5759, '\P{Is_Blk=ogham}', "");
Expect(0, 5759, '\P{^Is_Blk=ogham}', "");
Expect(1, 5791, '\p{Is_Blk=-Ogham}', "");
Expect(0, 5791, '\p{^Is_Blk=-Ogham}', "");
Expect(0, 5791, '\P{Is_Blk=-Ogham}', "");
Expect(1, 5791, '\P{^Is_Blk=-Ogham}', "");
Expect(0, 5759, '\p{Is_Blk=-Ogham}', "");
Expect(1, 5759, '\p{^Is_Blk=-Ogham}', "");
Expect(1, 5759, '\P{Is_Blk=-Ogham}', "");
Expect(0, 5759, '\P{^Is_Blk=-Ogham}', "");
Error('\p{Block=:=_-samaritan}');
Error('\P{Block=:=_-samaritan}');
Expect(1, 2111, '\p{Block=samaritan}', "");
Expect(0, 2111, '\p{^Block=samaritan}', "");
Expect(0, 2111, '\P{Block=samaritan}', "");
Expect(1, 2111, '\P{^Block=samaritan}', "");
Expect(0, 2047, '\p{Block=samaritan}', "");
Expect(1, 2047, '\p{^Block=samaritan}', "");
Expect(1, 2047, '\P{Block=samaritan}', "");
Expect(0, 2047, '\P{^Block=samaritan}', "");
Expect(1, 2111, '\p{Block= _Samaritan}', "");
Expect(0, 2111, '\p{^Block= _Samaritan}', "");
Expect(0, 2111, '\P{Block= _Samaritan}', "");
Expect(1, 2111, '\P{^Block= _Samaritan}', "");
Expect(0, 2047, '\p{Block= _Samaritan}', "");
Expect(1, 2047, '\p{^Block= _Samaritan}', "");
Expect(1, 2047, '\P{Block= _Samaritan}', "");
Expect(0, 2047, '\P{^Block= _Samaritan}', "");
Error('\p{Blk=_Samaritan:=}');
Error('\P{Blk=_Samaritan:=}');
Expect(1, 2111, '\p{Blk=samaritan}', "");
Expect(0, 2111, '\p{^Blk=samaritan}', "");
Expect(0, 2111, '\P{Blk=samaritan}', "");
Expect(1, 2111, '\P{^Blk=samaritan}', "");
Expect(0, 2047, '\p{Blk=samaritan}', "");
Expect(1, 2047, '\p{^Blk=samaritan}', "");
Expect(1, 2047, '\P{Blk=samaritan}', "");
Expect(0, 2047, '\P{^Blk=samaritan}', "");
Expect(1, 2111, '\p{Blk:	-Samaritan}', "");
Expect(0, 2111, '\p{^Blk:	-Samaritan}', "");
Expect(0, 2111, '\P{Blk:	-Samaritan}', "");
Expect(1, 2111, '\P{^Blk:	-Samaritan}', "");
Expect(0, 2047, '\p{Blk:	-Samaritan}', "");
Expect(1, 2047, '\p{^Blk:	-Samaritan}', "");
Expect(1, 2047, '\P{Blk:	-Samaritan}', "");
Expect(0, 2047, '\P{^Blk:	-Samaritan}', "");
Error('\p{Is_Block=	_Samaritan/a/}');
Error('\P{Is_Block=	_Samaritan/a/}');
Expect(1, 2111, '\p{Is_Block=samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=samaritan}', "");
Expect(0, 2111, '\P{Is_Block=samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=samaritan}', "");
Expect(0, 2047, '\p{Is_Block=samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=samaritan}', "");
Expect(1, 2047, '\P{Is_Block=samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=samaritan}', "");
Expect(1, 2111, '\p{Is_Block=--Samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=--Samaritan}', "");
Expect(0, 2111, '\P{Is_Block=--Samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=--Samaritan}', "");
Expect(0, 2047, '\p{Is_Block=--Samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=--Samaritan}', "");
Expect(1, 2047, '\P{Is_Block=--Samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=--Samaritan}', "");
Error('\p{Is_Blk=:=Samaritan}');
Error('\P{Is_Blk=:=Samaritan}');
Expect(1, 2111, '\p{Is_Blk=samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk=samaritan}', "");
Expect(0, 2111, '\P{Is_Blk=samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk=samaritan}', "");
Expect(0, 2047, '\p{Is_Blk=samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk=samaritan}', "");
Expect(1, 2047, '\P{Is_Blk=samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk=samaritan}', "");
Expect(1, 2111, '\p{Is_Blk= 	samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk= 	samaritan}', "");
Expect(0, 2111, '\P{Is_Blk= 	samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk= 	samaritan}', "");
Expect(0, 2047, '\p{Is_Blk= 	samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk= 	samaritan}', "");
Expect(1, 2047, '\P{Is_Blk= 	samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk= 	samaritan}', "");
Error('\p{Block=:=_ VAI}');
Error('\P{Block=:=_ VAI}');
Expect(1, 42559, '\p{Block=vai}', "");
Expect(0, 42559, '\p{^Block=vai}', "");
Expect(0, 42559, '\P{Block=vai}', "");
Expect(1, 42559, '\P{^Block=vai}', "");
Expect(0, 42239, '\p{Block=vai}', "");
Expect(1, 42239, '\p{^Block=vai}', "");
Expect(1, 42239, '\P{Block=vai}', "");
Expect(0, 42239, '\P{^Block=vai}', "");
Expect(1, 42559, '\p{Block=-vai}', "");
Expect(0, 42559, '\p{^Block=-vai}', "");
Expect(0, 42559, '\P{Block=-vai}', "");
Expect(1, 42559, '\P{^Block=-vai}', "");
Expect(0, 42239, '\p{Block=-vai}', "");
Expect(1, 42239, '\p{^Block=-vai}', "");
Expect(1, 42239, '\P{Block=-vai}', "");
Expect(0, 42239, '\P{^Block=-vai}', "");
Error('\p{Blk=/a/- VAI}');
Error('\P{Blk=/a/- VAI}');
Expect(1, 42559, '\p{Blk=vai}', "");
Expect(0, 42559, '\p{^Blk=vai}', "");
Expect(0, 42559, '\P{Blk=vai}', "");
Expect(1, 42559, '\P{^Blk=vai}', "");
Expect(0, 42239, '\p{Blk=vai}', "");
Expect(1, 42239, '\p{^Blk=vai}', "");
Expect(1, 42239, '\P{Blk=vai}', "");
Expect(0, 42239, '\P{^Blk=vai}', "");
Expect(1, 42559, '\p{Blk=		Vai}', "");
Expect(0, 42559, '\p{^Blk=		Vai}', "");
Expect(0, 42559, '\P{Blk=		Vai}', "");
Expect(1, 42559, '\P{^Blk=		Vai}', "");
Expect(0, 42239, '\p{Blk=		Vai}', "");
Expect(1, 42239, '\p{^Blk=		Vai}', "");
Expect(1, 42239, '\P{Blk=		Vai}', "");
Expect(0, 42239, '\P{^Blk=		Vai}', "");
Error('\p{Is_Block=-	VAI:=}');
Error('\P{Is_Block=-	VAI:=}');
Expect(1, 42559, '\p{Is_Block=vai}', "");
Expect(0, 42559, '\p{^Is_Block=vai}', "");
Expect(0, 42559, '\P{Is_Block=vai}', "");
Expect(1, 42559, '\P{^Is_Block=vai}', "");
Expect(0, 42239, '\p{Is_Block=vai}', "");
Expect(1, 42239, '\p{^Is_Block=vai}', "");
Expect(1, 42239, '\P{Is_Block=vai}', "");
Expect(0, 42239, '\P{^Is_Block=vai}', "");
Expect(1, 42559, '\p{Is_Block=	 Vai}', "");
Expect(0, 42559, '\p{^Is_Block=	 Vai}', "");
Expect(0, 42559, '\P{Is_Block=	 Vai}', "");
Expect(1, 42559, '\P{^Is_Block=	 Vai}', "");
Expect(0, 42239, '\p{Is_Block=	 Vai}', "");
Expect(1, 42239, '\p{^Is_Block=	 Vai}', "");
Expect(1, 42239, '\P{Is_Block=	 Vai}', "");
Expect(0, 42239, '\P{^Is_Block=	 Vai}', "");
Error('\p{Is_Blk:   _/a/VAI}');
Error('\P{Is_Blk:   _/a/VAI}');
Expect(1, 42559, '\p{Is_Blk:	vai}', "");
Expect(0, 42559, '\p{^Is_Blk:	vai}', "");
Expect(0, 42559, '\P{Is_Blk:	vai}', "");
Expect(1, 42559, '\P{^Is_Blk:	vai}', "");
Expect(0, 42239, '\p{Is_Blk:	vai}', "");
Expect(1, 42239, '\p{^Is_Blk:	vai}', "");
Expect(1, 42239, '\P{Is_Blk:	vai}', "");
Expect(0, 42239, '\P{^Is_Blk:	vai}', "");
Expect(1, 42559, '\p{Is_Blk=	vai}', "");
Expect(0, 42559, '\p{^Is_Blk=	vai}', "");
Expect(0, 42559, '\P{Is_Blk=	vai}', "");
Expect(1, 42559, '\P{^Is_Blk=	vai}', "");
Expect(0, 42239, '\p{Is_Blk=	vai}', "");
Expect(1, 42239, '\p{^Is_Blk=	vai}', "");
Expect(1, 42239, '\P{Is_Blk=	vai}', "");
Expect(0, 42239, '\P{^Is_Blk=	vai}', "");
Error('\p{Block=	General:=Punctuation}');
Error('\P{Block=	General:=Punctuation}');
Expect(1, 8303, '\p{Block:	generalpunctuation}', "");
Expect(0, 8303, '\p{^Block:	generalpunctuation}', "");
Expect(0, 8303, '\P{Block:	generalpunctuation}', "");
Expect(1, 8303, '\P{^Block:	generalpunctuation}', "");
Expect(0, 8191, '\p{Block:	generalpunctuation}', "");
Expect(1, 8191, '\p{^Block:	generalpunctuation}', "");
Expect(1, 8191, '\P{Block:	generalpunctuation}', "");
Expect(0, 8191, '\P{^Block:	generalpunctuation}', "");
Expect(1, 8303, '\p{Block=_	GENERALPunctuation}', "");
Expect(0, 8303, '\p{^Block=_	GENERALPunctuation}', "");
Expect(0, 8303, '\P{Block=_	GENERALPunctuation}', "");
Expect(1, 8303, '\P{^Block=_	GENERALPunctuation}', "");
Expect(0, 8191, '\p{Block=_	GENERALPunctuation}', "");
Expect(1, 8191, '\p{^Block=_	GENERALPunctuation}', "");
Expect(1, 8191, '\P{Block=_	GENERALPunctuation}', "");
Expect(0, 8191, '\P{^Block=_	GENERALPunctuation}', "");
Error('\p{Blk= :=GENERAL PUNCTUATION}');
Error('\P{Blk= :=GENERAL PUNCTUATION}');
Expect(1, 8303, '\p{Blk:   generalpunctuation}', "");
Expect(0, 8303, '\p{^Blk:   generalpunctuation}', "");
Expect(0, 8303, '\P{Blk:   generalpunctuation}', "");
Expect(1, 8303, '\P{^Blk:   generalpunctuation}', "");
Expect(0, 8191, '\p{Blk:   generalpunctuation}', "");
Expect(1, 8191, '\p{^Blk:   generalpunctuation}', "");
Expect(1, 8191, '\P{Blk:   generalpunctuation}', "");
Expect(0, 8191, '\P{^Blk:   generalpunctuation}', "");
Expect(1, 8303, '\p{Blk= _general Punctuation}', "");
Expect(0, 8303, '\p{^Blk= _general Punctuation}', "");
Expect(0, 8303, '\P{Blk= _general Punctuation}', "");
Expect(1, 8303, '\P{^Blk= _general Punctuation}', "");
Expect(0, 8191, '\p{Blk= _general Punctuation}', "");
Expect(1, 8191, '\p{^Blk= _general Punctuation}', "");
Expect(1, 8191, '\P{Blk= _general Punctuation}', "");
Expect(0, 8191, '\P{^Blk= _general Punctuation}', "");
Error('\p{Is_Block:   GeneralPunctuation/a/}');
Error('\P{Is_Block:   GeneralPunctuation/a/}');
Expect(1, 8303, '\p{Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Block=-_General_Punctuation}', "");
Expect(0, 8303, '\p{^Is_Block=-_General_Punctuation}', "");
Expect(0, 8303, '\P{Is_Block=-_General_Punctuation}', "");
Expect(1, 8303, '\P{^Is_Block=-_General_Punctuation}', "");
Expect(0, 8191, '\p{Is_Block=-_General_Punctuation}', "");
Expect(1, 8191, '\p{^Is_Block=-_General_Punctuation}', "");
Expect(1, 8191, '\P{Is_Block=-_General_Punctuation}', "");
Expect(0, 8191, '\P{^Is_Block=-_General_Punctuation}', "");
Error('\p{Is_Blk=-general	Punctuation:=}');
Error('\P{Is_Blk=-general	Punctuation:=}');
Expect(1, 8303, '\p{Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Blk=-_Generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=-_Generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Blk=-_Generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=-_Generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Blk=-_Generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=-_Generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Blk=-_Generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=-_Generalpunctuation}', "");
Error('\p{Block= :=REJANG}');
Error('\P{Block= :=REJANG}');
Expect(1, 43359, '\p{Block=rejang}', "");
Expect(0, 43359, '\p{^Block=rejang}', "");
Expect(0, 43359, '\P{Block=rejang}', "");
Expect(1, 43359, '\P{^Block=rejang}', "");
Expect(0, 43311, '\p{Block=rejang}', "");
Expect(1, 43311, '\p{^Block=rejang}', "");
Expect(1, 43311, '\P{Block=rejang}', "");
Expect(0, 43311, '\P{^Block=rejang}', "");
Expect(1, 43359, '\p{Block=	REJANG}', "");
Expect(0, 43359, '\p{^Block=	REJANG}', "");
Expect(0, 43359, '\P{Block=	REJANG}', "");
Expect(1, 43359, '\P{^Block=	REJANG}', "");
Expect(0, 43311, '\p{Block=	REJANG}', "");
Expect(1, 43311, '\p{^Block=	REJANG}', "");
Expect(1, 43311, '\P{Block=	REJANG}', "");
Expect(0, 43311, '\P{^Block=	REJANG}', "");
Error('\p{Blk=_/a/Rejang}');
Error('\P{Blk=_/a/Rejang}');
Expect(1, 43359, '\p{Blk=rejang}', "");
Expect(0, 43359, '\p{^Blk=rejang}', "");
Expect(0, 43359, '\P{Blk=rejang}', "");
Expect(1, 43359, '\P{^Blk=rejang}', "");
Expect(0, 43311, '\p{Blk=rejang}', "");
Expect(1, 43311, '\p{^Blk=rejang}', "");
Expect(1, 43311, '\P{Blk=rejang}', "");
Expect(0, 43311, '\P{^Blk=rejang}', "");
Expect(1, 43359, '\p{Blk=	_Rejang}', "");
Expect(0, 43359, '\p{^Blk=	_Rejang}', "");
Expect(0, 43359, '\P{Blk=	_Rejang}', "");
Expect(1, 43359, '\P{^Blk=	_Rejang}', "");
Expect(0, 43311, '\p{Blk=	_Rejang}', "");
Expect(1, 43311, '\p{^Blk=	_Rejang}', "");
Expect(1, 43311, '\P{Blk=	_Rejang}', "");
Expect(0, 43311, '\P{^Blk=	_Rejang}', "");
Error('\p{Is_Block=/a/_-Rejang}');
Error('\P{Is_Block=/a/_-Rejang}');
Expect(1, 43359, '\p{Is_Block=rejang}', "");
Expect(0, 43359, '\p{^Is_Block=rejang}', "");
Expect(0, 43359, '\P{Is_Block=rejang}', "");
Expect(1, 43359, '\P{^Is_Block=rejang}', "");
Expect(0, 43311, '\p{Is_Block=rejang}', "");
Expect(1, 43311, '\p{^Is_Block=rejang}', "");
Expect(1, 43311, '\P{Is_Block=rejang}', "");
Expect(0, 43311, '\P{^Is_Block=rejang}', "");
Expect(1, 43359, '\p{Is_Block=_	Rejang}', "");
Expect(0, 43359, '\p{^Is_Block=_	Rejang}', "");
Expect(0, 43359, '\P{Is_Block=_	Rejang}', "");
Expect(1, 43359, '\P{^Is_Block=_	Rejang}', "");
Expect(0, 43311, '\p{Is_Block=_	Rejang}', "");
Expect(1, 43311, '\p{^Is_Block=_	Rejang}', "");
Expect(1, 43311, '\P{Is_Block=_	Rejang}', "");
Expect(0, 43311, '\P{^Is_Block=_	Rejang}', "");
Error('\p{Is_Blk=-	rejang/a/}');
Error('\P{Is_Blk=-	rejang/a/}');
Expect(1, 43359, '\p{Is_Blk=rejang}', "");
Expect(0, 43359, '\p{^Is_Blk=rejang}', "");
Expect(0, 43359, '\P{Is_Blk=rejang}', "");
Expect(1, 43359, '\P{^Is_Blk=rejang}', "");
Expect(0, 43311, '\p{Is_Blk=rejang}', "");
Expect(1, 43311, '\p{^Is_Blk=rejang}', "");
Expect(1, 43311, '\P{Is_Blk=rejang}', "");
Expect(0, 43311, '\P{^Is_Blk=rejang}', "");
Expect(1, 43359, '\p{Is_Blk= _rejang}', "");
Expect(0, 43359, '\p{^Is_Blk= _rejang}', "");
Expect(0, 43359, '\P{Is_Blk= _rejang}', "");
Expect(1, 43359, '\P{^Is_Blk= _rejang}', "");
Expect(0, 43311, '\p{Is_Blk= _rejang}', "");
Expect(1, 43311, '\p{^Is_Blk= _rejang}', "");
Expect(1, 43311, '\P{Is_Blk= _rejang}', "");
Expect(0, 43311, '\P{^Is_Blk= _rejang}', "");
Error('\p{Block= :=oldturkic}');
Error('\P{Block= :=oldturkic}');
Expect(1, 68687, '\p{Block=oldturkic}', "");
Expect(0, 68687, '\p{^Block=oldturkic}', "");
Expect(0, 68687, '\P{Block=oldturkic}', "");
Expect(1, 68687, '\P{^Block=oldturkic}', "");
Expect(0, 68607, '\p{Block=oldturkic}', "");
Expect(1, 68607, '\p{^Block=oldturkic}', "");
Expect(1, 68607, '\P{Block=oldturkic}', "");
Expect(0, 68607, '\P{^Block=oldturkic}', "");
Expect(1, 68687, '\p{Block=_ OldTurkic}', "");
Expect(0, 68687, '\p{^Block=_ OldTurkic}', "");
Expect(0, 68687, '\P{Block=_ OldTurkic}', "");
Expect(1, 68687, '\P{^Block=_ OldTurkic}', "");
Expect(0, 68607, '\p{Block=_ OldTurkic}', "");
Expect(1, 68607, '\p{^Block=_ OldTurkic}', "");
Expect(1, 68607, '\P{Block=_ OldTurkic}', "");
Expect(0, 68607, '\P{^Block=_ OldTurkic}', "");
Error('\p{Blk:    :=OLD	Turkic}');
Error('\P{Blk:    :=OLD	Turkic}');
Expect(1, 68687, '\p{Blk=oldturkic}', "");
Expect(0, 68687, '\p{^Blk=oldturkic}', "");
Expect(0, 68687, '\P{Blk=oldturkic}', "");
Expect(1, 68687, '\P{^Blk=oldturkic}', "");
Expect(0, 68607, '\p{Blk=oldturkic}', "");
Expect(1, 68607, '\p{^Blk=oldturkic}', "");
Expect(1, 68607, '\P{Blk=oldturkic}', "");
Expect(0, 68607, '\P{^Blk=oldturkic}', "");
Expect(1, 68687, '\p{Blk= OLD_TURKIC}', "");
Expect(0, 68687, '\p{^Blk= OLD_TURKIC}', "");
Expect(0, 68687, '\P{Blk= OLD_TURKIC}', "");
Expect(1, 68687, '\P{^Blk= OLD_TURKIC}', "");
Expect(0, 68607, '\p{Blk= OLD_TURKIC}', "");
Expect(1, 68607, '\p{^Blk= OLD_TURKIC}', "");
Expect(1, 68607, '\P{Blk= OLD_TURKIC}', "");
Expect(0, 68607, '\P{^Blk= OLD_TURKIC}', "");
Error('\p{Is_Block=	Old/a/turkic}');
Error('\P{Is_Block=	Old/a/turkic}');
Expect(1, 68687, '\p{Is_Block:oldturkic}', "");
Expect(0, 68687, '\p{^Is_Block:oldturkic}', "");
Expect(0, 68687, '\P{Is_Block:oldturkic}', "");
Expect(1, 68687, '\P{^Is_Block:oldturkic}', "");
Expect(0, 68607, '\p{Is_Block:oldturkic}', "");
Expect(1, 68607, '\p{^Is_Block:oldturkic}', "");
Expect(1, 68607, '\P{Is_Block:oldturkic}', "");
Expect(0, 68607, '\P{^Is_Block:oldturkic}', "");
Expect(1, 68687, '\p{Is_Block=_Old-turkic}', "");
Expect(0, 68687, '\p{^Is_Block=_Old-turkic}', "");
Expect(0, 68687, '\P{Is_Block=_Old-turkic}', "");
Expect(1, 68687, '\P{^Is_Block=_Old-turkic}', "");
Expect(0, 68607, '\p{Is_Block=_Old-turkic}', "");
Expect(1, 68607, '\p{^Is_Block=_Old-turkic}', "");
Expect(1, 68607, '\P{Is_Block=_Old-turkic}', "");
Expect(0, 68607, '\P{^Is_Block=_Old-turkic}', "");
Error('\p{Is_Blk=__Old-TURKIC:=}');
Error('\P{Is_Blk=__Old-TURKIC:=}');
Expect(1, 68687, '\p{Is_Blk=oldturkic}', "");
Expect(0, 68687, '\p{^Is_Blk=oldturkic}', "");
Expect(0, 68687, '\P{Is_Blk=oldturkic}', "");
Expect(1, 68687, '\P{^Is_Blk=oldturkic}', "");
Expect(0, 68607, '\p{Is_Blk=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Blk=oldturkic}', "");
Expect(1, 68607, '\P{Is_Blk=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Blk=oldturkic}', "");
Expect(1, 68687, '\p{Is_Blk=-Old	Turkic}', "");
Expect(0, 68687, '\p{^Is_Blk=-Old	Turkic}', "");
Expect(0, 68687, '\P{Is_Blk=-Old	Turkic}', "");
Expect(1, 68687, '\P{^Is_Blk=-Old	Turkic}', "");
Expect(0, 68607, '\p{Is_Blk=-Old	Turkic}', "");
Expect(1, 68607, '\p{^Is_Blk=-Old	Turkic}', "");
Expect(1, 68607, '\P{Is_Blk=-Old	Turkic}', "");
Expect(0, 68607, '\P{^Is_Blk=-Old	Turkic}', "");
Error('\p{Block= ol/a/chiki}');
Error('\P{Block= ol/a/chiki}');
Expect(1, 7295, '\p{Block=olchiki}', "");
Expect(0, 7295, '\p{^Block=olchiki}', "");
Expect(0, 7295, '\P{Block=olchiki}', "");
Expect(1, 7295, '\P{^Block=olchiki}', "");
Expect(0, 7247, '\p{Block=olchiki}', "");
Expect(1, 7247, '\p{^Block=olchiki}', "");
Expect(1, 7247, '\P{Block=olchiki}', "");
Expect(0, 7247, '\P{^Block=olchiki}', "");
Expect(1, 7295, '\p{Block=  OL-Chiki}', "");
Expect(0, 7295, '\p{^Block=  OL-Chiki}', "");
Expect(0, 7295, '\P{Block=  OL-Chiki}', "");
Expect(1, 7295, '\P{^Block=  OL-Chiki}', "");
Expect(0, 7247, '\p{Block=  OL-Chiki}', "");
Expect(1, 7247, '\p{^Block=  OL-Chiki}', "");
Expect(1, 7247, '\P{Block=  OL-Chiki}', "");
Expect(0, 7247, '\P{^Block=  OL-Chiki}', "");
Error('\p{Blk=		Ol	CHIKI/a/}');
Error('\P{Blk=		Ol	CHIKI/a/}');
Expect(1, 7295, '\p{Blk=olchiki}', "");
Expect(0, 7295, '\p{^Blk=olchiki}', "");
Expect(0, 7295, '\P{Blk=olchiki}', "");
Expect(1, 7295, '\P{^Blk=olchiki}', "");
Expect(0, 7247, '\p{Blk=olchiki}', "");
Expect(1, 7247, '\p{^Blk=olchiki}', "");
Expect(1, 7247, '\P{Blk=olchiki}', "");
Expect(0, 7247, '\P{^Blk=olchiki}', "");
Expect(1, 7295, '\p{Blk:   	OL	CHIKI}', "");
Expect(0, 7295, '\p{^Blk:   	OL	CHIKI}', "");
Expect(0, 7295, '\P{Blk:   	OL	CHIKI}', "");
Expect(1, 7295, '\P{^Blk:   	OL	CHIKI}', "");
Expect(0, 7247, '\p{Blk:   	OL	CHIKI}', "");
Expect(1, 7247, '\p{^Blk:   	OL	CHIKI}', "");
Expect(1, 7247, '\P{Blk:   	OL	CHIKI}', "");
Expect(0, 7247, '\P{^Blk:   	OL	CHIKI}', "");
Error('\p{Is_Block:   _OL:=CHIKI}');
Error('\P{Is_Block:   _OL:=CHIKI}');
Expect(1, 7295, '\p{Is_Block:	olchiki}', "");
Expect(0, 7295, '\p{^Is_Block:	olchiki}', "");
Expect(0, 7295, '\P{Is_Block:	olchiki}', "");
Expect(1, 7295, '\P{^Is_Block:	olchiki}', "");
Expect(0, 7247, '\p{Is_Block:	olchiki}', "");
Expect(1, 7247, '\p{^Is_Block:	olchiki}', "");
Expect(1, 7247, '\P{Is_Block:	olchiki}', "");
Expect(0, 7247, '\P{^Is_Block:	olchiki}', "");
Expect(1, 7295, '\p{Is_Block=	-Ol_Chiki}', "");
Expect(0, 7295, '\p{^Is_Block=	-Ol_Chiki}', "");
Expect(0, 7295, '\P{Is_Block=	-Ol_Chiki}', "");
Expect(1, 7295, '\P{^Is_Block=	-Ol_Chiki}', "");
Expect(0, 7247, '\p{Is_Block=	-Ol_Chiki}', "");
Expect(1, 7247, '\p{^Is_Block=	-Ol_Chiki}', "");
Expect(1, 7247, '\P{Is_Block=	-Ol_Chiki}', "");
Expect(0, 7247, '\P{^Is_Block=	-Ol_Chiki}', "");
Error('\p{Is_Blk:	-_Ol-Chiki/a/}');
Error('\P{Is_Blk:	-_Ol-Chiki/a/}');
Expect(1, 7295, '\p{Is_Blk=olchiki}', "");
Expect(0, 7295, '\p{^Is_Blk=olchiki}', "");
Expect(0, 7295, '\P{Is_Blk=olchiki}', "");
Expect(1, 7295, '\P{^Is_Blk=olchiki}', "");
Expect(0, 7247, '\p{Is_Blk=olchiki}', "");
Expect(1, 7247, '\p{^Is_Blk=olchiki}', "");
Expect(1, 7247, '\P{Is_Blk=olchiki}', "");
Expect(0, 7247, '\P{^Is_Blk=olchiki}', "");
Expect(1, 7295, '\p{Is_Blk=- Olchiki}', "");
Expect(0, 7295, '\p{^Is_Blk=- Olchiki}', "");
Expect(0, 7295, '\P{Is_Blk=- Olchiki}', "");
Expect(1, 7295, '\P{^Is_Blk=- Olchiki}', "");
Expect(0, 7247, '\p{Is_Blk=- Olchiki}', "");
Expect(1, 7247, '\p{^Is_Blk=- Olchiki}', "");
Expect(1, 7247, '\P{Is_Blk=- Olchiki}', "");
Expect(0, 7247, '\P{^Is_Blk=- Olchiki}', "");
Error('\p{Block=Kanbun/a/}');
Error('\P{Block=Kanbun/a/}');
Expect(1, 12703, '\p{Block=kanbun}', "");
Expect(0, 12703, '\p{^Block=kanbun}', "");
Expect(0, 12703, '\P{Block=kanbun}', "");
Expect(1, 12703, '\P{^Block=kanbun}', "");
Expect(0, 12687, '\p{Block=kanbun}', "");
Expect(1, 12687, '\p{^Block=kanbun}', "");
Expect(1, 12687, '\P{Block=kanbun}', "");
Expect(0, 12687, '\P{^Block=kanbun}', "");
Expect(1, 12703, '\p{Block=-	KANBUN}', "");
Expect(0, 12703, '\p{^Block=-	KANBUN}', "");
Expect(0, 12703, '\P{Block=-	KANBUN}', "");
Expect(1, 12703, '\P{^Block=-	KANBUN}', "");
Expect(0, 12687, '\p{Block=-	KANBUN}', "");
Expect(1, 12687, '\p{^Block=-	KANBUN}', "");
Expect(1, 12687, '\P{Block=-	KANBUN}', "");
Expect(0, 12687, '\P{^Block=-	KANBUN}', "");
Error('\p{Blk=:=  kanbun}');
Error('\P{Blk=:=  kanbun}');
Expect(1, 12703, '\p{Blk=kanbun}', "");
Expect(0, 12703, '\p{^Blk=kanbun}', "");
Expect(0, 12703, '\P{Blk=kanbun}', "");
Expect(1, 12703, '\P{^Blk=kanbun}', "");
Expect(0, 12687, '\p{Blk=kanbun}', "");
Expect(1, 12687, '\p{^Blk=kanbun}', "");
Expect(1, 12687, '\P{Blk=kanbun}', "");
Expect(0, 12687, '\P{^Blk=kanbun}', "");
Expect(1, 12703, '\p{Blk: -kanbun}', "");
Expect(0, 12703, '\p{^Blk: -kanbun}', "");
Expect(0, 12703, '\P{Blk: -kanbun}', "");
Expect(1, 12703, '\P{^Blk: -kanbun}', "");
Expect(0, 12687, '\p{Blk: -kanbun}', "");
Expect(1, 12687, '\p{^Blk: -kanbun}', "");
Expect(1, 12687, '\P{Blk: -kanbun}', "");
Expect(0, 12687, '\P{^Blk: -kanbun}', "");
Error('\p{Is_Block=	-Kanbun:=}');
Error('\P{Is_Block=	-Kanbun:=}');
Expect(1, 12703, '\p{Is_Block=kanbun}', "");
Expect(0, 12703, '\p{^Is_Block=kanbun}', "");
Expect(0, 12703, '\P{Is_Block=kanbun}', "");
Expect(1, 12703, '\P{^Is_Block=kanbun}', "");
Expect(0, 12687, '\p{Is_Block=kanbun}', "");
Expect(1, 12687, '\p{^Is_Block=kanbun}', "");
Expect(1, 12687, '\P{Is_Block=kanbun}', "");
Expect(0, 12687, '\P{^Is_Block=kanbun}', "");
Expect(1, 12703, '\p{Is_Block=_	Kanbun}', "");
Expect(0, 12703, '\p{^Is_Block=_	Kanbun}', "");
Expect(0, 12703, '\P{Is_Block=_	Kanbun}', "");
Expect(1, 12703, '\P{^Is_Block=_	Kanbun}', "");
Expect(0, 12687, '\p{Is_Block=_	Kanbun}', "");
Expect(1, 12687, '\p{^Is_Block=_	Kanbun}', "");
Expect(1, 12687, '\P{Is_Block=_	Kanbun}', "");
Expect(0, 12687, '\P{^Is_Block=_	Kanbun}', "");
Error('\p{Is_Blk=/a/ _Kanbun}');
Error('\P{Is_Blk=/a/ _Kanbun}');
Expect(1, 12703, '\p{Is_Blk=kanbun}', "");
Expect(0, 12703, '\p{^Is_Blk=kanbun}', "");
Expect(0, 12703, '\P{Is_Blk=kanbun}', "");
Expect(1, 12703, '\P{^Is_Blk=kanbun}', "");
Expect(0, 12687, '\p{Is_Blk=kanbun}', "");
Expect(1, 12687, '\p{^Is_Blk=kanbun}', "");
Expect(1, 12687, '\P{Is_Blk=kanbun}', "");
Expect(0, 12687, '\P{^Is_Blk=kanbun}', "");
Expect(1, 12703, '\p{Is_Blk=-Kanbun}', "");
Expect(0, 12703, '\p{^Is_Blk=-Kanbun}', "");
Expect(0, 12703, '\P{Is_Blk=-Kanbun}', "");
Expect(1, 12703, '\P{^Is_Blk=-Kanbun}', "");
Expect(0, 12687, '\p{Is_Blk=-Kanbun}', "");
Expect(1, 12687, '\p{^Is_Blk=-Kanbun}', "");
Expect(1, 12687, '\P{Is_Blk=-Kanbun}', "");
Expect(0, 12687, '\P{^Is_Blk=-Kanbun}', "");
Error('\p{Block=-cyrillic-Extended A/a/}');
Error('\P{Block=-cyrillic-Extended A/a/}');
Expect(1, 11775, '\p{Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Block=		CYRILLICextended-A}', "");
Expect(0, 11775, '\p{^Block=		CYRILLICextended-A}', "");
Expect(0, 11775, '\P{Block=		CYRILLICextended-A}', "");
Expect(1, 11775, '\P{^Block=		CYRILLICextended-A}', "");
Expect(0, 11743, '\p{Block=		CYRILLICextended-A}', "");
Expect(1, 11743, '\p{^Block=		CYRILLICextended-A}', "");
Expect(1, 11743, '\P{Block=		CYRILLICextended-A}', "");
Expect(0, 11743, '\P{^Block=		CYRILLICextended-A}', "");
Error('\p{Blk:_-Cyrillic/a/ExtendedA}');
Error('\P{Blk:_-Cyrillic/a/ExtendedA}');
Expect(1, 11775, '\p{Blk:cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Blk:cyrillicextendeda}', "");
Expect(0, 11775, '\P{Blk:cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Blk:cyrillicextendeda}', "");
Expect(0, 11743, '\p{Blk:cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Blk:cyrillicextendeda}', "");
Expect(1, 11743, '\P{Blk:cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Blk:cyrillicextendeda}', "");
Expect(1, 11775, '\p{Blk= Cyrillic	extended	A}', "");
Expect(0, 11775, '\p{^Blk= Cyrillic	extended	A}', "");
Expect(0, 11775, '\P{Blk= Cyrillic	extended	A}', "");
Expect(1, 11775, '\P{^Blk= Cyrillic	extended	A}', "");
Expect(0, 11743, '\p{Blk= Cyrillic	extended	A}', "");
Expect(1, 11743, '\p{^Blk= Cyrillic	extended	A}', "");
Expect(1, 11743, '\P{Blk= Cyrillic	extended	A}', "");
Expect(0, 11743, '\P{^Blk= Cyrillic	extended	A}', "");
Error('\p{Is_Block= 	Cyrillic-Extended-a/a/}');
Error('\P{Is_Block= 	Cyrillic-Extended-a/a/}');
Expect(1, 11775, '\p{Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Block= 	CYRILLIC Extended_A}', "");
Expect(0, 11775, '\p{^Is_Block= 	CYRILLIC Extended_A}', "");
Expect(0, 11775, '\P{Is_Block= 	CYRILLIC Extended_A}', "");
Expect(1, 11775, '\P{^Is_Block= 	CYRILLIC Extended_A}', "");
Expect(0, 11743, '\p{Is_Block= 	CYRILLIC Extended_A}', "");
Expect(1, 11743, '\p{^Is_Block= 	CYRILLIC Extended_A}', "");
Expect(1, 11743, '\P{Is_Block= 	CYRILLIC Extended_A}', "");
Expect(0, 11743, '\P{^Is_Block= 	CYRILLIC Extended_A}', "");
Error('\p{Is_Blk=:=-	CYRILLIC-extended-A}');
Error('\P{Is_Blk=:=-	CYRILLIC-extended-A}');
Expect(1, 11775, '\p{Is_Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(0, 11775, '\p{^Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(0, 11775, '\P{Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(1, 11775, '\P{^Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(0, 11743, '\p{Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(1, 11743, '\p{^Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(1, 11743, '\P{Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Expect(0, 11743, '\P{^Is_Blk:	_CYRILLIC EXTENDED_A}', "");
Error('\p{Block=	/a/HEBREW}');
Error('\P{Block=	/a/HEBREW}');
Expect(1, 1535, '\p{Block=hebrew}', "");
Expect(0, 1535, '\p{^Block=hebrew}', "");
Expect(0, 1535, '\P{Block=hebrew}', "");
Expect(1, 1535, '\P{^Block=hebrew}', "");
Expect(0, 1423, '\p{Block=hebrew}', "");
Expect(1, 1423, '\p{^Block=hebrew}', "");
Expect(1, 1423, '\P{Block=hebrew}', "");
Expect(0, 1423, '\P{^Block=hebrew}', "");
Expect(1, 1535, '\p{Block= _hebrew}', "");
Expect(0, 1535, '\p{^Block= _hebrew}', "");
Expect(0, 1535, '\P{Block= _hebrew}', "");
Expect(1, 1535, '\P{^Block= _hebrew}', "");
Expect(0, 1423, '\p{Block= _hebrew}', "");
Expect(1, 1423, '\p{^Block= _hebrew}', "");
Expect(1, 1423, '\P{Block= _hebrew}', "");
Expect(0, 1423, '\P{^Block= _hebrew}', "");
Error('\p{Blk=:=--Hebrew}');
Error('\P{Blk=:=--Hebrew}');
Expect(1, 1535, '\p{Blk=hebrew}', "");
Expect(0, 1535, '\p{^Blk=hebrew}', "");
Expect(0, 1535, '\P{Blk=hebrew}', "");
Expect(1, 1535, '\P{^Blk=hebrew}', "");
Expect(0, 1423, '\p{Blk=hebrew}', "");
Expect(1, 1423, '\p{^Blk=hebrew}', "");
Expect(1, 1423, '\P{Blk=hebrew}', "");
Expect(0, 1423, '\P{^Blk=hebrew}', "");
Expect(1, 1535, '\p{Blk=-_hebrew}', "");
Expect(0, 1535, '\p{^Blk=-_hebrew}', "");
Expect(0, 1535, '\P{Blk=-_hebrew}', "");
Expect(1, 1535, '\P{^Blk=-_hebrew}', "");
Expect(0, 1423, '\p{Blk=-_hebrew}', "");
Expect(1, 1423, '\p{^Blk=-_hebrew}', "");
Expect(1, 1423, '\P{Blk=-_hebrew}', "");
Expect(0, 1423, '\P{^Blk=-_hebrew}', "");
Error('\p{Is_Block=/a/_hebrew}');
Error('\P{Is_Block=/a/_hebrew}');
Expect(1, 1535, '\p{Is_Block=hebrew}', "");
Expect(0, 1535, '\p{^Is_Block=hebrew}', "");
Expect(0, 1535, '\P{Is_Block=hebrew}', "");
Expect(1, 1535, '\P{^Is_Block=hebrew}', "");
Expect(0, 1423, '\p{Is_Block=hebrew}', "");
Expect(1, 1423, '\p{^Is_Block=hebrew}', "");
Expect(1, 1423, '\P{Is_Block=hebrew}', "");
Expect(0, 1423, '\P{^Is_Block=hebrew}', "");
Expect(1, 1535, '\p{Is_Block= _Hebrew}', "");
Expect(0, 1535, '\p{^Is_Block= _Hebrew}', "");
Expect(0, 1535, '\P{Is_Block= _Hebrew}', "");
Expect(1, 1535, '\P{^Is_Block= _Hebrew}', "");
Expect(0, 1423, '\p{Is_Block= _Hebrew}', "");
Expect(1, 1423, '\p{^Is_Block= _Hebrew}', "");
Expect(1, 1423, '\P{Is_Block= _Hebrew}', "");
Expect(0, 1423, '\P{^Is_Block= _Hebrew}', "");
Error('\p{Is_Blk=:= Hebrew}');
Error('\P{Is_Blk=:= Hebrew}');
Expect(1, 1535, '\p{Is_Blk: hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk: hebrew}', "");
Expect(0, 1535, '\P{Is_Blk: hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk: hebrew}', "");
Expect(0, 1423, '\p{Is_Blk: hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk: hebrew}', "");
Expect(1, 1423, '\P{Is_Blk: hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk: hebrew}', "");
Expect(1, 1535, '\p{Is_Blk=	_hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk=	_hebrew}', "");
Expect(0, 1535, '\P{Is_Blk=	_hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk=	_hebrew}', "");
Expect(0, 1423, '\p{Is_Blk=	_hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk=	_hebrew}', "");
Expect(1, 1423, '\P{Is_Blk=	_hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk=	_hebrew}', "");
Error('\p{Block= CYRILLIC/a/}');
Error('\P{Block= CYRILLIC/a/}');
Expect(1, 1279, '\p{Block=cyrillic}', "");
Expect(0, 1279, '\p{^Block=cyrillic}', "");
Expect(0, 1279, '\P{Block=cyrillic}', "");
Expect(1, 1279, '\P{^Block=cyrillic}', "");
Expect(0, 1023, '\p{Block=cyrillic}', "");
Expect(1, 1023, '\p{^Block=cyrillic}', "");
Expect(1, 1023, '\P{Block=cyrillic}', "");
Expect(0, 1023, '\P{^Block=cyrillic}', "");
Expect(1, 1279, '\p{Block: -Cyrillic}', "");
Expect(0, 1279, '\p{^Block: -Cyrillic}', "");
Expect(0, 1279, '\P{Block: -Cyrillic}', "");
Expect(1, 1279, '\P{^Block: -Cyrillic}', "");
Expect(0, 1023, '\p{Block: -Cyrillic}', "");
Expect(1, 1023, '\p{^Block: -Cyrillic}', "");
Expect(1, 1023, '\P{Block: -Cyrillic}', "");
Expect(0, 1023, '\P{^Block: -Cyrillic}', "");
Error('\p{Blk=-CYRILLIC/a/}');
Error('\P{Blk=-CYRILLIC/a/}');
Expect(1, 1279, '\p{Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Blk=cyrillic}', "");
Expect(0, 1279, '\P{Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Blk=cyrillic}', "");
Expect(0, 1023, '\p{Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Blk=cyrillic}', "");
Expect(1, 1023, '\P{Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Blk=cyrillic}', "");
Expect(1, 1279, '\p{Blk=_-Cyrillic}', "");
Expect(0, 1279, '\p{^Blk=_-Cyrillic}', "");
Expect(0, 1279, '\P{Blk=_-Cyrillic}', "");
Expect(1, 1279, '\P{^Blk=_-Cyrillic}', "");
Expect(0, 1023, '\p{Blk=_-Cyrillic}', "");
Expect(1, 1023, '\p{^Blk=_-Cyrillic}', "");
Expect(1, 1023, '\P{Blk=_-Cyrillic}', "");
Expect(0, 1023, '\P{^Blk=_-Cyrillic}', "");
Error('\p{Is_Block=-cyrillic/a/}');
Error('\P{Is_Block=-cyrillic/a/}');
Expect(1, 1279, '\p{Is_Block=cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block=cyrillic}', "");
Expect(0, 1279, '\P{Is_Block=cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block=cyrillic}', "");
Expect(0, 1023, '\p{Is_Block=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block=cyrillic}', "");
Expect(1, 1023, '\P{Is_Block=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block=cyrillic}', "");
Expect(1, 1279, '\p{Is_Block= _Cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block= _Cyrillic}', "");
Expect(0, 1279, '\P{Is_Block= _Cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block= _Cyrillic}', "");
Expect(0, 1023, '\p{Is_Block= _Cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block= _Cyrillic}', "");
Expect(1, 1023, '\P{Is_Block= _Cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block= _Cyrillic}', "");
Error('\p{Is_Blk=_/a/cyrillic}');
Error('\P{Is_Blk=_/a/cyrillic}');
Expect(1, 1279, '\p{Is_Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk=cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk=cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk=cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk=cyrillic}', "");
Expect(1, 1279, '\p{Is_Blk=_-cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk=_-cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk=_-cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk=_-cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk=_-cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk=_-cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk=_-cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk=_-cyrillic}', "");
Error('\p{Block=_LATIN Extended:=a}');
Error('\P{Block=_LATIN Extended:=a}');
Expect(1, 383, '\p{Block=latinextendeda}', "");
Expect(0, 383, '\p{^Block=latinextendeda}', "");
Expect(0, 383, '\P{Block=latinextendeda}', "");
Expect(1, 383, '\P{^Block=latinextendeda}', "");
Expect(0, 255, '\p{Block=latinextendeda}', "");
Expect(1, 255, '\p{^Block=latinextendeda}', "");
Expect(1, 255, '\P{Block=latinextendeda}', "");
Expect(0, 255, '\P{^Block=latinextendeda}', "");
Expect(1, 383, '\p{Block=--Latin EXTENDED-A}', "");
Expect(0, 383, '\p{^Block=--Latin EXTENDED-A}', "");
Expect(0, 383, '\P{Block=--Latin EXTENDED-A}', "");
Expect(1, 383, '\P{^Block=--Latin EXTENDED-A}', "");
Expect(0, 255, '\p{Block=--Latin EXTENDED-A}', "");
Expect(1, 255, '\p{^Block=--Latin EXTENDED-A}', "");
Expect(1, 255, '\P{Block=--Latin EXTENDED-A}', "");
Expect(0, 255, '\P{^Block=--Latin EXTENDED-A}', "");
Error('\p{Blk=/a/LATIN	extended-A}');
Error('\P{Blk=/a/LATIN	extended-A}');
Expect(1, 383, '\p{Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Blk=latinextendeda}', "");
Expect(0, 383, '\P{Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Blk=latinextendeda}', "");
Expect(0, 255, '\p{Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Blk=latinextendeda}', "");
Expect(1, 255, '\P{Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Blk=latinextendeda}', "");
Expect(1, 383, '\p{Blk=__LATIN-extended	A}', "");
Expect(0, 383, '\p{^Blk=__LATIN-extended	A}', "");
Expect(0, 383, '\P{Blk=__LATIN-extended	A}', "");
Expect(1, 383, '\P{^Blk=__LATIN-extended	A}', "");
Expect(0, 255, '\p{Blk=__LATIN-extended	A}', "");
Expect(1, 255, '\p{^Blk=__LATIN-extended	A}', "");
Expect(1, 255, '\P{Blk=__LATIN-extended	A}', "");
Expect(0, 255, '\P{^Blk=__LATIN-extended	A}', "");
Error('\p{Is_Block= -Latin Extended/a/A}');
Error('\P{Is_Block= -Latin Extended/a/A}');
Expect(1, 383, '\p{Is_Block=latinextendeda}', "");
Expect(0, 383, '\p{^Is_Block=latinextendeda}', "");
Expect(0, 383, '\P{Is_Block=latinextendeda}', "");
Expect(1, 383, '\P{^Is_Block=latinextendeda}', "");
Expect(0, 255, '\p{Is_Block=latinextendeda}', "");
Expect(1, 255, '\p{^Is_Block=latinextendeda}', "");
Expect(1, 255, '\P{Is_Block=latinextendeda}', "");
Expect(0, 255, '\P{^Is_Block=latinextendeda}', "");
Expect(1, 383, '\p{Is_Block=_LatinEXTENDED-a}', "");
Expect(0, 383, '\p{^Is_Block=_LatinEXTENDED-a}', "");
Expect(0, 383, '\P{Is_Block=_LatinEXTENDED-a}', "");
Expect(1, 383, '\P{^Is_Block=_LatinEXTENDED-a}', "");
Expect(0, 255, '\p{Is_Block=_LatinEXTENDED-a}', "");
Expect(1, 255, '\p{^Is_Block=_LatinEXTENDED-a}', "");
Expect(1, 255, '\P{Is_Block=_LatinEXTENDED-a}', "");
Expect(0, 255, '\P{^Is_Block=_LatinEXTENDED-a}', "");
Error('\p{Is_Blk=_-Latin-Extended_a:=}');
Error('\P{Is_Blk=_-Latin-Extended_a:=}');
Expect(1, 383, '\p{Is_Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Is_Blk=latinextendeda}', "");
Expect(0, 383, '\P{Is_Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Is_Blk=latinextendeda}', "");
Expect(0, 255, '\p{Is_Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Is_Blk=latinextendeda}', "");
Expect(1, 255, '\P{Is_Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Is_Blk=latinextendeda}', "");
Expect(1, 383, '\p{Is_Blk=-Latin_EXTENDED-a}', "");
Expect(0, 383, '\p{^Is_Blk=-Latin_EXTENDED-a}', "");
Expect(0, 383, '\P{Is_Blk=-Latin_EXTENDED-a}', "");
Expect(1, 383, '\P{^Is_Blk=-Latin_EXTENDED-a}', "");
Expect(0, 255, '\p{Is_Blk=-Latin_EXTENDED-a}', "");
Expect(1, 255, '\p{^Is_Blk=-Latin_EXTENDED-a}', "");
Expect(1, 255, '\P{Is_Blk=-Latin_EXTENDED-a}', "");
Expect(0, 255, '\P{^Is_Blk=-Latin_EXTENDED-a}', "");
Error('\p{Block=_ balinese/a/}');
Error('\P{Block=_ balinese/a/}');
Expect(1, 7039, '\p{Block=balinese}', "");
Expect(0, 7039, '\p{^Block=balinese}', "");
Expect(0, 7039, '\P{Block=balinese}', "");
Expect(1, 7039, '\P{^Block=balinese}', "");
Expect(0, 6911, '\p{Block=balinese}', "");
Expect(1, 6911, '\p{^Block=balinese}', "");
Expect(1, 6911, '\P{Block=balinese}', "");
Expect(0, 6911, '\P{^Block=balinese}', "");
Expect(1, 7039, '\p{Block=_-Balinese}', "");
Expect(0, 7039, '\p{^Block=_-Balinese}', "");
Expect(0, 7039, '\P{Block=_-Balinese}', "");
Expect(1, 7039, '\P{^Block=_-Balinese}', "");
Expect(0, 6911, '\p{Block=_-Balinese}', "");
Expect(1, 6911, '\p{^Block=_-Balinese}', "");
Expect(1, 6911, '\P{Block=_-Balinese}', "");
Expect(0, 6911, '\P{^Block=_-Balinese}', "");
Error('\p{Blk=:=_balinese}');
Error('\P{Blk=:=_balinese}');
Expect(1, 7039, '\p{Blk=balinese}', "");
Expect(0, 7039, '\p{^Blk=balinese}', "");
Expect(0, 7039, '\P{Blk=balinese}', "");
Expect(1, 7039, '\P{^Blk=balinese}', "");
Expect(0, 6911, '\p{Blk=balinese}', "");
Expect(1, 6911, '\p{^Blk=balinese}', "");
Expect(1, 6911, '\P{Blk=balinese}', "");
Expect(0, 6911, '\P{^Blk=balinese}', "");
Expect(1, 7039, '\p{Blk=  Balinese}', "");
Expect(0, 7039, '\p{^Blk=  Balinese}', "");
Expect(0, 7039, '\P{Blk=  Balinese}', "");
Expect(1, 7039, '\P{^Blk=  Balinese}', "");
Expect(0, 6911, '\p{Blk=  Balinese}', "");
Expect(1, 6911, '\p{^Blk=  Balinese}', "");
Expect(1, 6911, '\P{Blk=  Balinese}', "");
Expect(0, 6911, '\P{^Blk=  Balinese}', "");
Error('\p{Is_Block=-Balinese:=}');
Error('\P{Is_Block=-Balinese:=}');
Expect(1, 7039, '\p{Is_Block=balinese}', "");
Expect(0, 7039, '\p{^Is_Block=balinese}', "");
Expect(0, 7039, '\P{Is_Block=balinese}', "");
Expect(1, 7039, '\P{^Is_Block=balinese}', "");
Expect(0, 6911, '\p{Is_Block=balinese}', "");
Expect(1, 6911, '\p{^Is_Block=balinese}', "");
Expect(1, 6911, '\P{Is_Block=balinese}', "");
Expect(0, 6911, '\P{^Is_Block=balinese}', "");
Expect(1, 7039, '\p{Is_Block= -BALINESE}', "");
Expect(0, 7039, '\p{^Is_Block= -BALINESE}', "");
Expect(0, 7039, '\P{Is_Block= -BALINESE}', "");
Expect(1, 7039, '\P{^Is_Block= -BALINESE}', "");
Expect(0, 6911, '\p{Is_Block= -BALINESE}', "");
Expect(1, 6911, '\p{^Is_Block= -BALINESE}', "");
Expect(1, 6911, '\P{Is_Block= -BALINESE}', "");
Expect(0, 6911, '\P{^Is_Block= -BALINESE}', "");
Error('\p{Is_Blk=-_Balinese:=}');
Error('\P{Is_Blk=-_Balinese:=}');
Expect(1, 7039, '\p{Is_Blk=balinese}', "");
Expect(0, 7039, '\p{^Is_Blk=balinese}', "");
Expect(0, 7039, '\P{Is_Blk=balinese}', "");
Expect(1, 7039, '\P{^Is_Blk=balinese}', "");
Expect(0, 6911, '\p{Is_Blk=balinese}', "");
Expect(1, 6911, '\p{^Is_Blk=balinese}', "");
Expect(1, 6911, '\P{Is_Blk=balinese}', "");
Expect(0, 6911, '\P{^Is_Blk=balinese}', "");
Expect(1, 7039, '\p{Is_Blk= Balinese}', "");
Expect(0, 7039, '\p{^Is_Blk= Balinese}', "");
Expect(0, 7039, '\P{Is_Blk= Balinese}', "");
Expect(1, 7039, '\P{^Is_Blk= Balinese}', "");
Expect(0, 6911, '\p{Is_Blk= Balinese}', "");
Expect(1, 6911, '\p{^Is_Blk= Balinese}', "");
Expect(1, 6911, '\P{Is_Blk= Balinese}', "");
Expect(0, 6911, '\P{^Is_Blk= Balinese}', "");
Error('\p{Block=/a/	 Avestan}');
Error('\P{Block=/a/	 Avestan}');
Expect(1, 68415, '\p{Block=avestan}', "");
Expect(0, 68415, '\p{^Block=avestan}', "");
Expect(0, 68415, '\P{Block=avestan}', "");
Expect(1, 68415, '\P{^Block=avestan}', "");
Expect(0, 68351, '\p{Block=avestan}', "");
Expect(1, 68351, '\p{^Block=avestan}', "");
Expect(1, 68351, '\P{Block=avestan}', "");
Expect(0, 68351, '\P{^Block=avestan}', "");
Expect(1, 68415, '\p{Block=_	Avestan}', "");
Expect(0, 68415, '\p{^Block=_	Avestan}', "");
Expect(0, 68415, '\P{Block=_	Avestan}', "");
Expect(1, 68415, '\P{^Block=_	Avestan}', "");
Expect(0, 68351, '\p{Block=_	Avestan}', "");
Expect(1, 68351, '\p{^Block=_	Avestan}', "");
Expect(1, 68351, '\P{Block=_	Avestan}', "");
Expect(0, 68351, '\P{^Block=_	Avestan}', "");
Error('\p{Blk=	Avestan:=}');
Error('\P{Blk=	Avestan:=}');
Expect(1, 68415, '\p{Blk=avestan}', "");
Expect(0, 68415, '\p{^Blk=avestan}', "");
Expect(0, 68415, '\P{Blk=avestan}', "");
Expect(1, 68415, '\P{^Blk=avestan}', "");
Expect(0, 68351, '\p{Blk=avestan}', "");
Expect(1, 68351, '\p{^Blk=avestan}', "");
Expect(1, 68351, '\P{Blk=avestan}', "");
Expect(0, 68351, '\P{^Blk=avestan}', "");
Expect(1, 68415, '\p{Blk=-	avestan}', "");
Expect(0, 68415, '\p{^Blk=-	avestan}', "");
Expect(0, 68415, '\P{Blk=-	avestan}', "");
Expect(1, 68415, '\P{^Blk=-	avestan}', "");
Expect(0, 68351, '\p{Blk=-	avestan}', "");
Expect(1, 68351, '\p{^Blk=-	avestan}', "");
Expect(1, 68351, '\P{Blk=-	avestan}', "");
Expect(0, 68351, '\P{^Blk=-	avestan}', "");
Error('\p{Is_Block=:=-Avestan}');
Error('\P{Is_Block=:=-Avestan}');
Expect(1, 68415, '\p{Is_Block=avestan}', "");
Expect(0, 68415, '\p{^Is_Block=avestan}', "");
Expect(0, 68415, '\P{Is_Block=avestan}', "");
Expect(1, 68415, '\P{^Is_Block=avestan}', "");
Expect(0, 68351, '\p{Is_Block=avestan}', "");
Expect(1, 68351, '\p{^Is_Block=avestan}', "");
Expect(1, 68351, '\P{Is_Block=avestan}', "");
Expect(0, 68351, '\P{^Is_Block=avestan}', "");
Expect(1, 68415, '\p{Is_Block=_-Avestan}', "");
Expect(0, 68415, '\p{^Is_Block=_-Avestan}', "");
Expect(0, 68415, '\P{Is_Block=_-Avestan}', "");
Expect(1, 68415, '\P{^Is_Block=_-Avestan}', "");
Expect(0, 68351, '\p{Is_Block=_-Avestan}', "");
Expect(1, 68351, '\p{^Is_Block=_-Avestan}', "");
Expect(1, 68351, '\P{Is_Block=_-Avestan}', "");
Expect(0, 68351, '\P{^Is_Block=_-Avestan}', "");
Error('\p{Is_Blk=-AVESTAN:=}');
Error('\P{Is_Blk=-AVESTAN:=}');
Expect(1, 68415, '\p{Is_Blk=avestan}', "");
Expect(0, 68415, '\p{^Is_Blk=avestan}', "");
Expect(0, 68415, '\P{Is_Blk=avestan}', "");
Expect(1, 68415, '\P{^Is_Blk=avestan}', "");
Expect(0, 68351, '\p{Is_Blk=avestan}', "");
Expect(1, 68351, '\p{^Is_Blk=avestan}', "");
Expect(1, 68351, '\P{Is_Blk=avestan}', "");
Expect(0, 68351, '\P{^Is_Blk=avestan}', "");
Expect(1, 68415, '\p{Is_Blk:	__Avestan}', "");
Expect(0, 68415, '\p{^Is_Blk:	__Avestan}', "");
Expect(0, 68415, '\P{Is_Blk:	__Avestan}', "");
Expect(1, 68415, '\P{^Is_Blk:	__Avestan}', "");
Expect(0, 68351, '\p{Is_Blk:	__Avestan}', "");
Expect(1, 68351, '\p{^Is_Blk:	__Avestan}', "");
Expect(1, 68351, '\P{Is_Blk:	__Avestan}', "");
Expect(0, 68351, '\P{^Is_Blk:	__Avestan}', "");
Error('\p{Block=	:=myanmar	Extended-A}');
Error('\P{Block=	:=myanmar	Extended-A}');
Expect(1, 43647, '\p{Block=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Block=myanmarextendeda}', "");
Expect(0, 43647, '\P{Block=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Block=myanmarextendeda}', "");
Expect(0, 43615, '\p{Block=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Block=myanmarextendeda}', "");
Expect(1, 43615, '\P{Block=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Block=myanmarextendeda}', "");
Expect(1, 43647, '\p{Block=-MYANMAR_EXTENDEDA}', "");
Expect(0, 43647, '\p{^Block=-MYANMAR_EXTENDEDA}', "");
Expect(0, 43647, '\P{Block=-MYANMAR_EXTENDEDA}', "");
Expect(1, 43647, '\P{^Block=-MYANMAR_EXTENDEDA}', "");
Expect(0, 43615, '\p{Block=-MYANMAR_EXTENDEDA}', "");
Expect(1, 43615, '\p{^Block=-MYANMAR_EXTENDEDA}', "");
Expect(1, 43615, '\P{Block=-MYANMAR_EXTENDEDA}', "");
Expect(0, 43615, '\P{^Block=-MYANMAR_EXTENDEDA}', "");
Error('\p{Blk=  myanmar EXTENDED:=A}');
Error('\P{Blk=  myanmar EXTENDED:=A}');
Expect(1, 43647, '\p{Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Blk=-	Myanmar	EXTENDED_A}', "");
Expect(0, 43647, '\p{^Blk=-	Myanmar	EXTENDED_A}', "");
Expect(0, 43647, '\P{Blk=-	Myanmar	EXTENDED_A}', "");
Expect(1, 43647, '\P{^Blk=-	Myanmar	EXTENDED_A}', "");
Expect(0, 43615, '\p{Blk=-	Myanmar	EXTENDED_A}', "");
Expect(1, 43615, '\p{^Blk=-	Myanmar	EXTENDED_A}', "");
Expect(1, 43615, '\P{Blk=-	Myanmar	EXTENDED_A}', "");
Expect(0, 43615, '\P{^Blk=-	Myanmar	EXTENDED_A}', "");
Error('\p{Is_Block=:=myanmar	Extended	a}');
Error('\P{Is_Block=:=myanmar	Extended	a}');
Expect(1, 43647, '\p{Is_Block=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Block=myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Block=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Block=myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Block=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Block=myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Block=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Block=myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Block=-_Myanmar-Extended-A}', "");
Expect(0, 43647, '\p{^Is_Block=-_Myanmar-Extended-A}', "");
Expect(0, 43647, '\P{Is_Block=-_Myanmar-Extended-A}', "");
Expect(1, 43647, '\P{^Is_Block=-_Myanmar-Extended-A}', "");
Expect(0, 43615, '\p{Is_Block=-_Myanmar-Extended-A}', "");
Expect(1, 43615, '\p{^Is_Block=-_Myanmar-Extended-A}', "");
Expect(1, 43615, '\P{Is_Block=-_Myanmar-Extended-A}', "");
Expect(0, 43615, '\P{^Is_Block=-_Myanmar-Extended-A}', "");
Error('\p{Is_Blk=_/a/Myanmar-EXTENDEDa}');
Error('\P{Is_Blk=_/a/Myanmar-EXTENDEDa}');
Expect(1, 43647, '\p{Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Blk=-myanmar-ExtendedA}', "");
Expect(0, 43647, '\p{^Is_Blk=-myanmar-ExtendedA}', "");
Expect(0, 43647, '\P{Is_Blk=-myanmar-ExtendedA}', "");
Expect(1, 43647, '\P{^Is_Blk=-myanmar-ExtendedA}', "");
Expect(0, 43615, '\p{Is_Blk=-myanmar-ExtendedA}', "");
Expect(1, 43615, '\p{^Is_Blk=-myanmar-ExtendedA}', "");
Expect(1, 43615, '\P{Is_Blk=-myanmar-ExtendedA}', "");
Expect(0, 43615, '\P{^Is_Blk=-myanmar-ExtendedA}', "");
Error('\p{Block=_Counting:=rod	numerals}');
Error('\P{Block=_Counting:=rod	numerals}');
Expect(1, 119679, '\p{Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Block=-Countingrod-Numerals}', "");
Expect(0, 119679, '\p{^Block=-Countingrod-Numerals}', "");
Expect(0, 119679, '\P{Block=-Countingrod-Numerals}', "");
Expect(1, 119679, '\P{^Block=-Countingrod-Numerals}', "");
Expect(0, 119647, '\p{Block=-Countingrod-Numerals}', "");
Expect(1, 119647, '\p{^Block=-Countingrod-Numerals}', "");
Expect(1, 119647, '\P{Block=-Countingrod-Numerals}', "");
Expect(0, 119647, '\P{^Block=-Countingrod-Numerals}', "");
Error('\p{Blk::=COUNTING	RODnumerals}');
Error('\P{Blk::=COUNTING	RODnumerals}');
Expect(1, 119679, '\p{Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(0, 119679, '\p{^Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(0, 119679, '\P{Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(1, 119679, '\P{^Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(0, 119647, '\p{Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(1, 119647, '\p{^Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(1, 119647, '\P{Blk=--COUNTING-ROD	NUMERALS}', "");
Expect(0, 119647, '\P{^Blk=--COUNTING-ROD	NUMERALS}', "");
Error('\p{Is_Block=_/a/counting RodNumerals}');
Error('\P{Is_Block=_/a/counting RodNumerals}');
Expect(1, 119679, '\p{Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Block=	 counting-RodNumerals}', "");
Expect(0, 119679, '\p{^Is_Block=	 counting-RodNumerals}', "");
Expect(0, 119679, '\P{Is_Block=	 counting-RodNumerals}', "");
Expect(1, 119679, '\P{^Is_Block=	 counting-RodNumerals}', "");
Expect(0, 119647, '\p{Is_Block=	 counting-RodNumerals}', "");
Expect(1, 119647, '\p{^Is_Block=	 counting-RodNumerals}', "");
Expect(1, 119647, '\P{Is_Block=	 counting-RodNumerals}', "");
Expect(0, 119647, '\P{^Is_Block=	 counting-RodNumerals}', "");
Error('\p{Is_Blk=:=	counting_Rodnumerals}');
Error('\P{Is_Blk=:=	counting_Rodnumerals}');
Expect(1, 119679, '\p{Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Blk= -Counting-Rod-Numerals}', "");
Expect(0, 119679, '\p{^Is_Blk= -Counting-Rod-Numerals}', "");
Expect(0, 119679, '\P{Is_Blk= -Counting-Rod-Numerals}', "");
Expect(1, 119679, '\P{^Is_Blk= -Counting-Rod-Numerals}', "");
Expect(0, 119647, '\p{Is_Blk= -Counting-Rod-Numerals}', "");
Expect(1, 119647, '\p{^Is_Blk= -Counting-Rod-Numerals}', "");
Expect(1, 119647, '\P{Is_Blk= -Counting-Rod-Numerals}', "");
Expect(0, 119647, '\P{^Is_Blk= -Counting-Rod-Numerals}', "");
Error('\p{Block=-_Byzantine:=Musical_Symbols}');
Error('\P{Block=-_Byzantine:=Musical_Symbols}');
Expect(1, 119039, '\p{Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Block= -byzantine_Musical	Symbols}', "");
Expect(0, 119039, '\p{^Block= -byzantine_Musical	Symbols}', "");
Expect(0, 119039, '\P{Block= -byzantine_Musical	Symbols}', "");
Expect(1, 119039, '\P{^Block= -byzantine_Musical	Symbols}', "");
Expect(0, 118783, '\p{Block= -byzantine_Musical	Symbols}', "");
Expect(1, 118783, '\p{^Block= -byzantine_Musical	Symbols}', "");
Expect(1, 118783, '\P{Block= -byzantine_Musical	Symbols}', "");
Expect(0, 118783, '\P{^Block= -byzantine_Musical	Symbols}', "");
Error('\p{Blk= 	Byzantine	musical/a/Symbols}');
Error('\P{Blk= 	Byzantine	musical/a/Symbols}');
Expect(1, 119039, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(0, 119039, '\p{^Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(0, 119039, '\P{Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(1, 119039, '\P{^Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(0, 118783, '\p{Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(1, 118783, '\p{^Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(1, 118783, '\P{Blk=_	byzantine MusicalSYMBOLS}', "");
Expect(0, 118783, '\P{^Blk=_	byzantine MusicalSYMBOLS}', "");
Error('\p{Is_Block: 	BYZANTINE:=MusicalSymbols}');
Error('\P{Is_Block: 	BYZANTINE:=MusicalSymbols}');
Expect(1, 119039, '\p{Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Block= _byzantineMusical-symbols}', "");
Expect(0, 119039, '\p{^Is_Block= _byzantineMusical-symbols}', "");
Expect(0, 119039, '\P{Is_Block= _byzantineMusical-symbols}', "");
Expect(1, 119039, '\P{^Is_Block= _byzantineMusical-symbols}', "");
Expect(0, 118783, '\p{Is_Block= _byzantineMusical-symbols}', "");
Expect(1, 118783, '\p{^Is_Block= _byzantineMusical-symbols}', "");
Expect(1, 118783, '\P{Is_Block= _byzantineMusical-symbols}', "");
Expect(0, 118783, '\P{^Is_Block= _byzantineMusical-symbols}', "");
Error('\p{Is_Blk=	ByzantineMUSICAL-Symbols/a/}');
Error('\P{Is_Blk=	ByzantineMUSICAL-Symbols/a/}');
Expect(1, 119039, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(0, 119039, '\p{^Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(0, 119039, '\P{Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(1, 119039, '\P{^Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(0, 118783, '\p{Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(1, 118783, '\p{^Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(1, 118783, '\P{Is_Blk=- byzantineMUSICAL	Symbols}', "");
Expect(0, 118783, '\P{^Is_Blk=- byzantineMUSICAL	Symbols}', "");
Error('\p{Block=/a/	 tamil}');
Error('\P{Block=/a/	 tamil}');
Expect(1, 3071, '\p{Block=tamil}', "");
Expect(0, 3071, '\p{^Block=tamil}', "");
Expect(0, 3071, '\P{Block=tamil}', "");
Expect(1, 3071, '\P{^Block=tamil}', "");
Expect(0, 2943, '\p{Block=tamil}', "");
Expect(1, 2943, '\p{^Block=tamil}', "");
Expect(1, 2943, '\P{Block=tamil}', "");
Expect(0, 2943, '\P{^Block=tamil}', "");
Expect(1, 3071, '\p{Block= 	Tamil}', "");
Expect(0, 3071, '\p{^Block= 	Tamil}', "");
Expect(0, 3071, '\P{Block= 	Tamil}', "");
Expect(1, 3071, '\P{^Block= 	Tamil}', "");
Expect(0, 2943, '\p{Block= 	Tamil}', "");
Expect(1, 2943, '\p{^Block= 	Tamil}', "");
Expect(1, 2943, '\P{Block= 	Tamil}', "");
Expect(0, 2943, '\P{^Block= 	Tamil}', "");
Error('\p{Blk=	:=Tamil}');
Error('\P{Blk=	:=Tamil}');
Expect(1, 3071, '\p{Blk=tamil}', "");
Expect(0, 3071, '\p{^Blk=tamil}', "");
Expect(0, 3071, '\P{Blk=tamil}', "");
Expect(1, 3071, '\P{^Blk=tamil}', "");
Expect(0, 2943, '\p{Blk=tamil}', "");
Expect(1, 2943, '\p{^Blk=tamil}', "");
Expect(1, 2943, '\P{Blk=tamil}', "");
Expect(0, 2943, '\P{^Blk=tamil}', "");
Expect(1, 3071, '\p{Blk=	_Tamil}', "");
Expect(0, 3071, '\p{^Blk=	_Tamil}', "");
Expect(0, 3071, '\P{Blk=	_Tamil}', "");
Expect(1, 3071, '\P{^Blk=	_Tamil}', "");
Expect(0, 2943, '\p{Blk=	_Tamil}', "");
Expect(1, 2943, '\p{^Blk=	_Tamil}', "");
Expect(1, 2943, '\P{Blk=	_Tamil}', "");
Expect(0, 2943, '\P{^Blk=	_Tamil}', "");
Error('\p{Is_Block=/a/-	tamil}');
Error('\P{Is_Block=/a/-	tamil}');
Expect(1, 3071, '\p{Is_Block=tamil}', "");
Expect(0, 3071, '\p{^Is_Block=tamil}', "");
Expect(0, 3071, '\P{Is_Block=tamil}', "");
Expect(1, 3071, '\P{^Is_Block=tamil}', "");
Expect(0, 2943, '\p{Is_Block=tamil}', "");
Expect(1, 2943, '\p{^Is_Block=tamil}', "");
Expect(1, 2943, '\P{Is_Block=tamil}', "");
Expect(0, 2943, '\P{^Is_Block=tamil}', "");
Expect(1, 3071, '\p{Is_Block=  Tamil}', "");
Expect(0, 3071, '\p{^Is_Block=  Tamil}', "");
Expect(0, 3071, '\P{Is_Block=  Tamil}', "");
Expect(1, 3071, '\P{^Is_Block=  Tamil}', "");
Expect(0, 2943, '\p{Is_Block=  Tamil}', "");
Expect(1, 2943, '\p{^Is_Block=  Tamil}', "");
Expect(1, 2943, '\P{Is_Block=  Tamil}', "");
Expect(0, 2943, '\P{^Is_Block=  Tamil}', "");
Error('\p{Is_Blk=  tamil:=}');
Error('\P{Is_Blk=  tamil:=}');
Expect(1, 3071, '\p{Is_Blk=tamil}', "");
Expect(0, 3071, '\p{^Is_Blk=tamil}', "");
Expect(0, 3071, '\P{Is_Blk=tamil}', "");
Expect(1, 3071, '\P{^Is_Blk=tamil}', "");
Expect(0, 2943, '\p{Is_Blk=tamil}', "");
Expect(1, 2943, '\p{^Is_Blk=tamil}', "");
Expect(1, 2943, '\P{Is_Blk=tamil}', "");
Expect(0, 2943, '\P{^Is_Blk=tamil}', "");
Expect(1, 3071, '\p{Is_Blk=	Tamil}', "");
Expect(0, 3071, '\p{^Is_Blk=	Tamil}', "");
Expect(0, 3071, '\P{Is_Blk=	Tamil}', "");
Expect(1, 3071, '\P{^Is_Blk=	Tamil}', "");
Expect(0, 2943, '\p{Is_Blk=	Tamil}', "");
Expect(1, 2943, '\p{^Is_Blk=	Tamil}', "");
Expect(1, 2943, '\P{Is_Blk=	Tamil}', "");
Expect(0, 2943, '\P{^Is_Blk=	Tamil}', "");
Error('\p{Block= :=specials}');
Error('\P{Block= :=specials}');
Expect(1, 65520, '\p{Block=specials}', "");
Expect(0, 65520, '\p{^Block=specials}', "");
Expect(0, 65520, '\P{Block=specials}', "");
Expect(1, 65520, '\P{^Block=specials}', "");
Expect(0, 65519, '\p{Block=specials}', "");
Expect(1, 65519, '\p{^Block=specials}', "");
Expect(1, 65519, '\P{Block=specials}', "");
Expect(0, 65519, '\P{^Block=specials}', "");
Expect(1, 65520, '\p{Block=		Specials}', "");
Expect(0, 65520, '\p{^Block=		Specials}', "");
Expect(0, 65520, '\P{Block=		Specials}', "");
Expect(1, 65520, '\P{^Block=		Specials}', "");
Expect(0, 65519, '\p{Block=		Specials}', "");
Expect(1, 65519, '\p{^Block=		Specials}', "");
Expect(1, 65519, '\P{Block=		Specials}', "");
Expect(0, 65519, '\P{^Block=		Specials}', "");
Error('\p{Blk=  specials/a/}');
Error('\P{Blk=  specials/a/}');
Expect(1, 65520, '\p{Blk=specials}', "");
Expect(0, 65520, '\p{^Blk=specials}', "");
Expect(0, 65520, '\P{Blk=specials}', "");
Expect(1, 65520, '\P{^Blk=specials}', "");
Expect(0, 65519, '\p{Blk=specials}', "");
Expect(1, 65519, '\p{^Blk=specials}', "");
Expect(1, 65519, '\P{Blk=specials}', "");
Expect(0, 65519, '\P{^Blk=specials}', "");
Expect(1, 65520, '\p{Blk= _Specials}', "");
Expect(0, 65520, '\p{^Blk= _Specials}', "");
Expect(0, 65520, '\P{Blk= _Specials}', "");
Expect(1, 65520, '\P{^Blk= _Specials}', "");
Expect(0, 65519, '\p{Blk= _Specials}', "");
Expect(1, 65519, '\p{^Blk= _Specials}', "");
Expect(1, 65519, '\P{Blk= _Specials}', "");
Expect(0, 65519, '\P{^Blk= _Specials}', "");
Error('\p{Is_Block:   _ Specials:=}');
Error('\P{Is_Block:   _ Specials:=}');
Expect(1, 65520, '\p{Is_Block=specials}', "");
Expect(0, 65520, '\p{^Is_Block=specials}', "");
Expect(0, 65520, '\P{Is_Block=specials}', "");
Expect(1, 65520, '\P{^Is_Block=specials}', "");
Expect(0, 65519, '\p{Is_Block=specials}', "");
Expect(1, 65519, '\p{^Is_Block=specials}', "");
Expect(1, 65519, '\P{Is_Block=specials}', "");
Expect(0, 65519, '\P{^Is_Block=specials}', "");
Expect(1, 65520, '\p{Is_Block:__SPECIALS}', "");
Expect(0, 65520, '\p{^Is_Block:__SPECIALS}', "");
Expect(0, 65520, '\P{Is_Block:__SPECIALS}', "");
Expect(1, 65520, '\P{^Is_Block:__SPECIALS}', "");
Expect(0, 65519, '\p{Is_Block:__SPECIALS}', "");
Expect(1, 65519, '\p{^Is_Block:__SPECIALS}', "");
Expect(1, 65519, '\P{Is_Block:__SPECIALS}', "");
Expect(0, 65519, '\P{^Is_Block:__SPECIALS}', "");
Error('\p{Is_Blk=__Specials/a/}');
Error('\P{Is_Blk=__Specials/a/}');
Expect(1, 65520, '\p{Is_Blk=specials}', "");
Expect(0, 65520, '\p{^Is_Blk=specials}', "");
Expect(0, 65520, '\P{Is_Blk=specials}', "");
Expect(1, 65520, '\P{^Is_Blk=specials}', "");
Expect(0, 65519, '\p{Is_Blk=specials}', "");
Expect(1, 65519, '\p{^Is_Blk=specials}', "");
Expect(1, 65519, '\P{Is_Blk=specials}', "");
Expect(0, 65519, '\P{^Is_Blk=specials}', "");
Expect(1, 65520, '\p{Is_Blk:  Specials}', "");
Expect(0, 65520, '\p{^Is_Blk:  Specials}', "");
Expect(0, 65520, '\P{Is_Blk:  Specials}', "");
Expect(1, 65520, '\P{^Is_Blk:  Specials}', "");
Expect(0, 65519, '\p{Is_Blk:  Specials}', "");
Expect(1, 65519, '\p{^Is_Blk:  Specials}', "");
Expect(1, 65519, '\P{Is_Blk:  Specials}', "");
Expect(0, 65519, '\P{^Is_Blk:  Specials}', "");
Error('\p{Block: /a/-	Georgian}');
Error('\P{Block: /a/-	Georgian}');
Expect(1, 4351, '\p{Block=georgian}', "");
Expect(0, 4351, '\p{^Block=georgian}', "");
Expect(0, 4351, '\P{Block=georgian}', "");
Expect(1, 4351, '\P{^Block=georgian}', "");
Expect(0, 4255, '\p{Block=georgian}', "");
Expect(1, 4255, '\p{^Block=georgian}', "");
Expect(1, 4255, '\P{Block=georgian}', "");
Expect(0, 4255, '\P{^Block=georgian}', "");
Expect(1, 4351, '\p{Block=__GEORGIAN}', "");
Expect(0, 4351, '\p{^Block=__GEORGIAN}', "");
Expect(0, 4351, '\P{Block=__GEORGIAN}', "");
Expect(1, 4351, '\P{^Block=__GEORGIAN}', "");
Expect(0, 4255, '\p{Block=__GEORGIAN}', "");
Expect(1, 4255, '\p{^Block=__GEORGIAN}', "");
Expect(1, 4255, '\P{Block=__GEORGIAN}', "");
Expect(0, 4255, '\P{^Block=__GEORGIAN}', "");
Error('\p{Blk=/a/	-Georgian}');
Error('\P{Blk=/a/	-Georgian}');
Expect(1, 4351, '\p{Blk=georgian}', "");
Expect(0, 4351, '\p{^Blk=georgian}', "");
Expect(0, 4351, '\P{Blk=georgian}', "");
Expect(1, 4351, '\P{^Blk=georgian}', "");
Expect(0, 4255, '\p{Blk=georgian}', "");
Expect(1, 4255, '\p{^Blk=georgian}', "");
Expect(1, 4255, '\P{Blk=georgian}', "");
Expect(0, 4255, '\P{^Blk=georgian}', "");
Expect(1, 4351, '\p{Blk=- Georgian}', "");
Expect(0, 4351, '\p{^Blk=- Georgian}', "");
Expect(0, 4351, '\P{Blk=- Georgian}', "");
Expect(1, 4351, '\P{^Blk=- Georgian}', "");
Expect(0, 4255, '\p{Blk=- Georgian}', "");
Expect(1, 4255, '\p{^Blk=- Georgian}', "");
Expect(1, 4255, '\P{Blk=- Georgian}', "");
Expect(0, 4255, '\P{^Blk=- Georgian}', "");
Error('\p{Is_Block=--georgian:=}');
Error('\P{Is_Block=--georgian:=}');
Expect(1, 4351, '\p{Is_Block: georgian}', "");
Expect(0, 4351, '\p{^Is_Block: georgian}', "");
Expect(0, 4351, '\P{Is_Block: georgian}', "");
Expect(1, 4351, '\P{^Is_Block: georgian}', "");
Expect(0, 4255, '\p{Is_Block: georgian}', "");
Expect(1, 4255, '\p{^Is_Block: georgian}', "");
Expect(1, 4255, '\P{Is_Block: georgian}', "");
Expect(0, 4255, '\P{^Is_Block: georgian}', "");
Expect(1, 4351, '\p{Is_Block=	_Georgian}', "");
Expect(0, 4351, '\p{^Is_Block=	_Georgian}', "");
Expect(0, 4351, '\P{Is_Block=	_Georgian}', "");
Expect(1, 4351, '\P{^Is_Block=	_Georgian}', "");
Expect(0, 4255, '\p{Is_Block=	_Georgian}', "");
Expect(1, 4255, '\p{^Is_Block=	_Georgian}', "");
Expect(1, 4255, '\P{Is_Block=	_Georgian}', "");
Expect(0, 4255, '\P{^Is_Block=	_Georgian}', "");
Error('\p{Is_Blk=/a/- GEORGIAN}');
Error('\P{Is_Blk=/a/- GEORGIAN}');
Expect(1, 4351, '\p{Is_Blk=georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=georgian}', "");
Expect(0, 4351, '\P{Is_Blk=georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=georgian}', "");
Expect(0, 4255, '\p{Is_Blk=georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=georgian}', "");
Expect(1, 4255, '\P{Is_Blk=georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=georgian}', "");
Expect(1, 4351, '\p{Is_Blk=	_Georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=	_Georgian}', "");
Expect(0, 4351, '\P{Is_Blk=	_Georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=	_Georgian}', "");
Expect(0, 4255, '\p{Is_Blk=	_Georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=	_Georgian}', "");
Expect(1, 4255, '\P{Is_Blk=	_Georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=	_Georgian}', "");
Error('\p{Block= -KAYAH	Li/a/}');
Error('\P{Block= -KAYAH	Li/a/}');
Expect(1, 43311, '\p{Block=kayahli}', "");
Expect(0, 43311, '\p{^Block=kayahli}', "");
Expect(0, 43311, '\P{Block=kayahli}', "");
Expect(1, 43311, '\P{^Block=kayahli}', "");
Expect(0, 43263, '\p{Block=kayahli}', "");
Expect(1, 43263, '\p{^Block=kayahli}', "");
Expect(1, 43263, '\P{Block=kayahli}', "");
Expect(0, 43263, '\P{^Block=kayahli}', "");
Expect(1, 43311, '\p{Block=_-KAYAH	Li}', "");
Expect(0, 43311, '\p{^Block=_-KAYAH	Li}', "");
Expect(0, 43311, '\P{Block=_-KAYAH	Li}', "");
Expect(1, 43311, '\P{^Block=_-KAYAH	Li}', "");
Expect(0, 43263, '\p{Block=_-KAYAH	Li}', "");
Expect(1, 43263, '\p{^Block=_-KAYAH	Li}', "");
Expect(1, 43263, '\P{Block=_-KAYAH	Li}', "");
Expect(0, 43263, '\P{^Block=_-KAYAH	Li}', "");
Error('\p{Blk=_/a/kayah-LI}');
Error('\P{Blk=_/a/kayah-LI}');
Expect(1, 43311, '\p{Blk=kayahli}', "");
Expect(0, 43311, '\p{^Blk=kayahli}', "");
Expect(0, 43311, '\P{Blk=kayahli}', "");
Expect(1, 43311, '\P{^Blk=kayahli}', "");
Expect(0, 43263, '\p{Blk=kayahli}', "");
Expect(1, 43263, '\p{^Blk=kayahli}', "");
Expect(1, 43263, '\P{Blk=kayahli}', "");
Expect(0, 43263, '\P{^Blk=kayahli}', "");
Expect(1, 43311, '\p{Blk=-Kayah	li}', "");
Expect(0, 43311, '\p{^Blk=-Kayah	li}', "");
Expect(0, 43311, '\P{Blk=-Kayah	li}', "");
Expect(1, 43311, '\P{^Blk=-Kayah	li}', "");
Expect(0, 43263, '\p{Blk=-Kayah	li}', "");
Expect(1, 43263, '\p{^Blk=-Kayah	li}', "");
Expect(1, 43263, '\P{Blk=-Kayah	li}', "");
Expect(0, 43263, '\P{^Blk=-Kayah	li}', "");
Error('\p{Is_Block= :=Kayahli}');
Error('\P{Is_Block= :=Kayahli}');
Expect(1, 43311, '\p{Is_Block=kayahli}', "");
Expect(0, 43311, '\p{^Is_Block=kayahli}', "");
Expect(0, 43311, '\P{Is_Block=kayahli}', "");
Expect(1, 43311, '\P{^Is_Block=kayahli}', "");
Expect(0, 43263, '\p{Is_Block=kayahli}', "");
Expect(1, 43263, '\p{^Is_Block=kayahli}', "");
Expect(1, 43263, '\P{Is_Block=kayahli}', "");
Expect(0, 43263, '\P{^Is_Block=kayahli}', "");
Expect(1, 43311, '\p{Is_Block= _Kayah	Li}', "");
Expect(0, 43311, '\p{^Is_Block= _Kayah	Li}', "");
Expect(0, 43311, '\P{Is_Block= _Kayah	Li}', "");
Expect(1, 43311, '\P{^Is_Block= _Kayah	Li}', "");
Expect(0, 43263, '\p{Is_Block= _Kayah	Li}', "");
Expect(1, 43263, '\p{^Is_Block= _Kayah	Li}', "");
Expect(1, 43263, '\P{Is_Block= _Kayah	Li}', "");
Expect(0, 43263, '\P{^Is_Block= _Kayah	Li}', "");
Error('\p{Is_Blk=	_kayah:=LI}');
Error('\P{Is_Blk=	_kayah:=LI}');
Expect(1, 43311, '\p{Is_Blk=kayahli}', "");
Expect(0, 43311, '\p{^Is_Blk=kayahli}', "");
Expect(0, 43311, '\P{Is_Blk=kayahli}', "");
Expect(1, 43311, '\P{^Is_Blk=kayahli}', "");
Expect(0, 43263, '\p{Is_Blk=kayahli}', "");
Expect(1, 43263, '\p{^Is_Blk=kayahli}', "");
Expect(1, 43263, '\P{Is_Blk=kayahli}', "");
Expect(0, 43263, '\P{^Is_Blk=kayahli}', "");
Expect(1, 43311, '\p{Is_Blk=KAYAH-Li}', "");
Expect(0, 43311, '\p{^Is_Blk=KAYAH-Li}', "");
Expect(0, 43311, '\P{Is_Blk=KAYAH-Li}', "");
Expect(1, 43311, '\P{^Is_Blk=KAYAH-Li}', "");
Expect(0, 43263, '\p{Is_Blk=KAYAH-Li}', "");
Expect(1, 43263, '\p{^Is_Blk=KAYAH-Li}', "");
Expect(1, 43263, '\P{Is_Blk=KAYAH-Li}', "");
Expect(0, 43263, '\P{^Is_Blk=KAYAH-Li}', "");
Error('\p{Block:    _CJKCompatibility forms/a/}');
Error('\P{Block:    _CJKCompatibility forms/a/}');
Expect(1, 65103, '\p{Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Block=_	CJK-Compatibility_forms}', "");
Expect(0, 65103, '\p{^Block=_	CJK-Compatibility_forms}', "");
Expect(0, 65103, '\P{Block=_	CJK-Compatibility_forms}', "");
Expect(1, 65103, '\P{^Block=_	CJK-Compatibility_forms}', "");
Expect(0, 65071, '\p{Block=_	CJK-Compatibility_forms}', "");
Expect(1, 65071, '\p{^Block=_	CJK-Compatibility_forms}', "");
Expect(1, 65071, '\P{Block=_	CJK-Compatibility_forms}', "");
Expect(0, 65071, '\P{^Block=_	CJK-Compatibility_forms}', "");
Error('\p{Blk=	 CJK compatibility	Forms/a/}');
Error('\P{Blk=	 CJK compatibility	Forms/a/}');
Expect(1, 65103, '\p{Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Blk=	 CJKcompatibility Forms}', "");
Expect(0, 65103, '\p{^Blk=	 CJKcompatibility Forms}', "");
Expect(0, 65103, '\P{Blk=	 CJKcompatibility Forms}', "");
Expect(1, 65103, '\P{^Blk=	 CJKcompatibility Forms}', "");
Expect(0, 65071, '\p{Blk=	 CJKcompatibility Forms}', "");
Expect(1, 65071, '\p{^Blk=	 CJKcompatibility Forms}', "");
Expect(1, 65071, '\P{Blk=	 CJKcompatibility Forms}', "");
Expect(0, 65071, '\P{^Blk=	 CJKcompatibility Forms}', "");
Error('\p{Is_Block=/a/--CJK-Compatibilityforms}');
Error('\P{Is_Block=/a/--CJK-Compatibilityforms}');
Expect(1, 65103, '\p{Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(0, 65103, '\p{^Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(0, 65103, '\P{Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(1, 65103, '\P{^Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(0, 65071, '\p{Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(1, 65071, '\p{^Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(1, 65071, '\P{Is_Block:   _cjk_compatibility-FORMS}', "");
Expect(0, 65071, '\P{^Is_Block:   _cjk_compatibility-FORMS}', "");
Error('\p{Is_Blk: 		CJKCompatibility:=FORMS}');
Error('\P{Is_Blk: 		CJKCompatibility:=FORMS}');
Expect(1, 65103, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Blk= cjk_Compatibility-Forms}', "");
Expect(0, 65103, '\p{^Is_Blk= cjk_Compatibility-Forms}', "");
Expect(0, 65103, '\P{Is_Blk= cjk_Compatibility-Forms}', "");
Expect(1, 65103, '\P{^Is_Blk= cjk_Compatibility-Forms}', "");
Expect(0, 65071, '\p{Is_Blk= cjk_Compatibility-Forms}', "");
Expect(1, 65071, '\p{^Is_Blk= cjk_Compatibility-Forms}', "");
Expect(1, 65071, '\P{Is_Blk= cjk_Compatibility-Forms}', "");
Expect(0, 65071, '\P{^Is_Blk= cjk_Compatibility-Forms}', "");
Error('\p{Block=	/a/Tifinagh}');
Error('\P{Block=	/a/Tifinagh}');
Expect(1, 11647, '\p{Block=tifinagh}', "");
Expect(0, 11647, '\p{^Block=tifinagh}', "");
Expect(0, 11647, '\P{Block=tifinagh}', "");
Expect(1, 11647, '\P{^Block=tifinagh}', "");
Expect(0, 11567, '\p{Block=tifinagh}', "");
Expect(1, 11567, '\p{^Block=tifinagh}', "");
Expect(1, 11567, '\P{Block=tifinagh}', "");
Expect(0, 11567, '\P{^Block=tifinagh}', "");
Expect(1, 11647, '\p{Block=-	TIFINAGH}', "");
Expect(0, 11647, '\p{^Block=-	TIFINAGH}', "");
Expect(0, 11647, '\P{Block=-	TIFINAGH}', "");
Expect(1, 11647, '\P{^Block=-	TIFINAGH}', "");
Expect(0, 11567, '\p{Block=-	TIFINAGH}', "");
Expect(1, 11567, '\p{^Block=-	TIFINAGH}', "");
Expect(1, 11567, '\P{Block=-	TIFINAGH}', "");
Expect(0, 11567, '\P{^Block=-	TIFINAGH}', "");
Error('\p{Blk:   _Tifinagh/a/}');
Error('\P{Blk:   _Tifinagh/a/}');
Expect(1, 11647, '\p{Blk=tifinagh}', "");
Expect(0, 11647, '\p{^Blk=tifinagh}', "");
Expect(0, 11647, '\P{Blk=tifinagh}', "");
Expect(1, 11647, '\P{^Blk=tifinagh}', "");
Expect(0, 11567, '\p{Blk=tifinagh}', "");
Expect(1, 11567, '\p{^Blk=tifinagh}', "");
Expect(1, 11567, '\P{Blk=tifinagh}', "");
Expect(0, 11567, '\P{^Blk=tifinagh}', "");
Expect(1, 11647, '\p{Blk=_	TIFINAGH}', "");
Expect(0, 11647, '\p{^Blk=_	TIFINAGH}', "");
Expect(0, 11647, '\P{Blk=_	TIFINAGH}', "");
Expect(1, 11647, '\P{^Blk=_	TIFINAGH}', "");
Expect(0, 11567, '\p{Blk=_	TIFINAGH}', "");
Expect(1, 11567, '\p{^Blk=_	TIFINAGH}', "");
Expect(1, 11567, '\P{Blk=_	TIFINAGH}', "");
Expect(0, 11567, '\P{^Blk=_	TIFINAGH}', "");
Error('\p{Is_Block=-/a/tifinagh}');
Error('\P{Is_Block=-/a/tifinagh}');
Expect(1, 11647, '\p{Is_Block=tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block=tifinagh}', "");
Expect(0, 11647, '\P{Is_Block=tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block=tifinagh}', "");
Expect(0, 11567, '\p{Is_Block=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block=tifinagh}', "");
Expect(1, 11567, '\P{Is_Block=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block=tifinagh}', "");
Expect(1, 11647, '\p{Is_Block: _ Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block: _ Tifinagh}', "");
Expect(0, 11647, '\P{Is_Block: _ Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block: _ Tifinagh}', "");
Expect(0, 11567, '\p{Is_Block: _ Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block: _ Tifinagh}', "");
Expect(1, 11567, '\P{Is_Block: _ Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block: _ Tifinagh}', "");
Error('\p{Is_Blk=/a/Tifinagh}');
Error('\P{Is_Blk=/a/Tifinagh}');
Expect(1, 11647, '\p{Is_Blk=tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk=tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk=tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk=tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk=tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk=tifinagh}', "");
Expect(1, 11647, '\p{Is_Blk=	Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk=	Tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk=	Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk=	Tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk=	Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk=	Tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk=	Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk=	Tifinagh}', "");
Error('\p{Block=-/a/HangulJamoEXTENDED b}');
Error('\P{Block=-/a/HangulJamoEXTENDED b}');
Expect(1, 55295, '\p{Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Block= 	Hangul Jamo_Extended B}', "");
Expect(0, 55295, '\p{^Block= 	Hangul Jamo_Extended B}', "");
Expect(0, 55295, '\P{Block= 	Hangul Jamo_Extended B}', "");
Expect(1, 55295, '\P{^Block= 	Hangul Jamo_Extended B}', "");
Expect(0, 55215, '\p{Block= 	Hangul Jamo_Extended B}', "");
Expect(1, 55215, '\p{^Block= 	Hangul Jamo_Extended B}', "");
Expect(1, 55215, '\P{Block= 	Hangul Jamo_Extended B}', "");
Expect(0, 55215, '\P{^Block= 	Hangul Jamo_Extended B}', "");
Error('\p{Blk=_:=hangul-Jamo extendedB}');
Error('\P{Blk=_:=hangul-Jamo extendedB}');
Expect(1, 55295, '\p{Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(0, 55295, '\p{^Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(0, 55295, '\P{Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(1, 55295, '\P{^Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(0, 55215, '\p{Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(1, 55215, '\p{^Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(1, 55215, '\P{Blk=_HANGUL	Jamo	Extended-B}', "");
Expect(0, 55215, '\P{^Blk=_HANGUL	Jamo	Extended-B}', "");
Error('\p{Is_Block=	hangul-JAMO/a/EXTENDEDB}');
Error('\P{Is_Block=	hangul-JAMO/a/EXTENDEDB}');
Expect(1, 55295, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Block= -HANGUL	jamo extended_B}', "");
Expect(0, 55295, '\p{^Is_Block= -HANGUL	jamo extended_B}', "");
Expect(0, 55295, '\P{Is_Block= -HANGUL	jamo extended_B}', "");
Expect(1, 55295, '\P{^Is_Block= -HANGUL	jamo extended_B}', "");
Expect(0, 55215, '\p{Is_Block= -HANGUL	jamo extended_B}', "");
Expect(1, 55215, '\p{^Is_Block= -HANGUL	jamo extended_B}', "");
Expect(1, 55215, '\P{Is_Block= -HANGUL	jamo extended_B}', "");
Expect(0, 55215, '\P{^Is_Block= -HANGUL	jamo extended_B}', "");
Error('\p{Is_Blk=_Hangul_JAMO/a/EXTENDED-B}');
Error('\P{Is_Blk=_Hangul_JAMO/a/EXTENDED-B}');
Expect(1, 55295, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(0, 55295, '\p{^Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(0, 55295, '\P{Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(1, 55295, '\P{^Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(0, 55215, '\p{Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(1, 55215, '\p{^Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(1, 55215, '\P{Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Expect(0, 55215, '\P{^Is_Blk=-_HANGUL-Jamo-extendedB}', "");
Error('\p{Block=_:=Thai}');
Error('\P{Block=_:=Thai}');
Expect(1, 3711, '\p{Block=thai}', "");
Expect(0, 3711, '\p{^Block=thai}', "");
Expect(0, 3711, '\P{Block=thai}', "");
Expect(1, 3711, '\P{^Block=thai}', "");
Expect(0, 3583, '\p{Block=thai}', "");
Expect(1, 3583, '\p{^Block=thai}', "");
Expect(1, 3583, '\P{Block=thai}', "");
Expect(0, 3583, '\P{^Block=thai}', "");
Expect(1, 3711, '\p{Block= _thai}', "");
Expect(0, 3711, '\p{^Block= _thai}', "");
Expect(0, 3711, '\P{Block= _thai}', "");
Expect(1, 3711, '\P{^Block= _thai}', "");
Expect(0, 3583, '\p{Block= _thai}', "");
Expect(1, 3583, '\p{^Block= _thai}', "");
Expect(1, 3583, '\P{Block= _thai}', "");
Expect(0, 3583, '\P{^Block= _thai}', "");
Error('\p{Blk=--thai/a/}');
Error('\P{Blk=--thai/a/}');
Expect(1, 3711, '\p{Blk=thai}', "");
Expect(0, 3711, '\p{^Blk=thai}', "");
Expect(0, 3711, '\P{Blk=thai}', "");
Expect(1, 3711, '\P{^Blk=thai}', "");
Expect(0, 3583, '\p{Blk=thai}', "");
Expect(1, 3583, '\p{^Blk=thai}', "");
Expect(1, 3583, '\P{Blk=thai}', "");
Expect(0, 3583, '\P{^Blk=thai}', "");
Expect(1, 3711, '\p{Blk=	_Thai}', "");
Expect(0, 3711, '\p{^Blk=	_Thai}', "");
Expect(0, 3711, '\P{Blk=	_Thai}', "");
Expect(1, 3711, '\P{^Blk=	_Thai}', "");
Expect(0, 3583, '\p{Blk=	_Thai}', "");
Expect(1, 3583, '\p{^Blk=	_Thai}', "");
Expect(1, 3583, '\P{Blk=	_Thai}', "");
Expect(0, 3583, '\P{^Blk=	_Thai}', "");
Error('\p{Is_Block=	:=THAI}');
Error('\P{Is_Block=	:=THAI}');
Expect(1, 3711, '\p{Is_Block=thai}', "");
Expect(0, 3711, '\p{^Is_Block=thai}', "");
Expect(0, 3711, '\P{Is_Block=thai}', "");
Expect(1, 3711, '\P{^Is_Block=thai}', "");
Expect(0, 3583, '\p{Is_Block=thai}', "");
Expect(1, 3583, '\p{^Is_Block=thai}', "");
Expect(1, 3583, '\P{Is_Block=thai}', "");
Expect(0, 3583, '\P{^Is_Block=thai}', "");
Expect(1, 3711, '\p{Is_Block= 	Thai}', "");
Expect(0, 3711, '\p{^Is_Block= 	Thai}', "");
Expect(0, 3711, '\P{Is_Block= 	Thai}', "");
Expect(1, 3711, '\P{^Is_Block= 	Thai}', "");
Expect(0, 3583, '\p{Is_Block= 	Thai}', "");
Expect(1, 3583, '\p{^Is_Block= 	Thai}', "");
Expect(1, 3583, '\P{Is_Block= 	Thai}', "");
Expect(0, 3583, '\P{^Is_Block= 	Thai}', "");
Error('\p{Is_Blk::=_ THAI}');
Error('\P{Is_Blk::=_ THAI}');
Expect(1, 3711, '\p{Is_Blk:   thai}', "");
Expect(0, 3711, '\p{^Is_Blk:   thai}', "");
Expect(0, 3711, '\P{Is_Blk:   thai}', "");
Expect(1, 3711, '\P{^Is_Blk:   thai}', "");
Expect(0, 3583, '\p{Is_Blk:   thai}', "");
Expect(1, 3583, '\p{^Is_Blk:   thai}', "");
Expect(1, 3583, '\P{Is_Blk:   thai}', "");
Expect(0, 3583, '\P{^Is_Blk:   thai}', "");
Expect(1, 3711, '\p{Is_Blk: __thai}', "");
Expect(0, 3711, '\p{^Is_Blk: __thai}', "");
Expect(0, 3711, '\P{Is_Blk: __thai}', "");
Expect(1, 3711, '\P{^Is_Blk: __thai}', "");
Expect(0, 3583, '\p{Is_Blk: __thai}', "");
Expect(1, 3583, '\p{^Is_Blk: __thai}', "");
Expect(1, 3583, '\P{Is_Blk: __thai}', "");
Expect(0, 3583, '\P{^Is_Blk: __thai}', "");
Error('\p{Block=	-KHMER:=}');
Error('\P{Block=	-KHMER:=}');
Expect(1, 6143, '\p{Block=khmer}', "");
Expect(0, 6143, '\p{^Block=khmer}', "");
Expect(0, 6143, '\P{Block=khmer}', "");
Expect(1, 6143, '\P{^Block=khmer}', "");
Expect(0, 6015, '\p{Block=khmer}', "");
Expect(1, 6015, '\p{^Block=khmer}', "");
Expect(1, 6015, '\P{Block=khmer}', "");
Expect(0, 6015, '\P{^Block=khmer}', "");
Expect(1, 6143, '\p{Block=	Khmer}', "");
Expect(0, 6143, '\p{^Block=	Khmer}', "");
Expect(0, 6143, '\P{Block=	Khmer}', "");
Expect(1, 6143, '\P{^Block=	Khmer}', "");
Expect(0, 6015, '\p{Block=	Khmer}', "");
Expect(1, 6015, '\p{^Block=	Khmer}', "");
Expect(1, 6015, '\P{Block=	Khmer}', "");
Expect(0, 6015, '\P{^Block=	Khmer}', "");
Error('\p{Blk=:=-_khmer}');
Error('\P{Blk=:=-_khmer}');
Expect(1, 6143, '\p{Blk:khmer}', "");
Expect(0, 6143, '\p{^Blk:khmer}', "");
Expect(0, 6143, '\P{Blk:khmer}', "");
Expect(1, 6143, '\P{^Blk:khmer}', "");
Expect(0, 6015, '\p{Blk:khmer}', "");
Expect(1, 6015, '\p{^Blk:khmer}', "");
Expect(1, 6015, '\P{Blk:khmer}', "");
Expect(0, 6015, '\P{^Blk:khmer}', "");
Expect(1, 6143, '\p{Blk=	 KHMER}', "");
Expect(0, 6143, '\p{^Blk=	 KHMER}', "");
Expect(0, 6143, '\P{Blk=	 KHMER}', "");
Expect(1, 6143, '\P{^Blk=	 KHMER}', "");
Expect(0, 6015, '\p{Blk=	 KHMER}', "");
Expect(1, 6015, '\p{^Blk=	 KHMER}', "");
Expect(1, 6015, '\P{Blk=	 KHMER}', "");
Expect(0, 6015, '\P{^Blk=	 KHMER}', "");
Error('\p{Is_Block=-:=Khmer}');
Error('\P{Is_Block=-:=Khmer}');
Expect(1, 6143, '\p{Is_Block=khmer}', "");
Expect(0, 6143, '\p{^Is_Block=khmer}', "");
Expect(0, 6143, '\P{Is_Block=khmer}', "");
Expect(1, 6143, '\P{^Is_Block=khmer}', "");
Expect(0, 6015, '\p{Is_Block=khmer}', "");
Expect(1, 6015, '\p{^Is_Block=khmer}', "");
Expect(1, 6015, '\P{Is_Block=khmer}', "");
Expect(0, 6015, '\P{^Is_Block=khmer}', "");
Expect(1, 6143, '\p{Is_Block:	__khmer}', "");
Expect(0, 6143, '\p{^Is_Block:	__khmer}', "");
Expect(0, 6143, '\P{Is_Block:	__khmer}', "");
Expect(1, 6143, '\P{^Is_Block:	__khmer}', "");
Expect(0, 6015, '\p{Is_Block:	__khmer}', "");
Expect(1, 6015, '\p{^Is_Block:	__khmer}', "");
Expect(1, 6015, '\P{Is_Block:	__khmer}', "");
Expect(0, 6015, '\P{^Is_Block:	__khmer}', "");
Error('\p{Is_Blk:	:=  khmer}');
Error('\P{Is_Blk:	:=  khmer}');
Expect(1, 6143, '\p{Is_Blk=khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=khmer}', "");
Expect(0, 6143, '\P{Is_Blk=khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=khmer}', "");
Expect(0, 6015, '\p{Is_Blk=khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=khmer}', "");
Expect(1, 6015, '\P{Is_Blk=khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=khmer}', "");
Expect(1, 6143, '\p{Is_Blk=	-khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=	-khmer}', "");
Expect(0, 6143, '\P{Is_Blk=	-khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=	-khmer}', "");
Expect(0, 6015, '\p{Is_Blk=	-khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=	-khmer}', "");
Expect(1, 6015, '\P{Is_Blk=	-khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=	-khmer}', "");
Error('\p{Block=	 Saurashtra:=}');
Error('\P{Block=	 Saurashtra:=}');
Expect(1, 43231, '\p{Block=saurashtra}', "");
Expect(0, 43231, '\p{^Block=saurashtra}', "");
Expect(0, 43231, '\P{Block=saurashtra}', "");
Expect(1, 43231, '\P{^Block=saurashtra}', "");
Expect(0, 43135, '\p{Block=saurashtra}', "");
Expect(1, 43135, '\p{^Block=saurashtra}', "");
Expect(1, 43135, '\P{Block=saurashtra}', "");
Expect(0, 43135, '\P{^Block=saurashtra}', "");
Expect(1, 43231, '\p{Block=_SAURASHTRA}', "");
Expect(0, 43231, '\p{^Block=_SAURASHTRA}', "");
Expect(0, 43231, '\P{Block=_SAURASHTRA}', "");
Expect(1, 43231, '\P{^Block=_SAURASHTRA}', "");
Expect(0, 43135, '\p{Block=_SAURASHTRA}', "");
Expect(1, 43135, '\p{^Block=_SAURASHTRA}', "");
Expect(1, 43135, '\P{Block=_SAURASHTRA}', "");
Expect(0, 43135, '\P{^Block=_SAURASHTRA}', "");
Error('\p{Blk= :=Saurashtra}');
Error('\P{Blk= :=Saurashtra}');
Expect(1, 43231, '\p{Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Blk=saurashtra}', "");
Expect(0, 43231, '\P{Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Blk=saurashtra}', "");
Expect(0, 43135, '\p{Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Blk=saurashtra}', "");
Expect(1, 43135, '\P{Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Blk=saurashtra}', "");
Expect(1, 43231, '\p{Blk=  SAURASHTRA}', "");
Expect(0, 43231, '\p{^Blk=  SAURASHTRA}', "");
Expect(0, 43231, '\P{Blk=  SAURASHTRA}', "");
Expect(1, 43231, '\P{^Blk=  SAURASHTRA}', "");
Expect(0, 43135, '\p{Blk=  SAURASHTRA}', "");
Expect(1, 43135, '\p{^Blk=  SAURASHTRA}', "");
Expect(1, 43135, '\P{Blk=  SAURASHTRA}', "");
Expect(0, 43135, '\P{^Blk=  SAURASHTRA}', "");
Error('\p{Is_Block=_:=saurashtra}');
Error('\P{Is_Block=_:=saurashtra}');
Expect(1, 43231, '\p{Is_Block=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Block=saurashtra}', "");
Expect(0, 43231, '\P{Is_Block=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Block=saurashtra}', "");
Expect(0, 43135, '\p{Is_Block=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Block=saurashtra}', "");
Expect(1, 43135, '\P{Is_Block=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Block=saurashtra}', "");
Expect(1, 43231, '\p{Is_Block=-SAURASHTRA}', "");
Expect(0, 43231, '\p{^Is_Block=-SAURASHTRA}', "");
Expect(0, 43231, '\P{Is_Block=-SAURASHTRA}', "");
Expect(1, 43231, '\P{^Is_Block=-SAURASHTRA}', "");
Expect(0, 43135, '\p{Is_Block=-SAURASHTRA}', "");
Expect(1, 43135, '\p{^Is_Block=-SAURASHTRA}', "");
Expect(1, 43135, '\P{Is_Block=-SAURASHTRA}', "");
Expect(0, 43135, '\P{^Is_Block=-SAURASHTRA}', "");
Error('\p{Is_Blk=_ Saurashtra/a/}');
Error('\P{Is_Blk=_ Saurashtra/a/}');
Expect(1, 43231, '\p{Is_Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk=saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk=saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk=saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk=saurashtra}', "");
Expect(1, 43231, '\p{Is_Blk= _Saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk= _Saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk= _Saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk= _Saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk= _Saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk= _Saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk= _Saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk= _Saurashtra}', "");
Error('\p{Block= _Gujarati:=}');
Error('\P{Block= _Gujarati:=}');
Expect(1, 2815, '\p{Block=gujarati}', "");
Expect(0, 2815, '\p{^Block=gujarati}', "");
Expect(0, 2815, '\P{Block=gujarati}', "");
Expect(1, 2815, '\P{^Block=gujarati}', "");
Expect(0, 2687, '\p{Block=gujarati}', "");
Expect(1, 2687, '\p{^Block=gujarati}', "");
Expect(1, 2687, '\P{Block=gujarati}', "");
Expect(0, 2687, '\P{^Block=gujarati}', "");
Expect(1, 2815, '\p{Block= Gujarati}', "");
Expect(0, 2815, '\p{^Block= Gujarati}', "");
Expect(0, 2815, '\P{Block= Gujarati}', "");
Expect(1, 2815, '\P{^Block= Gujarati}', "");
Expect(0, 2687, '\p{Block= Gujarati}', "");
Expect(1, 2687, '\p{^Block= Gujarati}', "");
Expect(1, 2687, '\P{Block= Gujarati}', "");
Expect(0, 2687, '\P{^Block= Gujarati}', "");
Error('\p{Blk= /a/gujarati}');
Error('\P{Blk= /a/gujarati}');
Expect(1, 2815, '\p{Blk=gujarati}', "");
Expect(0, 2815, '\p{^Blk=gujarati}', "");
Expect(0, 2815, '\P{Blk=gujarati}', "");
Expect(1, 2815, '\P{^Blk=gujarati}', "");
Expect(0, 2687, '\p{Blk=gujarati}', "");
Expect(1, 2687, '\p{^Blk=gujarati}', "");
Expect(1, 2687, '\P{Blk=gujarati}', "");
Expect(0, 2687, '\P{^Blk=gujarati}', "");
Expect(1, 2815, '\p{Blk=-_Gujarati}', "");
Expect(0, 2815, '\p{^Blk=-_Gujarati}', "");
Expect(0, 2815, '\P{Blk=-_Gujarati}', "");
Expect(1, 2815, '\P{^Blk=-_Gujarati}', "");
Expect(0, 2687, '\p{Blk=-_Gujarati}', "");
Expect(1, 2687, '\p{^Blk=-_Gujarati}', "");
Expect(1, 2687, '\P{Blk=-_Gujarati}', "");
Expect(0, 2687, '\P{^Blk=-_Gujarati}', "");
Error('\p{Is_Block=/a/ gujarati}');
Error('\P{Is_Block=/a/ gujarati}');
Expect(1, 2815, '\p{Is_Block: gujarati}', "");
Expect(0, 2815, '\p{^Is_Block: gujarati}', "");
Expect(0, 2815, '\P{Is_Block: gujarati}', "");
Expect(1, 2815, '\P{^Is_Block: gujarati}', "");
Expect(0, 2687, '\p{Is_Block: gujarati}', "");
Expect(1, 2687, '\p{^Is_Block: gujarati}', "");
Expect(1, 2687, '\P{Is_Block: gujarati}', "");
Expect(0, 2687, '\P{^Is_Block: gujarati}', "");
Expect(1, 2815, '\p{Is_Block:	 -gujarati}', "");
Expect(0, 2815, '\p{^Is_Block:	 -gujarati}', "");
Expect(0, 2815, '\P{Is_Block:	 -gujarati}', "");
Expect(1, 2815, '\P{^Is_Block:	 -gujarati}', "");
Expect(0, 2687, '\p{Is_Block:	 -gujarati}', "");
Expect(1, 2687, '\p{^Is_Block:	 -gujarati}', "");
Expect(1, 2687, '\P{Is_Block:	 -gujarati}', "");
Expect(0, 2687, '\P{^Is_Block:	 -gujarati}', "");
Error('\p{Is_Blk=:=GUJARATI}');
Error('\P{Is_Blk=:=GUJARATI}');
Expect(1, 2815, '\p{Is_Blk=gujarati}', "");
Expect(0, 2815, '\p{^Is_Blk=gujarati}', "");
Expect(0, 2815, '\P{Is_Blk=gujarati}', "");
Expect(1, 2815, '\P{^Is_Blk=gujarati}', "");
Expect(0, 2687, '\p{Is_Blk=gujarati}', "");
Expect(1, 2687, '\p{^Is_Blk=gujarati}', "");
Expect(1, 2687, '\P{Is_Blk=gujarati}', "");
Expect(0, 2687, '\P{^Is_Blk=gujarati}', "");
Expect(1, 2815, '\p{Is_Blk=	GUJARATI}', "");
Expect(0, 2815, '\p{^Is_Blk=	GUJARATI}', "");
Expect(0, 2815, '\P{Is_Blk=	GUJARATI}', "");
Expect(1, 2815, '\P{^Is_Blk=	GUJARATI}', "");
Expect(0, 2687, '\p{Is_Blk=	GUJARATI}', "");
Expect(1, 2687, '\p{^Is_Blk=	GUJARATI}', "");
Expect(1, 2687, '\P{Is_Blk=	GUJARATI}', "");
Expect(0, 2687, '\P{^Is_Blk=	GUJARATI}', "");
Error('\p{Block=_-Telugu/a/}');
Error('\P{Block=_-Telugu/a/}');
Expect(1, 3199, '\p{Block=telugu}', "");
Expect(0, 3199, '\p{^Block=telugu}', "");
Expect(0, 3199, '\P{Block=telugu}', "");
Expect(1, 3199, '\P{^Block=telugu}', "");
Expect(0, 3071, '\p{Block=telugu}', "");
Expect(1, 3071, '\p{^Block=telugu}', "");
Expect(1, 3071, '\P{Block=telugu}', "");
Expect(0, 3071, '\P{^Block=telugu}', "");
Expect(1, 3199, '\p{Block=_ telugu}', "");
Expect(0, 3199, '\p{^Block=_ telugu}', "");
Expect(0, 3199, '\P{Block=_ telugu}', "");
Expect(1, 3199, '\P{^Block=_ telugu}', "");
Expect(0, 3071, '\p{Block=_ telugu}', "");
Expect(1, 3071, '\p{^Block=_ telugu}', "");
Expect(1, 3071, '\P{Block=_ telugu}', "");
Expect(0, 3071, '\P{^Block=_ telugu}', "");
Error('\p{Blk=:= 	Telugu}');
Error('\P{Blk=:= 	Telugu}');
Expect(1, 3199, '\p{Blk=telugu}', "");
Expect(0, 3199, '\p{^Blk=telugu}', "");
Expect(0, 3199, '\P{Blk=telugu}', "");
Expect(1, 3199, '\P{^Blk=telugu}', "");
Expect(0, 3071, '\p{Blk=telugu}', "");
Expect(1, 3071, '\p{^Blk=telugu}', "");
Expect(1, 3071, '\P{Blk=telugu}', "");
Expect(0, 3071, '\P{^Blk=telugu}', "");
Expect(1, 3199, '\p{Blk=_Telugu}', "");
Expect(0, 3199, '\p{^Blk=_Telugu}', "");
Expect(0, 3199, '\P{Blk=_Telugu}', "");
Expect(1, 3199, '\P{^Blk=_Telugu}', "");
Expect(0, 3071, '\p{Blk=_Telugu}', "");
Expect(1, 3071, '\p{^Blk=_Telugu}', "");
Expect(1, 3071, '\P{Blk=_Telugu}', "");
Expect(0, 3071, '\P{^Blk=_Telugu}', "");
Error('\p{Is_Block=-/a/Telugu}');
Error('\P{Is_Block=-/a/Telugu}');
Expect(1, 3199, '\p{Is_Block=telugu}', "");
Expect(0, 3199, '\p{^Is_Block=telugu}', "");
Expect(0, 3199, '\P{Is_Block=telugu}', "");
Expect(1, 3199, '\P{^Is_Block=telugu}', "");
Expect(0, 3071, '\p{Is_Block=telugu}', "");
Expect(1, 3071, '\p{^Is_Block=telugu}', "");
Expect(1, 3071, '\P{Is_Block=telugu}', "");
Expect(0, 3071, '\P{^Is_Block=telugu}', "");
Expect(1, 3199, '\p{Is_Block= TELUGU}', "");
Expect(0, 3199, '\p{^Is_Block= TELUGU}', "");
Expect(0, 3199, '\P{Is_Block= TELUGU}', "");
Expect(1, 3199, '\P{^Is_Block= TELUGU}', "");
Expect(0, 3071, '\p{Is_Block= TELUGU}', "");
Expect(1, 3071, '\p{^Is_Block= TELUGU}', "");
Expect(1, 3071, '\P{Is_Block= TELUGU}', "");
Expect(0, 3071, '\P{^Is_Block= TELUGU}', "");
Error('\p{Is_Blk: :=telugu}');
Error('\P{Is_Blk: :=telugu}');
Expect(1, 3199, '\p{Is_Blk:	telugu}', "");
Expect(0, 3199, '\p{^Is_Blk:	telugu}', "");
Expect(0, 3199, '\P{Is_Blk:	telugu}', "");
Expect(1, 3199, '\P{^Is_Blk:	telugu}', "");
Expect(0, 3071, '\p{Is_Blk:	telugu}', "");
Expect(1, 3071, '\p{^Is_Blk:	telugu}', "");
Expect(1, 3071, '\P{Is_Blk:	telugu}', "");
Expect(0, 3071, '\P{^Is_Blk:	telugu}', "");
Expect(1, 3199, '\p{Is_Blk=-TELUGU}', "");
Expect(0, 3199, '\p{^Is_Blk=-TELUGU}', "");
Expect(0, 3199, '\P{Is_Blk=-TELUGU}', "");
Expect(1, 3199, '\P{^Is_Blk=-TELUGU}', "");
Expect(0, 3071, '\p{Is_Blk=-TELUGU}', "");
Expect(1, 3071, '\p{^Is_Blk=-TELUGU}', "");
Expect(1, 3071, '\P{Is_Blk=-TELUGU}', "");
Expect(0, 3071, '\P{^Is_Blk=-TELUGU}', "");
Error('\p{Block= /a/YI	Radicals}');
Error('\P{Block= /a/YI	Radicals}');
Expect(1, 42191, '\p{Block=yiradicals}', "");
Expect(0, 42191, '\p{^Block=yiradicals}', "");
Expect(0, 42191, '\P{Block=yiradicals}', "");
Expect(1, 42191, '\P{^Block=yiradicals}', "");
Expect(0, 42127, '\p{Block=yiradicals}', "");
Expect(1, 42127, '\p{^Block=yiradicals}', "");
Expect(1, 42127, '\P{Block=yiradicals}', "");
Expect(0, 42127, '\P{^Block=yiradicals}', "");
Expect(1, 42191, '\p{Block=	 yiradicals}', "");
Expect(0, 42191, '\p{^Block=	 yiradicals}', "");
Expect(0, 42191, '\P{Block=	 yiradicals}', "");
Expect(1, 42191, '\P{^Block=	 yiradicals}', "");
Expect(0, 42127, '\p{Block=	 yiradicals}', "");
Expect(1, 42127, '\p{^Block=	 yiradicals}', "");
Expect(1, 42127, '\P{Block=	 yiradicals}', "");
Expect(0, 42127, '\P{^Block=	 yiradicals}', "");
Error('\p{Blk=- yi	radicals:=}');
Error('\P{Blk=- yi	radicals:=}');
Expect(1, 42191, '\p{Blk:yiradicals}', "");
Expect(0, 42191, '\p{^Blk:yiradicals}', "");
Expect(0, 42191, '\P{Blk:yiradicals}', "");
Expect(1, 42191, '\P{^Blk:yiradicals}', "");
Expect(0, 42127, '\p{Blk:yiradicals}', "");
Expect(1, 42127, '\p{^Blk:yiradicals}', "");
Expect(1, 42127, '\P{Blk:yiradicals}', "");
Expect(0, 42127, '\P{^Blk:yiradicals}', "");
Expect(1, 42191, '\p{Blk: _	Yi RADICALS}', "");
Expect(0, 42191, '\p{^Blk: _	Yi RADICALS}', "");
Expect(0, 42191, '\P{Blk: _	Yi RADICALS}', "");
Expect(1, 42191, '\P{^Blk: _	Yi RADICALS}', "");
Expect(0, 42127, '\p{Blk: _	Yi RADICALS}', "");
Expect(1, 42127, '\p{^Blk: _	Yi RADICALS}', "");
Expect(1, 42127, '\P{Blk: _	Yi RADICALS}', "");
Expect(0, 42127, '\P{^Blk: _	Yi RADICALS}', "");
Error('\p{Is_Block=_ Yi:=RADICALS}');
Error('\P{Is_Block=_ Yi:=RADICALS}');
Expect(1, 42191, '\p{Is_Block: yiradicals}', "");
Expect(0, 42191, '\p{^Is_Block: yiradicals}', "");
Expect(0, 42191, '\P{Is_Block: yiradicals}', "");
Expect(1, 42191, '\P{^Is_Block: yiradicals}', "");
Expect(0, 42127, '\p{Is_Block: yiradicals}', "");
Expect(1, 42127, '\p{^Is_Block: yiradicals}', "");
Expect(1, 42127, '\P{Is_Block: yiradicals}', "");
Expect(0, 42127, '\P{^Is_Block: yiradicals}', "");
Expect(1, 42191, '\p{Is_Block=	-YiRadicals}', "");
Expect(0, 42191, '\p{^Is_Block=	-YiRadicals}', "");
Expect(0, 42191, '\P{Is_Block=	-YiRadicals}', "");
Expect(1, 42191, '\P{^Is_Block=	-YiRadicals}', "");
Expect(0, 42127, '\p{Is_Block=	-YiRadicals}', "");
Expect(1, 42127, '\p{^Is_Block=	-YiRadicals}', "");
Expect(1, 42127, '\P{Is_Block=	-YiRadicals}', "");
Expect(0, 42127, '\P{^Is_Block=	-YiRadicals}', "");
Error('\p{Is_Blk:	/a/ -Yi-RADICALS}');
Error('\P{Is_Blk:	/a/ -Yi-RADICALS}');
Expect(1, 42191, '\p{Is_Blk=yiradicals}', "");
Expect(0, 42191, '\p{^Is_Blk=yiradicals}', "");
Expect(0, 42191, '\P{Is_Blk=yiradicals}', "");
Expect(1, 42191, '\P{^Is_Blk=yiradicals}', "");
Expect(0, 42127, '\p{Is_Blk=yiradicals}', "");
Expect(1, 42127, '\p{^Is_Blk=yiradicals}', "");
Expect(1, 42127, '\P{Is_Blk=yiradicals}', "");
Expect(0, 42127, '\P{^Is_Blk=yiradicals}', "");
Expect(1, 42191, '\p{Is_Blk=yi	RADICALS}', "");
Expect(0, 42191, '\p{^Is_Blk=yi	RADICALS}', "");
Expect(0, 42191, '\P{Is_Blk=yi	RADICALS}', "");
Expect(1, 42191, '\P{^Is_Blk=yi	RADICALS}', "");
Expect(0, 42127, '\p{Is_Blk=yi	RADICALS}', "");
Expect(1, 42127, '\p{^Is_Blk=yi	RADICALS}', "");
Expect(1, 42127, '\P{Is_Blk=yi	RADICALS}', "");
Expect(0, 42127, '\P{^Is_Blk=yi	RADICALS}', "");
Error('\p{East_Asian_Width=-_Wide:=}');
Error('\P{East_Asian_Width=-_Wide:=}');
Expect(1, 4447, '\p{East_Asian_Width:wide}', "");
Expect(0, 4447, '\p{^East_Asian_Width:wide}', "");
Expect(0, 4447, '\P{East_Asian_Width:wide}', "");
Expect(1, 4447, '\P{^East_Asian_Width:wide}', "");
Expect(0, 4351, '\p{East_Asian_Width:wide}', "");
Expect(1, 4351, '\p{^East_Asian_Width:wide}', "");
Expect(1, 4351, '\P{East_Asian_Width:wide}', "");
Expect(0, 4351, '\P{^East_Asian_Width:wide}', "");
Expect(1, 4447, '\p{East_Asian_Width:   	Wide}', "");
Expect(0, 4447, '\p{^East_Asian_Width:   	Wide}', "");
Expect(0, 4447, '\P{East_Asian_Width:   	Wide}', "");
Expect(1, 4447, '\P{^East_Asian_Width:   	Wide}', "");
Expect(0, 4351, '\p{East_Asian_Width:   	Wide}', "");
Expect(1, 4351, '\p{^East_Asian_Width:   	Wide}', "");
Expect(1, 4351, '\P{East_Asian_Width:   	Wide}', "");
Expect(0, 4351, '\P{^East_Asian_Width:   	Wide}', "");
Error('\p{Ea=_ W:=}');
Error('\P{Ea=_ W:=}');
Expect(1, 4447, '\p{Ea=w}', "");
Expect(0, 4447, '\p{^Ea=w}', "");
Expect(0, 4447, '\P{Ea=w}', "");
Expect(1, 4447, '\P{^Ea=w}', "");
Expect(0, 4351, '\p{Ea=w}', "");
Expect(1, 4351, '\p{^Ea=w}', "");
Expect(1, 4351, '\P{Ea=w}', "");
Expect(0, 4351, '\P{^Ea=w}', "");
Expect(1, 4447, '\p{Ea=-W}', "");
Expect(0, 4447, '\p{^Ea=-W}', "");
Expect(0, 4447, '\P{Ea=-W}', "");
Expect(1, 4447, '\P{^Ea=-W}', "");
Expect(0, 4351, '\p{Ea=-W}', "");
Expect(1, 4351, '\p{^Ea=-W}', "");
Expect(1, 4351, '\P{Ea=-W}', "");
Expect(0, 4351, '\P{^Ea=-W}', "");
Error('\p{Is_East_Asian_Width=_:=wide}');
Error('\P{Is_East_Asian_Width=_:=wide}');
Expect(1, 4447, '\p{Is_East_Asian_Width=wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width=wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width=wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width=wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width=wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width=wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width=wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width=wide}', "");
Expect(1, 4447, '\p{Is_East_Asian_Width=	 Wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width=	 Wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width=	 Wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width=	 Wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width=	 Wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width=	 Wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width=	 Wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width=	 Wide}', "");
Error('\p{Is_Ea=-	W/a/}');
Error('\P{Is_Ea=-	W/a/}');
Expect(1, 4447, '\p{Is_Ea=w}', "");
Expect(0, 4447, '\p{^Is_Ea=w}', "");
Expect(0, 4447, '\P{Is_Ea=w}', "");
Expect(1, 4447, '\P{^Is_Ea=w}', "");
Expect(0, 4351, '\p{Is_Ea=w}', "");
Expect(1, 4351, '\p{^Is_Ea=w}', "");
Expect(1, 4351, '\P{Is_Ea=w}', "");
Expect(0, 4351, '\P{^Is_Ea=w}', "");
Expect(1, 4447, '\p{Is_Ea=_ W}', "");
Expect(0, 4447, '\p{^Is_Ea=_ W}', "");
Expect(0, 4447, '\P{Is_Ea=_ W}', "");
Expect(1, 4447, '\P{^Is_Ea=_ W}', "");
Expect(0, 4351, '\p{Is_Ea=_ W}', "");
Expect(1, 4351, '\p{^Is_Ea=_ W}', "");
Expect(1, 4351, '\P{Is_Ea=_ W}', "");
Expect(0, 4351, '\P{^Is_Ea=_ W}', "");
Error('\p{East_Asian_Width=/a/-fullwidth}');
Error('\P{East_Asian_Width=/a/-fullwidth}');
Expect(1, 12288, '\p{East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{East_Asian_Width=--FULLWIDTH}', "");
Expect(0, 12288, '\p{^East_Asian_Width=--FULLWIDTH}', "");
Expect(0, 12288, '\P{East_Asian_Width=--FULLWIDTH}', "");
Expect(1, 12288, '\P{^East_Asian_Width=--FULLWIDTH}', "");
Expect(0, 12287, '\p{East_Asian_Width=--FULLWIDTH}', "");
Expect(1, 12287, '\p{^East_Asian_Width=--FULLWIDTH}', "");
Expect(1, 12287, '\P{East_Asian_Width=--FULLWIDTH}', "");
Expect(0, 12287, '\P{^East_Asian_Width=--FULLWIDTH}', "");
Error('\p{Ea=/a/	 F}');
Error('\P{Ea=/a/	 F}');
Expect(1, 12288, '\p{Ea=f}', "");
Expect(0, 12288, '\p{^Ea=f}', "");
Expect(0, 12288, '\P{Ea=f}', "");
Expect(1, 12288, '\P{^Ea=f}', "");
Expect(0, 12287, '\p{Ea=f}', "");
Expect(1, 12287, '\p{^Ea=f}', "");
Expect(1, 12287, '\P{Ea=f}', "");
Expect(0, 12287, '\P{^Ea=f}', "");
Expect(1, 12288, '\p{Ea= F}', "");
Expect(0, 12288, '\p{^Ea= F}', "");
Expect(0, 12288, '\P{Ea= F}', "");
Expect(1, 12288, '\P{^Ea= F}', "");
Expect(0, 12287, '\p{Ea= F}', "");
Expect(1, 12287, '\p{^Ea= F}', "");
Expect(1, 12287, '\P{Ea= F}', "");
Expect(0, 12287, '\P{^Ea= F}', "");
Error('\p{Is_East_Asian_Width=/a/FULLWIDTH}');
Error('\P{Is_East_Asian_Width=/a/FULLWIDTH}');
Expect(1, 12288, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{Is_East_Asian_Width= _fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width= _fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width= _fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width= _fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width= _fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width= _fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width= _fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width= _fullwidth}', "");
Error('\p{Is_Ea= :=F}');
Error('\P{Is_Ea= :=F}');
Expect(1, 12288, '\p{Is_Ea:   f}', "");
Expect(0, 12288, '\p{^Is_Ea:   f}', "");
Expect(0, 12288, '\P{Is_Ea:   f}', "");
Expect(1, 12288, '\P{^Is_Ea:   f}', "");
Expect(0, 12287, '\p{Is_Ea:   f}', "");
Expect(1, 12287, '\p{^Is_Ea:   f}', "");
Expect(1, 12287, '\P{Is_Ea:   f}', "");
Expect(0, 12287, '\P{^Is_Ea:   f}', "");
Expect(1, 12288, '\p{Is_Ea=_F}', "");
Expect(0, 12288, '\p{^Is_Ea=_F}', "");
Expect(0, 12288, '\P{Is_Ea=_F}', "");
Expect(1, 12288, '\P{^Is_Ea=_F}', "");
Expect(0, 12287, '\p{Is_Ea=_F}', "");
Expect(1, 12287, '\p{^Is_Ea=_F}', "");
Expect(1, 12287, '\P{Is_Ea=_F}', "");
Expect(0, 12287, '\P{^Is_Ea=_F}', "");
Error('\p{East_Asian_Width=_/a/Ambiguous}');
Error('\P{East_Asian_Width=_/a/Ambiguous}');
Expect(1, 161, '\p{East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{East_Asian_Width= _AMBIGUOUS}', "");
Expect(0, 161, '\p{^East_Asian_Width= _AMBIGUOUS}', "");
Expect(0, 161, '\P{East_Asian_Width= _AMBIGUOUS}', "");
Expect(1, 161, '\P{^East_Asian_Width= _AMBIGUOUS}', "");
Expect(0, 160, '\p{East_Asian_Width= _AMBIGUOUS}', "");
Expect(1, 160, '\p{^East_Asian_Width= _AMBIGUOUS}', "");
Expect(1, 160, '\P{East_Asian_Width= _AMBIGUOUS}', "");
Expect(0, 160, '\P{^East_Asian_Width= _AMBIGUOUS}', "");
Error('\p{Ea: /a/--a}');
Error('\P{Ea: /a/--a}');
Expect(1, 161, '\p{Ea=a}', "");
Expect(0, 161, '\p{^Ea=a}', "");
Expect(0, 161, '\P{Ea=a}', "");
Expect(1, 161, '\P{^Ea=a}', "");
Expect(0, 160, '\p{Ea=a}', "");
Expect(1, 160, '\p{^Ea=a}', "");
Expect(1, 160, '\P{Ea=a}', "");
Expect(0, 160, '\P{^Ea=a}', "");
Expect(1, 161, '\p{Ea:  a}', "");
Expect(0, 161, '\p{^Ea:  a}', "");
Expect(0, 161, '\P{Ea:  a}', "");
Expect(1, 161, '\P{^Ea:  a}', "");
Expect(0, 160, '\p{Ea:  a}', "");
Expect(1, 160, '\p{^Ea:  a}', "");
Expect(1, 160, '\P{Ea:  a}', "");
Expect(0, 160, '\P{^Ea:  a}', "");
Error('\p{Is_East_Asian_Width=/a/_ambiguous}');
Error('\P{Is_East_Asian_Width=/a/_ambiguous}');
Expect(1, 161, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{Is_East_Asian_Width=	Ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width=	Ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width=	Ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width=	Ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width=	Ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width=	Ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width=	Ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width=	Ambiguous}', "");
Error('\p{Is_Ea= A:=}');
Error('\P{Is_Ea= A:=}');
Expect(1, 161, '\p{Is_Ea=a}', "");
Expect(0, 161, '\p{^Is_Ea=a}', "");
Expect(0, 161, '\P{Is_Ea=a}', "");
Expect(1, 161, '\P{^Is_Ea=a}', "");
Expect(0, 160, '\p{Is_Ea=a}', "");
Expect(1, 160, '\p{^Is_Ea=a}', "");
Expect(1, 160, '\P{Is_Ea=a}', "");
Expect(0, 160, '\P{^Is_Ea=a}', "");
Expect(1, 161, '\p{Is_Ea=		A}', "");
Expect(0, 161, '\p{^Is_Ea=		A}', "");
Expect(0, 161, '\P{Is_Ea=		A}', "");
Expect(1, 161, '\P{^Is_Ea=		A}', "");
Expect(0, 160, '\p{Is_Ea=		A}', "");
Expect(1, 160, '\p{^Is_Ea=		A}', "");
Expect(1, 160, '\P{Is_Ea=		A}', "");
Expect(0, 160, '\P{^Is_Ea=		A}', "");
Error('\p{East_Asian_Width=/a/narrow}');
Error('\P{East_Asian_Width=/a/narrow}');
Expect(1, 126, '\p{East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{East_Asian_Width=	NARROW}', "");
Expect(0, 126, '\p{^East_Asian_Width=	NARROW}', "");
Expect(0, 126, '\P{East_Asian_Width=	NARROW}', "");
Expect(1, 126, '\P{^East_Asian_Width=	NARROW}', "");
Expect(0, 31, '\p{East_Asian_Width=	NARROW}', "");
Expect(1, 31, '\p{^East_Asian_Width=	NARROW}', "");
Expect(1, 31, '\P{East_Asian_Width=	NARROW}', "");
Expect(0, 31, '\P{^East_Asian_Width=	NARROW}', "");
Error('\p{Ea=:=- Na}');
Error('\P{Ea=:=- Na}');
Expect(1, 126, '\p{Ea=na}', "");
Expect(0, 126, '\p{^Ea=na}', "");
Expect(0, 126, '\P{Ea=na}', "");
Expect(1, 126, '\P{^Ea=na}', "");
Expect(0, 31, '\p{Ea=na}', "");
Expect(1, 31, '\p{^Ea=na}', "");
Expect(1, 31, '\P{Ea=na}', "");
Expect(0, 31, '\P{^Ea=na}', "");
Expect(1, 126, '\p{Ea=	 NA}', "");
Expect(0, 126, '\p{^Ea=	 NA}', "");
Expect(0, 126, '\P{Ea=	 NA}', "");
Expect(1, 126, '\P{^Ea=	 NA}', "");
Expect(0, 31, '\p{Ea=	 NA}', "");
Expect(1, 31, '\p{^Ea=	 NA}', "");
Expect(1, 31, '\P{Ea=	 NA}', "");
Expect(0, 31, '\P{^Ea=	 NA}', "");
Error('\p{Is_East_Asian_Width=:=Narrow}');
Error('\P{Is_East_Asian_Width=:=Narrow}');
Expect(1, 126, '\p{Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{Is_East_Asian_Width=	-Narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=	-Narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=	-Narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=	-Narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=	-Narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=	-Narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=	-Narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=	-Narrow}', "");
Error('\p{Is_Ea=_	Na:=}');
Error('\P{Is_Ea=_	Na:=}');
Expect(1, 126, '\p{Is_Ea=na}', "");
Expect(0, 126, '\p{^Is_Ea=na}', "");
Expect(0, 126, '\P{Is_Ea=na}', "");
Expect(1, 126, '\P{^Is_Ea=na}', "");
Expect(0, 31, '\p{Is_Ea=na}', "");
Expect(1, 31, '\p{^Is_Ea=na}', "");
Expect(1, 31, '\P{Is_Ea=na}', "");
Expect(0, 31, '\P{^Is_Ea=na}', "");
Expect(1, 126, '\p{Is_Ea=	na}', "");
Expect(0, 126, '\p{^Is_Ea=	na}', "");
Expect(0, 126, '\P{Is_Ea=	na}', "");
Expect(1, 126, '\P{^Is_Ea=	na}', "");
Expect(0, 31, '\p{Is_Ea=	na}', "");
Expect(1, 31, '\p{^Is_Ea=	na}', "");
Expect(1, 31, '\P{Is_Ea=	na}', "");
Expect(0, 31, '\P{^Is_Ea=	na}', "");
Error('\p{East_Asian_Width= -Neutral:=}');
Error('\P{East_Asian_Width= -Neutral:=}');
Expect(1, 31, '\p{East_Asian_Width=neutral}', "");
Expect(0, 31, '\p{^East_Asian_Width=neutral}', "");
Expect(0, 31, '\P{East_Asian_Width=neutral}', "");
Expect(1, 31, '\P{^East_Asian_Width=neutral}', "");
Expect(0, 126, '\p{East_Asian_Width=neutral}', "");
Expect(1, 126, '\p{^East_Asian_Width=neutral}', "");
Expect(1, 126, '\P{East_Asian_Width=neutral}', "");
Expect(0, 126, '\P{^East_Asian_Width=neutral}', "");
Expect(1, 31, '\p{East_Asian_Width:	_NEUTRAL}', "");
Expect(0, 31, '\p{^East_Asian_Width:	_NEUTRAL}', "");
Expect(0, 31, '\P{East_Asian_Width:	_NEUTRAL}', "");
Expect(1, 31, '\P{^East_Asian_Width:	_NEUTRAL}', "");
Expect(0, 126, '\p{East_Asian_Width:	_NEUTRAL}', "");
Expect(1, 126, '\p{^East_Asian_Width:	_NEUTRAL}', "");
Expect(1, 126, '\P{East_Asian_Width:	_NEUTRAL}', "");
Expect(0, 126, '\P{^East_Asian_Width:	_NEUTRAL}', "");
Error('\p{Ea=n/a/}');
Error('\P{Ea=n/a/}');
Expect(1, 31, '\p{Ea=n}', "");
Expect(0, 31, '\p{^Ea=n}', "");
Expect(0, 31, '\P{Ea=n}', "");
Expect(1, 31, '\P{^Ea=n}', "");
Expect(0, 126, '\p{Ea=n}', "");
Expect(1, 126, '\p{^Ea=n}', "");
Expect(1, 126, '\P{Ea=n}', "");
Expect(0, 126, '\P{^Ea=n}', "");
Expect(1, 31, '\p{Ea=--N}', "");
Expect(0, 31, '\p{^Ea=--N}', "");
Expect(0, 31, '\P{Ea=--N}', "");
Expect(1, 31, '\P{^Ea=--N}', "");
Expect(0, 126, '\p{Ea=--N}', "");
Expect(1, 126, '\p{^Ea=--N}', "");
Expect(1, 126, '\P{Ea=--N}', "");
Expect(0, 126, '\P{^Ea=--N}', "");
Error('\p{Is_East_Asian_Width: 	-neutral:=}');
Error('\P{Is_East_Asian_Width: 	-neutral:=}');
Expect(1, 31, '\p{Is_East_Asian_Width=neutral}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width=neutral}', "");
Expect(0, 31, '\P{Is_East_Asian_Width=neutral}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width=neutral}', "");
Expect(0, 126, '\p{Is_East_Asian_Width=neutral}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width=neutral}', "");
Expect(1, 126, '\P{Is_East_Asian_Width=neutral}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width=neutral}', "");
Expect(1, 31, '\p{Is_East_Asian_Width=	NEUTRAL}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width=	NEUTRAL}', "");
Expect(0, 31, '\P{Is_East_Asian_Width=	NEUTRAL}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width=	NEUTRAL}', "");
Expect(0, 126, '\p{Is_East_Asian_Width=	NEUTRAL}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width=	NEUTRAL}', "");
Expect(1, 126, '\P{Is_East_Asian_Width=	NEUTRAL}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width=	NEUTRAL}', "");
Error('\p{Is_Ea=	/a/n}');
Error('\P{Is_Ea=	/a/n}');
Expect(1, 31, '\p{Is_Ea=n}', "");
Expect(0, 31, '\p{^Is_Ea=n}', "");
Expect(0, 31, '\P{Is_Ea=n}', "");
Expect(1, 31, '\P{^Is_Ea=n}', "");
Expect(0, 126, '\p{Is_Ea=n}', "");
Expect(1, 126, '\p{^Is_Ea=n}', "");
Expect(1, 126, '\P{Is_Ea=n}', "");
Expect(0, 126, '\P{^Is_Ea=n}', "");
Expect(1, 31, '\p{Is_Ea=	_N}', "");
Expect(0, 31, '\p{^Is_Ea=	_N}', "");
Expect(0, 31, '\P{Is_Ea=	_N}', "");
Expect(1, 31, '\P{^Is_Ea=	_N}', "");
Expect(0, 126, '\p{Is_Ea=	_N}', "");
Expect(1, 126, '\p{^Is_Ea=	_N}', "");
Expect(1, 126, '\P{Is_Ea=	_N}', "");
Expect(0, 126, '\P{^Is_Ea=	_N}', "");
Error('\p{East_Asian_Width=/a/ Halfwidth}');
Error('\P{East_Asian_Width=/a/ Halfwidth}');
Expect(1, 8361, '\p{East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{East_Asian_Width:_halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width:_halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width:_halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width:_halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width:_halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width:_halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width:_halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width:_halfwidth}', "");
Error('\p{Ea=	h/a/}');
Error('\P{Ea=	h/a/}');
Expect(1, 8361, '\p{Ea=h}', "");
Expect(0, 8361, '\p{^Ea=h}', "");
Expect(0, 8361, '\P{Ea=h}', "");
Expect(1, 8361, '\P{^Ea=h}', "");
Expect(0, 8360, '\p{Ea=h}', "");
Expect(1, 8360, '\p{^Ea=h}', "");
Expect(1, 8360, '\P{Ea=h}', "");
Expect(0, 8360, '\P{^Ea=h}', "");
Expect(1, 8361, '\p{Ea=	_H}', "");
Expect(0, 8361, '\p{^Ea=	_H}', "");
Expect(0, 8361, '\P{Ea=	_H}', "");
Expect(1, 8361, '\P{^Ea=	_H}', "");
Expect(0, 8360, '\p{Ea=	_H}', "");
Expect(1, 8360, '\p{^Ea=	_H}', "");
Expect(1, 8360, '\P{Ea=	_H}', "");
Expect(0, 8360, '\P{^Ea=	_H}', "");
Error('\p{Is_East_Asian_Width:   :=	halfwidth}');
Error('\P{Is_East_Asian_Width:   :=	halfwidth}');
Expect(1, 8361, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=	HALFWIDTH}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=	HALFWIDTH}', "");
Error('\p{Is_Ea=/a/H}');
Error('\P{Is_Ea=/a/H}');
Expect(1, 8361, '\p{Is_Ea:h}', "");
Expect(0, 8361, '\p{^Is_Ea:h}', "");
Expect(0, 8361, '\P{Is_Ea:h}', "");
Expect(1, 8361, '\P{^Is_Ea:h}', "");
Expect(0, 8360, '\p{Is_Ea:h}', "");
Expect(1, 8360, '\p{^Is_Ea:h}', "");
Expect(1, 8360, '\P{Is_Ea:h}', "");
Expect(0, 8360, '\P{^Is_Ea:h}', "");
Expect(1, 8361, '\p{Is_Ea:   H}', "");
Expect(0, 8361, '\p{^Is_Ea:   H}', "");
Expect(0, 8361, '\P{Is_Ea:   H}', "");
Expect(1, 8361, '\P{^Is_Ea:   H}', "");
Expect(0, 8360, '\p{Is_Ea:   H}', "");
Expect(1, 8360, '\p{^Is_Ea:   H}', "");
Expect(1, 8360, '\P{Is_Ea:   H}', "");
Expect(0, 8360, '\P{^Is_Ea:   H}', "");
Error('\p{ASCII_Hex_Digit=/a/		Yes}');
Error('\P{ASCII_Hex_Digit=/a/		Yes}');
Expect(1, 57, '\p{ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\p{ASCII_Hex_Digit=-	Yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit=-	Yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit=-	Yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit=-	Yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit=-	Yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit=-	Yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit=-	Yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit=-	Yes}', "");
Error('\p{AHex=/a/	 Y}');
Error('\P{AHex=/a/	 Y}');
Expect(1, 57, '\p{AHex=y}', "");
Expect(0, 57, '\p{^AHex=y}', "");
Expect(0, 57, '\P{AHex=y}', "");
Expect(1, 57, '\P{^AHex=y}', "");
Expect(0, 47, '\p{AHex=y}', "");
Expect(1, 47, '\p{^AHex=y}', "");
Expect(1, 47, '\P{AHex=y}', "");
Expect(0, 47, '\P{^AHex=y}', "");
Expect(1, 57, '\p{AHex=_	Y}', "");
Expect(0, 57, '\p{^AHex=_	Y}', "");
Expect(0, 57, '\P{AHex=_	Y}', "");
Expect(1, 57, '\P{^AHex=_	Y}', "");
Expect(0, 47, '\p{AHex=_	Y}', "");
Expect(1, 47, '\p{^AHex=_	Y}', "");
Expect(1, 47, '\P{AHex=_	Y}', "");
Expect(0, 47, '\P{^AHex=_	Y}', "");
Error('\p{Is_ASCII_Hex_Digit=/a/_T}');
Error('\P{Is_ASCII_Hex_Digit=/a/_T}');
Expect(1, 57, '\p{Is_ASCII_Hex_Digit=t}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit=t}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit=t}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit=t}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit=t}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit=t}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit=t}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit=t}', "");
Expect(1, 57, '\p{Is_ASCII_Hex_Digit=	t}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit=	t}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit=	t}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit=	t}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit=	t}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit=	t}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit=	t}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit=	t}', "");
Error('\p{Is_AHex=_:=true}');
Error('\P{Is_AHex=_:=true}');
Expect(1, 57, '\p{Is_AHex=true}', "");
Expect(0, 57, '\p{^Is_AHex=true}', "");
Expect(0, 57, '\P{Is_AHex=true}', "");
Expect(1, 57, '\P{^Is_AHex=true}', "");
Expect(0, 47, '\p{Is_AHex=true}', "");
Expect(1, 47, '\p{^Is_AHex=true}', "");
Expect(1, 47, '\P{Is_AHex=true}', "");
Expect(0, 47, '\P{^Is_AHex=true}', "");
Expect(1, 57, '\p{Is_AHex:	--True}', "");
Expect(0, 57, '\p{^Is_AHex:	--True}', "");
Expect(0, 57, '\P{Is_AHex:	--True}', "");
Expect(1, 57, '\P{^Is_AHex:	--True}', "");
Expect(0, 47, '\p{Is_AHex:	--True}', "");
Expect(1, 47, '\p{^Is_AHex:	--True}', "");
Expect(1, 47, '\P{Is_AHex:	--True}', "");
Expect(0, 47, '\P{^Is_AHex:	--True}', "");
Error('\p{ASCII_Hex_Digit=	:=no}');
Error('\P{ASCII_Hex_Digit=	:=no}');
Expect(1, 47, '\p{ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\p{ASCII_Hex_Digit=  No}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit=  No}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit=  No}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit=  No}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit=  No}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit=  No}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit=  No}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit=  No}', "");
Error('\p{AHex=-N/a/}');
Error('\P{AHex=-N/a/}');
Expect(1, 47, '\p{AHex=n}', "");
Expect(0, 47, '\p{^AHex=n}', "");
Expect(0, 47, '\P{AHex=n}', "");
Expect(1, 47, '\P{^AHex=n}', "");
Expect(0, 57, '\p{AHex=n}', "");
Expect(1, 57, '\p{^AHex=n}', "");
Expect(1, 57, '\P{AHex=n}', "");
Expect(0, 57, '\P{^AHex=n}', "");
Expect(1, 47, '\p{AHex:    N}', "");
Expect(0, 47, '\p{^AHex:    N}', "");
Expect(0, 47, '\P{AHex:    N}', "");
Expect(1, 47, '\P{^AHex:    N}', "");
Expect(0, 57, '\p{AHex:    N}', "");
Expect(1, 57, '\p{^AHex:    N}', "");
Expect(1, 57, '\P{AHex:    N}', "");
Expect(0, 57, '\P{^AHex:    N}', "");
Error('\p{Is_ASCII_Hex_Digit=/a/ F}');
Error('\P{Is_ASCII_Hex_Digit=/a/ F}');
Expect(1, 47, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\p{Is_ASCII_Hex_Digit=	F}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit=	F}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit=	F}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit=	F}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit=	F}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit=	F}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit=	F}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit=	F}', "");
Error('\p{Is_AHex=false:=}');
Error('\P{Is_AHex=false:=}');
Expect(1, 47, '\p{Is_AHex:   false}', "");
Expect(0, 47, '\p{^Is_AHex:   false}', "");
Expect(0, 47, '\P{Is_AHex:   false}', "");
Expect(1, 47, '\P{^Is_AHex:   false}', "");
Expect(0, 57, '\p{Is_AHex:   false}', "");
Expect(1, 57, '\p{^Is_AHex:   false}', "");
Expect(1, 57, '\P{Is_AHex:   false}', "");
Expect(0, 57, '\P{^Is_AHex:   false}', "");
Expect(1, 47, '\p{Is_AHex=		False}', "");
Expect(0, 47, '\p{^Is_AHex=		False}', "");
Expect(0, 47, '\P{Is_AHex=		False}', "");
Expect(1, 47, '\P{^Is_AHex=		False}', "");
Expect(0, 57, '\p{Is_AHex=		False}', "");
Expect(1, 57, '\p{^Is_AHex=		False}', "");
Expect(1, 57, '\P{Is_AHex=		False}', "");
Expect(0, 57, '\P{^Is_AHex=		False}', "");
Error('\p{Present_In=/a/ _00-00	03.2}');
Error('\P{Present_In=/a/ _00-00	03.2}');
Expect(1, 544, '\p{Present_In=+003.2}', "");
Expect(0, 544, '\p{^Present_In=+003.2}', "");
Expect(0, 544, '\P{Present_In=+003.2}', "");
Expect(1, 544, '\P{^Present_In=+003.2}', "");
Expect(0, 545, '\p{Present_In=+003.2}', "");
Expect(1, 545, '\p{^Present_In=+003.2}', "");
Expect(1, 545, '\P{Present_In=+003.2}', "");
Expect(0, 545, '\P{^Present_In=+003.2}', "");
Error('\p{In=	 0000003.2:=}');
Error('\P{In=	 0000003.2:=}');
Expect(1, 544, '\p{In=00_00_3.2}', "");
Expect(0, 544, '\p{^In=00_00_3.2}', "");
Expect(0, 544, '\P{In=00_00_3.2}', "");
Expect(1, 544, '\P{^In=00_00_3.2}', "");
Expect(0, 545, '\p{In=00_00_3.2}', "");
Expect(1, 545, '\p{^In=00_00_3.2}', "");
Expect(1, 545, '\P{In=00_00_3.2}', "");
Expect(0, 545, '\P{^In=00_00_3.2}', "");
Error('\p{Present_In=:=_+02.0}');
Error('\P{Present_In=:=_+02.0}');
Expect(1, 501, '\p{Present_In=00000002.0}', "");
Expect(0, 501, '\p{^Present_In=00000002.0}', "");
Expect(0, 501, '\P{Present_In=00000002.0}', "");
Expect(1, 501, '\P{^Present_In=00000002.0}', "");
Expect(0, 505, '\p{Present_In=00000002.0}', "");
Expect(1, 505, '\p{^Present_In=00000002.0}', "");
Expect(1, 505, '\P{Present_In=00000002.0}', "");
Expect(0, 505, '\P{^Present_In=00000002.0}', "");
Error('\p{In=:=  2.0}');
Error('\P{In=:=  2.0}');
Expect(1, 501, '\p{In=+0002.0}', "");
Expect(0, 501, '\p{^In=+0002.0}', "");
Expect(0, 501, '\P{In=+0002.0}', "");
Expect(1, 501, '\P{^In=+0002.0}', "");
Expect(0, 505, '\p{In=+0002.0}', "");
Expect(1, 505, '\p{^In=+0002.0}', "");
Expect(1, 505, '\P{In=+0002.0}', "");
Expect(0, 505, '\P{^In=+0002.0}', "");
Error('\p{Present_In=/a/	00 00-01.1}');
Error('\P{Present_In=/a/	00 00-01.1}');
Expect(1, 501, '\p{Present_In=+00_00_1.1}', "");
Expect(0, 501, '\p{^Present_In=+00_00_1.1}', "");
Expect(0, 501, '\P{Present_In=+00_00_1.1}', "");
Expect(1, 501, '\P{^Present_In=+00_00_1.1}', "");
Expect(0, 505, '\p{Present_In=+00_00_1.1}', "");
Expect(1, 505, '\p{^Present_In=+00_00_1.1}', "");
Expect(1, 505, '\P{Present_In=+00_00_1.1}', "");
Expect(0, 505, '\P{^Present_In=+00_00_1.1}', "");
Error('\p{In=-	+01.1/a/}');
Error('\P{In=-	+01.1/a/}');
Expect(1, 501, '\p{In=01.1}', "");
Expect(0, 501, '\p{^In=01.1}', "");
Expect(0, 501, '\P{In=01.1}', "");
Expect(1, 501, '\P{^In=01.1}', "");
Expect(0, 505, '\p{In=01.1}', "");
Expect(1, 505, '\p{^In=01.1}', "");
Expect(1, 505, '\P{In=01.1}', "");
Expect(0, 505, '\P{^In=01.1}', "");
Error('\p{Present_In=-	0000:=00	05.0}');
Error('\P{Present_In=-	0000:=00	05.0}');
Expect(1, 879, '\p{Present_In=+00_5.0}', "");
Expect(0, 879, '\p{^Present_In=+00_5.0}', "");
Expect(0, 879, '\P{Present_In=+00_5.0}', "");
Expect(1, 879, '\P{^Present_In=+00_5.0}', "");
Expect(0, 883, '\p{Present_In=+00_5.0}', "");
Expect(1, 883, '\p{^Present_In=+00_5.0}', "");
Expect(1, 883, '\P{Present_In=+00_5.0}', "");
Expect(0, 883, '\P{^Present_In=+00_5.0}', "");
Error('\p{In=:=+0 0-0_0 0 00	005.0}');
Error('\P{In=:=+0 0-0_0 0 00	005.0}');
Expect(1, 879, '\p{In=+0_0_0_0_0005.0}', "");
Expect(0, 879, '\p{^In=+0_0_0_0_0005.0}', "");
Expect(0, 879, '\P{In=+0_0_0_0_0005.0}', "");
Expect(1, 879, '\P{^In=+0_0_0_0_0005.0}', "");
Expect(0, 883, '\p{In=+0_0_0_0_0005.0}', "");
Expect(1, 883, '\p{^In=+0_0_0_0_0005.0}', "");
Expect(1, 883, '\P{In=+0_0_0_0_0005.0}', "");
Expect(0, 883, '\P{^In=+0_0_0_0_0005.0}', "");
Error('\p{Present_In=	:=0003.0}');
Error('\P{Present_In=	:=0003.0}');
Expect(1, 543, '\p{Present_In=0_3.0}', "");
Expect(0, 543, '\p{^Present_In=0_3.0}', "");
Expect(0, 543, '\P{Present_In=0_3.0}', "");
Expect(1, 543, '\P{^Present_In=0_3.0}', "");
Expect(0, 545, '\p{Present_In=0_3.0}', "");
Expect(1, 545, '\p{^Present_In=0_3.0}', "");
Expect(1, 545, '\P{Present_In=0_3.0}', "");
Expect(0, 545, '\P{^Present_In=0_3.0}', "");
Error('\p{In=-/a/03.0}');
Error('\P{In=-/a/03.0}');
Expect(1, 543, '\p{In=+0000000003.0}', "");
Expect(0, 543, '\p{^In=+0000000003.0}', "");
Expect(0, 543, '\P{In=+0000000003.0}', "");
Expect(1, 543, '\P{^In=+0000000003.0}', "");
Expect(0, 545, '\p{In=+0000000003.0}', "");
Expect(1, 545, '\p{^In=+0000000003.0}', "");
Expect(1, 545, '\P{In=+0000000003.0}', "");
Expect(0, 545, '\P{^In=+0000000003.0}', "");
Error('\p{Present_In=_Unassigned:=}');
Error('\P{Present_In=_Unassigned:=}');
Expect(1, 889, '\p{Present_In=unassigned}', "");
Expect(0, 889, '\p{^Present_In=unassigned}', "");
Expect(0, 889, '\P{Present_In=unassigned}', "");
Expect(1, 889, '\P{^Present_In=unassigned}', "");
Expect(0, 887, '\p{Present_In=unassigned}', "");
Expect(1, 887, '\p{^Present_In=unassigned}', "");
Expect(1, 887, '\P{Present_In=unassigned}', "");
Expect(0, 887, '\P{^Present_In=unassigned}', "");
Expect(1, 889, '\p{Present_In:   unassigned}', "");
Expect(0, 889, '\p{^Present_In:   unassigned}', "");
Expect(0, 889, '\P{Present_In:   unassigned}', "");
Expect(1, 889, '\P{^Present_In:   unassigned}', "");
Expect(0, 887, '\p{Present_In:   unassigned}', "");
Expect(1, 887, '\p{^Present_In:   unassigned}', "");
Expect(1, 887, '\P{Present_In:   unassigned}', "");
Expect(0, 887, '\P{^Present_In:   unassigned}', "");
Error('\p{In= -Unassigned/a/}');
Error('\P{In= -Unassigned/a/}');
Expect(1, 889, '\p{In=unassigned}', "");
Expect(0, 889, '\p{^In=unassigned}', "");
Expect(0, 889, '\P{In=unassigned}', "");
Expect(1, 889, '\P{^In=unassigned}', "");
Expect(0, 887, '\p{In=unassigned}', "");
Expect(1, 887, '\p{^In=unassigned}', "");
Expect(1, 887, '\P{In=unassigned}', "");
Expect(0, 887, '\P{^In=unassigned}', "");
Expect(1, 889, '\p{In=- Unassigned}', "");
Expect(0, 889, '\p{^In=- Unassigned}', "");
Expect(0, 889, '\P{In=- Unassigned}', "");
Expect(1, 889, '\P{^In=- Unassigned}', "");
Expect(0, 887, '\p{In=- Unassigned}', "");
Expect(1, 887, '\p{^In=- Unassigned}', "");
Expect(1, 887, '\P{In=- Unassigned}', "");
Expect(0, 887, '\P{^In=- Unassigned}', "");
Error('\p{Present_In=-/a/000000	05.1}');
Error('\P{Present_In=-/a/000000	05.1}');
Expect(1, 887, '\p{Present_In:   +000_5.1}', "");
Expect(0, 887, '\p{^Present_In:   +000_5.1}', "");
Expect(0, 887, '\P{Present_In:   +000_5.1}', "");
Expect(1, 887, '\P{^Present_In:   +000_5.1}', "");
Expect(0, 889, '\p{Present_In:   +000_5.1}', "");
Expect(1, 889, '\p{^Present_In:   +000_5.1}', "");
Expect(1, 889, '\P{Present_In:   +000_5.1}', "");
Expect(0, 889, '\P{^Present_In:   +000_5.1}', "");
Error('\p{In=/a/__5.1}');
Error('\P{In=/a/__5.1}');
Expect(1, 887, '\p{In=000_5.1}', "");
Expect(0, 887, '\p{^In=000_5.1}', "");
Expect(0, 887, '\P{In=000_5.1}', "");
Expect(1, 887, '\P{^In=000_5.1}', "");
Expect(0, 889, '\p{In=000_5.1}', "");
Expect(1, 889, '\p{^In=000_5.1}', "");
Expect(1, 889, '\P{In=000_5.1}', "");
Expect(0, 889, '\P{^In=000_5.1}', "");
Error('\p{Present_In=-_000004.0/a/}');
Error('\P{Present_In=-_000004.0/a/}');
Expect(1, 566, '\p{Present_In:0_0_0_004.0}', "");
Expect(0, 566, '\p{^Present_In:0_0_0_004.0}', "");
Expect(0, 566, '\P{Present_In:0_0_0_004.0}', "");
Expect(1, 566, '\P{^Present_In:0_0_0_004.0}', "");
Expect(0, 591, '\p{Present_In:0_0_0_004.0}', "");
Expect(1, 591, '\p{^Present_In:0_0_0_004.0}', "");
Expect(1, 591, '\P{Present_In:0_0_0_004.0}', "");
Expect(0, 591, '\P{^Present_In:0_0_0_004.0}', "");
Error('\p{In= /a/00 4.0}');
Error('\P{In= /a/00 4.0}');
Expect(1, 566, '\p{In=+000_4.0}', "");
Expect(0, 566, '\p{^In=+000_4.0}', "");
Expect(0, 566, '\P{In=+000_4.0}', "");
Expect(1, 566, '\P{^In=+000_4.0}', "");
Expect(0, 591, '\p{In=+000_4.0}', "");
Expect(1, 591, '\p{^In=+000_4.0}', "");
Expect(1, 591, '\P{In=+000_4.0}', "");
Expect(0, 591, '\P{^In=+000_4.0}', "");
Error('\p{Present_In=:=	-00000005.2}');
Error('\P{Present_In=:=	-00000005.2}');
Expect(1, 887, '\p{Present_In=0_5.2}', "");
Expect(0, 887, '\p{^Present_In=0_5.2}', "");
Expect(0, 887, '\P{Present_In=0_5.2}', "");
Expect(1, 887, '\P{^Present_In=0_5.2}', "");
Expect(0, 889, '\p{Present_In=0_5.2}', "");
Expect(1, 889, '\p{^Present_In=0_5.2}', "");
Expect(1, 889, '\P{Present_In=0_5.2}', "");
Expect(0, 889, '\P{^Present_In=0_5.2}', "");
Error('\p{In= 	000005.2:=}');
Error('\P{In= 	000005.2:=}');
Expect(1, 887, '\p{In=0000005.2}', "");
Expect(0, 887, '\p{^In=0000005.2}', "");
Expect(0, 887, '\P{In=0000005.2}', "");
Expect(1, 887, '\P{^In=0000005.2}', "");
Expect(0, 889, '\p{In=0000005.2}', "");
Expect(1, 889, '\p{^In=0000005.2}', "");
Expect(1, 889, '\P{In=0000005.2}', "");
Expect(0, 889, '\P{^In=0000005.2}', "");
Error('\p{Present_In:/a/_-0 3.1}');
Error('\P{Present_In:/a/_-0 3.1}');
Expect(1, 543, '\p{Present_In=+00_3.1}', "");
Expect(0, 543, '\p{^Present_In=+00_3.1}', "");
Expect(0, 543, '\P{Present_In=+00_3.1}', "");
Expect(1, 543, '\P{^Present_In=+00_3.1}', "");
Expect(0, 545, '\p{Present_In=+00_3.1}', "");
Expect(1, 545, '\p{^Present_In=+00_3.1}', "");
Expect(1, 545, '\P{Present_In=+00_3.1}', "");
Expect(0, 545, '\P{^Present_In=+00_3.1}', "");
Error('\p{In=/a/	_000000003.1}');
Error('\P{In=/a/	_000000003.1}');
Expect(1, 543, '\p{In:0003.1}', "");
Expect(0, 543, '\p{^In:0003.1}', "");
Expect(0, 543, '\P{In:0003.1}', "");
Expect(1, 543, '\P{^In:0003.1}', "");
Expect(0, 545, '\p{In:0003.1}', "");
Expect(1, 545, '\p{^In:0003.1}', "");
Expect(1, 545, '\P{In:0003.1}', "");
Expect(0, 545, '\P{^In:0003.1}', "");
Error('\p{Present_In:  	0000_0000-02.1:=}');
Error('\P{Present_In:  	0000_0000-02.1:=}');
Expect(1, 501, '\p{Present_In:+00000000_2.1}', "");
Expect(0, 501, '\p{^Present_In:+00000000_2.1}', "");
Expect(0, 501, '\P{Present_In:+00000000_2.1}', "");
Expect(1, 501, '\P{^Present_In:+00000000_2.1}', "");
Expect(0, 505, '\p{Present_In:+00000000_2.1}', "");
Expect(1, 505, '\p{^Present_In:+00000000_2.1}', "");
Expect(1, 505, '\P{Present_In:+00000000_2.1}', "");
Expect(0, 505, '\P{^Present_In:+00000000_2.1}', "");
Error('\p{In=/a/-000002.1}');
Error('\P{In=/a/-000002.1}');
Expect(1, 501, '\p{In: 000000002.1}', "");
Expect(0, 501, '\p{^In: 000000002.1}', "");
Expect(0, 501, '\P{In: 000000002.1}', "");
Expect(1, 501, '\P{^In: 000000002.1}', "");
Expect(0, 505, '\p{In: 000000002.1}', "");
Expect(1, 505, '\p{^In: 000000002.1}', "");
Expect(1, 505, '\P{In: 000000002.1}', "");
Expect(0, 505, '\P{^In: 000000002.1}', "");
Error('\p{Present_In=/a/004.1}');
Error('\P{Present_In=/a/004.1}');
Expect(1, 577, '\p{Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(0, 577, '\p{^Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(0, 577, '\P{Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(1, 577, '\P{^Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(0, 591, '\p{Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(1, 591, '\p{^Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(1, 591, '\P{Present_In=0_0_0_0_0_0_0_04.1}', "");
Expect(0, 591, '\P{^Present_In=0_0_0_0_0_0_0_04.1}', "");
Error('\p{In=:=_000	4.1}');
Error('\P{In=:=_000	4.1}');
Expect(1, 577, '\p{In=0000_0000_4.1}', "");
Expect(0, 577, '\p{^In=0000_0000_4.1}', "");
Expect(0, 577, '\P{In=0000_0000_4.1}', "");
Expect(1, 577, '\P{^In=0000_0000_4.1}', "");
Expect(0, 591, '\p{In=0000_0000_4.1}', "");
Expect(1, 591, '\p{^In=0000_0000_4.1}', "");
Expect(1, 591, '\P{In=0000_0000_4.1}', "");
Expect(0, 591, '\P{^In=0000_0000_4.1}', "");
Error('\p{Extender=:=Yes}');
Error('\P{Extender=:=Yes}');
Expect(1, 183, '\p{Extender=yes}', "");
Expect(0, 183, '\p{^Extender=yes}', "");
Expect(0, 183, '\P{Extender=yes}', "");
Expect(1, 183, '\P{^Extender=yes}', "");
Expect(0, 182, '\p{Extender=yes}', "");
Expect(1, 182, '\p{^Extender=yes}', "");
Expect(1, 182, '\P{Extender=yes}', "");
Expect(0, 182, '\P{^Extender=yes}', "");
Expect(1, 183, '\p{Extender=-YES}', "");
Expect(0, 183, '\p{^Extender=-YES}', "");
Expect(0, 183, '\P{Extender=-YES}', "");
Expect(1, 183, '\P{^Extender=-YES}', "");
Expect(0, 182, '\p{Extender=-YES}', "");
Expect(1, 182, '\p{^Extender=-YES}', "");
Expect(1, 182, '\P{Extender=-YES}', "");
Expect(0, 182, '\P{^Extender=-YES}', "");
Error('\p{Ext=	/a/Y}');
Error('\P{Ext=	/a/Y}');
Expect(1, 183, '\p{Ext=y}', "");
Expect(0, 183, '\p{^Ext=y}', "");
Expect(0, 183, '\P{Ext=y}', "");
Expect(1, 183, '\P{^Ext=y}', "");
Expect(0, 182, '\p{Ext=y}', "");
Expect(1, 182, '\p{^Ext=y}', "");
Expect(1, 182, '\P{Ext=y}', "");
Expect(0, 182, '\P{^Ext=y}', "");
Expect(1, 183, '\p{Ext= 	Y}', "");
Expect(0, 183, '\p{^Ext= 	Y}', "");
Expect(0, 183, '\P{Ext= 	Y}', "");
Expect(1, 183, '\P{^Ext= 	Y}', "");
Expect(0, 182, '\p{Ext= 	Y}', "");
Expect(1, 182, '\p{^Ext= 	Y}', "");
Expect(1, 182, '\P{Ext= 	Y}', "");
Expect(0, 182, '\P{^Ext= 	Y}', "");
Error('\p{Is_Extender=/a/_T}');
Error('\P{Is_Extender=/a/_T}');
Expect(1, 183, '\p{Is_Extender=t}', "");
Expect(0, 183, '\p{^Is_Extender=t}', "");
Expect(0, 183, '\P{Is_Extender=t}', "");
Expect(1, 183, '\P{^Is_Extender=t}', "");
Expect(0, 182, '\p{Is_Extender=t}', "");
Expect(1, 182, '\p{^Is_Extender=t}', "");
Expect(1, 182, '\P{Is_Extender=t}', "");
Expect(0, 182, '\P{^Is_Extender=t}', "");
Expect(1, 183, '\p{Is_Extender:	 T}', "");
Expect(0, 183, '\p{^Is_Extender:	 T}', "");
Expect(0, 183, '\P{Is_Extender:	 T}', "");
Expect(1, 183, '\P{^Is_Extender:	 T}', "");
Expect(0, 182, '\p{Is_Extender:	 T}', "");
Expect(1, 182, '\p{^Is_Extender:	 T}', "");
Expect(1, 182, '\P{Is_Extender:	 T}', "");
Expect(0, 182, '\P{^Is_Extender:	 T}', "");
Error('\p{Is_Ext=	-True/a/}');
Error('\P{Is_Ext=	-True/a/}');
Expect(1, 183, '\p{Is_Ext=true}', "");
Expect(0, 183, '\p{^Is_Ext=true}', "");
Expect(0, 183, '\P{Is_Ext=true}', "");
Expect(1, 183, '\P{^Is_Ext=true}', "");
Expect(0, 182, '\p{Is_Ext=true}', "");
Expect(1, 182, '\p{^Is_Ext=true}', "");
Expect(1, 182, '\P{Is_Ext=true}', "");
Expect(0, 182, '\P{^Is_Ext=true}', "");
Expect(1, 183, '\p{Is_Ext=--true}', "");
Expect(0, 183, '\p{^Is_Ext=--true}', "");
Expect(0, 183, '\P{Is_Ext=--true}', "");
Expect(1, 183, '\P{^Is_Ext=--true}', "");
Expect(0, 182, '\p{Is_Ext=--true}', "");
Expect(1, 182, '\p{^Is_Ext=--true}', "");
Expect(1, 182, '\P{Is_Ext=--true}', "");
Expect(0, 182, '\P{^Is_Ext=--true}', "");
Error('\p{Extender= /a/no}');
Error('\P{Extender= /a/no}');
Expect(1, 182, '\p{Extender:no}', "");
Expect(0, 182, '\p{^Extender:no}', "");
Expect(0, 182, '\P{Extender:no}', "");
Expect(1, 182, '\P{^Extender:no}', "");
Expect(0, 183, '\p{Extender:no}', "");
Expect(1, 183, '\p{^Extender:no}', "");
Expect(1, 183, '\P{Extender:no}', "");
Expect(0, 183, '\P{^Extender:no}', "");
Expect(1, 182, '\p{Extender= NO}', "");
Expect(0, 182, '\p{^Extender= NO}', "");
Expect(0, 182, '\P{Extender= NO}', "");
Expect(1, 182, '\P{^Extender= NO}', "");
Expect(0, 183, '\p{Extender= NO}', "");
Expect(1, 183, '\p{^Extender= NO}', "");
Expect(1, 183, '\P{Extender= NO}', "");
Expect(0, 183, '\P{^Extender= NO}', "");
Error('\p{Ext=	-N:=}');
Error('\P{Ext=	-N:=}');
Expect(1, 182, '\p{Ext=n}', "");
Expect(0, 182, '\p{^Ext=n}', "");
Expect(0, 182, '\P{Ext=n}', "");
Expect(1, 182, '\P{^Ext=n}', "");
Expect(0, 183, '\p{Ext=n}', "");
Expect(1, 183, '\p{^Ext=n}', "");
Expect(1, 183, '\P{Ext=n}', "");
Expect(0, 183, '\P{^Ext=n}', "");
Expect(1, 182, '\p{Ext= n}', "");
Expect(0, 182, '\p{^Ext= n}', "");
Expect(0, 182, '\P{Ext= n}', "");
Expect(1, 182, '\P{^Ext= n}', "");
Expect(0, 183, '\p{Ext= n}', "");
Expect(1, 183, '\p{^Ext= n}', "");
Expect(1, 183, '\P{Ext= n}', "");
Expect(0, 183, '\P{^Ext= n}', "");
Error('\p{Is_Extender=-F/a/}');
Error('\P{Is_Extender=-F/a/}');
Expect(1, 182, '\p{Is_Extender=f}', "");
Expect(0, 182, '\p{^Is_Extender=f}', "");
Expect(0, 182, '\P{Is_Extender=f}', "");
Expect(1, 182, '\P{^Is_Extender=f}', "");
Expect(0, 183, '\p{Is_Extender=f}', "");
Expect(1, 183, '\p{^Is_Extender=f}', "");
Expect(1, 183, '\P{Is_Extender=f}', "");
Expect(0, 183, '\P{^Is_Extender=f}', "");
Expect(1, 182, '\p{Is_Extender= F}', "");
Expect(0, 182, '\p{^Is_Extender= F}', "");
Expect(0, 182, '\P{Is_Extender= F}', "");
Expect(1, 182, '\P{^Is_Extender= F}', "");
Expect(0, 183, '\p{Is_Extender= F}', "");
Expect(1, 183, '\p{^Is_Extender= F}', "");
Expect(1, 183, '\P{Is_Extender= F}', "");
Expect(0, 183, '\P{^Is_Extender= F}', "");
Error('\p{Is_Ext=	False:=}');
Error('\P{Is_Ext=	False:=}');
Expect(1, 182, '\p{Is_Ext=false}', "");
Expect(0, 182, '\p{^Is_Ext=false}', "");
Expect(0, 182, '\P{Is_Ext=false}', "");
Expect(1, 182, '\P{^Is_Ext=false}', "");
Expect(0, 183, '\p{Is_Ext=false}', "");
Expect(1, 183, '\p{^Is_Ext=false}', "");
Expect(1, 183, '\P{Is_Ext=false}', "");
Expect(0, 183, '\P{^Is_Ext=false}', "");
Expect(1, 182, '\p{Is_Ext=		false}', "");
Expect(0, 182, '\p{^Is_Ext=		false}', "");
Expect(0, 182, '\P{Is_Ext=		false}', "");
Expect(1, 182, '\P{^Is_Ext=		false}', "");
Expect(0, 183, '\p{Is_Ext=		false}', "");
Expect(1, 183, '\p{^Is_Ext=		false}', "");
Expect(1, 183, '\P{Is_Ext=		false}', "");
Expect(0, 183, '\P{^Is_Ext=		false}', "");
Error('\p{IDS_Trinary_Operator=:=Yes}');
Error('\P{IDS_Trinary_Operator=:=Yes}');
Expect(1, 12275, '\p{IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\p{IDS_Trinary_Operator= YES}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator= YES}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator= YES}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator= YES}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator= YES}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator= YES}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator= YES}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator= YES}', "");
Error('\p{IDST=:=	-y}');
Error('\P{IDST=:=	-y}');
Expect(1, 12275, '\p{IDST=y}', "");
Expect(0, 12275, '\p{^IDST=y}', "");
Expect(0, 12275, '\P{IDST=y}', "");
Expect(1, 12275, '\P{^IDST=y}', "");
Expect(0, 12273, '\p{IDST=y}', "");
Expect(1, 12273, '\p{^IDST=y}', "");
Expect(1, 12273, '\P{IDST=y}', "");
Expect(0, 12273, '\P{^IDST=y}', "");
Expect(1, 12275, '\p{IDST=__Y}', "");
Expect(0, 12275, '\p{^IDST=__Y}', "");
Expect(0, 12275, '\P{IDST=__Y}', "");
Expect(1, 12275, '\P{^IDST=__Y}', "");
Expect(0, 12273, '\p{IDST=__Y}', "");
Expect(1, 12273, '\p{^IDST=__Y}', "");
Expect(1, 12273, '\P{IDST=__Y}', "");
Expect(0, 12273, '\P{^IDST=__Y}', "");
Error('\p{Is_IDS_Trinary_Operator=:=	_T}');
Error('\P{Is_IDS_Trinary_Operator=:=	_T}');
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=		T}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=		T}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=		T}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=		T}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=		T}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=		T}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=		T}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=		T}', "");
Error('\p{Is_IDST:    _TRUE:=}');
Error('\P{Is_IDST:    _TRUE:=}');
Expect(1, 12275, '\p{Is_IDST=true}', "");
Expect(0, 12275, '\p{^Is_IDST=true}', "");
Expect(0, 12275, '\P{Is_IDST=true}', "");
Expect(1, 12275, '\P{^Is_IDST=true}', "");
Expect(0, 12273, '\p{Is_IDST=true}', "");
Expect(1, 12273, '\p{^Is_IDST=true}', "");
Expect(1, 12273, '\P{Is_IDST=true}', "");
Expect(0, 12273, '\P{^Is_IDST=true}', "");
Expect(1, 12275, '\p{Is_IDST=-True}', "");
Expect(0, 12275, '\p{^Is_IDST=-True}', "");
Expect(0, 12275, '\P{Is_IDST=-True}', "");
Expect(1, 12275, '\P{^Is_IDST=-True}', "");
Expect(0, 12273, '\p{Is_IDST=-True}', "");
Expect(1, 12273, '\p{^Is_IDST=-True}', "");
Expect(1, 12273, '\P{Is_IDST=-True}', "");
Expect(0, 12273, '\P{^Is_IDST=-True}', "");
Error('\p{IDS_Trinary_Operator=__no:=}');
Error('\P{IDS_Trinary_Operator=__no:=}');
Expect(1, 12273, '\p{IDS_Trinary_Operator:no}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator:no}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator:no}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator:no}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator:no}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator:no}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator:no}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator:no}', "");
Expect(1, 12273, '\p{IDS_Trinary_Operator=_-No}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator=_-No}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator=_-No}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator=_-No}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator=_-No}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator=_-No}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator=_-No}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator=_-No}', "");
Error('\p{IDST=_:=N}');
Error('\P{IDST=_:=N}');
Expect(1, 12273, '\p{IDST=n}', "");
Expect(0, 12273, '\p{^IDST=n}', "");
Expect(0, 12273, '\P{IDST=n}', "");
Expect(1, 12273, '\P{^IDST=n}', "");
Expect(0, 12275, '\p{IDST=n}', "");
Expect(1, 12275, '\p{^IDST=n}', "");
Expect(1, 12275, '\P{IDST=n}', "");
Expect(0, 12275, '\P{^IDST=n}', "");
Expect(1, 12273, '\p{IDST=_ N}', "");
Expect(0, 12273, '\p{^IDST=_ N}', "");
Expect(0, 12273, '\P{IDST=_ N}', "");
Expect(1, 12273, '\P{^IDST=_ N}', "");
Expect(0, 12275, '\p{IDST=_ N}', "");
Expect(1, 12275, '\p{^IDST=_ N}', "");
Expect(1, 12275, '\P{IDST=_ N}', "");
Expect(0, 12275, '\P{^IDST=_ N}', "");
Error('\p{Is_IDS_Trinary_Operator=-	f:=}');
Error('\P{Is_IDS_Trinary_Operator=-	f:=}');
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=	f}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=	f}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=	f}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=	f}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=	f}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=	f}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=	f}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=	f}', "");
Error('\p{Is_IDST=	FALSE:=}');
Error('\P{Is_IDST=	FALSE:=}');
Expect(1, 12273, '\p{Is_IDST=false}', "");
Expect(0, 12273, '\p{^Is_IDST=false}', "");
Expect(0, 12273, '\P{Is_IDST=false}', "");
Expect(1, 12273, '\P{^Is_IDST=false}', "");
Expect(0, 12275, '\p{Is_IDST=false}', "");
Expect(1, 12275, '\p{^Is_IDST=false}', "");
Expect(1, 12275, '\P{Is_IDST=false}', "");
Expect(0, 12275, '\P{^Is_IDST=false}', "");
Expect(1, 12273, '\p{Is_IDST=-	False}', "");
Expect(0, 12273, '\p{^Is_IDST=-	False}', "");
Expect(0, 12273, '\P{Is_IDST=-	False}', "");
Expect(1, 12273, '\P{^Is_IDST=-	False}', "");
Expect(0, 12275, '\p{Is_IDST=-	False}', "");
Expect(1, 12275, '\p{^Is_IDST=-	False}', "");
Expect(1, 12275, '\P{Is_IDST=-	False}', "");
Expect(0, 12275, '\P{^Is_IDST=-	False}', "");
Error('\p{Composition_Exclusion= Yes:=}');
Error('\P{Composition_Exclusion= Yes:=}');
Expect(1, 2399, '\p{Composition_Exclusion=yes}', "");
Expect(0, 2399, '\p{^Composition_Exclusion=yes}', "");
Expect(0, 2399, '\P{Composition_Exclusion=yes}', "");
Expect(1, 2399, '\P{^Composition_Exclusion=yes}', "");
Expect(0, 2391, '\p{Composition_Exclusion=yes}', "");
Expect(1, 2391, '\p{^Composition_Exclusion=yes}', "");
Expect(1, 2391, '\P{Composition_Exclusion=yes}', "");
Expect(0, 2391, '\P{^Composition_Exclusion=yes}', "");
Expect(1, 2399, '\p{Composition_Exclusion:	-YES}', "");
Expect(0, 2399, '\p{^Composition_Exclusion:	-YES}', "");
Expect(0, 2399, '\P{Composition_Exclusion:	-YES}', "");
Expect(1, 2399, '\P{^Composition_Exclusion:	-YES}', "");
Expect(0, 2391, '\p{Composition_Exclusion:	-YES}', "");
Expect(1, 2391, '\p{^Composition_Exclusion:	-YES}', "");
Expect(1, 2391, '\P{Composition_Exclusion:	-YES}', "");
Expect(0, 2391, '\P{^Composition_Exclusion:	-YES}', "");
Error('\p{CE: /a/_-y}');
Error('\P{CE: /a/_-y}');
Expect(1, 2399, '\p{CE=y}', "");
Expect(0, 2399, '\p{^CE=y}', "");
Expect(0, 2399, '\P{CE=y}', "");
Expect(1, 2399, '\P{^CE=y}', "");
Expect(0, 2391, '\p{CE=y}', "");
Expect(1, 2391, '\p{^CE=y}', "");
Expect(1, 2391, '\P{CE=y}', "");
Expect(0, 2391, '\P{^CE=y}', "");
Expect(1, 2399, '\p{CE=_y}', "");
Expect(0, 2399, '\p{^CE=_y}', "");
Expect(0, 2399, '\P{CE=_y}', "");
Expect(1, 2399, '\P{^CE=_y}', "");
Expect(0, 2391, '\p{CE=_y}', "");
Expect(1, 2391, '\p{^CE=_y}', "");
Expect(1, 2391, '\P{CE=_y}', "");
Expect(0, 2391, '\P{^CE=_y}', "");
Error('\p{Is_Composition_Exclusion: :=	T}');
Error('\P{Is_Composition_Exclusion: :=	T}');
Expect(1, 2399, '\p{Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\p{Is_Composition_Exclusion=-T}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion=-T}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion=-T}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion=-T}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion=-T}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion=-T}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion=-T}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion=-T}', "");
Error('\p{Is_CE=/a/-	TRUE}');
Error('\P{Is_CE=/a/-	TRUE}');
Expect(1, 2399, '\p{Is_CE=true}', "");
Expect(0, 2399, '\p{^Is_CE=true}', "");
Expect(0, 2399, '\P{Is_CE=true}', "");
Expect(1, 2399, '\P{^Is_CE=true}', "");
Expect(0, 2391, '\p{Is_CE=true}', "");
Expect(1, 2391, '\p{^Is_CE=true}', "");
Expect(1, 2391, '\P{Is_CE=true}', "");
Expect(0, 2391, '\P{^Is_CE=true}', "");
Expect(1, 2399, '\p{Is_CE=	True}', "");
Expect(0, 2399, '\p{^Is_CE=	True}', "");
Expect(0, 2399, '\P{Is_CE=	True}', "");
Expect(1, 2399, '\P{^Is_CE=	True}', "");
Expect(0, 2391, '\p{Is_CE=	True}', "");
Expect(1, 2391, '\p{^Is_CE=	True}', "");
Expect(1, 2391, '\P{Is_CE=	True}', "");
Expect(0, 2391, '\P{^Is_CE=	True}', "");
Error('\p{Composition_Exclusion=/a/No}');
Error('\P{Composition_Exclusion=/a/No}');
Expect(1, 2391, '\p{Composition_Exclusion=no}', "");
Expect(0, 2391, '\p{^Composition_Exclusion=no}', "");
Expect(0, 2391, '\P{Composition_Exclusion=no}', "");
Expect(1, 2391, '\P{^Composition_Exclusion=no}', "");
Expect(0, 2399, '\p{Composition_Exclusion=no}', "");
Expect(1, 2399, '\p{^Composition_Exclusion=no}', "");
Expect(1, 2399, '\P{Composition_Exclusion=no}', "");
Expect(0, 2399, '\P{^Composition_Exclusion=no}', "");
Expect(1, 2391, '\p{Composition_Exclusion:-_No}', "");
Expect(0, 2391, '\p{^Composition_Exclusion:-_No}', "");
Expect(0, 2391, '\P{Composition_Exclusion:-_No}', "");
Expect(1, 2391, '\P{^Composition_Exclusion:-_No}', "");
Expect(0, 2399, '\p{Composition_Exclusion:-_No}', "");
Expect(1, 2399, '\p{^Composition_Exclusion:-_No}', "");
Expect(1, 2399, '\P{Composition_Exclusion:-_No}', "");
Expect(0, 2399, '\P{^Composition_Exclusion:-_No}', "");
Error('\p{CE=/a/--N}');
Error('\P{CE=/a/--N}');
Expect(1, 2391, '\p{CE=n}', "");
Expect(0, 2391, '\p{^CE=n}', "");
Expect(0, 2391, '\P{CE=n}', "");
Expect(1, 2391, '\P{^CE=n}', "");
Expect(0, 2399, '\p{CE=n}', "");
Expect(1, 2399, '\p{^CE=n}', "");
Expect(1, 2399, '\P{CE=n}', "");
Expect(0, 2399, '\P{^CE=n}', "");
Expect(1, 2391, '\p{CE=- n}', "");
Expect(0, 2391, '\p{^CE=- n}', "");
Expect(0, 2391, '\P{CE=- n}', "");
Expect(1, 2391, '\P{^CE=- n}', "");
Expect(0, 2399, '\p{CE=- n}', "");
Expect(1, 2399, '\p{^CE=- n}', "");
Expect(1, 2399, '\P{CE=- n}', "");
Expect(0, 2399, '\P{^CE=- n}', "");
Error('\p{Is_Composition_Exclusion=-:=F}');
Error('\P{Is_Composition_Exclusion=-:=F}');
Expect(1, 2391, '\p{Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\p{Is_Composition_Exclusion=-	F}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=-	F}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=-	F}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=-	F}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=-	F}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=-	F}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=-	F}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=-	F}', "");
Error('\p{Is_CE= :=False}');
Error('\P{Is_CE= :=False}');
Expect(1, 2391, '\p{Is_CE=false}', "");
Expect(0, 2391, '\p{^Is_CE=false}', "");
Expect(0, 2391, '\P{Is_CE=false}', "");
Expect(1, 2391, '\P{^Is_CE=false}', "");
Expect(0, 2399, '\p{Is_CE=false}', "");
Expect(1, 2399, '\p{^Is_CE=false}', "");
Expect(1, 2399, '\P{Is_CE=false}', "");
Expect(0, 2399, '\P{^Is_CE=false}', "");
Expect(1, 2391, '\p{Is_CE= _false}', "");
Expect(0, 2391, '\p{^Is_CE= _false}', "");
Expect(0, 2391, '\P{Is_CE= _false}', "");
Expect(1, 2391, '\P{^Is_CE= _false}', "");
Expect(0, 2399, '\p{Is_CE= _false}', "");
Expect(1, 2399, '\p{^Is_CE= _false}', "");
Expect(1, 2399, '\P{Is_CE= _false}', "");
Expect(0, 2399, '\P{^Is_CE= _false}', "");
Error('\p{STerm:     Yes:=}');
Error('\P{STerm:     Yes:=}');
Expect(1, 33, '\p{STerm=yes}', "");
Expect(0, 33, '\p{^STerm=yes}', "");
Expect(0, 33, '\P{STerm=yes}', "");
Expect(1, 33, '\P{^STerm=yes}', "");
Expect(0, 32, '\p{STerm=yes}', "");
Expect(1, 32, '\p{^STerm=yes}', "");
Expect(1, 32, '\P{STerm=yes}', "");
Expect(0, 32, '\P{^STerm=yes}', "");
Expect(1, 33, '\p{STerm= Yes}', "");
Expect(0, 33, '\p{^STerm= Yes}', "");
Expect(0, 33, '\P{STerm= Yes}', "");
Expect(1, 33, '\P{^STerm= Yes}', "");
Expect(0, 32, '\p{STerm= Yes}', "");
Expect(1, 32, '\p{^STerm= Yes}', "");
Expect(1, 32, '\P{STerm= Yes}', "");
Expect(0, 32, '\P{^STerm= Yes}', "");
Error('\p{Is_STerm:   :=	 Y}');
Error('\P{Is_STerm:   :=	 Y}');
Expect(1, 33, '\p{Is_STerm=y}', "");
Expect(0, 33, '\p{^Is_STerm=y}', "");
Expect(0, 33, '\P{Is_STerm=y}', "");
Expect(1, 33, '\P{^Is_STerm=y}', "");
Expect(0, 32, '\p{Is_STerm=y}', "");
Expect(1, 32, '\p{^Is_STerm=y}', "");
Expect(1, 32, '\P{Is_STerm=y}', "");
Expect(0, 32, '\P{^Is_STerm=y}', "");
Expect(1, 33, '\p{Is_STerm= Y}', "");
Expect(0, 33, '\p{^Is_STerm= Y}', "");
Expect(0, 33, '\P{Is_STerm= Y}', "");
Expect(1, 33, '\P{^Is_STerm= Y}', "");
Expect(0, 32, '\p{Is_STerm= Y}', "");
Expect(1, 32, '\p{^Is_STerm= Y}', "");
Expect(1, 32, '\P{Is_STerm= Y}', "");
Expect(0, 32, '\P{^Is_STerm= Y}', "");
Error('\p{STerm:	-/a/T}');
Error('\P{STerm:	-/a/T}');
Expect(1, 33, '\p{STerm=t}', "");
Expect(0, 33, '\p{^STerm=t}', "");
Expect(0, 33, '\P{STerm=t}', "");
Expect(1, 33, '\P{^STerm=t}', "");
Expect(0, 32, '\p{STerm=t}', "");
Expect(1, 32, '\p{^STerm=t}', "");
Expect(1, 32, '\P{STerm=t}', "");
Expect(0, 32, '\P{^STerm=t}', "");
Expect(1, 33, '\p{STerm=-T}', "");
Expect(0, 33, '\p{^STerm=-T}', "");
Expect(0, 33, '\P{STerm=-T}', "");
Expect(1, 33, '\P{^STerm=-T}', "");
Expect(0, 32, '\p{STerm=-T}', "");
Expect(1, 32, '\p{^STerm=-T}', "");
Expect(1, 32, '\P{STerm=-T}', "");
Expect(0, 32, '\P{^STerm=-T}', "");
Error('\p{Is_STerm=/a/-True}');
Error('\P{Is_STerm=/a/-True}');
Expect(1, 33, '\p{Is_STerm=true}', "");
Expect(0, 33, '\p{^Is_STerm=true}', "");
Expect(0, 33, '\P{Is_STerm=true}', "");
Expect(1, 33, '\P{^Is_STerm=true}', "");
Expect(0, 32, '\p{Is_STerm=true}', "");
Expect(1, 32, '\p{^Is_STerm=true}', "");
Expect(1, 32, '\P{Is_STerm=true}', "");
Expect(0, 32, '\P{^Is_STerm=true}', "");
Expect(1, 33, '\p{Is_STerm=	_TRUE}', "");
Expect(0, 33, '\p{^Is_STerm=	_TRUE}', "");
Expect(0, 33, '\P{Is_STerm=	_TRUE}', "");
Expect(1, 33, '\P{^Is_STerm=	_TRUE}', "");
Expect(0, 32, '\p{Is_STerm=	_TRUE}', "");
Expect(1, 32, '\p{^Is_STerm=	_TRUE}', "");
Expect(1, 32, '\P{Is_STerm=	_TRUE}', "");
Expect(0, 32, '\P{^Is_STerm=	_TRUE}', "");
Error('\p{STerm= /a/NO}');
Error('\P{STerm= /a/NO}');
Expect(1, 32, '\p{STerm=no}', "");
Expect(0, 32, '\p{^STerm=no}', "");
Expect(0, 32, '\P{STerm=no}', "");
Expect(1, 32, '\P{^STerm=no}', "");
Expect(0, 33, '\p{STerm=no}', "");
Expect(1, 33, '\p{^STerm=no}', "");
Expect(1, 33, '\P{STerm=no}', "");
Expect(0, 33, '\P{^STerm=no}', "");
Expect(1, 32, '\p{STerm=_	No}', "");
Expect(0, 32, '\p{^STerm=_	No}', "");
Expect(0, 32, '\P{STerm=_	No}', "");
Expect(1, 32, '\P{^STerm=_	No}', "");
Expect(0, 33, '\p{STerm=_	No}', "");
Expect(1, 33, '\p{^STerm=_	No}', "");
Expect(1, 33, '\P{STerm=_	No}', "");
Expect(0, 33, '\P{^STerm=_	No}', "");
Error('\p{Is_STerm=:=_	N}');
Error('\P{Is_STerm=:=_	N}');
Expect(1, 32, '\p{Is_STerm=n}', "");
Expect(0, 32, '\p{^Is_STerm=n}', "");
Expect(0, 32, '\P{Is_STerm=n}', "");
Expect(1, 32, '\P{^Is_STerm=n}', "");
Expect(0, 33, '\p{Is_STerm=n}', "");
Expect(1, 33, '\p{^Is_STerm=n}', "");
Expect(1, 33, '\P{Is_STerm=n}', "");
Expect(0, 33, '\P{^Is_STerm=n}', "");
Expect(1, 32, '\p{Is_STerm=_ N}', "");
Expect(0, 32, '\p{^Is_STerm=_ N}', "");
Expect(0, 32, '\P{Is_STerm=_ N}', "");
Expect(1, 32, '\P{^Is_STerm=_ N}', "");
Expect(0, 33, '\p{Is_STerm=_ N}', "");
Expect(1, 33, '\p{^Is_STerm=_ N}', "");
Expect(1, 33, '\P{Is_STerm=_ N}', "");
Expect(0, 33, '\P{^Is_STerm=_ N}', "");
Error('\p{STerm= -F:=}');
Error('\P{STerm= -F:=}');
Expect(1, 32, '\p{STerm=f}', "");
Expect(0, 32, '\p{^STerm=f}', "");
Expect(0, 32, '\P{STerm=f}', "");
Expect(1, 32, '\P{^STerm=f}', "");
Expect(0, 33, '\p{STerm=f}', "");
Expect(1, 33, '\p{^STerm=f}', "");
Expect(1, 33, '\P{STerm=f}', "");
Expect(0, 33, '\P{^STerm=f}', "");
Expect(1, 32, '\p{STerm= F}', "");
Expect(0, 32, '\p{^STerm= F}', "");
Expect(0, 32, '\P{STerm= F}', "");
Expect(1, 32, '\P{^STerm= F}', "");
Expect(0, 33, '\p{STerm= F}', "");
Expect(1, 33, '\p{^STerm= F}', "");
Expect(1, 33, '\P{STerm= F}', "");
Expect(0, 33, '\P{^STerm= F}', "");
Error('\p{Is_STerm=:= -False}');
Error('\P{Is_STerm=:= -False}');
Expect(1, 32, '\p{Is_STerm: false}', "");
Expect(0, 32, '\p{^Is_STerm: false}', "");
Expect(0, 32, '\P{Is_STerm: false}', "");
Expect(1, 32, '\P{^Is_STerm: false}', "");
Expect(0, 33, '\p{Is_STerm: false}', "");
Expect(1, 33, '\p{^Is_STerm: false}', "");
Expect(1, 33, '\P{Is_STerm: false}', "");
Expect(0, 33, '\P{^Is_STerm: false}', "");
Expect(1, 32, '\p{Is_STerm=	-false}', "");
Expect(0, 32, '\p{^Is_STerm=	-false}', "");
Expect(0, 32, '\P{Is_STerm=	-false}', "");
Expect(1, 32, '\P{^Is_STerm=	-false}', "");
Expect(0, 33, '\p{Is_STerm=	-false}', "");
Expect(1, 33, '\p{^Is_STerm=	-false}', "");
Expect(1, 33, '\P{Is_STerm=	-false}', "");
Expect(0, 33, '\P{^Is_STerm=	-false}', "");
Error('\p{Decomposition_Type=--FRACTION/a/}');
Error('\P{Decomposition_Type=--FRACTION/a/}');
Expect(1, 190, '\p{Decomposition_Type=fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=fraction}', "");
Expect(1, 190, '\p{Decomposition_Type=	-Fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=	-Fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=	-Fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=	-Fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=	-Fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=	-Fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=	-Fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=	-Fraction}', "");
Error('\p{Dt=		fra:=}');
Error('\P{Dt=		fra:=}');
Expect(1, 190, '\p{Dt:fra}', "");
Expect(0, 190, '\p{^Dt:fra}', "");
Expect(0, 190, '\P{Dt:fra}', "");
Expect(1, 190, '\P{^Dt:fra}', "");
Expect(0, 187, '\p{Dt:fra}', "");
Expect(1, 187, '\p{^Dt:fra}', "");
Expect(1, 187, '\P{Dt:fra}', "");
Expect(0, 187, '\P{^Dt:fra}', "");
Expect(1, 190, '\p{Dt=	 Fra}', "");
Expect(0, 190, '\p{^Dt=	 Fra}', "");
Expect(0, 190, '\P{Dt=	 Fra}', "");
Expect(1, 190, '\P{^Dt=	 Fra}', "");
Expect(0, 187, '\p{Dt=	 Fra}', "");
Expect(1, 187, '\p{^Dt=	 Fra}', "");
Expect(1, 187, '\P{Dt=	 Fra}', "");
Expect(0, 187, '\P{^Dt=	 Fra}', "");
Error('\p{Is_Decomposition_Type=-/a/Fraction}');
Error('\P{Is_Decomposition_Type=-/a/Fraction}');
Expect(1, 190, '\p{Is_Decomposition_Type=fraction}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type=fraction}', "");
Expect(0, 190, '\P{Is_Decomposition_Type=fraction}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type=fraction}', "");
Expect(0, 187, '\p{Is_Decomposition_Type=fraction}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type=fraction}', "");
Expect(1, 187, '\P{Is_Decomposition_Type=fraction}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type=fraction}', "");
Expect(1, 190, '\p{Is_Decomposition_Type=	-FRACTION}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type=	-FRACTION}', "");
Expect(0, 190, '\P{Is_Decomposition_Type=	-FRACTION}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type=	-FRACTION}', "");
Expect(0, 187, '\p{Is_Decomposition_Type=	-FRACTION}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type=	-FRACTION}', "");
Expect(1, 187, '\P{Is_Decomposition_Type=	-FRACTION}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type=	-FRACTION}', "");
Error('\p{Is_Dt: /a/Fra}');
Error('\P{Is_Dt: /a/Fra}');
Expect(1, 190, '\p{Is_Dt=fra}', "");
Expect(0, 190, '\p{^Is_Dt=fra}', "");
Expect(0, 190, '\P{Is_Dt=fra}', "");
Expect(1, 190, '\P{^Is_Dt=fra}', "");
Expect(0, 187, '\p{Is_Dt=fra}', "");
Expect(1, 187, '\p{^Is_Dt=fra}', "");
Expect(1, 187, '\P{Is_Dt=fra}', "");
Expect(0, 187, '\P{^Is_Dt=fra}', "");
Expect(1, 190, '\p{Is_Dt= -fra}', "");
Expect(0, 190, '\p{^Is_Dt= -fra}', "");
Expect(0, 190, '\P{Is_Dt= -fra}', "");
Expect(1, 190, '\P{^Is_Dt= -fra}', "");
Expect(0, 187, '\p{Is_Dt= -fra}', "");
Expect(1, 187, '\p{^Is_Dt= -fra}', "");
Expect(1, 187, '\P{Is_Dt= -fra}', "");
Expect(0, 187, '\P{^Is_Dt= -fra}', "");
Error('\p{Decomposition_Type=_-Circle/a/}');
Error('\P{Decomposition_Type=_-Circle/a/}');
Expect(1, 9331, '\p{Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Decomposition_Type=	-circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type=	-circle}', "");
Expect(0, 9331, '\P{Decomposition_Type=	-circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type=	-circle}', "");
Expect(0, 9311, '\p{Decomposition_Type=	-circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type=	-circle}', "");
Expect(1, 9311, '\P{Decomposition_Type=	-circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type=	-circle}', "");
Error('\p{Dt=:=- enc}');
Error('\P{Dt=:=- enc}');
Expect(1, 9331, '\p{Dt=enc}', "");
Expect(0, 9331, '\p{^Dt=enc}', "");
Expect(0, 9331, '\P{Dt=enc}', "");
Expect(1, 9331, '\P{^Dt=enc}', "");
Expect(0, 9311, '\p{Dt=enc}', "");
Expect(1, 9311, '\p{^Dt=enc}', "");
Expect(1, 9311, '\P{Dt=enc}', "");
Expect(0, 9311, '\P{^Dt=enc}', "");
Expect(1, 9331, '\p{Dt= 	Enc}', "");
Expect(0, 9331, '\p{^Dt= 	Enc}', "");
Expect(0, 9331, '\P{Dt= 	Enc}', "");
Expect(1, 9331, '\P{^Dt= 	Enc}', "");
Expect(0, 9311, '\p{Dt= 	Enc}', "");
Expect(1, 9311, '\p{^Dt= 	Enc}', "");
Expect(1, 9311, '\P{Dt= 	Enc}', "");
Expect(0, 9311, '\P{^Dt= 	Enc}', "");
Error('\p{Is_Decomposition_Type=		Circle/a/}');
Error('\P{Is_Decomposition_Type=		Circle/a/}');
Expect(1, 9331, '\p{Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Is_Decomposition_Type=_CIRCLE}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=_CIRCLE}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=_CIRCLE}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=_CIRCLE}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=_CIRCLE}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=_CIRCLE}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=_CIRCLE}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=_CIRCLE}', "");
Error('\p{Is_Dt= /a/ENC}');
Error('\P{Is_Dt= /a/ENC}');
Expect(1, 9331, '\p{Is_Dt=enc}', "");
Expect(0, 9331, '\p{^Is_Dt=enc}', "");
Expect(0, 9331, '\P{Is_Dt=enc}', "");
Expect(1, 9331, '\P{^Is_Dt=enc}', "");
Expect(0, 9311, '\p{Is_Dt=enc}', "");
Expect(1, 9311, '\p{^Is_Dt=enc}', "");
Expect(1, 9311, '\P{Is_Dt=enc}', "");
Expect(0, 9311, '\P{^Is_Dt=enc}', "");
Expect(1, 9331, '\p{Is_Dt= Enc}', "");
Expect(0, 9331, '\p{^Is_Dt= Enc}', "");
Expect(0, 9331, '\P{Is_Dt= Enc}', "");
Expect(1, 9331, '\P{^Is_Dt= Enc}', "");
Expect(0, 9311, '\p{Is_Dt= Enc}', "");
Expect(1, 9311, '\p{^Is_Dt= Enc}', "");
Expect(1, 9311, '\P{Is_Dt= Enc}', "");
Expect(0, 9311, '\P{^Is_Dt= Enc}', "");
Error('\p{Decomposition_Type=:=- Initial}');
Error('\P{Decomposition_Type=:=- Initial}');
Expect(1, 64340, '\p{Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Decomposition_Type=initial}', "");
Expect(1, 64340, '\p{Decomposition_Type=	 INITIAL}', "");
Expect(0, 64340, '\p{^Decomposition_Type=	 INITIAL}', "");
Expect(0, 64340, '\P{Decomposition_Type=	 INITIAL}', "");
Expect(1, 64340, '\P{^Decomposition_Type=	 INITIAL}', "");
Expect(0, 64339, '\p{Decomposition_Type=	 INITIAL}', "");
Expect(1, 64339, '\p{^Decomposition_Type=	 INITIAL}', "");
Expect(1, 64339, '\P{Decomposition_Type=	 INITIAL}', "");
Expect(0, 64339, '\P{^Decomposition_Type=	 INITIAL}', "");
Error('\p{Dt:   /a/init}');
Error('\P{Dt:   /a/init}');
Expect(1, 64340, '\p{Dt=init}', "");
Expect(0, 64340, '\p{^Dt=init}', "");
Expect(0, 64340, '\P{Dt=init}', "");
Expect(1, 64340, '\P{^Dt=init}', "");
Expect(0, 64339, '\p{Dt=init}', "");
Expect(1, 64339, '\p{^Dt=init}', "");
Expect(1, 64339, '\P{Dt=init}', "");
Expect(0, 64339, '\P{^Dt=init}', "");
Expect(1, 64340, '\p{Dt=	Init}', "");
Expect(0, 64340, '\p{^Dt=	Init}', "");
Expect(0, 64340, '\P{Dt=	Init}', "");
Expect(1, 64340, '\P{^Dt=	Init}', "");
Expect(0, 64339, '\p{Dt=	Init}', "");
Expect(1, 64339, '\p{^Dt=	Init}', "");
Expect(1, 64339, '\P{Dt=	Init}', "");
Expect(0, 64339, '\P{^Dt=	Init}', "");
Error('\p{Is_Decomposition_Type=:=-INITIAL}');
Error('\P{Is_Decomposition_Type=:=-INITIAL}');
Expect(1, 64340, '\p{Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\p{Is_Decomposition_Type:    Initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type:    Initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type:    Initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type:    Initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type:    Initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type:    Initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type:    Initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type:    Initial}', "");
Error('\p{Is_Dt=	/a/init}');
Error('\P{Is_Dt=	/a/init}');
Expect(1, 64340, '\p{Is_Dt=init}', "");
Expect(0, 64340, '\p{^Is_Dt=init}', "");
Expect(0, 64340, '\P{Is_Dt=init}', "");
Expect(1, 64340, '\P{^Is_Dt=init}', "");
Expect(0, 64339, '\p{Is_Dt=init}', "");
Expect(1, 64339, '\p{^Is_Dt=init}', "");
Expect(1, 64339, '\P{Is_Dt=init}', "");
Expect(0, 64339, '\P{^Is_Dt=init}', "");
Expect(1, 64340, '\p{Is_Dt=_	INIT}', "");
Expect(0, 64340, '\p{^Is_Dt=_	INIT}', "");
Expect(0, 64340, '\P{Is_Dt=_	INIT}', "");
Expect(1, 64340, '\P{^Is_Dt=_	INIT}', "");
Expect(0, 64339, '\p{Is_Dt=_	INIT}', "");
Expect(1, 64339, '\p{^Is_Dt=_	INIT}', "");
Expect(1, 64339, '\P{Is_Dt=_	INIT}', "");
Expect(0, 64339, '\P{^Is_Dt=_	INIT}', "");
Error('\p{Decomposition_Type=_Font:=}');
Error('\P{Decomposition_Type=_Font:=}');
Expect(1, 8450, '\p{Decomposition_Type=font}', "");
Expect(0, 8450, '\p{^Decomposition_Type=font}', "");
Expect(0, 8450, '\P{Decomposition_Type=font}', "");
Expect(1, 8450, '\P{^Decomposition_Type=font}', "");
Expect(0, 8449, '\p{Decomposition_Type=font}', "");
Expect(1, 8449, '\p{^Decomposition_Type=font}', "");
Expect(1, 8449, '\P{Decomposition_Type=font}', "");
Expect(0, 8449, '\P{^Decomposition_Type=font}', "");
Expect(1, 8450, '\p{Decomposition_Type=_FONT}', "");
Expect(0, 8450, '\p{^Decomposition_Type=_FONT}', "");
Expect(0, 8450, '\P{Decomposition_Type=_FONT}', "");
Expect(1, 8450, '\P{^Decomposition_Type=_FONT}', "");
Expect(0, 8449, '\p{Decomposition_Type=_FONT}', "");
Expect(1, 8449, '\p{^Decomposition_Type=_FONT}', "");
Expect(1, 8449, '\P{Decomposition_Type=_FONT}', "");
Expect(0, 8449, '\P{^Decomposition_Type=_FONT}', "");
Error('\p{Dt=:=_ Font}');
Error('\P{Dt=:=_ Font}');
Expect(1, 8450, '\p{Dt=font}', "");
Expect(0, 8450, '\p{^Dt=font}', "");
Expect(0, 8450, '\P{Dt=font}', "");
Expect(1, 8450, '\P{^Dt=font}', "");
Expect(0, 8449, '\p{Dt=font}', "");
Expect(1, 8449, '\p{^Dt=font}', "");
Expect(1, 8449, '\P{Dt=font}', "");
Expect(0, 8449, '\P{^Dt=font}', "");
Expect(1, 8450, '\p{Dt=-font}', "");
Expect(0, 8450, '\p{^Dt=-font}', "");
Expect(0, 8450, '\P{Dt=-font}', "");
Expect(1, 8450, '\P{^Dt=-font}', "");
Expect(0, 8449, '\p{Dt=-font}', "");
Expect(1, 8449, '\p{^Dt=-font}', "");
Expect(1, 8449, '\P{Dt=-font}', "");
Expect(0, 8449, '\P{^Dt=-font}', "");
Error('\p{Is_Decomposition_Type=_ Font:=}');
Error('\P{Is_Decomposition_Type=_ Font:=}');
Expect(1, 8450, '\p{Is_Decomposition_Type=font}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type=font}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type=font}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type=font}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type=font}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type=font}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type=font}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type=font}', "");
Expect(1, 8450, '\p{Is_Decomposition_Type=	_FONT}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type=	_FONT}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type=	_FONT}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type=	_FONT}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type=	_FONT}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type=	_FONT}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type=	_FONT}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type=	_FONT}', "");
Error('\p{Is_Dt=--Font/a/}');
Error('\P{Is_Dt=--Font/a/}');
Expect(1, 8450, '\p{Is_Dt=font}', "");
Expect(0, 8450, '\p{^Is_Dt=font}', "");
Expect(0, 8450, '\P{Is_Dt=font}', "");
Expect(1, 8450, '\P{^Is_Dt=font}', "");
Expect(0, 8449, '\p{Is_Dt=font}', "");
Expect(1, 8449, '\p{^Is_Dt=font}', "");
Expect(1, 8449, '\P{Is_Dt=font}', "");
Expect(0, 8449, '\P{^Is_Dt=font}', "");
Expect(1, 8450, '\p{Is_Dt= Font}', "");
Expect(0, 8450, '\p{^Is_Dt= Font}', "");
Expect(0, 8450, '\P{Is_Dt= Font}', "");
Expect(1, 8450, '\P{^Is_Dt= Font}', "");
Expect(0, 8449, '\p{Is_Dt= Font}', "");
Expect(1, 8449, '\p{^Is_Dt= Font}', "");
Expect(1, 8449, '\P{Is_Dt= Font}', "");
Expect(0, 8449, '\P{^Is_Dt= Font}', "");
Error('\p{Decomposition_Type=-_nobreak/a/}');
Error('\P{Decomposition_Type=-_nobreak/a/}');
Expect(1, 160, '\p{Decomposition_Type=nobreak}', "");
Expect(0, 160, '\p{^Decomposition_Type=nobreak}', "");
Expect(0, 160, '\P{Decomposition_Type=nobreak}', "");
Expect(1, 160, '\P{^Decomposition_Type=nobreak}', "");
Expect(0, 159, '\p{Decomposition_Type=nobreak}', "");
Expect(1, 159, '\p{^Decomposition_Type=nobreak}', "");
Expect(1, 159, '\P{Decomposition_Type=nobreak}', "");
Expect(0, 159, '\P{^Decomposition_Type=nobreak}', "");
Expect(1, 160, '\p{Decomposition_Type=_nobreak}', "");
Expect(0, 160, '\p{^Decomposition_Type=_nobreak}', "");
Expect(0, 160, '\P{Decomposition_Type=_nobreak}', "");
Expect(1, 160, '\P{^Decomposition_Type=_nobreak}', "");
Expect(0, 159, '\p{Decomposition_Type=_nobreak}', "");
Expect(1, 159, '\p{^Decomposition_Type=_nobreak}', "");
Expect(1, 159, '\P{Decomposition_Type=_nobreak}', "");
Expect(0, 159, '\P{^Decomposition_Type=_nobreak}', "");
Error('\p{Dt=:=-Nb}');
Error('\P{Dt=:=-Nb}');
Expect(1, 160, '\p{Dt=nb}', "");
Expect(0, 160, '\p{^Dt=nb}', "");
Expect(0, 160, '\P{Dt=nb}', "");
Expect(1, 160, '\P{^Dt=nb}', "");
Expect(0, 159, '\p{Dt=nb}', "");
Expect(1, 159, '\p{^Dt=nb}', "");
Expect(1, 159, '\P{Dt=nb}', "");
Expect(0, 159, '\P{^Dt=nb}', "");
Expect(1, 160, '\p{Dt=--Nb}', "");
Expect(0, 160, '\p{^Dt=--Nb}', "");
Expect(0, 160, '\P{Dt=--Nb}', "");
Expect(1, 160, '\P{^Dt=--Nb}', "");
Expect(0, 159, '\p{Dt=--Nb}', "");
Expect(1, 159, '\p{^Dt=--Nb}', "");
Expect(1, 159, '\P{Dt=--Nb}', "");
Expect(0, 159, '\P{^Dt=--Nb}', "");
Error('\p{Is_Decomposition_Type=:= Nobreak}');
Error('\P{Is_Decomposition_Type=:= Nobreak}');
Expect(1, 160, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\p{Is_Decomposition_Type= _nobreak}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type= _nobreak}', "");
Expect(0, 160, '\P{Is_Decomposition_Type= _nobreak}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type= _nobreak}', "");
Expect(0, 159, '\p{Is_Decomposition_Type= _nobreak}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type= _nobreak}', "");
Expect(1, 159, '\P{Is_Decomposition_Type= _nobreak}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type= _nobreak}', "");
Error('\p{Is_Dt=/a/-Nb}');
Error('\P{Is_Dt=/a/-Nb}');
Expect(1, 160, '\p{Is_Dt:   nb}', "");
Expect(0, 160, '\p{^Is_Dt:   nb}', "");
Expect(0, 160, '\P{Is_Dt:   nb}', "");
Expect(1, 160, '\P{^Is_Dt:   nb}', "");
Expect(0, 159, '\p{Is_Dt:   nb}', "");
Expect(1, 159, '\p{^Is_Dt:   nb}', "");
Expect(1, 159, '\P{Is_Dt:   nb}', "");
Expect(0, 159, '\P{^Is_Dt:   nb}', "");
Expect(1, 160, '\p{Is_Dt=-_NB}', "");
Expect(0, 160, '\p{^Is_Dt=-_NB}', "");
Expect(0, 160, '\P{Is_Dt=-_NB}', "");
Expect(1, 160, '\P{^Is_Dt=-_NB}', "");
Expect(0, 159, '\p{Is_Dt=-_NB}', "");
Expect(1, 159, '\p{^Is_Dt=-_NB}', "");
Expect(1, 159, '\P{Is_Dt=-_NB}', "");
Expect(0, 159, '\P{^Is_Dt=-_NB}', "");
Error('\p{Decomposition_Type=/a/NON_CANONICAL}');
Error('\P{Decomposition_Type=/a/NON_CANONICAL}');
Expect(1, 160, '\p{Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\p{^Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\P{Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\P{^Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\p{Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\p{^Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\P{Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\P{^Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\p{Decomposition_Type= 	Non	CANONICAL}', "");
Expect(0, 160, '\p{^Decomposition_Type= 	Non	CANONICAL}', "");
Expect(0, 160, '\P{Decomposition_Type= 	Non	CANONICAL}', "");
Expect(1, 160, '\P{^Decomposition_Type= 	Non	CANONICAL}', "");
Expect(0, 159, '\p{Decomposition_Type= 	Non	CANONICAL}', "");
Expect(1, 159, '\p{^Decomposition_Type= 	Non	CANONICAL}', "");
Expect(1, 159, '\P{Decomposition_Type= 	Non	CANONICAL}', "");
Expect(0, 159, '\P{^Decomposition_Type= 	Non	CANONICAL}', "");
Error('\p{Dt: -_Non:=Canon}');
Error('\P{Dt: -_Non:=Canon}');
Expect(1, 160, '\p{Dt: noncanon}', "");
Expect(0, 160, '\p{^Dt: noncanon}', "");
Expect(0, 160, '\P{Dt: noncanon}', "");
Expect(1, 160, '\P{^Dt: noncanon}', "");
Expect(0, 159, '\p{Dt: noncanon}', "");
Expect(1, 159, '\p{^Dt: noncanon}', "");
Expect(1, 159, '\P{Dt: noncanon}', "");
Expect(0, 159, '\P{^Dt: noncanon}', "");
Expect(1, 160, '\p{Dt= _Non-canon}', "");
Expect(0, 160, '\p{^Dt= _Non-canon}', "");
Expect(0, 160, '\P{Dt= _Non-canon}', "");
Expect(1, 160, '\P{^Dt= _Non-canon}', "");
Expect(0, 159, '\p{Dt= _Non-canon}', "");
Expect(1, 159, '\p{^Dt= _Non-canon}', "");
Expect(1, 159, '\P{Dt= _Non-canon}', "");
Expect(0, 159, '\P{^Dt= _Non-canon}', "");
Error('\p{Is_Decomposition_Type=	/a/NON	Canonical}');
Error('\P{Is_Decomposition_Type=	/a/NON	Canonical}');
Expect(1, 160, '\p{Is_Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\p{Is_Decomposition_Type: _Non-Canonical}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type: _Non-Canonical}', "");
Expect(0, 160, '\P{Is_Decomposition_Type: _Non-Canonical}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type: _Non-Canonical}', "");
Expect(0, 159, '\p{Is_Decomposition_Type: _Non-Canonical}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type: _Non-Canonical}', "");
Expect(1, 159, '\P{Is_Decomposition_Type: _Non-Canonical}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type: _Non-Canonical}', "");
Error('\p{Is_Dt:   _ Non_Canon/a/}');
Error('\P{Is_Dt:   _ Non_Canon/a/}');
Expect(1, 160, '\p{Is_Dt=noncanon}', "");
Expect(0, 160, '\p{^Is_Dt=noncanon}', "");
Expect(0, 160, '\P{Is_Dt=noncanon}', "");
Expect(1, 160, '\P{^Is_Dt=noncanon}', "");
Expect(0, 159, '\p{Is_Dt=noncanon}', "");
Expect(1, 159, '\p{^Is_Dt=noncanon}', "");
Expect(1, 159, '\P{Is_Dt=noncanon}', "");
Expect(0, 159, '\P{^Is_Dt=noncanon}', "");
Expect(1, 160, '\p{Is_Dt= -NON_Canon}', "");
Expect(0, 160, '\p{^Is_Dt= -NON_Canon}', "");
Expect(0, 160, '\P{Is_Dt= -NON_Canon}', "");
Expect(1, 160, '\P{^Is_Dt= -NON_Canon}', "");
Expect(0, 159, '\p{Is_Dt= -NON_Canon}', "");
Expect(1, 159, '\p{^Is_Dt= -NON_Canon}', "");
Expect(1, 159, '\P{Is_Dt= -NON_Canon}', "");
Expect(0, 159, '\P{^Is_Dt= -NON_Canon}', "");
Error('\p{Decomposition_Type= /a/final}');
Error('\P{Decomposition_Type= /a/final}');
Expect(1, 64337, '\p{Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Decomposition_Type=__final}', "");
Expect(0, 64337, '\p{^Decomposition_Type=__final}', "");
Expect(0, 64337, '\P{Decomposition_Type=__final}', "");
Expect(1, 64337, '\P{^Decomposition_Type=__final}', "");
Expect(0, 64336, '\p{Decomposition_Type=__final}', "");
Expect(1, 64336, '\p{^Decomposition_Type=__final}', "");
Expect(1, 64336, '\P{Decomposition_Type=__final}', "");
Expect(0, 64336, '\P{^Decomposition_Type=__final}', "");
Error('\p{Dt=:= 	FIN}');
Error('\P{Dt=:= 	FIN}');
Expect(1, 64337, '\p{Dt=fin}', "");
Expect(0, 64337, '\p{^Dt=fin}', "");
Expect(0, 64337, '\P{Dt=fin}', "");
Expect(1, 64337, '\P{^Dt=fin}', "");
Expect(0, 64336, '\p{Dt=fin}', "");
Expect(1, 64336, '\p{^Dt=fin}', "");
Expect(1, 64336, '\P{Dt=fin}', "");
Expect(0, 64336, '\P{^Dt=fin}', "");
Expect(1, 64337, '\p{Dt=--fin}', "");
Expect(0, 64337, '\p{^Dt=--fin}', "");
Expect(0, 64337, '\P{Dt=--fin}', "");
Expect(1, 64337, '\P{^Dt=--fin}', "");
Expect(0, 64336, '\p{Dt=--fin}', "");
Expect(1, 64336, '\p{^Dt=--fin}', "");
Expect(1, 64336, '\P{Dt=--fin}', "");
Expect(0, 64336, '\P{^Dt=--fin}', "");
Error('\p{Is_Decomposition_Type=/a/--Final}');
Error('\P{Is_Decomposition_Type=/a/--Final}');
Expect(1, 64337, '\p{Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Is_Decomposition_Type= Final}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type= Final}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type= Final}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type= Final}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type= Final}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type= Final}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type= Final}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type= Final}', "");
Error('\p{Is_Dt=- Fin:=}');
Error('\P{Is_Dt=- Fin:=}');
Expect(1, 64337, '\p{Is_Dt=fin}', "");
Expect(0, 64337, '\p{^Is_Dt=fin}', "");
Expect(0, 64337, '\P{Is_Dt=fin}', "");
Expect(1, 64337, '\P{^Is_Dt=fin}', "");
Expect(0, 64336, '\p{Is_Dt=fin}', "");
Expect(1, 64336, '\p{^Is_Dt=fin}', "");
Expect(1, 64336, '\P{Is_Dt=fin}', "");
Expect(0, 64336, '\P{^Is_Dt=fin}', "");
Expect(1, 64337, '\p{Is_Dt=	 FIN}', "");
Expect(0, 64337, '\p{^Is_Dt=	 FIN}', "");
Expect(0, 64337, '\P{Is_Dt=	 FIN}', "");
Expect(1, 64337, '\P{^Is_Dt=	 FIN}', "");
Expect(0, 64336, '\p{Is_Dt=	 FIN}', "");
Expect(1, 64336, '\p{^Is_Dt=	 FIN}', "");
Expect(1, 64336, '\P{Is_Dt=	 FIN}', "");
Expect(0, 64336, '\P{^Is_Dt=	 FIN}', "");
Error('\p{Decomposition_Type=-_wide:=}');
Error('\P{Decomposition_Type=-_wide:=}');
Expect(1, 12288, '\p{Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Decomposition_Type=--Wide}', "");
Expect(0, 12288, '\p{^Decomposition_Type=--Wide}', "");
Expect(0, 12288, '\P{Decomposition_Type=--Wide}', "");
Expect(1, 12288, '\P{^Decomposition_Type=--Wide}', "");
Expect(0, 12287, '\p{Decomposition_Type=--Wide}', "");
Expect(1, 12287, '\p{^Decomposition_Type=--Wide}', "");
Expect(1, 12287, '\P{Decomposition_Type=--Wide}', "");
Expect(0, 12287, '\P{^Decomposition_Type=--Wide}', "");
Error('\p{Dt=__WIDE:=}');
Error('\P{Dt=__WIDE:=}');
Expect(1, 12288, '\p{Dt=wide}', "");
Expect(0, 12288, '\p{^Dt=wide}', "");
Expect(0, 12288, '\P{Dt=wide}', "");
Expect(1, 12288, '\P{^Dt=wide}', "");
Expect(0, 12287, '\p{Dt=wide}', "");
Expect(1, 12287, '\p{^Dt=wide}', "");
Expect(1, 12287, '\P{Dt=wide}', "");
Expect(0, 12287, '\P{^Dt=wide}', "");
Expect(1, 12288, '\p{Dt=_Wide}', "");
Expect(0, 12288, '\p{^Dt=_Wide}', "");
Expect(0, 12288, '\P{Dt=_Wide}', "");
Expect(1, 12288, '\P{^Dt=_Wide}', "");
Expect(0, 12287, '\p{Dt=_Wide}', "");
Expect(1, 12287, '\p{^Dt=_Wide}', "");
Expect(1, 12287, '\P{Dt=_Wide}', "");
Expect(0, 12287, '\P{^Dt=_Wide}', "");
Error('\p{Is_Decomposition_Type=-/a/WIDE}');
Error('\P{Is_Decomposition_Type=-/a/WIDE}');
Expect(1, 12288, '\p{Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Is_Decomposition_Type=	-WIDE}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=	-WIDE}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=	-WIDE}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=	-WIDE}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=	-WIDE}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=	-WIDE}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=	-WIDE}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=	-WIDE}', "");
Error('\p{Is_Dt= /a/Wide}');
Error('\P{Is_Dt= /a/Wide}');
Expect(1, 12288, '\p{Is_Dt=wide}', "");
Expect(0, 12288, '\p{^Is_Dt=wide}', "");
Expect(0, 12288, '\P{Is_Dt=wide}', "");
Expect(1, 12288, '\P{^Is_Dt=wide}', "");
Expect(0, 12287, '\p{Is_Dt=wide}', "");
Expect(1, 12287, '\p{^Is_Dt=wide}', "");
Expect(1, 12287, '\P{Is_Dt=wide}', "");
Expect(0, 12287, '\P{^Is_Dt=wide}', "");
Expect(1, 12288, '\p{Is_Dt=-_Wide}', "");
Expect(0, 12288, '\p{^Is_Dt=-_Wide}', "");
Expect(0, 12288, '\P{Is_Dt=-_Wide}', "");
Expect(1, 12288, '\P{^Is_Dt=-_Wide}', "");
Expect(0, 12287, '\p{Is_Dt=-_Wide}', "");
Expect(1, 12287, '\p{^Is_Dt=-_Wide}', "");
Expect(1, 12287, '\P{Is_Dt=-_Wide}', "");
Expect(0, 12287, '\P{^Is_Dt=-_Wide}', "");
Error('\p{Decomposition_Type=	/a/canonical}');
Error('\P{Decomposition_Type=	/a/canonical}');
Expect(1, 197, '\p{Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Decomposition_Type=	Canonical}', "");
Expect(0, 197, '\p{^Decomposition_Type=	Canonical}', "");
Expect(0, 197, '\P{Decomposition_Type=	Canonical}', "");
Expect(1, 197, '\P{^Decomposition_Type=	Canonical}', "");
Expect(0, 191, '\p{Decomposition_Type=	Canonical}', "");
Expect(1, 191, '\p{^Decomposition_Type=	Canonical}', "");
Expect(1, 191, '\P{Decomposition_Type=	Canonical}', "");
Expect(0, 191, '\P{^Decomposition_Type=	Canonical}', "");
Error('\p{Dt=/a/	 CAN}');
Error('\P{Dt=/a/	 CAN}');
Expect(1, 197, '\p{Dt=can}', "");
Expect(0, 197, '\p{^Dt=can}', "");
Expect(0, 197, '\P{Dt=can}', "");
Expect(1, 197, '\P{^Dt=can}', "");
Expect(0, 191, '\p{Dt=can}', "");
Expect(1, 191, '\p{^Dt=can}', "");
Expect(1, 191, '\P{Dt=can}', "");
Expect(0, 191, '\P{^Dt=can}', "");
Expect(1, 197, '\p{Dt= 	Can}', "");
Expect(0, 197, '\p{^Dt= 	Can}', "");
Expect(0, 197, '\P{Dt= 	Can}', "");
Expect(1, 197, '\P{^Dt= 	Can}', "");
Expect(0, 191, '\p{Dt= 	Can}', "");
Expect(1, 191, '\p{^Dt= 	Can}', "");
Expect(1, 191, '\P{Dt= 	Can}', "");
Expect(0, 191, '\P{^Dt= 	Can}', "");
Error('\p{Is_Decomposition_Type=:=Canonical}');
Error('\P{Is_Decomposition_Type=:=Canonical}');
Expect(1, 197, '\p{Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Is_Decomposition_Type=	Canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=	Canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=	Canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=	Canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=	Canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=	Canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=	Canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=	Canonical}', "");
Error('\p{Is_Dt=_ Can/a/}');
Error('\P{Is_Dt=_ Can/a/}');
Expect(1, 197, '\p{Is_Dt=can}', "");
Expect(0, 197, '\p{^Is_Dt=can}', "");
Expect(0, 197, '\P{Is_Dt=can}', "");
Expect(1, 197, '\P{^Is_Dt=can}', "");
Expect(0, 191, '\p{Is_Dt=can}', "");
Expect(1, 191, '\p{^Is_Dt=can}', "");
Expect(1, 191, '\P{Is_Dt=can}', "");
Expect(0, 191, '\P{^Is_Dt=can}', "");
Expect(1, 197, '\p{Is_Dt=  Can}', "");
Expect(0, 197, '\p{^Is_Dt=  Can}', "");
Expect(0, 197, '\P{Is_Dt=  Can}', "");
Expect(1, 197, '\P{^Is_Dt=  Can}', "");
Expect(0, 191, '\p{Is_Dt=  Can}', "");
Expect(1, 191, '\p{^Is_Dt=  Can}', "");
Expect(1, 191, '\P{Is_Dt=  Can}', "");
Expect(0, 191, '\P{^Is_Dt=  Can}', "");
Error('\p{Decomposition_Type=/a/		Vertical}');
Error('\P{Decomposition_Type=/a/		Vertical}');
Expect(1, 12447, '\p{Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Decomposition_Type:  -Vertical}', "");
Expect(0, 12447, '\p{^Decomposition_Type:  -Vertical}', "");
Expect(0, 12447, '\P{Decomposition_Type:  -Vertical}', "");
Expect(1, 12447, '\P{^Decomposition_Type:  -Vertical}', "");
Expect(0, 12446, '\p{Decomposition_Type:  -Vertical}', "");
Expect(1, 12446, '\p{^Decomposition_Type:  -Vertical}', "");
Expect(1, 12446, '\P{Decomposition_Type:  -Vertical}', "");
Expect(0, 12446, '\P{^Decomposition_Type:  -Vertical}', "");
Error('\p{Dt=	-vert:=}');
Error('\P{Dt=	-vert:=}');
Expect(1, 12447, '\p{Dt=vert}', "");
Expect(0, 12447, '\p{^Dt=vert}', "");
Expect(0, 12447, '\P{Dt=vert}', "");
Expect(1, 12447, '\P{^Dt=vert}', "");
Expect(0, 12446, '\p{Dt=vert}', "");
Expect(1, 12446, '\p{^Dt=vert}', "");
Expect(1, 12446, '\P{Dt=vert}', "");
Expect(0, 12446, '\P{^Dt=vert}', "");
Expect(1, 12447, '\p{Dt=_	Vert}', "");
Expect(0, 12447, '\p{^Dt=_	Vert}', "");
Expect(0, 12447, '\P{Dt=_	Vert}', "");
Expect(1, 12447, '\P{^Dt=_	Vert}', "");
Expect(0, 12446, '\p{Dt=_	Vert}', "");
Expect(1, 12446, '\p{^Dt=_	Vert}', "");
Expect(1, 12446, '\P{Dt=_	Vert}', "");
Expect(0, 12446, '\P{^Dt=_	Vert}', "");
Error('\p{Is_Decomposition_Type=-:=vertical}');
Error('\P{Is_Decomposition_Type=-:=vertical}');
Expect(1, 12447, '\p{Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Is_Decomposition_Type=-Vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=-Vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=-Vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=-Vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=-Vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=-Vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=-Vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=-Vertical}', "");
Error('\p{Is_Dt=/a/ Vert}');
Error('\P{Is_Dt=/a/ Vert}');
Expect(1, 12447, '\p{Is_Dt=vert}', "");
Expect(0, 12447, '\p{^Is_Dt=vert}', "");
Expect(0, 12447, '\P{Is_Dt=vert}', "");
Expect(1, 12447, '\P{^Is_Dt=vert}', "");
Expect(0, 12446, '\p{Is_Dt=vert}', "");
Expect(1, 12446, '\p{^Is_Dt=vert}', "");
Expect(1, 12446, '\P{Is_Dt=vert}', "");
Expect(0, 12446, '\P{^Is_Dt=vert}', "");
Expect(1, 12447, '\p{Is_Dt: 	VERT}', "");
Expect(0, 12447, '\p{^Is_Dt: 	VERT}', "");
Expect(0, 12447, '\P{Is_Dt: 	VERT}', "");
Expect(1, 12447, '\P{^Is_Dt: 	VERT}', "");
Expect(0, 12446, '\p{Is_Dt: 	VERT}', "");
Expect(1, 12446, '\p{^Is_Dt: 	VERT}', "");
Expect(1, 12446, '\P{Is_Dt: 	VERT}', "");
Expect(0, 12446, '\P{^Is_Dt: 	VERT}', "");
Error('\p{Decomposition_Type=__Medial:=}');
Error('\P{Decomposition_Type=__Medial:=}');
Expect(1, 64341, '\p{Decomposition_Type=medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=medial}', "");
Expect(1, 64341, '\p{Decomposition_Type=-medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=-medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=-medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=-medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=-medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=-medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=-medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=-medial}', "");
Error('\p{Dt= :=MED}');
Error('\P{Dt= :=MED}');
Expect(1, 64341, '\p{Dt=med}', "");
Expect(0, 64341, '\p{^Dt=med}', "");
Expect(0, 64341, '\P{Dt=med}', "");
Expect(1, 64341, '\P{^Dt=med}', "");
Expect(0, 64340, '\p{Dt=med}', "");
Expect(1, 64340, '\p{^Dt=med}', "");
Expect(1, 64340, '\P{Dt=med}', "");
Expect(0, 64340, '\P{^Dt=med}', "");
Expect(1, 64341, '\p{Dt=	_Med}', "");
Expect(0, 64341, '\p{^Dt=	_Med}', "");
Expect(0, 64341, '\P{Dt=	_Med}', "");
Expect(1, 64341, '\P{^Dt=	_Med}', "");
Expect(0, 64340, '\p{Dt=	_Med}', "");
Expect(1, 64340, '\p{^Dt=	_Med}', "");
Expect(1, 64340, '\P{Dt=	_Med}', "");
Expect(0, 64340, '\P{^Dt=	_Med}', "");
Error('\p{Is_Decomposition_Type=/a/--Medial}');
Error('\P{Is_Decomposition_Type=/a/--Medial}');
Expect(1, 64341, '\p{Is_Decomposition_Type=medial}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type=medial}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type=medial}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type=medial}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type=medial}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type=medial}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type=medial}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type=medial}', "");
Expect(1, 64341, '\p{Is_Decomposition_Type=__medial}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type=__medial}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type=__medial}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type=__medial}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type=__medial}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type=__medial}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type=__medial}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type=__medial}', "");
Error('\p{Is_Dt=-:=Med}');
Error('\P{Is_Dt=-:=Med}');
Expect(1, 64341, '\p{Is_Dt=med}', "");
Expect(0, 64341, '\p{^Is_Dt=med}', "");
Expect(0, 64341, '\P{Is_Dt=med}', "");
Expect(1, 64341, '\P{^Is_Dt=med}', "");
Expect(0, 64340, '\p{Is_Dt=med}', "");
Expect(1, 64340, '\p{^Is_Dt=med}', "");
Expect(1, 64340, '\P{Is_Dt=med}', "");
Expect(0, 64340, '\P{^Is_Dt=med}', "");
Expect(1, 64341, '\p{Is_Dt=_	med}', "");
Expect(0, 64341, '\p{^Is_Dt=_	med}', "");
Expect(0, 64341, '\P{Is_Dt=_	med}', "");
Expect(1, 64341, '\P{^Is_Dt=_	med}', "");
Expect(0, 64340, '\p{Is_Dt=_	med}', "");
Expect(1, 64340, '\p{^Is_Dt=_	med}', "");
Expect(1, 64340, '\P{Is_Dt=_	med}', "");
Expect(0, 64340, '\P{^Is_Dt=_	med}', "");
Error('\p{Decomposition_Type=:=Narrow}');
Error('\P{Decomposition_Type=:=Narrow}');
Expect(1, 65470, '\p{Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Decomposition_Type= NARROW}', "");
Expect(0, 65470, '\p{^Decomposition_Type= NARROW}', "");
Expect(0, 65470, '\P{Decomposition_Type= NARROW}', "");
Expect(1, 65470, '\P{^Decomposition_Type= NARROW}', "");
Expect(0, 65376, '\p{Decomposition_Type= NARROW}', "");
Expect(1, 65376, '\p{^Decomposition_Type= NARROW}', "");
Expect(1, 65376, '\P{Decomposition_Type= NARROW}', "");
Expect(0, 65376, '\P{^Decomposition_Type= NARROW}', "");
Error('\p{Dt:		nar:=}');
Error('\P{Dt:		nar:=}');
Expect(1, 65470, '\p{Dt=nar}', "");
Expect(0, 65470, '\p{^Dt=nar}', "");
Expect(0, 65470, '\P{Dt=nar}', "");
Expect(1, 65470, '\P{^Dt=nar}', "");
Expect(0, 65376, '\p{Dt=nar}', "");
Expect(1, 65376, '\p{^Dt=nar}', "");
Expect(1, 65376, '\P{Dt=nar}', "");
Expect(0, 65376, '\P{^Dt=nar}', "");
Expect(1, 65470, '\p{Dt=--nar}', "");
Expect(0, 65470, '\p{^Dt=--nar}', "");
Expect(0, 65470, '\P{Dt=--nar}', "");
Expect(1, 65470, '\P{^Dt=--nar}', "");
Expect(0, 65376, '\p{Dt=--nar}', "");
Expect(1, 65376, '\p{^Dt=--nar}', "");
Expect(1, 65376, '\P{Dt=--nar}', "");
Expect(0, 65376, '\P{^Dt=--nar}', "");
Error('\p{Is_Decomposition_Type:	-narrow/a/}');
Error('\P{Is_Decomposition_Type:	-narrow/a/}');
Expect(1, 65470, '\p{Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Is_Decomposition_Type=_	narrow}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=_	narrow}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=_	narrow}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=_	narrow}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=_	narrow}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=_	narrow}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=_	narrow}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=_	narrow}', "");
Error('\p{Is_Dt=Nar:=}');
Error('\P{Is_Dt=Nar:=}');
Expect(1, 65470, '\p{Is_Dt=nar}', "");
Expect(0, 65470, '\p{^Is_Dt=nar}', "");
Expect(0, 65470, '\P{Is_Dt=nar}', "");
Expect(1, 65470, '\P{^Is_Dt=nar}', "");
Expect(0, 65376, '\p{Is_Dt=nar}', "");
Expect(1, 65376, '\p{^Is_Dt=nar}', "");
Expect(1, 65376, '\P{Is_Dt=nar}', "");
Expect(0, 65376, '\P{^Is_Dt=nar}', "");
Expect(1, 65470, '\p{Is_Dt=__Nar}', "");
Expect(0, 65470, '\p{^Is_Dt=__Nar}', "");
Expect(0, 65470, '\P{Is_Dt=__Nar}', "");
Expect(1, 65470, '\P{^Is_Dt=__Nar}', "");
Expect(0, 65376, '\p{Is_Dt=__Nar}', "");
Expect(1, 65376, '\p{^Is_Dt=__Nar}', "");
Expect(1, 65376, '\P{Is_Dt=__Nar}', "");
Expect(0, 65376, '\P{^Is_Dt=__Nar}', "");
Error('\p{Decomposition_Type=_Sub:=}');
Error('\P{Decomposition_Type=_Sub:=}');
Expect(1, 7530, '\p{Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Decomposition_Type=		SUB}', "");
Expect(0, 7530, '\p{^Decomposition_Type=		SUB}', "");
Expect(0, 7530, '\P{Decomposition_Type=		SUB}', "");
Expect(1, 7530, '\P{^Decomposition_Type=		SUB}', "");
Expect(0, 7521, '\p{Decomposition_Type=		SUB}', "");
Expect(1, 7521, '\p{^Decomposition_Type=		SUB}', "");
Expect(1, 7521, '\P{Decomposition_Type=		SUB}', "");
Expect(0, 7521, '\P{^Decomposition_Type=		SUB}', "");
Error('\p{Dt=/a/_ Sub}');
Error('\P{Dt=/a/_ Sub}');
Expect(1, 7530, '\p{Dt=sub}', "");
Expect(0, 7530, '\p{^Dt=sub}', "");
Expect(0, 7530, '\P{Dt=sub}', "");
Expect(1, 7530, '\P{^Dt=sub}', "");
Expect(0, 7521, '\p{Dt=sub}', "");
Expect(1, 7521, '\p{^Dt=sub}', "");
Expect(1, 7521, '\P{Dt=sub}', "");
Expect(0, 7521, '\P{^Dt=sub}', "");
Expect(1, 7530, '\p{Dt=--Sub}', "");
Expect(0, 7530, '\p{^Dt=--Sub}', "");
Expect(0, 7530, '\P{Dt=--Sub}', "");
Expect(1, 7530, '\P{^Dt=--Sub}', "");
Expect(0, 7521, '\p{Dt=--Sub}', "");
Expect(1, 7521, '\p{^Dt=--Sub}', "");
Expect(1, 7521, '\P{Dt=--Sub}', "");
Expect(0, 7521, '\P{^Dt=--Sub}', "");
Error('\p{Is_Decomposition_Type=:= -Sub}');
Error('\P{Is_Decomposition_Type=:= -Sub}');
Expect(1, 7530, '\p{Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Is_Decomposition_Type= 	Sub}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type= 	Sub}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type= 	Sub}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type= 	Sub}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type= 	Sub}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type= 	Sub}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type= 	Sub}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type= 	Sub}', "");
Error('\p{Is_Dt:   :=  SUB}');
Error('\P{Is_Dt:   :=  SUB}');
Expect(1, 7530, '\p{Is_Dt=sub}', "");
Expect(0, 7530, '\p{^Is_Dt=sub}', "");
Expect(0, 7530, '\P{Is_Dt=sub}', "");
Expect(1, 7530, '\P{^Is_Dt=sub}', "");
Expect(0, 7521, '\p{Is_Dt=sub}', "");
Expect(1, 7521, '\p{^Is_Dt=sub}', "");
Expect(1, 7521, '\P{Is_Dt=sub}', "");
Expect(0, 7521, '\P{^Is_Dt=sub}', "");
Expect(1, 7530, '\p{Is_Dt=	-sub}', "");
Expect(0, 7530, '\p{^Is_Dt=	-sub}', "");
Expect(0, 7530, '\P{Is_Dt=	-sub}', "");
Expect(1, 7530, '\P{^Is_Dt=	-sub}', "");
Expect(0, 7521, '\p{Is_Dt=	-sub}', "");
Expect(1, 7521, '\p{^Is_Dt=	-sub}', "");
Expect(1, 7521, '\P{Is_Dt=	-sub}', "");
Expect(0, 7521, '\P{^Is_Dt=	-sub}', "");
Error('\p{Decomposition_Type= /a/square}');
Error('\P{Decomposition_Type= /a/square}');
Expect(1, 12880, '\p{Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Decomposition_Type=-Square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=-Square}', "");
Expect(0, 12880, '\P{Decomposition_Type=-Square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=-Square}', "");
Expect(0, 12879, '\p{Decomposition_Type=-Square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=-Square}', "");
Expect(1, 12879, '\P{Decomposition_Type=-Square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=-Square}', "");
Error('\p{Dt:    /a/Sqr}');
Error('\P{Dt:    /a/Sqr}');
Expect(1, 12880, '\p{Dt=sqr}', "");
Expect(0, 12880, '\p{^Dt=sqr}', "");
Expect(0, 12880, '\P{Dt=sqr}', "");
Expect(1, 12880, '\P{^Dt=sqr}', "");
Expect(0, 12879, '\p{Dt=sqr}', "");
Expect(1, 12879, '\p{^Dt=sqr}', "");
Expect(1, 12879, '\P{Dt=sqr}', "");
Expect(0, 12879, '\P{^Dt=sqr}', "");
Expect(1, 12880, '\p{Dt=		Sqr}', "");
Expect(0, 12880, '\p{^Dt=		Sqr}', "");
Expect(0, 12880, '\P{Dt=		Sqr}', "");
Expect(1, 12880, '\P{^Dt=		Sqr}', "");
Expect(0, 12879, '\p{Dt=		Sqr}', "");
Expect(1, 12879, '\p{^Dt=		Sqr}', "");
Expect(1, 12879, '\P{Dt=		Sqr}', "");
Expect(0, 12879, '\P{^Dt=		Sqr}', "");
Error('\p{Is_Decomposition_Type=:=_square}');
Error('\P{Is_Decomposition_Type=:=_square}');
Expect(1, 12880, '\p{Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Is_Decomposition_Type=-	Square}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type=-	Square}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type=-	Square}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type=-	Square}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type=-	Square}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type=-	Square}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type=-	Square}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type=-	Square}', "");
Error('\p{Is_Dt=_/a/Sqr}');
Error('\P{Is_Dt=_/a/Sqr}');
Expect(1, 12880, '\p{Is_Dt=sqr}', "");
Expect(0, 12880, '\p{^Is_Dt=sqr}', "");
Expect(0, 12880, '\P{Is_Dt=sqr}', "");
Expect(1, 12880, '\P{^Is_Dt=sqr}', "");
Expect(0, 12879, '\p{Is_Dt=sqr}', "");
Expect(1, 12879, '\p{^Is_Dt=sqr}', "");
Expect(1, 12879, '\P{Is_Dt=sqr}', "");
Expect(0, 12879, '\P{^Is_Dt=sqr}', "");
Expect(1, 12880, '\p{Is_Dt:   	_Sqr}', "");
Expect(0, 12880, '\p{^Is_Dt:   	_Sqr}', "");
Expect(0, 12880, '\P{Is_Dt:   	_Sqr}', "");
Expect(1, 12880, '\P{^Is_Dt:   	_Sqr}', "");
Expect(0, 12879, '\p{Is_Dt:   	_Sqr}', "");
Expect(1, 12879, '\p{^Is_Dt:   	_Sqr}', "");
Expect(1, 12879, '\P{Is_Dt:   	_Sqr}', "");
Expect(0, 12879, '\P{^Is_Dt:   	_Sqr}', "");
Error('\p{Decomposition_Type= 	Small/a/}');
Error('\P{Decomposition_Type= 	Small/a/}');
Expect(1, 65106, '\p{Decomposition_Type=small}', "");
Expect(0, 65106, '\p{^Decomposition_Type=small}', "");
Expect(0, 65106, '\P{Decomposition_Type=small}', "");
Expect(1, 65106, '\P{^Decomposition_Type=small}', "");
Expect(0, 65103, '\p{Decomposition_Type=small}', "");
Expect(1, 65103, '\p{^Decomposition_Type=small}', "");
Expect(1, 65103, '\P{Decomposition_Type=small}', "");
Expect(0, 65103, '\P{^Decomposition_Type=small}', "");
Expect(1, 65106, '\p{Decomposition_Type=_SMALL}', "");
Expect(0, 65106, '\p{^Decomposition_Type=_SMALL}', "");
Expect(0, 65106, '\P{Decomposition_Type=_SMALL}', "");
Expect(1, 65106, '\P{^Decomposition_Type=_SMALL}', "");
Expect(0, 65103, '\p{Decomposition_Type=_SMALL}', "");
Expect(1, 65103, '\p{^Decomposition_Type=_SMALL}', "");
Expect(1, 65103, '\P{Decomposition_Type=_SMALL}', "");
Expect(0, 65103, '\P{^Decomposition_Type=_SMALL}', "");
Error('\p{Dt=/a/sml}');
Error('\P{Dt=/a/sml}');
Expect(1, 65106, '\p{Dt=sml}', "");
Expect(0, 65106, '\p{^Dt=sml}', "");
Expect(0, 65106, '\P{Dt=sml}', "");
Expect(1, 65106, '\P{^Dt=sml}', "");
Expect(0, 65103, '\p{Dt=sml}', "");
Expect(1, 65103, '\p{^Dt=sml}', "");
Expect(1, 65103, '\P{Dt=sml}', "");
Expect(0, 65103, '\P{^Dt=sml}', "");
Expect(1, 65106, '\p{Dt=-Sml}', "");
Expect(0, 65106, '\p{^Dt=-Sml}', "");
Expect(0, 65106, '\P{Dt=-Sml}', "");
Expect(1, 65106, '\P{^Dt=-Sml}', "");
Expect(0, 65103, '\p{Dt=-Sml}', "");
Expect(1, 65103, '\p{^Dt=-Sml}', "");
Expect(1, 65103, '\P{Dt=-Sml}', "");
Expect(0, 65103, '\P{^Dt=-Sml}', "");
Error('\p{Is_Decomposition_Type=:=-SMALL}');
Error('\P{Is_Decomposition_Type=:=-SMALL}');
Expect(1, 65106, '\p{Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\p{Is_Decomposition_Type= small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type= small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type= small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type= small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type= small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type= small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type= small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type= small}', "");
Error('\p{Is_Dt:    	Sml/a/}');
Error('\P{Is_Dt:    	Sml/a/}');
Expect(1, 65106, '\p{Is_Dt=sml}', "");
Expect(0, 65106, '\p{^Is_Dt=sml}', "");
Expect(0, 65106, '\P{Is_Dt=sml}', "");
Expect(1, 65106, '\P{^Is_Dt=sml}', "");
Expect(0, 65103, '\p{Is_Dt=sml}', "");
Expect(1, 65103, '\p{^Is_Dt=sml}', "");
Expect(1, 65103, '\P{Is_Dt=sml}', "");
Expect(0, 65103, '\P{^Is_Dt=sml}', "");
Expect(1, 65106, '\p{Is_Dt=SML}', "");
Expect(0, 65106, '\p{^Is_Dt=SML}', "");
Expect(0, 65106, '\P{Is_Dt=SML}', "");
Expect(1, 65106, '\P{^Is_Dt=SML}', "");
Expect(0, 65103, '\p{Is_Dt=SML}', "");
Expect(1, 65103, '\p{^Is_Dt=SML}', "");
Expect(1, 65103, '\P{Is_Dt=SML}', "");
Expect(0, 65103, '\P{^Is_Dt=SML}', "");
Error('\p{Decomposition_Type=:=_NONE}');
Error('\P{Decomposition_Type=:=_NONE}');
Expect(1, 159, '\p{Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Decomposition_Type=none}', "");
Expect(0, 159, '\P{Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Decomposition_Type=none}', "");
Expect(0, 160, '\p{Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Decomposition_Type=none}', "");
Expect(1, 160, '\P{Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Decomposition_Type=none}', "");
Expect(1, 159, '\p{Decomposition_Type=	None}', "");
Expect(0, 159, '\p{^Decomposition_Type=	None}', "");
Expect(0, 159, '\P{Decomposition_Type=	None}', "");
Expect(1, 159, '\P{^Decomposition_Type=	None}', "");
Expect(0, 160, '\p{Decomposition_Type=	None}', "");
Expect(1, 160, '\p{^Decomposition_Type=	None}', "");
Expect(1, 160, '\P{Decomposition_Type=	None}', "");
Expect(0, 160, '\P{^Decomposition_Type=	None}', "");
Error('\p{Dt=	 none/a/}');
Error('\P{Dt=	 none/a/}');
Expect(1, 159, '\p{Dt=none}', "");
Expect(0, 159, '\p{^Dt=none}', "");
Expect(0, 159, '\P{Dt=none}', "");
Expect(1, 159, '\P{^Dt=none}', "");
Expect(0, 160, '\p{Dt=none}', "");
Expect(1, 160, '\p{^Dt=none}', "");
Expect(1, 160, '\P{Dt=none}', "");
Expect(0, 160, '\P{^Dt=none}', "");
Expect(1, 159, '\p{Dt= 	NONE}', "");
Expect(0, 159, '\p{^Dt= 	NONE}', "");
Expect(0, 159, '\P{Dt= 	NONE}', "");
Expect(1, 159, '\P{^Dt= 	NONE}', "");
Expect(0, 160, '\p{Dt= 	NONE}', "");
Expect(1, 160, '\p{^Dt= 	NONE}', "");
Expect(1, 160, '\P{Dt= 	NONE}', "");
Expect(0, 160, '\P{^Dt= 	NONE}', "");
Error('\p{Is_Decomposition_Type=/a/--None}');
Error('\P{Is_Decomposition_Type=/a/--None}');
Expect(1, 159, '\p{Is_Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type=none}', "");
Expect(0, 159, '\P{Is_Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type=none}', "");
Expect(0, 160, '\p{Is_Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type=none}', "");
Expect(1, 160, '\P{Is_Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type=none}', "");
Expect(1, 159, '\p{Is_Decomposition_Type:		 None}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type:		 None}', "");
Expect(0, 159, '\P{Is_Decomposition_Type:		 None}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type:		 None}', "");
Expect(0, 160, '\p{Is_Decomposition_Type:		 None}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type:		 None}', "");
Expect(1, 160, '\P{Is_Decomposition_Type:		 None}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type:		 None}', "");
Error('\p{Is_Dt= None:=}');
Error('\P{Is_Dt= None:=}');
Expect(1, 159, '\p{Is_Dt=none}', "");
Expect(0, 159, '\p{^Is_Dt=none}', "");
Expect(0, 159, '\P{Is_Dt=none}', "");
Expect(1, 159, '\P{^Is_Dt=none}', "");
Expect(0, 160, '\p{Is_Dt=none}', "");
Expect(1, 160, '\p{^Is_Dt=none}', "");
Expect(1, 160, '\P{Is_Dt=none}', "");
Expect(0, 160, '\P{^Is_Dt=none}', "");
Expect(1, 159, '\p{Is_Dt: _None}', "");
Expect(0, 159, '\p{^Is_Dt: _None}', "");
Expect(0, 159, '\P{Is_Dt: _None}', "");
Expect(1, 159, '\P{^Is_Dt: _None}', "");
Expect(0, 160, '\p{Is_Dt: _None}', "");
Expect(1, 160, '\p{^Is_Dt: _None}', "");
Expect(1, 160, '\P{Is_Dt: _None}', "");
Expect(0, 160, '\P{^Is_Dt: _None}', "");
Error('\p{Decomposition_Type=	:=Isolated}');
Error('\P{Decomposition_Type=	:=Isolated}');
Expect(1, 64336, '\p{Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Decomposition_Type:   _-Isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type:   _-Isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type:   _-Isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type:   _-Isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type:   _-Isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type:   _-Isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type:   _-Isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type:   _-Isolated}', "");
Error('\p{Dt:   _	ISO:=}');
Error('\P{Dt:   _	ISO:=}');
Expect(1, 64336, '\p{Dt=iso}', "");
Expect(0, 64336, '\p{^Dt=iso}', "");
Expect(0, 64336, '\P{Dt=iso}', "");
Expect(1, 64336, '\P{^Dt=iso}', "");
Expect(0, 64335, '\p{Dt=iso}', "");
Expect(1, 64335, '\p{^Dt=iso}', "");
Expect(1, 64335, '\P{Dt=iso}', "");
Expect(0, 64335, '\P{^Dt=iso}', "");
Expect(1, 64336, '\p{Dt=	 Iso}', "");
Expect(0, 64336, '\p{^Dt=	 Iso}', "");
Expect(0, 64336, '\P{Dt=	 Iso}', "");
Expect(1, 64336, '\P{^Dt=	 Iso}', "");
Expect(0, 64335, '\p{Dt=	 Iso}', "");
Expect(1, 64335, '\p{^Dt=	 Iso}', "");
Expect(1, 64335, '\P{Dt=	 Iso}', "");
Expect(0, 64335, '\P{^Dt=	 Iso}', "");
Error('\p{Is_Decomposition_Type=-	ISOLATED:=}');
Error('\P{Is_Decomposition_Type=-	ISOLATED:=}');
Expect(1, 64336, '\p{Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Is_Decomposition_Type= _Isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type= _Isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type= _Isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type= _Isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type= _Isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type= _Isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type= _Isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type= _Isolated}', "");
Error('\p{Is_Dt=	/a/ISO}');
Error('\P{Is_Dt=	/a/ISO}');
Expect(1, 64336, '\p{Is_Dt=iso}', "");
Expect(0, 64336, '\p{^Is_Dt=iso}', "");
Expect(0, 64336, '\P{Is_Dt=iso}', "");
Expect(1, 64336, '\P{^Is_Dt=iso}', "");
Expect(0, 64335, '\p{Is_Dt=iso}', "");
Expect(1, 64335, '\p{^Is_Dt=iso}', "");
Expect(1, 64335, '\P{Is_Dt=iso}', "");
Expect(0, 64335, '\P{^Is_Dt=iso}', "");
Expect(1, 64336, '\p{Is_Dt=-iso}', "");
Expect(0, 64336, '\p{^Is_Dt=-iso}', "");
Expect(0, 64336, '\P{Is_Dt=-iso}', "");
Expect(1, 64336, '\P{^Is_Dt=-iso}', "");
Expect(0, 64335, '\p{Is_Dt=-iso}', "");
Expect(1, 64335, '\p{^Is_Dt=-iso}', "");
Expect(1, 64335, '\P{Is_Dt=-iso}', "");
Expect(0, 64335, '\P{^Is_Dt=-iso}', "");
Error('\p{Decomposition_Type:   	:=Compat}');
Error('\P{Decomposition_Type:   	:=Compat}');
Expect(1, 168, '\p{Decomposition_Type: compat}', "");
Expect(0, 168, '\p{^Decomposition_Type: compat}', "");
Expect(0, 168, '\P{Decomposition_Type: compat}', "");
Expect(1, 168, '\P{^Decomposition_Type: compat}', "");
Expect(0, 167, '\p{Decomposition_Type: compat}', "");
Expect(1, 167, '\p{^Decomposition_Type: compat}', "");
Expect(1, 167, '\P{Decomposition_Type: compat}', "");
Expect(0, 167, '\P{^Decomposition_Type: compat}', "");
Expect(1, 168, '\p{Decomposition_Type=__Compat}', "");
Expect(0, 168, '\p{^Decomposition_Type=__Compat}', "");
Expect(0, 168, '\P{Decomposition_Type=__Compat}', "");
Expect(1, 168, '\P{^Decomposition_Type=__Compat}', "");
Expect(0, 167, '\p{Decomposition_Type=__Compat}', "");
Expect(1, 167, '\p{^Decomposition_Type=__Compat}', "");
Expect(1, 167, '\P{Decomposition_Type=__Compat}', "");
Expect(0, 167, '\P{^Decomposition_Type=__Compat}', "");
Error('\p{Dt=:=  COM}');
Error('\P{Dt=:=  COM}');
Expect(1, 168, '\p{Dt:   com}', "");
Expect(0, 168, '\p{^Dt:   com}', "");
Expect(0, 168, '\P{Dt:   com}', "");
Expect(1, 168, '\P{^Dt:   com}', "");
Expect(0, 167, '\p{Dt:   com}', "");
Expect(1, 167, '\p{^Dt:   com}', "");
Expect(1, 167, '\P{Dt:   com}', "");
Expect(0, 167, '\P{^Dt:   com}', "");
Expect(1, 168, '\p{Dt=-Com}', "");
Expect(0, 168, '\p{^Dt=-Com}', "");
Expect(0, 168, '\P{Dt=-Com}', "");
Expect(1, 168, '\P{^Dt=-Com}', "");
Expect(0, 167, '\p{Dt=-Com}', "");
Expect(1, 167, '\p{^Dt=-Com}', "");
Expect(1, 167, '\P{Dt=-Com}', "");
Expect(0, 167, '\P{^Dt=-Com}', "");
Error('\p{Is_Decomposition_Type=_-compat:=}');
Error('\P{Is_Decomposition_Type=_-compat:=}');
Expect(1, 168, '\p{Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\P{Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\p{Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\P{Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\p{Is_Decomposition_Type= 	Compat}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type= 	Compat}', "");
Expect(0, 168, '\P{Is_Decomposition_Type= 	Compat}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type= 	Compat}', "");
Expect(0, 167, '\p{Is_Decomposition_Type= 	Compat}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type= 	Compat}', "");
Expect(1, 167, '\P{Is_Decomposition_Type= 	Compat}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type= 	Compat}', "");
Error('\p{Is_Dt=:=com}');
Error('\P{Is_Dt=:=com}');
Expect(1, 168, '\p{Is_Dt=com}', "");
Expect(0, 168, '\p{^Is_Dt=com}', "");
Expect(0, 168, '\P{Is_Dt=com}', "");
Expect(1, 168, '\P{^Is_Dt=com}', "");
Expect(0, 167, '\p{Is_Dt=com}', "");
Expect(1, 167, '\p{^Is_Dt=com}', "");
Expect(1, 167, '\P{Is_Dt=com}', "");
Expect(0, 167, '\P{^Is_Dt=com}', "");
Expect(1, 168, '\p{Is_Dt:   --Com}', "");
Expect(0, 168, '\p{^Is_Dt:   --Com}', "");
Expect(0, 168, '\P{Is_Dt:   --Com}', "");
Expect(1, 168, '\P{^Is_Dt:   --Com}', "");
Expect(0, 167, '\p{Is_Dt:   --Com}', "");
Expect(1, 167, '\p{^Is_Dt:   --Com}', "");
Expect(1, 167, '\P{Is_Dt:   --Com}', "");
Expect(0, 167, '\P{^Is_Dt:   --Com}', "");
Error('\p{Decomposition_Type:	:=_super}');
Error('\P{Decomposition_Type:	:=_super}');
Expect(1, 170, '\p{Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Decomposition_Type=super}', "");
Expect(0, 170, '\P{Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Decomposition_Type=super}', "");
Expect(0, 169, '\p{Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Decomposition_Type=super}', "");
Expect(1, 169, '\P{Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Decomposition_Type=super}', "");
Expect(1, 170, '\p{Decomposition_Type=	_super}', "");
Expect(0, 170, '\p{^Decomposition_Type=	_super}', "");
Expect(0, 170, '\P{Decomposition_Type=	_super}', "");
Expect(1, 170, '\P{^Decomposition_Type=	_super}', "");
Expect(0, 169, '\p{Decomposition_Type=	_super}', "");
Expect(1, 169, '\p{^Decomposition_Type=	_super}', "");
Expect(1, 169, '\P{Decomposition_Type=	_super}', "");
Expect(0, 169, '\P{^Decomposition_Type=	_super}', "");
Error('\p{Dt=sup/a/}');
Error('\P{Dt=sup/a/}');
Expect(1, 170, '\p{Dt=sup}', "");
Expect(0, 170, '\p{^Dt=sup}', "");
Expect(0, 170, '\P{Dt=sup}', "");
Expect(1, 170, '\P{^Dt=sup}', "");
Expect(0, 169, '\p{Dt=sup}', "");
Expect(1, 169, '\p{^Dt=sup}', "");
Expect(1, 169, '\P{Dt=sup}', "");
Expect(0, 169, '\P{^Dt=sup}', "");
Expect(1, 170, '\p{Dt=	_Sup}', "");
Expect(0, 170, '\p{^Dt=	_Sup}', "");
Expect(0, 170, '\P{Dt=	_Sup}', "");
Expect(1, 170, '\P{^Dt=	_Sup}', "");
Expect(0, 169, '\p{Dt=	_Sup}', "");
Expect(1, 169, '\p{^Dt=	_Sup}', "");
Expect(1, 169, '\P{Dt=	_Sup}', "");
Expect(0, 169, '\P{^Dt=	_Sup}', "");
Error('\p{Is_Decomposition_Type=_SUPER:=}');
Error('\P{Is_Decomposition_Type=_SUPER:=}');
Expect(1, 170, '\p{Is_Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type=super}', "");
Expect(0, 170, '\P{Is_Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type=super}', "");
Expect(0, 169, '\p{Is_Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type=super}', "");
Expect(1, 169, '\P{Is_Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type=super}', "");
Expect(1, 170, '\p{Is_Decomposition_Type=	Super}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type=	Super}', "");
Expect(0, 170, '\P{Is_Decomposition_Type=	Super}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type=	Super}', "");
Expect(0, 169, '\p{Is_Decomposition_Type=	Super}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type=	Super}', "");
Expect(1, 169, '\P{Is_Decomposition_Type=	Super}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type=	Super}', "");
Error('\p{Is_Dt=/a/  sup}');
Error('\P{Is_Dt=/a/  sup}');
Expect(1, 170, '\p{Is_Dt=sup}', "");
Expect(0, 170, '\p{^Is_Dt=sup}', "");
Expect(0, 170, '\P{Is_Dt=sup}', "");
Expect(1, 170, '\P{^Is_Dt=sup}', "");
Expect(0, 169, '\p{Is_Dt=sup}', "");
Expect(1, 169, '\p{^Is_Dt=sup}', "");
Expect(1, 169, '\P{Is_Dt=sup}', "");
Expect(0, 169, '\P{^Is_Dt=sup}', "");
Expect(1, 170, '\p{Is_Dt=	-sup}', "");
Expect(0, 170, '\p{^Is_Dt=	-sup}', "");
Expect(0, 170, '\P{Is_Dt=	-sup}', "");
Expect(1, 170, '\P{^Is_Dt=	-sup}', "");
Expect(0, 169, '\p{Is_Dt=	-sup}', "");
Expect(1, 169, '\p{^Is_Dt=	-sup}', "");
Expect(1, 169, '\P{Is_Dt=	-sup}', "");
Expect(0, 169, '\P{^Is_Dt=	-sup}', "");
Error('\p{Other_Math=/a/	-Yes}');
Error('\P{Other_Math=/a/	-Yes}');
Expect(1, 94, '\p{Other_Math:   yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math:   yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math:   yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math:   yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math:   yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math:   yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math:   yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math:   yes}', 'deprecated');
Expect(1, 94, '\p{Other_Math=  Yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math=  Yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math=  Yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math=  Yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math=  Yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math=  Yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math=  Yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math=  Yes}', 'deprecated');
Error('\p{OMath=	/a/Y}');
Error('\P{OMath=	/a/Y}');
Expect(1, 94, '\p{OMath=y}', 'deprecated');
Expect(0, 94, '\p{^OMath=y}', 'deprecated');
Expect(0, 94, '\P{OMath=y}', 'deprecated');
Expect(1, 94, '\P{^OMath=y}', 'deprecated');
Expect(0, 93, '\p{OMath=y}', 'deprecated');
Expect(1, 93, '\p{^OMath=y}', 'deprecated');
Expect(1, 93, '\P{OMath=y}', 'deprecated');
Expect(0, 93, '\P{^OMath=y}', 'deprecated');
Expect(1, 94, '\p{OMath:	Y}', 'deprecated');
Expect(0, 94, '\p{^OMath:	Y}', 'deprecated');
Expect(0, 94, '\P{OMath:	Y}', 'deprecated');
Expect(1, 94, '\P{^OMath:	Y}', 'deprecated');
Expect(0, 93, '\p{OMath:	Y}', 'deprecated');
Expect(1, 93, '\p{^OMath:	Y}', 'deprecated');
Expect(1, 93, '\P{OMath:	Y}', 'deprecated');
Expect(0, 93, '\P{^OMath:	Y}', 'deprecated');
Error('\p{Is_Other_Math=_:=t}');
Error('\P{Is_Other_Math=_:=t}');
Expect(1, 94, '\p{Is_Other_Math:   t}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math:   t}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math:   t}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math:   t}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math:   t}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math:   t}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math:   t}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math:   t}', 'deprecated');
Expect(1, 94, '\p{Is_Other_Math=_T}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math=_T}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math=_T}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math=_T}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math=_T}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math=_T}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math=_T}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math=_T}', 'deprecated');
Error('\p{Is_OMath=:=__True}');
Error('\P{Is_OMath=:=__True}');
Expect(1, 94, '\p{Is_OMath=true}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=true}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=true}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=true}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=true}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=true}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=true}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=true}', 'deprecated');
Expect(1, 94, '\p{Is_OMath=	_True}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=	_True}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=	_True}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=	_True}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=	_True}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=	_True}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=	_True}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=	_True}', 'deprecated');
Error('\p{Other_Math=  no/a/}');
Error('\P{Other_Math=  no/a/}');
Expect(1, 93, '\p{Other_Math=no}', 'deprecated');
Expect(0, 93, '\p{^Other_Math=no}', 'deprecated');
Expect(0, 93, '\P{Other_Math=no}', 'deprecated');
Expect(1, 93, '\P{^Other_Math=no}', 'deprecated');
Expect(0, 94, '\p{Other_Math=no}', 'deprecated');
Expect(1, 94, '\p{^Other_Math=no}', 'deprecated');
Expect(1, 94, '\P{Other_Math=no}', 'deprecated');
Expect(0, 94, '\P{^Other_Math=no}', 'deprecated');
Expect(1, 93, '\p{Other_Math=NO}', 'deprecated');
Expect(0, 93, '\p{^Other_Math=NO}', 'deprecated');
Expect(0, 93, '\P{Other_Math=NO}', 'deprecated');
Expect(1, 93, '\P{^Other_Math=NO}', 'deprecated');
Expect(0, 94, '\p{Other_Math=NO}', 'deprecated');
Expect(1, 94, '\p{^Other_Math=NO}', 'deprecated');
Expect(1, 94, '\P{Other_Math=NO}', 'deprecated');
Expect(0, 94, '\P{^Other_Math=NO}', 'deprecated');
Error('\p{OMath:	-/a/N}');
Error('\P{OMath:	-/a/N}');
Expect(1, 93, '\p{OMath=n}', 'deprecated');
Expect(0, 93, '\p{^OMath=n}', 'deprecated');
Expect(0, 93, '\P{OMath=n}', 'deprecated');
Expect(1, 93, '\P{^OMath=n}', 'deprecated');
Expect(0, 94, '\p{OMath=n}', 'deprecated');
Expect(1, 94, '\p{^OMath=n}', 'deprecated');
Expect(1, 94, '\P{OMath=n}', 'deprecated');
Expect(0, 94, '\P{^OMath=n}', 'deprecated');
Expect(1, 93, '\p{OMath=__N}', 'deprecated');
Expect(0, 93, '\p{^OMath=__N}', 'deprecated');
Expect(0, 93, '\P{OMath=__N}', 'deprecated');
Expect(1, 93, '\P{^OMath=__N}', 'deprecated');
Expect(0, 94, '\p{OMath=__N}', 'deprecated');
Expect(1, 94, '\p{^OMath=__N}', 'deprecated');
Expect(1, 94, '\P{OMath=__N}', 'deprecated');
Expect(0, 94, '\P{^OMath=__N}', 'deprecated');
Error('\p{Is_Other_Math= _F/a/}');
Error('\P{Is_Other_Math= _F/a/}');
Expect(1, 93, '\p{Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\p{Is_Other_Math=  F}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=  F}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=  F}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=  F}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=  F}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=  F}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=  F}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=  F}', 'deprecated');
Error('\p{Is_OMath=:=  false}');
Error('\P{Is_OMath=:=  false}');
Expect(1, 93, '\p{Is_OMath=false}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath=false}', 'deprecated');
Expect(0, 93, '\P{Is_OMath=false}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath=false}', 'deprecated');
Expect(0, 94, '\p{Is_OMath=false}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath=false}', 'deprecated');
Expect(1, 94, '\P{Is_OMath=false}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath=false}', 'deprecated');
Expect(1, 93, '\p{Is_OMath=-False}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath=-False}', 'deprecated');
Expect(0, 93, '\P{Is_OMath=-False}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath=-False}', 'deprecated');
Expect(0, 94, '\p{Is_OMath=-False}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath=-False}', 'deprecated');
Expect(1, 94, '\P{Is_OMath=-False}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath=-False}', 'deprecated');
Error('\p{Hyphen=-yes:=}');
Error('\P{Hyphen=-yes:=}');
Expect(1, 45, '\p{Hyphen:   yes}', "");
Expect(0, 45, '\p{^Hyphen:   yes}', "");
Expect(0, 45, '\P{Hyphen:   yes}', "");
Expect(1, 45, '\P{^Hyphen:   yes}', "");
Expect(0, 44, '\p{Hyphen:   yes}', "");
Expect(1, 44, '\p{^Hyphen:   yes}', "");
Expect(1, 44, '\P{Hyphen:   yes}', "");
Expect(0, 44, '\P{^Hyphen:   yes}', "");
Expect(1, 45, '\p{Hyphen=-yes}', "");
Expect(0, 45, '\p{^Hyphen=-yes}', "");
Expect(0, 45, '\P{Hyphen=-yes}', "");
Expect(1, 45, '\P{^Hyphen=-yes}', "");
Expect(0, 44, '\p{Hyphen=-yes}', "");
Expect(1, 44, '\p{^Hyphen=-yes}', "");
Expect(1, 44, '\P{Hyphen=-yes}', "");
Expect(0, 44, '\P{^Hyphen=-yes}', "");
Error('\p{Is_Hyphen=- Y/a/}');
Error('\P{Is_Hyphen=- Y/a/}');
Expect(1, 45, '\p{Is_Hyphen=y}', "");
Expect(0, 45, '\p{^Is_Hyphen=y}', "");
Expect(0, 45, '\P{Is_Hyphen=y}', "");
Expect(1, 45, '\P{^Is_Hyphen=y}', "");
Expect(0, 44, '\p{Is_Hyphen=y}', "");
Expect(1, 44, '\p{^Is_Hyphen=y}', "");
Expect(1, 44, '\P{Is_Hyphen=y}', "");
Expect(0, 44, '\P{^Is_Hyphen=y}', "");
Expect(1, 45, '\p{Is_Hyphen=	-y}', "");
Expect(0, 45, '\p{^Is_Hyphen=	-y}', "");
Expect(0, 45, '\P{Is_Hyphen=	-y}', "");
Expect(1, 45, '\P{^Is_Hyphen=	-y}', "");
Expect(0, 44, '\p{Is_Hyphen=	-y}', "");
Expect(1, 44, '\p{^Is_Hyphen=	-y}', "");
Expect(1, 44, '\P{Is_Hyphen=	-y}', "");
Expect(0, 44, '\P{^Is_Hyphen=	-y}', "");
Error('\p{Hyphen=_ T/a/}');
Error('\P{Hyphen=_ T/a/}');
Expect(1, 45, '\p{Hyphen=t}', "");
Expect(0, 45, '\p{^Hyphen=t}', "");
Expect(0, 45, '\P{Hyphen=t}', "");
Expect(1, 45, '\P{^Hyphen=t}', "");
Expect(0, 44, '\p{Hyphen=t}', "");
Expect(1, 44, '\p{^Hyphen=t}', "");
Expect(1, 44, '\P{Hyphen=t}', "");
Expect(0, 44, '\P{^Hyphen=t}', "");
Expect(1, 45, '\p{Hyphen=_	T}', "");
Expect(0, 45, '\p{^Hyphen=_	T}', "");
Expect(0, 45, '\P{Hyphen=_	T}', "");
Expect(1, 45, '\P{^Hyphen=_	T}', "");
Expect(0, 44, '\p{Hyphen=_	T}', "");
Expect(1, 44, '\p{^Hyphen=_	T}', "");
Expect(1, 44, '\P{Hyphen=_	T}', "");
Expect(0, 44, '\P{^Hyphen=_	T}', "");
Error('\p{Is_Hyphen=	/a/TRUE}');
Error('\P{Is_Hyphen=	/a/TRUE}');
Expect(1, 45, '\p{Is_Hyphen=true}', "");
Expect(0, 45, '\p{^Is_Hyphen=true}', "");
Expect(0, 45, '\P{Is_Hyphen=true}', "");
Expect(1, 45, '\P{^Is_Hyphen=true}', "");
Expect(0, 44, '\p{Is_Hyphen=true}', "");
Expect(1, 44, '\p{^Is_Hyphen=true}', "");
Expect(1, 44, '\P{Is_Hyphen=true}', "");
Expect(0, 44, '\P{^Is_Hyphen=true}', "");
Expect(1, 45, '\p{Is_Hyphen= TRUE}', "");
Expect(0, 45, '\p{^Is_Hyphen= TRUE}', "");
Expect(0, 45, '\P{Is_Hyphen= TRUE}', "");
Expect(1, 45, '\P{^Is_Hyphen= TRUE}', "");
Expect(0, 44, '\p{Is_Hyphen= TRUE}', "");
Expect(1, 44, '\p{^Is_Hyphen= TRUE}', "");
Expect(1, 44, '\P{Is_Hyphen= TRUE}', "");
Expect(0, 44, '\P{^Is_Hyphen= TRUE}', "");
Error('\p{Hyphen=:=No}');
Error('\P{Hyphen=:=No}');
Expect(1, 44, '\p{Hyphen=no}', "");
Expect(0, 44, '\p{^Hyphen=no}', "");
Expect(0, 44, '\P{Hyphen=no}', "");
Expect(1, 44, '\P{^Hyphen=no}', "");
Expect(0, 45, '\p{Hyphen=no}', "");
Expect(1, 45, '\p{^Hyphen=no}', "");
Expect(1, 45, '\P{Hyphen=no}', "");
Expect(0, 45, '\P{^Hyphen=no}', "");
Expect(1, 44, '\p{Hyphen=		NO}', "");
Expect(0, 44, '\p{^Hyphen=		NO}', "");
Expect(0, 44, '\P{Hyphen=		NO}', "");
Expect(1, 44, '\P{^Hyphen=		NO}', "");
Expect(0, 45, '\p{Hyphen=		NO}', "");
Expect(1, 45, '\p{^Hyphen=		NO}', "");
Expect(1, 45, '\P{Hyphen=		NO}', "");
Expect(0, 45, '\P{^Hyphen=		NO}', "");
Error('\p{Is_Hyphen=/a/__N}');
Error('\P{Is_Hyphen=/a/__N}');
Expect(1, 44, '\p{Is_Hyphen=n}', "");
Expect(0, 44, '\p{^Is_Hyphen=n}', "");
Expect(0, 44, '\P{Is_Hyphen=n}', "");
Expect(1, 44, '\P{^Is_Hyphen=n}', "");
Expect(0, 45, '\p{Is_Hyphen=n}', "");
Expect(1, 45, '\p{^Is_Hyphen=n}', "");
Expect(1, 45, '\P{Is_Hyphen=n}', "");
Expect(0, 45, '\P{^Is_Hyphen=n}', "");
Expect(1, 44, '\p{Is_Hyphen:    N}', "");
Expect(0, 44, '\p{^Is_Hyphen:    N}', "");
Expect(0, 44, '\P{Is_Hyphen:    N}', "");
Expect(1, 44, '\P{^Is_Hyphen:    N}', "");
Expect(0, 45, '\p{Is_Hyphen:    N}', "");
Expect(1, 45, '\p{^Is_Hyphen:    N}', "");
Expect(1, 45, '\P{Is_Hyphen:    N}', "");
Expect(0, 45, '\P{^Is_Hyphen:    N}', "");
Error('\p{Hyphen=:=-F}');
Error('\P{Hyphen=:=-F}');
Expect(1, 44, '\p{Hyphen=f}', "");
Expect(0, 44, '\p{^Hyphen=f}', "");
Expect(0, 44, '\P{Hyphen=f}', "");
Expect(1, 44, '\P{^Hyphen=f}', "");
Expect(0, 45, '\p{Hyphen=f}', "");
Expect(1, 45, '\p{^Hyphen=f}', "");
Expect(1, 45, '\P{Hyphen=f}', "");
Expect(0, 45, '\P{^Hyphen=f}', "");
Expect(1, 44, '\p{Hyphen=F}', "");
Expect(0, 44, '\p{^Hyphen=F}', "");
Expect(0, 44, '\P{Hyphen=F}', "");
Expect(1, 44, '\P{^Hyphen=F}', "");
Expect(0, 45, '\p{Hyphen=F}', "");
Expect(1, 45, '\p{^Hyphen=F}', "");
Expect(1, 45, '\P{Hyphen=F}', "");
Expect(0, 45, '\P{^Hyphen=F}', "");
Error('\p{Is_Hyphen: _/a/False}');
Error('\P{Is_Hyphen: _/a/False}');
Expect(1, 44, '\p{Is_Hyphen=false}', "");
Expect(0, 44, '\p{^Is_Hyphen=false}', "");
Expect(0, 44, '\P{Is_Hyphen=false}', "");
Expect(1, 44, '\P{^Is_Hyphen=false}', "");
Expect(0, 45, '\p{Is_Hyphen=false}', "");
Expect(1, 45, '\p{^Is_Hyphen=false}', "");
Expect(1, 45, '\P{Is_Hyphen=false}', "");
Expect(0, 45, '\P{^Is_Hyphen=false}', "");
Expect(1, 44, '\p{Is_Hyphen=FALSE}', "");
Expect(0, 44, '\p{^Is_Hyphen=FALSE}', "");
Expect(0, 44, '\P{Is_Hyphen=FALSE}', "");
Expect(1, 44, '\P{^Is_Hyphen=FALSE}', "");
Expect(0, 45, '\p{Is_Hyphen=FALSE}', "");
Expect(1, 45, '\p{^Is_Hyphen=FALSE}', "");
Expect(1, 45, '\P{Is_Hyphen=FALSE}', "");
Expect(0, 45, '\P{^Is_Hyphen=FALSE}', "");
Error('\p{White_Space=:=-_Yes}');
Error('\P{White_Space=:=-_Yes}');
Expect(1, 13, '\p{White_Space=yes}', "");
Expect(0, 13, '\p{^White_Space=yes}', "");
Expect(0, 13, '\P{White_Space=yes}', "");
Expect(1, 13, '\P{^White_Space=yes}', "");
Expect(0, 8, '\p{White_Space=yes}', "");
Expect(1, 8, '\p{^White_Space=yes}', "");
Expect(1, 8, '\P{White_Space=yes}', "");
Expect(0, 8, '\P{^White_Space=yes}', "");
Expect(1, 13, '\p{White_Space=-	YES}', "");
Expect(0, 13, '\p{^White_Space=-	YES}', "");
Expect(0, 13, '\P{White_Space=-	YES}', "");
Expect(1, 13, '\P{^White_Space=-	YES}', "");
Expect(0, 8, '\p{White_Space=-	YES}', "");
Expect(1, 8, '\p{^White_Space=-	YES}', "");
Expect(1, 8, '\P{White_Space=-	YES}', "");
Expect(0, 8, '\P{^White_Space=-	YES}', "");
Error('\p{WSpace= Y/a/}');
Error('\P{WSpace= Y/a/}');
Expect(1, 13, '\p{WSpace:	y}', "");
Expect(0, 13, '\p{^WSpace:	y}', "");
Expect(0, 13, '\P{WSpace:	y}', "");
Expect(1, 13, '\P{^WSpace:	y}', "");
Expect(0, 8, '\p{WSpace:	y}', "");
Expect(1, 8, '\p{^WSpace:	y}', "");
Expect(1, 8, '\P{WSpace:	y}', "");
Expect(0, 8, '\P{^WSpace:	y}', "");
Expect(1, 13, '\p{WSpace:		Y}', "");
Expect(0, 13, '\p{^WSpace:		Y}', "");
Expect(0, 13, '\P{WSpace:		Y}', "");
Expect(1, 13, '\P{^WSpace:		Y}', "");
Expect(0, 8, '\p{WSpace:		Y}', "");
Expect(1, 8, '\p{^WSpace:		Y}', "");
Expect(1, 8, '\P{WSpace:		Y}', "");
Expect(0, 8, '\P{^WSpace:		Y}', "");
Error('\p{Space= T/a/}');
Error('\P{Space= T/a/}');
Expect(1, 13, '\p{Space=t}', "");
Expect(0, 13, '\p{^Space=t}', "");
Expect(0, 13, '\P{Space=t}', "");
Expect(1, 13, '\P{^Space=t}', "");
Expect(0, 8, '\p{Space=t}', "");
Expect(1, 8, '\p{^Space=t}', "");
Expect(1, 8, '\P{Space=t}', "");
Expect(0, 8, '\P{^Space=t}', "");
Expect(1, 13, '\p{Space= _T}', "");
Expect(0, 13, '\p{^Space= _T}', "");
Expect(0, 13, '\P{Space= _T}', "");
Expect(1, 13, '\P{^Space= _T}', "");
Expect(0, 8, '\p{Space= _T}', "");
Expect(1, 8, '\p{^Space= _T}', "");
Expect(1, 8, '\P{Space= _T}', "");
Expect(0, 8, '\P{^Space= _T}', "");
Error('\p{Is_White_Space:   :=		TRUE}');
Error('\P{Is_White_Space:   :=		TRUE}');
Expect(1, 13, '\p{Is_White_Space=true}', "");
Expect(0, 13, '\p{^Is_White_Space=true}', "");
Expect(0, 13, '\P{Is_White_Space=true}', "");
Expect(1, 13, '\P{^Is_White_Space=true}', "");
Expect(0, 8, '\p{Is_White_Space=true}', "");
Expect(1, 8, '\p{^Is_White_Space=true}', "");
Expect(1, 8, '\P{Is_White_Space=true}', "");
Expect(0, 8, '\P{^Is_White_Space=true}', "");
Expect(1, 13, '\p{Is_White_Space=_ true}', "");
Expect(0, 13, '\p{^Is_White_Space=_ true}', "");
Expect(0, 13, '\P{Is_White_Space=_ true}', "");
Expect(1, 13, '\P{^Is_White_Space=_ true}', "");
Expect(0, 8, '\p{Is_White_Space=_ true}', "");
Expect(1, 8, '\p{^Is_White_Space=_ true}', "");
Expect(1, 8, '\P{Is_White_Space=_ true}', "");
Expect(0, 8, '\P{^Is_White_Space=_ true}', "");
Error('\p{Is_WSpace=_/a/YES}');
Error('\P{Is_WSpace=_/a/YES}');
Expect(1, 13, '\p{Is_WSpace=yes}', "");
Expect(0, 13, '\p{^Is_WSpace=yes}', "");
Expect(0, 13, '\P{Is_WSpace=yes}', "");
Expect(1, 13, '\P{^Is_WSpace=yes}', "");
Expect(0, 8, '\p{Is_WSpace=yes}', "");
Expect(1, 8, '\p{^Is_WSpace=yes}', "");
Expect(1, 8, '\P{Is_WSpace=yes}', "");
Expect(0, 8, '\P{^Is_WSpace=yes}', "");
Error('\p{Is_Space=/a/	-Y}');
Error('\P{Is_Space=/a/	-Y}');
Expect(1, 13, '\p{Is_Space=y}', "");
Expect(0, 13, '\p{^Is_Space=y}', "");
Expect(0, 13, '\P{Is_Space=y}', "");
Expect(1, 13, '\P{^Is_Space=y}', "");
Expect(0, 8, '\p{Is_Space=y}', "");
Expect(1, 8, '\p{^Is_Space=y}', "");
Expect(1, 8, '\P{Is_Space=y}', "");
Expect(0, 8, '\P{^Is_Space=y}', "");
Expect(1, 13, '\p{Is_Space=_	Y}', "");
Expect(0, 13, '\p{^Is_Space=_	Y}', "");
Expect(0, 13, '\P{Is_Space=_	Y}', "");
Expect(1, 13, '\P{^Is_Space=_	Y}', "");
Expect(0, 8, '\p{Is_Space=_	Y}', "");
Expect(1, 8, '\p{^Is_Space=_	Y}', "");
Expect(1, 8, '\P{Is_Space=_	Y}', "");
Expect(0, 8, '\P{^Is_Space=_	Y}', "");
Error('\p{White_Space: _NO:=}');
Error('\P{White_Space: _NO:=}');
Expect(1, 8, '\p{White_Space: no}', "");
Expect(0, 8, '\p{^White_Space: no}', "");
Expect(0, 8, '\P{White_Space: no}', "");
Expect(1, 8, '\P{^White_Space: no}', "");
Expect(0, 13, '\p{White_Space: no}', "");
Expect(1, 13, '\p{^White_Space: no}', "");
Expect(1, 13, '\P{White_Space: no}', "");
Expect(0, 13, '\P{^White_Space: no}', "");
Expect(1, 8, '\p{White_Space=No}', "");
Expect(0, 8, '\p{^White_Space=No}', "");
Expect(0, 8, '\P{White_Space=No}', "");
Expect(1, 8, '\P{^White_Space=No}', "");
Expect(0, 13, '\p{White_Space=No}', "");
Expect(1, 13, '\p{^White_Space=No}', "");
Expect(1, 13, '\P{White_Space=No}', "");
Expect(0, 13, '\P{^White_Space=No}', "");
Error('\p{WSpace=/a/	_n}');
Error('\P{WSpace=/a/	_n}');
Expect(1, 8, '\p{WSpace=n}', "");
Expect(0, 8, '\p{^WSpace=n}', "");
Expect(0, 8, '\P{WSpace=n}', "");
Expect(1, 8, '\P{^WSpace=n}', "");
Expect(0, 13, '\p{WSpace=n}', "");
Expect(1, 13, '\p{^WSpace=n}', "");
Expect(1, 13, '\P{WSpace=n}', "");
Expect(0, 13, '\P{^WSpace=n}', "");
Expect(1, 8, '\p{WSpace=_-N}', "");
Expect(0, 8, '\p{^WSpace=_-N}', "");
Expect(0, 8, '\P{WSpace=_-N}', "");
Expect(1, 8, '\P{^WSpace=_-N}', "");
Expect(0, 13, '\p{WSpace=_-N}', "");
Expect(1, 13, '\p{^WSpace=_-N}', "");
Expect(1, 13, '\P{WSpace=_-N}', "");
Expect(0, 13, '\P{^WSpace=_-N}', "");
Error('\p{Space=/a/F}');
Error('\P{Space=/a/F}');
Expect(1, 8, '\p{Space=f}', "");
Expect(0, 8, '\p{^Space=f}', "");
Expect(0, 8, '\P{Space=f}', "");
Expect(1, 8, '\P{^Space=f}', "");
Expect(0, 13, '\p{Space=f}', "");
Expect(1, 13, '\p{^Space=f}', "");
Expect(1, 13, '\P{Space=f}', "");
Expect(0, 13, '\P{^Space=f}', "");
Expect(1, 8, '\p{Space=-	F}', "");
Expect(0, 8, '\p{^Space=-	F}', "");
Expect(0, 8, '\P{Space=-	F}', "");
Expect(1, 8, '\P{^Space=-	F}', "");
Expect(0, 13, '\p{Space=-	F}', "");
Expect(1, 13, '\p{^Space=-	F}', "");
Expect(1, 13, '\P{Space=-	F}', "");
Expect(0, 13, '\P{^Space=-	F}', "");
Error('\p{Is_White_Space=	-False/a/}');
Error('\P{Is_White_Space=	-False/a/}');
Expect(1, 8, '\p{Is_White_Space=false}', "");
Expect(0, 8, '\p{^Is_White_Space=false}', "");
Expect(0, 8, '\P{Is_White_Space=false}', "");
Expect(1, 8, '\P{^Is_White_Space=false}', "");
Expect(0, 13, '\p{Is_White_Space=false}', "");
Expect(1, 13, '\p{^Is_White_Space=false}', "");
Expect(1, 13, '\P{Is_White_Space=false}', "");
Expect(0, 13, '\P{^Is_White_Space=false}', "");
Expect(1, 8, '\p{Is_White_Space=_-FALSE}', "");
Expect(0, 8, '\p{^Is_White_Space=_-FALSE}', "");
Expect(0, 8, '\P{Is_White_Space=_-FALSE}', "");
Expect(1, 8, '\P{^Is_White_Space=_-FALSE}', "");
Expect(0, 13, '\p{Is_White_Space=_-FALSE}', "");
Expect(1, 13, '\p{^Is_White_Space=_-FALSE}', "");
Expect(1, 13, '\P{Is_White_Space=_-FALSE}', "");
Expect(0, 13, '\P{^Is_White_Space=_-FALSE}', "");
Error('\p{Is_WSpace=--no:=}');
Error('\P{Is_WSpace=--no:=}');
Expect(1, 8, '\p{Is_WSpace=no}', "");
Expect(0, 8, '\p{^Is_WSpace=no}', "");
Expect(0, 8, '\P{Is_WSpace=no}', "");
Expect(1, 8, '\P{^Is_WSpace=no}', "");
Expect(0, 13, '\p{Is_WSpace=no}', "");
Expect(1, 13, '\p{^Is_WSpace=no}', "");
Expect(1, 13, '\P{Is_WSpace=no}', "");
Expect(0, 13, '\P{^Is_WSpace=no}', "");
Expect(1, 8, '\p{Is_WSpace=-	No}', "");
Expect(0, 8, '\p{^Is_WSpace=-	No}', "");
Expect(0, 8, '\P{Is_WSpace=-	No}', "");
Expect(1, 8, '\P{^Is_WSpace=-	No}', "");
Expect(0, 13, '\p{Is_WSpace=-	No}', "");
Expect(1, 13, '\p{^Is_WSpace=-	No}', "");
Expect(1, 13, '\P{Is_WSpace=-	No}', "");
Expect(0, 13, '\P{^Is_WSpace=-	No}', "");
Error('\p{Is_Space=_N/a/}');
Error('\P{Is_Space=_N/a/}');
Expect(1, 8, '\p{Is_Space=n}', "");
Expect(0, 8, '\p{^Is_Space=n}', "");
Expect(0, 8, '\P{Is_Space=n}', "");
Expect(1, 8, '\P{^Is_Space=n}', "");
Expect(0, 13, '\p{Is_Space=n}', "");
Expect(1, 13, '\p{^Is_Space=n}', "");
Expect(1, 13, '\P{Is_Space=n}', "");
Expect(0, 13, '\P{^Is_Space=n}', "");
Expect(1, 8, '\p{Is_Space=  N}', "");
Expect(0, 8, '\p{^Is_Space=  N}', "");
Expect(0, 8, '\P{Is_Space=  N}', "");
Expect(1, 8, '\P{^Is_Space=  N}', "");
Expect(0, 13, '\p{Is_Space=  N}', "");
Expect(1, 13, '\p{^Is_Space=  N}', "");
Expect(1, 13, '\P{Is_Space=  N}', "");
Expect(0, 13, '\P{^Is_Space=  N}', "");
Error('\p{XID_Continue=-Yes:=}');
Error('\P{XID_Continue=-Yes:=}');
Expect(1, 57, '\p{XID_Continue:   yes}', "");
Expect(0, 57, '\p{^XID_Continue:   yes}', "");
Expect(0, 57, '\P{XID_Continue:   yes}', "");
Expect(1, 57, '\P{^XID_Continue:   yes}', "");
Expect(0, 47, '\p{XID_Continue:   yes}', "");
Expect(1, 47, '\p{^XID_Continue:   yes}', "");
Expect(1, 47, '\P{XID_Continue:   yes}', "");
Expect(0, 47, '\P{^XID_Continue:   yes}', "");
Expect(1, 57, '\p{XID_Continue:	 Yes}', "");
Expect(0, 57, '\p{^XID_Continue:	 Yes}', "");
Expect(0, 57, '\P{XID_Continue:	 Yes}', "");
Expect(1, 57, '\P{^XID_Continue:	 Yes}', "");
Expect(0, 47, '\p{XID_Continue:	 Yes}', "");
Expect(1, 47, '\p{^XID_Continue:	 Yes}', "");
Expect(1, 47, '\P{XID_Continue:	 Yes}', "");
Expect(0, 47, '\P{^XID_Continue:	 Yes}', "");
Error('\p{XIDC=	:=y}');
Error('\P{XIDC=	:=y}');
Expect(1, 57, '\p{XIDC=y}', "");
Expect(0, 57, '\p{^XIDC=y}', "");
Expect(0, 57, '\P{XIDC=y}', "");
Expect(1, 57, '\P{^XIDC=y}', "");
Expect(0, 47, '\p{XIDC=y}', "");
Expect(1, 47, '\p{^XIDC=y}', "");
Expect(1, 47, '\P{XIDC=y}', "");
Expect(0, 47, '\P{^XIDC=y}', "");
Expect(1, 57, '\p{XIDC= _y}', "");
Expect(0, 57, '\p{^XIDC= _y}', "");
Expect(0, 57, '\P{XIDC= _y}', "");
Expect(1, 57, '\P{^XIDC= _y}', "");
Expect(0, 47, '\p{XIDC= _y}', "");
Expect(1, 47, '\p{^XIDC= _y}', "");
Expect(1, 47, '\P{XIDC= _y}', "");
Expect(0, 47, '\P{^XIDC= _y}', "");
Error('\p{Is_XID_Continue=:=	-T}');
Error('\P{Is_XID_Continue=:=	-T}');
Expect(1, 57, '\p{Is_XID_Continue=t}', "");
Expect(0, 57, '\p{^Is_XID_Continue=t}', "");
Expect(0, 57, '\P{Is_XID_Continue=t}', "");
Expect(1, 57, '\P{^Is_XID_Continue=t}', "");
Expect(0, 47, '\p{Is_XID_Continue=t}', "");
Expect(1, 47, '\p{^Is_XID_Continue=t}', "");
Expect(1, 47, '\P{Is_XID_Continue=t}', "");
Expect(0, 47, '\P{^Is_XID_Continue=t}', "");
Expect(1, 57, '\p{Is_XID_Continue=-T}', "");
Expect(0, 57, '\p{^Is_XID_Continue=-T}', "");
Expect(0, 57, '\P{Is_XID_Continue=-T}', "");
Expect(1, 57, '\P{^Is_XID_Continue=-T}', "");
Expect(0, 47, '\p{Is_XID_Continue=-T}', "");
Expect(1, 47, '\p{^Is_XID_Continue=-T}', "");
Expect(1, 47, '\P{Is_XID_Continue=-T}', "");
Expect(0, 47, '\P{^Is_XID_Continue=-T}', "");
Error('\p{Is_XIDC=_/a/True}');
Error('\P{Is_XIDC=_/a/True}');
Expect(1, 57, '\p{Is_XIDC=true}', "");
Expect(0, 57, '\p{^Is_XIDC=true}', "");
Expect(0, 57, '\P{Is_XIDC=true}', "");
Expect(1, 57, '\P{^Is_XIDC=true}', "");
Expect(0, 47, '\p{Is_XIDC=true}', "");
Expect(1, 47, '\p{^Is_XIDC=true}', "");
Expect(1, 47, '\P{Is_XIDC=true}', "");
Expect(0, 47, '\P{^Is_XIDC=true}', "");
Expect(1, 57, '\p{Is_XIDC=_True}', "");
Expect(0, 57, '\p{^Is_XIDC=_True}', "");
Expect(0, 57, '\P{Is_XIDC=_True}', "");
Expect(1, 57, '\P{^Is_XIDC=_True}', "");
Expect(0, 47, '\p{Is_XIDC=_True}', "");
Expect(1, 47, '\p{^Is_XIDC=_True}', "");
Expect(1, 47, '\P{Is_XIDC=_True}', "");
Expect(0, 47, '\P{^Is_XIDC=_True}', "");
Error('\p{XID_Continue=_	No:=}');
Error('\P{XID_Continue=_	No:=}');
Expect(1, 47, '\p{XID_Continue=no}', "");
Expect(0, 47, '\p{^XID_Continue=no}', "");
Expect(0, 47, '\P{XID_Continue=no}', "");
Expect(1, 47, '\P{^XID_Continue=no}', "");
Expect(0, 57, '\p{XID_Continue=no}', "");
Expect(1, 57, '\p{^XID_Continue=no}', "");
Expect(1, 57, '\P{XID_Continue=no}', "");
Expect(0, 57, '\P{^XID_Continue=no}', "");
Expect(1, 47, '\p{XID_Continue:   	-no}', "");
Expect(0, 47, '\p{^XID_Continue:   	-no}', "");
Expect(0, 47, '\P{XID_Continue:   	-no}', "");
Expect(1, 47, '\P{^XID_Continue:   	-no}', "");
Expect(0, 57, '\p{XID_Continue:   	-no}', "");
Expect(1, 57, '\p{^XID_Continue:   	-no}', "");
Expect(1, 57, '\P{XID_Continue:   	-no}', "");
Expect(0, 57, '\P{^XID_Continue:   	-no}', "");
Error('\p{XIDC:/a/_N}');
Error('\P{XIDC:/a/_N}');
Expect(1, 47, '\p{XIDC=n}', "");
Expect(0, 47, '\p{^XIDC=n}', "");
Expect(0, 47, '\P{XIDC=n}', "");
Expect(1, 47, '\P{^XIDC=n}', "");
Expect(0, 57, '\p{XIDC=n}', "");
Expect(1, 57, '\p{^XIDC=n}', "");
Expect(1, 57, '\P{XIDC=n}', "");
Expect(0, 57, '\P{^XIDC=n}', "");
Expect(1, 47, '\p{XIDC=_ N}', "");
Expect(0, 47, '\p{^XIDC=_ N}', "");
Expect(0, 47, '\P{XIDC=_ N}', "");
Expect(1, 47, '\P{^XIDC=_ N}', "");
Expect(0, 57, '\p{XIDC=_ N}', "");
Expect(1, 57, '\p{^XIDC=_ N}', "");
Expect(1, 57, '\P{XIDC=_ N}', "");
Expect(0, 57, '\P{^XIDC=_ N}', "");
Error('\p{Is_XID_Continue=-/a/F}');
Error('\P{Is_XID_Continue=-/a/F}');
Expect(1, 47, '\p{Is_XID_Continue=f}', "");
Expect(0, 47, '\p{^Is_XID_Continue=f}', "");
Expect(0, 47, '\P{Is_XID_Continue=f}', "");
Expect(1, 47, '\P{^Is_XID_Continue=f}', "");
Expect(0, 57, '\p{Is_XID_Continue=f}', "");
Expect(1, 57, '\p{^Is_XID_Continue=f}', "");
Expect(1, 57, '\P{Is_XID_Continue=f}', "");
Expect(0, 57, '\P{^Is_XID_Continue=f}', "");
Expect(1, 47, '\p{Is_XID_Continue:   	 F}', "");
Expect(0, 47, '\p{^Is_XID_Continue:   	 F}', "");
Expect(0, 47, '\P{Is_XID_Continue:   	 F}', "");
Expect(1, 47, '\P{^Is_XID_Continue:   	 F}', "");
Expect(0, 57, '\p{Is_XID_Continue:   	 F}', "");
Expect(1, 57, '\p{^Is_XID_Continue:   	 F}', "");
Expect(1, 57, '\P{Is_XID_Continue:   	 F}', "");
Expect(0, 57, '\P{^Is_XID_Continue:   	 F}', "");
Error('\p{Is_XIDC=-/a/FALSE}');
Error('\P{Is_XIDC=-/a/FALSE}');
Expect(1, 47, '\p{Is_XIDC=false}', "");
Expect(0, 47, '\p{^Is_XIDC=false}', "");
Expect(0, 47, '\P{Is_XIDC=false}', "");
Expect(1, 47, '\P{^Is_XIDC=false}', "");
Expect(0, 57, '\p{Is_XIDC=false}', "");
Expect(1, 57, '\p{^Is_XIDC=false}', "");
Expect(1, 57, '\P{Is_XIDC=false}', "");
Expect(0, 57, '\P{^Is_XIDC=false}', "");
Expect(1, 47, '\p{Is_XIDC:	-	FALSE}', "");
Expect(0, 47, '\p{^Is_XIDC:	-	FALSE}', "");
Expect(0, 47, '\P{Is_XIDC:	-	FALSE}', "");
Expect(1, 47, '\P{^Is_XIDC:	-	FALSE}', "");
Expect(0, 57, '\p{Is_XIDC:	-	FALSE}', "");
Expect(1, 57, '\p{^Is_XIDC:	-	FALSE}', "");
Expect(1, 57, '\P{Is_XIDC:	-	FALSE}', "");
Expect(0, 57, '\P{^Is_XIDC:	-	FALSE}', "");
Error('\p{XID_Start= :=Yes}');
Error('\P{XID_Start= :=Yes}');
Expect(1, 90, '\p{XID_Start=yes}', "");
Expect(0, 90, '\p{^XID_Start=yes}', "");
Expect(0, 90, '\P{XID_Start=yes}', "");
Expect(1, 90, '\P{^XID_Start=yes}', "");
Expect(0, 64, '\p{XID_Start=yes}', "");
Expect(1, 64, '\p{^XID_Start=yes}', "");
Expect(1, 64, '\P{XID_Start=yes}', "");
Expect(0, 64, '\P{^XID_Start=yes}', "");
Expect(1, 90, '\p{XID_Start:   --Yes}', "");
Expect(0, 90, '\p{^XID_Start:   --Yes}', "");
Expect(0, 90, '\P{XID_Start:   --Yes}', "");
Expect(1, 90, '\P{^XID_Start:   --Yes}', "");
Expect(0, 64, '\p{XID_Start:   --Yes}', "");
Expect(1, 64, '\p{^XID_Start:   --Yes}', "");
Expect(1, 64, '\P{XID_Start:   --Yes}', "");
Expect(0, 64, '\P{^XID_Start:   --Yes}', "");
Error('\p{XIDS=	-Y/a/}');
Error('\P{XIDS=	-Y/a/}');
Expect(1, 90, '\p{XIDS=y}', "");
Expect(0, 90, '\p{^XIDS=y}', "");
Expect(0, 90, '\P{XIDS=y}', "");
Expect(1, 90, '\P{^XIDS=y}', "");
Expect(0, 64, '\p{XIDS=y}', "");
Expect(1, 64, '\p{^XIDS=y}', "");
Expect(1, 64, '\P{XIDS=y}', "");
Expect(0, 64, '\P{^XIDS=y}', "");
Expect(1, 90, '\p{XIDS=_-y}', "");
Expect(0, 90, '\p{^XIDS=_-y}', "");
Expect(0, 90, '\P{XIDS=_-y}', "");
Expect(1, 90, '\P{^XIDS=_-y}', "");
Expect(0, 64, '\p{XIDS=_-y}', "");
Expect(1, 64, '\p{^XIDS=_-y}', "");
Expect(1, 64, '\P{XIDS=_-y}', "");
Expect(0, 64, '\P{^XIDS=_-y}', "");
Error('\p{Is_XID_Start=		T:=}');
Error('\P{Is_XID_Start=		T:=}');
Expect(1, 90, '\p{Is_XID_Start=t}', "");
Expect(0, 90, '\p{^Is_XID_Start=t}', "");
Expect(0, 90, '\P{Is_XID_Start=t}', "");
Expect(1, 90, '\P{^Is_XID_Start=t}', "");
Expect(0, 64, '\p{Is_XID_Start=t}', "");
Expect(1, 64, '\p{^Is_XID_Start=t}', "");
Expect(1, 64, '\P{Is_XID_Start=t}', "");
Expect(0, 64, '\P{^Is_XID_Start=t}', "");
Expect(1, 90, '\p{Is_XID_Start=_t}', "");
Expect(0, 90, '\p{^Is_XID_Start=_t}', "");
Expect(0, 90, '\P{Is_XID_Start=_t}', "");
Expect(1, 90, '\P{^Is_XID_Start=_t}', "");
Expect(0, 64, '\p{Is_XID_Start=_t}', "");
Expect(1, 64, '\p{^Is_XID_Start=_t}', "");
Expect(1, 64, '\P{Is_XID_Start=_t}', "");
Expect(0, 64, '\P{^Is_XID_Start=_t}', "");
Error('\p{Is_XIDS=_:=TRUE}');
Error('\P{Is_XIDS=_:=TRUE}');
Expect(1, 90, '\p{Is_XIDS=true}', "");
Expect(0, 90, '\p{^Is_XIDS=true}', "");
Expect(0, 90, '\P{Is_XIDS=true}', "");
Expect(1, 90, '\P{^Is_XIDS=true}', "");
Expect(0, 64, '\p{Is_XIDS=true}', "");
Expect(1, 64, '\p{^Is_XIDS=true}', "");
Expect(1, 64, '\P{Is_XIDS=true}', "");
Expect(0, 64, '\P{^Is_XIDS=true}', "");
Expect(1, 90, '\p{Is_XIDS= True}', "");
Expect(0, 90, '\p{^Is_XIDS= True}', "");
Expect(0, 90, '\P{Is_XIDS= True}', "");
Expect(1, 90, '\P{^Is_XIDS= True}', "");
Expect(0, 64, '\p{Is_XIDS= True}', "");
Expect(1, 64, '\p{^Is_XIDS= True}', "");
Expect(1, 64, '\P{Is_XIDS= True}', "");
Expect(0, 64, '\P{^Is_XIDS= True}', "");
Error('\p{XID_Start=:=No}');
Error('\P{XID_Start=:=No}');
Expect(1, 64, '\p{XID_Start=no}', "");
Expect(0, 64, '\p{^XID_Start=no}', "");
Expect(0, 64, '\P{XID_Start=no}', "");
Expect(1, 64, '\P{^XID_Start=no}', "");
Expect(0, 90, '\p{XID_Start=no}', "");
Expect(1, 90, '\p{^XID_Start=no}', "");
Expect(1, 90, '\P{XID_Start=no}', "");
Expect(0, 90, '\P{^XID_Start=no}', "");
Expect(1, 64, '\p{XID_Start=	-No}', "");
Expect(0, 64, '\p{^XID_Start=	-No}', "");
Expect(0, 64, '\P{XID_Start=	-No}', "");
Expect(1, 64, '\P{^XID_Start=	-No}', "");
Expect(0, 90, '\p{XID_Start=	-No}', "");
Expect(1, 90, '\p{^XID_Start=	-No}', "");
Expect(1, 90, '\P{XID_Start=	-No}', "");
Expect(0, 90, '\P{^XID_Start=	-No}', "");
Error('\p{XIDS:   		N:=}');
Error('\P{XIDS:   		N:=}');
Expect(1, 64, '\p{XIDS=n}', "");
Expect(0, 64, '\p{^XIDS=n}', "");
Expect(0, 64, '\P{XIDS=n}', "");
Expect(1, 64, '\P{^XIDS=n}', "");
Expect(0, 90, '\p{XIDS=n}', "");
Expect(1, 90, '\p{^XIDS=n}', "");
Expect(1, 90, '\P{XIDS=n}', "");
Expect(0, 90, '\P{^XIDS=n}', "");
Expect(1, 64, '\p{XIDS=- n}', "");
Expect(0, 64, '\p{^XIDS=- n}', "");
Expect(0, 64, '\P{XIDS=- n}', "");
Expect(1, 64, '\P{^XIDS=- n}', "");
Expect(0, 90, '\p{XIDS=- n}', "");
Expect(1, 90, '\p{^XIDS=- n}', "");
Expect(1, 90, '\P{XIDS=- n}', "");
Expect(0, 90, '\P{^XIDS=- n}', "");
Error('\p{Is_XID_Start=_-f:=}');
Error('\P{Is_XID_Start=_-f:=}');
Expect(1, 64, '\p{Is_XID_Start=f}', "");
Expect(0, 64, '\p{^Is_XID_Start=f}', "");
Expect(0, 64, '\P{Is_XID_Start=f}', "");
Expect(1, 64, '\P{^Is_XID_Start=f}', "");
Expect(0, 90, '\p{Is_XID_Start=f}', "");
Expect(1, 90, '\p{^Is_XID_Start=f}', "");
Expect(1, 90, '\P{Is_XID_Start=f}', "");
Expect(0, 90, '\P{^Is_XID_Start=f}', "");
Expect(1, 64, '\p{Is_XID_Start: F}', "");
Expect(0, 64, '\p{^Is_XID_Start: F}', "");
Expect(0, 64, '\P{Is_XID_Start: F}', "");
Expect(1, 64, '\P{^Is_XID_Start: F}', "");
Expect(0, 90, '\p{Is_XID_Start: F}', "");
Expect(1, 90, '\p{^Is_XID_Start: F}', "");
Expect(1, 90, '\P{Is_XID_Start: F}', "");
Expect(0, 90, '\P{^Is_XID_Start: F}', "");
Error('\p{Is_XIDS: :=_FALSE}');
Error('\P{Is_XIDS: :=_FALSE}');
Expect(1, 64, '\p{Is_XIDS=false}', "");
Expect(0, 64, '\p{^Is_XIDS=false}', "");
Expect(0, 64, '\P{Is_XIDS=false}', "");
Expect(1, 64, '\P{^Is_XIDS=false}', "");
Expect(0, 90, '\p{Is_XIDS=false}', "");
Expect(1, 90, '\p{^Is_XIDS=false}', "");
Expect(1, 90, '\P{Is_XIDS=false}', "");
Expect(0, 90, '\P{^Is_XIDS=false}', "");
Expect(1, 64, '\p{Is_XIDS=	_FALSE}', "");
Expect(0, 64, '\p{^Is_XIDS=	_FALSE}', "");
Expect(0, 64, '\P{Is_XIDS=	_FALSE}', "");
Expect(1, 64, '\P{^Is_XIDS=	_FALSE}', "");
Expect(0, 90, '\p{Is_XIDS=	_FALSE}', "");
Expect(1, 90, '\p{^Is_XIDS=	_FALSE}', "");
Expect(1, 90, '\P{Is_XIDS=	_FALSE}', "");
Expect(0, 90, '\P{^Is_XIDS=	_FALSE}', "");
Error('\p{Script=/a/-_New Tai_Lue}');
Error('\P{Script=/a/-_New Tai_Lue}');
Expect(1, 6571, '\p{Script=newtailue}', "");
Expect(0, 6571, '\p{^Script=newtailue}', "");
Expect(0, 6571, '\P{Script=newtailue}', "");
Expect(1, 6571, '\P{^Script=newtailue}', "");
Expect(0, 6527, '\p{Script=newtailue}', "");
Expect(1, 6527, '\p{^Script=newtailue}', "");
Expect(1, 6527, '\P{Script=newtailue}', "");
Expect(0, 6527, '\P{^Script=newtailue}', "");
Expect(1, 6571, '\p{Script=		new_Tai_LUE}', "");
Expect(0, 6571, '\p{^Script=		new_Tai_LUE}', "");
Expect(0, 6571, '\P{Script=		new_Tai_LUE}', "");
Expect(1, 6571, '\P{^Script=		new_Tai_LUE}', "");
Expect(0, 6527, '\p{Script=		new_Tai_LUE}', "");
Expect(1, 6527, '\p{^Script=		new_Tai_LUE}', "");
Expect(1, 6527, '\P{Script=		new_Tai_LUE}', "");
Expect(0, 6527, '\P{^Script=		new_Tai_LUE}', "");
Error('\p{Sc=-/a/Talu}');
Error('\P{Sc=-/a/Talu}');
Expect(1, 6571, '\p{Sc=talu}', "");
Expect(0, 6571, '\p{^Sc=talu}', "");
Expect(0, 6571, '\P{Sc=talu}', "");
Expect(1, 6571, '\P{^Sc=talu}', "");
Expect(0, 6527, '\p{Sc=talu}', "");
Expect(1, 6527, '\p{^Sc=talu}', "");
Expect(1, 6527, '\P{Sc=talu}', "");
Expect(0, 6527, '\P{^Sc=talu}', "");
Expect(1, 6571, '\p{Sc= Talu}', "");
Expect(0, 6571, '\p{^Sc= Talu}', "");
Expect(0, 6571, '\P{Sc= Talu}', "");
Expect(1, 6571, '\P{^Sc= Talu}', "");
Expect(0, 6527, '\p{Sc= Talu}', "");
Expect(1, 6527, '\p{^Sc= Talu}', "");
Expect(1, 6527, '\P{Sc= Talu}', "");
Expect(0, 6527, '\P{^Sc= Talu}', "");
Error('\p{Is_Script=	_New-tai	Lue:=}');
Error('\P{Is_Script=	_New-tai	Lue:=}');
Expect(1, 6571, '\p{Is_Script=newtailue}', "");
Expect(0, 6571, '\p{^Is_Script=newtailue}', "");
Expect(0, 6571, '\P{Is_Script=newtailue}', "");
Expect(1, 6571, '\P{^Is_Script=newtailue}', "");
Expect(0, 6527, '\p{Is_Script=newtailue}', "");
Expect(1, 6527, '\p{^Is_Script=newtailue}', "");
Expect(1, 6527, '\P{Is_Script=newtailue}', "");
Expect(0, 6527, '\P{^Is_Script=newtailue}', "");
Expect(1, 6571, '\p{Is_Script:   	NEW Tai-lue}', "");
Expect(0, 6571, '\p{^Is_Script:   	NEW Tai-lue}', "");
Expect(0, 6571, '\P{Is_Script:   	NEW Tai-lue}', "");
Expect(1, 6571, '\P{^Is_Script:   	NEW Tai-lue}', "");
Expect(0, 6527, '\p{Is_Script:   	NEW Tai-lue}', "");
Expect(1, 6527, '\p{^Is_Script:   	NEW Tai-lue}', "");
Expect(1, 6527, '\P{Is_Script:   	NEW Tai-lue}', "");
Expect(0, 6527, '\P{^Is_Script:   	NEW Tai-lue}', "");
Error('\p{Is_Sc=_-Talu:=}');
Error('\P{Is_Sc=_-Talu:=}');
Expect(1, 6571, '\p{Is_Sc=talu}', "");
Expect(0, 6571, '\p{^Is_Sc=talu}', "");
Expect(0, 6571, '\P{Is_Sc=talu}', "");
Expect(1, 6571, '\P{^Is_Sc=talu}', "");
Expect(0, 6527, '\p{Is_Sc=talu}', "");
Expect(1, 6527, '\p{^Is_Sc=talu}', "");
Expect(1, 6527, '\P{Is_Sc=talu}', "");
Expect(0, 6527, '\P{^Is_Sc=talu}', "");
Expect(1, 6571, '\p{Is_Sc=_talu}', "");
Expect(0, 6571, '\p{^Is_Sc=_talu}', "");
Expect(0, 6571, '\P{Is_Sc=_talu}', "");
Expect(1, 6571, '\P{^Is_Sc=_talu}', "");
Expect(0, 6527, '\p{Is_Sc=_talu}', "");
Expect(1, 6527, '\p{^Is_Sc=_talu}', "");
Expect(1, 6527, '\P{Is_Sc=_talu}', "");
Expect(0, 6527, '\P{^Is_Sc=_talu}', "");
Error('\p{Script:	_:=Gothic}');
Error('\P{Script:	_:=Gothic}');
Expect(1, 66378, '\p{Script=gothic}', "");
Expect(0, 66378, '\p{^Script=gothic}', "");
Expect(0, 66378, '\P{Script=gothic}', "");
Expect(1, 66378, '\P{^Script=gothic}', "");
Expect(0, 66351, '\p{Script=gothic}', "");
Expect(1, 66351, '\p{^Script=gothic}', "");
Expect(1, 66351, '\P{Script=gothic}', "");
Expect(0, 66351, '\P{^Script=gothic}', "");
Expect(1, 66378, '\p{Script=	_Gothic}', "");
Expect(0, 66378, '\p{^Script=	_Gothic}', "");
Expect(0, 66378, '\P{Script=	_Gothic}', "");
Expect(1, 66378, '\P{^Script=	_Gothic}', "");
Expect(0, 66351, '\p{Script=	_Gothic}', "");
Expect(1, 66351, '\p{^Script=	_Gothic}', "");
Expect(1, 66351, '\P{Script=	_Gothic}', "");
Expect(0, 66351, '\P{^Script=	_Gothic}', "");
Error('\p{Sc= /a/Goth}');
Error('\P{Sc= /a/Goth}');
Expect(1, 66378, '\p{Sc:	goth}', "");
Expect(0, 66378, '\p{^Sc:	goth}', "");
Expect(0, 66378, '\P{Sc:	goth}', "");
Expect(1, 66378, '\P{^Sc:	goth}', "");
Expect(0, 66351, '\p{Sc:	goth}', "");
Expect(1, 66351, '\p{^Sc:	goth}', "");
Expect(1, 66351, '\P{Sc:	goth}', "");
Expect(0, 66351, '\P{^Sc:	goth}', "");
Expect(1, 66378, '\p{Sc:   _-GOTH}', "");
Expect(0, 66378, '\p{^Sc:   _-GOTH}', "");
Expect(0, 66378, '\P{Sc:   _-GOTH}', "");
Expect(1, 66378, '\P{^Sc:   _-GOTH}', "");
Expect(0, 66351, '\p{Sc:   _-GOTH}', "");
Expect(1, 66351, '\p{^Sc:   _-GOTH}', "");
Expect(1, 66351, '\P{Sc:   _-GOTH}', "");
Expect(0, 66351, '\P{^Sc:   _-GOTH}', "");
Error('\p{Is_Script:	gothic/a/}');
Error('\P{Is_Script:	gothic/a/}');
Expect(1, 66378, '\p{Is_Script=gothic}', "");
Expect(0, 66378, '\p{^Is_Script=gothic}', "");
Expect(0, 66378, '\P{Is_Script=gothic}', "");
Expect(1, 66378, '\P{^Is_Script=gothic}', "");
Expect(0, 66351, '\p{Is_Script=gothic}', "");
Expect(1, 66351, '\p{^Is_Script=gothic}', "");
Expect(1, 66351, '\P{Is_Script=gothic}', "");
Expect(0, 66351, '\P{^Is_Script=gothic}', "");
Expect(1, 66378, '\p{Is_Script=_ Gothic}', "");
Expect(0, 66378, '\p{^Is_Script=_ Gothic}', "");
Expect(0, 66378, '\P{Is_Script=_ Gothic}', "");
Expect(1, 66378, '\P{^Is_Script=_ Gothic}', "");
Expect(0, 66351, '\p{Is_Script=_ Gothic}', "");
Expect(1, 66351, '\p{^Is_Script=_ Gothic}', "");
Expect(1, 66351, '\P{Is_Script=_ Gothic}', "");
Expect(0, 66351, '\P{^Is_Script=_ Gothic}', "");
Error('\p{Is_Sc=-:=Goth}');
Error('\P{Is_Sc=-:=Goth}');
Expect(1, 66378, '\p{Is_Sc=goth}', "");
Expect(0, 66378, '\p{^Is_Sc=goth}', "");
Expect(0, 66378, '\P{Is_Sc=goth}', "");
Expect(1, 66378, '\P{^Is_Sc=goth}', "");
Expect(0, 66351, '\p{Is_Sc=goth}', "");
Expect(1, 66351, '\p{^Is_Sc=goth}', "");
Expect(1, 66351, '\P{Is_Sc=goth}', "");
Expect(0, 66351, '\P{^Is_Sc=goth}', "");
Expect(1, 66378, '\p{Is_Sc=-_Goth}', "");
Expect(0, 66378, '\p{^Is_Sc=-_Goth}', "");
Expect(0, 66378, '\P{Is_Sc=-_Goth}', "");
Expect(1, 66378, '\P{^Is_Sc=-_Goth}', "");
Expect(0, 66351, '\p{Is_Sc=-_Goth}', "");
Expect(1, 66351, '\p{^Is_Sc=-_Goth}', "");
Expect(1, 66351, '\P{Is_Sc=-_Goth}', "");
Expect(0, 66351, '\P{^Is_Sc=-_Goth}', "");
Error('\p{Script=  OLDITALIC:=}');
Error('\P{Script=  OLDITALIC:=}');
Expect(1, 66334, '\p{Script=olditalic}', "");
Expect(0, 66334, '\p{^Script=olditalic}', "");
Expect(0, 66334, '\P{Script=olditalic}', "");
Expect(1, 66334, '\P{^Script=olditalic}', "");
Expect(0, 66303, '\p{Script=olditalic}', "");
Expect(1, 66303, '\p{^Script=olditalic}', "");
Expect(1, 66303, '\P{Script=olditalic}', "");
Expect(0, 66303, '\P{^Script=olditalic}', "");
Expect(1, 66334, '\p{Script:   	-old	italic}', "");
Expect(0, 66334, '\p{^Script:   	-old	italic}', "");
Expect(0, 66334, '\P{Script:   	-old	italic}', "");
Expect(1, 66334, '\P{^Script:   	-old	italic}', "");
Expect(0, 66303, '\p{Script:   	-old	italic}', "");
Expect(1, 66303, '\p{^Script:   	-old	italic}', "");
Expect(1, 66303, '\P{Script:   	-old	italic}', "");
Expect(0, 66303, '\P{^Script:   	-old	italic}', "");
Error('\p{Sc=/a/-_ITAL}');
Error('\P{Sc=/a/-_ITAL}');
Expect(1, 66334, '\p{Sc=ital}', "");
Expect(0, 66334, '\p{^Sc=ital}', "");
Expect(0, 66334, '\P{Sc=ital}', "");
Expect(1, 66334, '\P{^Sc=ital}', "");
Expect(0, 66303, '\p{Sc=ital}', "");
Expect(1, 66303, '\p{^Sc=ital}', "");
Expect(1, 66303, '\P{Sc=ital}', "");
Expect(0, 66303, '\P{^Sc=ital}', "");
Expect(1, 66334, '\p{Sc=-Ital}', "");
Expect(0, 66334, '\p{^Sc=-Ital}', "");
Expect(0, 66334, '\P{Sc=-Ital}', "");
Expect(1, 66334, '\P{^Sc=-Ital}', "");
Expect(0, 66303, '\p{Sc=-Ital}', "");
Expect(1, 66303, '\p{^Sc=-Ital}', "");
Expect(1, 66303, '\P{Sc=-Ital}', "");
Expect(0, 66303, '\P{^Sc=-Ital}', "");
Error('\p{Is_Script=-_Old/a/italic}');
Error('\P{Is_Script=-_Old/a/italic}');
Expect(1, 66334, '\p{Is_Script=olditalic}', "");
Expect(0, 66334, '\p{^Is_Script=olditalic}', "");
Expect(0, 66334, '\P{Is_Script=olditalic}', "");
Expect(1, 66334, '\P{^Is_Script=olditalic}', "");
Expect(0, 66303, '\p{Is_Script=olditalic}', "");
Expect(1, 66303, '\p{^Is_Script=olditalic}', "");
Expect(1, 66303, '\P{Is_Script=olditalic}', "");
Expect(0, 66303, '\P{^Is_Script=olditalic}', "");
Expect(1, 66334, '\p{Is_Script= 	OLD_Italic}', "");
Expect(0, 66334, '\p{^Is_Script= 	OLD_Italic}', "");
Expect(0, 66334, '\P{Is_Script= 	OLD_Italic}', "");
Expect(1, 66334, '\P{^Is_Script= 	OLD_Italic}', "");
Expect(0, 66303, '\p{Is_Script= 	OLD_Italic}', "");
Expect(1, 66303, '\p{^Is_Script= 	OLD_Italic}', "");
Expect(1, 66303, '\P{Is_Script= 	OLD_Italic}', "");
Expect(0, 66303, '\P{^Is_Script= 	OLD_Italic}', "");
Error('\p{Is_Sc=	_ital:=}');
Error('\P{Is_Sc=	_ital:=}');
Expect(1, 66334, '\p{Is_Sc:	ital}', "");
Expect(0, 66334, '\p{^Is_Sc:	ital}', "");
Expect(0, 66334, '\P{Is_Sc:	ital}', "");
Expect(1, 66334, '\P{^Is_Sc:	ital}', "");
Expect(0, 66303, '\p{Is_Sc:	ital}', "");
Expect(1, 66303, '\p{^Is_Sc:	ital}', "");
Expect(1, 66303, '\P{Is_Sc:	ital}', "");
Expect(0, 66303, '\P{^Is_Sc:	ital}', "");
Expect(1, 66334, '\p{Is_Sc=- ital}', "");
Expect(0, 66334, '\p{^Is_Sc=- ital}', "");
Expect(0, 66334, '\P{Is_Sc=- ital}', "");
Expect(1, 66334, '\P{^Is_Sc=- ital}', "");
Expect(0, 66303, '\p{Is_Sc=- ital}', "");
Expect(1, 66303, '\p{^Is_Sc=- ital}', "");
Expect(1, 66303, '\P{Is_Sc=- ital}', "");
Expect(0, 66303, '\P{^Is_Sc=- ital}', "");
Error('\p{Script:   _bamum:=}');
Error('\P{Script:   _bamum:=}');
Expect(1, 42743, '\p{Script:   bamum}', "");
Expect(0, 42743, '\p{^Script:   bamum}', "");
Expect(0, 42743, '\P{Script:   bamum}', "");
Expect(1, 42743, '\P{^Script:   bamum}', "");
Expect(0, 42655, '\p{Script:   bamum}', "");
Expect(1, 42655, '\p{^Script:   bamum}', "");
Expect(1, 42655, '\P{Script:   bamum}', "");
Expect(0, 42655, '\P{^Script:   bamum}', "");
Expect(1, 42743, '\p{Script= BAMUM}', "");
Expect(0, 42743, '\p{^Script= BAMUM}', "");
Expect(0, 42743, '\P{Script= BAMUM}', "");
Expect(1, 42743, '\P{^Script= BAMUM}', "");
Expect(0, 42655, '\p{Script= BAMUM}', "");
Expect(1, 42655, '\p{^Script= BAMUM}', "");
Expect(1, 42655, '\P{Script= BAMUM}', "");
Expect(0, 42655, '\P{^Script= BAMUM}', "");
Error('\p{Sc=:=	bamu}');
Error('\P{Sc=:=	bamu}');
Expect(1, 42743, '\p{Sc=bamu}', "");
Expect(0, 42743, '\p{^Sc=bamu}', "");
Expect(0, 42743, '\P{Sc=bamu}', "");
Expect(1, 42743, '\P{^Sc=bamu}', "");
Expect(0, 42655, '\p{Sc=bamu}', "");
Expect(1, 42655, '\p{^Sc=bamu}', "");
Expect(1, 42655, '\P{Sc=bamu}', "");
Expect(0, 42655, '\P{^Sc=bamu}', "");
Expect(1, 42743, '\p{Sc= BAMU}', "");
Expect(0, 42743, '\p{^Sc= BAMU}', "");
Expect(0, 42743, '\P{Sc= BAMU}', "");
Expect(1, 42743, '\P{^Sc= BAMU}', "");
Expect(0, 42655, '\p{Sc= BAMU}', "");
Expect(1, 42655, '\p{^Sc= BAMU}', "");
Expect(1, 42655, '\P{Sc= BAMU}', "");
Expect(0, 42655, '\P{^Sc= BAMU}', "");
Error('\p{Is_Script=  Bamum/a/}');
Error('\P{Is_Script=  Bamum/a/}');
Expect(1, 42743, '\p{Is_Script=bamum}', "");
Expect(0, 42743, '\p{^Is_Script=bamum}', "");
Expect(0, 42743, '\P{Is_Script=bamum}', "");
Expect(1, 42743, '\P{^Is_Script=bamum}', "");
Expect(0, 42655, '\p{Is_Script=bamum}', "");
Expect(1, 42655, '\p{^Is_Script=bamum}', "");
Expect(1, 42655, '\P{Is_Script=bamum}', "");
Expect(0, 42655, '\P{^Is_Script=bamum}', "");
Expect(1, 42743, '\p{Is_Script= 	Bamum}', "");
Expect(0, 42743, '\p{^Is_Script= 	Bamum}', "");
Expect(0, 42743, '\P{Is_Script= 	Bamum}', "");
Expect(1, 42743, '\P{^Is_Script= 	Bamum}', "");
Expect(0, 42655, '\p{Is_Script= 	Bamum}', "");
Expect(1, 42655, '\p{^Is_Script= 	Bamum}', "");
Expect(1, 42655, '\P{Is_Script= 	Bamum}', "");
Expect(0, 42655, '\P{^Is_Script= 	Bamum}', "");
Error('\p{Is_Sc=:=_ Bamu}');
Error('\P{Is_Sc=:=_ Bamu}');
Expect(1, 42743, '\p{Is_Sc=bamu}', "");
Expect(0, 42743, '\p{^Is_Sc=bamu}', "");
Expect(0, 42743, '\P{Is_Sc=bamu}', "");
Expect(1, 42743, '\P{^Is_Sc=bamu}', "");
Expect(0, 42655, '\p{Is_Sc=bamu}', "");
Expect(1, 42655, '\p{^Is_Sc=bamu}', "");
Expect(1, 42655, '\P{Is_Sc=bamu}', "");
Expect(0, 42655, '\P{^Is_Sc=bamu}', "");
Expect(1, 42743, '\p{Is_Sc:    _Bamu}', "");
Expect(0, 42743, '\p{^Is_Sc:    _Bamu}', "");
Expect(0, 42743, '\P{Is_Sc:    _Bamu}', "");
Expect(1, 42743, '\P{^Is_Sc:    _Bamu}', "");
Expect(0, 42655, '\p{Is_Sc:    _Bamu}', "");
Expect(1, 42655, '\p{^Is_Sc:    _Bamu}', "");
Expect(1, 42655, '\P{Is_Sc:    _Bamu}', "");
Expect(0, 42655, '\P{^Is_Sc:    _Bamu}', "");
Error('\p{Script=_	vai/a/}');
Error('\P{Script=_	vai/a/}');
Expect(1, 42539, '\p{Script=vai}', "");
Expect(0, 42539, '\p{^Script=vai}', "");
Expect(0, 42539, '\P{Script=vai}', "");
Expect(1, 42539, '\P{^Script=vai}', "");
Expect(0, 42239, '\p{Script=vai}', "");
Expect(1, 42239, '\p{^Script=vai}', "");
Expect(1, 42239, '\P{Script=vai}', "");
Expect(0, 42239, '\P{^Script=vai}', "");
Expect(1, 42539, '\p{Script=	Vai}', "");
Expect(0, 42539, '\p{^Script=	Vai}', "");
Expect(0, 42539, '\P{Script=	Vai}', "");
Expect(1, 42539, '\P{^Script=	Vai}', "");
Expect(0, 42239, '\p{Script=	Vai}', "");
Expect(1, 42239, '\p{^Script=	Vai}', "");
Expect(1, 42239, '\P{Script=	Vai}', "");
Expect(0, 42239, '\P{^Script=	Vai}', "");
Error('\p{Sc=	/a/Vaii}');
Error('\P{Sc=	/a/Vaii}');
Expect(1, 42539, '\p{Sc=vaii}', "");
Expect(0, 42539, '\p{^Sc=vaii}', "");
Expect(0, 42539, '\P{Sc=vaii}', "");
Expect(1, 42539, '\P{^Sc=vaii}', "");
Expect(0, 42239, '\p{Sc=vaii}', "");
Expect(1, 42239, '\p{^Sc=vaii}', "");
Expect(1, 42239, '\P{Sc=vaii}', "");
Expect(0, 42239, '\P{^Sc=vaii}', "");
Expect(1, 42539, '\p{Sc=--VAII}', "");
Expect(0, 42539, '\p{^Sc=--VAII}', "");
Expect(0, 42539, '\P{Sc=--VAII}', "");
Expect(1, 42539, '\P{^Sc=--VAII}', "");
Expect(0, 42239, '\p{Sc=--VAII}', "");
Expect(1, 42239, '\p{^Sc=--VAII}', "");
Expect(1, 42239, '\P{Sc=--VAII}', "");
Expect(0, 42239, '\P{^Sc=--VAII}', "");
Error('\p{Is_Script::=-Vai}');
Error('\P{Is_Script::=-Vai}');
Expect(1, 42539, '\p{Is_Script=vai}', "");
Expect(0, 42539, '\p{^Is_Script=vai}', "");
Expect(0, 42539, '\P{Is_Script=vai}', "");
Expect(1, 42539, '\P{^Is_Script=vai}', "");
Expect(0, 42239, '\p{Is_Script=vai}', "");
Expect(1, 42239, '\p{^Is_Script=vai}', "");
Expect(1, 42239, '\P{Is_Script=vai}', "");
Expect(0, 42239, '\P{^Is_Script=vai}', "");
Expect(1, 42539, '\p{Is_Script=	-Vai}', "");
Expect(0, 42539, '\p{^Is_Script=	-Vai}', "");
Expect(0, 42539, '\P{Is_Script=	-Vai}', "");
Expect(1, 42539, '\P{^Is_Script=	-Vai}', "");
Expect(0, 42239, '\p{Is_Script=	-Vai}', "");
Expect(1, 42239, '\p{^Is_Script=	-Vai}', "");
Expect(1, 42239, '\P{Is_Script=	-Vai}', "");
Expect(0, 42239, '\P{^Is_Script=	-Vai}', "");
Error('\p{Is_Sc= VAII/a/}');
Error('\P{Is_Sc= VAII/a/}');
Expect(1, 42539, '\p{Is_Sc=vaii}', "");
Expect(0, 42539, '\p{^Is_Sc=vaii}', "");
Expect(0, 42539, '\P{Is_Sc=vaii}', "");
Expect(1, 42539, '\P{^Is_Sc=vaii}', "");
Expect(0, 42239, '\p{Is_Sc=vaii}', "");
Expect(1, 42239, '\p{^Is_Sc=vaii}', "");
Expect(1, 42239, '\P{Is_Sc=vaii}', "");
Expect(0, 42239, '\P{^Is_Sc=vaii}', "");
Expect(1, 42539, '\p{Is_Sc=Vaii}', "");
Expect(0, 42539, '\p{^Is_Sc=Vaii}', "");
Expect(0, 42539, '\P{Is_Sc=Vaii}', "");
Expect(1, 42539, '\P{^Is_Sc=Vaii}', "");
Expect(0, 42239, '\p{Is_Sc=Vaii}', "");
Expect(1, 42239, '\p{^Is_Sc=Vaii}', "");
Expect(1, 42239, '\P{Is_Sc=Vaii}', "");
Expect(0, 42239, '\P{^Is_Sc=Vaii}', "");
Error('\p{Script=-Inscriptional_Parthian:=}');
Error('\P{Script=-Inscriptional_Parthian:=}');
Expect(1, 68437, '\p{Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Script=	 Inscriptional_parthian}', "");
Expect(0, 68437, '\p{^Script=	 Inscriptional_parthian}', "");
Expect(0, 68437, '\P{Script=	 Inscriptional_parthian}', "");
Expect(1, 68437, '\P{^Script=	 Inscriptional_parthian}', "");
Expect(0, 68415, '\p{Script=	 Inscriptional_parthian}', "");
Expect(1, 68415, '\p{^Script=	 Inscriptional_parthian}', "");
Expect(1, 68415, '\P{Script=	 Inscriptional_parthian}', "");
Expect(0, 68415, '\P{^Script=	 Inscriptional_parthian}', "");
Error('\p{Sc=	_PRTI:=}');
Error('\P{Sc=	_PRTI:=}');
Expect(1, 68437, '\p{Sc:prti}', "");
Expect(0, 68437, '\p{^Sc:prti}', "");
Expect(0, 68437, '\P{Sc:prti}', "");
Expect(1, 68437, '\P{^Sc:prti}', "");
Expect(0, 68415, '\p{Sc:prti}', "");
Expect(1, 68415, '\p{^Sc:prti}', "");
Expect(1, 68415, '\P{Sc:prti}', "");
Expect(0, 68415, '\P{^Sc:prti}', "");
Expect(1, 68437, '\p{Sc:_ Prti}', "");
Expect(0, 68437, '\p{^Sc:_ Prti}', "");
Expect(0, 68437, '\P{Sc:_ Prti}', "");
Expect(1, 68437, '\P{^Sc:_ Prti}', "");
Expect(0, 68415, '\p{Sc:_ Prti}', "");
Expect(1, 68415, '\p{^Sc:_ Prti}', "");
Expect(1, 68415, '\P{Sc:_ Prti}', "");
Expect(0, 68415, '\P{^Sc:_ Prti}', "");
Error('\p{Is_Script= -inscriptional:=PARTHIAN}');
Error('\P{Is_Script= -inscriptional:=PARTHIAN}');
Expect(1, 68437, '\p{Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68437, '\p{^Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68437, '\P{Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68437, '\P{^Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68415, '\p{Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68415, '\p{^Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68415, '\P{Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68415, '\P{^Is_Script=_	INSCRIPTIONAL-PARTHIAN}', "");
Error('\p{Is_Sc=-:=Prti}');
Error('\P{Is_Sc=-:=Prti}');
Expect(1, 68437, '\p{Is_Sc:prti}', "");
Expect(0, 68437, '\p{^Is_Sc:prti}', "");
Expect(0, 68437, '\P{Is_Sc:prti}', "");
Expect(1, 68437, '\P{^Is_Sc:prti}', "");
Expect(0, 68415, '\p{Is_Sc:prti}', "");
Expect(1, 68415, '\p{^Is_Sc:prti}', "");
Expect(1, 68415, '\P{Is_Sc:prti}', "");
Expect(0, 68415, '\P{^Is_Sc:prti}', "");
Expect(1, 68437, '\p{Is_Sc=--PRTI}', "");
Expect(0, 68437, '\p{^Is_Sc=--PRTI}', "");
Expect(0, 68437, '\P{Is_Sc=--PRTI}', "");
Expect(1, 68437, '\P{^Is_Sc=--PRTI}', "");
Expect(0, 68415, '\p{Is_Sc=--PRTI}', "");
Expect(1, 68415, '\p{^Is_Sc=--PRTI}', "");
Expect(1, 68415, '\P{Is_Sc=--PRTI}', "");
Expect(0, 68415, '\P{^Is_Sc=--PRTI}', "");
Error('\p{Script=	/a/Runic}');
Error('\P{Script=	/a/Runic}');
Expect(1, 5866, '\p{Script=runic}', "");
Expect(0, 5866, '\p{^Script=runic}', "");
Expect(0, 5866, '\P{Script=runic}', "");
Expect(1, 5866, '\P{^Script=runic}', "");
Expect(0, 5791, '\p{Script=runic}', "");
Expect(1, 5791, '\p{^Script=runic}', "");
Expect(1, 5791, '\P{Script=runic}', "");
Expect(0, 5791, '\P{^Script=runic}', "");
Expect(1, 5866, '\p{Script=	-Runic}', "");
Expect(0, 5866, '\p{^Script=	-Runic}', "");
Expect(0, 5866, '\P{Script=	-Runic}', "");
Expect(1, 5866, '\P{^Script=	-Runic}', "");
Expect(0, 5791, '\p{Script=	-Runic}', "");
Expect(1, 5791, '\p{^Script=	-Runic}', "");
Expect(1, 5791, '\P{Script=	-Runic}', "");
Expect(0, 5791, '\P{^Script=	-Runic}', "");
Error('\p{Sc:   _runr/a/}');
Error('\P{Sc:   _runr/a/}');
Expect(1, 5866, '\p{Sc=runr}', "");
Expect(0, 5866, '\p{^Sc=runr}', "");
Expect(0, 5866, '\P{Sc=runr}', "");
Expect(1, 5866, '\P{^Sc=runr}', "");
Expect(0, 5791, '\p{Sc=runr}', "");
Expect(1, 5791, '\p{^Sc=runr}', "");
Expect(1, 5791, '\P{Sc=runr}', "");
Expect(0, 5791, '\P{^Sc=runr}', "");
Expect(1, 5866, '\p{Sc=_ Runr}', "");
Expect(0, 5866, '\p{^Sc=_ Runr}', "");
Expect(0, 5866, '\P{Sc=_ Runr}', "");
Expect(1, 5866, '\P{^Sc=_ Runr}', "");
Expect(0, 5791, '\p{Sc=_ Runr}', "");
Expect(1, 5791, '\p{^Sc=_ Runr}', "");
Expect(1, 5791, '\P{Sc=_ Runr}', "");
Expect(0, 5791, '\P{^Sc=_ Runr}', "");
Error('\p{Is_Script= :=Runic}');
Error('\P{Is_Script= :=Runic}');
Expect(1, 5866, '\p{Is_Script=runic}', "");
Expect(0, 5866, '\p{^Is_Script=runic}', "");
Expect(0, 5866, '\P{Is_Script=runic}', "");
Expect(1, 5866, '\P{^Is_Script=runic}', "");
Expect(0, 5791, '\p{Is_Script=runic}', "");
Expect(1, 5791, '\p{^Is_Script=runic}', "");
Expect(1, 5791, '\P{Is_Script=runic}', "");
Expect(0, 5791, '\P{^Is_Script=runic}', "");
Expect(1, 5866, '\p{Is_Script: 	Runic}', "");
Expect(0, 5866, '\p{^Is_Script: 	Runic}', "");
Expect(0, 5866, '\P{Is_Script: 	Runic}', "");
Expect(1, 5866, '\P{^Is_Script: 	Runic}', "");
Expect(0, 5791, '\p{Is_Script: 	Runic}', "");
Expect(1, 5791, '\p{^Is_Script: 	Runic}', "");
Expect(1, 5791, '\P{Is_Script: 	Runic}', "");
Expect(0, 5791, '\P{^Is_Script: 	Runic}', "");
Error('\p{Is_Sc:  	Runr/a/}');
Error('\P{Is_Sc:  	Runr/a/}');
Expect(1, 5866, '\p{Is_Sc: runr}', "");
Expect(0, 5866, '\p{^Is_Sc: runr}', "");
Expect(0, 5866, '\P{Is_Sc: runr}', "");
Expect(1, 5866, '\P{^Is_Sc: runr}', "");
Expect(0, 5791, '\p{Is_Sc: runr}', "");
Expect(1, 5791, '\p{^Is_Sc: runr}', "");
Expect(1, 5791, '\P{Is_Sc: runr}', "");
Expect(0, 5791, '\P{^Is_Sc: runr}', "");
Expect(1, 5866, '\p{Is_Sc=- Runr}', "");
Expect(0, 5866, '\p{^Is_Sc=- Runr}', "");
Expect(0, 5866, '\P{Is_Sc=- Runr}', "");
Expect(1, 5866, '\P{^Is_Sc=- Runr}', "");
Expect(0, 5791, '\p{Is_Sc=- Runr}', "");
Expect(1, 5791, '\p{^Is_Sc=- Runr}', "");
Expect(1, 5791, '\P{Is_Sc=- Runr}', "");
Expect(0, 5791, '\P{^Is_Sc=- Runr}', "");
Error('\p{Script=_/a/cherokee}');
Error('\P{Script=_/a/cherokee}');
Expect(1, 5108, '\p{Script=cherokee}', "");
Expect(0, 5108, '\p{^Script=cherokee}', "");
Expect(0, 5108, '\P{Script=cherokee}', "");
Expect(1, 5108, '\P{^Script=cherokee}', "");
Expect(0, 5023, '\p{Script=cherokee}', "");
Expect(1, 5023, '\p{^Script=cherokee}', "");
Expect(1, 5023, '\P{Script=cherokee}', "");
Expect(0, 5023, '\P{^Script=cherokee}', "");
Expect(1, 5108, '\p{Script=-	CHEROKEE}', "");
Expect(0, 5108, '\p{^Script=-	CHEROKEE}', "");
Expect(0, 5108, '\P{Script=-	CHEROKEE}', "");
Expect(1, 5108, '\P{^Script=-	CHEROKEE}', "");
Expect(0, 5023, '\p{Script=-	CHEROKEE}', "");
Expect(1, 5023, '\p{^Script=-	CHEROKEE}', "");
Expect(1, 5023, '\P{Script=-	CHEROKEE}', "");
Expect(0, 5023, '\P{^Script=-	CHEROKEE}', "");
Error('\p{Sc=:=--Cher}');
Error('\P{Sc=:=--Cher}');
Expect(1, 5108, '\p{Sc=cher}', "");
Expect(0, 5108, '\p{^Sc=cher}', "");
Expect(0, 5108, '\P{Sc=cher}', "");
Expect(1, 5108, '\P{^Sc=cher}', "");
Expect(0, 5023, '\p{Sc=cher}', "");
Expect(1, 5023, '\p{^Sc=cher}', "");
Expect(1, 5023, '\P{Sc=cher}', "");
Expect(0, 5023, '\P{^Sc=cher}', "");
Expect(1, 5108, '\p{Sc=_Cher}', "");
Expect(0, 5108, '\p{^Sc=_Cher}', "");
Expect(0, 5108, '\P{Sc=_Cher}', "");
Expect(1, 5108, '\P{^Sc=_Cher}', "");
Expect(0, 5023, '\p{Sc=_Cher}', "");
Expect(1, 5023, '\p{^Sc=_Cher}', "");
Expect(1, 5023, '\P{Sc=_Cher}', "");
Expect(0, 5023, '\P{^Sc=_Cher}', "");
Error('\p{Is_Script=	cherokee/a/}');
Error('\P{Is_Script=	cherokee/a/}');
Expect(1, 5108, '\p{Is_Script=cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=cherokee}', "");
Expect(0, 5108, '\P{Is_Script=cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=cherokee}', "");
Expect(0, 5023, '\p{Is_Script=cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=cherokee}', "");
Expect(1, 5023, '\P{Is_Script=cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=cherokee}', "");
Expect(1, 5108, '\p{Is_Script=_-Cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=_-Cherokee}', "");
Expect(0, 5108, '\P{Is_Script=_-Cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=_-Cherokee}', "");
Expect(0, 5023, '\p{Is_Script=_-Cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=_-Cherokee}', "");
Expect(1, 5023, '\P{Is_Script=_-Cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=_-Cherokee}', "");
Error('\p{Is_Sc=-/a/cher}');
Error('\P{Is_Sc=-/a/cher}');
Expect(1, 5108, '\p{Is_Sc=cher}', "");
Expect(0, 5108, '\p{^Is_Sc=cher}', "");
Expect(0, 5108, '\P{Is_Sc=cher}', "");
Expect(1, 5108, '\P{^Is_Sc=cher}', "");
Expect(0, 5023, '\p{Is_Sc=cher}', "");
Expect(1, 5023, '\p{^Is_Sc=cher}', "");
Expect(1, 5023, '\P{Is_Sc=cher}', "");
Expect(0, 5023, '\P{^Is_Sc=cher}', "");
Expect(1, 5108, '\p{Is_Sc=	Cher}', "");
Expect(0, 5108, '\p{^Is_Sc=	Cher}', "");
Expect(0, 5108, '\P{Is_Sc=	Cher}', "");
Expect(1, 5108, '\P{^Is_Sc=	Cher}', "");
Expect(0, 5023, '\p{Is_Sc=	Cher}', "");
Expect(1, 5023, '\p{^Is_Sc=	Cher}', "");
Expect(1, 5023, '\P{Is_Sc=	Cher}', "");
Expect(0, 5023, '\P{^Is_Sc=	Cher}', "");
Error('\p{Script=_-OL	chiki/a/}');
Error('\P{Script=_-OL	chiki/a/}');
Expect(1, 7295, '\p{Script=olchiki}', "");
Expect(0, 7295, '\p{^Script=olchiki}', "");
Expect(0, 7295, '\P{Script=olchiki}', "");
Expect(1, 7295, '\P{^Script=olchiki}', "");
Expect(0, 7247, '\p{Script=olchiki}', "");
Expect(1, 7247, '\p{^Script=olchiki}', "");
Expect(1, 7247, '\P{Script=olchiki}', "");
Expect(0, 7247, '\P{^Script=olchiki}', "");
Expect(1, 7295, '\p{Script:    -olChiki}', "");
Expect(0, 7295, '\p{^Script:    -olChiki}', "");
Expect(0, 7295, '\P{Script:    -olChiki}', "");
Expect(1, 7295, '\P{^Script:    -olChiki}', "");
Expect(0, 7247, '\p{Script:    -olChiki}', "");
Expect(1, 7247, '\p{^Script:    -olChiki}', "");
Expect(1, 7247, '\P{Script:    -olChiki}', "");
Expect(0, 7247, '\P{^Script:    -olChiki}', "");
Error('\p{Sc=:=- Olck}');
Error('\P{Sc=:=- Olck}');
Expect(1, 7295, '\p{Sc=olck}', "");
Expect(0, 7295, '\p{^Sc=olck}', "");
Expect(0, 7295, '\P{Sc=olck}', "");
Expect(1, 7295, '\P{^Sc=olck}', "");
Expect(0, 7247, '\p{Sc=olck}', "");
Expect(1, 7247, '\p{^Sc=olck}', "");
Expect(1, 7247, '\P{Sc=olck}', "");
Expect(0, 7247, '\P{^Sc=olck}', "");
Expect(1, 7295, '\p{Sc=	_OLCK}', "");
Expect(0, 7295, '\p{^Sc=	_OLCK}', "");
Expect(0, 7295, '\P{Sc=	_OLCK}', "");
Expect(1, 7295, '\P{^Sc=	_OLCK}', "");
Expect(0, 7247, '\p{Sc=	_OLCK}', "");
Expect(1, 7247, '\p{^Sc=	_OLCK}', "");
Expect(1, 7247, '\P{Sc=	_OLCK}', "");
Expect(0, 7247, '\P{^Sc=	_OLCK}', "");
Error('\p{Is_Script= /a/Ol Chiki}');
Error('\P{Is_Script= /a/Ol Chiki}');
Expect(1, 7295, '\p{Is_Script=olchiki}', "");
Expect(0, 7295, '\p{^Is_Script=olchiki}', "");
Expect(0, 7295, '\P{Is_Script=olchiki}', "");
Expect(1, 7295, '\P{^Is_Script=olchiki}', "");
Expect(0, 7247, '\p{Is_Script=olchiki}', "");
Expect(1, 7247, '\p{^Is_Script=olchiki}', "");
Expect(1, 7247, '\P{Is_Script=olchiki}', "");
Expect(0, 7247, '\P{^Is_Script=olchiki}', "");
Expect(1, 7295, '\p{Is_Script=- OlCHIKI}', "");
Expect(0, 7295, '\p{^Is_Script=- OlCHIKI}', "");
Expect(0, 7295, '\P{Is_Script=- OlCHIKI}', "");
Expect(1, 7295, '\P{^Is_Script=- OlCHIKI}', "");
Expect(0, 7247, '\p{Is_Script=- OlCHIKI}', "");
Expect(1, 7247, '\p{^Is_Script=- OlCHIKI}', "");
Expect(1, 7247, '\P{Is_Script=- OlCHIKI}', "");
Expect(0, 7247, '\P{^Is_Script=- OlCHIKI}', "");
Error('\p{Is_Sc=/a/  olck}');
Error('\P{Is_Sc=/a/  olck}');
Expect(1, 7295, '\p{Is_Sc=olck}', "");
Expect(0, 7295, '\p{^Is_Sc=olck}', "");
Expect(0, 7295, '\P{Is_Sc=olck}', "");
Expect(1, 7295, '\P{^Is_Sc=olck}', "");
Expect(0, 7247, '\p{Is_Sc=olck}', "");
Expect(1, 7247, '\p{^Is_Sc=olck}', "");
Expect(1, 7247, '\P{Is_Sc=olck}', "");
Expect(0, 7247, '\P{^Is_Sc=olck}', "");
Expect(1, 7295, '\p{Is_Sc:		olck}', "");
Expect(0, 7295, '\p{^Is_Sc:		olck}', "");
Expect(0, 7295, '\P{Is_Sc:		olck}', "");
Expect(1, 7295, '\P{^Is_Sc:		olck}', "");
Expect(0, 7247, '\p{Is_Sc:		olck}', "");
Expect(1, 7247, '\p{^Is_Sc:		olck}', "");
Expect(1, 7247, '\P{Is_Sc:		olck}', "");
Expect(0, 7247, '\P{^Is_Sc:		olck}', "");
Error('\p{Script=_/a/Ugaritic}');
Error('\P{Script=_/a/Ugaritic}');
Expect(1, 66461, '\p{Script=ugaritic}', "");
Expect(0, 66461, '\p{^Script=ugaritic}', "");
Expect(0, 66461, '\P{Script=ugaritic}', "");
Expect(1, 66461, '\P{^Script=ugaritic}', "");
Expect(0, 66431, '\p{Script=ugaritic}', "");
Expect(1, 66431, '\p{^Script=ugaritic}', "");
Expect(1, 66431, '\P{Script=ugaritic}', "");
Expect(0, 66431, '\P{^Script=ugaritic}', "");
Expect(1, 66461, '\p{Script=__Ugaritic}', "");
Expect(0, 66461, '\p{^Script=__Ugaritic}', "");
Expect(0, 66461, '\P{Script=__Ugaritic}', "");
Expect(1, 66461, '\P{^Script=__Ugaritic}', "");
Expect(0, 66431, '\p{Script=__Ugaritic}', "");
Expect(1, 66431, '\p{^Script=__Ugaritic}', "");
Expect(1, 66431, '\P{Script=__Ugaritic}', "");
Expect(0, 66431, '\P{^Script=__Ugaritic}', "");
Error('\p{Sc=:=  Ugar}');
Error('\P{Sc=:=  Ugar}');
Expect(1, 66461, '\p{Sc:	ugar}', "");
Expect(0, 66461, '\p{^Sc:	ugar}', "");
Expect(0, 66461, '\P{Sc:	ugar}', "");
Expect(1, 66461, '\P{^Sc:	ugar}', "");
Expect(0, 66431, '\p{Sc:	ugar}', "");
Expect(1, 66431, '\p{^Sc:	ugar}', "");
Expect(1, 66431, '\P{Sc:	ugar}', "");
Expect(0, 66431, '\P{^Sc:	ugar}', "");
Expect(1, 66461, '\p{Sc:		Ugar}', "");
Expect(0, 66461, '\p{^Sc:		Ugar}', "");
Expect(0, 66461, '\P{Sc:		Ugar}', "");
Expect(1, 66461, '\P{^Sc:		Ugar}', "");
Expect(0, 66431, '\p{Sc:		Ugar}', "");
Expect(1, 66431, '\p{^Sc:		Ugar}', "");
Expect(1, 66431, '\P{Sc:		Ugar}', "");
Expect(0, 66431, '\P{^Sc:		Ugar}', "");
Error('\p{Is_Script:/a/	-ugaritic}');
Error('\P{Is_Script:/a/	-ugaritic}');
Expect(1, 66461, '\p{Is_Script=ugaritic}', "");
Expect(0, 66461, '\p{^Is_Script=ugaritic}', "");
Expect(0, 66461, '\P{Is_Script=ugaritic}', "");
Expect(1, 66461, '\P{^Is_Script=ugaritic}', "");
Expect(0, 66431, '\p{Is_Script=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Script=ugaritic}', "");
Expect(1, 66431, '\P{Is_Script=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Script=ugaritic}', "");
Expect(1, 66461, '\p{Is_Script=_	Ugaritic}', "");
Expect(0, 66461, '\p{^Is_Script=_	Ugaritic}', "");
Expect(0, 66461, '\P{Is_Script=_	Ugaritic}', "");
Expect(1, 66461, '\P{^Is_Script=_	Ugaritic}', "");
Expect(0, 66431, '\p{Is_Script=_	Ugaritic}', "");
Expect(1, 66431, '\p{^Is_Script=_	Ugaritic}', "");
Expect(1, 66431, '\P{Is_Script=_	Ugaritic}', "");
Expect(0, 66431, '\P{^Is_Script=_	Ugaritic}', "");
Error('\p{Is_Sc::=__Ugar}');
Error('\P{Is_Sc::=__Ugar}');
Expect(1, 66461, '\p{Is_Sc=ugar}', "");
Expect(0, 66461, '\p{^Is_Sc=ugar}', "");
Expect(0, 66461, '\P{Is_Sc=ugar}', "");
Expect(1, 66461, '\P{^Is_Sc=ugar}', "");
Expect(0, 66431, '\p{Is_Sc=ugar}', "");
Expect(1, 66431, '\p{^Is_Sc=ugar}', "");
Expect(1, 66431, '\P{Is_Sc=ugar}', "");
Expect(0, 66431, '\P{^Is_Sc=ugar}', "");
Expect(1, 66461, '\p{Is_Sc=--Ugar}', "");
Expect(0, 66461, '\p{^Is_Sc=--Ugar}', "");
Expect(0, 66461, '\P{Is_Sc=--Ugar}', "");
Expect(1, 66461, '\P{^Is_Sc=--Ugar}', "");
Expect(0, 66431, '\p{Is_Sc=--Ugar}', "");
Expect(1, 66431, '\p{^Is_Sc=--Ugar}', "");
Expect(1, 66431, '\P{Is_Sc=--Ugar}', "");
Expect(0, 66431, '\P{^Is_Sc=--Ugar}', "");
Error('\p{Script=-:=Phags_PA}');
Error('\P{Script=-:=Phags_PA}');
Expect(1, 43127, '\p{Script:phagspa}', "");
Expect(0, 43127, '\p{^Script:phagspa}', "");
Expect(0, 43127, '\P{Script:phagspa}', "");
Expect(1, 43127, '\P{^Script:phagspa}', "");
Expect(0, 43071, '\p{Script:phagspa}', "");
Expect(1, 43071, '\p{^Script:phagspa}', "");
Expect(1, 43071, '\P{Script:phagspa}', "");
Expect(0, 43071, '\P{^Script:phagspa}', "");
Expect(1, 43127, '\p{Script= PHAGS pa}', "");
Expect(0, 43127, '\p{^Script= PHAGS pa}', "");
Expect(0, 43127, '\P{Script= PHAGS pa}', "");
Expect(1, 43127, '\P{^Script= PHAGS pa}', "");
Expect(0, 43071, '\p{Script= PHAGS pa}', "");
Expect(1, 43071, '\p{^Script= PHAGS pa}', "");
Expect(1, 43071, '\P{Script= PHAGS pa}', "");
Expect(0, 43071, '\P{^Script= PHAGS pa}', "");
Error('\p{Sc=:=_PHAG}');
Error('\P{Sc=:=_PHAG}');
Expect(1, 43127, '\p{Sc=phag}', "");
Expect(0, 43127, '\p{^Sc=phag}', "");
Expect(0, 43127, '\P{Sc=phag}', "");
Expect(1, 43127, '\P{^Sc=phag}', "");
Expect(0, 43071, '\p{Sc=phag}', "");
Expect(1, 43071, '\p{^Sc=phag}', "");
Expect(1, 43071, '\P{Sc=phag}', "");
Expect(0, 43071, '\P{^Sc=phag}', "");
Expect(1, 43127, '\p{Sc=_	Phag}', "");
Expect(0, 43127, '\p{^Sc=_	Phag}', "");
Expect(0, 43127, '\P{Sc=_	Phag}', "");
Expect(1, 43127, '\P{^Sc=_	Phag}', "");
Expect(0, 43071, '\p{Sc=_	Phag}', "");
Expect(1, 43071, '\p{^Sc=_	Phag}', "");
Expect(1, 43071, '\P{Sc=_	Phag}', "");
Expect(0, 43071, '\P{^Sc=_	Phag}', "");
Error('\p{Is_Script=	:=phags Pa}');
Error('\P{Is_Script=	:=phags Pa}');
Expect(1, 43127, '\p{Is_Script=phagspa}', "");
Expect(0, 43127, '\p{^Is_Script=phagspa}', "");
Expect(0, 43127, '\P{Is_Script=phagspa}', "");
Expect(1, 43127, '\P{^Is_Script=phagspa}', "");
Expect(0, 43071, '\p{Is_Script=phagspa}', "");
Expect(1, 43071, '\p{^Is_Script=phagspa}', "");
Expect(1, 43071, '\P{Is_Script=phagspa}', "");
Expect(0, 43071, '\P{^Is_Script=phagspa}', "");
Expect(1, 43127, '\p{Is_Script=		Phags	pa}', "");
Expect(0, 43127, '\p{^Is_Script=		Phags	pa}', "");
Expect(0, 43127, '\P{Is_Script=		Phags	pa}', "");
Expect(1, 43127, '\P{^Is_Script=		Phags	pa}', "");
Expect(0, 43071, '\p{Is_Script=		Phags	pa}', "");
Expect(1, 43071, '\p{^Is_Script=		Phags	pa}', "");
Expect(1, 43071, '\P{Is_Script=		Phags	pa}', "");
Expect(0, 43071, '\P{^Is_Script=		Phags	pa}', "");
Error('\p{Is_Sc: :=	-PHAG}');
Error('\P{Is_Sc: :=	-PHAG}');
Expect(1, 43127, '\p{Is_Sc=phag}', "");
Expect(0, 43127, '\p{^Is_Sc=phag}', "");
Expect(0, 43127, '\P{Is_Sc=phag}', "");
Expect(1, 43127, '\P{^Is_Sc=phag}', "");
Expect(0, 43071, '\p{Is_Sc=phag}', "");
Expect(1, 43071, '\p{^Is_Sc=phag}', "");
Expect(1, 43071, '\P{Is_Sc=phag}', "");
Expect(0, 43071, '\P{^Is_Sc=phag}', "");
Expect(1, 43127, '\p{Is_Sc= phag}', "");
Expect(0, 43127, '\p{^Is_Sc= phag}', "");
Expect(0, 43127, '\P{Is_Sc= phag}', "");
Expect(1, 43127, '\P{^Is_Sc= phag}', "");
Expect(0, 43071, '\p{Is_Sc= phag}', "");
Expect(1, 43071, '\p{^Is_Sc= phag}', "");
Expect(1, 43071, '\P{Is_Sc= phag}', "");
Expect(0, 43071, '\P{^Is_Sc= phag}', "");
Error('\p{Script=:= Armenian}');
Error('\P{Script=:= Armenian}');
Expect(1, 1366, '\p{Script=armenian}', "");
Expect(0, 1366, '\p{^Script=armenian}', "");
Expect(0, 1366, '\P{Script=armenian}', "");
Expect(1, 1366, '\P{^Script=armenian}', "");
Expect(0, 1328, '\p{Script=armenian}', "");
Expect(1, 1328, '\p{^Script=armenian}', "");
Expect(1, 1328, '\P{Script=armenian}', "");
Expect(0, 1328, '\P{^Script=armenian}', "");
Expect(1, 1366, '\p{Script=--armenian}', "");
Expect(0, 1366, '\p{^Script=--armenian}', "");
Expect(0, 1366, '\P{Script=--armenian}', "");
Expect(1, 1366, '\P{^Script=--armenian}', "");
Expect(0, 1328, '\p{Script=--armenian}', "");
Expect(1, 1328, '\p{^Script=--armenian}', "");
Expect(1, 1328, '\P{Script=--armenian}', "");
Expect(0, 1328, '\P{^Script=--armenian}', "");
Error('\p{Sc=_:=Armn}');
Error('\P{Sc=_:=Armn}');
Expect(1, 1366, '\p{Sc=armn}', "");
Expect(0, 1366, '\p{^Sc=armn}', "");
Expect(0, 1366, '\P{Sc=armn}', "");
Expect(1, 1366, '\P{^Sc=armn}', "");
Expect(0, 1328, '\p{Sc=armn}', "");
Expect(1, 1328, '\p{^Sc=armn}', "");
Expect(1, 1328, '\P{Sc=armn}', "");
Expect(0, 1328, '\P{^Sc=armn}', "");
Expect(1, 1366, '\p{Sc= Armn}', "");
Expect(0, 1366, '\p{^Sc= Armn}', "");
Expect(0, 1366, '\P{Sc= Armn}', "");
Expect(1, 1366, '\P{^Sc= Armn}', "");
Expect(0, 1328, '\p{Sc= Armn}', "");
Expect(1, 1328, '\p{^Sc= Armn}', "");
Expect(1, 1328, '\P{Sc= Armn}', "");
Expect(0, 1328, '\P{^Sc= Armn}', "");
Error('\p{Is_Script: :=armenian}');
Error('\P{Is_Script: :=armenian}');
Expect(1, 1366, '\p{Is_Script=armenian}', "");
Expect(0, 1366, '\p{^Is_Script=armenian}', "");
Expect(0, 1366, '\P{Is_Script=armenian}', "");
Expect(1, 1366, '\P{^Is_Script=armenian}', "");
Expect(0, 1328, '\p{Is_Script=armenian}', "");
Expect(1, 1328, '\p{^Is_Script=armenian}', "");
Expect(1, 1328, '\P{Is_Script=armenian}', "");
Expect(0, 1328, '\P{^Is_Script=armenian}', "");
Expect(1, 1366, '\p{Is_Script=- ARMENIAN}', "");
Expect(0, 1366, '\p{^Is_Script=- ARMENIAN}', "");
Expect(0, 1366, '\P{Is_Script=- ARMENIAN}', "");
Expect(1, 1366, '\P{^Is_Script=- ARMENIAN}', "");
Expect(0, 1328, '\p{Is_Script=- ARMENIAN}', "");
Expect(1, 1328, '\p{^Is_Script=- ARMENIAN}', "");
Expect(1, 1328, '\P{Is_Script=- ARMENIAN}', "");
Expect(0, 1328, '\P{^Is_Script=- ARMENIAN}', "");
Error('\p{Is_Sc=:=- Armn}');
Error('\P{Is_Sc=:=- Armn}');
Expect(1, 1366, '\p{Is_Sc=armn}', "");
Expect(0, 1366, '\p{^Is_Sc=armn}', "");
Expect(0, 1366, '\P{Is_Sc=armn}', "");
Expect(1, 1366, '\P{^Is_Sc=armn}', "");
Expect(0, 1328, '\p{Is_Sc=armn}', "");
Expect(1, 1328, '\p{^Is_Sc=armn}', "");
Expect(1, 1328, '\P{Is_Sc=armn}', "");
Expect(0, 1328, '\P{^Is_Sc=armn}', "");
Expect(1, 1366, '\p{Is_Sc= Armn}', "");
Expect(0, 1366, '\p{^Is_Sc= Armn}', "");
Expect(0, 1366, '\P{Is_Sc= Armn}', "");
Expect(1, 1366, '\P{^Is_Sc= Armn}', "");
Expect(0, 1328, '\p{Is_Sc= Armn}', "");
Expect(1, 1328, '\p{^Is_Sc= Armn}', "");
Expect(1, 1328, '\P{Is_Sc= Armn}', "");
Expect(0, 1328, '\P{^Is_Sc= Armn}', "");
Error('\p{Script=:=_Syriac}');
Error('\P{Script=:=_Syriac}');
Expect(1, 1805, '\p{Script:	syriac}', "");
Expect(0, 1805, '\p{^Script:	syriac}', "");
Expect(0, 1805, '\P{Script:	syriac}', "");
Expect(1, 1805, '\P{^Script:	syriac}', "");
Expect(0, 1791, '\p{Script:	syriac}', "");
Expect(1, 1791, '\p{^Script:	syriac}', "");
Expect(1, 1791, '\P{Script:	syriac}', "");
Expect(0, 1791, '\P{^Script:	syriac}', "");
Expect(1, 1805, '\p{Script=-	Syriac}', "");
Expect(0, 1805, '\p{^Script=-	Syriac}', "");
Expect(0, 1805, '\P{Script=-	Syriac}', "");
Expect(1, 1805, '\P{^Script=-	Syriac}', "");
Expect(0, 1791, '\p{Script=-	Syriac}', "");
Expect(1, 1791, '\p{^Script=-	Syriac}', "");
Expect(1, 1791, '\P{Script=-	Syriac}', "");
Expect(0, 1791, '\P{^Script=-	Syriac}', "");
Error('\p{Sc=_:=Syrc}');
Error('\P{Sc=_:=Syrc}');
Expect(1, 1805, '\p{Sc:	syrc}', "");
Expect(0, 1805, '\p{^Sc:	syrc}', "");
Expect(0, 1805, '\P{Sc:	syrc}', "");
Expect(1, 1805, '\P{^Sc:	syrc}', "");
Expect(0, 1791, '\p{Sc:	syrc}', "");
Expect(1, 1791, '\p{^Sc:	syrc}', "");
Expect(1, 1791, '\P{Sc:	syrc}', "");
Expect(0, 1791, '\P{^Sc:	syrc}', "");
Expect(1, 1805, '\p{Sc=_Syrc}', "");
Expect(0, 1805, '\p{^Sc=_Syrc}', "");
Expect(0, 1805, '\P{Sc=_Syrc}', "");
Expect(1, 1805, '\P{^Sc=_Syrc}', "");
Expect(0, 1791, '\p{Sc=_Syrc}', "");
Expect(1, 1791, '\p{^Sc=_Syrc}', "");
Expect(1, 1791, '\P{Sc=_Syrc}', "");
Expect(0, 1791, '\P{^Sc=_Syrc}', "");
Error('\p{Is_Script=/a/ syriac}');
Error('\P{Is_Script=/a/ syriac}');
Expect(1, 1805, '\p{Is_Script=syriac}', "");
Expect(0, 1805, '\p{^Is_Script=syriac}', "");
Expect(0, 1805, '\P{Is_Script=syriac}', "");
Expect(1, 1805, '\P{^Is_Script=syriac}', "");
Expect(0, 1791, '\p{Is_Script=syriac}', "");
Expect(1, 1791, '\p{^Is_Script=syriac}', "");
Expect(1, 1791, '\P{Is_Script=syriac}', "");
Expect(0, 1791, '\P{^Is_Script=syriac}', "");
Expect(1, 1805, '\p{Is_Script=-_Syriac}', "");
Expect(0, 1805, '\p{^Is_Script=-_Syriac}', "");
Expect(0, 1805, '\P{Is_Script=-_Syriac}', "");
Expect(1, 1805, '\P{^Is_Script=-_Syriac}', "");
Expect(0, 1791, '\p{Is_Script=-_Syriac}', "");
Expect(1, 1791, '\p{^Is_Script=-_Syriac}', "");
Expect(1, 1791, '\P{Is_Script=-_Syriac}', "");
Expect(0, 1791, '\P{^Is_Script=-_Syriac}', "");
Error('\p{Is_Sc=_-SYRC/a/}');
Error('\P{Is_Sc=_-SYRC/a/}');
Expect(1, 1805, '\p{Is_Sc=syrc}', "");
Expect(0, 1805, '\p{^Is_Sc=syrc}', "");
Expect(0, 1805, '\P{Is_Sc=syrc}', "");
Expect(1, 1805, '\P{^Is_Sc=syrc}', "");
Expect(0, 1791, '\p{Is_Sc=syrc}', "");
Expect(1, 1791, '\p{^Is_Sc=syrc}', "");
Expect(1, 1791, '\P{Is_Sc=syrc}', "");
Expect(0, 1791, '\P{^Is_Sc=syrc}', "");
Expect(1, 1805, '\p{Is_Sc=-_Syrc}', "");
Expect(0, 1805, '\p{^Is_Sc=-_Syrc}', "");
Expect(0, 1805, '\P{Is_Sc=-_Syrc}', "");
Expect(1, 1805, '\P{^Is_Sc=-_Syrc}', "");
Expect(0, 1791, '\p{Is_Sc=-_Syrc}', "");
Expect(1, 1791, '\p{^Is_Sc=-_Syrc}', "");
Expect(1, 1791, '\P{Is_Sc=-_Syrc}', "");
Expect(0, 1791, '\P{^Is_Sc=-_Syrc}', "");
Error('\p{Script=:=yi}');
Error('\P{Script=:=yi}');
Expect(1, 42124, '\p{Script=yi}', "");
Expect(0, 42124, '\p{^Script=yi}', "");
Expect(0, 42124, '\P{Script=yi}', "");
Expect(1, 42124, '\P{^Script=yi}', "");
Expect(0, 40959, '\p{Script=yi}', "");
Expect(1, 40959, '\p{^Script=yi}', "");
Expect(1, 40959, '\P{Script=yi}', "");
Expect(0, 40959, '\P{^Script=yi}', "");
Expect(1, 42124, '\p{Script=	 yi}', "");
Expect(0, 42124, '\p{^Script=	 yi}', "");
Expect(0, 42124, '\P{Script=	 yi}', "");
Expect(1, 42124, '\P{^Script=	 yi}', "");
Expect(0, 40959, '\p{Script=	 yi}', "");
Expect(1, 40959, '\p{^Script=	 yi}', "");
Expect(1, 40959, '\P{Script=	 yi}', "");
Expect(0, 40959, '\P{^Script=	 yi}', "");
Error('\p{Sc=	YIII:=}');
Error('\P{Sc=	YIII:=}');
Expect(1, 42124, '\p{Sc=yiii}', "");
Expect(0, 42124, '\p{^Sc=yiii}', "");
Expect(0, 42124, '\P{Sc=yiii}', "");
Expect(1, 42124, '\P{^Sc=yiii}', "");
Expect(0, 40959, '\p{Sc=yiii}', "");
Expect(1, 40959, '\p{^Sc=yiii}', "");
Expect(1, 40959, '\P{Sc=yiii}', "");
Expect(0, 40959, '\P{^Sc=yiii}', "");
Expect(1, 42124, '\p{Sc=-_Yiii}', "");
Expect(0, 42124, '\p{^Sc=-_Yiii}', "");
Expect(0, 42124, '\P{Sc=-_Yiii}', "");
Expect(1, 42124, '\P{^Sc=-_Yiii}', "");
Expect(0, 40959, '\p{Sc=-_Yiii}', "");
Expect(1, 40959, '\p{^Sc=-_Yiii}', "");
Expect(1, 40959, '\P{Sc=-_Yiii}', "");
Expect(0, 40959, '\P{^Sc=-_Yiii}', "");
Error('\p{Is_Script=:=	_Yi}');
Error('\P{Is_Script=:=	_Yi}');
Expect(1, 42124, '\p{Is_Script=yi}', "");
Expect(0, 42124, '\p{^Is_Script=yi}', "");
Expect(0, 42124, '\P{Is_Script=yi}', "");
Expect(1, 42124, '\P{^Is_Script=yi}', "");
Expect(0, 40959, '\p{Is_Script=yi}', "");
Expect(1, 40959, '\p{^Is_Script=yi}', "");
Expect(1, 40959, '\P{Is_Script=yi}', "");
Expect(0, 40959, '\P{^Is_Script=yi}', "");
Expect(1, 42124, '\p{Is_Script=- Yi}', "");
Expect(0, 42124, '\p{^Is_Script=- Yi}', "");
Expect(0, 42124, '\P{Is_Script=- Yi}', "");
Expect(1, 42124, '\P{^Is_Script=- Yi}', "");
Expect(0, 40959, '\p{Is_Script=- Yi}', "");
Expect(1, 40959, '\p{^Is_Script=- Yi}', "");
Expect(1, 40959, '\P{Is_Script=- Yi}', "");
Expect(0, 40959, '\P{^Is_Script=- Yi}', "");
Error('\p{Is_Sc= :=yiii}');
Error('\P{Is_Sc= :=yiii}');
Expect(1, 42124, '\p{Is_Sc=yiii}', "");
Expect(0, 42124, '\p{^Is_Sc=yiii}', "");
Expect(0, 42124, '\P{Is_Sc=yiii}', "");
Expect(1, 42124, '\P{^Is_Sc=yiii}', "");
Expect(0, 40959, '\p{Is_Sc=yiii}', "");
Expect(1, 40959, '\p{^Is_Sc=yiii}', "");
Expect(1, 40959, '\P{Is_Sc=yiii}', "");
Expect(0, 40959, '\P{^Is_Sc=yiii}', "");
Expect(1, 42124, '\p{Is_Sc=-YIII}', "");
Expect(0, 42124, '\p{^Is_Sc=-YIII}', "");
Expect(0, 42124, '\P{Is_Sc=-YIII}', "");
Expect(1, 42124, '\P{^Is_Sc=-YIII}', "");
Expect(0, 40959, '\p{Is_Sc=-YIII}', "");
Expect(1, 40959, '\p{^Is_Sc=-YIII}', "");
Expect(1, 40959, '\P{Is_Sc=-YIII}', "");
Expect(0, 40959, '\P{^Is_Sc=-YIII}', "");
Error('\p{Script=-	KATAKANA/a/}');
Error('\P{Script=-	KATAKANA/a/}');
Expect(1, 12538, '\p{Script=katakana}', "");
Expect(0, 12538, '\p{^Script=katakana}', "");
Expect(0, 12538, '\P{Script=katakana}', "");
Expect(1, 12538, '\P{^Script=katakana}', "");
Expect(0, 12448, '\p{Script=katakana}', "");
Expect(1, 12448, '\p{^Script=katakana}', "");
Expect(1, 12448, '\P{Script=katakana}', "");
Expect(0, 12448, '\P{^Script=katakana}', "");
Expect(1, 12538, '\p{Script=_Katakana}', "");
Expect(0, 12538, '\p{^Script=_Katakana}', "");
Expect(0, 12538, '\P{Script=_Katakana}', "");
Expect(1, 12538, '\P{^Script=_Katakana}', "");
Expect(0, 12448, '\p{Script=_Katakana}', "");
Expect(1, 12448, '\p{^Script=_Katakana}', "");
Expect(1, 12448, '\P{Script=_Katakana}', "");
Expect(0, 12448, '\P{^Script=_Katakana}', "");
Error('\p{Sc= Kana:=}');
Error('\P{Sc= Kana:=}');
Expect(1, 12538, '\p{Sc=kana}', "");
Expect(0, 12538, '\p{^Sc=kana}', "");
Expect(0, 12538, '\P{Sc=kana}', "");
Expect(1, 12538, '\P{^Sc=kana}', "");
Expect(0, 12448, '\p{Sc=kana}', "");
Expect(1, 12448, '\p{^Sc=kana}', "");
Expect(1, 12448, '\P{Sc=kana}', "");
Expect(0, 12448, '\P{^Sc=kana}', "");
Expect(1, 12538, '\p{Sc= -kana}', "");
Expect(0, 12538, '\p{^Sc= -kana}', "");
Expect(0, 12538, '\P{Sc= -kana}', "");
Expect(1, 12538, '\P{^Sc= -kana}', "");
Expect(0, 12448, '\p{Sc= -kana}', "");
Expect(1, 12448, '\p{^Sc= -kana}', "");
Expect(1, 12448, '\P{Sc= -kana}', "");
Expect(0, 12448, '\P{^Sc= -kana}', "");
Error('\p{Is_Script=_/a/KATAKANA}');
Error('\P{Is_Script=_/a/KATAKANA}');
Expect(1, 12538, '\p{Is_Script=katakana}', "");
Expect(0, 12538, '\p{^Is_Script=katakana}', "");
Expect(0, 12538, '\P{Is_Script=katakana}', "");
Expect(1, 12538, '\P{^Is_Script=katakana}', "");
Expect(0, 12448, '\p{Is_Script=katakana}', "");
Expect(1, 12448, '\p{^Is_Script=katakana}', "");
Expect(1, 12448, '\P{Is_Script=katakana}', "");
Expect(0, 12448, '\P{^Is_Script=katakana}', "");
Expect(1, 12538, '\p{Is_Script= -KATAKANA}', "");
Expect(0, 12538, '\p{^Is_Script= -KATAKANA}', "");
Expect(0, 12538, '\P{Is_Script= -KATAKANA}', "");
Expect(1, 12538, '\P{^Is_Script= -KATAKANA}', "");
Expect(0, 12448, '\p{Is_Script= -KATAKANA}', "");
Expect(1, 12448, '\p{^Is_Script= -KATAKANA}', "");
Expect(1, 12448, '\P{Is_Script= -KATAKANA}', "");
Expect(0, 12448, '\P{^Is_Script= -KATAKANA}', "");
Error('\p{Is_Sc::= Kana}');
Error('\P{Is_Sc::= Kana}');
Expect(1, 12538, '\p{Is_Sc:   kana}', "");
Expect(0, 12538, '\p{^Is_Sc:   kana}', "");
Expect(0, 12538, '\P{Is_Sc:   kana}', "");
Expect(1, 12538, '\P{^Is_Sc:   kana}', "");
Expect(0, 12448, '\p{Is_Sc:   kana}', "");
Expect(1, 12448, '\p{^Is_Sc:   kana}', "");
Expect(1, 12448, '\P{Is_Sc:   kana}', "");
Expect(0, 12448, '\P{^Is_Sc:   kana}', "");
Expect(1, 12538, '\p{Is_Sc=-	Kana}', "");
Expect(0, 12538, '\p{^Is_Sc=-	Kana}', "");
Expect(0, 12538, '\P{Is_Sc=-	Kana}', "");
Expect(1, 12538, '\P{^Is_Sc=-	Kana}', "");
Expect(0, 12448, '\p{Is_Sc=-	Kana}', "");
Expect(1, 12448, '\p{^Is_Sc=-	Kana}', "");
Expect(1, 12448, '\P{Is_Sc=-	Kana}', "");
Expect(0, 12448, '\P{^Is_Sc=-	Kana}', "");
Error('\p{Script:	 -glagolitic/a/}');
Error('\P{Script:	 -glagolitic/a/}');
Expect(1, 11310, '\p{Script=glagolitic}', "");
Expect(0, 11310, '\p{^Script=glagolitic}', "");
Expect(0, 11310, '\P{Script=glagolitic}', "");
Expect(1, 11310, '\P{^Script=glagolitic}', "");
Expect(0, 11263, '\p{Script=glagolitic}', "");
Expect(1, 11263, '\p{^Script=glagolitic}', "");
Expect(1, 11263, '\P{Script=glagolitic}', "");
Expect(0, 11263, '\P{^Script=glagolitic}', "");
Expect(1, 11310, '\p{Script= 	Glagolitic}', "");
Expect(0, 11310, '\p{^Script= 	Glagolitic}', "");
Expect(0, 11310, '\P{Script= 	Glagolitic}', "");
Expect(1, 11310, '\P{^Script= 	Glagolitic}', "");
Expect(0, 11263, '\p{Script= 	Glagolitic}', "");
Expect(1, 11263, '\p{^Script= 	Glagolitic}', "");
Expect(1, 11263, '\P{Script= 	Glagolitic}', "");
Expect(0, 11263, '\P{^Script= 	Glagolitic}', "");
Error('\p{Sc= 	GLAG:=}');
Error('\P{Sc= 	GLAG:=}');
Expect(1, 11310, '\p{Sc=glag}', "");
Expect(0, 11310, '\p{^Sc=glag}', "");
Expect(0, 11310, '\P{Sc=glag}', "");
Expect(1, 11310, '\P{^Sc=glag}', "");
Expect(0, 11263, '\p{Sc=glag}', "");
Expect(1, 11263, '\p{^Sc=glag}', "");
Expect(1, 11263, '\P{Sc=glag}', "");
Expect(0, 11263, '\P{^Sc=glag}', "");
Expect(1, 11310, '\p{Sc= _Glag}', "");
Expect(0, 11310, '\p{^Sc= _Glag}', "");
Expect(0, 11310, '\P{Sc= _Glag}', "");
Expect(1, 11310, '\P{^Sc= _Glag}', "");
Expect(0, 11263, '\p{Sc= _Glag}', "");
Expect(1, 11263, '\p{^Sc= _Glag}', "");
Expect(1, 11263, '\P{Sc= _Glag}', "");
Expect(0, 11263, '\P{^Sc= _Glag}', "");
Error('\p{Is_Script:    /a/Glagolitic}');
Error('\P{Is_Script:    /a/Glagolitic}');
Expect(1, 11310, '\p{Is_Script:glagolitic}', "");
Expect(0, 11310, '\p{^Is_Script:glagolitic}', "");
Expect(0, 11310, '\P{Is_Script:glagolitic}', "");
Expect(1, 11310, '\P{^Is_Script:glagolitic}', "");
Expect(0, 11263, '\p{Is_Script:glagolitic}', "");
Expect(1, 11263, '\p{^Is_Script:glagolitic}', "");
Expect(1, 11263, '\P{Is_Script:glagolitic}', "");
Expect(0, 11263, '\P{^Is_Script:glagolitic}', "");
Expect(1, 11310, '\p{Is_Script=--Glagolitic}', "");
Expect(0, 11310, '\p{^Is_Script=--Glagolitic}', "");
Expect(0, 11310, '\P{Is_Script=--Glagolitic}', "");
Expect(1, 11310, '\P{^Is_Script=--Glagolitic}', "");
Expect(0, 11263, '\p{Is_Script=--Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Script=--Glagolitic}', "");
Expect(1, 11263, '\P{Is_Script=--Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Script=--Glagolitic}', "");
Error('\p{Is_Sc= :=Glag}');
Error('\P{Is_Sc= :=Glag}');
Expect(1, 11310, '\p{Is_Sc=glag}', "");
Expect(0, 11310, '\p{^Is_Sc=glag}', "");
Expect(0, 11310, '\P{Is_Sc=glag}', "");
Expect(1, 11310, '\P{^Is_Sc=glag}', "");
Expect(0, 11263, '\p{Is_Sc=glag}', "");
Expect(1, 11263, '\p{^Is_Sc=glag}', "");
Expect(1, 11263, '\P{Is_Sc=glag}', "");
Expect(0, 11263, '\P{^Is_Sc=glag}', "");
Expect(1, 11310, '\p{Is_Sc= _glag}', "");
Expect(0, 11310, '\p{^Is_Sc= _glag}', "");
Expect(0, 11310, '\P{Is_Sc= _glag}', "");
Expect(1, 11310, '\P{^Is_Sc= _glag}', "");
Expect(0, 11263, '\p{Is_Sc= _glag}', "");
Expect(1, 11263, '\p{^Is_Sc= _glag}', "");
Expect(1, 11263, '\P{Is_Sc= _glag}', "");
Expect(0, 11263, '\P{^Is_Sc= _glag}', "");
Error('\p{Script=_/a/Thaana}');
Error('\P{Script=_/a/Thaana}');
Expect(1, 1969, '\p{Script=thaana}', "");
Expect(0, 1969, '\p{^Script=thaana}', "");
Expect(0, 1969, '\P{Script=thaana}', "");
Expect(1, 1969, '\P{^Script=thaana}', "");
Expect(0, 1919, '\p{Script=thaana}', "");
Expect(1, 1919, '\p{^Script=thaana}', "");
Expect(1, 1919, '\P{Script=thaana}', "");
Expect(0, 1919, '\P{^Script=thaana}', "");
Expect(1, 1969, '\p{Script=--thaana}', "");
Expect(0, 1969, '\p{^Script=--thaana}', "");
Expect(0, 1969, '\P{Script=--thaana}', "");
Expect(1, 1969, '\P{^Script=--thaana}', "");
Expect(0, 1919, '\p{Script=--thaana}', "");
Expect(1, 1919, '\p{^Script=--thaana}', "");
Expect(1, 1919, '\P{Script=--thaana}', "");
Expect(0, 1919, '\P{^Script=--thaana}', "");
Error('\p{Sc=_:=THAA}');
Error('\P{Sc=_:=THAA}');
Expect(1, 1969, '\p{Sc=thaa}', "");
Expect(0, 1969, '\p{^Sc=thaa}', "");
Expect(0, 1969, '\P{Sc=thaa}', "");
Expect(1, 1969, '\P{^Sc=thaa}', "");
Expect(0, 1919, '\p{Sc=thaa}', "");
Expect(1, 1919, '\p{^Sc=thaa}', "");
Expect(1, 1919, '\P{Sc=thaa}', "");
Expect(0, 1919, '\P{^Sc=thaa}', "");
Expect(1, 1969, '\p{Sc= _THAA}', "");
Expect(0, 1969, '\p{^Sc= _THAA}', "");
Expect(0, 1969, '\P{Sc= _THAA}', "");
Expect(1, 1969, '\P{^Sc= _THAA}', "");
Expect(0, 1919, '\p{Sc= _THAA}', "");
Expect(1, 1919, '\p{^Sc= _THAA}', "");
Expect(1, 1919, '\P{Sc= _THAA}', "");
Expect(0, 1919, '\P{^Sc= _THAA}', "");
Error('\p{Is_Script=-_THAANA/a/}');
Error('\P{Is_Script=-_THAANA/a/}');
Expect(1, 1969, '\p{Is_Script=thaana}', "");
Expect(0, 1969, '\p{^Is_Script=thaana}', "");
Expect(0, 1969, '\P{Is_Script=thaana}', "");
Expect(1, 1969, '\P{^Is_Script=thaana}', "");
Expect(0, 1919, '\p{Is_Script=thaana}', "");
Expect(1, 1919, '\p{^Is_Script=thaana}', "");
Expect(1, 1919, '\P{Is_Script=thaana}', "");
Expect(0, 1919, '\P{^Is_Script=thaana}', "");
Expect(1, 1969, '\p{Is_Script= thaana}', "");
Expect(0, 1969, '\p{^Is_Script= thaana}', "");
Expect(0, 1969, '\P{Is_Script= thaana}', "");
Expect(1, 1969, '\P{^Is_Script= thaana}', "");
Expect(0, 1919, '\p{Is_Script= thaana}', "");
Expect(1, 1919, '\p{^Is_Script= thaana}', "");
Expect(1, 1919, '\P{Is_Script= thaana}', "");
Expect(0, 1919, '\P{^Is_Script= thaana}', "");
Error('\p{Is_Sc=:=__Thaa}');
Error('\P{Is_Sc=:=__Thaa}');
Expect(1, 1969, '\p{Is_Sc=thaa}', "");
Expect(0, 1969, '\p{^Is_Sc=thaa}', "");
Expect(0, 1969, '\P{Is_Sc=thaa}', "");
Expect(1, 1969, '\P{^Is_Sc=thaa}', "");
Expect(0, 1919, '\p{Is_Sc=thaa}', "");
Expect(1, 1919, '\p{^Is_Sc=thaa}', "");
Expect(1, 1919, '\P{Is_Sc=thaa}', "");
Expect(0, 1919, '\P{^Is_Sc=thaa}', "");
Expect(1, 1969, '\p{Is_Sc= -THAA}', "");
Expect(0, 1969, '\p{^Is_Sc= -THAA}', "");
Expect(0, 1969, '\P{Is_Sc= -THAA}', "");
Expect(1, 1969, '\P{^Is_Sc= -THAA}', "");
Expect(0, 1919, '\p{Is_Sc= -THAA}', "");
Expect(1, 1919, '\p{^Is_Sc= -THAA}', "");
Expect(1, 1919, '\P{Is_Sc= -THAA}', "");
Expect(0, 1919, '\P{^Is_Sc= -THAA}', "");
Error('\p{Script=_/a/lepcha}');
Error('\P{Script=_/a/lepcha}');
Expect(1, 7223, '\p{Script=lepcha}', "");
Expect(0, 7223, '\p{^Script=lepcha}', "");
Expect(0, 7223, '\P{Script=lepcha}', "");
Expect(1, 7223, '\P{^Script=lepcha}', "");
Expect(0, 7167, '\p{Script=lepcha}', "");
Expect(1, 7167, '\p{^Script=lepcha}', "");
Expect(1, 7167, '\P{Script=lepcha}', "");
Expect(0, 7167, '\P{^Script=lepcha}', "");
Expect(1, 7223, '\p{Script=__Lepcha}', "");
Expect(0, 7223, '\p{^Script=__Lepcha}', "");
Expect(0, 7223, '\P{Script=__Lepcha}', "");
Expect(1, 7223, '\P{^Script=__Lepcha}', "");
Expect(0, 7167, '\p{Script=__Lepcha}', "");
Expect(1, 7167, '\p{^Script=__Lepcha}', "");
Expect(1, 7167, '\P{Script=__Lepcha}', "");
Expect(0, 7167, '\P{^Script=__Lepcha}', "");
Error('\p{Sc=:=-Lepc}');
Error('\P{Sc=:=-Lepc}');
Expect(1, 7223, '\p{Sc=lepc}', "");
Expect(0, 7223, '\p{^Sc=lepc}', "");
Expect(0, 7223, '\P{Sc=lepc}', "");
Expect(1, 7223, '\P{^Sc=lepc}', "");
Expect(0, 7167, '\p{Sc=lepc}', "");
Expect(1, 7167, '\p{^Sc=lepc}', "");
Expect(1, 7167, '\P{Sc=lepc}', "");
Expect(0, 7167, '\P{^Sc=lepc}', "");
Expect(1, 7223, '\p{Sc=	_LEPC}', "");
Expect(0, 7223, '\p{^Sc=	_LEPC}', "");
Expect(0, 7223, '\P{Sc=	_LEPC}', "");
Expect(1, 7223, '\P{^Sc=	_LEPC}', "");
Expect(0, 7167, '\p{Sc=	_LEPC}', "");
Expect(1, 7167, '\p{^Sc=	_LEPC}', "");
Expect(1, 7167, '\P{Sc=	_LEPC}', "");
Expect(0, 7167, '\P{^Sc=	_LEPC}', "");
Error('\p{Is_Script:	/a/LEPCHA}');
Error('\P{Is_Script:	/a/LEPCHA}');
Expect(1, 7223, '\p{Is_Script=lepcha}', "");
Expect(0, 7223, '\p{^Is_Script=lepcha}', "");
Expect(0, 7223, '\P{Is_Script=lepcha}', "");
Expect(1, 7223, '\P{^Is_Script=lepcha}', "");
Expect(0, 7167, '\p{Is_Script=lepcha}', "");
Expect(1, 7167, '\p{^Is_Script=lepcha}', "");
Expect(1, 7167, '\P{Is_Script=lepcha}', "");
Expect(0, 7167, '\P{^Is_Script=lepcha}', "");
Expect(1, 7223, '\p{Is_Script= LEPCHA}', "");
Expect(0, 7223, '\p{^Is_Script= LEPCHA}', "");
Expect(0, 7223, '\P{Is_Script= LEPCHA}', "");
Expect(1, 7223, '\P{^Is_Script= LEPCHA}', "");
Expect(0, 7167, '\p{Is_Script= LEPCHA}', "");
Expect(1, 7167, '\p{^Is_Script= LEPCHA}', "");
Expect(1, 7167, '\P{Is_Script= LEPCHA}', "");
Expect(0, 7167, '\P{^Is_Script= LEPCHA}', "");
Error('\p{Is_Sc=/a/-LEPC}');
Error('\P{Is_Sc=/a/-LEPC}');
Expect(1, 7223, '\p{Is_Sc=lepc}', "");
Expect(0, 7223, '\p{^Is_Sc=lepc}', "");
Expect(0, 7223, '\P{Is_Sc=lepc}', "");
Expect(1, 7223, '\P{^Is_Sc=lepc}', "");
Expect(0, 7167, '\p{Is_Sc=lepc}', "");
Expect(1, 7167, '\p{^Is_Sc=lepc}', "");
Expect(1, 7167, '\P{Is_Sc=lepc}', "");
Expect(0, 7167, '\P{^Is_Sc=lepc}', "");
Expect(1, 7223, '\p{Is_Sc:	 Lepc}', "");
Expect(0, 7223, '\p{^Is_Sc:	 Lepc}', "");
Expect(0, 7223, '\P{Is_Sc:	 Lepc}', "");
Expect(1, 7223, '\P{^Is_Sc:	 Lepc}', "");
Expect(0, 7167, '\p{Is_Sc:	 Lepc}', "");
Expect(1, 7167, '\p{^Is_Sc:	 Lepc}', "");
Expect(1, 7167, '\P{Is_Sc:	 Lepc}', "");
Expect(0, 7167, '\P{^Is_Sc:	 Lepc}', "");
Error('\p{Script=-/a/Coptic}');
Error('\P{Script=-/a/Coptic}');
Expect(1, 1007, '\p{Script=coptic}', "");
Expect(0, 1007, '\p{^Script=coptic}', "");
Expect(0, 1007, '\P{Script=coptic}', "");
Expect(1, 1007, '\P{^Script=coptic}', "");
Expect(0, 993, '\p{Script=coptic}', "");
Expect(1, 993, '\p{^Script=coptic}', "");
Expect(1, 993, '\P{Script=coptic}', "");
Expect(0, 993, '\P{^Script=coptic}', "");
Expect(1, 1007, '\p{Script=_coptic}', "");
Expect(0, 1007, '\p{^Script=_coptic}', "");
Expect(0, 1007, '\P{Script=_coptic}', "");
Expect(1, 1007, '\P{^Script=_coptic}', "");
Expect(0, 993, '\p{Script=_coptic}', "");
Expect(1, 993, '\p{^Script=_coptic}', "");
Expect(1, 993, '\P{Script=_coptic}', "");
Expect(0, 993, '\P{^Script=_coptic}', "");
Error('\p{Sc=/a/  Copt}');
Error('\P{Sc=/a/  Copt}');
Expect(1, 1007, '\p{Sc=copt}', "");
Expect(0, 1007, '\p{^Sc=copt}', "");
Expect(0, 1007, '\P{Sc=copt}', "");
Expect(1, 1007, '\P{^Sc=copt}', "");
Expect(0, 993, '\p{Sc=copt}', "");
Expect(1, 993, '\p{^Sc=copt}', "");
Expect(1, 993, '\P{Sc=copt}', "");
Expect(0, 993, '\P{^Sc=copt}', "");
Expect(1, 1007, '\p{Sc= -Copt}', "");
Expect(0, 1007, '\p{^Sc= -Copt}', "");
Expect(0, 1007, '\P{Sc= -Copt}', "");
Expect(1, 1007, '\P{^Sc= -Copt}', "");
Expect(0, 993, '\p{Sc= -Copt}', "");
Expect(1, 993, '\p{^Sc= -Copt}', "");
Expect(1, 993, '\P{Sc= -Copt}', "");
Expect(0, 993, '\P{^Sc= -Copt}', "");
Error('\p{Is_Script=:=Qaac}');
Error('\P{Is_Script=:=Qaac}');
Expect(1, 1007, '\p{Is_Script:	qaac}', "");
Expect(0, 1007, '\p{^Is_Script:	qaac}', "");
Expect(0, 1007, '\P{Is_Script:	qaac}', "");
Expect(1, 1007, '\P{^Is_Script:	qaac}', "");
Expect(0, 993, '\p{Is_Script:	qaac}', "");
Expect(1, 993, '\p{^Is_Script:	qaac}', "");
Expect(1, 993, '\P{Is_Script:	qaac}', "");
Expect(0, 993, '\P{^Is_Script:	qaac}', "");
Expect(1, 1007, '\p{Is_Script:   -_QAAC}', "");
Expect(0, 1007, '\p{^Is_Script:   -_QAAC}', "");
Expect(0, 1007, '\P{Is_Script:   -_QAAC}', "");
Expect(1, 1007, '\P{^Is_Script:   -_QAAC}', "");
Expect(0, 993, '\p{Is_Script:   -_QAAC}', "");
Expect(1, 993, '\p{^Is_Script:   -_QAAC}', "");
Expect(1, 993, '\P{Is_Script:   -_QAAC}', "");
Expect(0, 993, '\P{^Is_Script:   -_QAAC}', "");
Error('\p{Is_Sc=		Coptic:=}');
Error('\P{Is_Sc=		Coptic:=}');
Expect(1, 1007, '\p{Is_Sc=coptic}', "");
Expect(0, 1007, '\p{^Is_Sc=coptic}', "");
Expect(0, 1007, '\P{Is_Sc=coptic}', "");
Expect(1, 1007, '\P{^Is_Sc=coptic}', "");
Expect(0, 993, '\p{Is_Sc=coptic}', "");
Expect(1, 993, '\p{^Is_Sc=coptic}', "");
Expect(1, 993, '\P{Is_Sc=coptic}', "");
Expect(0, 993, '\P{^Is_Sc=coptic}', "");
Expect(1, 1007, '\p{Is_Sc=_coptic}', "");
Expect(0, 1007, '\p{^Is_Sc=_coptic}', "");
Expect(0, 1007, '\P{Is_Sc=_coptic}', "");
Expect(1, 1007, '\P{^Is_Sc=_coptic}', "");
Expect(0, 993, '\p{Is_Sc=_coptic}', "");
Expect(1, 993, '\p{^Is_Sc=_coptic}', "");
Expect(1, 993, '\P{Is_Sc=_coptic}', "");
Expect(0, 993, '\P{^Is_Sc=_coptic}', "");
Error('\p{Script=Katakana_Or_Hiragana}');
Error('\P{Script=Katakana_Or_Hiragana}');
Error('\p{Sc=Hrkt}');
Error('\P{Sc=Hrkt}');
Error('\p{Is_Script=Katakana_Or_Hiragana}');
Error('\P{Is_Script=Katakana_Or_Hiragana}');
Error('\p{Is_Sc=Hrkt}');
Error('\P{Is_Sc=Hrkt}');
Error('\p{Script=/a/ -Balinese}');
Error('\P{Script=/a/ -Balinese}');
Expect(1, 6987, '\p{Script: balinese}', "");
Expect(0, 6987, '\p{^Script: balinese}', "");
Expect(0, 6987, '\P{Script: balinese}', "");
Expect(1, 6987, '\P{^Script: balinese}', "");
Expect(0, 6911, '\p{Script: balinese}', "");
Expect(1, 6911, '\p{^Script: balinese}', "");
Expect(1, 6911, '\P{Script: balinese}', "");
Expect(0, 6911, '\P{^Script: balinese}', "");
Expect(1, 6987, '\p{Script=_Balinese}', "");
Expect(0, 6987, '\p{^Script=_Balinese}', "");
Expect(0, 6987, '\P{Script=_Balinese}', "");
Expect(1, 6987, '\P{^Script=_Balinese}', "");
Expect(0, 6911, '\p{Script=_Balinese}', "");
Expect(1, 6911, '\p{^Script=_Balinese}', "");
Expect(1, 6911, '\P{Script=_Balinese}', "");
Expect(0, 6911, '\P{^Script=_Balinese}', "");
Error('\p{Sc=__BALI:=}');
Error('\P{Sc=__BALI:=}');
Expect(1, 6987, '\p{Sc=bali}', "");
Expect(0, 6987, '\p{^Sc=bali}', "");
Expect(0, 6987, '\P{Sc=bali}', "");
Expect(1, 6987, '\P{^Sc=bali}', "");
Expect(0, 6911, '\p{Sc=bali}', "");
Expect(1, 6911, '\p{^Sc=bali}', "");
Expect(1, 6911, '\P{Sc=bali}', "");
Expect(0, 6911, '\P{^Sc=bali}', "");
Expect(1, 6987, '\p{Sc=	 Bali}', "");
Expect(0, 6987, '\p{^Sc=	 Bali}', "");
Expect(0, 6987, '\P{Sc=	 Bali}', "");
Expect(1, 6987, '\P{^Sc=	 Bali}', "");
Expect(0, 6911, '\p{Sc=	 Bali}', "");
Expect(1, 6911, '\p{^Sc=	 Bali}', "");
Expect(1, 6911, '\P{Sc=	 Bali}', "");
Expect(0, 6911, '\P{^Sc=	 Bali}', "");
Error('\p{Is_Script=:= 	Balinese}');
Error('\P{Is_Script=:= 	Balinese}');
Expect(1, 6987, '\p{Is_Script=balinese}', "");
Expect(0, 6987, '\p{^Is_Script=balinese}', "");
Expect(0, 6987, '\P{Is_Script=balinese}', "");
Expect(1, 6987, '\P{^Is_Script=balinese}', "");
Expect(0, 6911, '\p{Is_Script=balinese}', "");
Expect(1, 6911, '\p{^Is_Script=balinese}', "");
Expect(1, 6911, '\P{Is_Script=balinese}', "");
Expect(0, 6911, '\P{^Is_Script=balinese}', "");
Expect(1, 6987, '\p{Is_Script=	Balinese}', "");
Expect(0, 6987, '\p{^Is_Script=	Balinese}', "");
Expect(0, 6987, '\P{Is_Script=	Balinese}', "");
Expect(1, 6987, '\P{^Is_Script=	Balinese}', "");
Expect(0, 6911, '\p{Is_Script=	Balinese}', "");
Expect(1, 6911, '\p{^Is_Script=	Balinese}', "");
Expect(1, 6911, '\P{Is_Script=	Balinese}', "");
Expect(0, 6911, '\P{^Is_Script=	Balinese}', "");
Error('\p{Is_Sc=_/a/BALI}');
Error('\P{Is_Sc=_/a/BALI}');
Expect(1, 6987, '\p{Is_Sc=bali}', "");
Expect(0, 6987, '\p{^Is_Sc=bali}', "");
Expect(0, 6987, '\P{Is_Sc=bali}', "");
Expect(1, 6987, '\P{^Is_Sc=bali}', "");
Expect(0, 6911, '\p{Is_Sc=bali}', "");
Expect(1, 6911, '\p{^Is_Sc=bali}', "");
Expect(1, 6911, '\P{Is_Sc=bali}', "");
Expect(0, 6911, '\P{^Is_Sc=bali}', "");
Expect(1, 6987, '\p{Is_Sc= 	bali}', "");
Expect(0, 6987, '\p{^Is_Sc= 	bali}', "");
Expect(0, 6987, '\P{Is_Sc= 	bali}', "");
Expect(1, 6987, '\P{^Is_Sc= 	bali}', "");
Expect(0, 6911, '\p{Is_Sc= 	bali}', "");
Expect(1, 6911, '\p{^Is_Sc= 	bali}', "");
Expect(1, 6911, '\P{Is_Sc= 	bali}', "");
Expect(0, 6911, '\P{^Is_Sc= 	bali}', "");
Error('\p{Script= :=TAGBANWA}');
Error('\P{Script= :=TAGBANWA}');
Expect(1, 5996, '\p{Script:	tagbanwa}', "");
Expect(0, 5996, '\p{^Script:	tagbanwa}', "");
Expect(0, 5996, '\P{Script:	tagbanwa}', "");
Expect(1, 5996, '\P{^Script:	tagbanwa}', "");
Expect(0, 5983, '\p{Script:	tagbanwa}', "");
Expect(1, 5983, '\p{^Script:	tagbanwa}', "");
Expect(1, 5983, '\P{Script:	tagbanwa}', "");
Expect(0, 5983, '\P{^Script:	tagbanwa}', "");
Expect(1, 5996, '\p{Script=	 tagbanwa}', "");
Expect(0, 5996, '\p{^Script=	 tagbanwa}', "");
Expect(0, 5996, '\P{Script=	 tagbanwa}', "");
Expect(1, 5996, '\P{^Script=	 tagbanwa}', "");
Expect(0, 5983, '\p{Script=	 tagbanwa}', "");
Expect(1, 5983, '\p{^Script=	 tagbanwa}', "");
Expect(1, 5983, '\P{Script=	 tagbanwa}', "");
Expect(0, 5983, '\P{^Script=	 tagbanwa}', "");
Error('\p{Sc=	:=tagb}');
Error('\P{Sc=	:=tagb}');
Expect(1, 5996, '\p{Sc=tagb}', "");
Expect(0, 5996, '\p{^Sc=tagb}', "");
Expect(0, 5996, '\P{Sc=tagb}', "");
Expect(1, 5996, '\P{^Sc=tagb}', "");
Expect(0, 5983, '\p{Sc=tagb}', "");
Expect(1, 5983, '\p{^Sc=tagb}', "");
Expect(1, 5983, '\P{Sc=tagb}', "");
Expect(0, 5983, '\P{^Sc=tagb}', "");
Expect(1, 5996, '\p{Sc:--TAGB}', "");
Expect(0, 5996, '\p{^Sc:--TAGB}', "");
Expect(0, 5996, '\P{Sc:--TAGB}', "");
Expect(1, 5996, '\P{^Sc:--TAGB}', "");
Expect(0, 5983, '\p{Sc:--TAGB}', "");
Expect(1, 5983, '\p{^Sc:--TAGB}', "");
Expect(1, 5983, '\P{Sc:--TAGB}', "");
Expect(0, 5983, '\P{^Sc:--TAGB}', "");
Error('\p{Is_Script=/a/	Tagbanwa}');
Error('\P{Is_Script=/a/	Tagbanwa}');
Expect(1, 5996, '\p{Is_Script=tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script=tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script=tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script=tagbanwa}', "");
Expect(1, 5996, '\p{Is_Script=- Tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script=- Tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script=- Tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script=- Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script=- Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script=- Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script=- Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script=- Tagbanwa}', "");
Error('\p{Is_Sc=  Tagb:=}');
Error('\P{Is_Sc=  Tagb:=}');
Expect(1, 5996, '\p{Is_Sc:   tagb}', "");
Expect(0, 5996, '\p{^Is_Sc:   tagb}', "");
Expect(0, 5996, '\P{Is_Sc:   tagb}', "");
Expect(1, 5996, '\P{^Is_Sc:   tagb}', "");
Expect(0, 5983, '\p{Is_Sc:   tagb}', "");
Expect(1, 5983, '\p{^Is_Sc:   tagb}', "");
Expect(1, 5983, '\P{Is_Sc:   tagb}', "");
Expect(0, 5983, '\P{^Is_Sc:   tagb}', "");
Expect(1, 5996, '\p{Is_Sc= Tagb}', "");
Expect(0, 5996, '\p{^Is_Sc= Tagb}', "");
Expect(0, 5996, '\P{Is_Sc= Tagb}', "");
Expect(1, 5996, '\P{^Is_Sc= Tagb}', "");
Expect(0, 5983, '\p{Is_Sc= Tagb}', "");
Expect(1, 5983, '\p{^Is_Sc= Tagb}', "");
Expect(1, 5983, '\P{Is_Sc= Tagb}', "");
Expect(0, 5983, '\P{^Is_Sc= Tagb}', "");
Error('\p{Script:	Syloti:=NAGRI}');
Error('\P{Script:	Syloti:=NAGRI}');
Expect(1, 43051, '\p{Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Script=sylotinagri}', "");
Expect(0, 43051, '\P{Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Script=sylotinagri}', "");
Expect(0, 43007, '\p{Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Script=sylotinagri}', "");
Expect(1, 43007, '\P{Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Script=sylotinagri}', "");
Expect(1, 43051, '\p{Script=-_SYLOTI Nagri}', "");
Expect(0, 43051, '\p{^Script=-_SYLOTI Nagri}', "");
Expect(0, 43051, '\P{Script=-_SYLOTI Nagri}', "");
Expect(1, 43051, '\P{^Script=-_SYLOTI Nagri}', "");
Expect(0, 43007, '\p{Script=-_SYLOTI Nagri}', "");
Expect(1, 43007, '\p{^Script=-_SYLOTI Nagri}', "");
Expect(1, 43007, '\P{Script=-_SYLOTI Nagri}', "");
Expect(0, 43007, '\P{^Script=-_SYLOTI Nagri}', "");
Error('\p{Sc=/a/- SYLO}');
Error('\P{Sc=/a/- SYLO}');
Expect(1, 43051, '\p{Sc=sylo}', "");
Expect(0, 43051, '\p{^Sc=sylo}', "");
Expect(0, 43051, '\P{Sc=sylo}', "");
Expect(1, 43051, '\P{^Sc=sylo}', "");
Expect(0, 43007, '\p{Sc=sylo}', "");
Expect(1, 43007, '\p{^Sc=sylo}', "");
Expect(1, 43007, '\P{Sc=sylo}', "");
Expect(0, 43007, '\P{^Sc=sylo}', "");
Expect(1, 43051, '\p{Sc= -Sylo}', "");
Expect(0, 43051, '\p{^Sc= -Sylo}', "");
Expect(0, 43051, '\P{Sc= -Sylo}', "");
Expect(1, 43051, '\P{^Sc= -Sylo}', "");
Expect(0, 43007, '\p{Sc= -Sylo}', "");
Expect(1, 43007, '\p{^Sc= -Sylo}', "");
Expect(1, 43007, '\P{Sc= -Sylo}', "");
Expect(0, 43007, '\P{^Sc= -Sylo}', "");
Error('\p{Is_Script= :=syloti-Nagri}');
Error('\P{Is_Script= :=syloti-Nagri}');
Expect(1, 43051, '\p{Is_Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Is_Script=sylotinagri}', "");
Expect(0, 43051, '\P{Is_Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Is_Script=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Script=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Script=sylotinagri}', "");
Expect(1, 43051, '\p{Is_Script=		Syloti	Nagri}', "");
Expect(0, 43051, '\p{^Is_Script=		Syloti	Nagri}', "");
Expect(0, 43051, '\P{Is_Script=		Syloti	Nagri}', "");
Expect(1, 43051, '\P{^Is_Script=		Syloti	Nagri}', "");
Expect(0, 43007, '\p{Is_Script=		Syloti	Nagri}', "");
Expect(1, 43007, '\p{^Is_Script=		Syloti	Nagri}', "");
Expect(1, 43007, '\P{Is_Script=		Syloti	Nagri}', "");
Expect(0, 43007, '\P{^Is_Script=		Syloti	Nagri}', "");
Error('\p{Is_Sc=/a/ Sylo}');
Error('\P{Is_Sc=/a/ Sylo}');
Expect(1, 43051, '\p{Is_Sc=sylo}', "");
Expect(0, 43051, '\p{^Is_Sc=sylo}', "");
Expect(0, 43051, '\P{Is_Sc=sylo}', "");
Expect(1, 43051, '\P{^Is_Sc=sylo}', "");
Expect(0, 43007, '\p{Is_Sc=sylo}', "");
Expect(1, 43007, '\p{^Is_Sc=sylo}', "");
Expect(1, 43007, '\P{Is_Sc=sylo}', "");
Expect(0, 43007, '\P{^Is_Sc=sylo}', "");
Expect(1, 43051, '\p{Is_Sc=	-Sylo}', "");
Expect(0, 43051, '\p{^Is_Sc=	-Sylo}', "");
Expect(0, 43051, '\P{Is_Sc=	-Sylo}', "");
Expect(1, 43051, '\P{^Is_Sc=	-Sylo}', "");
Expect(0, 43007, '\p{Is_Sc=	-Sylo}', "");
Expect(1, 43007, '\p{^Is_Sc=	-Sylo}', "");
Expect(1, 43007, '\P{Is_Sc=	-Sylo}', "");
Expect(0, 43007, '\P{^Is_Sc=	-Sylo}', "");
Error('\p{Script=:= _MeeteiMAYEK}');
Error('\P{Script=:= _MeeteiMAYEK}');
Expect(1, 44013, '\p{Script=meeteimayek}', "");
Expect(0, 44013, '\p{^Script=meeteimayek}', "");
Expect(0, 44013, '\P{Script=meeteimayek}', "");
Expect(1, 44013, '\P{^Script=meeteimayek}', "");
Expect(0, 43967, '\p{Script=meeteimayek}', "");
Expect(1, 43967, '\p{^Script=meeteimayek}', "");
Expect(1, 43967, '\P{Script=meeteimayek}', "");
Expect(0, 43967, '\P{^Script=meeteimayek}', "");
Expect(1, 44013, '\p{Script=__Meetei-mayek}', "");
Expect(0, 44013, '\p{^Script=__Meetei-mayek}', "");
Expect(0, 44013, '\P{Script=__Meetei-mayek}', "");
Expect(1, 44013, '\P{^Script=__Meetei-mayek}', "");
Expect(0, 43967, '\p{Script=__Meetei-mayek}', "");
Expect(1, 43967, '\p{^Script=__Meetei-mayek}', "");
Expect(1, 43967, '\P{Script=__Meetei-mayek}', "");
Expect(0, 43967, '\P{^Script=__Meetei-mayek}', "");
Error('\p{Sc=:=-MTEI}');
Error('\P{Sc=:=-MTEI}');
Expect(1, 44013, '\p{Sc=mtei}', "");
Expect(0, 44013, '\p{^Sc=mtei}', "");
Expect(0, 44013, '\P{Sc=mtei}', "");
Expect(1, 44013, '\P{^Sc=mtei}', "");
Expect(0, 43967, '\p{Sc=mtei}', "");
Expect(1, 43967, '\p{^Sc=mtei}', "");
Expect(1, 43967, '\P{Sc=mtei}', "");
Expect(0, 43967, '\P{^Sc=mtei}', "");
Expect(1, 44013, '\p{Sc=_ mtei}', "");
Expect(0, 44013, '\p{^Sc=_ mtei}', "");
Expect(0, 44013, '\P{Sc=_ mtei}', "");
Expect(1, 44013, '\P{^Sc=_ mtei}', "");
Expect(0, 43967, '\p{Sc=_ mtei}', "");
Expect(1, 43967, '\p{^Sc=_ mtei}', "");
Expect(1, 43967, '\P{Sc=_ mtei}', "");
Expect(0, 43967, '\P{^Sc=_ mtei}', "");
Error('\p{Is_Script=	 Meetei:=Mayek}');
Error('\P{Is_Script=	 Meetei:=Mayek}');
Expect(1, 44013, '\p{Is_Script=meeteimayek}', "");
Expect(0, 44013, '\p{^Is_Script=meeteimayek}', "");
Expect(0, 44013, '\P{Is_Script=meeteimayek}', "");
Expect(1, 44013, '\P{^Is_Script=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Script=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Script=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Script=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Script=meeteimayek}', "");
Expect(1, 44013, '\p{Is_Script=-meetei	Mayek}', "");
Expect(0, 44013, '\p{^Is_Script=-meetei	Mayek}', "");
Expect(0, 44013, '\P{Is_Script=-meetei	Mayek}', "");
Expect(1, 44013, '\P{^Is_Script=-meetei	Mayek}', "");
Expect(0, 43967, '\p{Is_Script=-meetei	Mayek}', "");
Expect(1, 43967, '\p{^Is_Script=-meetei	Mayek}', "");
Expect(1, 43967, '\P{Is_Script=-meetei	Mayek}', "");
Expect(0, 43967, '\P{^Is_Script=-meetei	Mayek}', "");
Error('\p{Is_Sc=:=	MTEI}');
Error('\P{Is_Sc=:=	MTEI}');
Expect(1, 44013, '\p{Is_Sc=mtei}', "");
Expect(0, 44013, '\p{^Is_Sc=mtei}', "");
Expect(0, 44013, '\P{Is_Sc=mtei}', "");
Expect(1, 44013, '\P{^Is_Sc=mtei}', "");
Expect(0, 43967, '\p{Is_Sc=mtei}', "");
Expect(1, 43967, '\p{^Is_Sc=mtei}', "");
Expect(1, 43967, '\P{Is_Sc=mtei}', "");
Expect(0, 43967, '\P{^Is_Sc=mtei}', "");
Expect(1, 44013, '\p{Is_Sc=--Mtei}', "");
Expect(0, 44013, '\p{^Is_Sc=--Mtei}', "");
Expect(0, 44013, '\P{Is_Sc=--Mtei}', "");
Expect(1, 44013, '\P{^Is_Sc=--Mtei}', "");
Expect(0, 43967, '\p{Is_Sc=--Mtei}', "");
Expect(1, 43967, '\p{^Is_Sc=--Mtei}', "");
Expect(1, 43967, '\P{Is_Sc=--Mtei}', "");
Expect(0, 43967, '\P{^Is_Sc=--Mtei}', "");
Error('\p{Script=	/a/PHOENICIAN}');
Error('\P{Script=	/a/PHOENICIAN}');
Expect(1, 67867, '\p{Script=phoenician}', "");
Expect(0, 67867, '\p{^Script=phoenician}', "");
Expect(0, 67867, '\P{Script=phoenician}', "");
Expect(1, 67867, '\P{^Script=phoenician}', "");
Expect(0, 67839, '\p{Script=phoenician}', "");
Expect(1, 67839, '\p{^Script=phoenician}', "");
Expect(1, 67839, '\P{Script=phoenician}', "");
Expect(0, 67839, '\P{^Script=phoenician}', "");
Expect(1, 67867, '\p{Script=	-PHOENICIAN}', "");
Expect(0, 67867, '\p{^Script=	-PHOENICIAN}', "");
Expect(0, 67867, '\P{Script=	-PHOENICIAN}', "");
Expect(1, 67867, '\P{^Script=	-PHOENICIAN}', "");
Expect(0, 67839, '\p{Script=	-PHOENICIAN}', "");
Expect(1, 67839, '\p{^Script=	-PHOENICIAN}', "");
Expect(1, 67839, '\P{Script=	-PHOENICIAN}', "");
Expect(0, 67839, '\P{^Script=	-PHOENICIAN}', "");
Error('\p{Sc=-_Phnx:=}');
Error('\P{Sc=-_Phnx:=}');
Expect(1, 67867, '\p{Sc=phnx}', "");
Expect(0, 67867, '\p{^Sc=phnx}', "");
Expect(0, 67867, '\P{Sc=phnx}', "");
Expect(1, 67867, '\P{^Sc=phnx}', "");
Expect(0, 67839, '\p{Sc=phnx}', "");
Expect(1, 67839, '\p{^Sc=phnx}', "");
Expect(1, 67839, '\P{Sc=phnx}', "");
Expect(0, 67839, '\P{^Sc=phnx}', "");
Expect(1, 67867, '\p{Sc=--Phnx}', "");
Expect(0, 67867, '\p{^Sc=--Phnx}', "");
Expect(0, 67867, '\P{Sc=--Phnx}', "");
Expect(1, 67867, '\P{^Sc=--Phnx}', "");
Expect(0, 67839, '\p{Sc=--Phnx}', "");
Expect(1, 67839, '\p{^Sc=--Phnx}', "");
Expect(1, 67839, '\P{Sc=--Phnx}', "");
Expect(0, 67839, '\P{^Sc=--Phnx}', "");
Error('\p{Is_Script=:=_PHOENICIAN}');
Error('\P{Is_Script=:=_PHOENICIAN}');
Expect(1, 67867, '\p{Is_Script=phoenician}', "");
Expect(0, 67867, '\p{^Is_Script=phoenician}', "");
Expect(0, 67867, '\P{Is_Script=phoenician}', "");
Expect(1, 67867, '\P{^Is_Script=phoenician}', "");
Expect(0, 67839, '\p{Is_Script=phoenician}', "");
Expect(1, 67839, '\p{^Is_Script=phoenician}', "");
Expect(1, 67839, '\P{Is_Script=phoenician}', "");
Expect(0, 67839, '\P{^Is_Script=phoenician}', "");
Expect(1, 67867, '\p{Is_Script=- Phoenician}', "");
Expect(0, 67867, '\p{^Is_Script=- Phoenician}', "");
Expect(0, 67867, '\P{Is_Script=- Phoenician}', "");
Expect(1, 67867, '\P{^Is_Script=- Phoenician}', "");
Expect(0, 67839, '\p{Is_Script=- Phoenician}', "");
Expect(1, 67839, '\p{^Is_Script=- Phoenician}', "");
Expect(1, 67839, '\P{Is_Script=- Phoenician}', "");
Expect(0, 67839, '\P{^Is_Script=- Phoenician}', "");
Error('\p{Is_Sc=	PHNX/a/}');
Error('\P{Is_Sc=	PHNX/a/}');
Expect(1, 67867, '\p{Is_Sc=phnx}', "");
Expect(0, 67867, '\p{^Is_Sc=phnx}', "");
Expect(0, 67867, '\P{Is_Sc=phnx}', "");
Expect(1, 67867, '\P{^Is_Sc=phnx}', "");
Expect(0, 67839, '\p{Is_Sc=phnx}', "");
Expect(1, 67839, '\p{^Is_Sc=phnx}', "");
Expect(1, 67839, '\P{Is_Sc=phnx}', "");
Expect(0, 67839, '\P{^Is_Sc=phnx}', "");
Expect(1, 67867, '\p{Is_Sc=		Phnx}', "");
Expect(0, 67867, '\p{^Is_Sc=		Phnx}', "");
Expect(0, 67867, '\P{Is_Sc=		Phnx}', "");
Expect(1, 67867, '\P{^Is_Sc=		Phnx}', "");
Expect(0, 67839, '\p{Is_Sc=		Phnx}', "");
Expect(1, 67839, '\p{^Is_Sc=		Phnx}', "");
Expect(1, 67839, '\P{Is_Sc=		Phnx}', "");
Expect(0, 67839, '\P{^Is_Sc=		Phnx}', "");
Error('\p{Script=- Devanagari:=}');
Error('\P{Script=- Devanagari:=}');
Expect(1, 2361, '\p{Script=devanagari}', "");
Expect(0, 2361, '\p{^Script=devanagari}', "");
Expect(0, 2361, '\P{Script=devanagari}', "");
Expect(1, 2361, '\P{^Script=devanagari}', "");
Expect(0, 2303, '\p{Script=devanagari}', "");
Expect(1, 2303, '\p{^Script=devanagari}', "");
Expect(1, 2303, '\P{Script=devanagari}', "");
Expect(0, 2303, '\P{^Script=devanagari}', "");
Expect(1, 2361, '\p{Script=-	Devanagari}', "");
Expect(0, 2361, '\p{^Script=-	Devanagari}', "");
Expect(0, 2361, '\P{Script=-	Devanagari}', "");
Expect(1, 2361, '\P{^Script=-	Devanagari}', "");
Expect(0, 2303, '\p{Script=-	Devanagari}', "");
Expect(1, 2303, '\p{^Script=-	Devanagari}', "");
Expect(1, 2303, '\P{Script=-	Devanagari}', "");
Expect(0, 2303, '\P{^Script=-	Devanagari}', "");
Error('\p{Sc=_/a/DEVA}');
Error('\P{Sc=_/a/DEVA}');
Expect(1, 2361, '\p{Sc=deva}', "");
Expect(0, 2361, '\p{^Sc=deva}', "");
Expect(0, 2361, '\P{Sc=deva}', "");
Expect(1, 2361, '\P{^Sc=deva}', "");
Expect(0, 2303, '\p{Sc=deva}', "");
Expect(1, 2303, '\p{^Sc=deva}', "");
Expect(1, 2303, '\P{Sc=deva}', "");
Expect(0, 2303, '\P{^Sc=deva}', "");
Expect(1, 2361, '\p{Sc=--Deva}', "");
Expect(0, 2361, '\p{^Sc=--Deva}', "");
Expect(0, 2361, '\P{Sc=--Deva}', "");
Expect(1, 2361, '\P{^Sc=--Deva}', "");
Expect(0, 2303, '\p{Sc=--Deva}', "");
Expect(1, 2303, '\p{^Sc=--Deva}', "");
Expect(1, 2303, '\P{Sc=--Deva}', "");
Expect(0, 2303, '\P{^Sc=--Deva}', "");
Error('\p{Is_Script=-/a/Devanagari}');
Error('\P{Is_Script=-/a/Devanagari}');
Expect(1, 2361, '\p{Is_Script=devanagari}', "");
Expect(0, 2361, '\p{^Is_Script=devanagari}', "");
Expect(0, 2361, '\P{Is_Script=devanagari}', "");
Expect(1, 2361, '\P{^Is_Script=devanagari}', "");
Expect(0, 2303, '\p{Is_Script=devanagari}', "");
Expect(1, 2303, '\p{^Is_Script=devanagari}', "");
Expect(1, 2303, '\P{Is_Script=devanagari}', "");
Expect(0, 2303, '\P{^Is_Script=devanagari}', "");
Expect(1, 2361, '\p{Is_Script=-Devanagari}', "");
Expect(0, 2361, '\p{^Is_Script=-Devanagari}', "");
Expect(0, 2361, '\P{Is_Script=-Devanagari}', "");
Expect(1, 2361, '\P{^Is_Script=-Devanagari}', "");
Expect(0, 2303, '\p{Is_Script=-Devanagari}', "");
Expect(1, 2303, '\p{^Is_Script=-Devanagari}', "");
Expect(1, 2303, '\P{Is_Script=-Devanagari}', "");
Expect(0, 2303, '\P{^Is_Script=-Devanagari}', "");
Error('\p{Is_Sc= :=Deva}');
Error('\P{Is_Sc= :=Deva}');
Expect(1, 2361, '\p{Is_Sc=deva}', "");
Expect(0, 2361, '\p{^Is_Sc=deva}', "");
Expect(0, 2361, '\P{Is_Sc=deva}', "");
Expect(1, 2361, '\P{^Is_Sc=deva}', "");
Expect(0, 2303, '\p{Is_Sc=deva}', "");
Expect(1, 2303, '\p{^Is_Sc=deva}', "");
Expect(1, 2303, '\P{Is_Sc=deva}', "");
Expect(0, 2303, '\P{^Is_Sc=deva}', "");
Expect(1, 2361, '\p{Is_Sc=Deva}', "");
Expect(0, 2361, '\p{^Is_Sc=Deva}', "");
Expect(0, 2361, '\P{Is_Sc=Deva}', "");
Expect(1, 2361, '\P{^Is_Sc=Deva}', "");
Expect(0, 2303, '\p{Is_Sc=Deva}', "");
Expect(1, 2303, '\p{^Is_Sc=Deva}', "");
Expect(1, 2303, '\P{Is_Sc=Deva}', "");
Expect(0, 2303, '\P{^Is_Sc=Deva}', "");
Error('\p{Script=	 carian:=}');
Error('\P{Script=	 carian:=}');
Expect(1, 66256, '\p{Script=carian}', "");
Expect(0, 66256, '\p{^Script=carian}', "");
Expect(0, 66256, '\P{Script=carian}', "");
Expect(1, 66256, '\P{^Script=carian}', "");
Expect(0, 66207, '\p{Script=carian}', "");
Expect(1, 66207, '\p{^Script=carian}', "");
Expect(1, 66207, '\P{Script=carian}', "");
Expect(0, 66207, '\P{^Script=carian}', "");
Expect(1, 66256, '\p{Script= 	CARIAN}', "");
Expect(0, 66256, '\p{^Script= 	CARIAN}', "");
Expect(0, 66256, '\P{Script= 	CARIAN}', "");
Expect(1, 66256, '\P{^Script= 	CARIAN}', "");
Expect(0, 66207, '\p{Script= 	CARIAN}', "");
Expect(1, 66207, '\p{^Script= 	CARIAN}', "");
Expect(1, 66207, '\P{Script= 	CARIAN}', "");
Expect(0, 66207, '\P{^Script= 	CARIAN}', "");
Error('\p{Sc=	/a/CARI}');
Error('\P{Sc=	/a/CARI}');
Expect(1, 66256, '\p{Sc:cari}', "");
Expect(0, 66256, '\p{^Sc:cari}', "");
Expect(0, 66256, '\P{Sc:cari}', "");
Expect(1, 66256, '\P{^Sc:cari}', "");
Expect(0, 66207, '\p{Sc:cari}', "");
Expect(1, 66207, '\p{^Sc:cari}', "");
Expect(1, 66207, '\P{Sc:cari}', "");
Expect(0, 66207, '\P{^Sc:cari}', "");
Expect(1, 66256, '\p{Sc=--CARI}', "");
Expect(0, 66256, '\p{^Sc=--CARI}', "");
Expect(0, 66256, '\P{Sc=--CARI}', "");
Expect(1, 66256, '\P{^Sc=--CARI}', "");
Expect(0, 66207, '\p{Sc=--CARI}', "");
Expect(1, 66207, '\p{^Sc=--CARI}', "");
Expect(1, 66207, '\P{Sc=--CARI}', "");
Expect(0, 66207, '\P{^Sc=--CARI}', "");
Error('\p{Is_Script=_:=carian}');
Error('\P{Is_Script=_:=carian}');
Expect(1, 66256, '\p{Is_Script=carian}', "");
Expect(0, 66256, '\p{^Is_Script=carian}', "");
Expect(0, 66256, '\P{Is_Script=carian}', "");
Expect(1, 66256, '\P{^Is_Script=carian}', "");
Expect(0, 66207, '\p{Is_Script=carian}', "");
Expect(1, 66207, '\p{^Is_Script=carian}', "");
Expect(1, 66207, '\P{Is_Script=carian}', "");
Expect(0, 66207, '\P{^Is_Script=carian}', "");
Expect(1, 66256, '\p{Is_Script: carian}', "");
Expect(0, 66256, '\p{^Is_Script: carian}', "");
Expect(0, 66256, '\P{Is_Script: carian}', "");
Expect(1, 66256, '\P{^Is_Script: carian}', "");
Expect(0, 66207, '\p{Is_Script: carian}', "");
Expect(1, 66207, '\p{^Is_Script: carian}', "");
Expect(1, 66207, '\P{Is_Script: carian}', "");
Expect(0, 66207, '\P{^Is_Script: carian}', "");
Error('\p{Is_Sc=:= _Cari}');
Error('\P{Is_Sc=:= _Cari}');
Expect(1, 66256, '\p{Is_Sc=cari}', "");
Expect(0, 66256, '\p{^Is_Sc=cari}', "");
Expect(0, 66256, '\P{Is_Sc=cari}', "");
Expect(1, 66256, '\P{^Is_Sc=cari}', "");
Expect(0, 66207, '\p{Is_Sc=cari}', "");
Expect(1, 66207, '\p{^Is_Sc=cari}', "");
Expect(1, 66207, '\P{Is_Sc=cari}', "");
Expect(0, 66207, '\P{^Is_Sc=cari}', "");
Expect(1, 66256, '\p{Is_Sc=-Cari}', "");
Expect(0, 66256, '\p{^Is_Sc=-Cari}', "");
Expect(0, 66256, '\P{Is_Sc=-Cari}', "");
Expect(1, 66256, '\P{^Is_Sc=-Cari}', "");
Expect(0, 66207, '\p{Is_Sc=-Cari}', "");
Expect(1, 66207, '\p{^Is_Sc=-Cari}', "");
Expect(1, 66207, '\P{Is_Sc=-Cari}', "");
Expect(0, 66207, '\P{^Is_Sc=-Cari}', "");
Error('\p{Script=:=Buhid}');
Error('\P{Script=:=Buhid}');
Expect(1, 5971, '\p{Script=buhid}', "");
Expect(0, 5971, '\p{^Script=buhid}', "");
Expect(0, 5971, '\P{Script=buhid}', "");
Expect(1, 5971, '\P{^Script=buhid}', "");
Expect(0, 5951, '\p{Script=buhid}', "");
Expect(1, 5951, '\p{^Script=buhid}', "");
Expect(1, 5951, '\P{Script=buhid}', "");
Expect(0, 5951, '\P{^Script=buhid}', "");
Expect(1, 5971, '\p{Script=_	BUHID}', "");
Expect(0, 5971, '\p{^Script=_	BUHID}', "");
Expect(0, 5971, '\P{Script=_	BUHID}', "");
Expect(1, 5971, '\P{^Script=_	BUHID}', "");
Expect(0, 5951, '\p{Script=_	BUHID}', "");
Expect(1, 5951, '\p{^Script=_	BUHID}', "");
Expect(1, 5951, '\P{Script=_	BUHID}', "");
Expect(0, 5951, '\P{^Script=_	BUHID}', "");
Error('\p{Sc=/a/		buhd}');
Error('\P{Sc=/a/		buhd}');
Expect(1, 5971, '\p{Sc=buhd}', "");
Expect(0, 5971, '\p{^Sc=buhd}', "");
Expect(0, 5971, '\P{Sc=buhd}', "");
Expect(1, 5971, '\P{^Sc=buhd}', "");
Expect(0, 5951, '\p{Sc=buhd}', "");
Expect(1, 5951, '\p{^Sc=buhd}', "");
Expect(1, 5951, '\P{Sc=buhd}', "");
Expect(0, 5951, '\P{^Sc=buhd}', "");
Expect(1, 5971, '\p{Sc=_Buhd}', "");
Expect(0, 5971, '\p{^Sc=_Buhd}', "");
Expect(0, 5971, '\P{Sc=_Buhd}', "");
Expect(1, 5971, '\P{^Sc=_Buhd}', "");
Expect(0, 5951, '\p{Sc=_Buhd}', "");
Expect(1, 5951, '\p{^Sc=_Buhd}', "");
Expect(1, 5951, '\P{Sc=_Buhd}', "");
Expect(0, 5951, '\P{^Sc=_Buhd}', "");
Error('\p{Is_Script=:=	_Buhid}');
Error('\P{Is_Script=:=	_Buhid}');
Expect(1, 5971, '\p{Is_Script=buhid}', "");
Expect(0, 5971, '\p{^Is_Script=buhid}', "");
Expect(0, 5971, '\P{Is_Script=buhid}', "");
Expect(1, 5971, '\P{^Is_Script=buhid}', "");
Expect(0, 5951, '\p{Is_Script=buhid}', "");
Expect(1, 5951, '\p{^Is_Script=buhid}', "");
Expect(1, 5951, '\P{Is_Script=buhid}', "");
Expect(0, 5951, '\P{^Is_Script=buhid}', "");
Expect(1, 5971, '\p{Is_Script=	Buhid}', "");
Expect(0, 5971, '\p{^Is_Script=	Buhid}', "");
Expect(0, 5971, '\P{Is_Script=	Buhid}', "");
Expect(1, 5971, '\P{^Is_Script=	Buhid}', "");
Expect(0, 5951, '\p{Is_Script=	Buhid}', "");
Expect(1, 5951, '\p{^Is_Script=	Buhid}', "");
Expect(1, 5951, '\P{Is_Script=	Buhid}', "");
Expect(0, 5951, '\P{^Is_Script=	Buhid}', "");
Error('\p{Is_Sc=-:=buhd}');
Error('\P{Is_Sc=-:=buhd}');
Expect(1, 5971, '\p{Is_Sc=buhd}', "");
Expect(0, 5971, '\p{^Is_Sc=buhd}', "");
Expect(0, 5971, '\P{Is_Sc=buhd}', "");
Expect(1, 5971, '\P{^Is_Sc=buhd}', "");
Expect(0, 5951, '\p{Is_Sc=buhd}', "");
Expect(1, 5951, '\p{^Is_Sc=buhd}', "");
Expect(1, 5951, '\P{Is_Sc=buhd}', "");
Expect(0, 5951, '\P{^Is_Sc=buhd}', "");
Expect(1, 5971, '\p{Is_Sc=	-Buhd}', "");
Expect(0, 5971, '\p{^Is_Sc=	-Buhd}', "");
Expect(0, 5971, '\P{Is_Sc=	-Buhd}', "");
Expect(1, 5971, '\P{^Is_Sc=	-Buhd}', "");
Expect(0, 5951, '\p{Is_Sc=	-Buhd}', "");
Expect(1, 5951, '\p{^Is_Sc=	-Buhd}', "");
Expect(1, 5951, '\P{Is_Sc=	-Buhd}', "");
Expect(0, 5951, '\P{^Is_Sc=	-Buhd}', "");
Error('\p{Script=/a/LIMBU}');
Error('\P{Script=/a/LIMBU}');
Expect(1, 6428, '\p{Script=limbu}', "");
Expect(0, 6428, '\p{^Script=limbu}', "");
Expect(0, 6428, '\P{Script=limbu}', "");
Expect(1, 6428, '\P{^Script=limbu}', "");
Expect(0, 6399, '\p{Script=limbu}', "");
Expect(1, 6399, '\p{^Script=limbu}', "");
Expect(1, 6399, '\P{Script=limbu}', "");
Expect(0, 6399, '\P{^Script=limbu}', "");
Expect(1, 6428, '\p{Script= -Limbu}', "");
Expect(0, 6428, '\p{^Script= -Limbu}', "");
Expect(0, 6428, '\P{Script= -Limbu}', "");
Expect(1, 6428, '\P{^Script= -Limbu}', "");
Expect(0, 6399, '\p{Script= -Limbu}', "");
Expect(1, 6399, '\p{^Script= -Limbu}', "");
Expect(1, 6399, '\P{Script= -Limbu}', "");
Expect(0, 6399, '\P{^Script= -Limbu}', "");
Error('\p{Sc=limb:=}');
Error('\P{Sc=limb:=}');
Expect(1, 6428, '\p{Sc:	limb}', "");
Expect(0, 6428, '\p{^Sc:	limb}', "");
Expect(0, 6428, '\P{Sc:	limb}', "");
Expect(1, 6428, '\P{^Sc:	limb}', "");
Expect(0, 6399, '\p{Sc:	limb}', "");
Expect(1, 6399, '\p{^Sc:	limb}', "");
Expect(1, 6399, '\P{Sc:	limb}', "");
Expect(0, 6399, '\P{^Sc:	limb}', "");
Expect(1, 6428, '\p{Sc=__limb}', "");
Expect(0, 6428, '\p{^Sc=__limb}', "");
Expect(0, 6428, '\P{Sc=__limb}', "");
Expect(1, 6428, '\P{^Sc=__limb}', "");
Expect(0, 6399, '\p{Sc=__limb}', "");
Expect(1, 6399, '\p{^Sc=__limb}', "");
Expect(1, 6399, '\P{Sc=__limb}', "");
Expect(0, 6399, '\P{^Sc=__limb}', "");
Error('\p{Is_Script=_:=limbu}');
Error('\P{Is_Script=_:=limbu}');
Expect(1, 6428, '\p{Is_Script=limbu}', "");
Expect(0, 6428, '\p{^Is_Script=limbu}', "");
Expect(0, 6428, '\P{Is_Script=limbu}', "");
Expect(1, 6428, '\P{^Is_Script=limbu}', "");
Expect(0, 6399, '\p{Is_Script=limbu}', "");
Expect(1, 6399, '\p{^Is_Script=limbu}', "");
Expect(1, 6399, '\P{Is_Script=limbu}', "");
Expect(0, 6399, '\P{^Is_Script=limbu}', "");
Error('\p{Is_Sc=/a/ limb}');
Error('\P{Is_Sc=/a/ limb}');
Expect(1, 6428, '\p{Is_Sc=limb}', "");
Expect(0, 6428, '\p{^Is_Sc=limb}', "");
Expect(0, 6428, '\P{Is_Sc=limb}', "");
Expect(1, 6428, '\P{^Is_Sc=limb}', "");
Expect(0, 6399, '\p{Is_Sc=limb}', "");
Expect(1, 6399, '\p{^Is_Sc=limb}', "");
Expect(1, 6399, '\P{Is_Sc=limb}', "");
Expect(0, 6399, '\P{^Is_Sc=limb}', "");
Expect(1, 6428, '\p{Is_Sc=_-LIMB}', "");
Expect(0, 6428, '\p{^Is_Sc=_-LIMB}', "");
Expect(0, 6428, '\P{Is_Sc=_-LIMB}', "");
Expect(1, 6428, '\P{^Is_Sc=_-LIMB}', "");
Expect(0, 6399, '\p{Is_Sc=_-LIMB}', "");
Expect(1, 6399, '\p{^Is_Sc=_-LIMB}', "");
Expect(1, 6399, '\P{Is_Sc=_-LIMB}', "");
Expect(0, 6399, '\P{^Is_Sc=_-LIMB}', "");
Error('\p{Script=-/a/Javanese}');
Error('\P{Script=-/a/Javanese}');
Expect(1, 43469, '\p{Script=javanese}', "");
Expect(0, 43469, '\p{^Script=javanese}', "");
Expect(0, 43469, '\P{Script=javanese}', "");
Expect(1, 43469, '\P{^Script=javanese}', "");
Expect(0, 43391, '\p{Script=javanese}', "");
Expect(1, 43391, '\p{^Script=javanese}', "");
Expect(1, 43391, '\P{Script=javanese}', "");
Expect(0, 43391, '\P{^Script=javanese}', "");
Expect(1, 43469, '\p{Script=-javanese}', "");
Expect(0, 43469, '\p{^Script=-javanese}', "");
Expect(0, 43469, '\P{Script=-javanese}', "");
Expect(1, 43469, '\P{^Script=-javanese}', "");
Expect(0, 43391, '\p{Script=-javanese}', "");
Expect(1, 43391, '\p{^Script=-javanese}', "");
Expect(1, 43391, '\P{Script=-javanese}', "");
Expect(0, 43391, '\P{^Script=-javanese}', "");
Error('\p{Sc=:=-Java}');
Error('\P{Sc=:=-Java}');
Expect(1, 43469, '\p{Sc=java}', "");
Expect(0, 43469, '\p{^Sc=java}', "");
Expect(0, 43469, '\P{Sc=java}', "");
Expect(1, 43469, '\P{^Sc=java}', "");
Expect(0, 43391, '\p{Sc=java}', "");
Expect(1, 43391, '\p{^Sc=java}', "");
Expect(1, 43391, '\P{Sc=java}', "");
Expect(0, 43391, '\P{^Sc=java}', "");
Expect(1, 43469, '\p{Sc=_ Java}', "");
Expect(0, 43469, '\p{^Sc=_ Java}', "");
Expect(0, 43469, '\P{Sc=_ Java}', "");
Expect(1, 43469, '\P{^Sc=_ Java}', "");
Expect(0, 43391, '\p{Sc=_ Java}', "");
Expect(1, 43391, '\p{^Sc=_ Java}', "");
Expect(1, 43391, '\P{Sc=_ Java}', "");
Expect(0, 43391, '\P{^Sc=_ Java}', "");
Error('\p{Is_Script=-/a/javanese}');
Error('\P{Is_Script=-/a/javanese}');
Expect(1, 43469, '\p{Is_Script=javanese}', "");
Expect(0, 43469, '\p{^Is_Script=javanese}', "");
Expect(0, 43469, '\P{Is_Script=javanese}', "");
Expect(1, 43469, '\P{^Is_Script=javanese}', "");
Expect(0, 43391, '\p{Is_Script=javanese}', "");
Expect(1, 43391, '\p{^Is_Script=javanese}', "");
Expect(1, 43391, '\P{Is_Script=javanese}', "");
Expect(0, 43391, '\P{^Is_Script=javanese}', "");
Expect(1, 43469, '\p{Is_Script=__Javanese}', "");
Expect(0, 43469, '\p{^Is_Script=__Javanese}', "");
Expect(0, 43469, '\P{Is_Script=__Javanese}', "");
Expect(1, 43469, '\P{^Is_Script=__Javanese}', "");
Expect(0, 43391, '\p{Is_Script=__Javanese}', "");
Expect(1, 43391, '\p{^Is_Script=__Javanese}', "");
Expect(1, 43391, '\P{Is_Script=__Javanese}', "");
Expect(0, 43391, '\P{^Is_Script=__Javanese}', "");
Error('\p{Is_Sc=_	java/a/}');
Error('\P{Is_Sc=_	java/a/}');
Expect(1, 43469, '\p{Is_Sc=java}', "");
Expect(0, 43469, '\p{^Is_Sc=java}', "");
Expect(0, 43469, '\P{Is_Sc=java}', "");
Expect(1, 43469, '\P{^Is_Sc=java}', "");
Expect(0, 43391, '\p{Is_Sc=java}', "");
Expect(1, 43391, '\p{^Is_Sc=java}', "");
Expect(1, 43391, '\P{Is_Sc=java}', "");
Expect(0, 43391, '\P{^Is_Sc=java}', "");
Expect(1, 43469, '\p{Is_Sc=--JAVA}', "");
Expect(0, 43469, '\p{^Is_Sc=--JAVA}', "");
Expect(0, 43469, '\P{Is_Sc=--JAVA}', "");
Expect(1, 43469, '\P{^Is_Sc=--JAVA}', "");
Expect(0, 43391, '\p{Is_Sc=--JAVA}', "");
Expect(1, 43391, '\p{^Is_Sc=--JAVA}', "");
Expect(1, 43391, '\P{Is_Sc=--JAVA}', "");
Expect(0, 43391, '\P{^Is_Sc=--JAVA}', "");
Error('\p{Script=_ Egyptian	hieroglyphs/a/}');
Error('\P{Script=_ Egyptian	hieroglyphs/a/}');
Expect(1, 78894, '\p{Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(0, 78894, '\p{^Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(0, 78894, '\P{Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(1, 78894, '\P{^Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Script=_	Egyptian_HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Script=_	Egyptian_HIEROGLYPHS}', "");
Error('\p{Sc=/a/  EGYP}');
Error('\P{Sc=/a/  EGYP}');
Expect(1, 78894, '\p{Sc:   egyp}', "");
Expect(0, 78894, '\p{^Sc:   egyp}', "");
Expect(0, 78894, '\P{Sc:   egyp}', "");
Expect(1, 78894, '\P{^Sc:   egyp}', "");
Expect(0, 77823, '\p{Sc:   egyp}', "");
Expect(1, 77823, '\p{^Sc:   egyp}', "");
Expect(1, 77823, '\P{Sc:   egyp}', "");
Expect(0, 77823, '\P{^Sc:   egyp}', "");
Expect(1, 78894, '\p{Sc=__Egyp}', "");
Expect(0, 78894, '\p{^Sc=__Egyp}', "");
Expect(0, 78894, '\P{Sc=__Egyp}', "");
Expect(1, 78894, '\P{^Sc=__Egyp}', "");
Expect(0, 77823, '\p{Sc=__Egyp}', "");
Expect(1, 77823, '\p{^Sc=__Egyp}', "");
Expect(1, 77823, '\P{Sc=__Egyp}', "");
Expect(0, 77823, '\P{^Sc=__Egyp}', "");
Error('\p{Is_Script=_-Egyptian:=HIEROGLYPHS}');
Error('\P{Is_Script=_-Egyptian:=HIEROGLYPHS}');
Expect(1, 78894, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(0, 78894, '\p{^Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(0, 78894, '\P{Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(1, 78894, '\P{^Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Is_Script=	-egyptian	HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Is_Script=	-egyptian	HIEROGLYPHS}', "");
Error('\p{Is_Sc=/a/ 	Egyp}');
Error('\P{Is_Sc=/a/ 	Egyp}');
Expect(1, 78894, '\p{Is_Sc=egyp}', "");
Expect(0, 78894, '\p{^Is_Sc=egyp}', "");
Expect(0, 78894, '\P{Is_Sc=egyp}', "");
Expect(1, 78894, '\P{^Is_Sc=egyp}', "");
Expect(0, 77823, '\p{Is_Sc=egyp}', "");
Expect(1, 77823, '\p{^Is_Sc=egyp}', "");
Expect(1, 77823, '\P{Is_Sc=egyp}', "");
Expect(0, 77823, '\P{^Is_Sc=egyp}', "");
Expect(1, 78894, '\p{Is_Sc:   -	egyp}', "");
Expect(0, 78894, '\p{^Is_Sc:   -	egyp}', "");
Expect(0, 78894, '\P{Is_Sc:   -	egyp}', "");
Expect(1, 78894, '\P{^Is_Sc:   -	egyp}', "");
Expect(0, 77823, '\p{Is_Sc:   -	egyp}', "");
Expect(1, 77823, '\p{^Is_Sc:   -	egyp}', "");
Expect(1, 77823, '\P{Is_Sc:   -	egyp}', "");
Expect(0, 77823, '\P{^Is_Sc:   -	egyp}', "");
Error('\p{Script=-:=Common}');
Error('\P{Script=-:=Common}');
Expect(1, 64, '\p{Script=common}', "");
Expect(0, 64, '\p{^Script=common}', "");
Expect(0, 64, '\P{Script=common}', "");
Expect(1, 64, '\P{^Script=common}', "");
Expect(0, 90, '\p{Script=common}', "");
Expect(1, 90, '\p{^Script=common}', "");
Expect(1, 90, '\P{Script=common}', "");
Expect(0, 90, '\P{^Script=common}', "");
Expect(1, 64, '\p{Script:--Common}', "");
Expect(0, 64, '\p{^Script:--Common}', "");
Expect(0, 64, '\P{Script:--Common}', "");
Expect(1, 64, '\P{^Script:--Common}', "");
Expect(0, 90, '\p{Script:--Common}', "");
Expect(1, 90, '\p{^Script:--Common}', "");
Expect(1, 90, '\P{Script:--Common}', "");
Expect(0, 90, '\P{^Script:--Common}', "");
Error('\p{Sc=	:=ZYYY}');
Error('\P{Sc=	:=ZYYY}');
Expect(1, 64, '\p{Sc:zyyy}', "");
Expect(0, 64, '\p{^Sc:zyyy}', "");
Expect(0, 64, '\P{Sc:zyyy}', "");
Expect(1, 64, '\P{^Sc:zyyy}', "");
Expect(0, 90, '\p{Sc:zyyy}', "");
Expect(1, 90, '\p{^Sc:zyyy}', "");
Expect(1, 90, '\P{Sc:zyyy}', "");
Expect(0, 90, '\P{^Sc:zyyy}', "");
Expect(1, 64, '\p{Sc=	-ZYYY}', "");
Expect(0, 64, '\p{^Sc=	-ZYYY}', "");
Expect(0, 64, '\P{Sc=	-ZYYY}', "");
Expect(1, 64, '\P{^Sc=	-ZYYY}', "");
Expect(0, 90, '\p{Sc=	-ZYYY}', "");
Expect(1, 90, '\p{^Sc=	-ZYYY}', "");
Expect(1, 90, '\P{Sc=	-ZYYY}', "");
Expect(0, 90, '\P{^Sc=	-ZYYY}', "");
Error('\p{Is_Script=-_COMMON/a/}');
Error('\P{Is_Script=-_COMMON/a/}');
Expect(1, 64, '\p{Is_Script=common}', "");
Expect(0, 64, '\p{^Is_Script=common}', "");
Expect(0, 64, '\P{Is_Script=common}', "");
Expect(1, 64, '\P{^Is_Script=common}', "");
Expect(0, 90, '\p{Is_Script=common}', "");
Expect(1, 90, '\p{^Is_Script=common}', "");
Expect(1, 90, '\P{Is_Script=common}', "");
Expect(0, 90, '\P{^Is_Script=common}', "");
Expect(1, 64, '\p{Is_Script=		common}', "");
Expect(0, 64, '\p{^Is_Script=		common}', "");
Expect(0, 64, '\P{Is_Script=		common}', "");
Expect(1, 64, '\P{^Is_Script=		common}', "");
Expect(0, 90, '\p{Is_Script=		common}', "");
Expect(1, 90, '\p{^Is_Script=		common}', "");
Expect(1, 90, '\P{Is_Script=		common}', "");
Expect(0, 90, '\P{^Is_Script=		common}', "");
Error('\p{Is_Sc=/a/Zyyy}');
Error('\P{Is_Sc=/a/Zyyy}');
Expect(1, 64, '\p{Is_Sc=zyyy}', "");
Expect(0, 64, '\p{^Is_Sc=zyyy}', "");
Expect(0, 64, '\P{Is_Sc=zyyy}', "");
Expect(1, 64, '\P{^Is_Sc=zyyy}', "");
Expect(0, 90, '\p{Is_Sc=zyyy}', "");
Expect(1, 90, '\p{^Is_Sc=zyyy}', "");
Expect(1, 90, '\P{Is_Sc=zyyy}', "");
Expect(0, 90, '\P{^Is_Sc=zyyy}', "");
Expect(1, 64, '\p{Is_Sc=_ ZYYY}', "");
Expect(0, 64, '\p{^Is_Sc=_ ZYYY}', "");
Expect(0, 64, '\P{Is_Sc=_ ZYYY}', "");
Expect(1, 64, '\P{^Is_Sc=_ ZYYY}', "");
Expect(0, 90, '\p{Is_Sc=_ ZYYY}', "");
Expect(1, 90, '\p{^Is_Sc=_ ZYYY}', "");
Expect(1, 90, '\P{Is_Sc=_ ZYYY}', "");
Expect(0, 90, '\P{^Is_Sc=_ ZYYY}', "");
Error('\p{Script=	:=latin}');
Error('\P{Script=	:=latin}');
Expect(1, 90, '\p{Script=latin}', "");
Expect(0, 90, '\p{^Script=latin}', "");
Expect(0, 90, '\P{Script=latin}', "");
Expect(1, 90, '\P{^Script=latin}', "");
Expect(0, 64, '\p{Script=latin}', "");
Expect(1, 64, '\p{^Script=latin}', "");
Expect(1, 64, '\P{Script=latin}', "");
Expect(0, 64, '\P{^Script=latin}', "");
Expect(1, 90, '\p{Script= -latin}', "");
Expect(0, 90, '\p{^Script= -latin}', "");
Expect(0, 90, '\P{Script= -latin}', "");
Expect(1, 90, '\P{^Script= -latin}', "");
Expect(0, 64, '\p{Script= -latin}', "");
Expect(1, 64, '\p{^Script= -latin}', "");
Expect(1, 64, '\P{Script= -latin}', "");
Expect(0, 64, '\P{^Script= -latin}', "");
Error('\p{Sc:   	:=Latn}');
Error('\P{Sc:   	:=Latn}');
Expect(1, 90, '\p{Sc:   latn}', "");
Expect(0, 90, '\p{^Sc:   latn}', "");
Expect(0, 90, '\P{Sc:   latn}', "");
Expect(1, 90, '\P{^Sc:   latn}', "");
Expect(0, 64, '\p{Sc:   latn}', "");
Expect(1, 64, '\p{^Sc:   latn}', "");
Expect(1, 64, '\P{Sc:   latn}', "");
Expect(0, 64, '\P{^Sc:   latn}', "");
Expect(1, 90, '\p{Sc= 	Latn}', "");
Expect(0, 90, '\p{^Sc= 	Latn}', "");
Expect(0, 90, '\P{Sc= 	Latn}', "");
Expect(1, 90, '\P{^Sc= 	Latn}', "");
Expect(0, 64, '\p{Sc= 	Latn}', "");
Expect(1, 64, '\p{^Sc= 	Latn}', "");
Expect(1, 64, '\P{Sc= 	Latn}', "");
Expect(0, 64, '\P{^Sc= 	Latn}', "");
Error('\p{Is_Script=:=-Latin}');
Error('\P{Is_Script=:=-Latin}');
Expect(1, 90, '\p{Is_Script=latin}', "");
Expect(0, 90, '\p{^Is_Script=latin}', "");
Expect(0, 90, '\P{Is_Script=latin}', "");
Expect(1, 90, '\P{^Is_Script=latin}', "");
Expect(0, 64, '\p{Is_Script=latin}', "");
Expect(1, 64, '\p{^Is_Script=latin}', "");
Expect(1, 64, '\P{Is_Script=latin}', "");
Expect(0, 64, '\P{^Is_Script=latin}', "");
Expect(1, 90, '\p{Is_Script=-_LATIN}', "");
Expect(0, 90, '\p{^Is_Script=-_LATIN}', "");
Expect(0, 90, '\P{Is_Script=-_LATIN}', "");
Expect(1, 90, '\P{^Is_Script=-_LATIN}', "");
Expect(0, 64, '\p{Is_Script=-_LATIN}', "");
Expect(1, 64, '\p{^Is_Script=-_LATIN}', "");
Expect(1, 64, '\P{Is_Script=-_LATIN}', "");
Expect(0, 64, '\P{^Is_Script=-_LATIN}', "");
Error('\p{Is_Sc=	 Latn:=}');
Error('\P{Is_Sc=	 Latn:=}');
Expect(1, 90, '\p{Is_Sc:   latn}', "");
Expect(0, 90, '\p{^Is_Sc:   latn}', "");
Expect(0, 90, '\P{Is_Sc:   latn}', "");
Expect(1, 90, '\P{^Is_Sc:   latn}', "");
Expect(0, 64, '\p{Is_Sc:   latn}', "");
Expect(1, 64, '\p{^Is_Sc:   latn}', "");
Expect(1, 64, '\P{Is_Sc:   latn}', "");
Expect(0, 64, '\P{^Is_Sc:   latn}', "");
Expect(1, 90, '\p{Is_Sc=  latn}', "");
Expect(0, 90, '\p{^Is_Sc=  latn}', "");
Expect(0, 90, '\P{Is_Sc=  latn}', "");
Expect(1, 90, '\P{^Is_Sc=  latn}', "");
Expect(0, 64, '\p{Is_Sc=  latn}', "");
Expect(1, 64, '\p{^Is_Sc=  latn}', "");
Expect(1, 64, '\P{Is_Sc=  latn}', "");
Expect(0, 64, '\P{^Is_Sc=  latn}', "");
Error('\p{Script=		Ethiopic/a/}');
Error('\P{Script=		Ethiopic/a/}');
Expect(1, 4680, '\p{Script=ethiopic}', "");
Expect(0, 4680, '\p{^Script=ethiopic}', "");
Expect(0, 4680, '\P{Script=ethiopic}', "");
Expect(1, 4680, '\P{^Script=ethiopic}', "");
Expect(0, 4607, '\p{Script=ethiopic}', "");
Expect(1, 4607, '\p{^Script=ethiopic}', "");
Expect(1, 4607, '\P{Script=ethiopic}', "");
Expect(0, 4607, '\P{^Script=ethiopic}', "");
Expect(1, 4680, '\p{Script=	_ethiopic}', "");
Expect(0, 4680, '\p{^Script=	_ethiopic}', "");
Expect(0, 4680, '\P{Script=	_ethiopic}', "");
Expect(1, 4680, '\P{^Script=	_ethiopic}', "");
Expect(0, 4607, '\p{Script=	_ethiopic}', "");
Expect(1, 4607, '\p{^Script=	_ethiopic}', "");
Expect(1, 4607, '\P{Script=	_ethiopic}', "");
Expect(0, 4607, '\P{^Script=	_ethiopic}', "");
Error('\p{Sc=/a/	-Ethi}');
Error('\P{Sc=/a/	-Ethi}');
Expect(1, 4680, '\p{Sc=ethi}', "");
Expect(0, 4680, '\p{^Sc=ethi}', "");
Expect(0, 4680, '\P{Sc=ethi}', "");
Expect(1, 4680, '\P{^Sc=ethi}', "");
Expect(0, 4607, '\p{Sc=ethi}', "");
Expect(1, 4607, '\p{^Sc=ethi}', "");
Expect(1, 4607, '\P{Sc=ethi}', "");
Expect(0, 4607, '\P{^Sc=ethi}', "");
Expect(1, 4680, '\p{Sc=_Ethi}', "");
Expect(0, 4680, '\p{^Sc=_Ethi}', "");
Expect(0, 4680, '\P{Sc=_Ethi}', "");
Expect(1, 4680, '\P{^Sc=_Ethi}', "");
Expect(0, 4607, '\p{Sc=_Ethi}', "");
Expect(1, 4607, '\p{^Sc=_Ethi}', "");
Expect(1, 4607, '\P{Sc=_Ethi}', "");
Expect(0, 4607, '\P{^Sc=_Ethi}', "");
Error('\p{Is_Script:   	/a/ethiopic}');
Error('\P{Is_Script:   	/a/ethiopic}');
Expect(1, 4680, '\p{Is_Script=ethiopic}', "");
Expect(0, 4680, '\p{^Is_Script=ethiopic}', "");
Expect(0, 4680, '\P{Is_Script=ethiopic}', "");
Expect(1, 4680, '\P{^Is_Script=ethiopic}', "");
Expect(0, 4607, '\p{Is_Script=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Script=ethiopic}', "");
Expect(1, 4607, '\P{Is_Script=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Script=ethiopic}', "");
Expect(1, 4680, '\p{Is_Script=	ETHIOPIC}', "");
Expect(0, 4680, '\p{^Is_Script=	ETHIOPIC}', "");
Expect(0, 4680, '\P{Is_Script=	ETHIOPIC}', "");
Expect(1, 4680, '\P{^Is_Script=	ETHIOPIC}', "");
Expect(0, 4607, '\p{Is_Script=	ETHIOPIC}', "");
Expect(1, 4607, '\p{^Is_Script=	ETHIOPIC}', "");
Expect(1, 4607, '\P{Is_Script=	ETHIOPIC}', "");
Expect(0, 4607, '\P{^Is_Script=	ETHIOPIC}', "");
Error('\p{Is_Sc=/a/-Ethi}');
Error('\P{Is_Sc=/a/-Ethi}');
Expect(1, 4680, '\p{Is_Sc=ethi}', "");
Expect(0, 4680, '\p{^Is_Sc=ethi}', "");
Expect(0, 4680, '\P{Is_Sc=ethi}', "");
Expect(1, 4680, '\P{^Is_Sc=ethi}', "");
Expect(0, 4607, '\p{Is_Sc=ethi}', "");
Expect(1, 4607, '\p{^Is_Sc=ethi}', "");
Expect(1, 4607, '\P{Is_Sc=ethi}', "");
Expect(0, 4607, '\P{^Is_Sc=ethi}', "");
Expect(1, 4680, '\p{Is_Sc= _ethi}', "");
Expect(0, 4680, '\p{^Is_Sc= _ethi}', "");
Expect(0, 4680, '\P{Is_Sc= _ethi}', "");
Expect(1, 4680, '\P{^Is_Sc= _ethi}', "");
Expect(0, 4607, '\p{Is_Sc= _ethi}', "");
Expect(1, 4607, '\p{^Is_Sc= _ethi}', "");
Expect(1, 4607, '\P{Is_Sc= _ethi}', "");
Expect(0, 4607, '\P{^Is_Sc= _ethi}', "");
Error('\p{Script:   :=Hebrew}');
Error('\P{Script:   :=Hebrew}');
Expect(1, 1479, '\p{Script=hebrew}', "");
Expect(0, 1479, '\p{^Script=hebrew}', "");
Expect(0, 1479, '\P{Script=hebrew}', "");
Expect(1, 1479, '\P{^Script=hebrew}', "");
Expect(0, 1424, '\p{Script=hebrew}', "");
Expect(1, 1424, '\p{^Script=hebrew}', "");
Expect(1, 1424, '\P{Script=hebrew}', "");
Expect(0, 1424, '\P{^Script=hebrew}', "");
Expect(1, 1479, '\p{Script=-HEBREW}', "");
Expect(0, 1479, '\p{^Script=-HEBREW}', "");
Expect(0, 1479, '\P{Script=-HEBREW}', "");
Expect(1, 1479, '\P{^Script=-HEBREW}', "");
Expect(0, 1424, '\p{Script=-HEBREW}', "");
Expect(1, 1424, '\p{^Script=-HEBREW}', "");
Expect(1, 1424, '\P{Script=-HEBREW}', "");
Expect(0, 1424, '\P{^Script=-HEBREW}', "");
Error('\p{Sc:	__hebr/a/}');
Error('\P{Sc:	__hebr/a/}');
Expect(1, 1479, '\p{Sc=hebr}', "");
Expect(0, 1479, '\p{^Sc=hebr}', "");
Expect(0, 1479, '\P{Sc=hebr}', "");
Expect(1, 1479, '\P{^Sc=hebr}', "");
Expect(0, 1424, '\p{Sc=hebr}', "");
Expect(1, 1424, '\p{^Sc=hebr}', "");
Expect(1, 1424, '\P{Sc=hebr}', "");
Expect(0, 1424, '\P{^Sc=hebr}', "");
Expect(1, 1479, '\p{Sc=  Hebr}', "");
Expect(0, 1479, '\p{^Sc=  Hebr}', "");
Expect(0, 1479, '\P{Sc=  Hebr}', "");
Expect(1, 1479, '\P{^Sc=  Hebr}', "");
Expect(0, 1424, '\p{Sc=  Hebr}', "");
Expect(1, 1424, '\p{^Sc=  Hebr}', "");
Expect(1, 1424, '\P{Sc=  Hebr}', "");
Expect(0, 1424, '\P{^Sc=  Hebr}', "");
Error('\p{Is_Script=:=_Hebrew}');
Error('\P{Is_Script=:=_Hebrew}');
Expect(1, 1479, '\p{Is_Script:	hebrew}', "");
Expect(0, 1479, '\p{^Is_Script:	hebrew}', "");
Expect(0, 1479, '\P{Is_Script:	hebrew}', "");
Expect(1, 1479, '\P{^Is_Script:	hebrew}', "");
Expect(0, 1424, '\p{Is_Script:	hebrew}', "");
Expect(1, 1424, '\p{^Is_Script:	hebrew}', "");
Expect(1, 1424, '\P{Is_Script:	hebrew}', "");
Expect(0, 1424, '\P{^Is_Script:	hebrew}', "");
Expect(1, 1479, '\p{Is_Script:   _HEBREW}', "");
Expect(0, 1479, '\p{^Is_Script:   _HEBREW}', "");
Expect(0, 1479, '\P{Is_Script:   _HEBREW}', "");
Expect(1, 1479, '\P{^Is_Script:   _HEBREW}', "");
Expect(0, 1424, '\p{Is_Script:   _HEBREW}', "");
Expect(1, 1424, '\p{^Is_Script:   _HEBREW}', "");
Expect(1, 1424, '\P{Is_Script:   _HEBREW}', "");
Expect(0, 1424, '\P{^Is_Script:   _HEBREW}', "");
Error('\p{Is_Sc=:=-	hebr}');
Error('\P{Is_Sc=:=-	hebr}');
Expect(1, 1479, '\p{Is_Sc: hebr}', "");
Expect(0, 1479, '\p{^Is_Sc: hebr}', "");
Expect(0, 1479, '\P{Is_Sc: hebr}', "");
Expect(1, 1479, '\P{^Is_Sc: hebr}', "");
Expect(0, 1424, '\p{Is_Sc: hebr}', "");
Expect(1, 1424, '\p{^Is_Sc: hebr}', "");
Expect(1, 1424, '\P{Is_Sc: hebr}', "");
Expect(0, 1424, '\P{^Is_Sc: hebr}', "");
Expect(1, 1479, '\p{Is_Sc=	-Hebr}', "");
Expect(0, 1479, '\p{^Is_Sc=	-Hebr}', "");
Expect(0, 1479, '\P{Is_Sc=	-Hebr}', "");
Expect(1, 1479, '\P{^Is_Sc=	-Hebr}', "");
Expect(0, 1424, '\p{Is_Sc=	-Hebr}', "");
Expect(1, 1424, '\p{^Is_Sc=	-Hebr}', "");
Expect(1, 1424, '\P{Is_Sc=	-Hebr}', "");
Expect(0, 1424, '\P{^Is_Sc=	-Hebr}', "");
Error('\p{Script= /a/Buginese}');
Error('\P{Script= /a/Buginese}');
Expect(1, 6683, '\p{Script:   buginese}', "");
Expect(0, 6683, '\p{^Script:   buginese}', "");
Expect(0, 6683, '\P{Script:   buginese}', "");
Expect(1, 6683, '\P{^Script:   buginese}', "");
Expect(0, 6655, '\p{Script:   buginese}', "");
Expect(1, 6655, '\p{^Script:   buginese}', "");
Expect(1, 6655, '\P{Script:   buginese}', "");
Expect(0, 6655, '\P{^Script:   buginese}', "");
Expect(1, 6683, '\p{Script= _Buginese}', "");
Expect(0, 6683, '\p{^Script= _Buginese}', "");
Expect(0, 6683, '\P{Script= _Buginese}', "");
Expect(1, 6683, '\P{^Script= _Buginese}', "");
Expect(0, 6655, '\p{Script= _Buginese}', "");
Expect(1, 6655, '\p{^Script= _Buginese}', "");
Expect(1, 6655, '\P{Script= _Buginese}', "");
Expect(0, 6655, '\P{^Script= _Buginese}', "");
Error('\p{Sc=_	Bugi/a/}');
Error('\P{Sc=_	Bugi/a/}');
Expect(1, 6683, '\p{Sc=bugi}', "");
Expect(0, 6683, '\p{^Sc=bugi}', "");
Expect(0, 6683, '\P{Sc=bugi}', "");
Expect(1, 6683, '\P{^Sc=bugi}', "");
Expect(0, 6655, '\p{Sc=bugi}', "");
Expect(1, 6655, '\p{^Sc=bugi}', "");
Expect(1, 6655, '\P{Sc=bugi}', "");
Expect(0, 6655, '\P{^Sc=bugi}', "");
Expect(1, 6683, '\p{Sc:	-Bugi}', "");
Expect(0, 6683, '\p{^Sc:	-Bugi}', "");
Expect(0, 6683, '\P{Sc:	-Bugi}', "");
Expect(1, 6683, '\P{^Sc:	-Bugi}', "");
Expect(0, 6655, '\p{Sc:	-Bugi}', "");
Expect(1, 6655, '\p{^Sc:	-Bugi}', "");
Expect(1, 6655, '\P{Sc:	-Bugi}', "");
Expect(0, 6655, '\P{^Sc:	-Bugi}', "");
Error('\p{Is_Script:	  BUGINESE/a/}');
Error('\P{Is_Script:	  BUGINESE/a/}');
Expect(1, 6683, '\p{Is_Script=buginese}', "");
Expect(0, 6683, '\p{^Is_Script=buginese}', "");
Expect(0, 6683, '\P{Is_Script=buginese}', "");
Expect(1, 6683, '\P{^Is_Script=buginese}', "");
Expect(0, 6655, '\p{Is_Script=buginese}', "");
Expect(1, 6655, '\p{^Is_Script=buginese}', "");
Expect(1, 6655, '\P{Is_Script=buginese}', "");
Expect(0, 6655, '\P{^Is_Script=buginese}', "");
Expect(1, 6683, '\p{Is_Script=- buginese}', "");
Expect(0, 6683, '\p{^Is_Script=- buginese}', "");
Expect(0, 6683, '\P{Is_Script=- buginese}', "");
Expect(1, 6683, '\P{^Is_Script=- buginese}', "");
Expect(0, 6655, '\p{Is_Script=- buginese}', "");
Expect(1, 6655, '\p{^Is_Script=- buginese}', "");
Expect(1, 6655, '\P{Is_Script=- buginese}', "");
Expect(0, 6655, '\P{^Is_Script=- buginese}', "");
Error('\p{Is_Sc=-/a/Bugi}');
Error('\P{Is_Sc=-/a/Bugi}');
Expect(1, 6683, '\p{Is_Sc=bugi}', "");
Expect(0, 6683, '\p{^Is_Sc=bugi}', "");
Expect(0, 6683, '\P{Is_Sc=bugi}', "");
Expect(1, 6683, '\P{^Is_Sc=bugi}', "");
Expect(0, 6655, '\p{Is_Sc=bugi}', "");
Expect(1, 6655, '\p{^Is_Sc=bugi}', "");
Expect(1, 6655, '\P{Is_Sc=bugi}', "");
Expect(0, 6655, '\P{^Is_Sc=bugi}', "");
Expect(1, 6683, '\p{Is_Sc=	Bugi}', "");
Expect(0, 6683, '\p{^Is_Sc=	Bugi}', "");
Expect(0, 6683, '\P{Is_Sc=	Bugi}', "");
Expect(1, 6683, '\P{^Is_Sc=	Bugi}', "");
Expect(0, 6655, '\p{Is_Sc=	Bugi}', "");
Expect(1, 6655, '\p{^Is_Sc=	Bugi}', "");
Expect(1, 6655, '\P{Is_Sc=	Bugi}', "");
Expect(0, 6655, '\P{^Is_Sc=	Bugi}', "");
Error('\p{Script=/a/	Inscriptional	Pahlavi}');
Error('\P{Script=/a/	Inscriptional	Pahlavi}');
Expect(1, 68466, '\p{Script:   inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Script:   inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Script:   inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Script:   inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Script:   inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Script:   inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Script:   inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Script:   inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Script:	_Inscriptional	Pahlavi}', "");
Expect(0, 68466, '\p{^Script:	_Inscriptional	Pahlavi}', "");
Expect(0, 68466, '\P{Script:	_Inscriptional	Pahlavi}', "");
Expect(1, 68466, '\P{^Script:	_Inscriptional	Pahlavi}', "");
Expect(0, 68447, '\p{Script:	_Inscriptional	Pahlavi}', "");
Expect(1, 68447, '\p{^Script:	_Inscriptional	Pahlavi}', "");
Expect(1, 68447, '\P{Script:	_Inscriptional	Pahlavi}', "");
Expect(0, 68447, '\P{^Script:	_Inscriptional	Pahlavi}', "");
Error('\p{Sc=--Phli:=}');
Error('\P{Sc=--Phli:=}');
Expect(1, 68466, '\p{Sc=phli}', "");
Expect(0, 68466, '\p{^Sc=phli}', "");
Expect(0, 68466, '\P{Sc=phli}', "");
Expect(1, 68466, '\P{^Sc=phli}', "");
Expect(0, 68447, '\p{Sc=phli}', "");
Expect(1, 68447, '\p{^Sc=phli}', "");
Expect(1, 68447, '\P{Sc=phli}', "");
Expect(0, 68447, '\P{^Sc=phli}', "");
Expect(1, 68466, '\p{Sc=	 Phli}', "");
Expect(0, 68466, '\p{^Sc=	 Phli}', "");
Expect(0, 68466, '\P{Sc=	 Phli}', "");
Expect(1, 68466, '\P{^Sc=	 Phli}', "");
Expect(0, 68447, '\p{Sc=	 Phli}', "");
Expect(1, 68447, '\p{^Sc=	 Phli}', "");
Expect(1, 68447, '\P{Sc=	 Phli}', "");
Expect(0, 68447, '\P{^Sc=	 Phli}', "");
Error('\p{Is_Script=	_INSCRIPTIONAL:=PAHLAVI}');
Error('\P{Is_Script=	_INSCRIPTIONAL:=PAHLAVI}');
Expect(1, 68466, '\p{Is_Script:	inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Is_Script:	inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Is_Script:	inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Is_Script:	inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Script:	inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Script:	inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Script:	inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Script:	inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Is_Script=--inscriptionalPahlavi}', "");
Expect(0, 68466, '\p{^Is_Script=--inscriptionalPahlavi}', "");
Expect(0, 68466, '\P{Is_Script=--inscriptionalPahlavi}', "");
Expect(1, 68466, '\P{^Is_Script=--inscriptionalPahlavi}', "");
Expect(0, 68447, '\p{Is_Script=--inscriptionalPahlavi}', "");
Expect(1, 68447, '\p{^Is_Script=--inscriptionalPahlavi}', "");
Expect(1, 68447, '\P{Is_Script=--inscriptionalPahlavi}', "");
Expect(0, 68447, '\P{^Is_Script=--inscriptionalPahlavi}', "");
Error('\p{Is_Sc:-_phli:=}');
Error('\P{Is_Sc:-_phli:=}');
Expect(1, 68466, '\p{Is_Sc=phli}', "");
Expect(0, 68466, '\p{^Is_Sc=phli}', "");
Expect(0, 68466, '\P{Is_Sc=phli}', "");
Expect(1, 68466, '\P{^Is_Sc=phli}', "");
Expect(0, 68447, '\p{Is_Sc=phli}', "");
Expect(1, 68447, '\p{^Is_Sc=phli}', "");
Expect(1, 68447, '\P{Is_Sc=phli}', "");
Expect(0, 68447, '\P{^Is_Sc=phli}', "");
Expect(1, 68466, '\p{Is_Sc=	-phli}', "");
Expect(0, 68466, '\p{^Is_Sc=	-phli}', "");
Expect(0, 68466, '\P{Is_Sc=	-phli}', "");
Expect(1, 68466, '\P{^Is_Sc=	-phli}', "");
Expect(0, 68447, '\p{Is_Sc=	-phli}', "");
Expect(1, 68447, '\p{^Is_Sc=	-phli}', "");
Expect(1, 68447, '\P{Is_Sc=	-phli}', "");
Expect(0, 68447, '\P{^Is_Sc=	-phli}', "");
Error('\p{Script=	_Tai-Tham:=}');
Error('\P{Script=	_Tai-Tham:=}');
Expect(1, 6750, '\p{Script=taitham}', "");
Expect(0, 6750, '\p{^Script=taitham}', "");
Expect(0, 6750, '\P{Script=taitham}', "");
Expect(1, 6750, '\P{^Script=taitham}', "");
Expect(0, 6687, '\p{Script=taitham}', "");
Expect(1, 6687, '\p{^Script=taitham}', "");
Expect(1, 6687, '\P{Script=taitham}', "");
Expect(0, 6687, '\P{^Script=taitham}', "");
Expect(1, 6750, '\p{Script:_-TAI	tham}', "");
Expect(0, 6750, '\p{^Script:_-TAI	tham}', "");
Expect(0, 6750, '\P{Script:_-TAI	tham}', "");
Expect(1, 6750, '\P{^Script:_-TAI	tham}', "");
Expect(0, 6687, '\p{Script:_-TAI	tham}', "");
Expect(1, 6687, '\p{^Script:_-TAI	tham}', "");
Expect(1, 6687, '\P{Script:_-TAI	tham}', "");
Expect(0, 6687, '\P{^Script:_-TAI	tham}', "");
Error('\p{Sc=/a/LANA}');
Error('\P{Sc=/a/LANA}');
Expect(1, 6750, '\p{Sc=lana}', "");
Expect(0, 6750, '\p{^Sc=lana}', "");
Expect(0, 6750, '\P{Sc=lana}', "");
Expect(1, 6750, '\P{^Sc=lana}', "");
Expect(0, 6687, '\p{Sc=lana}', "");
Expect(1, 6687, '\p{^Sc=lana}', "");
Expect(1, 6687, '\P{Sc=lana}', "");
Expect(0, 6687, '\P{^Sc=lana}', "");
Expect(1, 6750, '\p{Sc=  lana}', "");
Expect(0, 6750, '\p{^Sc=  lana}', "");
Expect(0, 6750, '\P{Sc=  lana}', "");
Expect(1, 6750, '\P{^Sc=  lana}', "");
Expect(0, 6687, '\p{Sc=  lana}', "");
Expect(1, 6687, '\p{^Sc=  lana}', "");
Expect(1, 6687, '\P{Sc=  lana}', "");
Expect(0, 6687, '\P{^Sc=  lana}', "");
Error('\p{Is_Script=-Tai_Tham/a/}');
Error('\P{Is_Script=-Tai_Tham/a/}');
Expect(1, 6750, '\p{Is_Script=taitham}', "");
Expect(0, 6750, '\p{^Is_Script=taitham}', "");
Expect(0, 6750, '\P{Is_Script=taitham}', "");
Expect(1, 6750, '\P{^Is_Script=taitham}', "");
Expect(0, 6687, '\p{Is_Script=taitham}', "");
Expect(1, 6687, '\p{^Is_Script=taitham}', "");
Expect(1, 6687, '\P{Is_Script=taitham}', "");
Expect(0, 6687, '\P{^Is_Script=taitham}', "");
Expect(1, 6750, '\p{Is_Script=tai	tham}', "");
Expect(0, 6750, '\p{^Is_Script=tai	tham}', "");
Expect(0, 6750, '\P{Is_Script=tai	tham}', "");
Expect(1, 6750, '\P{^Is_Script=tai	tham}', "");
Expect(0, 6687, '\p{Is_Script=tai	tham}', "");
Expect(1, 6687, '\p{^Is_Script=tai	tham}', "");
Expect(1, 6687, '\P{Is_Script=tai	tham}', "");
Expect(0, 6687, '\P{^Is_Script=tai	tham}', "");
Error('\p{Is_Sc:	_/a/LANA}');
Error('\P{Is_Sc:	_/a/LANA}');
Expect(1, 6750, '\p{Is_Sc=lana}', "");
Expect(0, 6750, '\p{^Is_Sc=lana}', "");
Expect(0, 6750, '\P{Is_Sc=lana}', "");
Expect(1, 6750, '\P{^Is_Sc=lana}', "");
Expect(0, 6687, '\p{Is_Sc=lana}', "");
Expect(1, 6687, '\p{^Is_Sc=lana}', "");
Expect(1, 6687, '\P{Is_Sc=lana}', "");
Expect(0, 6687, '\P{^Is_Sc=lana}', "");
Expect(1, 6750, '\p{Is_Sc=-Lana}', "");
Expect(0, 6750, '\p{^Is_Sc=-Lana}', "");
Expect(0, 6750, '\P{Is_Sc=-Lana}', "");
Expect(1, 6750, '\P{^Is_Sc=-Lana}', "");
Expect(0, 6687, '\p{Is_Sc=-Lana}', "");
Expect(1, 6687, '\p{^Is_Sc=-Lana}', "");
Expect(1, 6687, '\P{Is_Sc=-Lana}', "");
Expect(0, 6687, '\P{^Is_Sc=-Lana}', "");
Error('\p{Script= /a/gurmukhi}');
Error('\P{Script= /a/gurmukhi}');
Expect(1, 2563, '\p{Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Script=gurmukhi}', "");
Expect(0, 2563, '\P{Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Script=gurmukhi}', "");
Expect(0, 2560, '\p{Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Script=gurmukhi}', "");
Expect(1, 2560, '\P{Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Script=gurmukhi}', "");
Expect(1, 2563, '\p{Script=_-GURMUKHI}', "");
Expect(0, 2563, '\p{^Script=_-GURMUKHI}', "");
Expect(0, 2563, '\P{Script=_-GURMUKHI}', "");
Expect(1, 2563, '\P{^Script=_-GURMUKHI}', "");
Expect(0, 2560, '\p{Script=_-GURMUKHI}', "");
Expect(1, 2560, '\p{^Script=_-GURMUKHI}', "");
Expect(1, 2560, '\P{Script=_-GURMUKHI}', "");
Expect(0, 2560, '\P{^Script=_-GURMUKHI}', "");
Error('\p{Sc=	/a/GURU}');
Error('\P{Sc=	/a/GURU}');
Expect(1, 2563, '\p{Sc=guru}', "");
Expect(0, 2563, '\p{^Sc=guru}', "");
Expect(0, 2563, '\P{Sc=guru}', "");
Expect(1, 2563, '\P{^Sc=guru}', "");
Expect(0, 2560, '\p{Sc=guru}', "");
Expect(1, 2560, '\p{^Sc=guru}', "");
Expect(1, 2560, '\P{Sc=guru}', "");
Expect(0, 2560, '\P{^Sc=guru}', "");
Expect(1, 2563, '\p{Sc=-_Guru}', "");
Expect(0, 2563, '\p{^Sc=-_Guru}', "");
Expect(0, 2563, '\P{Sc=-_Guru}', "");
Expect(1, 2563, '\P{^Sc=-_Guru}', "");
Expect(0, 2560, '\p{Sc=-_Guru}', "");
Expect(1, 2560, '\p{^Sc=-_Guru}', "");
Expect(1, 2560, '\P{Sc=-_Guru}', "");
Expect(0, 2560, '\P{^Sc=-_Guru}', "");
Error('\p{Is_Script=:= 	gurmukhi}');
Error('\P{Is_Script=:= 	gurmukhi}');
Expect(1, 2563, '\p{Is_Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script=gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script=gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script=gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script=gurmukhi}', "");
Expect(1, 2563, '\p{Is_Script=_-Gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script=_-Gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script=_-Gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script=_-Gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script=_-Gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script=_-Gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script=_-Gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script=_-Gurmukhi}', "");
Error('\p{Is_Sc=	/a/Guru}');
Error('\P{Is_Sc=	/a/Guru}');
Expect(1, 2563, '\p{Is_Sc=guru}', "");
Expect(0, 2563, '\p{^Is_Sc=guru}', "");
Expect(0, 2563, '\P{Is_Sc=guru}', "");
Expect(1, 2563, '\P{^Is_Sc=guru}', "");
Expect(0, 2560, '\p{Is_Sc=guru}', "");
Expect(1, 2560, '\p{^Is_Sc=guru}', "");
Expect(1, 2560, '\P{Is_Sc=guru}', "");
Expect(0, 2560, '\P{^Is_Sc=guru}', "");
Expect(1, 2563, '\p{Is_Sc=-Guru}', "");
Expect(0, 2563, '\p{^Is_Sc=-Guru}', "");
Expect(0, 2563, '\P{Is_Sc=-Guru}', "");
Expect(1, 2563, '\P{^Is_Sc=-Guru}', "");
Expect(0, 2560, '\p{Is_Sc=-Guru}', "");
Expect(1, 2560, '\p{^Is_Sc=-Guru}', "");
Expect(1, 2560, '\P{Is_Sc=-Guru}', "");
Expect(0, 2560, '\P{^Is_Sc=-Guru}', "");
Error('\p{Script=_ Cypriot/a/}');
Error('\P{Script=_ Cypriot/a/}');
Expect(1, 67589, '\p{Script=cypriot}', "");
Expect(0, 67589, '\p{^Script=cypriot}', "");
Expect(0, 67589, '\P{Script=cypriot}', "");
Expect(1, 67589, '\P{^Script=cypriot}', "");
Expect(0, 67583, '\p{Script=cypriot}', "");
Expect(1, 67583, '\p{^Script=cypriot}', "");
Expect(1, 67583, '\P{Script=cypriot}', "");
Expect(0, 67583, '\P{^Script=cypriot}', "");
Expect(1, 67589, '\p{Script= 	cypriot}', "");
Expect(0, 67589, '\p{^Script= 	cypriot}', "");
Expect(0, 67589, '\P{Script= 	cypriot}', "");
Expect(1, 67589, '\P{^Script= 	cypriot}', "");
Expect(0, 67583, '\p{Script= 	cypriot}', "");
Expect(1, 67583, '\p{^Script= 	cypriot}', "");
Expect(1, 67583, '\P{Script= 	cypriot}', "");
Expect(0, 67583, '\P{^Script= 	cypriot}', "");
Error('\p{Sc=	 CPRT:=}');
Error('\P{Sc=	 CPRT:=}');
Expect(1, 67589, '\p{Sc=cprt}', "");
Expect(0, 67589, '\p{^Sc=cprt}', "");
Expect(0, 67589, '\P{Sc=cprt}', "");
Expect(1, 67589, '\P{^Sc=cprt}', "");
Expect(0, 67583, '\p{Sc=cprt}', "");
Expect(1, 67583, '\p{^Sc=cprt}', "");
Expect(1, 67583, '\P{Sc=cprt}', "");
Expect(0, 67583, '\P{^Sc=cprt}', "");
Expect(1, 67589, '\p{Sc=_	CPRT}', "");
Expect(0, 67589, '\p{^Sc=_	CPRT}', "");
Expect(0, 67589, '\P{Sc=_	CPRT}', "");
Expect(1, 67589, '\P{^Sc=_	CPRT}', "");
Expect(0, 67583, '\p{Sc=_	CPRT}', "");
Expect(1, 67583, '\p{^Sc=_	CPRT}', "");
Expect(1, 67583, '\P{Sc=_	CPRT}', "");
Expect(0, 67583, '\P{^Sc=_	CPRT}', "");
Error('\p{Is_Script=-/a/CYPRIOT}');
Error('\P{Is_Script=-/a/CYPRIOT}');
Expect(1, 67589, '\p{Is_Script=cypriot}', "");
Expect(0, 67589, '\p{^Is_Script=cypriot}', "");
Expect(0, 67589, '\P{Is_Script=cypriot}', "");
Expect(1, 67589, '\P{^Is_Script=cypriot}', "");
Expect(0, 67583, '\p{Is_Script=cypriot}', "");
Expect(1, 67583, '\p{^Is_Script=cypriot}', "");
Expect(1, 67583, '\P{Is_Script=cypriot}', "");
Expect(0, 67583, '\P{^Is_Script=cypriot}', "");
Expect(1, 67589, '\p{Is_Script=_-Cypriot}', "");
Expect(0, 67589, '\p{^Is_Script=_-Cypriot}', "");
Expect(0, 67589, '\P{Is_Script=_-Cypriot}', "");
Expect(1, 67589, '\P{^Is_Script=_-Cypriot}', "");
Expect(0, 67583, '\p{Is_Script=_-Cypriot}', "");
Expect(1, 67583, '\p{^Is_Script=_-Cypriot}', "");
Expect(1, 67583, '\P{Is_Script=_-Cypriot}', "");
Expect(0, 67583, '\P{^Is_Script=_-Cypriot}', "");
Error('\p{Is_Sc=/a/_cprt}');
Error('\P{Is_Sc=/a/_cprt}');
Expect(1, 67589, '\p{Is_Sc=cprt}', "");
Expect(0, 67589, '\p{^Is_Sc=cprt}', "");
Expect(0, 67589, '\P{Is_Sc=cprt}', "");
Expect(1, 67589, '\P{^Is_Sc=cprt}', "");
Expect(0, 67583, '\p{Is_Sc=cprt}', "");
Expect(1, 67583, '\p{^Is_Sc=cprt}', "");
Expect(1, 67583, '\P{Is_Sc=cprt}', "");
Expect(0, 67583, '\P{^Is_Sc=cprt}', "");
Expect(1, 67589, '\p{Is_Sc= cprt}', "");
Expect(0, 67589, '\p{^Is_Sc= cprt}', "");
Expect(0, 67589, '\P{Is_Sc= cprt}', "");
Expect(1, 67589, '\P{^Is_Sc= cprt}', "");
Expect(0, 67583, '\p{Is_Sc= cprt}', "");
Expect(1, 67583, '\p{^Is_Sc= cprt}', "");
Expect(1, 67583, '\P{Is_Sc= cprt}', "");
Expect(0, 67583, '\P{^Is_Sc= cprt}', "");
Error('\p{Script:  /a/Hangul}');
Error('\P{Script:  /a/Hangul}');
Expect(1, 4607, '\p{Script:hangul}', "");
Expect(0, 4607, '\p{^Script:hangul}', "");
Expect(0, 4607, '\P{Script:hangul}', "");
Expect(1, 4607, '\P{^Script:hangul}', "");
Expect(0, 4351, '\p{Script:hangul}', "");
Expect(1, 4351, '\p{^Script:hangul}', "");
Expect(1, 4351, '\P{Script:hangul}', "");
Expect(0, 4351, '\P{^Script:hangul}', "");
Expect(1, 4607, '\p{Script= Hangul}', "");
Expect(0, 4607, '\p{^Script= Hangul}', "");
Expect(0, 4607, '\P{Script= Hangul}', "");
Expect(1, 4607, '\P{^Script= Hangul}', "");
Expect(0, 4351, '\p{Script= Hangul}', "");
Expect(1, 4351, '\p{^Script= Hangul}', "");
Expect(1, 4351, '\P{Script= Hangul}', "");
Expect(0, 4351, '\P{^Script= Hangul}', "");
Error('\p{Sc=_	HANG:=}');
Error('\P{Sc=_	HANG:=}');
Expect(1, 4607, '\p{Sc=hang}', "");
Expect(0, 4607, '\p{^Sc=hang}', "");
Expect(0, 4607, '\P{Sc=hang}', "");
Expect(1, 4607, '\P{^Sc=hang}', "");
Expect(0, 4351, '\p{Sc=hang}', "");
Expect(1, 4351, '\p{^Sc=hang}', "");
Expect(1, 4351, '\P{Sc=hang}', "");
Expect(0, 4351, '\P{^Sc=hang}', "");
Expect(1, 4607, '\p{Sc=		HANG}', "");
Expect(0, 4607, '\p{^Sc=		HANG}', "");
Expect(0, 4607, '\P{Sc=		HANG}', "");
Expect(1, 4607, '\P{^Sc=		HANG}', "");
Expect(0, 4351, '\p{Sc=		HANG}', "");
Expect(1, 4351, '\p{^Sc=		HANG}', "");
Expect(1, 4351, '\P{Sc=		HANG}', "");
Expect(0, 4351, '\P{^Sc=		HANG}', "");
Error('\p{Is_Script=	Hangul/a/}');
Error('\P{Is_Script=	Hangul/a/}');
Expect(1, 4607, '\p{Is_Script=hangul}', "");
Expect(0, 4607, '\p{^Is_Script=hangul}', "");
Expect(0, 4607, '\P{Is_Script=hangul}', "");
Expect(1, 4607, '\P{^Is_Script=hangul}', "");
Expect(0, 4351, '\p{Is_Script=hangul}', "");
Expect(1, 4351, '\p{^Is_Script=hangul}', "");
Expect(1, 4351, '\P{Is_Script=hangul}', "");
Expect(0, 4351, '\P{^Is_Script=hangul}', "");
Expect(1, 4607, '\p{Is_Script=	_Hangul}', "");
Expect(0, 4607, '\p{^Is_Script=	_Hangul}', "");
Expect(0, 4607, '\P{Is_Script=	_Hangul}', "");
Expect(1, 4607, '\P{^Is_Script=	_Hangul}', "");
Expect(0, 4351, '\p{Is_Script=	_Hangul}', "");
Expect(1, 4351, '\p{^Is_Script=	_Hangul}', "");
Expect(1, 4351, '\P{Is_Script=	_Hangul}', "");
Expect(0, 4351, '\P{^Is_Script=	_Hangul}', "");
Error('\p{Is_Sc=:=_	Hang}');
Error('\P{Is_Sc=:=_	Hang}');
Expect(1, 4607, '\p{Is_Sc=hang}', "");
Expect(0, 4607, '\p{^Is_Sc=hang}', "");
Expect(0, 4607, '\P{Is_Sc=hang}', "");
Expect(1, 4607, '\P{^Is_Sc=hang}', "");
Expect(0, 4351, '\p{Is_Sc=hang}', "");
Expect(1, 4351, '\p{^Is_Sc=hang}', "");
Expect(1, 4351, '\P{Is_Sc=hang}', "");
Expect(0, 4351, '\P{^Is_Sc=hang}', "");
Expect(1, 4607, '\p{Is_Sc= _Hang}', "");
Expect(0, 4607, '\p{^Is_Sc= _Hang}', "");
Expect(0, 4607, '\P{Is_Sc= _Hang}', "");
Expect(1, 4607, '\P{^Is_Sc= _Hang}', "");
Expect(0, 4351, '\p{Is_Sc= _Hang}', "");
Expect(1, 4351, '\p{^Is_Sc= _Hang}', "");
Expect(1, 4351, '\P{Is_Sc= _Hang}', "");
Expect(0, 4351, '\P{^Is_Sc= _Hang}', "");
Error('\p{Script=/a/_Unknown}');
Error('\P{Script=/a/_Unknown}');
Expect(1, 889, '\p{Script=unknown}', "");
Expect(0, 889, '\p{^Script=unknown}', "");
Expect(0, 889, '\P{Script=unknown}', "");
Expect(1, 889, '\P{^Script=unknown}', "");
Expect(0, 887, '\p{Script=unknown}', "");
Expect(1, 887, '\p{^Script=unknown}', "");
Expect(1, 887, '\P{Script=unknown}', "");
Expect(0, 887, '\P{^Script=unknown}', "");
Expect(1, 889, '\p{Script=-Unknown}', "");
Expect(0, 889, '\p{^Script=-Unknown}', "");
Expect(0, 889, '\P{Script=-Unknown}', "");
Expect(1, 889, '\P{^Script=-Unknown}', "");
Expect(0, 887, '\p{Script=-Unknown}', "");
Expect(1, 887, '\p{^Script=-Unknown}', "");
Expect(1, 887, '\P{Script=-Unknown}', "");
Expect(0, 887, '\P{^Script=-Unknown}', "");
Error('\p{Sc=:= _zzzz}');
Error('\P{Sc=:= _zzzz}');
Expect(1, 889, '\p{Sc:zzzz}', "");
Expect(0, 889, '\p{^Sc:zzzz}', "");
Expect(0, 889, '\P{Sc:zzzz}', "");
Expect(1, 889, '\P{^Sc:zzzz}', "");
Expect(0, 887, '\p{Sc:zzzz}', "");
Expect(1, 887, '\p{^Sc:zzzz}', "");
Expect(1, 887, '\P{Sc:zzzz}', "");
Expect(0, 887, '\P{^Sc:zzzz}', "");
Expect(1, 889, '\p{Sc=_ ZZZZ}', "");
Expect(0, 889, '\p{^Sc=_ ZZZZ}', "");
Expect(0, 889, '\P{Sc=_ ZZZZ}', "");
Expect(1, 889, '\P{^Sc=_ ZZZZ}', "");
Expect(0, 887, '\p{Sc=_ ZZZZ}', "");
Expect(1, 887, '\p{^Sc=_ ZZZZ}', "");
Expect(1, 887, '\P{Sc=_ ZZZZ}', "");
Expect(0, 887, '\P{^Sc=_ ZZZZ}', "");
Error('\p{Is_Script=-_Unknown:=}');
Error('\P{Is_Script=-_Unknown:=}');
Expect(1, 889, '\p{Is_Script=unknown}', "");
Expect(0, 889, '\p{^Is_Script=unknown}', "");
Expect(0, 889, '\P{Is_Script=unknown}', "");
Expect(1, 889, '\P{^Is_Script=unknown}', "");
Expect(0, 887, '\p{Is_Script=unknown}', "");
Expect(1, 887, '\p{^Is_Script=unknown}', "");
Expect(1, 887, '\P{Is_Script=unknown}', "");
Expect(0, 887, '\P{^Is_Script=unknown}', "");
Expect(1, 889, '\p{Is_Script: -Unknown}', "");
Expect(0, 889, '\p{^Is_Script: -Unknown}', "");
Expect(0, 889, '\P{Is_Script: -Unknown}', "");
Expect(1, 889, '\P{^Is_Script: -Unknown}', "");
Expect(0, 887, '\p{Is_Script: -Unknown}', "");
Expect(1, 887, '\p{^Is_Script: -Unknown}', "");
Expect(1, 887, '\P{Is_Script: -Unknown}', "");
Expect(0, 887, '\P{^Is_Script: -Unknown}', "");
Error('\p{Is_Sc:   ZZZZ:=}');
Error('\P{Is_Sc:   ZZZZ:=}');
Expect(1, 889, '\p{Is_Sc=zzzz}', "");
Expect(0, 889, '\p{^Is_Sc=zzzz}', "");
Expect(0, 889, '\P{Is_Sc=zzzz}', "");
Expect(1, 889, '\P{^Is_Sc=zzzz}', "");
Expect(0, 887, '\p{Is_Sc=zzzz}', "");
Expect(1, 887, '\p{^Is_Sc=zzzz}', "");
Expect(1, 887, '\P{Is_Sc=zzzz}', "");
Expect(0, 887, '\P{^Is_Sc=zzzz}', "");
Expect(1, 889, '\p{Is_Sc=-zzzz}', "");
Expect(0, 889, '\p{^Is_Sc=-zzzz}', "");
Expect(0, 889, '\P{Is_Sc=-zzzz}', "");
Expect(1, 889, '\P{^Is_Sc=-zzzz}', "");
Expect(0, 887, '\p{Is_Sc=-zzzz}', "");
Expect(1, 887, '\p{^Is_Sc=-zzzz}', "");
Expect(1, 887, '\P{Is_Sc=-zzzz}', "");
Expect(0, 887, '\P{^Is_Sc=-zzzz}', "");
Error('\p{Script=/a/-deseret}');
Error('\P{Script=/a/-deseret}');
Expect(1, 66639, '\p{Script=deseret}', "");
Expect(0, 66639, '\p{^Script=deseret}', "");
Expect(0, 66639, '\P{Script=deseret}', "");
Expect(1, 66639, '\P{^Script=deseret}', "");
Expect(0, 66559, '\p{Script=deseret}', "");
Expect(1, 66559, '\p{^Script=deseret}', "");
Expect(1, 66559, '\P{Script=deseret}', "");
Expect(0, 66559, '\P{^Script=deseret}', "");
Expect(1, 66639, '\p{Script:	_ DESERET}', "");
Expect(0, 66639, '\p{^Script:	_ DESERET}', "");
Expect(0, 66639, '\P{Script:	_ DESERET}', "");
Expect(1, 66639, '\P{^Script:	_ DESERET}', "");
Expect(0, 66559, '\p{Script:	_ DESERET}', "");
Expect(1, 66559, '\p{^Script:	_ DESERET}', "");
Expect(1, 66559, '\P{Script:	_ DESERET}', "");
Expect(0, 66559, '\P{^Script:	_ DESERET}', "");
Error('\p{Sc=_:=Dsrt}');
Error('\P{Sc=_:=Dsrt}');
Expect(1, 66639, '\p{Sc=dsrt}', "");
Expect(0, 66639, '\p{^Sc=dsrt}', "");
Expect(0, 66639, '\P{Sc=dsrt}', "");
Expect(1, 66639, '\P{^Sc=dsrt}', "");
Expect(0, 66559, '\p{Sc=dsrt}', "");
Expect(1, 66559, '\p{^Sc=dsrt}', "");
Expect(1, 66559, '\P{Sc=dsrt}', "");
Expect(0, 66559, '\P{^Sc=dsrt}', "");
Expect(1, 66639, '\p{Sc=-DSRT}', "");
Expect(0, 66639, '\p{^Sc=-DSRT}', "");
Expect(0, 66639, '\P{Sc=-DSRT}', "");
Expect(1, 66639, '\P{^Sc=-DSRT}', "");
Expect(0, 66559, '\p{Sc=-DSRT}', "");
Expect(1, 66559, '\p{^Sc=-DSRT}', "");
Expect(1, 66559, '\P{Sc=-DSRT}', "");
Expect(0, 66559, '\P{^Sc=-DSRT}', "");
Error('\p{Is_Script=__Deseret/a/}');
Error('\P{Is_Script=__Deseret/a/}');
Expect(1, 66639, '\p{Is_Script=deseret}', "");
Expect(0, 66639, '\p{^Is_Script=deseret}', "");
Expect(0, 66639, '\P{Is_Script=deseret}', "");
Expect(1, 66639, '\P{^Is_Script=deseret}', "");
Expect(0, 66559, '\p{Is_Script=deseret}', "");
Expect(1, 66559, '\p{^Is_Script=deseret}', "");
Expect(1, 66559, '\P{Is_Script=deseret}', "");
Expect(0, 66559, '\P{^Is_Script=deseret}', "");
Expect(1, 66639, '\p{Is_Script=_Deseret}', "");
Expect(0, 66639, '\p{^Is_Script=_Deseret}', "");
Expect(0, 66639, '\P{Is_Script=_Deseret}', "");
Expect(1, 66639, '\P{^Is_Script=_Deseret}', "");
Expect(0, 66559, '\p{Is_Script=_Deseret}', "");
Expect(1, 66559, '\p{^Is_Script=_Deseret}', "");
Expect(1, 66559, '\P{Is_Script=_Deseret}', "");
Expect(0, 66559, '\P{^Is_Script=_Deseret}', "");
Error('\p{Is_Sc=/a/_Dsrt}');
Error('\P{Is_Sc=/a/_Dsrt}');
Expect(1, 66639, '\p{Is_Sc=dsrt}', "");
Expect(0, 66639, '\p{^Is_Sc=dsrt}', "");
Expect(0, 66639, '\P{Is_Sc=dsrt}', "");
Expect(1, 66639, '\P{^Is_Sc=dsrt}', "");
Expect(0, 66559, '\p{Is_Sc=dsrt}', "");
Expect(1, 66559, '\p{^Is_Sc=dsrt}', "");
Expect(1, 66559, '\P{Is_Sc=dsrt}', "");
Expect(0, 66559, '\P{^Is_Sc=dsrt}', "");
Expect(1, 66639, '\p{Is_Sc: 	Dsrt}', "");
Expect(0, 66639, '\p{^Is_Sc: 	Dsrt}', "");
Expect(0, 66639, '\P{Is_Sc: 	Dsrt}', "");
Expect(1, 66639, '\P{^Is_Sc: 	Dsrt}', "");
Expect(0, 66559, '\p{Is_Sc: 	Dsrt}', "");
Expect(1, 66559, '\p{^Is_Sc: 	Dsrt}', "");
Expect(1, 66559, '\P{Is_Sc: 	Dsrt}', "");
Expect(0, 66559, '\P{^Is_Sc: 	Dsrt}', "");
Error('\p{Script=-/a/Cuneiform}');
Error('\P{Script=-/a/Cuneiform}');
Expect(1, 74606, '\p{Script=cuneiform}', "");
Expect(0, 74606, '\p{^Script=cuneiform}', "");
Expect(0, 74606, '\P{Script=cuneiform}', "");
Expect(1, 74606, '\P{^Script=cuneiform}', "");
Expect(0, 73727, '\p{Script=cuneiform}', "");
Expect(1, 73727, '\p{^Script=cuneiform}', "");
Expect(1, 73727, '\P{Script=cuneiform}', "");
Expect(0, 73727, '\P{^Script=cuneiform}', "");
Expect(1, 74606, '\p{Script= cuneiform}', "");
Expect(0, 74606, '\p{^Script= cuneiform}', "");
Expect(0, 74606, '\P{Script= cuneiform}', "");
Expect(1, 74606, '\P{^Script= cuneiform}', "");
Expect(0, 73727, '\p{Script= cuneiform}', "");
Expect(1, 73727, '\p{^Script= cuneiform}', "");
Expect(1, 73727, '\P{Script= cuneiform}', "");
Expect(0, 73727, '\P{^Script= cuneiform}', "");
Error('\p{Sc=:=  Xsux}');
Error('\P{Sc=:=  Xsux}');
Expect(1, 74606, '\p{Sc=xsux}', "");
Expect(0, 74606, '\p{^Sc=xsux}', "");
Expect(0, 74606, '\P{Sc=xsux}', "");
Expect(1, 74606, '\P{^Sc=xsux}', "");
Expect(0, 73727, '\p{Sc=xsux}', "");
Expect(1, 73727, '\p{^Sc=xsux}', "");
Expect(1, 73727, '\P{Sc=xsux}', "");
Expect(0, 73727, '\P{^Sc=xsux}', "");
Expect(1, 74606, '\p{Sc:   -_XSUX}', "");
Expect(0, 74606, '\p{^Sc:   -_XSUX}', "");
Expect(0, 74606, '\P{Sc:   -_XSUX}', "");
Expect(1, 74606, '\P{^Sc:   -_XSUX}', "");
Expect(0, 73727, '\p{Sc:   -_XSUX}', "");
Expect(1, 73727, '\p{^Sc:   -_XSUX}', "");
Expect(1, 73727, '\P{Sc:   -_XSUX}', "");
Expect(0, 73727, '\P{^Sc:   -_XSUX}', "");
Error('\p{Is_Script=/a/Cuneiform}');
Error('\P{Is_Script=/a/Cuneiform}');
Expect(1, 74606, '\p{Is_Script=cuneiform}', "");
Expect(0, 74606, '\p{^Is_Script=cuneiform}', "");
Expect(0, 74606, '\P{Is_Script=cuneiform}', "");
Expect(1, 74606, '\P{^Is_Script=cuneiform}', "");
Expect(0, 73727, '\p{Is_Script=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Script=cuneiform}', "");
Expect(1, 73727, '\P{Is_Script=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Script=cuneiform}', "");
Expect(1, 74606, '\p{Is_Script=- CUNEIFORM}', "");
Expect(0, 74606, '\p{^Is_Script=- CUNEIFORM}', "");
Expect(0, 74606, '\P{Is_Script=- CUNEIFORM}', "");
Expect(1, 74606, '\P{^Is_Script=- CUNEIFORM}', "");
Expect(0, 73727, '\p{Is_Script=- CUNEIFORM}', "");
Expect(1, 73727, '\p{^Is_Script=- CUNEIFORM}', "");
Expect(1, 73727, '\P{Is_Script=- CUNEIFORM}', "");
Expect(0, 73727, '\P{^Is_Script=- CUNEIFORM}', "");
Error('\p{Is_Sc:  _Xsux:=}');
Error('\P{Is_Sc:  _Xsux:=}');
Expect(1, 74606, '\p{Is_Sc:xsux}', "");
Expect(0, 74606, '\p{^Is_Sc:xsux}', "");
Expect(0, 74606, '\P{Is_Sc:xsux}', "");
Expect(1, 74606, '\P{^Is_Sc:xsux}', "");
Expect(0, 73727, '\p{Is_Sc:xsux}', "");
Expect(1, 73727, '\p{^Is_Sc:xsux}', "");
Expect(1, 73727, '\P{Is_Sc:xsux}', "");
Expect(0, 73727, '\P{^Is_Sc:xsux}', "");
Expect(1, 74606, '\p{Is_Sc=  Xsux}', "");
Expect(0, 74606, '\p{^Is_Sc=  Xsux}', "");
Expect(0, 74606, '\P{Is_Sc=  Xsux}', "");
Expect(1, 74606, '\P{^Is_Sc=  Xsux}', "");
Expect(0, 73727, '\p{Is_Sc=  Xsux}', "");
Expect(1, 73727, '\p{^Is_Sc=  Xsux}', "");
Expect(1, 73727, '\P{Is_Sc=  Xsux}', "");
Expect(0, 73727, '\P{^Is_Sc=  Xsux}', "");
Error('\p{Script=/a/-inherited}');
Error('\P{Script=/a/-inherited}');
Expect(1, 879, '\p{Script=inherited}', "");
Expect(0, 879, '\p{^Script=inherited}', "");
Expect(0, 879, '\P{Script=inherited}', "");
Expect(1, 879, '\P{^Script=inherited}', "");
Expect(0, 767, '\p{Script=inherited}', "");
Expect(1, 767, '\p{^Script=inherited}', "");
Expect(1, 767, '\P{Script=inherited}', "");
Expect(0, 767, '\P{^Script=inherited}', "");
Expect(1, 879, '\p{Script=_	inherited}', "");
Expect(0, 879, '\p{^Script=_	inherited}', "");
Expect(0, 879, '\P{Script=_	inherited}', "");
Expect(1, 879, '\P{^Script=_	inherited}', "");
Expect(0, 767, '\p{Script=_	inherited}', "");
Expect(1, 767, '\p{^Script=_	inherited}', "");
Expect(1, 767, '\P{Script=_	inherited}', "");
Expect(0, 767, '\P{^Script=_	inherited}', "");
Error('\p{Sc:    Zinh:=}');
Error('\P{Sc:    Zinh:=}');
Expect(1, 879, '\p{Sc=zinh}', "");
Expect(0, 879, '\p{^Sc=zinh}', "");
Expect(0, 879, '\P{Sc=zinh}', "");
Expect(1, 879, '\P{^Sc=zinh}', "");
Expect(0, 767, '\p{Sc=zinh}', "");
Expect(1, 767, '\p{^Sc=zinh}', "");
Expect(1, 767, '\P{Sc=zinh}', "");
Expect(0, 767, '\P{^Sc=zinh}', "");
Expect(1, 879, '\p{Sc=_-ZINH}', "");
Expect(0, 879, '\p{^Sc=_-ZINH}', "");
Expect(0, 879, '\P{Sc=_-ZINH}', "");
Expect(1, 879, '\P{^Sc=_-ZINH}', "");
Expect(0, 767, '\p{Sc=_-ZINH}', "");
Expect(1, 767, '\p{^Sc=_-ZINH}', "");
Expect(1, 767, '\P{Sc=_-ZINH}', "");
Expect(0, 767, '\P{^Sc=_-ZINH}', "");
Error('\p{Is_Script=_QAAI:=}');
Error('\P{Is_Script=_QAAI:=}');
Expect(1, 879, '\p{Is_Script=qaai}', "");
Expect(0, 879, '\p{^Is_Script=qaai}', "");
Expect(0, 879, '\P{Is_Script=qaai}', "");
Expect(1, 879, '\P{^Is_Script=qaai}', "");
Expect(0, 767, '\p{Is_Script=qaai}', "");
Expect(1, 767, '\p{^Is_Script=qaai}', "");
Expect(1, 767, '\P{Is_Script=qaai}', "");
Expect(0, 767, '\P{^Is_Script=qaai}', "");
Expect(1, 879, '\p{Is_Script=	 qaai}', "");
Expect(0, 879, '\p{^Is_Script=	 qaai}', "");
Expect(0, 879, '\P{Is_Script=	 qaai}', "");
Expect(1, 879, '\P{^Is_Script=	 qaai}', "");
Expect(0, 767, '\p{Is_Script=	 qaai}', "");
Expect(1, 767, '\p{^Is_Script=	 qaai}', "");
Expect(1, 767, '\P{Is_Script=	 qaai}', "");
Expect(0, 767, '\P{^Is_Script=	 qaai}', "");
Error('\p{Is_Sc=	-Inherited:=}');
Error('\P{Is_Sc=	-Inherited:=}');
Expect(1, 879, '\p{Is_Sc=inherited}', "");
Expect(0, 879, '\p{^Is_Sc=inherited}', "");
Expect(0, 879, '\P{Is_Sc=inherited}', "");
Expect(1, 879, '\P{^Is_Sc=inherited}', "");
Expect(0, 767, '\p{Is_Sc=inherited}', "");
Expect(1, 767, '\p{^Is_Sc=inherited}', "");
Expect(1, 767, '\P{Is_Sc=inherited}', "");
Expect(0, 767, '\P{^Is_Sc=inherited}', "");
Expect(1, 879, '\p{Is_Sc= 	Inherited}', "");
Expect(0, 879, '\p{^Is_Sc= 	Inherited}', "");
Expect(0, 879, '\P{Is_Sc= 	Inherited}', "");
Expect(1, 879, '\P{^Is_Sc= 	Inherited}', "");
Expect(0, 767, '\p{Is_Sc= 	Inherited}', "");
Expect(1, 767, '\p{^Is_Sc= 	Inherited}', "");
Expect(1, 767, '\P{Is_Sc= 	Inherited}', "");
Expect(0, 767, '\P{^Is_Sc= 	Inherited}', "");
Error('\p{Script: - Kaithi:=}');
Error('\P{Script: - Kaithi:=}');
Expect(1, 69825, '\p{Script=kaithi}', "");
Expect(0, 69825, '\p{^Script=kaithi}', "");
Expect(0, 69825, '\P{Script=kaithi}', "");
Expect(1, 69825, '\P{^Script=kaithi}', "");
Expect(0, 69759, '\p{Script=kaithi}', "");
Expect(1, 69759, '\p{^Script=kaithi}', "");
Expect(1, 69759, '\P{Script=kaithi}', "");
Expect(0, 69759, '\P{^Script=kaithi}', "");
Expect(1, 69825, '\p{Script=--KAITHI}', "");
Expect(0, 69825, '\p{^Script=--KAITHI}', "");
Expect(0, 69825, '\P{Script=--KAITHI}', "");
Expect(1, 69825, '\P{^Script=--KAITHI}', "");
Expect(0, 69759, '\p{Script=--KAITHI}', "");
Expect(1, 69759, '\p{^Script=--KAITHI}', "");
Expect(1, 69759, '\P{Script=--KAITHI}', "");
Expect(0, 69759, '\P{^Script=--KAITHI}', "");
Error('\p{Sc=_:=Kthi}');
Error('\P{Sc=_:=Kthi}');
Expect(1, 69825, '\p{Sc:   kthi}', "");
Expect(0, 69825, '\p{^Sc:   kthi}', "");
Expect(0, 69825, '\P{Sc:   kthi}', "");
Expect(1, 69825, '\P{^Sc:   kthi}', "");
Expect(0, 69759, '\p{Sc:   kthi}', "");
Expect(1, 69759, '\p{^Sc:   kthi}', "");
Expect(1, 69759, '\P{Sc:   kthi}', "");
Expect(0, 69759, '\P{^Sc:   kthi}', "");
Expect(1, 69825, '\p{Sc= -KTHI}', "");
Expect(0, 69825, '\p{^Sc= -KTHI}', "");
Expect(0, 69825, '\P{Sc= -KTHI}', "");
Expect(1, 69825, '\P{^Sc= -KTHI}', "");
Expect(0, 69759, '\p{Sc= -KTHI}', "");
Expect(1, 69759, '\p{^Sc= -KTHI}', "");
Expect(1, 69759, '\P{Sc= -KTHI}', "");
Expect(0, 69759, '\P{^Sc= -KTHI}', "");
Error('\p{Is_Script=/a/Kaithi}');
Error('\P{Is_Script=/a/Kaithi}');
Expect(1, 69825, '\p{Is_Script=kaithi}', "");
Expect(0, 69825, '\p{^Is_Script=kaithi}', "");
Expect(0, 69825, '\P{Is_Script=kaithi}', "");
Expect(1, 69825, '\P{^Is_Script=kaithi}', "");
Expect(0, 69759, '\p{Is_Script=kaithi}', "");
Expect(1, 69759, '\p{^Is_Script=kaithi}', "");
Expect(1, 69759, '\P{Is_Script=kaithi}', "");
Expect(0, 69759, '\P{^Is_Script=kaithi}', "");
Expect(1, 69825, '\p{Is_Script=		kaithi}', "");
Expect(0, 69825, '\p{^Is_Script=		kaithi}', "");
Expect(0, 69825, '\P{Is_Script=		kaithi}', "");
Expect(1, 69825, '\P{^Is_Script=		kaithi}', "");
Expect(0, 69759, '\p{Is_Script=		kaithi}', "");
Expect(1, 69759, '\p{^Is_Script=		kaithi}', "");
Expect(1, 69759, '\P{Is_Script=		kaithi}', "");
Expect(0, 69759, '\P{^Is_Script=		kaithi}', "");
Error('\p{Is_Sc=/a/Kthi}');
Error('\P{Is_Sc=/a/Kthi}');
Expect(1, 69825, '\p{Is_Sc=kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=kthi}', "");
Expect(0, 69825, '\P{Is_Sc=kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=kthi}', "");
Expect(0, 69759, '\p{Is_Sc=kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=kthi}', "");
Expect(1, 69759, '\P{Is_Sc=kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=kthi}', "");
Expect(1, 69825, '\p{Is_Sc=__kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=__kthi}', "");
Expect(0, 69825, '\P{Is_Sc=__kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=__kthi}', "");
Expect(0, 69759, '\p{Is_Sc=__kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=__kthi}', "");
Expect(1, 69759, '\P{Is_Sc=__kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=__kthi}', "");
Error('\p{Script:   /a/ 	arabic}');
Error('\P{Script:   /a/ 	arabic}');
Expect(1, 1547, '\p{Script=arabic}', "");
Expect(0, 1547, '\p{^Script=arabic}', "");
Expect(0, 1547, '\P{Script=arabic}', "");
Expect(1, 1547, '\P{^Script=arabic}', "");
Expect(0, 1541, '\p{Script=arabic}', "");
Expect(1, 1541, '\p{^Script=arabic}', "");
Expect(1, 1541, '\P{Script=arabic}', "");
Expect(0, 1541, '\P{^Script=arabic}', "");
Expect(1, 1547, '\p{Script=_	Arabic}', "");
Expect(0, 1547, '\p{^Script=_	Arabic}', "");
Expect(0, 1547, '\P{Script=_	Arabic}', "");
Expect(1, 1547, '\P{^Script=_	Arabic}', "");
Expect(0, 1541, '\p{Script=_	Arabic}', "");
Expect(1, 1541, '\p{^Script=_	Arabic}', "");
Expect(1, 1541, '\P{Script=_	Arabic}', "");
Expect(0, 1541, '\P{^Script=_	Arabic}', "");
Error('\p{Sc=:=_-ARAB}');
Error('\P{Sc=:=_-ARAB}');
Expect(1, 1547, '\p{Sc=arab}', "");
Expect(0, 1547, '\p{^Sc=arab}', "");
Expect(0, 1547, '\P{Sc=arab}', "");
Expect(1, 1547, '\P{^Sc=arab}', "");
Expect(0, 1541, '\p{Sc=arab}', "");
Expect(1, 1541, '\p{^Sc=arab}', "");
Expect(1, 1541, '\P{Sc=arab}', "");
Expect(0, 1541, '\P{^Sc=arab}', "");
Expect(1, 1547, '\p{Sc=--Arab}', "");
Expect(0, 1547, '\p{^Sc=--Arab}', "");
Expect(0, 1547, '\P{Sc=--Arab}', "");
Expect(1, 1547, '\P{^Sc=--Arab}', "");
Expect(0, 1541, '\p{Sc=--Arab}', "");
Expect(1, 1541, '\p{^Sc=--Arab}', "");
Expect(1, 1541, '\P{Sc=--Arab}', "");
Expect(0, 1541, '\P{^Sc=--Arab}', "");
Error('\p{Is_Script=_ Arabic:=}');
Error('\P{Is_Script=_ Arabic:=}');
Expect(1, 1547, '\p{Is_Script=arabic}', "");
Expect(0, 1547, '\p{^Is_Script=arabic}', "");
Expect(0, 1547, '\P{Is_Script=arabic}', "");
Expect(1, 1547, '\P{^Is_Script=arabic}', "");
Expect(0, 1541, '\p{Is_Script=arabic}', "");
Expect(1, 1541, '\p{^Is_Script=arabic}', "");
Expect(1, 1541, '\P{Is_Script=arabic}', "");
Expect(0, 1541, '\P{^Is_Script=arabic}', "");
Expect(1, 1547, '\p{Is_Script=	_Arabic}', "");
Expect(0, 1547, '\p{^Is_Script=	_Arabic}', "");
Expect(0, 1547, '\P{Is_Script=	_Arabic}', "");
Expect(1, 1547, '\P{^Is_Script=	_Arabic}', "");
Expect(0, 1541, '\p{Is_Script=	_Arabic}', "");
Expect(1, 1541, '\p{^Is_Script=	_Arabic}', "");
Expect(1, 1541, '\P{Is_Script=	_Arabic}', "");
Expect(0, 1541, '\P{^Is_Script=	_Arabic}', "");
Error('\p{Is_Sc=/a/_Arab}');
Error('\P{Is_Sc=/a/_Arab}');
Expect(1, 1547, '\p{Is_Sc=arab}', "");
Expect(0, 1547, '\p{^Is_Sc=arab}', "");
Expect(0, 1547, '\P{Is_Sc=arab}', "");
Expect(1, 1547, '\P{^Is_Sc=arab}', "");
Expect(0, 1541, '\p{Is_Sc=arab}', "");
Expect(1, 1541, '\p{^Is_Sc=arab}', "");
Expect(1, 1541, '\P{Is_Sc=arab}', "");
Expect(0, 1541, '\P{^Is_Sc=arab}', "");
Expect(1, 1547, '\p{Is_Sc=_	Arab}', "");
Expect(0, 1547, '\p{^Is_Sc=_	Arab}', "");
Expect(0, 1547, '\P{Is_Sc=_	Arab}', "");
Expect(1, 1547, '\P{^Is_Sc=_	Arab}', "");
Expect(0, 1541, '\p{Is_Sc=_	Arab}', "");
Expect(1, 1541, '\p{^Is_Sc=_	Arab}', "");
Expect(1, 1541, '\P{Is_Sc=_	Arab}', "");
Expect(0, 1541, '\P{^Is_Sc=_	Arab}', "");
Error('\p{Script= :=SHAVIAN}');
Error('\P{Script= :=SHAVIAN}');
Expect(1, 66687, '\p{Script=shavian}', "");
Expect(0, 66687, '\p{^Script=shavian}', "");
Expect(0, 66687, '\P{Script=shavian}', "");
Expect(1, 66687, '\P{^Script=shavian}', "");
Expect(0, 66639, '\p{Script=shavian}', "");
Expect(1, 66639, '\p{^Script=shavian}', "");
Expect(1, 66639, '\P{Script=shavian}', "");
Expect(0, 66639, '\P{^Script=shavian}', "");
Expect(1, 66687, '\p{Script= 	shavian}', "");
Expect(0, 66687, '\p{^Script= 	shavian}', "");
Expect(0, 66687, '\P{Script= 	shavian}', "");
Expect(1, 66687, '\P{^Script= 	shavian}', "");
Expect(0, 66639, '\p{Script= 	shavian}', "");
Expect(1, 66639, '\p{^Script= 	shavian}', "");
Expect(1, 66639, '\P{Script= 	shavian}', "");
Expect(0, 66639, '\P{^Script= 	shavian}', "");
Error('\p{Sc=-:=Shaw}');
Error('\P{Sc=-:=Shaw}');
Expect(1, 66687, '\p{Sc=shaw}', "");
Expect(0, 66687, '\p{^Sc=shaw}', "");
Expect(0, 66687, '\P{Sc=shaw}', "");
Expect(1, 66687, '\P{^Sc=shaw}', "");
Expect(0, 66639, '\p{Sc=shaw}', "");
Expect(1, 66639, '\p{^Sc=shaw}', "");
Expect(1, 66639, '\P{Sc=shaw}', "");
Expect(0, 66639, '\P{^Sc=shaw}', "");
Expect(1, 66687, '\p{Sc=	-shaw}', "");
Expect(0, 66687, '\p{^Sc=	-shaw}', "");
Expect(0, 66687, '\P{Sc=	-shaw}', "");
Expect(1, 66687, '\P{^Sc=	-shaw}', "");
Expect(0, 66639, '\p{Sc=	-shaw}', "");
Expect(1, 66639, '\p{^Sc=	-shaw}', "");
Expect(1, 66639, '\P{Sc=	-shaw}', "");
Expect(0, 66639, '\P{^Sc=	-shaw}', "");
Error('\p{Is_Script=/a/ _Shavian}');
Error('\P{Is_Script=/a/ _Shavian}');
Expect(1, 66687, '\p{Is_Script=shavian}', "");
Expect(0, 66687, '\p{^Is_Script=shavian}', "");
Expect(0, 66687, '\P{Is_Script=shavian}', "");
Expect(1, 66687, '\P{^Is_Script=shavian}', "");
Expect(0, 66639, '\p{Is_Script=shavian}', "");
Expect(1, 66639, '\p{^Is_Script=shavian}', "");
Expect(1, 66639, '\P{Is_Script=shavian}', "");
Expect(0, 66639, '\P{^Is_Script=shavian}', "");
Expect(1, 66687, '\p{Is_Script=_-SHAVIAN}', "");
Expect(0, 66687, '\p{^Is_Script=_-SHAVIAN}', "");
Expect(0, 66687, '\P{Is_Script=_-SHAVIAN}', "");
Expect(1, 66687, '\P{^Is_Script=_-SHAVIAN}', "");
Expect(0, 66639, '\p{Is_Script=_-SHAVIAN}', "");
Expect(1, 66639, '\p{^Is_Script=_-SHAVIAN}', "");
Expect(1, 66639, '\P{Is_Script=_-SHAVIAN}', "");
Expect(0, 66639, '\P{^Is_Script=_-SHAVIAN}', "");
Error('\p{Is_Sc=_/a/Shaw}');
Error('\P{Is_Sc=_/a/Shaw}');
Expect(1, 66687, '\p{Is_Sc=shaw}', "");
Expect(0, 66687, '\p{^Is_Sc=shaw}', "");
Expect(0, 66687, '\P{Is_Sc=shaw}', "");
Expect(1, 66687, '\P{^Is_Sc=shaw}', "");
Expect(0, 66639, '\p{Is_Sc=shaw}', "");
Expect(1, 66639, '\p{^Is_Sc=shaw}', "");
Expect(1, 66639, '\P{Is_Sc=shaw}', "");
Expect(0, 66639, '\P{^Is_Sc=shaw}', "");
Expect(1, 66687, '\p{Is_Sc= _SHAW}', "");
Expect(0, 66687, '\p{^Is_Sc= _SHAW}', "");
Expect(0, 66687, '\P{Is_Sc= _SHAW}', "");
Expect(1, 66687, '\P{^Is_Sc= _SHAW}', "");
Expect(0, 66639, '\p{Is_Sc= _SHAW}', "");
Expect(1, 66639, '\p{^Is_Sc= _SHAW}', "");
Expect(1, 66639, '\P{Is_Sc= _SHAW}', "");
Expect(0, 66639, '\P{^Is_Sc= _SHAW}', "");
Error('\p{Script: - CANADIAN ABORIGINAL/a/}');
Error('\P{Script: - CANADIAN ABORIGINAL/a/}');
Expect(1, 5759, '\p{Script: canadianaboriginal}', "");
Expect(0, 5759, '\p{^Script: canadianaboriginal}', "");
Expect(0, 5759, '\P{Script: canadianaboriginal}', "");
Expect(1, 5759, '\P{^Script: canadianaboriginal}', "");
Expect(0, 5119, '\p{Script: canadianaboriginal}', "");
Expect(1, 5119, '\p{^Script: canadianaboriginal}', "");
Expect(1, 5119, '\P{Script: canadianaboriginal}', "");
Expect(0, 5119, '\P{^Script: canadianaboriginal}', "");
Expect(1, 5759, '\p{Script=__CanadianAboriginal}', "");
Expect(0, 5759, '\p{^Script=__CanadianAboriginal}', "");
Expect(0, 5759, '\P{Script=__CanadianAboriginal}', "");
Expect(1, 5759, '\P{^Script=__CanadianAboriginal}', "");
Expect(0, 5119, '\p{Script=__CanadianAboriginal}', "");
Expect(1, 5119, '\p{^Script=__CanadianAboriginal}', "");
Expect(1, 5119, '\P{Script=__CanadianAboriginal}', "");
Expect(0, 5119, '\P{^Script=__CanadianAboriginal}', "");
Error('\p{Sc: /a/-CANS}');
Error('\P{Sc: /a/-CANS}');
Expect(1, 5759, '\p{Sc=cans}', "");
Expect(0, 5759, '\p{^Sc=cans}', "");
Expect(0, 5759, '\P{Sc=cans}', "");
Expect(1, 5759, '\P{^Sc=cans}', "");
Expect(0, 5119, '\p{Sc=cans}', "");
Expect(1, 5119, '\p{^Sc=cans}', "");
Expect(1, 5119, '\P{Sc=cans}', "");
Expect(0, 5119, '\P{^Sc=cans}', "");
Expect(1, 5759, '\p{Sc= 	cans}', "");
Expect(0, 5759, '\p{^Sc= 	cans}', "");
Expect(0, 5759, '\P{Sc= 	cans}', "");
Expect(1, 5759, '\P{^Sc= 	cans}', "");
Expect(0, 5119, '\p{Sc= 	cans}', "");
Expect(1, 5119, '\p{^Sc= 	cans}', "");
Expect(1, 5119, '\P{Sc= 	cans}', "");
Expect(0, 5119, '\P{^Sc= 	cans}', "");
Error('\p{Is_Script=	Canadian_Aboriginal/a/}');
Error('\P{Is_Script=	Canadian_Aboriginal/a/}');
Expect(1, 5759, '\p{Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\p{^Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\P{Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\P{^Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\p{Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\p{^Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\P{Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\P{^Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\p{Is_Script=	-canadian_Aboriginal}', "");
Expect(0, 5759, '\p{^Is_Script=	-canadian_Aboriginal}', "");
Expect(0, 5759, '\P{Is_Script=	-canadian_Aboriginal}', "");
Expect(1, 5759, '\P{^Is_Script=	-canadian_Aboriginal}', "");
Expect(0, 5119, '\p{Is_Script=	-canadian_Aboriginal}', "");
Expect(1, 5119, '\p{^Is_Script=	-canadian_Aboriginal}', "");
Expect(1, 5119, '\P{Is_Script=	-canadian_Aboriginal}', "");
Expect(0, 5119, '\P{^Is_Script=	-canadian_Aboriginal}', "");
Error('\p{Is_Sc=:= 	CANS}');
Error('\P{Is_Sc=:= 	CANS}');
Expect(1, 5759, '\p{Is_Sc=cans}', "");
Expect(0, 5759, '\p{^Is_Sc=cans}', "");
Expect(0, 5759, '\P{Is_Sc=cans}', "");
Expect(1, 5759, '\P{^Is_Sc=cans}', "");
Expect(0, 5119, '\p{Is_Sc=cans}', "");
Expect(1, 5119, '\p{^Is_Sc=cans}', "");
Expect(1, 5119, '\P{Is_Sc=cans}', "");
Expect(0, 5119, '\P{^Is_Sc=cans}', "");
Expect(1, 5759, '\p{Is_Sc=-Cans}', "");
Expect(0, 5759, '\p{^Is_Sc=-Cans}', "");
Expect(0, 5759, '\P{Is_Sc=-Cans}', "");
Expect(1, 5759, '\P{^Is_Sc=-Cans}', "");
Expect(0, 5119, '\p{Is_Sc=-Cans}', "");
Expect(1, 5119, '\p{^Is_Sc=-Cans}', "");
Expect(1, 5119, '\P{Is_Sc=-Cans}', "");
Expect(0, 5119, '\P{^Is_Sc=-Cans}', "");
Error('\p{Script=__Old:=South Arabian}');
Error('\P{Script=__Old:=South Arabian}');
Expect(1, 68223, '\p{Script:	oldsoutharabian}', "");
Expect(0, 68223, '\p{^Script:	oldsoutharabian}', "");
Expect(0, 68223, '\P{Script:	oldsoutharabian}', "");
Expect(1, 68223, '\P{^Script:	oldsoutharabian}', "");
Expect(0, 68191, '\p{Script:	oldsoutharabian}', "");
Expect(1, 68191, '\p{^Script:	oldsoutharabian}', "");
Expect(1, 68191, '\P{Script:	oldsoutharabian}', "");
Expect(0, 68191, '\P{^Script:	oldsoutharabian}', "");
Expect(1, 68223, '\p{Script=_ old-southarabian}', "");
Expect(0, 68223, '\p{^Script=_ old-southarabian}', "");
Expect(0, 68223, '\P{Script=_ old-southarabian}', "");
Expect(1, 68223, '\P{^Script=_ old-southarabian}', "");
Expect(0, 68191, '\p{Script=_ old-southarabian}', "");
Expect(1, 68191, '\p{^Script=_ old-southarabian}', "");
Expect(1, 68191, '\P{Script=_ old-southarabian}', "");
Expect(0, 68191, '\P{^Script=_ old-southarabian}', "");
Error('\p{Sc=__SARB/a/}');
Error('\P{Sc=__SARB/a/}');
Expect(1, 68223, '\p{Sc=sarb}', "");
Expect(0, 68223, '\p{^Sc=sarb}', "");
Expect(0, 68223, '\P{Sc=sarb}', "");
Expect(1, 68223, '\P{^Sc=sarb}', "");
Expect(0, 68191, '\p{Sc=sarb}', "");
Expect(1, 68191, '\p{^Sc=sarb}', "");
Expect(1, 68191, '\P{Sc=sarb}', "");
Expect(0, 68191, '\P{^Sc=sarb}', "");
Expect(1, 68223, '\p{Sc=_Sarb}', "");
Expect(0, 68223, '\p{^Sc=_Sarb}', "");
Expect(0, 68223, '\P{Sc=_Sarb}', "");
Expect(1, 68223, '\P{^Sc=_Sarb}', "");
Expect(0, 68191, '\p{Sc=_Sarb}', "");
Expect(1, 68191, '\p{^Sc=_Sarb}', "");
Expect(1, 68191, '\P{Sc=_Sarb}', "");
Expect(0, 68191, '\P{^Sc=_Sarb}', "");
Error('\p{Is_Script=/a/- old_South	Arabian}');
Error('\P{Is_Script=/a/- old_South	Arabian}');
Expect(1, 68223, '\p{Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Script=	 Old	South-Arabian}', "");
Expect(0, 68223, '\p{^Is_Script=	 Old	South-Arabian}', "");
Expect(0, 68223, '\P{Is_Script=	 Old	South-Arabian}', "");
Expect(1, 68223, '\P{^Is_Script=	 Old	South-Arabian}', "");
Expect(0, 68191, '\p{Is_Script=	 Old	South-Arabian}', "");
Expect(1, 68191, '\p{^Is_Script=	 Old	South-Arabian}', "");
Expect(1, 68191, '\P{Is_Script=	 Old	South-Arabian}', "");
Expect(0, 68191, '\P{^Is_Script=	 Old	South-Arabian}', "");
Error('\p{Is_Sc= -Sarb/a/}');
Error('\P{Is_Sc= -Sarb/a/}');
Expect(1, 68223, '\p{Is_Sc=sarb}', "");
Expect(0, 68223, '\p{^Is_Sc=sarb}', "");
Expect(0, 68223, '\P{Is_Sc=sarb}', "");
Expect(1, 68223, '\P{^Is_Sc=sarb}', "");
Expect(0, 68191, '\p{Is_Sc=sarb}', "");
Expect(1, 68191, '\p{^Is_Sc=sarb}', "");
Expect(1, 68191, '\P{Is_Sc=sarb}', "");
Expect(0, 68191, '\P{^Is_Sc=sarb}', "");
Expect(1, 68223, '\p{Is_Sc=	Sarb}', "");
Expect(0, 68223, '\p{^Is_Sc=	Sarb}', "");
Expect(0, 68223, '\P{Is_Sc=	Sarb}', "");
Expect(1, 68223, '\P{^Is_Sc=	Sarb}', "");
Expect(0, 68191, '\p{Is_Sc=	Sarb}', "");
Expect(1, 68191, '\p{^Is_Sc=	Sarb}', "");
Expect(1, 68191, '\P{Is_Sc=	Sarb}', "");
Expect(0, 68191, '\P{^Is_Sc=	Sarb}', "");
Error('\p{Script=-:=Lydian}');
Error('\P{Script=-:=Lydian}');
Expect(1, 67897, '\p{Script:	lydian}', "");
Expect(0, 67897, '\p{^Script:	lydian}', "");
Expect(0, 67897, '\P{Script:	lydian}', "");
Expect(1, 67897, '\P{^Script:	lydian}', "");
Expect(0, 67871, '\p{Script:	lydian}', "");
Expect(1, 67871, '\p{^Script:	lydian}', "");
Expect(1, 67871, '\P{Script:	lydian}', "");
Expect(0, 67871, '\P{^Script:	lydian}', "");
Expect(1, 67897, '\p{Script=--Lydian}', "");
Expect(0, 67897, '\p{^Script=--Lydian}', "");
Expect(0, 67897, '\P{Script=--Lydian}', "");
Expect(1, 67897, '\P{^Script=--Lydian}', "");
Expect(0, 67871, '\p{Script=--Lydian}', "");
Expect(1, 67871, '\p{^Script=--Lydian}', "");
Expect(1, 67871, '\P{Script=--Lydian}', "");
Expect(0, 67871, '\P{^Script=--Lydian}', "");
Error('\p{Sc=/a/  LYDI}');
Error('\P{Sc=/a/  LYDI}');
Expect(1, 67897, '\p{Sc=lydi}', "");
Expect(0, 67897, '\p{^Sc=lydi}', "");
Expect(0, 67897, '\P{Sc=lydi}', "");
Expect(1, 67897, '\P{^Sc=lydi}', "");
Expect(0, 67871, '\p{Sc=lydi}', "");
Expect(1, 67871, '\p{^Sc=lydi}', "");
Expect(1, 67871, '\P{Sc=lydi}', "");
Expect(0, 67871, '\P{^Sc=lydi}', "");
Expect(1, 67897, '\p{Sc=-Lydi}', "");
Expect(0, 67897, '\p{^Sc=-Lydi}', "");
Expect(0, 67897, '\P{Sc=-Lydi}', "");
Expect(1, 67897, '\P{^Sc=-Lydi}', "");
Expect(0, 67871, '\p{Sc=-Lydi}', "");
Expect(1, 67871, '\p{^Sc=-Lydi}', "");
Expect(1, 67871, '\P{Sc=-Lydi}', "");
Expect(0, 67871, '\P{^Sc=-Lydi}', "");
Error('\p{Is_Script=_/a/lydian}');
Error('\P{Is_Script=_/a/lydian}');
Expect(1, 67897, '\p{Is_Script=lydian}', "");
Expect(0, 67897, '\p{^Is_Script=lydian}', "");
Expect(0, 67897, '\P{Is_Script=lydian}', "");
Expect(1, 67897, '\P{^Is_Script=lydian}', "");
Expect(0, 67871, '\p{Is_Script=lydian}', "");
Expect(1, 67871, '\p{^Is_Script=lydian}', "");
Expect(1, 67871, '\P{Is_Script=lydian}', "");
Expect(0, 67871, '\P{^Is_Script=lydian}', "");
Expect(1, 67897, '\p{Is_Script=  LYDIAN}', "");
Expect(0, 67897, '\p{^Is_Script=  LYDIAN}', "");
Expect(0, 67897, '\P{Is_Script=  LYDIAN}', "");
Expect(1, 67897, '\P{^Is_Script=  LYDIAN}', "");
Expect(0, 67871, '\p{Is_Script=  LYDIAN}', "");
Expect(1, 67871, '\p{^Is_Script=  LYDIAN}', "");
Expect(1, 67871, '\P{Is_Script=  LYDIAN}', "");
Expect(0, 67871, '\P{^Is_Script=  LYDIAN}', "");
Error('\p{Is_Sc=-:=Lydi}');
Error('\P{Is_Sc=-:=Lydi}');
Expect(1, 67897, '\p{Is_Sc=lydi}', "");
Expect(0, 67897, '\p{^Is_Sc=lydi}', "");
Expect(0, 67897, '\P{Is_Sc=lydi}', "");
Expect(1, 67897, '\P{^Is_Sc=lydi}', "");
Expect(0, 67871, '\p{Is_Sc=lydi}', "");
Expect(1, 67871, '\p{^Is_Sc=lydi}', "");
Expect(1, 67871, '\P{Is_Sc=lydi}', "");
Expect(0, 67871, '\P{^Is_Sc=lydi}', "");
Expect(1, 67897, '\p{Is_Sc=	 lydi}', "");
Expect(0, 67897, '\p{^Is_Sc=	 lydi}', "");
Expect(0, 67897, '\P{Is_Sc=	 lydi}', "");
Expect(1, 67897, '\P{^Is_Sc=	 lydi}', "");
Expect(0, 67871, '\p{Is_Sc=	 lydi}', "");
Expect(1, 67871, '\p{^Is_Sc=	 lydi}', "");
Expect(1, 67871, '\P{Is_Sc=	 lydi}', "");
Expect(0, 67871, '\P{^Is_Sc=	 lydi}', "");
Error('\p{Script=/a/ Mongolian}');
Error('\P{Script=/a/ Mongolian}');
Expect(1, 6145, '\p{Script=mongolian}', "");
Expect(0, 6145, '\p{^Script=mongolian}', "");
Expect(0, 6145, '\P{Script=mongolian}', "");
Expect(1, 6145, '\P{^Script=mongolian}', "");
Expect(0, 6143, '\p{Script=mongolian}', "");
Expect(1, 6143, '\p{^Script=mongolian}', "");
Expect(1, 6143, '\P{Script=mongolian}', "");
Expect(0, 6143, '\P{^Script=mongolian}', "");
Expect(1, 6145, '\p{Script:	 MONGOLIAN}', "");
Expect(0, 6145, '\p{^Script:	 MONGOLIAN}', "");
Expect(0, 6145, '\P{Script:	 MONGOLIAN}', "");
Expect(1, 6145, '\P{^Script:	 MONGOLIAN}', "");
Expect(0, 6143, '\p{Script:	 MONGOLIAN}', "");
Expect(1, 6143, '\p{^Script:	 MONGOLIAN}', "");
Expect(1, 6143, '\P{Script:	 MONGOLIAN}', "");
Expect(0, 6143, '\P{^Script:	 MONGOLIAN}', "");
Error('\p{Sc=/a/Mong}');
Error('\P{Sc=/a/Mong}');
Expect(1, 6145, '\p{Sc: mong}', "");
Expect(0, 6145, '\p{^Sc: mong}', "");
Expect(0, 6145, '\P{Sc: mong}', "");
Expect(1, 6145, '\P{^Sc: mong}', "");
Expect(0, 6143, '\p{Sc: mong}', "");
Expect(1, 6143, '\p{^Sc: mong}', "");
Expect(1, 6143, '\P{Sc: mong}', "");
Expect(0, 6143, '\P{^Sc: mong}', "");
Expect(1, 6145, '\p{Sc=	_Mong}', "");
Expect(0, 6145, '\p{^Sc=	_Mong}', "");
Expect(0, 6145, '\P{Sc=	_Mong}', "");
Expect(1, 6145, '\P{^Sc=	_Mong}', "");
Expect(0, 6143, '\p{Sc=	_Mong}', "");
Expect(1, 6143, '\p{^Sc=	_Mong}', "");
Expect(1, 6143, '\P{Sc=	_Mong}', "");
Expect(0, 6143, '\P{^Sc=	_Mong}', "");
Error('\p{Is_Script=/a/	 Mongolian}');
Error('\P{Is_Script=/a/	 Mongolian}');
Expect(1, 6145, '\p{Is_Script=mongolian}', "");
Expect(0, 6145, '\p{^Is_Script=mongolian}', "");
Expect(0, 6145, '\P{Is_Script=mongolian}', "");
Expect(1, 6145, '\P{^Is_Script=mongolian}', "");
Expect(0, 6143, '\p{Is_Script=mongolian}', "");
Expect(1, 6143, '\p{^Is_Script=mongolian}', "");
Expect(1, 6143, '\P{Is_Script=mongolian}', "");
Expect(0, 6143, '\P{^Is_Script=mongolian}', "");
Expect(1, 6145, '\p{Is_Script=--MONGOLIAN}', "");
Expect(0, 6145, '\p{^Is_Script=--MONGOLIAN}', "");
Expect(0, 6145, '\P{Is_Script=--MONGOLIAN}', "");
Expect(1, 6145, '\P{^Is_Script=--MONGOLIAN}', "");
Expect(0, 6143, '\p{Is_Script=--MONGOLIAN}', "");
Expect(1, 6143, '\p{^Is_Script=--MONGOLIAN}', "");
Expect(1, 6143, '\P{Is_Script=--MONGOLIAN}', "");
Expect(0, 6143, '\P{^Is_Script=--MONGOLIAN}', "");
Error('\p{Is_Sc=/a/_ MONG}');
Error('\P{Is_Sc=/a/_ MONG}');
Expect(1, 6145, '\p{Is_Sc=mong}', "");
Expect(0, 6145, '\p{^Is_Sc=mong}', "");
Expect(0, 6145, '\P{Is_Sc=mong}', "");
Expect(1, 6145, '\P{^Is_Sc=mong}', "");
Expect(0, 6143, '\p{Is_Sc=mong}', "");
Expect(1, 6143, '\p{^Is_Sc=mong}', "");
Expect(1, 6143, '\P{Is_Sc=mong}', "");
Expect(0, 6143, '\P{^Is_Sc=mong}', "");
Expect(1, 6145, '\p{Is_Sc=--MONG}', "");
Expect(0, 6145, '\p{^Is_Sc=--MONG}', "");
Expect(0, 6145, '\P{Is_Sc=--MONG}', "");
Expect(1, 6145, '\P{^Is_Sc=--MONG}', "");
Expect(0, 6143, '\p{Is_Sc=--MONG}', "");
Expect(1, 6143, '\p{^Is_Sc=--MONG}', "");
Expect(1, 6143, '\P{Is_Sc=--MONG}', "");
Expect(0, 6143, '\P{^Is_Sc=--MONG}', "");
Error('\p{Script:	 -Lao/a/}');
Error('\P{Script:	 -Lao/a/}');
Expect(1, 3714, '\p{Script=lao}', "");
Expect(0, 3714, '\p{^Script=lao}', "");
Expect(0, 3714, '\P{Script=lao}', "");
Expect(1, 3714, '\P{^Script=lao}', "");
Expect(0, 3712, '\p{Script=lao}', "");
Expect(1, 3712, '\p{^Script=lao}', "");
Expect(1, 3712, '\P{Script=lao}', "");
Expect(0, 3712, '\P{^Script=lao}', "");
Expect(1, 3714, '\p{Script=	_Lao}', "");
Expect(0, 3714, '\p{^Script=	_Lao}', "");
Expect(0, 3714, '\P{Script=	_Lao}', "");
Expect(1, 3714, '\P{^Script=	_Lao}', "");
Expect(0, 3712, '\p{Script=	_Lao}', "");
Expect(1, 3712, '\p{^Script=	_Lao}', "");
Expect(1, 3712, '\P{Script=	_Lao}', "");
Expect(0, 3712, '\P{^Script=	_Lao}', "");
Error('\p{Sc=:=_LAOO}');
Error('\P{Sc=:=_LAOO}');
Expect(1, 3714, '\p{Sc=laoo}', "");
Expect(0, 3714, '\p{^Sc=laoo}', "");
Expect(0, 3714, '\P{Sc=laoo}', "");
Expect(1, 3714, '\P{^Sc=laoo}', "");
Expect(0, 3712, '\p{Sc=laoo}', "");
Expect(1, 3712, '\p{^Sc=laoo}', "");
Expect(1, 3712, '\P{Sc=laoo}', "");
Expect(0, 3712, '\P{^Sc=laoo}', "");
Expect(1, 3714, '\p{Sc=	-Laoo}', "");
Expect(0, 3714, '\p{^Sc=	-Laoo}', "");
Expect(0, 3714, '\P{Sc=	-Laoo}', "");
Expect(1, 3714, '\P{^Sc=	-Laoo}', "");
Expect(0, 3712, '\p{Sc=	-Laoo}', "");
Expect(1, 3712, '\p{^Sc=	-Laoo}', "");
Expect(1, 3712, '\P{Sc=	-Laoo}', "");
Expect(0, 3712, '\P{^Sc=	-Laoo}', "");
Error('\p{Is_Script=/a/_-lao}');
Error('\P{Is_Script=/a/_-lao}');
Expect(1, 3714, '\p{Is_Script=lao}', "");
Expect(0, 3714, '\p{^Is_Script=lao}', "");
Expect(0, 3714, '\P{Is_Script=lao}', "");
Expect(1, 3714, '\P{^Is_Script=lao}', "");
Expect(0, 3712, '\p{Is_Script=lao}', "");
Expect(1, 3712, '\p{^Is_Script=lao}', "");
Expect(1, 3712, '\P{Is_Script=lao}', "");
Expect(0, 3712, '\P{^Is_Script=lao}', "");
Expect(1, 3714, '\p{Is_Script=--LAO}', "");
Expect(0, 3714, '\p{^Is_Script=--LAO}', "");
Expect(0, 3714, '\P{Is_Script=--LAO}', "");
Expect(1, 3714, '\P{^Is_Script=--LAO}', "");
Expect(0, 3712, '\p{Is_Script=--LAO}', "");
Expect(1, 3712, '\p{^Is_Script=--LAO}', "");
Expect(1, 3712, '\P{Is_Script=--LAO}', "");
Expect(0, 3712, '\P{^Is_Script=--LAO}', "");
Error('\p{Is_Sc= Laoo/a/}');
Error('\P{Is_Sc= Laoo/a/}');
Expect(1, 3714, '\p{Is_Sc=laoo}', "");
Expect(0, 3714, '\p{^Is_Sc=laoo}', "");
Expect(0, 3714, '\P{Is_Sc=laoo}', "");
Expect(1, 3714, '\P{^Is_Sc=laoo}', "");
Expect(0, 3712, '\p{Is_Sc=laoo}', "");
Expect(1, 3712, '\p{^Is_Sc=laoo}', "");
Expect(1, 3712, '\P{Is_Sc=laoo}', "");
Expect(0, 3712, '\P{^Is_Sc=laoo}', "");
Expect(1, 3714, '\p{Is_Sc=	Laoo}', "");
Expect(0, 3714, '\p{^Is_Sc=	Laoo}', "");
Expect(0, 3714, '\P{Is_Sc=	Laoo}', "");
Expect(1, 3714, '\P{^Is_Sc=	Laoo}', "");
Expect(0, 3712, '\p{Is_Sc=	Laoo}', "");
Expect(1, 3712, '\p{^Is_Sc=	Laoo}', "");
Expect(1, 3712, '\P{Is_Sc=	Laoo}', "");
Expect(0, 3712, '\P{^Is_Sc=	Laoo}', "");
Error('\p{Script= :=CYRILLIC}');
Error('\P{Script= :=CYRILLIC}');
Expect(1, 1156, '\p{Script=cyrillic}', "");
Expect(0, 1156, '\p{^Script=cyrillic}', "");
Expect(0, 1156, '\P{Script=cyrillic}', "");
Expect(1, 1156, '\P{^Script=cyrillic}', "");
Expect(0, 1023, '\p{Script=cyrillic}', "");
Expect(1, 1023, '\p{^Script=cyrillic}', "");
Expect(1, 1023, '\P{Script=cyrillic}', "");
Expect(0, 1023, '\P{^Script=cyrillic}', "");
Expect(1, 1156, '\p{Script=- Cyrillic}', "");
Expect(0, 1156, '\p{^Script=- Cyrillic}', "");
Expect(0, 1156, '\P{Script=- Cyrillic}', "");
Expect(1, 1156, '\P{^Script=- Cyrillic}', "");
Expect(0, 1023, '\p{Script=- Cyrillic}', "");
Expect(1, 1023, '\p{^Script=- Cyrillic}', "");
Expect(1, 1023, '\P{Script=- Cyrillic}', "");
Expect(0, 1023, '\P{^Script=- Cyrillic}', "");
Error('\p{Sc=__Cyrl:=}');
Error('\P{Sc=__Cyrl:=}');
Expect(1, 1156, '\p{Sc:   cyrl}', "");
Expect(0, 1156, '\p{^Sc:   cyrl}', "");
Expect(0, 1156, '\P{Sc:   cyrl}', "");
Expect(1, 1156, '\P{^Sc:   cyrl}', "");
Expect(0, 1023, '\p{Sc:   cyrl}', "");
Expect(1, 1023, '\p{^Sc:   cyrl}', "");
Expect(1, 1023, '\P{Sc:   cyrl}', "");
Expect(0, 1023, '\P{^Sc:   cyrl}', "");
Expect(1, 1156, '\p{Sc=Cyrl}', "");
Expect(0, 1156, '\p{^Sc=Cyrl}', "");
Expect(0, 1156, '\P{Sc=Cyrl}', "");
Expect(1, 1156, '\P{^Sc=Cyrl}', "");
Expect(0, 1023, '\p{Sc=Cyrl}', "");
Expect(1, 1023, '\p{^Sc=Cyrl}', "");
Expect(1, 1023, '\P{Sc=Cyrl}', "");
Expect(0, 1023, '\P{^Sc=Cyrl}', "");
Error('\p{Is_Script=:=--Cyrillic}');
Error('\P{Is_Script=:=--Cyrillic}');
Expect(1, 1156, '\p{Is_Script=cyrillic}', "");
Expect(0, 1156, '\p{^Is_Script=cyrillic}', "");
Expect(0, 1156, '\P{Is_Script=cyrillic}', "");
Expect(1, 1156, '\P{^Is_Script=cyrillic}', "");
Expect(0, 1023, '\p{Is_Script=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Script=cyrillic}', "");
Expect(1, 1023, '\P{Is_Script=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Script=cyrillic}', "");
Expect(1, 1156, '\p{Is_Script=	CYRILLIC}', "");
Expect(0, 1156, '\p{^Is_Script=	CYRILLIC}', "");
Expect(0, 1156, '\P{Is_Script=	CYRILLIC}', "");
Expect(1, 1156, '\P{^Is_Script=	CYRILLIC}', "");
Expect(0, 1023, '\p{Is_Script=	CYRILLIC}', "");
Expect(1, 1023, '\p{^Is_Script=	CYRILLIC}', "");
Expect(1, 1023, '\P{Is_Script=	CYRILLIC}', "");
Expect(0, 1023, '\P{^Is_Script=	CYRILLIC}', "");
Error('\p{Is_Sc=  Cyrl:=}');
Error('\P{Is_Sc=  Cyrl:=}');
Expect(1, 1156, '\p{Is_Sc=cyrl}', "");
Expect(0, 1156, '\p{^Is_Sc=cyrl}', "");
Expect(0, 1156, '\P{Is_Sc=cyrl}', "");
Expect(1, 1156, '\P{^Is_Sc=cyrl}', "");
Expect(0, 1023, '\p{Is_Sc=cyrl}', "");
Expect(1, 1023, '\p{^Is_Sc=cyrl}', "");
Expect(1, 1023, '\P{Is_Sc=cyrl}', "");
Expect(0, 1023, '\P{^Is_Sc=cyrl}', "");
Expect(1, 1156, '\p{Is_Sc=-	CYRL}', "");
Expect(0, 1156, '\p{^Is_Sc=-	CYRL}', "");
Expect(0, 1156, '\P{Is_Sc=-	CYRL}', "");
Expect(1, 1156, '\P{^Is_Sc=-	CYRL}', "");
Expect(0, 1023, '\p{Is_Sc=-	CYRL}', "");
Expect(1, 1023, '\p{^Is_Sc=-	CYRL}', "");
Expect(1, 1023, '\P{Is_Sc=-	CYRL}', "");
Expect(0, 1023, '\P{^Is_Sc=-	CYRL}', "");
Error('\p{Script=/a/		Hiragana}');
Error('\P{Script=/a/		Hiragana}');
Expect(1, 12438, '\p{Script:	hiragana}', "");
Expect(0, 12438, '\p{^Script:	hiragana}', "");
Expect(0, 12438, '\P{Script:	hiragana}', "");
Expect(1, 12438, '\P{^Script:	hiragana}', "");
Expect(0, 12352, '\p{Script:	hiragana}', "");
Expect(1, 12352, '\p{^Script:	hiragana}', "");
Expect(1, 12352, '\P{Script:	hiragana}', "");
Expect(0, 12352, '\P{^Script:	hiragana}', "");
Expect(1, 12438, '\p{Script=_	Hiragana}', "");
Expect(0, 12438, '\p{^Script=_	Hiragana}', "");
Expect(0, 12438, '\P{Script=_	Hiragana}', "");
Expect(1, 12438, '\P{^Script=_	Hiragana}', "");
Expect(0, 12352, '\p{Script=_	Hiragana}', "");
Expect(1, 12352, '\p{^Script=_	Hiragana}', "");
Expect(1, 12352, '\P{Script=_	Hiragana}', "");
Expect(0, 12352, '\P{^Script=_	Hiragana}', "");
Error('\p{Sc=_-hira/a/}');
Error('\P{Sc=_-hira/a/}');
Expect(1, 12438, '\p{Sc=hira}', "");
Expect(0, 12438, '\p{^Sc=hira}', "");
Expect(0, 12438, '\P{Sc=hira}', "");
Expect(1, 12438, '\P{^Sc=hira}', "");
Expect(0, 12352, '\p{Sc=hira}', "");
Expect(1, 12352, '\p{^Sc=hira}', "");
Expect(1, 12352, '\P{Sc=hira}', "");
Expect(0, 12352, '\P{^Sc=hira}', "");
Expect(1, 12438, '\p{Sc=	-Hira}', "");
Expect(0, 12438, '\p{^Sc=	-Hira}', "");
Expect(0, 12438, '\P{Sc=	-Hira}', "");
Expect(1, 12438, '\P{^Sc=	-Hira}', "");
Expect(0, 12352, '\p{Sc=	-Hira}', "");
Expect(1, 12352, '\p{^Sc=	-Hira}', "");
Expect(1, 12352, '\P{Sc=	-Hira}', "");
Expect(0, 12352, '\P{^Sc=	-Hira}', "");
Error('\p{Is_Script: --HIRAGANA/a/}');
Error('\P{Is_Script: --HIRAGANA/a/}');
Expect(1, 12438, '\p{Is_Script=hiragana}', "");
Expect(0, 12438, '\p{^Is_Script=hiragana}', "");
Expect(0, 12438, '\P{Is_Script=hiragana}', "");
Expect(1, 12438, '\P{^Is_Script=hiragana}', "");
Expect(0, 12352, '\p{Is_Script=hiragana}', "");
Expect(1, 12352, '\p{^Is_Script=hiragana}', "");
Expect(1, 12352, '\P{Is_Script=hiragana}', "");
Expect(0, 12352, '\P{^Is_Script=hiragana}', "");
Expect(1, 12438, '\p{Is_Script=__HIRAGANA}', "");
Expect(0, 12438, '\p{^Is_Script=__HIRAGANA}', "");
Expect(0, 12438, '\P{Is_Script=__HIRAGANA}', "");
Expect(1, 12438, '\P{^Is_Script=__HIRAGANA}', "");
Expect(0, 12352, '\p{Is_Script=__HIRAGANA}', "");
Expect(1, 12352, '\p{^Is_Script=__HIRAGANA}', "");
Expect(1, 12352, '\P{Is_Script=__HIRAGANA}', "");
Expect(0, 12352, '\P{^Is_Script=__HIRAGANA}', "");
Error('\p{Is_Sc=-_HIRA:=}');
Error('\P{Is_Sc=-_HIRA:=}');
Expect(1, 12438, '\p{Is_Sc=hira}', "");
Expect(0, 12438, '\p{^Is_Sc=hira}', "");
Expect(0, 12438, '\P{Is_Sc=hira}', "");
Expect(1, 12438, '\P{^Is_Sc=hira}', "");
Expect(0, 12352, '\p{Is_Sc=hira}', "");
Expect(1, 12352, '\p{^Is_Sc=hira}', "");
Expect(1, 12352, '\P{Is_Sc=hira}', "");
Expect(0, 12352, '\P{^Is_Sc=hira}', "");
Expect(1, 12438, '\p{Is_Sc: _ HIRA}', "");
Expect(0, 12438, '\p{^Is_Sc: _ HIRA}', "");
Expect(0, 12438, '\P{Is_Sc: _ HIRA}', "");
Expect(1, 12438, '\P{^Is_Sc: _ HIRA}', "");
Expect(0, 12352, '\p{Is_Sc: _ HIRA}', "");
Expect(1, 12352, '\p{^Is_Sc: _ HIRA}', "");
Expect(1, 12352, '\P{Is_Sc: _ HIRA}', "");
Expect(0, 12352, '\P{^Is_Sc: _ HIRA}', "");
Error('\p{Script=	:=BENGALI}');
Error('\P{Script=	:=BENGALI}');
Expect(1, 2435, '\p{Script:   bengali}', "");
Expect(0, 2435, '\p{^Script:   bengali}', "");
Expect(0, 2435, '\P{Script:   bengali}', "");
Expect(1, 2435, '\P{^Script:   bengali}', "");
Expect(0, 2432, '\p{Script:   bengali}', "");
Expect(1, 2432, '\p{^Script:   bengali}', "");
Expect(1, 2432, '\P{Script:   bengali}', "");
Expect(0, 2432, '\P{^Script:   bengali}', "");
Expect(1, 2435, '\p{Script=  bengali}', "");
Expect(0, 2435, '\p{^Script=  bengali}', "");
Expect(0, 2435, '\P{Script=  bengali}', "");
Expect(1, 2435, '\P{^Script=  bengali}', "");
Expect(0, 2432, '\p{Script=  bengali}', "");
Expect(1, 2432, '\p{^Script=  bengali}', "");
Expect(1, 2432, '\P{Script=  bengali}', "");
Expect(0, 2432, '\P{^Script=  bengali}', "");
Error('\p{Sc=:=_Beng}');
Error('\P{Sc=:=_Beng}');
Expect(1, 2435, '\p{Sc=beng}', "");
Expect(0, 2435, '\p{^Sc=beng}', "");
Expect(0, 2435, '\P{Sc=beng}', "");
Expect(1, 2435, '\P{^Sc=beng}', "");
Expect(0, 2432, '\p{Sc=beng}', "");
Expect(1, 2432, '\p{^Sc=beng}', "");
Expect(1, 2432, '\P{Sc=beng}', "");
Expect(0, 2432, '\P{^Sc=beng}', "");
Expect(1, 2435, '\p{Sc= Beng}', "");
Expect(0, 2435, '\p{^Sc= Beng}', "");
Expect(0, 2435, '\P{Sc= Beng}', "");
Expect(1, 2435, '\P{^Sc= Beng}', "");
Expect(0, 2432, '\p{Sc= Beng}', "");
Expect(1, 2432, '\p{^Sc= Beng}', "");
Expect(1, 2432, '\P{Sc= Beng}', "");
Expect(0, 2432, '\P{^Sc= Beng}', "");
Error('\p{Is_Script=_/a/BENGALI}');
Error('\P{Is_Script=_/a/BENGALI}');
Expect(1, 2435, '\p{Is_Script=bengali}', "");
Expect(0, 2435, '\p{^Is_Script=bengali}', "");
Expect(0, 2435, '\P{Is_Script=bengali}', "");
Expect(1, 2435, '\P{^Is_Script=bengali}', "");
Expect(0, 2432, '\p{Is_Script=bengali}', "");
Expect(1, 2432, '\p{^Is_Script=bengali}', "");
Expect(1, 2432, '\P{Is_Script=bengali}', "");
Expect(0, 2432, '\P{^Is_Script=bengali}', "");
Expect(1, 2435, '\p{Is_Script= _Bengali}', "");
Expect(0, 2435, '\p{^Is_Script= _Bengali}', "");
Expect(0, 2435, '\P{Is_Script= _Bengali}', "");
Expect(1, 2435, '\P{^Is_Script= _Bengali}', "");
Expect(0, 2432, '\p{Is_Script= _Bengali}', "");
Expect(1, 2432, '\p{^Is_Script= _Bengali}', "");
Expect(1, 2432, '\P{Is_Script= _Bengali}', "");
Expect(0, 2432, '\P{^Is_Script= _Bengali}', "");
Error('\p{Is_Sc=_beng:=}');
Error('\P{Is_Sc=_beng:=}');
Expect(1, 2435, '\p{Is_Sc=beng}', "");
Expect(0, 2435, '\p{^Is_Sc=beng}', "");
Expect(0, 2435, '\P{Is_Sc=beng}', "");
Expect(1, 2435, '\P{^Is_Sc=beng}', "");
Expect(0, 2432, '\p{Is_Sc=beng}', "");
Expect(1, 2432, '\p{^Is_Sc=beng}', "");
Expect(1, 2432, '\P{Is_Sc=beng}', "");
Expect(0, 2432, '\P{^Is_Sc=beng}', "");
Expect(1, 2435, '\p{Is_Sc:   	BENG}', "");
Expect(0, 2435, '\p{^Is_Sc:   	BENG}', "");
Expect(0, 2435, '\P{Is_Sc:   	BENG}', "");
Expect(1, 2435, '\P{^Is_Sc:   	BENG}', "");
Expect(0, 2432, '\p{Is_Sc:   	BENG}', "");
Expect(1, 2432, '\p{^Is_Sc:   	BENG}', "");
Expect(1, 2432, '\P{Is_Sc:   	BENG}', "");
Expect(0, 2432, '\P{^Is_Sc:   	BENG}', "");
Error('\p{Script=_ braille/a/}');
Error('\P{Script=_ braille/a/}');
Expect(1, 10495, '\p{Script:   braille}', "");
Expect(0, 10495, '\p{^Script:   braille}', "");
Expect(0, 10495, '\P{Script:   braille}', "");
Expect(1, 10495, '\P{^Script:   braille}', "");
Expect(0, 10239, '\p{Script:   braille}', "");
Expect(1, 10239, '\p{^Script:   braille}', "");
Expect(1, 10239, '\P{Script:   braille}', "");
Expect(0, 10239, '\P{^Script:   braille}', "");
Expect(1, 10495, '\p{Script:	 braille}', "");
Expect(0, 10495, '\p{^Script:	 braille}', "");
Expect(0, 10495, '\P{Script:	 braille}', "");
Expect(1, 10495, '\P{^Script:	 braille}', "");
Expect(0, 10239, '\p{Script:	 braille}', "");
Expect(1, 10239, '\p{^Script:	 braille}', "");
Expect(1, 10239, '\P{Script:	 braille}', "");
Expect(0, 10239, '\P{^Script:	 braille}', "");
Error('\p{Sc=_brai/a/}');
Error('\P{Sc=_brai/a/}');
Expect(1, 10495, '\p{Sc=brai}', "");
Expect(0, 10495, '\p{^Sc=brai}', "");
Expect(0, 10495, '\P{Sc=brai}', "");
Expect(1, 10495, '\P{^Sc=brai}', "");
Expect(0, 10239, '\p{Sc=brai}', "");
Expect(1, 10239, '\p{^Sc=brai}', "");
Expect(1, 10239, '\P{Sc=brai}', "");
Expect(0, 10239, '\P{^Sc=brai}', "");
Expect(1, 10495, '\p{Sc=__BRAI}', "");
Expect(0, 10495, '\p{^Sc=__BRAI}', "");
Expect(0, 10495, '\P{Sc=__BRAI}', "");
Expect(1, 10495, '\P{^Sc=__BRAI}', "");
Expect(0, 10239, '\p{Sc=__BRAI}', "");
Expect(1, 10239, '\p{^Sc=__BRAI}', "");
Expect(1, 10239, '\P{Sc=__BRAI}', "");
Expect(0, 10239, '\P{^Sc=__BRAI}', "");
Error('\p{Is_Script=braille:=}');
Error('\P{Is_Script=braille:=}');
Expect(1, 10495, '\p{Is_Script=braille}', "");
Expect(0, 10495, '\p{^Is_Script=braille}', "");
Expect(0, 10495, '\P{Is_Script=braille}', "");
Expect(1, 10495, '\P{^Is_Script=braille}', "");
Expect(0, 10239, '\p{Is_Script=braille}', "");
Expect(1, 10239, '\p{^Is_Script=braille}', "");
Expect(1, 10239, '\P{Is_Script=braille}', "");
Expect(0, 10239, '\P{^Is_Script=braille}', "");
Expect(1, 10495, '\p{Is_Script=_ Braille}', "");
Expect(0, 10495, '\p{^Is_Script=_ Braille}', "");
Expect(0, 10495, '\P{Is_Script=_ Braille}', "");
Expect(1, 10495, '\P{^Is_Script=_ Braille}', "");
Expect(0, 10239, '\p{Is_Script=_ Braille}', "");
Expect(1, 10239, '\p{^Is_Script=_ Braille}', "");
Expect(1, 10239, '\P{Is_Script=_ Braille}', "");
Expect(0, 10239, '\P{^Is_Script=_ Braille}', "");
Error('\p{Is_Sc=	:=Brai}');
Error('\P{Is_Sc=	:=Brai}');
Expect(1, 10495, '\p{Is_Sc=brai}', "");
Expect(0, 10495, '\p{^Is_Sc=brai}', "");
Expect(0, 10495, '\P{Is_Sc=brai}', "");
Expect(1, 10495, '\P{^Is_Sc=brai}', "");
Expect(0, 10239, '\p{Is_Sc=brai}', "");
Expect(1, 10239, '\p{^Is_Sc=brai}', "");
Expect(1, 10239, '\P{Is_Sc=brai}', "");
Expect(0, 10239, '\P{^Is_Sc=brai}', "");
Expect(1, 10495, '\p{Is_Sc=  Brai}', "");
Expect(0, 10495, '\p{^Is_Sc=  Brai}', "");
Expect(0, 10495, '\P{Is_Sc=  Brai}', "");
Expect(1, 10495, '\P{^Is_Sc=  Brai}', "");
Expect(0, 10239, '\p{Is_Sc=  Brai}', "");
Expect(1, 10239, '\p{^Is_Sc=  Brai}', "");
Expect(1, 10239, '\P{Is_Sc=  Brai}', "");
Expect(0, 10239, '\P{^Is_Sc=  Brai}', "");
Error('\p{Script=	/a/Kharoshthi}');
Error('\P{Script=	/a/Kharoshthi}');
Expect(1, 68099, '\p{Script=kharoshthi}', "");
Expect(0, 68099, '\p{^Script=kharoshthi}', "");
Expect(0, 68099, '\P{Script=kharoshthi}', "");
Expect(1, 68099, '\P{^Script=kharoshthi}', "");
Expect(0, 68095, '\p{Script=kharoshthi}', "");
Expect(1, 68095, '\p{^Script=kharoshthi}', "");
Expect(1, 68095, '\P{Script=kharoshthi}', "");
Expect(0, 68095, '\P{^Script=kharoshthi}', "");
Expect(1, 68099, '\p{Script= kharoshthi}', "");
Expect(0, 68099, '\p{^Script= kharoshthi}', "");
Expect(0, 68099, '\P{Script= kharoshthi}', "");
Expect(1, 68099, '\P{^Script= kharoshthi}', "");
Expect(0, 68095, '\p{Script= kharoshthi}', "");
Expect(1, 68095, '\p{^Script= kharoshthi}', "");
Expect(1, 68095, '\P{Script= kharoshthi}', "");
Expect(0, 68095, '\P{^Script= kharoshthi}', "");
Error('\p{Sc= /a/Khar}');
Error('\P{Sc= /a/Khar}');
Expect(1, 68099, '\p{Sc=khar}', "");
Expect(0, 68099, '\p{^Sc=khar}', "");
Expect(0, 68099, '\P{Sc=khar}', "");
Expect(1, 68099, '\P{^Sc=khar}', "");
Expect(0, 68095, '\p{Sc=khar}', "");
Expect(1, 68095, '\p{^Sc=khar}', "");
Expect(1, 68095, '\P{Sc=khar}', "");
Expect(0, 68095, '\P{^Sc=khar}', "");
Expect(1, 68099, '\p{Sc= KHAR}', "");
Expect(0, 68099, '\p{^Sc= KHAR}', "");
Expect(0, 68099, '\P{Sc= KHAR}', "");
Expect(1, 68099, '\P{^Sc= KHAR}', "");
Expect(0, 68095, '\p{Sc= KHAR}', "");
Expect(1, 68095, '\p{^Sc= KHAR}', "");
Expect(1, 68095, '\P{Sc= KHAR}', "");
Expect(0, 68095, '\P{^Sc= KHAR}', "");
Error('\p{Is_Script: /a/ kharoshthi}');
Error('\P{Is_Script: /a/ kharoshthi}');
Expect(1, 68099, '\p{Is_Script=kharoshthi}', "");
Expect(0, 68099, '\p{^Is_Script=kharoshthi}', "");
Expect(0, 68099, '\P{Is_Script=kharoshthi}', "");
Expect(1, 68099, '\P{^Is_Script=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Script=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Script=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Script=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Script=kharoshthi}', "");
Expect(1, 68099, '\p{Is_Script=	KHAROSHTHI}', "");
Expect(0, 68099, '\p{^Is_Script=	KHAROSHTHI}', "");
Expect(0, 68099, '\P{Is_Script=	KHAROSHTHI}', "");
Expect(1, 68099, '\P{^Is_Script=	KHAROSHTHI}', "");
Expect(0, 68095, '\p{Is_Script=	KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Is_Script=	KHAROSHTHI}', "");
Expect(1, 68095, '\P{Is_Script=	KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Is_Script=	KHAROSHTHI}', "");
Error('\p{Is_Sc=:=_khar}');
Error('\P{Is_Sc=:=_khar}');
Expect(1, 68099, '\p{Is_Sc=khar}', "");
Expect(0, 68099, '\p{^Is_Sc=khar}', "");
Expect(0, 68099, '\P{Is_Sc=khar}', "");
Expect(1, 68099, '\P{^Is_Sc=khar}', "");
Expect(0, 68095, '\p{Is_Sc=khar}', "");
Expect(1, 68095, '\p{^Is_Sc=khar}', "");
Expect(1, 68095, '\P{Is_Sc=khar}', "");
Expect(0, 68095, '\P{^Is_Sc=khar}', "");
Expect(1, 68099, '\p{Is_Sc= 	Khar}', "");
Expect(0, 68099, '\p{^Is_Sc= 	Khar}', "");
Expect(0, 68099, '\P{Is_Sc= 	Khar}', "");
Expect(1, 68099, '\P{^Is_Sc= 	Khar}', "");
Expect(0, 68095, '\p{Is_Sc= 	Khar}', "");
Expect(1, 68095, '\p{^Is_Sc= 	Khar}', "");
Expect(1, 68095, '\P{Is_Sc= 	Khar}', "");
Expect(0, 68095, '\P{^Is_Sc= 	Khar}', "");
Error('\p{Script=_lycian:=}');
Error('\P{Script=_lycian:=}');
Expect(1, 66204, '\p{Script:   lycian}', "");
Expect(0, 66204, '\p{^Script:   lycian}', "");
Expect(0, 66204, '\P{Script:   lycian}', "");
Expect(1, 66204, '\P{^Script:   lycian}', "");
Expect(0, 66175, '\p{Script:   lycian}', "");
Expect(1, 66175, '\p{^Script:   lycian}', "");
Expect(1, 66175, '\P{Script:   lycian}', "");
Expect(0, 66175, '\P{^Script:   lycian}', "");
Expect(1, 66204, '\p{Script=Lycian}', "");
Expect(0, 66204, '\p{^Script=Lycian}', "");
Expect(0, 66204, '\P{Script=Lycian}', "");
Expect(1, 66204, '\P{^Script=Lycian}', "");
Expect(0, 66175, '\p{Script=Lycian}', "");
Expect(1, 66175, '\p{^Script=Lycian}', "");
Expect(1, 66175, '\P{Script=Lycian}', "");
Expect(0, 66175, '\P{^Script=Lycian}', "");
Error('\p{Sc=	-lyci/a/}');
Error('\P{Sc=	-lyci/a/}');
Expect(1, 66204, '\p{Sc=lyci}', "");
Expect(0, 66204, '\p{^Sc=lyci}', "");
Expect(0, 66204, '\P{Sc=lyci}', "");
Expect(1, 66204, '\P{^Sc=lyci}', "");
Expect(0, 66175, '\p{Sc=lyci}', "");
Expect(1, 66175, '\p{^Sc=lyci}', "");
Expect(1, 66175, '\P{Sc=lyci}', "");
Expect(0, 66175, '\P{^Sc=lyci}', "");
Expect(1, 66204, '\p{Sc=_LYCI}', "");
Expect(0, 66204, '\p{^Sc=_LYCI}', "");
Expect(0, 66204, '\P{Sc=_LYCI}', "");
Expect(1, 66204, '\P{^Sc=_LYCI}', "");
Expect(0, 66175, '\p{Sc=_LYCI}', "");
Expect(1, 66175, '\p{^Sc=_LYCI}', "");
Expect(1, 66175, '\P{Sc=_LYCI}', "");
Expect(0, 66175, '\P{^Sc=_LYCI}', "");
Error('\p{Is_Script=/a/-	lycian}');
Error('\P{Is_Script=/a/-	lycian}');
Expect(1, 66204, '\p{Is_Script=lycian}', "");
Expect(0, 66204, '\p{^Is_Script=lycian}', "");
Expect(0, 66204, '\P{Is_Script=lycian}', "");
Expect(1, 66204, '\P{^Is_Script=lycian}', "");
Expect(0, 66175, '\p{Is_Script=lycian}', "");
Expect(1, 66175, '\p{^Is_Script=lycian}', "");
Expect(1, 66175, '\P{Is_Script=lycian}', "");
Expect(0, 66175, '\P{^Is_Script=lycian}', "");
Expect(1, 66204, '\p{Is_Script:__Lycian}', "");
Expect(0, 66204, '\p{^Is_Script:__Lycian}', "");
Expect(0, 66204, '\P{Is_Script:__Lycian}', "");
Expect(1, 66204, '\P{^Is_Script:__Lycian}', "");
Expect(0, 66175, '\p{Is_Script:__Lycian}', "");
Expect(1, 66175, '\p{^Is_Script:__Lycian}', "");
Expect(1, 66175, '\P{Is_Script:__Lycian}', "");
Expect(0, 66175, '\P{^Is_Script:__Lycian}', "");
Error('\p{Is_Sc:	/a/lyci}');
Error('\P{Is_Sc:	/a/lyci}');
Expect(1, 66204, '\p{Is_Sc=lyci}', "");
Expect(0, 66204, '\p{^Is_Sc=lyci}', "");
Expect(0, 66204, '\P{Is_Sc=lyci}', "");
Expect(1, 66204, '\P{^Is_Sc=lyci}', "");
Expect(0, 66175, '\p{Is_Sc=lyci}', "");
Expect(1, 66175, '\p{^Is_Sc=lyci}', "");
Expect(1, 66175, '\P{Is_Sc=lyci}', "");
Expect(0, 66175, '\P{^Is_Sc=lyci}', "");
Expect(1, 66204, '\p{Is_Sc=	 Lyci}', "");
Expect(0, 66204, '\p{^Is_Sc=	 Lyci}', "");
Expect(0, 66204, '\P{Is_Sc=	 Lyci}', "");
Expect(1, 66204, '\P{^Is_Sc=	 Lyci}', "");
Expect(0, 66175, '\p{Is_Sc=	 Lyci}', "");
Expect(1, 66175, '\p{^Is_Sc=	 Lyci}', "");
Expect(1, 66175, '\P{Is_Sc=	 Lyci}', "");
Expect(0, 66175, '\P{^Is_Sc=	 Lyci}', "");
Error('\p{Script=/a/Bopomofo}');
Error('\P{Script=/a/Bopomofo}');
Expect(1, 12589, '\p{Script=bopomofo}', "");
Expect(0, 12589, '\p{^Script=bopomofo}', "");
Expect(0, 12589, '\P{Script=bopomofo}', "");
Expect(1, 12589, '\P{^Script=bopomofo}', "");
Expect(0, 12548, '\p{Script=bopomofo}', "");
Expect(1, 12548, '\p{^Script=bopomofo}', "");
Expect(1, 12548, '\P{Script=bopomofo}', "");
Expect(0, 12548, '\P{^Script=bopomofo}', "");
Expect(1, 12589, '\p{Script:   		Bopomofo}', "");
Expect(0, 12589, '\p{^Script:   		Bopomofo}', "");
Expect(0, 12589, '\P{Script:   		Bopomofo}', "");
Expect(1, 12589, '\P{^Script:   		Bopomofo}', "");
Expect(0, 12548, '\p{Script:   		Bopomofo}', "");
Expect(1, 12548, '\p{^Script:   		Bopomofo}', "");
Expect(1, 12548, '\P{Script:   		Bopomofo}', "");
Expect(0, 12548, '\P{^Script:   		Bopomofo}', "");
Error('\p{Sc=_Bopo:=}');
Error('\P{Sc=_Bopo:=}');
Expect(1, 12589, '\p{Sc=bopo}', "");
Expect(0, 12589, '\p{^Sc=bopo}', "");
Expect(0, 12589, '\P{Sc=bopo}', "");
Expect(1, 12589, '\P{^Sc=bopo}', "");
Expect(0, 12548, '\p{Sc=bopo}', "");
Expect(1, 12548, '\p{^Sc=bopo}', "");
Expect(1, 12548, '\P{Sc=bopo}', "");
Expect(0, 12548, '\P{^Sc=bopo}', "");
Expect(1, 12589, '\p{Sc: -bopo}', "");
Expect(0, 12589, '\p{^Sc: -bopo}', "");
Expect(0, 12589, '\P{Sc: -bopo}', "");
Expect(1, 12589, '\P{^Sc: -bopo}', "");
Expect(0, 12548, '\p{Sc: -bopo}', "");
Expect(1, 12548, '\p{^Sc: -bopo}', "");
Expect(1, 12548, '\P{Sc: -bopo}', "");
Expect(0, 12548, '\P{^Sc: -bopo}', "");
Error('\p{Is_Script=_-Bopomofo:=}');
Error('\P{Is_Script=_-Bopomofo:=}');
Expect(1, 12589, '\p{Is_Script=bopomofo}', "");
Expect(0, 12589, '\p{^Is_Script=bopomofo}', "");
Expect(0, 12589, '\P{Is_Script=bopomofo}', "");
Expect(1, 12589, '\P{^Is_Script=bopomofo}', "");
Expect(0, 12548, '\p{Is_Script=bopomofo}', "");
Expect(1, 12548, '\p{^Is_Script=bopomofo}', "");
Expect(1, 12548, '\P{Is_Script=bopomofo}', "");
Expect(0, 12548, '\P{^Is_Script=bopomofo}', "");
Expect(1, 12589, '\p{Is_Script=		bopomofo}', "");
Expect(0, 12589, '\p{^Is_Script=		bopomofo}', "");
Expect(0, 12589, '\P{Is_Script=		bopomofo}', "");
Expect(1, 12589, '\P{^Is_Script=		bopomofo}', "");
Expect(0, 12548, '\p{Is_Script=		bopomofo}', "");
Expect(1, 12548, '\p{^Is_Script=		bopomofo}', "");
Expect(1, 12548, '\P{Is_Script=		bopomofo}', "");
Expect(0, 12548, '\P{^Is_Script=		bopomofo}', "");
Error('\p{Is_Sc=_-bopo:=}');
Error('\P{Is_Sc=_-bopo:=}');
Expect(1, 12589, '\p{Is_Sc=bopo}', "");
Expect(0, 12589, '\p{^Is_Sc=bopo}', "");
Expect(0, 12589, '\P{Is_Sc=bopo}', "");
Expect(1, 12589, '\P{^Is_Sc=bopo}', "");
Expect(0, 12548, '\p{Is_Sc=bopo}', "");
Expect(1, 12548, '\p{^Is_Sc=bopo}', "");
Expect(1, 12548, '\P{Is_Sc=bopo}', "");
Expect(0, 12548, '\P{^Is_Sc=bopo}', "");
Expect(1, 12589, '\p{Is_Sc= Bopo}', "");
Expect(0, 12589, '\p{^Is_Sc= Bopo}', "");
Expect(0, 12589, '\P{Is_Sc= Bopo}', "");
Expect(1, 12589, '\P{^Is_Sc= Bopo}', "");
Expect(0, 12548, '\p{Is_Sc= Bopo}', "");
Expect(1, 12548, '\p{^Is_Sc= Bopo}', "");
Expect(1, 12548, '\P{Is_Sc= Bopo}', "");
Expect(0, 12548, '\P{^Is_Sc= Bopo}', "");
Error('\p{Script=_ rejang:=}');
Error('\P{Script=_ rejang:=}');
Expect(1, 43347, '\p{Script=rejang}', "");
Expect(0, 43347, '\p{^Script=rejang}', "");
Expect(0, 43347, '\P{Script=rejang}', "");
Expect(1, 43347, '\P{^Script=rejang}', "");
Expect(0, 43311, '\p{Script=rejang}', "");
Expect(1, 43311, '\p{^Script=rejang}', "");
Expect(1, 43311, '\P{Script=rejang}', "");
Expect(0, 43311, '\P{^Script=rejang}', "");
Expect(1, 43347, '\p{Script=	_REJANG}', "");
Expect(0, 43347, '\p{^Script=	_REJANG}', "");
Expect(0, 43347, '\P{Script=	_REJANG}', "");
Expect(1, 43347, '\P{^Script=	_REJANG}', "");
Expect(0, 43311, '\p{Script=	_REJANG}', "");
Expect(1, 43311, '\p{^Script=	_REJANG}', "");
Expect(1, 43311, '\P{Script=	_REJANG}', "");
Expect(0, 43311, '\P{^Script=	_REJANG}', "");
Error('\p{Sc=	RJNG/a/}');
Error('\P{Sc=	RJNG/a/}');
Expect(1, 43347, '\p{Sc=rjng}', "");
Expect(0, 43347, '\p{^Sc=rjng}', "");
Expect(0, 43347, '\P{Sc=rjng}', "");
Expect(1, 43347, '\P{^Sc=rjng}', "");
Expect(0, 43311, '\p{Sc=rjng}', "");
Expect(1, 43311, '\p{^Sc=rjng}', "");
Expect(1, 43311, '\P{Sc=rjng}', "");
Expect(0, 43311, '\P{^Sc=rjng}', "");
Expect(1, 43347, '\p{Sc=	_Rjng}', "");
Expect(0, 43347, '\p{^Sc=	_Rjng}', "");
Expect(0, 43347, '\P{Sc=	_Rjng}', "");
Expect(1, 43347, '\P{^Sc=	_Rjng}', "");
Expect(0, 43311, '\p{Sc=	_Rjng}', "");
Expect(1, 43311, '\p{^Sc=	_Rjng}', "");
Expect(1, 43311, '\P{Sc=	_Rjng}', "");
Expect(0, 43311, '\P{^Sc=	_Rjng}', "");
Error('\p{Is_Script:	_ Rejang/a/}');
Error('\P{Is_Script:	_ Rejang/a/}');
Expect(1, 43347, '\p{Is_Script=rejang}', "");
Expect(0, 43347, '\p{^Is_Script=rejang}', "");
Expect(0, 43347, '\P{Is_Script=rejang}', "");
Expect(1, 43347, '\P{^Is_Script=rejang}', "");
Expect(0, 43311, '\p{Is_Script=rejang}', "");
Expect(1, 43311, '\p{^Is_Script=rejang}', "");
Expect(1, 43311, '\P{Is_Script=rejang}', "");
Expect(0, 43311, '\P{^Is_Script=rejang}', "");
Expect(1, 43347, '\p{Is_Script: - Rejang}', "");
Expect(0, 43347, '\p{^Is_Script: - Rejang}', "");
Expect(0, 43347, '\P{Is_Script: - Rejang}', "");
Expect(1, 43347, '\P{^Is_Script: - Rejang}', "");
Expect(0, 43311, '\p{Is_Script: - Rejang}', "");
Expect(1, 43311, '\p{^Is_Script: - Rejang}', "");
Expect(1, 43311, '\P{Is_Script: - Rejang}', "");
Expect(0, 43311, '\P{^Is_Script: - Rejang}', "");
Error('\p{Is_Sc:	_ Rjng:=}');
Error('\P{Is_Sc:	_ Rjng:=}');
Expect(1, 43347, '\p{Is_Sc=rjng}', "");
Expect(0, 43347, '\p{^Is_Sc=rjng}', "");
Expect(0, 43347, '\P{Is_Sc=rjng}', "");
Expect(1, 43347, '\P{^Is_Sc=rjng}', "");
Expect(0, 43311, '\p{Is_Sc=rjng}', "");
Expect(1, 43311, '\p{^Is_Sc=rjng}', "");
Expect(1, 43311, '\P{Is_Sc=rjng}', "");
Expect(0, 43311, '\P{^Is_Sc=rjng}', "");
Expect(1, 43347, '\p{Is_Sc=-Rjng}', "");
Expect(0, 43347, '\p{^Is_Sc=-Rjng}', "");
Expect(0, 43347, '\P{Is_Sc=-Rjng}', "");
Expect(1, 43347, '\P{^Is_Sc=-Rjng}', "");
Expect(0, 43311, '\p{Is_Sc=-Rjng}', "");
Expect(1, 43311, '\p{^Is_Sc=-Rjng}', "");
Expect(1, 43311, '\P{Is_Sc=-Rjng}', "");
Expect(0, 43311, '\P{^Is_Sc=-Rjng}', "");
Error('\p{Script=:=Hanunoo}');
Error('\P{Script=:=Hanunoo}');
Expect(1, 5940, '\p{Script=hanunoo}', "");
Expect(0, 5940, '\p{^Script=hanunoo}', "");
Expect(0, 5940, '\P{Script=hanunoo}', "");
Expect(1, 5940, '\P{^Script=hanunoo}', "");
Expect(0, 5919, '\p{Script=hanunoo}', "");
Expect(1, 5919, '\p{^Script=hanunoo}', "");
Expect(1, 5919, '\P{Script=hanunoo}', "");
Expect(0, 5919, '\P{^Script=hanunoo}', "");
Expect(1, 5940, '\p{Script=	 hanunoo}', "");
Expect(0, 5940, '\p{^Script=	 hanunoo}', "");
Expect(0, 5940, '\P{Script=	 hanunoo}', "");
Expect(1, 5940, '\P{^Script=	 hanunoo}', "");
Expect(0, 5919, '\p{Script=	 hanunoo}', "");
Expect(1, 5919, '\p{^Script=	 hanunoo}', "");
Expect(1, 5919, '\P{Script=	 hanunoo}', "");
Expect(0, 5919, '\P{^Script=	 hanunoo}', "");
Error('\p{Sc=_	Hano:=}');
Error('\P{Sc=_	Hano:=}');
Expect(1, 5940, '\p{Sc=hano}', "");
Expect(0, 5940, '\p{^Sc=hano}', "");
Expect(0, 5940, '\P{Sc=hano}', "");
Expect(1, 5940, '\P{^Sc=hano}', "");
Expect(0, 5919, '\p{Sc=hano}', "");
Expect(1, 5919, '\p{^Sc=hano}', "");
Expect(1, 5919, '\P{Sc=hano}', "");
Expect(0, 5919, '\P{^Sc=hano}', "");
Expect(1, 5940, '\p{Sc= -Hano}', "");
Expect(0, 5940, '\p{^Sc= -Hano}', "");
Expect(0, 5940, '\P{Sc= -Hano}', "");
Expect(1, 5940, '\P{^Sc= -Hano}', "");
Expect(0, 5919, '\p{Sc= -Hano}', "");
Expect(1, 5919, '\p{^Sc= -Hano}', "");
Expect(1, 5919, '\P{Sc= -Hano}', "");
Expect(0, 5919, '\P{^Sc= -Hano}', "");
Error('\p{Is_Script=/a/hanunoo}');
Error('\P{Is_Script=/a/hanunoo}');
Expect(1, 5940, '\p{Is_Script=hanunoo}', "");
Expect(0, 5940, '\p{^Is_Script=hanunoo}', "");
Expect(0, 5940, '\P{Is_Script=hanunoo}', "");
Expect(1, 5940, '\P{^Is_Script=hanunoo}', "");
Expect(0, 5919, '\p{Is_Script=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Script=hanunoo}', "");
Expect(1, 5919, '\P{Is_Script=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Script=hanunoo}', "");
Expect(1, 5940, '\p{Is_Script= 	HANUNOO}', "");
Expect(0, 5940, '\p{^Is_Script= 	HANUNOO}', "");
Expect(0, 5940, '\P{Is_Script= 	HANUNOO}', "");
Expect(1, 5940, '\P{^Is_Script= 	HANUNOO}', "");
Expect(0, 5919, '\p{Is_Script= 	HANUNOO}', "");
Expect(1, 5919, '\p{^Is_Script= 	HANUNOO}', "");
Expect(1, 5919, '\P{Is_Script= 	HANUNOO}', "");
Expect(0, 5919, '\P{^Is_Script= 	HANUNOO}', "");
Error('\p{Is_Sc=_-hano/a/}');
Error('\P{Is_Sc=_-hano/a/}');
Expect(1, 5940, '\p{Is_Sc=hano}', "");
Expect(0, 5940, '\p{^Is_Sc=hano}', "");
Expect(0, 5940, '\P{Is_Sc=hano}', "");
Expect(1, 5940, '\P{^Is_Sc=hano}', "");
Expect(0, 5919, '\p{Is_Sc=hano}', "");
Expect(1, 5919, '\p{^Is_Sc=hano}', "");
Expect(1, 5919, '\P{Is_Sc=hano}', "");
Expect(0, 5919, '\P{^Is_Sc=hano}', "");
Expect(1, 5940, '\p{Is_Sc: -	hano}', "");
Expect(0, 5940, '\p{^Is_Sc: -	hano}', "");
Expect(0, 5940, '\P{Is_Sc: -	hano}', "");
Expect(1, 5940, '\P{^Is_Sc: -	hano}', "");
Expect(0, 5919, '\p{Is_Sc: -	hano}', "");
Expect(1, 5919, '\p{^Is_Sc: -	hano}', "");
Expect(1, 5919, '\P{Is_Sc: -	hano}', "");
Expect(0, 5919, '\P{^Is_Sc: -	hano}', "");
Error('\p{Script=-Imperial-Aramaic:=}');
Error('\P{Script=-Imperial-Aramaic:=}');
Expect(1, 67669, '\p{Script=imperialaramaic}', "");
Expect(0, 67669, '\p{^Script=imperialaramaic}', "");
Expect(0, 67669, '\P{Script=imperialaramaic}', "");
Expect(1, 67669, '\P{^Script=imperialaramaic}', "");
Expect(0, 67647, '\p{Script=imperialaramaic}', "");
Expect(1, 67647, '\p{^Script=imperialaramaic}', "");
Expect(1, 67647, '\P{Script=imperialaramaic}', "");
Expect(0, 67647, '\P{^Script=imperialaramaic}', "");
Expect(1, 67669, '\p{Script=-_imperial	Aramaic}', "");
Expect(0, 67669, '\p{^Script=-_imperial	Aramaic}', "");
Expect(0, 67669, '\P{Script=-_imperial	Aramaic}', "");
Expect(1, 67669, '\P{^Script=-_imperial	Aramaic}', "");
Expect(0, 67647, '\p{Script=-_imperial	Aramaic}', "");
Expect(1, 67647, '\p{^Script=-_imperial	Aramaic}', "");
Expect(1, 67647, '\P{Script=-_imperial	Aramaic}', "");
Expect(0, 67647, '\P{^Script=-_imperial	Aramaic}', "");
Error('\p{Sc=_/a/Armi}');
Error('\P{Sc=_/a/Armi}');
Expect(1, 67669, '\p{Sc=armi}', "");
Expect(0, 67669, '\p{^Sc=armi}', "");
Expect(0, 67669, '\P{Sc=armi}', "");
Expect(1, 67669, '\P{^Sc=armi}', "");
Expect(0, 67647, '\p{Sc=armi}', "");
Expect(1, 67647, '\p{^Sc=armi}', "");
Expect(1, 67647, '\P{Sc=armi}', "");
Expect(0, 67647, '\P{^Sc=armi}', "");
Expect(1, 67669, '\p{Sc=	 ARMI}', "");
Expect(0, 67669, '\p{^Sc=	 ARMI}', "");
Expect(0, 67669, '\P{Sc=	 ARMI}', "");
Expect(1, 67669, '\P{^Sc=	 ARMI}', "");
Expect(0, 67647, '\p{Sc=	 ARMI}', "");
Expect(1, 67647, '\p{^Sc=	 ARMI}', "");
Expect(1, 67647, '\P{Sc=	 ARMI}', "");
Expect(0, 67647, '\P{^Sc=	 ARMI}', "");
Error('\p{Is_Script= -IMPERIAL	ARAMAIC:=}');
Error('\P{Is_Script= -IMPERIAL	ARAMAIC:=}');
Expect(1, 67669, '\p{Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\p{^Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\P{Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\P{^Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\p{Is_Script=_imperial aramaic}', "");
Expect(0, 67669, '\p{^Is_Script=_imperial aramaic}', "");
Expect(0, 67669, '\P{Is_Script=_imperial aramaic}', "");
Expect(1, 67669, '\P{^Is_Script=_imperial aramaic}', "");
Expect(0, 67647, '\p{Is_Script=_imperial aramaic}', "");
Expect(1, 67647, '\p{^Is_Script=_imperial aramaic}', "");
Expect(1, 67647, '\P{Is_Script=_imperial aramaic}', "");
Expect(0, 67647, '\P{^Is_Script=_imperial aramaic}', "");
Error('\p{Is_Sc=_/a/Armi}');
Error('\P{Is_Sc=_/a/Armi}');
Expect(1, 67669, '\p{Is_Sc=armi}', "");
Expect(0, 67669, '\p{^Is_Sc=armi}', "");
Expect(0, 67669, '\P{Is_Sc=armi}', "");
Expect(1, 67669, '\P{^Is_Sc=armi}', "");
Expect(0, 67647, '\p{Is_Sc=armi}', "");
Expect(1, 67647, '\p{^Is_Sc=armi}', "");
Expect(1, 67647, '\P{Is_Sc=armi}', "");
Expect(0, 67647, '\P{^Is_Sc=armi}', "");
Expect(1, 67669, '\p{Is_Sc:    	Armi}', "");
Expect(0, 67669, '\p{^Is_Sc:    	Armi}', "");
Expect(0, 67669, '\P{Is_Sc:    	Armi}', "");
Expect(1, 67669, '\P{^Is_Sc:    	Armi}', "");
Expect(0, 67647, '\p{Is_Sc:    	Armi}', "");
Expect(1, 67647, '\p{^Is_Sc:    	Armi}', "");
Expect(1, 67647, '\P{Is_Sc:    	Armi}', "");
Expect(0, 67647, '\P{^Is_Sc:    	Armi}', "");
Error('\p{Script:   :=Kannada}');
Error('\P{Script:   :=Kannada}');
Expect(1, 3203, '\p{Script=kannada}', "");
Expect(0, 3203, '\p{^Script=kannada}', "");
Expect(0, 3203, '\P{Script=kannada}', "");
Expect(1, 3203, '\P{^Script=kannada}', "");
Expect(0, 3201, '\p{Script=kannada}', "");
Expect(1, 3201, '\p{^Script=kannada}', "");
Expect(1, 3201, '\P{Script=kannada}', "");
Expect(0, 3201, '\P{^Script=kannada}', "");
Expect(1, 3203, '\p{Script=	kannada}', "");
Expect(0, 3203, '\p{^Script=	kannada}', "");
Expect(0, 3203, '\P{Script=	kannada}', "");
Expect(1, 3203, '\P{^Script=	kannada}', "");
Expect(0, 3201, '\p{Script=	kannada}', "");
Expect(1, 3201, '\p{^Script=	kannada}', "");
Expect(1, 3201, '\P{Script=	kannada}', "");
Expect(0, 3201, '\P{^Script=	kannada}', "");
Error('\p{Sc=:=_KNDA}');
Error('\P{Sc=:=_KNDA}');
Expect(1, 3203, '\p{Sc=knda}', "");
Expect(0, 3203, '\p{^Sc=knda}', "");
Expect(0, 3203, '\P{Sc=knda}', "");
Expect(1, 3203, '\P{^Sc=knda}', "");
Expect(0, 3201, '\p{Sc=knda}', "");
Expect(1, 3201, '\p{^Sc=knda}', "");
Expect(1, 3201, '\P{Sc=knda}', "");
Expect(0, 3201, '\P{^Sc=knda}', "");
Expect(1, 3203, '\p{Sc=	_knda}', "");
Expect(0, 3203, '\p{^Sc=	_knda}', "");
Expect(0, 3203, '\P{Sc=	_knda}', "");
Expect(1, 3203, '\P{^Sc=	_knda}', "");
Expect(0, 3201, '\p{Sc=	_knda}', "");
Expect(1, 3201, '\p{^Sc=	_knda}', "");
Expect(1, 3201, '\P{Sc=	_knda}', "");
Expect(0, 3201, '\P{^Sc=	_knda}', "");
Error('\p{Is_Script=/a/-	Kannada}');
Error('\P{Is_Script=/a/-	Kannada}');
Expect(1, 3203, '\p{Is_Script=kannada}', "");
Expect(0, 3203, '\p{^Is_Script=kannada}', "");
Expect(0, 3203, '\P{Is_Script=kannada}', "");
Expect(1, 3203, '\P{^Is_Script=kannada}', "");
Expect(0, 3201, '\p{Is_Script=kannada}', "");
Expect(1, 3201, '\p{^Is_Script=kannada}', "");
Expect(1, 3201, '\P{Is_Script=kannada}', "");
Expect(0, 3201, '\P{^Is_Script=kannada}', "");
Expect(1, 3203, '\p{Is_Script=	 kannada}', "");
Expect(0, 3203, '\p{^Is_Script=	 kannada}', "");
Expect(0, 3203, '\P{Is_Script=	 kannada}', "");
Expect(1, 3203, '\P{^Is_Script=	 kannada}', "");
Expect(0, 3201, '\p{Is_Script=	 kannada}', "");
Expect(1, 3201, '\p{^Is_Script=	 kannada}', "");
Expect(1, 3201, '\P{Is_Script=	 kannada}', "");
Expect(0, 3201, '\P{^Is_Script=	 kannada}', "");
Error('\p{Is_Sc=/a/	_knda}');
Error('\P{Is_Sc=/a/	_knda}');
Expect(1, 3203, '\p{Is_Sc=knda}', "");
Expect(0, 3203, '\p{^Is_Sc=knda}', "");
Expect(0, 3203, '\P{Is_Sc=knda}', "");
Expect(1, 3203, '\P{^Is_Sc=knda}', "");
Expect(0, 3201, '\p{Is_Sc=knda}', "");
Expect(1, 3201, '\p{^Is_Sc=knda}', "");
Expect(1, 3201, '\P{Is_Sc=knda}', "");
Expect(0, 3201, '\P{^Is_Sc=knda}', "");
Expect(1, 3203, '\p{Is_Sc=	 knda}', "");
Expect(0, 3203, '\p{^Is_Sc=	 knda}', "");
Expect(0, 3203, '\P{Is_Sc=	 knda}', "");
Expect(1, 3203, '\P{^Is_Sc=	 knda}', "");
Expect(0, 3201, '\p{Is_Sc=	 knda}', "");
Expect(1, 3201, '\p{^Is_Sc=	 knda}', "");
Expect(1, 3201, '\P{Is_Sc=	 knda}', "");
Expect(0, 3201, '\P{^Is_Sc=	 knda}', "");
Error('\p{Script=__KHMER:=}');
Error('\P{Script=__KHMER:=}');
Expect(1, 6109, '\p{Script: khmer}', "");
Expect(0, 6109, '\p{^Script: khmer}', "");
Expect(0, 6109, '\P{Script: khmer}', "");
Expect(1, 6109, '\P{^Script: khmer}', "");
Expect(0, 6015, '\p{Script: khmer}', "");
Expect(1, 6015, '\p{^Script: khmer}', "");
Expect(1, 6015, '\P{Script: khmer}', "");
Expect(0, 6015, '\P{^Script: khmer}', "");
Expect(1, 6109, '\p{Script=__Khmer}', "");
Expect(0, 6109, '\p{^Script=__Khmer}', "");
Expect(0, 6109, '\P{Script=__Khmer}', "");
Expect(1, 6109, '\P{^Script=__Khmer}', "");
Expect(0, 6015, '\p{Script=__Khmer}', "");
Expect(1, 6015, '\p{^Script=__Khmer}', "");
Expect(1, 6015, '\P{Script=__Khmer}', "");
Expect(0, 6015, '\P{^Script=__Khmer}', "");
Error('\p{Sc=-:=KHMR}');
Error('\P{Sc=-:=KHMR}');
Expect(1, 6109, '\p{Sc=khmr}', "");
Expect(0, 6109, '\p{^Sc=khmr}', "");
Expect(0, 6109, '\P{Sc=khmr}', "");
Expect(1, 6109, '\P{^Sc=khmr}', "");
Expect(0, 6015, '\p{Sc=khmr}', "");
Expect(1, 6015, '\p{^Sc=khmr}', "");
Expect(1, 6015, '\P{Sc=khmr}', "");
Expect(0, 6015, '\P{^Sc=khmr}', "");
Expect(1, 6109, '\p{Sc=		khmr}', "");
Expect(0, 6109, '\p{^Sc=		khmr}', "");
Expect(0, 6109, '\P{Sc=		khmr}', "");
Expect(1, 6109, '\P{^Sc=		khmr}', "");
Expect(0, 6015, '\p{Sc=		khmr}', "");
Expect(1, 6015, '\p{^Sc=		khmr}', "");
Expect(1, 6015, '\P{Sc=		khmr}', "");
Expect(0, 6015, '\P{^Sc=		khmr}', "");
Error('\p{Is_Script=:=	-Khmer}');
Error('\P{Is_Script=:=	-Khmer}');
Expect(1, 6109, '\p{Is_Script=khmer}', "");
Expect(0, 6109, '\p{^Is_Script=khmer}', "");
Expect(0, 6109, '\P{Is_Script=khmer}', "");
Expect(1, 6109, '\P{^Is_Script=khmer}', "");
Expect(0, 6015, '\p{Is_Script=khmer}', "");
Expect(1, 6015, '\p{^Is_Script=khmer}', "");
Expect(1, 6015, '\P{Is_Script=khmer}', "");
Expect(0, 6015, '\P{^Is_Script=khmer}', "");
Expect(1, 6109, '\p{Is_Script=-_KHMER}', "");
Expect(0, 6109, '\p{^Is_Script=-_KHMER}', "");
Expect(0, 6109, '\P{Is_Script=-_KHMER}', "");
Expect(1, 6109, '\P{^Is_Script=-_KHMER}', "");
Expect(0, 6015, '\p{Is_Script=-_KHMER}', "");
Expect(1, 6015, '\p{^Is_Script=-_KHMER}', "");
Expect(1, 6015, '\P{Is_Script=-_KHMER}', "");
Expect(0, 6015, '\P{^Is_Script=-_KHMER}', "");
Error('\p{Is_Sc= /a/KHMR}');
Error('\P{Is_Sc= /a/KHMR}');
Expect(1, 6109, '\p{Is_Sc=khmr}', "");
Expect(0, 6109, '\p{^Is_Sc=khmr}', "");
Expect(0, 6109, '\P{Is_Sc=khmr}', "");
Expect(1, 6109, '\P{^Is_Sc=khmr}', "");
Expect(0, 6015, '\p{Is_Sc=khmr}', "");
Expect(1, 6015, '\p{^Is_Sc=khmr}', "");
Expect(1, 6015, '\P{Is_Sc=khmr}', "");
Expect(0, 6015, '\P{^Is_Sc=khmr}', "");
Expect(1, 6109, '\p{Is_Sc= -khmr}', "");
Expect(0, 6109, '\p{^Is_Sc= -khmr}', "");
Expect(0, 6109, '\P{Is_Sc= -khmr}', "");
Expect(1, 6109, '\P{^Is_Sc= -khmr}', "");
Expect(0, 6015, '\p{Is_Sc= -khmr}', "");
Expect(1, 6015, '\p{^Is_Sc= -khmr}', "");
Expect(1, 6015, '\P{Is_Sc= -khmr}', "");
Expect(0, 6015, '\P{^Is_Sc= -khmr}', "");
Error('\p{Script=-/a/cham}');
Error('\P{Script=-/a/cham}');
Expect(1, 43574, '\p{Script=cham}', "");
Expect(0, 43574, '\p{^Script=cham}', "");
Expect(0, 43574, '\P{Script=cham}', "");
Expect(1, 43574, '\P{^Script=cham}', "");
Expect(0, 43519, '\p{Script=cham}', "");
Expect(1, 43519, '\p{^Script=cham}', "");
Expect(1, 43519, '\P{Script=cham}', "");
Expect(0, 43519, '\P{^Script=cham}', "");
Expect(1, 43574, '\p{Script:	Cham}', "");
Expect(0, 43574, '\p{^Script:	Cham}', "");
Expect(0, 43574, '\P{Script:	Cham}', "");
Expect(1, 43574, '\P{^Script:	Cham}', "");
Expect(0, 43519, '\p{Script:	Cham}', "");
Expect(1, 43519, '\p{^Script:	Cham}', "");
Expect(1, 43519, '\P{Script:	Cham}', "");
Expect(0, 43519, '\P{^Script:	Cham}', "");
Error('\p{Sc:   	cham:=}');
Error('\P{Sc:   	cham:=}');
Expect(1, 43574, '\p{Sc=cham}', "");
Expect(0, 43574, '\p{^Sc=cham}', "");
Expect(0, 43574, '\P{Sc=cham}', "");
Expect(1, 43574, '\P{^Sc=cham}', "");
Expect(0, 43519, '\p{Sc=cham}', "");
Expect(1, 43519, '\p{^Sc=cham}', "");
Expect(1, 43519, '\P{Sc=cham}', "");
Expect(0, 43519, '\P{^Sc=cham}', "");
Expect(1, 43574, '\p{Sc=_Cham}', "");
Expect(0, 43574, '\p{^Sc=_Cham}', "");
Expect(0, 43574, '\P{Sc=_Cham}', "");
Expect(1, 43574, '\P{^Sc=_Cham}', "");
Expect(0, 43519, '\p{Sc=_Cham}', "");
Expect(1, 43519, '\p{^Sc=_Cham}', "");
Expect(1, 43519, '\P{Sc=_Cham}', "");
Expect(0, 43519, '\P{^Sc=_Cham}', "");
Error('\p{Is_Script:-CHAM:=}');
Error('\P{Is_Script:-CHAM:=}');
Expect(1, 43574, '\p{Is_Script=cham}', "");
Expect(0, 43574, '\p{^Is_Script=cham}', "");
Expect(0, 43574, '\P{Is_Script=cham}', "");
Expect(1, 43574, '\P{^Is_Script=cham}', "");
Expect(0, 43519, '\p{Is_Script=cham}', "");
Expect(1, 43519, '\p{^Is_Script=cham}', "");
Expect(1, 43519, '\P{Is_Script=cham}', "");
Expect(0, 43519, '\P{^Is_Script=cham}', "");
Expect(1, 43574, '\p{Is_Script=-CHAM}', "");
Expect(0, 43574, '\p{^Is_Script=-CHAM}', "");
Expect(0, 43574, '\P{Is_Script=-CHAM}', "");
Expect(1, 43574, '\P{^Is_Script=-CHAM}', "");
Expect(0, 43519, '\p{Is_Script=-CHAM}', "");
Expect(1, 43519, '\p{^Is_Script=-CHAM}', "");
Expect(1, 43519, '\P{Is_Script=-CHAM}', "");
Expect(0, 43519, '\P{^Is_Script=-CHAM}', "");
Error('\p{Is_Sc=- Cham/a/}');
Error('\P{Is_Sc=- Cham/a/}');
Expect(1, 43574, '\p{Is_Sc=cham}', "");
Expect(0, 43574, '\p{^Is_Sc=cham}', "");
Expect(0, 43574, '\P{Is_Sc=cham}', "");
Expect(1, 43574, '\P{^Is_Sc=cham}', "");
Expect(0, 43519, '\p{Is_Sc=cham}', "");
Expect(1, 43519, '\p{^Is_Sc=cham}', "");
Expect(1, 43519, '\P{Is_Sc=cham}', "");
Expect(0, 43519, '\P{^Is_Sc=cham}', "");
Expect(1, 43574, '\p{Is_Sc=-	CHAM}', "");
Expect(0, 43574, '\p{^Is_Sc=-	CHAM}', "");
Expect(0, 43574, '\P{Is_Sc=-	CHAM}', "");
Expect(1, 43574, '\P{^Is_Sc=-	CHAM}', "");
Expect(0, 43519, '\p{Is_Sc=-	CHAM}', "");
Expect(1, 43519, '\p{^Is_Sc=-	CHAM}', "");
Expect(1, 43519, '\P{Is_Sc=-	CHAM}', "");
Expect(0, 43519, '\P{^Is_Sc=-	CHAM}', "");
Error('\p{Script= Tibetan:=}');
Error('\P{Script= Tibetan:=}');
Expect(1, 3911, '\p{Script=tibetan}', "");
Expect(0, 3911, '\p{^Script=tibetan}', "");
Expect(0, 3911, '\P{Script=tibetan}', "");
Expect(1, 3911, '\P{^Script=tibetan}', "");
Expect(0, 3839, '\p{Script=tibetan}', "");
Expect(1, 3839, '\p{^Script=tibetan}', "");
Expect(1, 3839, '\P{Script=tibetan}', "");
Expect(0, 3839, '\P{^Script=tibetan}', "");
Expect(1, 3911, '\p{Script=_Tibetan}', "");
Expect(0, 3911, '\p{^Script=_Tibetan}', "");
Expect(0, 3911, '\P{Script=_Tibetan}', "");
Expect(1, 3911, '\P{^Script=_Tibetan}', "");
Expect(0, 3839, '\p{Script=_Tibetan}', "");
Expect(1, 3839, '\p{^Script=_Tibetan}', "");
Expect(1, 3839, '\P{Script=_Tibetan}', "");
Expect(0, 3839, '\P{^Script=_Tibetan}', "");
Error('\p{Sc=/a/ -Tibt}');
Error('\P{Sc=/a/ -Tibt}');
Expect(1, 3911, '\p{Sc=tibt}', "");
Expect(0, 3911, '\p{^Sc=tibt}', "");
Expect(0, 3911, '\P{Sc=tibt}', "");
Expect(1, 3911, '\P{^Sc=tibt}', "");
Expect(0, 3839, '\p{Sc=tibt}', "");
Expect(1, 3839, '\p{^Sc=tibt}', "");
Expect(1, 3839, '\P{Sc=tibt}', "");
Expect(0, 3839, '\P{^Sc=tibt}', "");
Expect(1, 3911, '\p{Sc=	Tibt}', "");
Expect(0, 3911, '\p{^Sc=	Tibt}', "");
Expect(0, 3911, '\P{Sc=	Tibt}', "");
Expect(1, 3911, '\P{^Sc=	Tibt}', "");
Expect(0, 3839, '\p{Sc=	Tibt}', "");
Expect(1, 3839, '\p{^Sc=	Tibt}', "");
Expect(1, 3839, '\P{Sc=	Tibt}', "");
Expect(0, 3839, '\P{^Sc=	Tibt}', "");
Error('\p{Is_Script=/a/Tibetan}');
Error('\P{Is_Script=/a/Tibetan}');
Expect(1, 3911, '\p{Is_Script=tibetan}', "");
Expect(0, 3911, '\p{^Is_Script=tibetan}', "");
Expect(0, 3911, '\P{Is_Script=tibetan}', "");
Expect(1, 3911, '\P{^Is_Script=tibetan}', "");
Expect(0, 3839, '\p{Is_Script=tibetan}', "");
Expect(1, 3839, '\p{^Is_Script=tibetan}', "");
Expect(1, 3839, '\P{Is_Script=tibetan}', "");
Expect(0, 3839, '\P{^Is_Script=tibetan}', "");
Expect(1, 3911, '\p{Is_Script= _Tibetan}', "");
Expect(0, 3911, '\p{^Is_Script= _Tibetan}', "");
Expect(0, 3911, '\P{Is_Script= _Tibetan}', "");
Expect(1, 3911, '\P{^Is_Script= _Tibetan}', "");
Expect(0, 3839, '\p{Is_Script= _Tibetan}', "");
Expect(1, 3839, '\p{^Is_Script= _Tibetan}', "");
Expect(1, 3839, '\P{Is_Script= _Tibetan}', "");
Expect(0, 3839, '\P{^Is_Script= _Tibetan}', "");
Error('\p{Is_Sc=/a/	_TIBT}');
Error('\P{Is_Sc=/a/	_TIBT}');
Expect(1, 3911, '\p{Is_Sc=tibt}', "");
Expect(0, 3911, '\p{^Is_Sc=tibt}', "");
Expect(0, 3911, '\P{Is_Sc=tibt}', "");
Expect(1, 3911, '\P{^Is_Sc=tibt}', "");
Expect(0, 3839, '\p{Is_Sc=tibt}', "");
Expect(1, 3839, '\p{^Is_Sc=tibt}', "");
Expect(1, 3839, '\P{Is_Sc=tibt}', "");
Expect(0, 3839, '\P{^Is_Sc=tibt}', "");
Expect(1, 3911, '\p{Is_Sc:   -	Tibt}', "");
Expect(0, 3911, '\p{^Is_Sc:   -	Tibt}', "");
Expect(0, 3911, '\P{Is_Sc:   -	Tibt}', "");
Expect(1, 3911, '\P{^Is_Sc:   -	Tibt}', "");
Expect(0, 3839, '\p{Is_Sc:   -	Tibt}', "");
Expect(1, 3839, '\p{^Is_Sc:   -	Tibt}', "");
Expect(1, 3839, '\P{Is_Sc:   -	Tibt}', "");
Expect(0, 3839, '\P{^Is_Sc:   -	Tibt}', "");
Error('\p{Script= Ogham/a/}');
Error('\P{Script= Ogham/a/}');
Expect(1, 5788, '\p{Script=ogham}', "");
Expect(0, 5788, '\p{^Script=ogham}', "");
Expect(0, 5788, '\P{Script=ogham}', "");
Expect(1, 5788, '\P{^Script=ogham}', "");
Expect(0, 5759, '\p{Script=ogham}', "");
Expect(1, 5759, '\p{^Script=ogham}', "");
Expect(1, 5759, '\P{Script=ogham}', "");
Expect(0, 5759, '\P{^Script=ogham}', "");
Expect(1, 5788, '\p{Script=	OGHAM}', "");
Expect(0, 5788, '\p{^Script=	OGHAM}', "");
Expect(0, 5788, '\P{Script=	OGHAM}', "");
Expect(1, 5788, '\P{^Script=	OGHAM}', "");
Expect(0, 5759, '\p{Script=	OGHAM}', "");
Expect(1, 5759, '\p{^Script=	OGHAM}', "");
Expect(1, 5759, '\P{Script=	OGHAM}', "");
Expect(0, 5759, '\P{^Script=	OGHAM}', "");
Error('\p{Sc=--OGAM:=}');
Error('\P{Sc=--OGAM:=}');
Expect(1, 5788, '\p{Sc=ogam}', "");
Expect(0, 5788, '\p{^Sc=ogam}', "");
Expect(0, 5788, '\P{Sc=ogam}', "");
Expect(1, 5788, '\P{^Sc=ogam}', "");
Expect(0, 5759, '\p{Sc=ogam}', "");
Expect(1, 5759, '\p{^Sc=ogam}', "");
Expect(1, 5759, '\P{Sc=ogam}', "");
Expect(0, 5759, '\P{^Sc=ogam}', "");
Expect(1, 5788, '\p{Sc=_Ogam}', "");
Expect(0, 5788, '\p{^Sc=_Ogam}', "");
Expect(0, 5788, '\P{Sc=_Ogam}', "");
Expect(1, 5788, '\P{^Sc=_Ogam}', "");
Expect(0, 5759, '\p{Sc=_Ogam}', "");
Expect(1, 5759, '\p{^Sc=_Ogam}', "");
Expect(1, 5759, '\P{Sc=_Ogam}', "");
Expect(0, 5759, '\P{^Sc=_Ogam}', "");
Error('\p{Is_Script:	:= OGHAM}');
Error('\P{Is_Script:	:= OGHAM}');
Expect(1, 5788, '\p{Is_Script=ogham}', "");
Expect(0, 5788, '\p{^Is_Script=ogham}', "");
Expect(0, 5788, '\P{Is_Script=ogham}', "");
Expect(1, 5788, '\P{^Is_Script=ogham}', "");
Expect(0, 5759, '\p{Is_Script=ogham}', "");
Expect(1, 5759, '\p{^Is_Script=ogham}', "");
Expect(1, 5759, '\P{Is_Script=ogham}', "");
Expect(0, 5759, '\P{^Is_Script=ogham}', "");
Expect(1, 5788, '\p{Is_Script=_-Ogham}', "");
Expect(0, 5788, '\p{^Is_Script=_-Ogham}', "");
Expect(0, 5788, '\P{Is_Script=_-Ogham}', "");
Expect(1, 5788, '\P{^Is_Script=_-Ogham}', "");
Expect(0, 5759, '\p{Is_Script=_-Ogham}', "");
Expect(1, 5759, '\p{^Is_Script=_-Ogham}', "");
Expect(1, 5759, '\P{Is_Script=_-Ogham}', "");
Expect(0, 5759, '\P{^Is_Script=_-Ogham}', "");
Error('\p{Is_Sc=/a/	_Ogam}');
Error('\P{Is_Sc=/a/	_Ogam}');
Expect(1, 5788, '\p{Is_Sc=ogam}', "");
Expect(0, 5788, '\p{^Is_Sc=ogam}', "");
Expect(0, 5788, '\P{Is_Sc=ogam}', "");
Expect(1, 5788, '\P{^Is_Sc=ogam}', "");
Expect(0, 5759, '\p{Is_Sc=ogam}', "");
Expect(1, 5759, '\p{^Is_Sc=ogam}', "");
Expect(1, 5759, '\P{Is_Sc=ogam}', "");
Expect(0, 5759, '\P{^Is_Sc=ogam}', "");
Expect(1, 5788, '\p{Is_Sc=_-Ogam}', "");
Expect(0, 5788, '\p{^Is_Sc=_-Ogam}', "");
Expect(0, 5788, '\P{Is_Sc=_-Ogam}', "");
Expect(1, 5788, '\P{^Is_Sc=_-Ogam}', "");
Expect(0, 5759, '\p{Is_Sc=_-Ogam}', "");
Expect(1, 5759, '\p{^Is_Sc=_-Ogam}', "");
Expect(1, 5759, '\P{Is_Sc=_-Ogam}', "");
Expect(0, 5759, '\P{^Is_Sc=_-Ogam}', "");
Error('\p{Script= _TAI	Viet:=}');
Error('\P{Script= _TAI	Viet:=}');
Expect(1, 43714, '\p{Script=taiviet}', "");
Expect(0, 43714, '\p{^Script=taiviet}', "");
Expect(0, 43714, '\P{Script=taiviet}', "");
Expect(1, 43714, '\P{^Script=taiviet}', "");
Expect(0, 43647, '\p{Script=taiviet}', "");
Expect(1, 43647, '\p{^Script=taiviet}', "");
Expect(1, 43647, '\P{Script=taiviet}', "");
Expect(0, 43647, '\P{^Script=taiviet}', "");
Expect(1, 43714, '\p{Script=-	Tai Viet}', "");
Expect(0, 43714, '\p{^Script=-	Tai Viet}', "");
Expect(0, 43714, '\P{Script=-	Tai Viet}', "");
Expect(1, 43714, '\P{^Script=-	Tai Viet}', "");
Expect(0, 43647, '\p{Script=-	Tai Viet}', "");
Expect(1, 43647, '\p{^Script=-	Tai Viet}', "");
Expect(1, 43647, '\P{Script=-	Tai Viet}', "");
Expect(0, 43647, '\P{^Script=-	Tai Viet}', "");
Error('\p{Sc=  Tavt/a/}');
Error('\P{Sc=  Tavt/a/}');
Expect(1, 43714, '\p{Sc=tavt}', "");
Expect(0, 43714, '\p{^Sc=tavt}', "");
Expect(0, 43714, '\P{Sc=tavt}', "");
Expect(1, 43714, '\P{^Sc=tavt}', "");
Expect(0, 43647, '\p{Sc=tavt}', "");
Expect(1, 43647, '\p{^Sc=tavt}', "");
Expect(1, 43647, '\P{Sc=tavt}', "");
Expect(0, 43647, '\P{^Sc=tavt}', "");
Expect(1, 43714, '\p{Sc=--Tavt}', "");
Expect(0, 43714, '\p{^Sc=--Tavt}', "");
Expect(0, 43714, '\P{Sc=--Tavt}', "");
Expect(1, 43714, '\P{^Sc=--Tavt}', "");
Expect(0, 43647, '\p{Sc=--Tavt}', "");
Expect(1, 43647, '\p{^Sc=--Tavt}', "");
Expect(1, 43647, '\P{Sc=--Tavt}', "");
Expect(0, 43647, '\P{^Sc=--Tavt}', "");
Error('\p{Is_Script=	/a/TAI VIET}');
Error('\P{Is_Script=	/a/TAI VIET}');
Expect(1, 43714, '\p{Is_Script=taiviet}', "");
Expect(0, 43714, '\p{^Is_Script=taiviet}', "");
Expect(0, 43714, '\P{Is_Script=taiviet}', "");
Expect(1, 43714, '\P{^Is_Script=taiviet}', "");
Expect(0, 43647, '\p{Is_Script=taiviet}', "");
Expect(1, 43647, '\p{^Is_Script=taiviet}', "");
Expect(1, 43647, '\P{Is_Script=taiviet}', "");
Expect(0, 43647, '\P{^Is_Script=taiviet}', "");
Expect(1, 43714, '\p{Is_Script=	-TAI VIET}', "");
Expect(0, 43714, '\p{^Is_Script=	-TAI VIET}', "");
Expect(0, 43714, '\P{Is_Script=	-TAI VIET}', "");
Expect(1, 43714, '\P{^Is_Script=	-TAI VIET}', "");
Expect(0, 43647, '\p{Is_Script=	-TAI VIET}', "");
Expect(1, 43647, '\p{^Is_Script=	-TAI VIET}', "");
Expect(1, 43647, '\P{Is_Script=	-TAI VIET}', "");
Expect(0, 43647, '\P{^Is_Script=	-TAI VIET}', "");
Error('\p{Is_Sc=/a/-TAVT}');
Error('\P{Is_Sc=/a/-TAVT}');
Expect(1, 43714, '\p{Is_Sc=tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=tavt}', "");
Expect(0, 43714, '\P{Is_Sc=tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=tavt}', "");
Expect(0, 43647, '\p{Is_Sc=tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=tavt}', "");
Expect(1, 43647, '\P{Is_Sc=tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=tavt}', "");
Expect(1, 43714, '\p{Is_Sc=__tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=__tavt}', "");
Expect(0, 43714, '\P{Is_Sc=__tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=__tavt}', "");
Expect(0, 43647, '\p{Is_Sc=__tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=__tavt}', "");
Expect(1, 43647, '\P{Is_Sc=__tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=__tavt}', "");
Error('\p{Script=:=_	MALAYALAM}');
Error('\P{Script=:=_	MALAYALAM}');
Expect(1, 3331, '\p{Script: malayalam}', "");
Expect(0, 3331, '\p{^Script: malayalam}', "");
Expect(0, 3331, '\P{Script: malayalam}', "");
Expect(1, 3331, '\P{^Script: malayalam}', "");
Expect(0, 3329, '\p{Script: malayalam}', "");
Expect(1, 3329, '\p{^Script: malayalam}', "");
Expect(1, 3329, '\P{Script: malayalam}', "");
Expect(0, 3329, '\P{^Script: malayalam}', "");
Expect(1, 3331, '\p{Script=_ Malayalam}', "");
Expect(0, 3331, '\p{^Script=_ Malayalam}', "");
Expect(0, 3331, '\P{Script=_ Malayalam}', "");
Expect(1, 3331, '\P{^Script=_ Malayalam}', "");
Expect(0, 3329, '\p{Script=_ Malayalam}', "");
Expect(1, 3329, '\p{^Script=_ Malayalam}', "");
Expect(1, 3329, '\P{Script=_ Malayalam}', "");
Expect(0, 3329, '\P{^Script=_ Malayalam}', "");
Error('\p{Sc=-/a/Mlym}');
Error('\P{Sc=-/a/Mlym}');
Expect(1, 3331, '\p{Sc=mlym}', "");
Expect(0, 3331, '\p{^Sc=mlym}', "");
Expect(0, 3331, '\P{Sc=mlym}', "");
Expect(1, 3331, '\P{^Sc=mlym}', "");
Expect(0, 3329, '\p{Sc=mlym}', "");
Expect(1, 3329, '\p{^Sc=mlym}', "");
Expect(1, 3329, '\P{Sc=mlym}', "");
Expect(0, 3329, '\P{^Sc=mlym}', "");
Expect(1, 3331, '\p{Sc=- Mlym}', "");
Expect(0, 3331, '\p{^Sc=- Mlym}', "");
Expect(0, 3331, '\P{Sc=- Mlym}', "");
Expect(1, 3331, '\P{^Sc=- Mlym}', "");
Expect(0, 3329, '\p{Sc=- Mlym}', "");
Expect(1, 3329, '\p{^Sc=- Mlym}', "");
Expect(1, 3329, '\P{Sc=- Mlym}', "");
Expect(0, 3329, '\P{^Sc=- Mlym}', "");
Error('\p{Is_Script=	malayalam:=}');
Error('\P{Is_Script=	malayalam:=}');
Expect(1, 3331, '\p{Is_Script=malayalam}', "");
Expect(0, 3331, '\p{^Is_Script=malayalam}', "");
Expect(0, 3331, '\P{Is_Script=malayalam}', "");
Expect(1, 3331, '\P{^Is_Script=malayalam}', "");
Expect(0, 3329, '\p{Is_Script=malayalam}', "");
Expect(1, 3329, '\p{^Is_Script=malayalam}', "");
Expect(1, 3329, '\P{Is_Script=malayalam}', "");
Expect(0, 3329, '\P{^Is_Script=malayalam}', "");
Expect(1, 3331, '\p{Is_Script=-_malayalam}', "");
Expect(0, 3331, '\p{^Is_Script=-_malayalam}', "");
Expect(0, 3331, '\P{Is_Script=-_malayalam}', "");
Expect(1, 3331, '\P{^Is_Script=-_malayalam}', "");
Expect(0, 3329, '\p{Is_Script=-_malayalam}', "");
Expect(1, 3329, '\p{^Is_Script=-_malayalam}', "");
Expect(1, 3329, '\P{Is_Script=-_malayalam}', "");
Expect(0, 3329, '\P{^Is_Script=-_malayalam}', "");
Error('\p{Is_Sc=:=_Mlym}');
Error('\P{Is_Sc=:=_Mlym}');
Expect(1, 3331, '\p{Is_Sc=mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=mlym}', "");
Expect(0, 3331, '\P{Is_Sc=mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=mlym}', "");
Expect(0, 3329, '\p{Is_Sc=mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=mlym}', "");
Expect(1, 3329, '\P{Is_Sc=mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=mlym}', "");
Expect(1, 3331, '\p{Is_Sc=-Mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=-Mlym}', "");
Expect(0, 3331, '\P{Is_Sc=-Mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=-Mlym}', "");
Expect(0, 3329, '\p{Is_Sc=-Mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=-Mlym}', "");
Expect(1, 3329, '\P{Is_Sc=-Mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=-Mlym}', "");
Error('\p{Script=_:=OldPERSIAN}');
Error('\P{Script=_:=OldPERSIAN}');
Expect(1, 66499, '\p{Script=oldpersian}', "");
Expect(0, 66499, '\p{^Script=oldpersian}', "");
Expect(0, 66499, '\P{Script=oldpersian}', "");
Expect(1, 66499, '\P{^Script=oldpersian}', "");
Expect(0, 66463, '\p{Script=oldpersian}', "");
Expect(1, 66463, '\p{^Script=oldpersian}', "");
Expect(1, 66463, '\P{Script=oldpersian}', "");
Expect(0, 66463, '\P{^Script=oldpersian}', "");
Expect(1, 66499, '\p{Script=  OldPERSIAN}', "");
Expect(0, 66499, '\p{^Script=  OldPERSIAN}', "");
Expect(0, 66499, '\P{Script=  OldPERSIAN}', "");
Expect(1, 66499, '\P{^Script=  OldPERSIAN}', "");
Expect(0, 66463, '\p{Script=  OldPERSIAN}', "");
Expect(1, 66463, '\p{^Script=  OldPERSIAN}', "");
Expect(1, 66463, '\P{Script=  OldPERSIAN}', "");
Expect(0, 66463, '\P{^Script=  OldPERSIAN}', "");
Error('\p{Sc:   _	Xpeo:=}');
Error('\P{Sc:   _	Xpeo:=}');
Expect(1, 66499, '\p{Sc=xpeo}', "");
Expect(0, 66499, '\p{^Sc=xpeo}', "");
Expect(0, 66499, '\P{Sc=xpeo}', "");
Expect(1, 66499, '\P{^Sc=xpeo}', "");
Expect(0, 66463, '\p{Sc=xpeo}', "");
Expect(1, 66463, '\p{^Sc=xpeo}', "");
Expect(1, 66463, '\P{Sc=xpeo}', "");
Expect(0, 66463, '\P{^Sc=xpeo}', "");
Expect(1, 66499, '\p{Sc=-	Xpeo}', "");
Expect(0, 66499, '\p{^Sc=-	Xpeo}', "");
Expect(0, 66499, '\P{Sc=-	Xpeo}', "");
Expect(1, 66499, '\P{^Sc=-	Xpeo}', "");
Expect(0, 66463, '\p{Sc=-	Xpeo}', "");
Expect(1, 66463, '\p{^Sc=-	Xpeo}', "");
Expect(1, 66463, '\P{Sc=-	Xpeo}', "");
Expect(0, 66463, '\P{^Sc=-	Xpeo}', "");
Error('\p{Is_Script= 	old_Persian:=}');
Error('\P{Is_Script= 	old_Persian:=}');
Expect(1, 66499, '\p{Is_Script: oldpersian}', "");
Expect(0, 66499, '\p{^Is_Script: oldpersian}', "");
Expect(0, 66499, '\P{Is_Script: oldpersian}', "");
Expect(1, 66499, '\P{^Is_Script: oldpersian}', "");
Expect(0, 66463, '\p{Is_Script: oldpersian}', "");
Expect(1, 66463, '\p{^Is_Script: oldpersian}', "");
Expect(1, 66463, '\P{Is_Script: oldpersian}', "");
Expect(0, 66463, '\P{^Is_Script: oldpersian}', "");
Expect(1, 66499, '\p{Is_Script=_Old_Persian}', "");
Expect(0, 66499, '\p{^Is_Script=_Old_Persian}', "");
Expect(0, 66499, '\P{Is_Script=_Old_Persian}', "");
Expect(1, 66499, '\P{^Is_Script=_Old_Persian}', "");
Expect(0, 66463, '\p{Is_Script=_Old_Persian}', "");
Expect(1, 66463, '\p{^Is_Script=_Old_Persian}', "");
Expect(1, 66463, '\P{Is_Script=_Old_Persian}', "");
Expect(0, 66463, '\P{^Is_Script=_Old_Persian}', "");
Error('\p{Is_Sc= :=xpeo}');
Error('\P{Is_Sc= :=xpeo}');
Expect(1, 66499, '\p{Is_Sc=xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc=xpeo}', "");
Expect(0, 66499, '\P{Is_Sc=xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc=xpeo}', "");
Expect(0, 66463, '\p{Is_Sc=xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc=xpeo}', "");
Expect(1, 66463, '\P{Is_Sc=xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc=xpeo}', "");
Expect(1, 66499, '\p{Is_Sc= _xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc= _xpeo}', "");
Expect(0, 66499, '\P{Is_Sc= _xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc= _xpeo}', "");
Expect(0, 66463, '\p{Is_Sc= _xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc= _xpeo}', "");
Expect(1, 66463, '\P{Is_Sc= _xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc= _xpeo}', "");
Error('\p{Script=	-myanmar:=}');
Error('\P{Script=	-myanmar:=}');
Expect(1, 4255, '\p{Script=myanmar}', "");
Expect(0, 4255, '\p{^Script=myanmar}', "");
Expect(0, 4255, '\P{Script=myanmar}', "");
Expect(1, 4255, '\P{^Script=myanmar}', "");
Expect(0, 4095, '\p{Script=myanmar}', "");
Expect(1, 4095, '\p{^Script=myanmar}', "");
Expect(1, 4095, '\P{Script=myanmar}', "");
Expect(0, 4095, '\P{^Script=myanmar}', "");
Expect(1, 4255, '\p{Script=_ MYANMAR}', "");
Expect(0, 4255, '\p{^Script=_ MYANMAR}', "");
Expect(0, 4255, '\P{Script=_ MYANMAR}', "");
Expect(1, 4255, '\P{^Script=_ MYANMAR}', "");
Expect(0, 4095, '\p{Script=_ MYANMAR}', "");
Expect(1, 4095, '\p{^Script=_ MYANMAR}', "");
Expect(1, 4095, '\P{Script=_ MYANMAR}', "");
Expect(0, 4095, '\P{^Script=_ MYANMAR}', "");
Error('\p{Sc=/a/_MYMR}');
Error('\P{Sc=/a/_MYMR}');
Expect(1, 4255, '\p{Sc=mymr}', "");
Expect(0, 4255, '\p{^Sc=mymr}', "");
Expect(0, 4255, '\P{Sc=mymr}', "");
Expect(1, 4255, '\P{^Sc=mymr}', "");
Expect(0, 4095, '\p{Sc=mymr}', "");
Expect(1, 4095, '\p{^Sc=mymr}', "");
Expect(1, 4095, '\P{Sc=mymr}', "");
Expect(0, 4095, '\P{^Sc=mymr}', "");
Expect(1, 4255, '\p{Sc=-_mymr}', "");
Expect(0, 4255, '\p{^Sc=-_mymr}', "");
Expect(0, 4255, '\P{Sc=-_mymr}', "");
Expect(1, 4255, '\P{^Sc=-_mymr}', "");
Expect(0, 4095, '\p{Sc=-_mymr}', "");
Expect(1, 4095, '\p{^Sc=-_mymr}', "");
Expect(1, 4095, '\P{Sc=-_mymr}', "");
Expect(0, 4095, '\P{^Sc=-_mymr}', "");
Error('\p{Is_Script=/a/__Myanmar}');
Error('\P{Is_Script=/a/__Myanmar}');
Expect(1, 4255, '\p{Is_Script: myanmar}', "");
Expect(0, 4255, '\p{^Is_Script: myanmar}', "");
Expect(0, 4255, '\P{Is_Script: myanmar}', "");
Expect(1, 4255, '\P{^Is_Script: myanmar}', "");
Expect(0, 4095, '\p{Is_Script: myanmar}', "");
Expect(1, 4095, '\p{^Is_Script: myanmar}', "");
Expect(1, 4095, '\P{Is_Script: myanmar}', "");
Expect(0, 4095, '\P{^Is_Script: myanmar}', "");
Expect(1, 4255, '\p{Is_Script: -Myanmar}', "");
Expect(0, 4255, '\p{^Is_Script: -Myanmar}', "");
Expect(0, 4255, '\P{Is_Script: -Myanmar}', "");
Expect(1, 4255, '\P{^Is_Script: -Myanmar}', "");
Expect(0, 4095, '\p{Is_Script: -Myanmar}', "");
Expect(1, 4095, '\p{^Is_Script: -Myanmar}', "");
Expect(1, 4095, '\P{Is_Script: -Myanmar}', "");
Expect(0, 4095, '\P{^Is_Script: -Myanmar}', "");
Error('\p{Is_Sc=/a/	mymr}');
Error('\P{Is_Sc=/a/	mymr}');
Expect(1, 4255, '\p{Is_Sc=mymr}', "");
Expect(0, 4255, '\p{^Is_Sc=mymr}', "");
Expect(0, 4255, '\P{Is_Sc=mymr}', "");
Expect(1, 4255, '\P{^Is_Sc=mymr}', "");
Expect(0, 4095, '\p{Is_Sc=mymr}', "");
Expect(1, 4095, '\p{^Is_Sc=mymr}', "");
Expect(1, 4095, '\P{Is_Sc=mymr}', "");
Expect(0, 4095, '\P{^Is_Sc=mymr}', "");
Expect(1, 4255, '\p{Is_Sc= 	Mymr}', "");
Expect(0, 4255, '\p{^Is_Sc= 	Mymr}', "");
Expect(0, 4255, '\P{Is_Sc= 	Mymr}', "");
Expect(1, 4255, '\P{^Is_Sc= 	Mymr}', "");
Expect(0, 4095, '\p{Is_Sc= 	Mymr}', "");
Expect(1, 4095, '\p{^Is_Sc= 	Mymr}', "");
Expect(1, 4095, '\P{Is_Sc= 	Mymr}', "");
Expect(0, 4095, '\P{^Is_Sc= 	Mymr}', "");
Error('\p{Script=/a/OldTurkic}');
Error('\P{Script=/a/OldTurkic}');
Expect(1, 68680, '\p{Script=oldturkic}', "");
Expect(0, 68680, '\p{^Script=oldturkic}', "");
Expect(0, 68680, '\P{Script=oldturkic}', "");
Expect(1, 68680, '\P{^Script=oldturkic}', "");
Expect(0, 68607, '\p{Script=oldturkic}', "");
Expect(1, 68607, '\p{^Script=oldturkic}', "");
Expect(1, 68607, '\P{Script=oldturkic}', "");
Expect(0, 68607, '\P{^Script=oldturkic}', "");
Expect(1, 68680, '\p{Script=_-oldTURKIC}', "");
Expect(0, 68680, '\p{^Script=_-oldTURKIC}', "");
Expect(0, 68680, '\P{Script=_-oldTURKIC}', "");
Expect(1, 68680, '\P{^Script=_-oldTURKIC}', "");
Expect(0, 68607, '\p{Script=_-oldTURKIC}', "");
Expect(1, 68607, '\p{^Script=_-oldTURKIC}', "");
Expect(1, 68607, '\P{Script=_-oldTURKIC}', "");
Expect(0, 68607, '\P{^Script=_-oldTURKIC}', "");
Error('\p{Sc= :=ORKH}');
Error('\P{Sc= :=ORKH}');
Expect(1, 68680, '\p{Sc=orkh}', "");
Expect(0, 68680, '\p{^Sc=orkh}', "");
Expect(0, 68680, '\P{Sc=orkh}', "");
Expect(1, 68680, '\P{^Sc=orkh}', "");
Expect(0, 68607, '\p{Sc=orkh}', "");
Expect(1, 68607, '\p{^Sc=orkh}', "");
Expect(1, 68607, '\P{Sc=orkh}', "");
Expect(0, 68607, '\P{^Sc=orkh}', "");
Expect(1, 68680, '\p{Sc=__orkh}', "");
Expect(0, 68680, '\p{^Sc=__orkh}', "");
Expect(0, 68680, '\P{Sc=__orkh}', "");
Expect(1, 68680, '\P{^Sc=__orkh}', "");
Expect(0, 68607, '\p{Sc=__orkh}', "");
Expect(1, 68607, '\p{^Sc=__orkh}', "");
Expect(1, 68607, '\P{Sc=__orkh}', "");
Expect(0, 68607, '\P{^Sc=__orkh}', "");
Error('\p{Is_Script=_:=Old Turkic}');
Error('\P{Is_Script=_:=Old Turkic}');
Expect(1, 68680, '\p{Is_Script=oldturkic}', "");
Expect(0, 68680, '\p{^Is_Script=oldturkic}', "");
Expect(0, 68680, '\P{Is_Script=oldturkic}', "");
Expect(1, 68680, '\P{^Is_Script=oldturkic}', "");
Expect(0, 68607, '\p{Is_Script=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Script=oldturkic}', "");
Expect(1, 68607, '\P{Is_Script=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Script=oldturkic}', "");
Expect(1, 68680, '\p{Is_Script= OldTurkic}', "");
Expect(0, 68680, '\p{^Is_Script= OldTurkic}', "");
Expect(0, 68680, '\P{Is_Script= OldTurkic}', "");
Expect(1, 68680, '\P{^Is_Script= OldTurkic}', "");
Expect(0, 68607, '\p{Is_Script= OldTurkic}', "");
Expect(1, 68607, '\p{^Is_Script= OldTurkic}', "");
Expect(1, 68607, '\P{Is_Script= OldTurkic}', "");
Expect(0, 68607, '\P{^Is_Script= OldTurkic}', "");
Error('\p{Is_Sc=:=_Orkh}');
Error('\P{Is_Sc=:=_Orkh}');
Expect(1, 68680, '\p{Is_Sc=orkh}', "");
Expect(0, 68680, '\p{^Is_Sc=orkh}', "");
Expect(0, 68680, '\P{Is_Sc=orkh}', "");
Expect(1, 68680, '\P{^Is_Sc=orkh}', "");
Expect(0, 68607, '\p{Is_Sc=orkh}', "");
Expect(1, 68607, '\p{^Is_Sc=orkh}', "");
Expect(1, 68607, '\P{Is_Sc=orkh}', "");
Expect(0, 68607, '\P{^Is_Sc=orkh}', "");
Expect(1, 68680, '\p{Is_Sc= Orkh}', "");
Expect(0, 68680, '\p{^Is_Sc= Orkh}', "");
Expect(0, 68680, '\P{Is_Sc= Orkh}', "");
Expect(1, 68680, '\P{^Is_Sc= Orkh}', "");
Expect(0, 68607, '\p{Is_Sc= Orkh}', "");
Expect(1, 68607, '\p{^Is_Sc= Orkh}', "");
Expect(1, 68607, '\P{Is_Sc= Orkh}', "");
Expect(0, 68607, '\P{^Is_Sc= Orkh}', "");
Error('\p{Script:	_ osmanya:=}');
Error('\P{Script:	_ osmanya:=}');
Expect(1, 66717, '\p{Script=osmanya}', "");
Expect(0, 66717, '\p{^Script=osmanya}', "");
Expect(0, 66717, '\P{Script=osmanya}', "");
Expect(1, 66717, '\P{^Script=osmanya}', "");
Expect(0, 66687, '\p{Script=osmanya}', "");
Expect(1, 66687, '\p{^Script=osmanya}', "");
Expect(1, 66687, '\P{Script=osmanya}', "");
Expect(0, 66687, '\P{^Script=osmanya}', "");
Expect(1, 66717, '\p{Script=-_Osmanya}', "");
Expect(0, 66717, '\p{^Script=-_Osmanya}', "");
Expect(0, 66717, '\P{Script=-_Osmanya}', "");
Expect(1, 66717, '\P{^Script=-_Osmanya}', "");
Expect(0, 66687, '\p{Script=-_Osmanya}', "");
Expect(1, 66687, '\p{^Script=-_Osmanya}', "");
Expect(1, 66687, '\P{Script=-_Osmanya}', "");
Expect(0, 66687, '\P{^Script=-_Osmanya}', "");
Error('\p{Sc= :=Osma}');
Error('\P{Sc= :=Osma}');
Expect(1, 66717, '\p{Sc=osma}', "");
Expect(0, 66717, '\p{^Sc=osma}', "");
Expect(0, 66717, '\P{Sc=osma}', "");
Expect(1, 66717, '\P{^Sc=osma}', "");
Expect(0, 66687, '\p{Sc=osma}', "");
Expect(1, 66687, '\p{^Sc=osma}', "");
Expect(1, 66687, '\P{Sc=osma}', "");
Expect(0, 66687, '\P{^Sc=osma}', "");
Expect(1, 66717, '\p{Sc=-Osma}', "");
Expect(0, 66717, '\p{^Sc=-Osma}', "");
Expect(0, 66717, '\P{Sc=-Osma}', "");
Expect(1, 66717, '\P{^Sc=-Osma}', "");
Expect(0, 66687, '\p{Sc=-Osma}', "");
Expect(1, 66687, '\p{^Sc=-Osma}', "");
Expect(1, 66687, '\P{Sc=-Osma}', "");
Expect(0, 66687, '\P{^Sc=-Osma}', "");
Error('\p{Is_Script=_/a/Osmanya}');
Error('\P{Is_Script=_/a/Osmanya}');
Expect(1, 66717, '\p{Is_Script=osmanya}', "");
Expect(0, 66717, '\p{^Is_Script=osmanya}', "");
Expect(0, 66717, '\P{Is_Script=osmanya}', "");
Expect(1, 66717, '\P{^Is_Script=osmanya}', "");
Expect(0, 66687, '\p{Is_Script=osmanya}', "");
Expect(1, 66687, '\p{^Is_Script=osmanya}', "");
Expect(1, 66687, '\P{Is_Script=osmanya}', "");
Expect(0, 66687, '\P{^Is_Script=osmanya}', "");
Expect(1, 66717, '\p{Is_Script=  OSMANYA}', "");
Expect(0, 66717, '\p{^Is_Script=  OSMANYA}', "");
Expect(0, 66717, '\P{Is_Script=  OSMANYA}', "");
Expect(1, 66717, '\P{^Is_Script=  OSMANYA}', "");
Expect(0, 66687, '\p{Is_Script=  OSMANYA}', "");
Expect(1, 66687, '\p{^Is_Script=  OSMANYA}', "");
Expect(1, 66687, '\P{Is_Script=  OSMANYA}', "");
Expect(0, 66687, '\P{^Is_Script=  OSMANYA}', "");
Error('\p{Is_Sc: _OSMA/a/}');
Error('\P{Is_Sc: _OSMA/a/}');
Expect(1, 66717, '\p{Is_Sc=osma}', "");
Expect(0, 66717, '\p{^Is_Sc=osma}', "");
Expect(0, 66717, '\P{Is_Sc=osma}', "");
Expect(1, 66717, '\P{^Is_Sc=osma}', "");
Expect(0, 66687, '\p{Is_Sc=osma}', "");
Expect(1, 66687, '\p{^Is_Sc=osma}', "");
Expect(1, 66687, '\P{Is_Sc=osma}', "");
Expect(0, 66687, '\P{^Is_Sc=osma}', "");
Expect(1, 66717, '\p{Is_Sc=_-Osma}', "");
Expect(0, 66717, '\p{^Is_Sc=_-Osma}', "");
Expect(0, 66717, '\P{Is_Sc=_-Osma}', "");
Expect(1, 66717, '\P{^Is_Sc=_-Osma}', "");
Expect(0, 66687, '\p{Is_Sc=_-Osma}', "");
Expect(1, 66687, '\p{^Is_Sc=_-Osma}', "");
Expect(1, 66687, '\P{Is_Sc=_-Osma}', "");
Expect(0, 66687, '\P{^Is_Sc=_-Osma}', "");
Error('\p{Script:-TAGALOG/a/}');
Error('\P{Script:-TAGALOG/a/}');
Expect(1, 5900, '\p{Script=tagalog}', "");
Expect(0, 5900, '\p{^Script=tagalog}', "");
Expect(0, 5900, '\P{Script=tagalog}', "");
Expect(1, 5900, '\P{^Script=tagalog}', "");
Expect(0, 5887, '\p{Script=tagalog}', "");
Expect(1, 5887, '\p{^Script=tagalog}', "");
Expect(1, 5887, '\P{Script=tagalog}', "");
Expect(0, 5887, '\P{^Script=tagalog}', "");
Expect(1, 5900, '\p{Script=	 TAGALOG}', "");
Expect(0, 5900, '\p{^Script=	 TAGALOG}', "");
Expect(0, 5900, '\P{Script=	 TAGALOG}', "");
Expect(1, 5900, '\P{^Script=	 TAGALOG}', "");
Expect(0, 5887, '\p{Script=	 TAGALOG}', "");
Expect(1, 5887, '\p{^Script=	 TAGALOG}', "");
Expect(1, 5887, '\P{Script=	 TAGALOG}', "");
Expect(0, 5887, '\P{^Script=	 TAGALOG}', "");
Error('\p{Sc= 	TGLG:=}');
Error('\P{Sc= 	TGLG:=}');
Expect(1, 5900, '\p{Sc=tglg}', "");
Expect(0, 5900, '\p{^Sc=tglg}', "");
Expect(0, 5900, '\P{Sc=tglg}', "");
Expect(1, 5900, '\P{^Sc=tglg}', "");
Expect(0, 5887, '\p{Sc=tglg}', "");
Expect(1, 5887, '\p{^Sc=tglg}', "");
Expect(1, 5887, '\P{Sc=tglg}', "");
Expect(0, 5887, '\P{^Sc=tglg}', "");
Expect(1, 5900, '\p{Sc=	_TGLG}', "");
Expect(0, 5900, '\p{^Sc=	_TGLG}', "");
Expect(0, 5900, '\P{Sc=	_TGLG}', "");
Expect(1, 5900, '\P{^Sc=	_TGLG}', "");
Expect(0, 5887, '\p{Sc=	_TGLG}', "");
Expect(1, 5887, '\p{^Sc=	_TGLG}', "");
Expect(1, 5887, '\P{Sc=	_TGLG}', "");
Expect(0, 5887, '\P{^Sc=	_TGLG}', "");
Error('\p{Is_Script=_Tagalog:=}');
Error('\P{Is_Script=_Tagalog:=}');
Expect(1, 5900, '\p{Is_Script=tagalog}', "");
Expect(0, 5900, '\p{^Is_Script=tagalog}', "");
Expect(0, 5900, '\P{Is_Script=tagalog}', "");
Expect(1, 5900, '\P{^Is_Script=tagalog}', "");
Expect(0, 5887, '\p{Is_Script=tagalog}', "");
Expect(1, 5887, '\p{^Is_Script=tagalog}', "");
Expect(1, 5887, '\P{Is_Script=tagalog}', "");
Expect(0, 5887, '\P{^Is_Script=tagalog}', "");
Expect(1, 5900, '\p{Is_Script=_	Tagalog}', "");
Expect(0, 5900, '\p{^Is_Script=_	Tagalog}', "");
Expect(0, 5900, '\P{Is_Script=_	Tagalog}', "");
Expect(1, 5900, '\P{^Is_Script=_	Tagalog}', "");
Expect(0, 5887, '\p{Is_Script=_	Tagalog}', "");
Expect(1, 5887, '\p{^Is_Script=_	Tagalog}', "");
Expect(1, 5887, '\P{Is_Script=_	Tagalog}', "");
Expect(0, 5887, '\P{^Is_Script=_	Tagalog}', "");
Error('\p{Is_Sc:   	:=Tglg}');
Error('\P{Is_Sc:   	:=Tglg}');
Expect(1, 5900, '\p{Is_Sc=tglg}', "");
Expect(0, 5900, '\p{^Is_Sc=tglg}', "");
Expect(0, 5900, '\P{Is_Sc=tglg}', "");
Expect(1, 5900, '\P{^Is_Sc=tglg}', "");
Expect(0, 5887, '\p{Is_Sc=tglg}', "");
Expect(1, 5887, '\p{^Is_Sc=tglg}', "");
Expect(1, 5887, '\P{Is_Sc=tglg}', "");
Expect(0, 5887, '\P{^Is_Sc=tglg}', "");
Expect(1, 5900, '\p{Is_Sc=-TGLG}', "");
Expect(0, 5900, '\p{^Is_Sc=-TGLG}', "");
Expect(0, 5900, '\P{Is_Sc=-TGLG}', "");
Expect(1, 5900, '\P{^Is_Sc=-TGLG}', "");
Expect(0, 5887, '\p{Is_Sc=-TGLG}', "");
Expect(1, 5887, '\p{^Is_Sc=-TGLG}', "");
Expect(1, 5887, '\P{Is_Sc=-TGLG}', "");
Expect(0, 5887, '\P{^Is_Sc=-TGLG}', "");
Error('\p{Script= _GUJARATI/a/}');
Error('\P{Script= _GUJARATI/a/}');
Expect(1, 2691, '\p{Script=gujarati}', "");
Expect(0, 2691, '\p{^Script=gujarati}', "");
Expect(0, 2691, '\P{Script=gujarati}', "");
Expect(1, 2691, '\P{^Script=gujarati}', "");
Expect(0, 2688, '\p{Script=gujarati}', "");
Expect(1, 2688, '\p{^Script=gujarati}', "");
Expect(1, 2688, '\P{Script=gujarati}', "");
Expect(0, 2688, '\P{^Script=gujarati}', "");
Expect(1, 2691, '\p{Script=-	Gujarati}', "");
Expect(0, 2691, '\p{^Script=-	Gujarati}', "");
Expect(0, 2691, '\P{Script=-	Gujarati}', "");
Expect(1, 2691, '\P{^Script=-	Gujarati}', "");
Expect(0, 2688, '\p{Script=-	Gujarati}', "");
Expect(1, 2688, '\p{^Script=-	Gujarati}', "");
Expect(1, 2688, '\P{Script=-	Gujarati}', "");
Expect(0, 2688, '\P{^Script=-	Gujarati}', "");
Error('\p{Sc=  GUJR/a/}');
Error('\P{Sc=  GUJR/a/}');
Expect(1, 2691, '\p{Sc=gujr}', "");
Expect(0, 2691, '\p{^Sc=gujr}', "");
Expect(0, 2691, '\P{Sc=gujr}', "");
Expect(1, 2691, '\P{^Sc=gujr}', "");
Expect(0, 2688, '\p{Sc=gujr}', "");
Expect(1, 2688, '\p{^Sc=gujr}', "");
Expect(1, 2688, '\P{Sc=gujr}', "");
Expect(0, 2688, '\P{^Sc=gujr}', "");
Expect(1, 2691, '\p{Sc=	Gujr}', "");
Expect(0, 2691, '\p{^Sc=	Gujr}', "");
Expect(0, 2691, '\P{Sc=	Gujr}', "");
Expect(1, 2691, '\P{^Sc=	Gujr}', "");
Expect(0, 2688, '\p{Sc=	Gujr}', "");
Expect(1, 2688, '\p{^Sc=	Gujr}', "");
Expect(1, 2688, '\P{Sc=	Gujr}', "");
Expect(0, 2688, '\P{^Sc=	Gujr}', "");
Error('\p{Is_Script=/a/_	GUJARATI}');
Error('\P{Is_Script=/a/_	GUJARATI}');
Expect(1, 2691, '\p{Is_Script=gujarati}', "");
Expect(0, 2691, '\p{^Is_Script=gujarati}', "");
Expect(0, 2691, '\P{Is_Script=gujarati}', "");
Expect(1, 2691, '\P{^Is_Script=gujarati}', "");
Expect(0, 2688, '\p{Is_Script=gujarati}', "");
Expect(1, 2688, '\p{^Is_Script=gujarati}', "");
Expect(1, 2688, '\P{Is_Script=gujarati}', "");
Expect(0, 2688, '\P{^Is_Script=gujarati}', "");
Expect(1, 2691, '\p{Is_Script=_GUJARATI}', "");
Expect(0, 2691, '\p{^Is_Script=_GUJARATI}', "");
Expect(0, 2691, '\P{Is_Script=_GUJARATI}', "");
Expect(1, 2691, '\P{^Is_Script=_GUJARATI}', "");
Expect(0, 2688, '\p{Is_Script=_GUJARATI}', "");
Expect(1, 2688, '\p{^Is_Script=_GUJARATI}', "");
Expect(1, 2688, '\P{Is_Script=_GUJARATI}', "");
Expect(0, 2688, '\P{^Is_Script=_GUJARATI}', "");
Error('\p{Is_Sc: :=-_gujr}');
Error('\P{Is_Sc: :=-_gujr}');
Expect(1, 2691, '\p{Is_Sc=gujr}', "");
Expect(0, 2691, '\p{^Is_Sc=gujr}', "");
Expect(0, 2691, '\P{Is_Sc=gujr}', "");
Expect(1, 2691, '\P{^Is_Sc=gujr}', "");
Expect(0, 2688, '\p{Is_Sc=gujr}', "");
Expect(1, 2688, '\p{^Is_Sc=gujr}', "");
Expect(1, 2688, '\P{Is_Sc=gujr}', "");
Expect(0, 2688, '\P{^Is_Sc=gujr}', "");
Expect(1, 2691, '\p{Is_Sc=	Gujr}', "");
Expect(0, 2691, '\p{^Is_Sc=	Gujr}', "");
Expect(0, 2691, '\P{Is_Sc=	Gujr}', "");
Expect(1, 2691, '\P{^Is_Sc=	Gujr}', "");
Expect(0, 2688, '\p{Is_Sc=	Gujr}', "");
Expect(1, 2688, '\p{^Is_Sc=	Gujr}', "");
Expect(1, 2688, '\P{Is_Sc=	Gujr}', "");
Expect(0, 2688, '\P{^Is_Sc=	Gujr}', "");
Error('\p{Script:ORIYA:=}');
Error('\P{Script:ORIYA:=}');
Expect(1, 2819, '\p{Script=oriya}', "");
Expect(0, 2819, '\p{^Script=oriya}', "");
Expect(0, 2819, '\P{Script=oriya}', "");
Expect(1, 2819, '\P{^Script=oriya}', "");
Expect(0, 2816, '\p{Script=oriya}', "");
Expect(1, 2816, '\p{^Script=oriya}', "");
Expect(1, 2816, '\P{Script=oriya}', "");
Expect(0, 2816, '\P{^Script=oriya}', "");
Expect(1, 2819, '\p{Script=_	ORIYA}', "");
Expect(0, 2819, '\p{^Script=_	ORIYA}', "");
Expect(0, 2819, '\P{Script=_	ORIYA}', "");
Expect(1, 2819, '\P{^Script=_	ORIYA}', "");
Expect(0, 2816, '\p{Script=_	ORIYA}', "");
Expect(1, 2816, '\p{^Script=_	ORIYA}', "");
Expect(1, 2816, '\P{Script=_	ORIYA}', "");
Expect(0, 2816, '\P{^Script=_	ORIYA}', "");
Error('\p{Sc=	 Orya/a/}');
Error('\P{Sc=	 Orya/a/}');
Expect(1, 2819, '\p{Sc=orya}', "");
Expect(0, 2819, '\p{^Sc=orya}', "");
Expect(0, 2819, '\P{Sc=orya}', "");
Expect(1, 2819, '\P{^Sc=orya}', "");
Expect(0, 2816, '\p{Sc=orya}', "");
Expect(1, 2816, '\p{^Sc=orya}', "");
Expect(1, 2816, '\P{Sc=orya}', "");
Expect(0, 2816, '\P{^Sc=orya}', "");
Expect(1, 2819, '\p{Sc= Orya}', "");
Expect(0, 2819, '\p{^Sc= Orya}', "");
Expect(0, 2819, '\P{Sc= Orya}', "");
Expect(1, 2819, '\P{^Sc= Orya}', "");
Expect(0, 2816, '\p{Sc= Orya}', "");
Expect(1, 2816, '\p{^Sc= Orya}', "");
Expect(1, 2816, '\P{Sc= Orya}', "");
Expect(0, 2816, '\P{^Sc= Orya}', "");
Error('\p{Is_Script=-:=ORIYA}');
Error('\P{Is_Script=-:=ORIYA}');
Expect(1, 2819, '\p{Is_Script=oriya}', "");
Expect(0, 2819, '\p{^Is_Script=oriya}', "");
Expect(0, 2819, '\P{Is_Script=oriya}', "");
Expect(1, 2819, '\P{^Is_Script=oriya}', "");
Expect(0, 2816, '\p{Is_Script=oriya}', "");
Expect(1, 2816, '\p{^Is_Script=oriya}', "");
Expect(1, 2816, '\P{Is_Script=oriya}', "");
Expect(0, 2816, '\P{^Is_Script=oriya}', "");
Expect(1, 2819, '\p{Is_Script=_	Oriya}', "");
Expect(0, 2819, '\p{^Is_Script=_	Oriya}', "");
Expect(0, 2819, '\P{Is_Script=_	Oriya}', "");
Expect(1, 2819, '\P{^Is_Script=_	Oriya}', "");
Expect(0, 2816, '\p{Is_Script=_	Oriya}', "");
Expect(1, 2816, '\p{^Is_Script=_	Oriya}', "");
Expect(1, 2816, '\P{Is_Script=_	Oriya}', "");
Expect(0, 2816, '\P{^Is_Script=_	Oriya}', "");
Error('\p{Is_Sc=-/a/ORYA}');
Error('\P{Is_Sc=-/a/ORYA}');
Expect(1, 2819, '\p{Is_Sc=orya}', "");
Expect(0, 2819, '\p{^Is_Sc=orya}', "");
Expect(0, 2819, '\P{Is_Sc=orya}', "");
Expect(1, 2819, '\P{^Is_Sc=orya}', "");
Expect(0, 2816, '\p{Is_Sc=orya}', "");
Expect(1, 2816, '\p{^Is_Sc=orya}', "");
Expect(1, 2816, '\P{Is_Sc=orya}', "");
Expect(0, 2816, '\P{^Is_Sc=orya}', "");
Expect(1, 2819, '\p{Is_Sc= Orya}', "");
Expect(0, 2819, '\p{^Is_Sc= Orya}', "");
Expect(0, 2819, '\P{Is_Sc= Orya}', "");
Expect(1, 2819, '\P{^Is_Sc= Orya}', "");
Expect(0, 2816, '\p{Is_Sc= Orya}', "");
Expect(1, 2816, '\p{^Is_Sc= Orya}', "");
Expect(1, 2816, '\P{Is_Sc= Orya}', "");
Expect(0, 2816, '\P{^Is_Sc= Orya}', "");
Error('\p{Script=/a/_Lisu}');
Error('\P{Script=/a/_Lisu}');
Expect(1, 42239, '\p{Script=lisu}', "");
Expect(0, 42239, '\p{^Script=lisu}', "");
Expect(0, 42239, '\P{Script=lisu}', "");
Expect(1, 42239, '\P{^Script=lisu}', "");
Expect(0, 42191, '\p{Script=lisu}', "");
Expect(1, 42191, '\p{^Script=lisu}', "");
Expect(1, 42191, '\P{Script=lisu}', "");
Expect(0, 42191, '\P{^Script=lisu}', "");
Expect(1, 42239, '\p{Script: __lisu}', "");
Expect(0, 42239, '\p{^Script: __lisu}', "");
Expect(0, 42239, '\P{Script: __lisu}', "");
Expect(1, 42239, '\P{^Script: __lisu}', "");
Expect(0, 42191, '\p{Script: __lisu}', "");
Expect(1, 42191, '\p{^Script: __lisu}', "");
Expect(1, 42191, '\P{Script: __lisu}', "");
Expect(0, 42191, '\P{^Script: __lisu}', "");
Error('\p{Sc= Lisu/a/}');
Error('\P{Sc= Lisu/a/}');
Expect(1, 42239, '\p{Sc=lisu}', "");
Expect(0, 42239, '\p{^Sc=lisu}', "");
Expect(0, 42239, '\P{Sc=lisu}', "");
Expect(1, 42239, '\P{^Sc=lisu}', "");
Expect(0, 42191, '\p{Sc=lisu}', "");
Expect(1, 42191, '\p{^Sc=lisu}', "");
Expect(1, 42191, '\P{Sc=lisu}', "");
Expect(0, 42191, '\P{^Sc=lisu}', "");
Expect(1, 42239, '\p{Sc=	LISU}', "");
Expect(0, 42239, '\p{^Sc=	LISU}', "");
Expect(0, 42239, '\P{Sc=	LISU}', "");
Expect(1, 42239, '\P{^Sc=	LISU}', "");
Expect(0, 42191, '\p{Sc=	LISU}', "");
Expect(1, 42191, '\p{^Sc=	LISU}', "");
Expect(1, 42191, '\P{Sc=	LISU}', "");
Expect(0, 42191, '\P{^Sc=	LISU}', "");
Error('\p{Is_Script=/a/_Lisu}');
Error('\P{Is_Script=/a/_Lisu}');
Expect(1, 42239, '\p{Is_Script=lisu}', "");
Expect(0, 42239, '\p{^Is_Script=lisu}', "");
Expect(0, 42239, '\P{Is_Script=lisu}', "");
Expect(1, 42239, '\P{^Is_Script=lisu}', "");
Expect(0, 42191, '\p{Is_Script=lisu}', "");
Expect(1, 42191, '\p{^Is_Script=lisu}', "");
Expect(1, 42191, '\P{Is_Script=lisu}', "");
Expect(0, 42191, '\P{^Is_Script=lisu}', "");
Expect(1, 42239, '\p{Is_Script=-lisu}', "");
Expect(0, 42239, '\p{^Is_Script=-lisu}', "");
Expect(0, 42239, '\P{Is_Script=-lisu}', "");
Expect(1, 42239, '\P{^Is_Script=-lisu}', "");
Expect(0, 42191, '\p{Is_Script=-lisu}', "");
Expect(1, 42191, '\p{^Is_Script=-lisu}', "");
Expect(1, 42191, '\P{Is_Script=-lisu}', "");
Expect(0, 42191, '\P{^Is_Script=-lisu}', "");
Error('\p{Is_Sc= :=Lisu}');
Error('\P{Is_Sc= :=Lisu}');
Expect(1, 42239, '\p{Is_Sc=lisu}', "");
Expect(0, 42239, '\p{^Is_Sc=lisu}', "");
Expect(0, 42239, '\P{Is_Sc=lisu}', "");
Expect(1, 42239, '\P{^Is_Sc=lisu}', "");
Expect(0, 42191, '\p{Is_Sc=lisu}', "");
Expect(1, 42191, '\p{^Is_Sc=lisu}', "");
Expect(1, 42191, '\P{Is_Sc=lisu}', "");
Expect(0, 42191, '\P{^Is_Sc=lisu}', "");
Expect(1, 42239, '\p{Is_Sc=	-LISU}', "");
Expect(0, 42239, '\p{^Is_Sc=	-LISU}', "");
Expect(0, 42239, '\P{Is_Sc=	-LISU}', "");
Expect(1, 42239, '\P{^Is_Sc=	-LISU}', "");
Expect(0, 42191, '\p{Is_Sc=	-LISU}', "");
Expect(1, 42191, '\p{^Is_Sc=	-LISU}', "");
Expect(1, 42191, '\P{Is_Sc=	-LISU}', "");
Expect(0, 42191, '\P{^Is_Sc=	-LISU}', "");
Error('\p{Script=/a/ Tai Le}');
Error('\P{Script=/a/ Tai Le}');
Expect(1, 6509, '\p{Script:   taile}', "");
Expect(0, 6509, '\p{^Script:   taile}', "");
Expect(0, 6509, '\P{Script:   taile}', "");
Expect(1, 6509, '\P{^Script:   taile}', "");
Expect(0, 6479, '\p{Script:   taile}', "");
Expect(1, 6479, '\p{^Script:   taile}', "");
Expect(1, 6479, '\P{Script:   taile}', "");
Expect(0, 6479, '\P{^Script:   taile}', "");
Expect(1, 6509, '\p{Script:	- Tai LE}', "");
Expect(0, 6509, '\p{^Script:	- Tai LE}', "");
Expect(0, 6509, '\P{Script:	- Tai LE}', "");
Expect(1, 6509, '\P{^Script:	- Tai LE}', "");
Expect(0, 6479, '\p{Script:	- Tai LE}', "");
Expect(1, 6479, '\p{^Script:	- Tai LE}', "");
Expect(1, 6479, '\P{Script:	- Tai LE}', "");
Expect(0, 6479, '\P{^Script:	- Tai LE}', "");
Error('\p{Sc=/a/-Tale}');
Error('\P{Sc=/a/-Tale}');
Expect(1, 6509, '\p{Sc=tale}', "");
Expect(0, 6509, '\p{^Sc=tale}', "");
Expect(0, 6509, '\P{Sc=tale}', "");
Expect(1, 6509, '\P{^Sc=tale}', "");
Expect(0, 6479, '\p{Sc=tale}', "");
Expect(1, 6479, '\p{^Sc=tale}', "");
Expect(1, 6479, '\P{Sc=tale}', "");
Expect(0, 6479, '\P{^Sc=tale}', "");
Expect(1, 6509, '\p{Sc=- TALE}', "");
Expect(0, 6509, '\p{^Sc=- TALE}', "");
Expect(0, 6509, '\P{Sc=- TALE}', "");
Expect(1, 6509, '\P{^Sc=- TALE}', "");
Expect(0, 6479, '\p{Sc=- TALE}', "");
Expect(1, 6479, '\p{^Sc=- TALE}', "");
Expect(1, 6479, '\P{Sc=- TALE}', "");
Expect(0, 6479, '\P{^Sc=- TALE}', "");
Error('\p{Is_Script=-	TAI/a/Le}');
Error('\P{Is_Script=-	TAI/a/Le}');
Expect(1, 6509, '\p{Is_Script=taile}', "");
Expect(0, 6509, '\p{^Is_Script=taile}', "");
Expect(0, 6509, '\P{Is_Script=taile}', "");
Expect(1, 6509, '\P{^Is_Script=taile}', "");
Expect(0, 6479, '\p{Is_Script=taile}', "");
Expect(1, 6479, '\p{^Is_Script=taile}', "");
Expect(1, 6479, '\P{Is_Script=taile}', "");
Expect(0, 6479, '\P{^Is_Script=taile}', "");
Expect(1, 6509, '\p{Is_Script=_ TaiLe}', "");
Expect(0, 6509, '\p{^Is_Script=_ TaiLe}', "");
Expect(0, 6509, '\P{Is_Script=_ TaiLe}', "");
Expect(1, 6509, '\P{^Is_Script=_ TaiLe}', "");
Expect(0, 6479, '\p{Is_Script=_ TaiLe}', "");
Expect(1, 6479, '\p{^Is_Script=_ TaiLe}', "");
Expect(1, 6479, '\P{Is_Script=_ TaiLe}', "");
Expect(0, 6479, '\P{^Is_Script=_ TaiLe}', "");
Error('\p{Is_Sc= -tale:=}');
Error('\P{Is_Sc= -tale:=}');
Expect(1, 6509, '\p{Is_Sc=tale}', "");
Expect(0, 6509, '\p{^Is_Sc=tale}', "");
Expect(0, 6509, '\P{Is_Sc=tale}', "");
Expect(1, 6509, '\P{^Is_Sc=tale}', "");
Expect(0, 6479, '\p{Is_Sc=tale}', "");
Expect(1, 6479, '\p{^Is_Sc=tale}', "");
Expect(1, 6479, '\P{Is_Sc=tale}', "");
Expect(0, 6479, '\P{^Is_Sc=tale}', "");
Expect(1, 6509, '\p{Is_Sc:		-Tale}', "");
Expect(0, 6509, '\p{^Is_Sc:		-Tale}', "");
Expect(0, 6509, '\P{Is_Sc:		-Tale}', "");
Expect(1, 6509, '\P{^Is_Sc:		-Tale}', "");
Expect(0, 6479, '\p{Is_Sc:		-Tale}', "");
Expect(1, 6479, '\p{^Is_Sc:		-Tale}', "");
Expect(1, 6479, '\P{Is_Sc:		-Tale}', "");
Expect(0, 6479, '\P{^Is_Sc:		-Tale}', "");
Error('\p{Script=__Avestan/a/}');
Error('\P{Script=__Avestan/a/}');
Expect(1, 68405, '\p{Script=avestan}', "");
Expect(0, 68405, '\p{^Script=avestan}', "");
Expect(0, 68405, '\P{Script=avestan}', "");
Expect(1, 68405, '\P{^Script=avestan}', "");
Expect(0, 68351, '\p{Script=avestan}', "");
Expect(1, 68351, '\p{^Script=avestan}', "");
Expect(1, 68351, '\P{Script=avestan}', "");
Expect(0, 68351, '\P{^Script=avestan}', "");
Expect(1, 68405, '\p{Script=-Avestan}', "");
Expect(0, 68405, '\p{^Script=-Avestan}', "");
Expect(0, 68405, '\P{Script=-Avestan}', "");
Expect(1, 68405, '\P{^Script=-Avestan}', "");
Expect(0, 68351, '\p{Script=-Avestan}', "");
Expect(1, 68351, '\p{^Script=-Avestan}', "");
Expect(1, 68351, '\P{Script=-Avestan}', "");
Expect(0, 68351, '\P{^Script=-Avestan}', "");
Error('\p{Sc=_-avst/a/}');
Error('\P{Sc=_-avst/a/}');
Expect(1, 68405, '\p{Sc=avst}', "");
Expect(0, 68405, '\p{^Sc=avst}', "");
Expect(0, 68405, '\P{Sc=avst}', "");
Expect(1, 68405, '\P{^Sc=avst}', "");
Expect(0, 68351, '\p{Sc=avst}', "");
Expect(1, 68351, '\p{^Sc=avst}', "");
Expect(1, 68351, '\P{Sc=avst}', "");
Expect(0, 68351, '\P{^Sc=avst}', "");
Expect(1, 68405, '\p{Sc=- AVST}', "");
Expect(0, 68405, '\p{^Sc=- AVST}', "");
Expect(0, 68405, '\P{Sc=- AVST}', "");
Expect(1, 68405, '\P{^Sc=- AVST}', "");
Expect(0, 68351, '\p{Sc=- AVST}', "");
Expect(1, 68351, '\p{^Sc=- AVST}', "");
Expect(1, 68351, '\P{Sc=- AVST}', "");
Expect(0, 68351, '\P{^Sc=- AVST}', "");
Error('\p{Is_Script=:=_-Avestan}');
Error('\P{Is_Script=:=_-Avestan}');
Expect(1, 68405, '\p{Is_Script=avestan}', "");
Expect(0, 68405, '\p{^Is_Script=avestan}', "");
Expect(0, 68405, '\P{Is_Script=avestan}', "");
Expect(1, 68405, '\P{^Is_Script=avestan}', "");
Expect(0, 68351, '\p{Is_Script=avestan}', "");
Expect(1, 68351, '\p{^Is_Script=avestan}', "");
Expect(1, 68351, '\P{Is_Script=avestan}', "");
Expect(0, 68351, '\P{^Is_Script=avestan}', "");
Expect(1, 68405, '\p{Is_Script=_ AVESTAN}', "");
Expect(0, 68405, '\p{^Is_Script=_ AVESTAN}', "");
Expect(0, 68405, '\P{Is_Script=_ AVESTAN}', "");
Expect(1, 68405, '\P{^Is_Script=_ AVESTAN}', "");
Expect(0, 68351, '\p{Is_Script=_ AVESTAN}', "");
Expect(1, 68351, '\p{^Is_Script=_ AVESTAN}', "");
Expect(1, 68351, '\P{Is_Script=_ AVESTAN}', "");
Expect(0, 68351, '\P{^Is_Script=_ AVESTAN}', "");
Error('\p{Is_Sc=	:=Avst}');
Error('\P{Is_Sc=	:=Avst}');
Expect(1, 68405, '\p{Is_Sc:avst}', "");
Expect(0, 68405, '\p{^Is_Sc:avst}', "");
Expect(0, 68405, '\P{Is_Sc:avst}', "");
Expect(1, 68405, '\P{^Is_Sc:avst}', "");
Expect(0, 68351, '\p{Is_Sc:avst}', "");
Expect(1, 68351, '\p{^Is_Sc:avst}', "");
Expect(1, 68351, '\P{Is_Sc:avst}', "");
Expect(0, 68351, '\P{^Is_Sc:avst}', "");
Expect(1, 68405, '\p{Is_Sc=_ Avst}', "");
Expect(0, 68405, '\p{^Is_Sc=_ Avst}', "");
Expect(0, 68405, '\P{Is_Sc=_ Avst}', "");
Expect(1, 68405, '\P{^Is_Sc=_ Avst}', "");
Expect(0, 68351, '\p{Is_Sc=_ Avst}', "");
Expect(1, 68351, '\p{^Is_Sc=_ Avst}', "");
Expect(1, 68351, '\P{Is_Sc=_ Avst}', "");
Expect(0, 68351, '\P{^Is_Sc=_ Avst}', "");
Error('\p{Script=/a/Georgian}');
Error('\P{Script=/a/Georgian}');
Expect(1, 4293, '\p{Script=georgian}', "");
Expect(0, 4293, '\p{^Script=georgian}', "");
Expect(0, 4293, '\P{Script=georgian}', "");
Expect(1, 4293, '\P{^Script=georgian}', "");
Expect(0, 4255, '\p{Script=georgian}', "");
Expect(1, 4255, '\p{^Script=georgian}', "");
Expect(1, 4255, '\P{Script=georgian}', "");
Expect(0, 4255, '\P{^Script=georgian}', "");
Expect(1, 4293, '\p{Script= _georgian}', "");
Expect(0, 4293, '\p{^Script= _georgian}', "");
Expect(0, 4293, '\P{Script= _georgian}', "");
Expect(1, 4293, '\P{^Script= _georgian}', "");
Expect(0, 4255, '\p{Script= _georgian}', "");
Expect(1, 4255, '\p{^Script= _georgian}', "");
Expect(1, 4255, '\P{Script= _georgian}', "");
Expect(0, 4255, '\P{^Script= _georgian}', "");
Error('\p{Sc=/a/--geor}');
Error('\P{Sc=/a/--geor}');
Expect(1, 4293, '\p{Sc=geor}', "");
Expect(0, 4293, '\p{^Sc=geor}', "");
Expect(0, 4293, '\P{Sc=geor}', "");
Expect(1, 4293, '\P{^Sc=geor}', "");
Expect(0, 4255, '\p{Sc=geor}', "");
Expect(1, 4255, '\p{^Sc=geor}', "");
Expect(1, 4255, '\P{Sc=geor}', "");
Expect(0, 4255, '\P{^Sc=geor}', "");
Expect(1, 4293, '\p{Sc=	Geor}', "");
Expect(0, 4293, '\p{^Sc=	Geor}', "");
Expect(0, 4293, '\P{Sc=	Geor}', "");
Expect(1, 4293, '\P{^Sc=	Geor}', "");
Expect(0, 4255, '\p{Sc=	Geor}', "");
Expect(1, 4255, '\p{^Sc=	Geor}', "");
Expect(1, 4255, '\P{Sc=	Geor}', "");
Expect(0, 4255, '\P{^Sc=	Geor}', "");
Error('\p{Is_Script=	/a/Georgian}');
Error('\P{Is_Script=	/a/Georgian}');
Expect(1, 4293, '\p{Is_Script=georgian}', "");
Expect(0, 4293, '\p{^Is_Script=georgian}', "");
Expect(0, 4293, '\P{Is_Script=georgian}', "");
Expect(1, 4293, '\P{^Is_Script=georgian}', "");
Expect(0, 4255, '\p{Is_Script=georgian}', "");
Expect(1, 4255, '\p{^Is_Script=georgian}', "");
Expect(1, 4255, '\P{Is_Script=georgian}', "");
Expect(0, 4255, '\P{^Is_Script=georgian}', "");
Expect(1, 4293, '\p{Is_Script=_	georgian}', "");
Expect(0, 4293, '\p{^Is_Script=_	georgian}', "");
Expect(0, 4293, '\P{Is_Script=_	georgian}', "");
Expect(1, 4293, '\P{^Is_Script=_	georgian}', "");
Expect(0, 4255, '\p{Is_Script=_	georgian}', "");
Expect(1, 4255, '\p{^Is_Script=_	georgian}', "");
Expect(1, 4255, '\P{Is_Script=_	georgian}', "");
Expect(0, 4255, '\P{^Is_Script=_	georgian}', "");
Error('\p{Is_Sc=:= -GEOR}');
Error('\P{Is_Sc=:= -GEOR}');
Expect(1, 4293, '\p{Is_Sc=geor}', "");
Expect(0, 4293, '\p{^Is_Sc=geor}', "");
Expect(0, 4293, '\P{Is_Sc=geor}', "");
Expect(1, 4293, '\P{^Is_Sc=geor}', "");
Expect(0, 4255, '\p{Is_Sc=geor}', "");
Expect(1, 4255, '\p{^Is_Sc=geor}', "");
Expect(1, 4255, '\P{Is_Sc=geor}', "");
Expect(0, 4255, '\P{^Is_Sc=geor}', "");
Expect(1, 4293, '\p{Is_Sc=__Geor}', "");
Expect(0, 4293, '\p{^Is_Sc=__Geor}', "");
Expect(0, 4293, '\P{Is_Sc=__Geor}', "");
Expect(1, 4293, '\P{^Is_Sc=__Geor}', "");
Expect(0, 4255, '\p{Is_Sc=__Geor}', "");
Expect(1, 4255, '\p{^Is_Sc=__Geor}', "");
Expect(1, 4255, '\P{Is_Sc=__Geor}', "");
Expect(0, 4255, '\P{^Is_Sc=__Geor}', "");
Error('\p{Script=/a/- TELUGU}');
Error('\P{Script=/a/- TELUGU}');
Expect(1, 3075, '\p{Script=telugu}', "");
Expect(0, 3075, '\p{^Script=telugu}', "");
Expect(0, 3075, '\P{Script=telugu}', "");
Expect(1, 3075, '\P{^Script=telugu}', "");
Expect(0, 3072, '\p{Script=telugu}', "");
Expect(1, 3072, '\p{^Script=telugu}', "");
Expect(1, 3072, '\P{Script=telugu}', "");
Expect(0, 3072, '\P{^Script=telugu}', "");
Expect(1, 3075, '\p{Script= _Telugu}', "");
Expect(0, 3075, '\p{^Script= _Telugu}', "");
Expect(0, 3075, '\P{Script= _Telugu}', "");
Expect(1, 3075, '\P{^Script= _Telugu}', "");
Expect(0, 3072, '\p{Script= _Telugu}', "");
Expect(1, 3072, '\p{^Script= _Telugu}', "");
Expect(1, 3072, '\P{Script= _Telugu}', "");
Expect(0, 3072, '\P{^Script= _Telugu}', "");
Error('\p{Sc=:=telu}');
Error('\P{Sc=:=telu}');
Expect(1, 3075, '\p{Sc:	telu}', "");
Expect(0, 3075, '\p{^Sc:	telu}', "");
Expect(0, 3075, '\P{Sc:	telu}', "");
Expect(1, 3075, '\P{^Sc:	telu}', "");
Expect(0, 3072, '\p{Sc:	telu}', "");
Expect(1, 3072, '\p{^Sc:	telu}', "");
Expect(1, 3072, '\P{Sc:	telu}', "");
Expect(0, 3072, '\P{^Sc:	telu}', "");
Expect(1, 3075, '\p{Sc= _TELU}', "");
Expect(0, 3075, '\p{^Sc= _TELU}', "");
Expect(0, 3075, '\P{Sc= _TELU}', "");
Expect(1, 3075, '\P{^Sc= _TELU}', "");
Expect(0, 3072, '\p{Sc= _TELU}', "");
Expect(1, 3072, '\p{^Sc= _TELU}', "");
Expect(1, 3072, '\P{Sc= _TELU}', "");
Expect(0, 3072, '\P{^Sc= _TELU}', "");
Error('\p{Is_Script=-_TELUGU/a/}');
Error('\P{Is_Script=-_TELUGU/a/}');
Expect(1, 3075, '\p{Is_Script=telugu}', "");
Expect(0, 3075, '\p{^Is_Script=telugu}', "");
Expect(0, 3075, '\P{Is_Script=telugu}', "");
Expect(1, 3075, '\P{^Is_Script=telugu}', "");
Expect(0, 3072, '\p{Is_Script=telugu}', "");
Expect(1, 3072, '\p{^Is_Script=telugu}', "");
Expect(1, 3072, '\P{Is_Script=telugu}', "");
Expect(0, 3072, '\P{^Is_Script=telugu}', "");
Expect(1, 3075, '\p{Is_Script=- TELUGU}', "");
Expect(0, 3075, '\p{^Is_Script=- TELUGU}', "");
Expect(0, 3075, '\P{Is_Script=- TELUGU}', "");
Expect(1, 3075, '\P{^Is_Script=- TELUGU}', "");
Expect(0, 3072, '\p{Is_Script=- TELUGU}', "");
Expect(1, 3072, '\p{^Is_Script=- TELUGU}', "");
Expect(1, 3072, '\P{Is_Script=- TELUGU}', "");
Expect(0, 3072, '\P{^Is_Script=- TELUGU}', "");
Error('\p{Is_Sc=-Telu/a/}');
Error('\P{Is_Sc=-Telu/a/}');
Expect(1, 3075, '\p{Is_Sc=telu}', "");
Expect(0, 3075, '\p{^Is_Sc=telu}', "");
Expect(0, 3075, '\P{Is_Sc=telu}', "");
Expect(1, 3075, '\P{^Is_Sc=telu}', "");
Expect(0, 3072, '\p{Is_Sc=telu}', "");
Expect(1, 3072, '\p{^Is_Sc=telu}', "");
Expect(1, 3072, '\P{Is_Sc=telu}', "");
Expect(0, 3072, '\P{^Is_Sc=telu}', "");
Expect(1, 3075, '\p{Is_Sc=	Telu}', "");
Expect(0, 3075, '\p{^Is_Sc=	Telu}', "");
Expect(0, 3075, '\P{Is_Sc=	Telu}', "");
Expect(1, 3075, '\P{^Is_Sc=	Telu}', "");
Expect(0, 3072, '\p{Is_Sc=	Telu}', "");
Expect(1, 3072, '\p{^Is_Sc=	Telu}', "");
Expect(1, 3072, '\P{Is_Sc=	Telu}', "");
Expect(0, 3072, '\P{^Is_Sc=	Telu}', "");
Error('\p{Script=/a/	TIFINAGH}');
Error('\P{Script=/a/	TIFINAGH}');
Expect(1, 11621, '\p{Script=tifinagh}', "");
Expect(0, 11621, '\p{^Script=tifinagh}', "");
Expect(0, 11621, '\P{Script=tifinagh}', "");
Expect(1, 11621, '\P{^Script=tifinagh}', "");
Expect(0, 11567, '\p{Script=tifinagh}', "");
Expect(1, 11567, '\p{^Script=tifinagh}', "");
Expect(1, 11567, '\P{Script=tifinagh}', "");
Expect(0, 11567, '\P{^Script=tifinagh}', "");
Expect(1, 11621, '\p{Script=Tifinagh}', "");
Expect(0, 11621, '\p{^Script=Tifinagh}', "");
Expect(0, 11621, '\P{Script=Tifinagh}', "");
Expect(1, 11621, '\P{^Script=Tifinagh}', "");
Expect(0, 11567, '\p{Script=Tifinagh}', "");
Expect(1, 11567, '\p{^Script=Tifinagh}', "");
Expect(1, 11567, '\P{Script=Tifinagh}', "");
Expect(0, 11567, '\P{^Script=Tifinagh}', "");
Error('\p{Sc=--tfng:=}');
Error('\P{Sc=--tfng:=}');
Expect(1, 11621, '\p{Sc=tfng}', "");
Expect(0, 11621, '\p{^Sc=tfng}', "");
Expect(0, 11621, '\P{Sc=tfng}', "");
Expect(1, 11621, '\P{^Sc=tfng}', "");
Expect(0, 11567, '\p{Sc=tfng}', "");
Expect(1, 11567, '\p{^Sc=tfng}', "");
Expect(1, 11567, '\P{Sc=tfng}', "");
Expect(0, 11567, '\P{^Sc=tfng}', "");
Expect(1, 11621, '\p{Sc=-TFNG}', "");
Expect(0, 11621, '\p{^Sc=-TFNG}', "");
Expect(0, 11621, '\P{Sc=-TFNG}', "");
Expect(1, 11621, '\P{^Sc=-TFNG}', "");
Expect(0, 11567, '\p{Sc=-TFNG}', "");
Expect(1, 11567, '\p{^Sc=-TFNG}', "");
Expect(1, 11567, '\P{Sc=-TFNG}', "");
Expect(0, 11567, '\P{^Sc=-TFNG}', "");
Error('\p{Is_Script=_ tifinagh:=}');
Error('\P{Is_Script=_ tifinagh:=}');
Expect(1, 11621, '\p{Is_Script=tifinagh}', "");
Expect(0, 11621, '\p{^Is_Script=tifinagh}', "");
Expect(0, 11621, '\P{Is_Script=tifinagh}', "");
Expect(1, 11621, '\P{^Is_Script=tifinagh}', "");
Expect(0, 11567, '\p{Is_Script=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Script=tifinagh}', "");
Expect(1, 11567, '\P{Is_Script=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Script=tifinagh}', "");
Expect(1, 11621, '\p{Is_Script= TIFINAGH}', "");
Expect(0, 11621, '\p{^Is_Script= TIFINAGH}', "");
Expect(0, 11621, '\P{Is_Script= TIFINAGH}', "");
Expect(1, 11621, '\P{^Is_Script= TIFINAGH}', "");
Expect(0, 11567, '\p{Is_Script= TIFINAGH}', "");
Expect(1, 11567, '\p{^Is_Script= TIFINAGH}', "");
Expect(1, 11567, '\P{Is_Script= TIFINAGH}', "");
Expect(0, 11567, '\P{^Is_Script= TIFINAGH}', "");
Error('\p{Is_Sc:	_ tfng/a/}');
Error('\P{Is_Sc:	_ tfng/a/}');
Expect(1, 11621, '\p{Is_Sc=tfng}', "");
Expect(0, 11621, '\p{^Is_Sc=tfng}', "");
Expect(0, 11621, '\P{Is_Sc=tfng}', "");
Expect(1, 11621, '\P{^Is_Sc=tfng}', "");
Expect(0, 11567, '\p{Is_Sc=tfng}', "");
Expect(1, 11567, '\p{^Is_Sc=tfng}', "");
Expect(1, 11567, '\P{Is_Sc=tfng}', "");
Expect(0, 11567, '\P{^Is_Sc=tfng}', "");
Expect(1, 11621, '\p{Is_Sc=	TFNG}', "");
Expect(0, 11621, '\p{^Is_Sc=	TFNG}', "");
Expect(0, 11621, '\P{Is_Sc=	TFNG}', "");
Expect(1, 11621, '\P{^Is_Sc=	TFNG}', "");
Expect(0, 11567, '\p{Is_Sc=	TFNG}', "");
Expect(1, 11567, '\p{^Is_Sc=	TFNG}', "");
Expect(1, 11567, '\P{Is_Sc=	TFNG}', "");
Expect(0, 11567, '\P{^Is_Sc=	TFNG}', "");
Error('\p{Script=_	SINHALA/a/}');
Error('\P{Script=_	SINHALA/a/}');
Expect(1, 3459, '\p{Script=sinhala}', "");
Expect(0, 3459, '\p{^Script=sinhala}', "");
Expect(0, 3459, '\P{Script=sinhala}', "");
Expect(1, 3459, '\P{^Script=sinhala}', "");
Expect(0, 3457, '\p{Script=sinhala}', "");
Expect(1, 3457, '\p{^Script=sinhala}', "");
Expect(1, 3457, '\P{Script=sinhala}', "");
Expect(0, 3457, '\P{^Script=sinhala}', "");
Error('\p{Sc=--sinh:=}');
Error('\P{Sc=--sinh:=}');
Expect(1, 3459, '\p{Sc=sinh}', "");
Expect(0, 3459, '\p{^Sc=sinh}', "");
Expect(0, 3459, '\P{Sc=sinh}', "");
Expect(1, 3459, '\P{^Sc=sinh}', "");
Expect(0, 3457, '\p{Sc=sinh}', "");
Expect(1, 3457, '\p{^Sc=sinh}', "");
Expect(1, 3457, '\P{Sc=sinh}', "");
Expect(0, 3457, '\P{^Sc=sinh}', "");
Expect(1, 3459, '\p{Sc= sinh}', "");
Expect(0, 3459, '\p{^Sc= sinh}', "");
Expect(0, 3459, '\P{Sc= sinh}', "");
Expect(1, 3459, '\P{^Sc= sinh}', "");
Expect(0, 3457, '\p{Sc= sinh}', "");
Expect(1, 3457, '\p{^Sc= sinh}', "");
Expect(1, 3457, '\P{Sc= sinh}', "");
Expect(0, 3457, '\P{^Sc= sinh}', "");
Error('\p{Is_Script=:=- sinhala}');
Error('\P{Is_Script=:=- sinhala}');
Expect(1, 3459, '\p{Is_Script=sinhala}', "");
Expect(0, 3459, '\p{^Is_Script=sinhala}', "");
Expect(0, 3459, '\P{Is_Script=sinhala}', "");
Expect(1, 3459, '\P{^Is_Script=sinhala}', "");
Expect(0, 3457, '\p{Is_Script=sinhala}', "");
Expect(1, 3457, '\p{^Is_Script=sinhala}', "");
Expect(1, 3457, '\P{Is_Script=sinhala}', "");
Expect(0, 3457, '\P{^Is_Script=sinhala}', "");
Expect(1, 3459, '\p{Is_Script=SINHALA}', "");
Expect(0, 3459, '\p{^Is_Script=SINHALA}', "");
Expect(0, 3459, '\P{Is_Script=SINHALA}', "");
Expect(1, 3459, '\P{^Is_Script=SINHALA}', "");
Expect(0, 3457, '\p{Is_Script=SINHALA}', "");
Expect(1, 3457, '\p{^Is_Script=SINHALA}', "");
Expect(1, 3457, '\P{Is_Script=SINHALA}', "");
Expect(0, 3457, '\P{^Is_Script=SINHALA}', "");
Error('\p{Is_Sc=/a/-	Sinh}');
Error('\P{Is_Sc=/a/-	Sinh}');
Expect(1, 3459, '\p{Is_Sc=sinh}', "");
Expect(0, 3459, '\p{^Is_Sc=sinh}', "");
Expect(0, 3459, '\P{Is_Sc=sinh}', "");
Expect(1, 3459, '\P{^Is_Sc=sinh}', "");
Expect(0, 3457, '\p{Is_Sc=sinh}', "");
Expect(1, 3457, '\p{^Is_Sc=sinh}', "");
Expect(1, 3457, '\P{Is_Sc=sinh}', "");
Expect(0, 3457, '\P{^Is_Sc=sinh}', "");
Expect(1, 3459, '\p{Is_Sc=_ SINH}', "");
Expect(0, 3459, '\p{^Is_Sc=_ SINH}', "");
Expect(0, 3459, '\P{Is_Sc=_ SINH}', "");
Expect(1, 3459, '\P{^Is_Sc=_ SINH}', "");
Expect(0, 3457, '\p{Is_Sc=_ SINH}', "");
Expect(1, 3457, '\p{^Is_Sc=_ SINH}', "");
Expect(1, 3457, '\P{Is_Sc=_ SINH}', "");
Expect(0, 3457, '\P{^Is_Sc=_ SINH}', "");
Error('\p{Script=-Linear:=B}');
Error('\P{Script=-Linear:=B}');
Expect(1, 65547, '\p{Script=linearb}', "");
Expect(0, 65547, '\p{^Script=linearb}', "");
Expect(0, 65547, '\P{Script=linearb}', "");
Expect(1, 65547, '\P{^Script=linearb}', "");
Expect(0, 1, '\p{Script=linearb}', "");
Expect(1, 1, '\p{^Script=linearb}', "");
Expect(1, 1, '\P{Script=linearb}', "");
Expect(0, 1, '\P{^Script=linearb}', "");
Expect(1, 65547, '\p{Script=-linear B}', "");
Expect(0, 65547, '\p{^Script=-linear B}', "");
Expect(0, 65547, '\P{Script=-linear B}', "");
Expect(1, 65547, '\P{^Script=-linear B}', "");
Expect(0, 1, '\p{Script=-linear B}', "");
Expect(1, 1, '\p{^Script=-linear B}', "");
Expect(1, 1, '\P{Script=-linear B}', "");
Expect(0, 1, '\P{^Script=-linear B}', "");
Error('\p{Sc=-	Linb:=}');
Error('\P{Sc=-	Linb:=}');
Expect(1, 65547, '\p{Sc=linb}', "");
Expect(0, 65547, '\p{^Sc=linb}', "");
Expect(0, 65547, '\P{Sc=linb}', "");
Expect(1, 65547, '\P{^Sc=linb}', "");
Expect(0, 1, '\p{Sc=linb}', "");
Expect(1, 1, '\p{^Sc=linb}', "");
Expect(1, 1, '\P{Sc=linb}', "");
Expect(0, 1, '\P{^Sc=linb}', "");
Expect(1, 65547, '\p{Sc=--Linb}', "");
Expect(0, 65547, '\p{^Sc=--Linb}', "");
Expect(0, 65547, '\P{Sc=--Linb}', "");
Expect(1, 65547, '\P{^Sc=--Linb}', "");
Expect(0, 1, '\p{Sc=--Linb}', "");
Expect(1, 1, '\p{^Sc=--Linb}', "");
Expect(1, 1, '\P{Sc=--Linb}', "");
Expect(0, 1, '\P{^Sc=--Linb}', "");
Error('\p{Is_Script=-linear/a/B}');
Error('\P{Is_Script=-linear/a/B}');
Expect(1, 65547, '\p{Is_Script:	linearb}', "");
Expect(0, 65547, '\p{^Is_Script:	linearb}', "");
Expect(0, 65547, '\P{Is_Script:	linearb}', "");
Expect(1, 65547, '\P{^Is_Script:	linearb}', "");
Expect(0, 1, '\p{Is_Script:	linearb}', "");
Expect(1, 1, '\p{^Is_Script:	linearb}', "");
Expect(1, 1, '\P{Is_Script:	linearb}', "");
Expect(0, 1, '\P{^Is_Script:	linearb}', "");
Expect(1, 65547, '\p{Is_Script=  Linear-B}', "");
Expect(0, 65547, '\p{^Is_Script=  Linear-B}', "");
Expect(0, 65547, '\P{Is_Script=  Linear-B}', "");
Expect(1, 65547, '\P{^Is_Script=  Linear-B}', "");
Expect(0, 1, '\p{Is_Script=  Linear-B}', "");
Expect(1, 1, '\p{^Is_Script=  Linear-B}', "");
Expect(1, 1, '\P{Is_Script=  Linear-B}', "");
Expect(0, 1, '\P{^Is_Script=  Linear-B}', "");
Error('\p{Is_Sc=- linb/a/}');
Error('\P{Is_Sc=- linb/a/}');
Expect(1, 65547, '\p{Is_Sc=linb}', "");
Expect(0, 65547, '\p{^Is_Sc=linb}', "");
Expect(0, 65547, '\P{Is_Sc=linb}', "");
Expect(1, 65547, '\P{^Is_Sc=linb}', "");
Expect(0, 1, '\p{Is_Sc=linb}', "");
Expect(1, 1, '\p{^Is_Sc=linb}', "");
Expect(1, 1, '\P{Is_Sc=linb}', "");
Expect(0, 1, '\P{^Is_Sc=linb}', "");
Expect(1, 65547, '\p{Is_Sc=_Linb}', "");
Expect(0, 65547, '\p{^Is_Sc=_Linb}', "");
Expect(0, 65547, '\P{Is_Sc=_Linb}', "");
Expect(1, 65547, '\P{^Is_Sc=_Linb}', "");
Expect(0, 1, '\p{Is_Sc=_Linb}', "");
Expect(1, 1, '\p{^Is_Sc=_Linb}', "");
Expect(1, 1, '\P{Is_Sc=_Linb}', "");
Expect(0, 1, '\P{^Is_Sc=_Linb}', "");
Error('\p{Script::=- Samaritan}');
Error('\P{Script::=- Samaritan}');
Expect(1, 2093, '\p{Script=samaritan}', "");
Expect(0, 2093, '\p{^Script=samaritan}', "");
Expect(0, 2093, '\P{Script=samaritan}', "");
Expect(1, 2093, '\P{^Script=samaritan}', "");
Expect(0, 2047, '\p{Script=samaritan}', "");
Expect(1, 2047, '\p{^Script=samaritan}', "");
Expect(1, 2047, '\P{Script=samaritan}', "");
Expect(0, 2047, '\P{^Script=samaritan}', "");
Expect(1, 2093, '\p{Script=-_Samaritan}', "");
Expect(0, 2093, '\p{^Script=-_Samaritan}', "");
Expect(0, 2093, '\P{Script=-_Samaritan}', "");
Expect(1, 2093, '\P{^Script=-_Samaritan}', "");
Expect(0, 2047, '\p{Script=-_Samaritan}', "");
Expect(1, 2047, '\p{^Script=-_Samaritan}', "");
Expect(1, 2047, '\P{Script=-_Samaritan}', "");
Expect(0, 2047, '\P{^Script=-_Samaritan}', "");
Error('\p{Sc=	:=Samr}');
Error('\P{Sc=	:=Samr}');
Expect(1, 2093, '\p{Sc=samr}', "");
Expect(0, 2093, '\p{^Sc=samr}', "");
Expect(0, 2093, '\P{Sc=samr}', "");
Expect(1, 2093, '\P{^Sc=samr}', "");
Expect(0, 2047, '\p{Sc=samr}', "");
Expect(1, 2047, '\p{^Sc=samr}', "");
Expect(1, 2047, '\P{Sc=samr}', "");
Expect(0, 2047, '\P{^Sc=samr}', "");
Expect(1, 2093, '\p{Sc=		SAMR}', "");
Expect(0, 2093, '\p{^Sc=		SAMR}', "");
Expect(0, 2093, '\P{Sc=		SAMR}', "");
Expect(1, 2093, '\P{^Sc=		SAMR}', "");
Expect(0, 2047, '\p{Sc=		SAMR}', "");
Expect(1, 2047, '\p{^Sc=		SAMR}', "");
Expect(1, 2047, '\P{Sc=		SAMR}', "");
Expect(0, 2047, '\P{^Sc=		SAMR}', "");
Error('\p{Is_Script=/a/Samaritan}');
Error('\P{Is_Script=/a/Samaritan}');
Expect(1, 2093, '\p{Is_Script=samaritan}', "");
Expect(0, 2093, '\p{^Is_Script=samaritan}', "");
Expect(0, 2093, '\P{Is_Script=samaritan}', "");
Expect(1, 2093, '\P{^Is_Script=samaritan}', "");
Expect(0, 2047, '\p{Is_Script=samaritan}', "");
Expect(1, 2047, '\p{^Is_Script=samaritan}', "");
Expect(1, 2047, '\P{Is_Script=samaritan}', "");
Expect(0, 2047, '\P{^Is_Script=samaritan}', "");
Expect(1, 2093, '\p{Is_Script=	SAMARITAN}', "");
Expect(0, 2093, '\p{^Is_Script=	SAMARITAN}', "");
Expect(0, 2093, '\P{Is_Script=	SAMARITAN}', "");
Expect(1, 2093, '\P{^Is_Script=	SAMARITAN}', "");
Expect(0, 2047, '\p{Is_Script=	SAMARITAN}', "");
Expect(1, 2047, '\p{^Is_Script=	SAMARITAN}', "");
Expect(1, 2047, '\P{Is_Script=	SAMARITAN}', "");
Expect(0, 2047, '\P{^Is_Script=	SAMARITAN}', "");
Error('\p{Is_Sc=-/a/SAMR}');
Error('\P{Is_Sc=-/a/SAMR}');
Expect(1, 2093, '\p{Is_Sc=samr}', "");
Expect(0, 2093, '\p{^Is_Sc=samr}', "");
Expect(0, 2093, '\P{Is_Sc=samr}', "");
Expect(1, 2093, '\P{^Is_Sc=samr}', "");
Expect(0, 2047, '\p{Is_Sc=samr}', "");
Expect(1, 2047, '\p{^Is_Sc=samr}', "");
Expect(1, 2047, '\P{Is_Sc=samr}', "");
Expect(0, 2047, '\P{^Is_Sc=samr}', "");
Expect(1, 2093, '\p{Is_Sc=_-Samr}', "");
Expect(0, 2093, '\p{^Is_Sc=_-Samr}', "");
Expect(0, 2093, '\P{Is_Sc=_-Samr}', "");
Expect(1, 2093, '\P{^Is_Sc=_-Samr}', "");
Expect(0, 2047, '\p{Is_Sc=_-Samr}', "");
Expect(1, 2047, '\p{^Is_Sc=_-Samr}', "");
Expect(1, 2047, '\P{Is_Sc=_-Samr}', "");
Expect(0, 2047, '\P{^Is_Sc=_-Samr}', "");
Error('\p{Script=- SAURASHTRA:=}');
Error('\P{Script=- SAURASHTRA:=}');
Expect(1, 43204, '\p{Script=saurashtra}', "");
Expect(0, 43204, '\p{^Script=saurashtra}', "");
Expect(0, 43204, '\P{Script=saurashtra}', "");
Expect(1, 43204, '\P{^Script=saurashtra}', "");
Expect(0, 43135, '\p{Script=saurashtra}', "");
Expect(1, 43135, '\p{^Script=saurashtra}', "");
Expect(1, 43135, '\P{Script=saurashtra}', "");
Expect(0, 43135, '\P{^Script=saurashtra}', "");
Expect(1, 43204, '\p{Script=_ saurashtra}', "");
Expect(0, 43204, '\p{^Script=_ saurashtra}', "");
Expect(0, 43204, '\P{Script=_ saurashtra}', "");
Expect(1, 43204, '\P{^Script=_ saurashtra}', "");
Expect(0, 43135, '\p{Script=_ saurashtra}', "");
Expect(1, 43135, '\p{^Script=_ saurashtra}', "");
Expect(1, 43135, '\P{Script=_ saurashtra}', "");
Expect(0, 43135, '\P{^Script=_ saurashtra}', "");
Error('\p{Sc=/a/	_Saur}');
Error('\P{Sc=/a/	_Saur}');
Expect(1, 43204, '\p{Sc=saur}', "");
Expect(0, 43204, '\p{^Sc=saur}', "");
Expect(0, 43204, '\P{Sc=saur}', "");
Expect(1, 43204, '\P{^Sc=saur}', "");
Expect(0, 43135, '\p{Sc=saur}', "");
Expect(1, 43135, '\p{^Sc=saur}', "");
Expect(1, 43135, '\P{Sc=saur}', "");
Expect(0, 43135, '\P{^Sc=saur}', "");
Expect(1, 43204, '\p{Sc=_-Saur}', "");
Expect(0, 43204, '\p{^Sc=_-Saur}', "");
Expect(0, 43204, '\P{Sc=_-Saur}', "");
Expect(1, 43204, '\P{^Sc=_-Saur}', "");
Expect(0, 43135, '\p{Sc=_-Saur}', "");
Expect(1, 43135, '\p{^Sc=_-Saur}', "");
Expect(1, 43135, '\P{Sc=_-Saur}', "");
Expect(0, 43135, '\P{^Sc=_-Saur}', "");
Error('\p{Is_Script=/a/_Saurashtra}');
Error('\P{Is_Script=/a/_Saurashtra}');
Expect(1, 43204, '\p{Is_Script=saurashtra}', "");
Expect(0, 43204, '\p{^Is_Script=saurashtra}', "");
Expect(0, 43204, '\P{Is_Script=saurashtra}', "");
Expect(1, 43204, '\P{^Is_Script=saurashtra}', "");
Expect(0, 43135, '\p{Is_Script=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Script=saurashtra}', "");
Expect(1, 43135, '\P{Is_Script=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Script=saurashtra}', "");
Expect(1, 43204, '\p{Is_Script=		SAURASHTRA}', "");
Expect(0, 43204, '\p{^Is_Script=		SAURASHTRA}', "");
Expect(0, 43204, '\P{Is_Script=		SAURASHTRA}', "");
Expect(1, 43204, '\P{^Is_Script=		SAURASHTRA}', "");
Expect(0, 43135, '\p{Is_Script=		SAURASHTRA}', "");
Expect(1, 43135, '\p{^Is_Script=		SAURASHTRA}', "");
Expect(1, 43135, '\P{Is_Script=		SAURASHTRA}', "");
Expect(0, 43135, '\P{^Is_Script=		SAURASHTRA}', "");
Error('\p{Is_Sc=	:=Saur}');
Error('\P{Is_Sc=	:=Saur}');
Expect(1, 43204, '\p{Is_Sc=saur}', "");
Expect(0, 43204, '\p{^Is_Sc=saur}', "");
Expect(0, 43204, '\P{Is_Sc=saur}', "");
Expect(1, 43204, '\P{^Is_Sc=saur}', "");
Expect(0, 43135, '\p{Is_Sc=saur}', "");
Expect(1, 43135, '\p{^Is_Sc=saur}', "");
Expect(1, 43135, '\P{Is_Sc=saur}', "");
Expect(0, 43135, '\P{^Is_Sc=saur}', "");
Expect(1, 43204, '\p{Is_Sc=	Saur}', "");
Expect(0, 43204, '\p{^Is_Sc=	Saur}', "");
Expect(0, 43204, '\P{Is_Sc=	Saur}', "");
Expect(1, 43204, '\P{^Is_Sc=	Saur}', "");
Expect(0, 43135, '\p{Is_Sc=	Saur}', "");
Expect(1, 43135, '\p{^Is_Sc=	Saur}', "");
Expect(1, 43135, '\P{Is_Sc=	Saur}', "");
Expect(0, 43135, '\P{^Is_Sc=	Saur}', "");
Error('\p{Script=-_Sundanese:=}');
Error('\P{Script=-_Sundanese:=}');
Expect(1, 7082, '\p{Script=sundanese}', "");
Expect(0, 7082, '\p{^Script=sundanese}', "");
Expect(0, 7082, '\P{Script=sundanese}', "");
Expect(1, 7082, '\P{^Script=sundanese}', "");
Expect(0, 7039, '\p{Script=sundanese}', "");
Expect(1, 7039, '\p{^Script=sundanese}', "");
Expect(1, 7039, '\P{Script=sundanese}', "");
Expect(0, 7039, '\P{^Script=sundanese}', "");
Expect(1, 7082, '\p{Script=-_SUNDANESE}', "");
Expect(0, 7082, '\p{^Script=-_SUNDANESE}', "");
Expect(0, 7082, '\P{Script=-_SUNDANESE}', "");
Expect(1, 7082, '\P{^Script=-_SUNDANESE}', "");
Expect(0, 7039, '\p{Script=-_SUNDANESE}', "");
Expect(1, 7039, '\p{^Script=-_SUNDANESE}', "");
Expect(1, 7039, '\P{Script=-_SUNDANESE}', "");
Expect(0, 7039, '\P{^Script=-_SUNDANESE}', "");
Error('\p{Sc= _SUND:=}');
Error('\P{Sc= _SUND:=}');
Expect(1, 7082, '\p{Sc=sund}', "");
Expect(0, 7082, '\p{^Sc=sund}', "");
Expect(0, 7082, '\P{Sc=sund}', "");
Expect(1, 7082, '\P{^Sc=sund}', "");
Expect(0, 7039, '\p{Sc=sund}', "");
Expect(1, 7039, '\p{^Sc=sund}', "");
Expect(1, 7039, '\P{Sc=sund}', "");
Expect(0, 7039, '\P{^Sc=sund}', "");
Expect(1, 7082, '\p{Sc= Sund}', "");
Expect(0, 7082, '\p{^Sc= Sund}', "");
Expect(0, 7082, '\P{Sc= Sund}', "");
Expect(1, 7082, '\P{^Sc= Sund}', "");
Expect(0, 7039, '\p{Sc= Sund}', "");
Expect(1, 7039, '\p{^Sc= Sund}', "");
Expect(1, 7039, '\P{Sc= Sund}', "");
Expect(0, 7039, '\P{^Sc= Sund}', "");
Error('\p{Is_Script=_:=sundanese}');
Error('\P{Is_Script=_:=sundanese}');
Expect(1, 7082, '\p{Is_Script=sundanese}', "");
Expect(0, 7082, '\p{^Is_Script=sundanese}', "");
Expect(0, 7082, '\P{Is_Script=sundanese}', "");
Expect(1, 7082, '\P{^Is_Script=sundanese}', "");
Expect(0, 7039, '\p{Is_Script=sundanese}', "");
Expect(1, 7039, '\p{^Is_Script=sundanese}', "");
Expect(1, 7039, '\P{Is_Script=sundanese}', "");
Expect(0, 7039, '\P{^Is_Script=sundanese}', "");
Expect(1, 7082, '\p{Is_Script=		SUNDANESE}', "");
Expect(0, 7082, '\p{^Is_Script=		SUNDANESE}', "");
Expect(0, 7082, '\P{Is_Script=		SUNDANESE}', "");
Expect(1, 7082, '\P{^Is_Script=		SUNDANESE}', "");
Expect(0, 7039, '\p{Is_Script=		SUNDANESE}', "");
Expect(1, 7039, '\p{^Is_Script=		SUNDANESE}', "");
Expect(1, 7039, '\P{Is_Script=		SUNDANESE}', "");
Expect(0, 7039, '\P{^Is_Script=		SUNDANESE}', "");
Error('\p{Is_Sc=:= sund}');
Error('\P{Is_Sc=:= sund}');
Expect(1, 7082, '\p{Is_Sc=sund}', "");
Expect(0, 7082, '\p{^Is_Sc=sund}', "");
Expect(0, 7082, '\P{Is_Sc=sund}', "");
Expect(1, 7082, '\P{^Is_Sc=sund}', "");
Expect(0, 7039, '\p{Is_Sc=sund}', "");
Expect(1, 7039, '\p{^Is_Sc=sund}', "");
Expect(1, 7039, '\P{Is_Sc=sund}', "");
Expect(0, 7039, '\P{^Is_Sc=sund}', "");
Expect(1, 7082, '\p{Is_Sc=Sund}', "");
Expect(0, 7082, '\p{^Is_Sc=Sund}', "");
Expect(0, 7082, '\P{Is_Sc=Sund}', "");
Expect(1, 7082, '\P{^Is_Sc=Sund}', "");
Expect(0, 7039, '\p{Is_Sc=Sund}', "");
Expect(1, 7039, '\p{^Is_Sc=Sund}', "");
Expect(1, 7039, '\P{Is_Sc=Sund}', "");
Expect(0, 7039, '\P{^Is_Sc=Sund}', "");
Error('\p{Script=	:=nko}');
Error('\P{Script=	:=nko}');
Expect(1, 2042, '\p{Script=nko}', "");
Expect(0, 2042, '\p{^Script=nko}', "");
Expect(0, 2042, '\P{Script=nko}', "");
Expect(1, 2042, '\P{^Script=nko}', "");
Expect(0, 1983, '\p{Script=nko}', "");
Expect(1, 1983, '\p{^Script=nko}', "");
Expect(1, 1983, '\P{Script=nko}', "");
Expect(0, 1983, '\P{^Script=nko}', "");
Expect(1, 2042, '\p{Script= Nko}', "");
Expect(0, 2042, '\p{^Script= Nko}', "");
Expect(0, 2042, '\P{Script= Nko}', "");
Expect(1, 2042, '\P{^Script= Nko}', "");
Expect(0, 1983, '\p{Script= Nko}', "");
Expect(1, 1983, '\p{^Script= Nko}', "");
Expect(1, 1983, '\P{Script= Nko}', "");
Expect(0, 1983, '\P{^Script= Nko}', "");
Error('\p{Sc=-:=nkoo}');
Error('\P{Sc=-:=nkoo}');
Expect(1, 2042, '\p{Sc=nkoo}', "");
Expect(0, 2042, '\p{^Sc=nkoo}', "");
Expect(0, 2042, '\P{Sc=nkoo}', "");
Expect(1, 2042, '\P{^Sc=nkoo}', "");
Expect(0, 1983, '\p{Sc=nkoo}', "");
Expect(1, 1983, '\p{^Sc=nkoo}', "");
Expect(1, 1983, '\P{Sc=nkoo}', "");
Expect(0, 1983, '\P{^Sc=nkoo}', "");
Expect(1, 2042, '\p{Sc:	- nkoo}', "");
Expect(0, 2042, '\p{^Sc:	- nkoo}', "");
Expect(0, 2042, '\P{Sc:	- nkoo}', "");
Expect(1, 2042, '\P{^Sc:	- nkoo}', "");
Expect(0, 1983, '\p{Sc:	- nkoo}', "");
Expect(1, 1983, '\p{^Sc:	- nkoo}', "");
Expect(1, 1983, '\P{Sc:	- nkoo}', "");
Expect(0, 1983, '\P{^Sc:	- nkoo}', "");
Error('\p{Is_Script=:=-nko}');
Error('\P{Is_Script=:=-nko}');
Expect(1, 2042, '\p{Is_Script:   nko}', "");
Expect(0, 2042, '\p{^Is_Script:   nko}', "");
Expect(0, 2042, '\P{Is_Script:   nko}', "");
Expect(1, 2042, '\P{^Is_Script:   nko}', "");
Expect(0, 1983, '\p{Is_Script:   nko}', "");
Expect(1, 1983, '\p{^Is_Script:   nko}', "");
Expect(1, 1983, '\P{Is_Script:   nko}', "");
Expect(0, 1983, '\P{^Is_Script:   nko}', "");
Expect(1, 2042, '\p{Is_Script=__NKO}', "");
Expect(0, 2042, '\p{^Is_Script=__NKO}', "");
Expect(0, 2042, '\P{Is_Script=__NKO}', "");
Expect(1, 2042, '\P{^Is_Script=__NKO}', "");
Expect(0, 1983, '\p{Is_Script=__NKO}', "");
Expect(1, 1983, '\p{^Is_Script=__NKO}', "");
Expect(1, 1983, '\P{Is_Script=__NKO}', "");
Expect(0, 1983, '\P{^Is_Script=__NKO}', "");
Error('\p{Is_Sc=/a/ -Nkoo}');
Error('\P{Is_Sc=/a/ -Nkoo}');
Expect(1, 2042, '\p{Is_Sc=nkoo}', "");
Expect(0, 2042, '\p{^Is_Sc=nkoo}', "");
Expect(0, 2042, '\P{Is_Sc=nkoo}', "");
Expect(1, 2042, '\P{^Is_Sc=nkoo}', "");
Expect(0, 1983, '\p{Is_Sc=nkoo}', "");
Expect(1, 1983, '\p{^Is_Sc=nkoo}', "");
Expect(1, 1983, '\P{Is_Sc=nkoo}', "");
Expect(0, 1983, '\P{^Is_Sc=nkoo}', "");
Expect(1, 2042, '\p{Is_Sc=	NKOO}', "");
Expect(0, 2042, '\p{^Is_Sc=	NKOO}', "");
Expect(0, 2042, '\P{Is_Sc=	NKOO}', "");
Expect(1, 2042, '\P{^Is_Sc=	NKOO}', "");
Expect(0, 1983, '\p{Is_Sc=	NKOO}', "");
Expect(1, 1983, '\p{^Is_Sc=	NKOO}', "");
Expect(1, 1983, '\P{Is_Sc=	NKOO}', "");
Expect(0, 1983, '\P{^Is_Sc=	NKOO}', "");
Error('\p{Script=	:=Han}');
Error('\P{Script=	:=Han}');
Expect(1, 11929, '\p{Script=han}', "");
Expect(0, 11929, '\p{^Script=han}', "");
Expect(0, 11929, '\P{Script=han}', "");
Expect(1, 11929, '\P{^Script=han}', "");
Expect(0, 11903, '\p{Script=han}', "");
Expect(1, 11903, '\p{^Script=han}', "");
Expect(1, 11903, '\P{Script=han}', "");
Expect(0, 11903, '\P{^Script=han}', "");
Expect(1, 11929, '\p{Script=_-Han}', "");
Expect(0, 11929, '\p{^Script=_-Han}', "");
Expect(0, 11929, '\P{Script=_-Han}', "");
Expect(1, 11929, '\P{^Script=_-Han}', "");
Expect(0, 11903, '\p{Script=_-Han}', "");
Expect(1, 11903, '\p{^Script=_-Han}', "");
Expect(1, 11903, '\P{Script=_-Han}', "");
Expect(0, 11903, '\P{^Script=_-Han}', "");
Error('\p{Sc=_:=Hani}');
Error('\P{Sc=_:=Hani}');
Expect(1, 11929, '\p{Sc=hani}', "");
Expect(0, 11929, '\p{^Sc=hani}', "");
Expect(0, 11929, '\P{Sc=hani}', "");
Expect(1, 11929, '\P{^Sc=hani}', "");
Expect(0, 11903, '\p{Sc=hani}', "");
Expect(1, 11903, '\p{^Sc=hani}', "");
Expect(1, 11903, '\P{Sc=hani}', "");
Expect(0, 11903, '\P{^Sc=hani}', "");
Expect(1, 11929, '\p{Sc=_-Hani}', "");
Expect(0, 11929, '\p{^Sc=_-Hani}', "");
Expect(0, 11929, '\P{Sc=_-Hani}', "");
Expect(1, 11929, '\P{^Sc=_-Hani}', "");
Expect(0, 11903, '\p{Sc=_-Hani}', "");
Expect(1, 11903, '\p{^Sc=_-Hani}', "");
Expect(1, 11903, '\P{Sc=_-Hani}', "");
Expect(0, 11903, '\P{^Sc=_-Hani}', "");
Error('\p{Is_Script:		han:=}');
Error('\P{Is_Script:		han:=}');
Expect(1, 11929, '\p{Is_Script:han}', "");
Expect(0, 11929, '\p{^Is_Script:han}', "");
Expect(0, 11929, '\P{Is_Script:han}', "");
Expect(1, 11929, '\P{^Is_Script:han}', "");
Expect(0, 11903, '\p{Is_Script:han}', "");
Expect(1, 11903, '\p{^Is_Script:han}', "");
Expect(1, 11903, '\P{Is_Script:han}', "");
Expect(0, 11903, '\P{^Is_Script:han}', "");
Expect(1, 11929, '\p{Is_Script= -Han}', "");
Expect(0, 11929, '\p{^Is_Script= -Han}', "");
Expect(0, 11929, '\P{Is_Script= -Han}', "");
Expect(1, 11929, '\P{^Is_Script= -Han}', "");
Expect(0, 11903, '\p{Is_Script= -Han}', "");
Expect(1, 11903, '\p{^Is_Script= -Han}', "");
Expect(1, 11903, '\P{Is_Script= -Han}', "");
Expect(0, 11903, '\P{^Is_Script= -Han}', "");
Error('\p{Is_Sc=	:=hani}');
Error('\P{Is_Sc=	:=hani}');
Expect(1, 11929, '\p{Is_Sc:   hani}', "");
Expect(0, 11929, '\p{^Is_Sc:   hani}', "");
Expect(0, 11929, '\P{Is_Sc:   hani}', "");
Expect(1, 11929, '\P{^Is_Sc:   hani}', "");
Expect(0, 11903, '\p{Is_Sc:   hani}', "");
Expect(1, 11903, '\p{^Is_Sc:   hani}', "");
Expect(1, 11903, '\P{Is_Sc:   hani}', "");
Expect(0, 11903, '\P{^Is_Sc:   hani}', "");
Expect(1, 11929, '\p{Is_Sc=	Hani}', "");
Expect(0, 11929, '\p{^Is_Sc=	Hani}', "");
Expect(0, 11929, '\P{Is_Sc=	Hani}', "");
Expect(1, 11929, '\P{^Is_Sc=	Hani}', "");
Expect(0, 11903, '\p{Is_Sc=	Hani}', "");
Expect(1, 11903, '\p{^Is_Sc=	Hani}', "");
Expect(1, 11903, '\P{Is_Sc=	Hani}', "");
Expect(0, 11903, '\P{^Is_Sc=	Hani}', "");
Error('\p{Script=__GREEK/a/}');
Error('\P{Script=__GREEK/a/}');
Expect(1, 883, '\p{Script=greek}', "");
Expect(0, 883, '\p{^Script=greek}', "");
Expect(0, 883, '\P{Script=greek}', "");
Expect(1, 883, '\P{^Script=greek}', "");
Expect(0, 879, '\p{Script=greek}', "");
Expect(1, 879, '\p{^Script=greek}', "");
Expect(1, 879, '\P{Script=greek}', "");
Expect(0, 879, '\P{^Script=greek}', "");
Expect(1, 883, '\p{Script=-_Greek}', "");
Expect(0, 883, '\p{^Script=-_Greek}', "");
Expect(0, 883, '\P{Script=-_Greek}', "");
Expect(1, 883, '\P{^Script=-_Greek}', "");
Expect(0, 879, '\p{Script=-_Greek}', "");
Expect(1, 879, '\p{^Script=-_Greek}', "");
Expect(1, 879, '\P{Script=-_Greek}', "");
Expect(0, 879, '\P{^Script=-_Greek}', "");
Error('\p{Sc=	Grek:=}');
Error('\P{Sc=	Grek:=}');
Expect(1, 883, '\p{Sc=grek}', "");
Expect(0, 883, '\p{^Sc=grek}', "");
Expect(0, 883, '\P{Sc=grek}', "");
Expect(1, 883, '\P{^Sc=grek}', "");
Expect(0, 879, '\p{Sc=grek}', "");
Expect(1, 879, '\p{^Sc=grek}', "");
Expect(1, 879, '\P{Sc=grek}', "");
Expect(0, 879, '\P{^Sc=grek}', "");
Expect(1, 883, '\p{Sc=	_GREK}', "");
Expect(0, 883, '\p{^Sc=	_GREK}', "");
Expect(0, 883, '\P{Sc=	_GREK}', "");
Expect(1, 883, '\P{^Sc=	_GREK}', "");
Expect(0, 879, '\p{Sc=	_GREK}', "");
Expect(1, 879, '\p{^Sc=	_GREK}', "");
Expect(1, 879, '\P{Sc=	_GREK}', "");
Expect(0, 879, '\P{^Sc=	_GREK}', "");
Error('\p{Is_Script=:=greek}');
Error('\P{Is_Script=:=greek}');
Expect(1, 883, '\p{Is_Script=greek}', "");
Expect(0, 883, '\p{^Is_Script=greek}', "");
Expect(0, 883, '\P{Is_Script=greek}', "");
Expect(1, 883, '\P{^Is_Script=greek}', "");
Expect(0, 879, '\p{Is_Script=greek}', "");
Expect(1, 879, '\p{^Is_Script=greek}', "");
Expect(1, 879, '\P{Is_Script=greek}', "");
Expect(0, 879, '\P{^Is_Script=greek}', "");
Expect(1, 883, '\p{Is_Script=_-Greek}', "");
Expect(0, 883, '\p{^Is_Script=_-Greek}', "");
Expect(0, 883, '\P{Is_Script=_-Greek}', "");
Expect(1, 883, '\P{^Is_Script=_-Greek}', "");
Expect(0, 879, '\p{Is_Script=_-Greek}', "");
Expect(1, 879, '\p{^Is_Script=_-Greek}', "");
Expect(1, 879, '\P{Is_Script=_-Greek}', "");
Expect(0, 879, '\P{^Is_Script=_-Greek}', "");
Error('\p{Is_Sc=	_Grek/a/}');
Error('\P{Is_Sc=	_Grek/a/}');
Expect(1, 883, '\p{Is_Sc=grek}', "");
Expect(0, 883, '\p{^Is_Sc=grek}', "");
Expect(0, 883, '\P{Is_Sc=grek}', "");
Expect(1, 883, '\P{^Is_Sc=grek}', "");
Expect(0, 879, '\p{Is_Sc=grek}', "");
Expect(1, 879, '\p{^Is_Sc=grek}', "");
Expect(1, 879, '\P{Is_Sc=grek}', "");
Expect(0, 879, '\P{^Is_Sc=grek}', "");
Expect(1, 883, '\p{Is_Sc=_Grek}', "");
Expect(0, 883, '\p{^Is_Sc=_Grek}', "");
Expect(0, 883, '\P{Is_Sc=_Grek}', "");
Expect(1, 883, '\P{^Is_Sc=_Grek}', "");
Expect(0, 879, '\p{Is_Sc=_Grek}', "");
Expect(1, 879, '\p{^Is_Sc=_Grek}', "");
Expect(1, 879, '\P{Is_Sc=_Grek}', "");
Expect(0, 879, '\P{^Is_Sc=_Grek}', "");
Error('\p{Script=:= _Tamil}');
Error('\P{Script=:= _Tamil}');
Expect(1, 2947, '\p{Script=tamil}', "");
Expect(0, 2947, '\p{^Script=tamil}', "");
Expect(0, 2947, '\P{Script=tamil}', "");
Expect(1, 2947, '\P{^Script=tamil}', "");
Expect(0, 2945, '\p{Script=tamil}', "");
Expect(1, 2945, '\p{^Script=tamil}', "");
Expect(1, 2945, '\P{Script=tamil}', "");
Expect(0, 2945, '\P{^Script=tamil}', "");
Expect(1, 2947, '\p{Script:	 tamil}', "");
Expect(0, 2947, '\p{^Script:	 tamil}', "");
Expect(0, 2947, '\P{Script:	 tamil}', "");
Expect(1, 2947, '\P{^Script:	 tamil}', "");
Expect(0, 2945, '\p{Script:	 tamil}', "");
Expect(1, 2945, '\p{^Script:	 tamil}', "");
Expect(1, 2945, '\P{Script:	 tamil}', "");
Expect(0, 2945, '\P{^Script:	 tamil}', "");
Error('\p{Sc=	/a/taml}');
Error('\P{Sc=	/a/taml}');
Expect(1, 2947, '\p{Sc: taml}', "");
Expect(0, 2947, '\p{^Sc: taml}', "");
Expect(0, 2947, '\P{Sc: taml}', "");
Expect(1, 2947, '\P{^Sc: taml}', "");
Expect(0, 2945, '\p{Sc: taml}', "");
Expect(1, 2945, '\p{^Sc: taml}', "");
Expect(1, 2945, '\P{Sc: taml}', "");
Expect(0, 2945, '\P{^Sc: taml}', "");
Expect(1, 2947, '\p{Sc= _TAML}', "");
Expect(0, 2947, '\p{^Sc= _TAML}', "");
Expect(0, 2947, '\P{Sc= _TAML}', "");
Expect(1, 2947, '\P{^Sc= _TAML}', "");
Expect(0, 2945, '\p{Sc= _TAML}', "");
Expect(1, 2945, '\p{^Sc= _TAML}', "");
Expect(1, 2945, '\P{Sc= _TAML}', "");
Expect(0, 2945, '\P{^Sc= _TAML}', "");
Error('\p{Is_Script=/a/		Tamil}');
Error('\P{Is_Script=/a/		Tamil}');
Expect(1, 2947, '\p{Is_Script=tamil}', "");
Expect(0, 2947, '\p{^Is_Script=tamil}', "");
Expect(0, 2947, '\P{Is_Script=tamil}', "");
Expect(1, 2947, '\P{^Is_Script=tamil}', "");
Expect(0, 2945, '\p{Is_Script=tamil}', "");
Expect(1, 2945, '\p{^Is_Script=tamil}', "");
Expect(1, 2945, '\P{Is_Script=tamil}', "");
Expect(0, 2945, '\P{^Is_Script=tamil}', "");
Expect(1, 2947, '\p{Is_Script:    Tamil}', "");
Expect(0, 2947, '\p{^Is_Script:    Tamil}', "");
Expect(0, 2947, '\P{Is_Script:    Tamil}', "");
Expect(1, 2947, '\P{^Is_Script:    Tamil}', "");
Expect(0, 2945, '\p{Is_Script:    Tamil}', "");
Expect(1, 2945, '\p{^Is_Script:    Tamil}', "");
Expect(1, 2945, '\P{Is_Script:    Tamil}', "");
Expect(0, 2945, '\P{^Is_Script:    Tamil}', "");
Error('\p{Is_Sc=	:=taml}');
Error('\P{Is_Sc=	:=taml}');
Expect(1, 2947, '\p{Is_Sc=taml}', "");
Expect(0, 2947, '\p{^Is_Sc=taml}', "");
Expect(0, 2947, '\P{Is_Sc=taml}', "");
Expect(1, 2947, '\P{^Is_Sc=taml}', "");
Expect(0, 2945, '\p{Is_Sc=taml}', "");
Expect(1, 2945, '\p{^Is_Sc=taml}', "");
Expect(1, 2945, '\P{Is_Sc=taml}', "");
Expect(0, 2945, '\P{^Is_Sc=taml}', "");
Expect(1, 2947, '\p{Is_Sc= Taml}', "");
Expect(0, 2947, '\p{^Is_Sc= Taml}', "");
Expect(0, 2947, '\P{Is_Sc= Taml}', "");
Expect(1, 2947, '\P{^Is_Sc= Taml}', "");
Expect(0, 2945, '\p{Is_Sc= Taml}', "");
Expect(1, 2945, '\p{^Is_Sc= Taml}', "");
Expect(1, 2945, '\P{Is_Sc= Taml}', "");
Expect(0, 2945, '\P{^Is_Sc= Taml}', "");
Error('\p{Script=_ kayah_LI:=}');
Error('\P{Script=_ kayah_LI:=}');
Expect(1, 43311, '\p{Script=kayahli}', "");
Expect(0, 43311, '\p{^Script=kayahli}', "");
Expect(0, 43311, '\P{Script=kayahli}', "");
Expect(1, 43311, '\P{^Script=kayahli}', "");
Expect(0, 43263, '\p{Script=kayahli}', "");
Expect(1, 43263, '\p{^Script=kayahli}', "");
Expect(1, 43263, '\P{Script=kayahli}', "");
Expect(0, 43263, '\P{^Script=kayahli}', "");
Expect(1, 43311, '\p{Script: -_kayah_Li}', "");
Expect(0, 43311, '\p{^Script: -_kayah_Li}', "");
Expect(0, 43311, '\P{Script: -_kayah_Li}', "");
Expect(1, 43311, '\P{^Script: -_kayah_Li}', "");
Expect(0, 43263, '\p{Script: -_kayah_Li}', "");
Expect(1, 43263, '\p{^Script: -_kayah_Li}', "");
Expect(1, 43263, '\P{Script: -_kayah_Li}', "");
Expect(0, 43263, '\P{^Script: -_kayah_Li}', "");
Error('\p{Sc=_-KALI:=}');
Error('\P{Sc=_-KALI:=}');
Expect(1, 43311, '\p{Sc=kali}', "");
Expect(0, 43311, '\p{^Sc=kali}', "");
Expect(0, 43311, '\P{Sc=kali}', "");
Expect(1, 43311, '\P{^Sc=kali}', "");
Expect(0, 43263, '\p{Sc=kali}', "");
Expect(1, 43263, '\p{^Sc=kali}', "");
Expect(1, 43263, '\P{Sc=kali}', "");
Expect(0, 43263, '\P{^Sc=kali}', "");
Expect(1, 43311, '\p{Sc= 	Kali}', "");
Expect(0, 43311, '\p{^Sc= 	Kali}', "");
Expect(0, 43311, '\P{Sc= 	Kali}', "");
Expect(1, 43311, '\P{^Sc= 	Kali}', "");
Expect(0, 43263, '\p{Sc= 	Kali}', "");
Expect(1, 43263, '\p{^Sc= 	Kali}', "");
Expect(1, 43263, '\P{Sc= 	Kali}', "");
Expect(0, 43263, '\P{^Sc= 	Kali}', "");
Error('\p{Is_Script=:=KAYAHLi}');
Error('\P{Is_Script=:=KAYAHLi}');
Expect(1, 43311, '\p{Is_Script: kayahli}', "");
Expect(0, 43311, '\p{^Is_Script: kayahli}', "");
Expect(0, 43311, '\P{Is_Script: kayahli}', "");
Expect(1, 43311, '\P{^Is_Script: kayahli}', "");
Expect(0, 43263, '\p{Is_Script: kayahli}', "");
Expect(1, 43263, '\p{^Is_Script: kayahli}', "");
Expect(1, 43263, '\P{Is_Script: kayahli}', "");
Expect(0, 43263, '\P{^Is_Script: kayahli}', "");
Expect(1, 43311, '\p{Is_Script:    _Kayah-LI}', "");
Expect(0, 43311, '\p{^Is_Script:    _Kayah-LI}', "");
Expect(0, 43311, '\P{Is_Script:    _Kayah-LI}', "");
Expect(1, 43311, '\P{^Is_Script:    _Kayah-LI}', "");
Expect(0, 43263, '\p{Is_Script:    _Kayah-LI}', "");
Expect(1, 43263, '\p{^Is_Script:    _Kayah-LI}', "");
Expect(1, 43263, '\P{Is_Script:    _Kayah-LI}', "");
Expect(0, 43263, '\P{^Is_Script:    _Kayah-LI}', "");
Error('\p{Is_Sc: /a/_	Kali}');
Error('\P{Is_Sc: /a/_	Kali}');
Expect(1, 43311, '\p{Is_Sc=kali}', "");
Expect(0, 43311, '\p{^Is_Sc=kali}', "");
Expect(0, 43311, '\P{Is_Sc=kali}', "");
Expect(1, 43311, '\P{^Is_Sc=kali}', "");
Expect(0, 43263, '\p{Is_Sc=kali}', "");
Expect(1, 43263, '\p{^Is_Sc=kali}', "");
Expect(1, 43263, '\P{Is_Sc=kali}', "");
Expect(0, 43263, '\P{^Is_Sc=kali}', "");
Expect(1, 43311, '\p{Is_Sc=  Kali}', "");
Expect(0, 43311, '\p{^Is_Sc=  Kali}', "");
Expect(0, 43311, '\P{Is_Sc=  Kali}', "");
Expect(1, 43311, '\P{^Is_Sc=  Kali}', "");
Expect(0, 43263, '\p{Is_Sc=  Kali}', "");
Expect(1, 43263, '\p{^Is_Sc=  Kali}', "");
Expect(1, 43263, '\P{Is_Sc=  Kali}', "");
Expect(0, 43263, '\P{^Is_Sc=  Kali}', "");
Error('\p{Script=-_Thai:=}');
Error('\P{Script=-_Thai:=}');
Expect(1, 3642, '\p{Script=thai}', "");
Expect(0, 3642, '\p{^Script=thai}', "");
Expect(0, 3642, '\P{Script=thai}', "");
Expect(1, 3642, '\P{^Script=thai}', "");
Expect(0, 3584, '\p{Script=thai}', "");
Expect(1, 3584, '\p{^Script=thai}', "");
Expect(1, 3584, '\P{Script=thai}', "");
Expect(0, 3584, '\P{^Script=thai}', "");
Expect(1, 3642, '\p{Script=	-thai}', "");
Expect(0, 3642, '\p{^Script=	-thai}', "");
Expect(0, 3642, '\P{Script=	-thai}', "");
Expect(1, 3642, '\P{^Script=	-thai}', "");
Expect(0, 3584, '\p{Script=	-thai}', "");
Expect(1, 3584, '\p{^Script=	-thai}', "");
Expect(1, 3584, '\P{Script=	-thai}', "");
Expect(0, 3584, '\P{^Script=	-thai}', "");
Error('\p{Sc=/a/_	thai}');
Error('\P{Sc=/a/_	thai}');
Expect(1, 3642, '\p{Sc:   thai}', "");
Expect(0, 3642, '\p{^Sc:   thai}', "");
Expect(0, 3642, '\P{Sc:   thai}', "");
Expect(1, 3642, '\P{^Sc:   thai}', "");
Expect(0, 3584, '\p{Sc:   thai}', "");
Expect(1, 3584, '\p{^Sc:   thai}', "");
Expect(1, 3584, '\P{Sc:   thai}', "");
Expect(0, 3584, '\P{^Sc:   thai}', "");
Expect(1, 3642, '\p{Sc:	_THAI}', "");
Expect(0, 3642, '\p{^Sc:	_THAI}', "");
Expect(0, 3642, '\P{Sc:	_THAI}', "");
Expect(1, 3642, '\P{^Sc:	_THAI}', "");
Expect(0, 3584, '\p{Sc:	_THAI}', "");
Expect(1, 3584, '\p{^Sc:	_THAI}', "");
Expect(1, 3584, '\P{Sc:	_THAI}', "");
Expect(0, 3584, '\P{^Sc:	_THAI}', "");
Error('\p{Is_Script= THAI/a/}');
Error('\P{Is_Script= THAI/a/}');
Expect(1, 3642, '\p{Is_Script=thai}', "");
Expect(0, 3642, '\p{^Is_Script=thai}', "");
Expect(0, 3642, '\P{Is_Script=thai}', "");
Expect(1, 3642, '\P{^Is_Script=thai}', "");
Expect(0, 3584, '\p{Is_Script=thai}', "");
Expect(1, 3584, '\p{^Is_Script=thai}', "");
Expect(1, 3584, '\P{Is_Script=thai}', "");
Expect(0, 3584, '\P{^Is_Script=thai}', "");
Expect(1, 3642, '\p{Is_Script=		THAI}', "");
Expect(0, 3642, '\p{^Is_Script=		THAI}', "");
Expect(0, 3642, '\P{Is_Script=		THAI}', "");
Expect(1, 3642, '\P{^Is_Script=		THAI}', "");
Expect(0, 3584, '\p{Is_Script=		THAI}', "");
Expect(1, 3584, '\p{^Is_Script=		THAI}', "");
Expect(1, 3584, '\P{Is_Script=		THAI}', "");
Expect(0, 3584, '\P{^Is_Script=		THAI}', "");
Error('\p{Is_Sc=:=	 Thai}');
Error('\P{Is_Sc=:=	 Thai}');
Expect(1, 3642, '\p{Is_Sc=thai}', "");
Expect(0, 3642, '\p{^Is_Sc=thai}', "");
Expect(0, 3642, '\P{Is_Sc=thai}', "");
Expect(1, 3642, '\P{^Is_Sc=thai}', "");
Expect(0, 3584, '\p{Is_Sc=thai}', "");
Expect(1, 3584, '\p{^Is_Sc=thai}', "");
Expect(1, 3584, '\P{Is_Sc=thai}', "");
Expect(0, 3584, '\P{^Is_Sc=thai}', "");
Expect(1, 3642, '\p{Is_Sc=  THAI}', "");
Expect(0, 3642, '\p{^Is_Sc=  THAI}', "");
Expect(0, 3642, '\P{Is_Sc=  THAI}', "");
Expect(1, 3642, '\P{^Is_Sc=  THAI}', "");
Expect(0, 3584, '\p{Is_Sc=  THAI}', "");
Expect(1, 3584, '\p{^Is_Sc=  THAI}', "");
Expect(1, 3584, '\P{Is_Sc=  THAI}', "");
Expect(0, 3584, '\P{^Is_Sc=  THAI}', "");
Error('\p{Ideographic=__Yes:=}');
Error('\P{Ideographic=__Yes:=}');
Expect(1, 12295, '\p{Ideographic=yes}', "");
Expect(0, 12295, '\p{^Ideographic=yes}', "");
Expect(0, 12295, '\P{Ideographic=yes}', "");
Expect(1, 12295, '\P{^Ideographic=yes}', "");
Expect(0, 12293, '\p{Ideographic=yes}', "");
Expect(1, 12293, '\p{^Ideographic=yes}', "");
Expect(1, 12293, '\P{Ideographic=yes}', "");
Expect(0, 12293, '\P{^Ideographic=yes}', "");
Expect(1, 12295, '\p{Ideographic=	YES}', "");
Expect(0, 12295, '\p{^Ideographic=	YES}', "");
Expect(0, 12295, '\P{Ideographic=	YES}', "");
Expect(1, 12295, '\P{^Ideographic=	YES}', "");
Expect(0, 12293, '\p{Ideographic=	YES}', "");
Expect(1, 12293, '\p{^Ideographic=	YES}', "");
Expect(1, 12293, '\P{Ideographic=	YES}', "");
Expect(0, 12293, '\P{^Ideographic=	YES}', "");
Error('\p{Ideo=/a/_Y}');
Error('\P{Ideo=/a/_Y}');
Expect(1, 12295, '\p{Ideo=y}', "");
Expect(0, 12295, '\p{^Ideo=y}', "");
Expect(0, 12295, '\P{Ideo=y}', "");
Expect(1, 12295, '\P{^Ideo=y}', "");
Expect(0, 12293, '\p{Ideo=y}', "");
Expect(1, 12293, '\p{^Ideo=y}', "");
Expect(1, 12293, '\P{Ideo=y}', "");
Expect(0, 12293, '\P{^Ideo=y}', "");
Expect(1, 12295, '\p{Ideo:   	 Y}', "");
Expect(0, 12295, '\p{^Ideo:   	 Y}', "");
Expect(0, 12295, '\P{Ideo:   	 Y}', "");
Expect(1, 12295, '\P{^Ideo:   	 Y}', "");
Expect(0, 12293, '\p{Ideo:   	 Y}', "");
Expect(1, 12293, '\p{^Ideo:   	 Y}', "");
Expect(1, 12293, '\P{Ideo:   	 Y}', "");
Expect(0, 12293, '\P{^Ideo:   	 Y}', "");
Error('\p{Is_Ideographic=:=--T}');
Error('\P{Is_Ideographic=:=--T}');
Expect(1, 12295, '\p{Is_Ideographic:t}', "");
Expect(0, 12295, '\p{^Is_Ideographic:t}', "");
Expect(0, 12295, '\P{Is_Ideographic:t}', "");
Expect(1, 12295, '\P{^Is_Ideographic:t}', "");
Expect(0, 12293, '\p{Is_Ideographic:t}', "");
Expect(1, 12293, '\p{^Is_Ideographic:t}', "");
Expect(1, 12293, '\P{Is_Ideographic:t}', "");
Expect(0, 12293, '\P{^Is_Ideographic:t}', "");
Expect(1, 12295, '\p{Is_Ideographic=__t}', "");
Expect(0, 12295, '\p{^Is_Ideographic=__t}', "");
Expect(0, 12295, '\P{Is_Ideographic=__t}', "");
Expect(1, 12295, '\P{^Is_Ideographic=__t}', "");
Expect(0, 12293, '\p{Is_Ideographic=__t}', "");
Expect(1, 12293, '\p{^Is_Ideographic=__t}', "");
Expect(1, 12293, '\P{Is_Ideographic=__t}', "");
Expect(0, 12293, '\P{^Is_Ideographic=__t}', "");
Error('\p{Is_Ideo=:=TRUE}');
Error('\P{Is_Ideo=:=TRUE}');
Expect(1, 12295, '\p{Is_Ideo=true}', "");
Expect(0, 12295, '\p{^Is_Ideo=true}', "");
Expect(0, 12295, '\P{Is_Ideo=true}', "");
Expect(1, 12295, '\P{^Is_Ideo=true}', "");
Expect(0, 12293, '\p{Is_Ideo=true}', "");
Expect(1, 12293, '\p{^Is_Ideo=true}', "");
Expect(1, 12293, '\P{Is_Ideo=true}', "");
Expect(0, 12293, '\P{^Is_Ideo=true}', "");
Expect(1, 12295, '\p{Is_Ideo=-True}', "");
Expect(0, 12295, '\p{^Is_Ideo=-True}', "");
Expect(0, 12295, '\P{Is_Ideo=-True}', "");
Expect(1, 12295, '\P{^Is_Ideo=-True}', "");
Expect(0, 12293, '\p{Is_Ideo=-True}', "");
Expect(1, 12293, '\p{^Is_Ideo=-True}', "");
Expect(1, 12293, '\P{Is_Ideo=-True}', "");
Expect(0, 12293, '\P{^Is_Ideo=-True}', "");
Error('\p{Ideographic=_-No/a/}');
Error('\P{Ideographic=_-No/a/}');
Expect(1, 12293, '\p{Ideographic=no}', "");
Expect(0, 12293, '\p{^Ideographic=no}', "");
Expect(0, 12293, '\P{Ideographic=no}', "");
Expect(1, 12293, '\P{^Ideographic=no}', "");
Expect(0, 12295, '\p{Ideographic=no}', "");
Expect(1, 12295, '\p{^Ideographic=no}', "");
Expect(1, 12295, '\P{Ideographic=no}', "");
Expect(0, 12295, '\P{^Ideographic=no}', "");
Expect(1, 12293, '\p{Ideographic=-no}', "");
Expect(0, 12293, '\p{^Ideographic=-no}', "");
Expect(0, 12293, '\P{Ideographic=-no}', "");
Expect(1, 12293, '\P{^Ideographic=-no}', "");
Expect(0, 12295, '\p{Ideographic=-no}', "");
Expect(1, 12295, '\p{^Ideographic=-no}', "");
Expect(1, 12295, '\P{Ideographic=-no}', "");
Expect(0, 12295, '\P{^Ideographic=-no}', "");
Error('\p{Ideo=	N/a/}');
Error('\P{Ideo=	N/a/}');
Expect(1, 12293, '\p{Ideo=n}', "");
Expect(0, 12293, '\p{^Ideo=n}', "");
Expect(0, 12293, '\P{Ideo=n}', "");
Expect(1, 12293, '\P{^Ideo=n}', "");
Expect(0, 12295, '\p{Ideo=n}', "");
Expect(1, 12295, '\p{^Ideo=n}', "");
Expect(1, 12295, '\P{Ideo=n}', "");
Expect(0, 12295, '\P{^Ideo=n}', "");
Expect(1, 12293, '\p{Ideo=--n}', "");
Expect(0, 12293, '\p{^Ideo=--n}', "");
Expect(0, 12293, '\P{Ideo=--n}', "");
Expect(1, 12293, '\P{^Ideo=--n}', "");
Expect(0, 12295, '\p{Ideo=--n}', "");
Expect(1, 12295, '\p{^Ideo=--n}', "");
Expect(1, 12295, '\P{Ideo=--n}', "");
Expect(0, 12295, '\P{^Ideo=--n}', "");
Error('\p{Is_Ideographic=:=	f}');
Error('\P{Is_Ideographic=:=	f}');
Expect(1, 12293, '\p{Is_Ideographic=f}', "");
Expect(0, 12293, '\p{^Is_Ideographic=f}', "");
Expect(0, 12293, '\P{Is_Ideographic=f}', "");
Expect(1, 12293, '\P{^Is_Ideographic=f}', "");
Expect(0, 12295, '\p{Is_Ideographic=f}', "");
Expect(1, 12295, '\p{^Is_Ideographic=f}', "");
Expect(1, 12295, '\P{Is_Ideographic=f}', "");
Expect(0, 12295, '\P{^Is_Ideographic=f}', "");
Expect(1, 12293, '\p{Is_Ideographic= -f}', "");
Expect(0, 12293, '\p{^Is_Ideographic= -f}', "");
Expect(0, 12293, '\P{Is_Ideographic= -f}', "");
Expect(1, 12293, '\P{^Is_Ideographic= -f}', "");
Expect(0, 12295, '\p{Is_Ideographic= -f}', "");
Expect(1, 12295, '\p{^Is_Ideographic= -f}', "");
Expect(1, 12295, '\P{Is_Ideographic= -f}', "");
Expect(0, 12295, '\P{^Is_Ideographic= -f}', "");
Error('\p{Is_Ideo: _/a/False}');
Error('\P{Is_Ideo: _/a/False}');
Expect(1, 12293, '\p{Is_Ideo=false}', "");
Expect(0, 12293, '\p{^Is_Ideo=false}', "");
Expect(0, 12293, '\P{Is_Ideo=false}', "");
Expect(1, 12293, '\P{^Is_Ideo=false}', "");
Expect(0, 12295, '\p{Is_Ideo=false}', "");
Expect(1, 12295, '\p{^Is_Ideo=false}', "");
Expect(1, 12295, '\P{Is_Ideo=false}', "");
Expect(0, 12295, '\P{^Is_Ideo=false}', "");
Expect(1, 12293, '\p{Is_Ideo=		False}', "");
Expect(0, 12293, '\p{^Is_Ideo=		False}', "");
Expect(0, 12293, '\P{Is_Ideo=		False}', "");
Expect(1, 12293, '\P{^Is_Ideo=		False}', "");
Expect(0, 12295, '\p{Is_Ideo=		False}', "");
Expect(1, 12295, '\p{^Is_Ideo=		False}', "");
Expect(1, 12295, '\P{Is_Ideo=		False}', "");
Expect(0, 12295, '\P{^Is_Ideo=		False}', "");
Error('\p{Other_Grapheme_Extend=- Yes/a/}');
Error('\P{Other_Grapheme_Extend=- Yes/a/}');
Expect(1, 2494, '\p{Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend:   yes}', 'deprecated');
Expect(1, 2494, '\p{Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend= _Yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend= _Yes}', 'deprecated');
Error('\p{OGr_Ext:_Y/a/}');
Error('\P{OGr_Ext:_Y/a/}');
Expect(1, 2494, '\p{OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\p{OGr_Ext=_-Y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=_-Y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=_-Y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=_-Y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=_-Y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=_-Y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=_-Y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=_-Y}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend=:=_T}');
Error('\P{Is_Other_Grapheme_Extend=:=_T}');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Error('\p{Is_OGr_Ext=/a/	true}');
Error('\P{Is_OGr_Ext=/a/	true}');
Expect(1, 2494, '\p{Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2494, '\p{^Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2494, '\P{Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2494, '\P{^Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2493, '\p{Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2493, '\p{^Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2493, '\P{Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2493, '\P{^Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2494, '\p{Is_OGr_Ext=_ True}', 'deprecated');
Expect(0, 2494, '\p{^Is_OGr_Ext=_ True}', 'deprecated');
Expect(0, 2494, '\P{Is_OGr_Ext=_ True}', 'deprecated');
Expect(1, 2494, '\P{^Is_OGr_Ext=_ True}', 'deprecated');
Expect(0, 2493, '\p{Is_OGr_Ext=_ True}', 'deprecated');
Expect(1, 2493, '\p{^Is_OGr_Ext=_ True}', 'deprecated');
Expect(1, 2493, '\P{Is_OGr_Ext=_ True}', 'deprecated');
Expect(0, 2493, '\P{^Is_OGr_Ext=_ True}', 'deprecated');
Error('\p{Other_Grapheme_Extend:_/a/NO}');
Error('\P{Other_Grapheme_Extend:_/a/NO}');
Expect(1, 2493, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\p{Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend=_	No}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend=_	No}', 'deprecated');
Error('\p{OGr_Ext=_ N/a/}');
Error('\P{OGr_Ext=_ N/a/}');
Expect(1, 2493, '\p{OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\p{OGr_Ext=		n}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=		n}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=		n}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=		n}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=		n}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=		n}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=		n}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=		n}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend=- F:=}');
Error('\P{Is_Other_Grapheme_Extend=- F:=}');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend=--F}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend=--F}', 'deprecated');
Error('\p{Is_OGr_Ext=:=false}');
Error('\P{Is_OGr_Ext=:=false}');
Expect(1, 2493, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\p{Is_OGr_Ext= 	False}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext= 	False}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext= 	False}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext= 	False}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext= 	False}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext= 	False}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext= 	False}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext= 	False}', 'deprecated');
Error('\p{Grapheme_Link=Yes}');
Error('\P{Grapheme_Link=Yes}');
Error('\p{Gr_Link=Y}');
Error('\P{Gr_Link=Y}');
Error('\p{Is_Grapheme_Link=T}');
Error('\P{Is_Grapheme_Link=T}');
Error('\p{Is_Gr_Link=True}');
Error('\P{Is_Gr_Link=True}');
Error('\p{Grapheme_Link=No}');
Error('\P{Grapheme_Link=No}');
Error('\p{Gr_Link=N}');
Error('\P{Gr_Link=N}');
Error('\p{Is_Grapheme_Link:   F}');
Error('\P{Is_Grapheme_Link:   F}');
Error('\p{Is_Gr_Link=False}');
Error('\P{Is_Gr_Link=False}');
Error('\p{Bidi_Control=_/a/yes}');
Error('\P{Bidi_Control=_/a/yes}');
Expect(1, 8207, '\p{Bidi_Control=yes}', "");
Expect(0, 8207, '\p{^Bidi_Control=yes}', "");
Expect(0, 8207, '\P{Bidi_Control=yes}', "");
Expect(1, 8207, '\P{^Bidi_Control=yes}', "");
Expect(0, 8205, '\p{Bidi_Control=yes}', "");
Expect(1, 8205, '\p{^Bidi_Control=yes}', "");
Expect(1, 8205, '\P{Bidi_Control=yes}', "");
Expect(0, 8205, '\P{^Bidi_Control=yes}', "");
Expect(1, 8207, '\p{Bidi_Control:		Yes}', "");
Expect(0, 8207, '\p{^Bidi_Control:		Yes}', "");
Expect(0, 8207, '\P{Bidi_Control:		Yes}', "");
Expect(1, 8207, '\P{^Bidi_Control:		Yes}', "");
Expect(0, 8205, '\p{Bidi_Control:		Yes}', "");
Expect(1, 8205, '\p{^Bidi_Control:		Yes}', "");
Expect(1, 8205, '\P{Bidi_Control:		Yes}', "");
Expect(0, 8205, '\P{^Bidi_Control:		Yes}', "");
Error('\p{Bidi_C=/a/ _Y}');
Error('\P{Bidi_C=/a/ _Y}');
Expect(1, 8207, '\p{Bidi_C=y}', "");
Expect(0, 8207, '\p{^Bidi_C=y}', "");
Expect(0, 8207, '\P{Bidi_C=y}', "");
Expect(1, 8207, '\P{^Bidi_C=y}', "");
Expect(0, 8205, '\p{Bidi_C=y}', "");
Expect(1, 8205, '\p{^Bidi_C=y}', "");
Expect(1, 8205, '\P{Bidi_C=y}', "");
Expect(0, 8205, '\P{^Bidi_C=y}', "");
Expect(1, 8207, '\p{Bidi_C=_y}', "");
Expect(0, 8207, '\p{^Bidi_C=_y}', "");
Expect(0, 8207, '\P{Bidi_C=_y}', "");
Expect(1, 8207, '\P{^Bidi_C=_y}', "");
Expect(0, 8205, '\p{Bidi_C=_y}', "");
Expect(1, 8205, '\p{^Bidi_C=_y}', "");
Expect(1, 8205, '\P{Bidi_C=_y}', "");
Expect(0, 8205, '\P{^Bidi_C=_y}', "");
Error('\p{Is_Bidi_Control:			T/a/}');
Error('\P{Is_Bidi_Control:			T/a/}');
Expect(1, 8207, '\p{Is_Bidi_Control=t}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control=t}', "");
Expect(0, 8207, '\P{Is_Bidi_Control=t}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control=t}', "");
Expect(0, 8205, '\p{Is_Bidi_Control=t}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control=t}', "");
Expect(1, 8205, '\P{Is_Bidi_Control=t}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control=t}', "");
Expect(1, 8207, '\p{Is_Bidi_Control=_-t}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control=_-t}', "");
Expect(0, 8207, '\P{Is_Bidi_Control=_-t}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control=_-t}', "");
Expect(0, 8205, '\p{Is_Bidi_Control=_-t}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control=_-t}', "");
Expect(1, 8205, '\P{Is_Bidi_Control=_-t}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control=_-t}', "");
Error('\p{Is_Bidi_C:   -True:=}');
Error('\P{Is_Bidi_C:   -True:=}');
Expect(1, 8207, '\p{Is_Bidi_C=true}', "");
Expect(0, 8207, '\p{^Is_Bidi_C=true}', "");
Expect(0, 8207, '\P{Is_Bidi_C=true}', "");
Expect(1, 8207, '\P{^Is_Bidi_C=true}', "");
Expect(0, 8205, '\p{Is_Bidi_C=true}', "");
Expect(1, 8205, '\p{^Is_Bidi_C=true}', "");
Expect(1, 8205, '\P{Is_Bidi_C=true}', "");
Expect(0, 8205, '\P{^Is_Bidi_C=true}', "");
Expect(1, 8207, '\p{Is_Bidi_C=--true}', "");
Expect(0, 8207, '\p{^Is_Bidi_C=--true}', "");
Expect(0, 8207, '\P{Is_Bidi_C=--true}', "");
Expect(1, 8207, '\P{^Is_Bidi_C=--true}', "");
Expect(0, 8205, '\p{Is_Bidi_C=--true}', "");
Expect(1, 8205, '\p{^Is_Bidi_C=--true}', "");
Expect(1, 8205, '\P{Is_Bidi_C=--true}', "");
Expect(0, 8205, '\P{^Is_Bidi_C=--true}', "");
Error('\p{Bidi_Control=	No/a/}');
Error('\P{Bidi_Control=	No/a/}');
Expect(1, 8205, '\p{Bidi_Control:	no}', "");
Expect(0, 8205, '\p{^Bidi_Control:	no}', "");
Expect(0, 8205, '\P{Bidi_Control:	no}', "");
Expect(1, 8205, '\P{^Bidi_Control:	no}', "");
Expect(0, 8207, '\p{Bidi_Control:	no}', "");
Expect(1, 8207, '\p{^Bidi_Control:	no}', "");
Expect(1, 8207, '\P{Bidi_Control:	no}', "");
Expect(0, 8207, '\P{^Bidi_Control:	no}', "");
Expect(1, 8205, '\p{Bidi_Control:	--NO}', "");
Expect(0, 8205, '\p{^Bidi_Control:	--NO}', "");
Expect(0, 8205, '\P{Bidi_Control:	--NO}', "");
Expect(1, 8205, '\P{^Bidi_Control:	--NO}', "");
Expect(0, 8207, '\p{Bidi_Control:	--NO}', "");
Expect(1, 8207, '\p{^Bidi_Control:	--NO}', "");
Expect(1, 8207, '\P{Bidi_Control:	--NO}', "");
Expect(0, 8207, '\P{^Bidi_Control:	--NO}', "");
Error('\p{Bidi_C=	N:=}');
Error('\P{Bidi_C=	N:=}');
Expect(1, 8205, '\p{Bidi_C:	n}', "");
Expect(0, 8205, '\p{^Bidi_C:	n}', "");
Expect(0, 8205, '\P{Bidi_C:	n}', "");
Expect(1, 8205, '\P{^Bidi_C:	n}', "");
Expect(0, 8207, '\p{Bidi_C:	n}', "");
Expect(1, 8207, '\p{^Bidi_C:	n}', "");
Expect(1, 8207, '\P{Bidi_C:	n}', "");
Expect(0, 8207, '\P{^Bidi_C:	n}', "");
Expect(1, 8205, '\p{Bidi_C=	-N}', "");
Expect(0, 8205, '\p{^Bidi_C=	-N}', "");
Expect(0, 8205, '\P{Bidi_C=	-N}', "");
Expect(1, 8205, '\P{^Bidi_C=	-N}', "");
Expect(0, 8207, '\p{Bidi_C=	-N}', "");
Expect(1, 8207, '\p{^Bidi_C=	-N}', "");
Expect(1, 8207, '\P{Bidi_C=	-N}', "");
Expect(0, 8207, '\P{^Bidi_C=	-N}', "");
Error('\p{Is_Bidi_Control=--f:=}');
Error('\P{Is_Bidi_Control=--f:=}');
Expect(1, 8205, '\p{Is_Bidi_Control=f}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control=f}', "");
Expect(0, 8205, '\P{Is_Bidi_Control=f}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control=f}', "");
Expect(0, 8207, '\p{Is_Bidi_Control=f}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control=f}', "");
Expect(1, 8207, '\P{Is_Bidi_Control=f}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control=f}', "");
Expect(1, 8205, '\p{Is_Bidi_Control=_F}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control=_F}', "");
Expect(0, 8205, '\P{Is_Bidi_Control=_F}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control=_F}', "");
Expect(0, 8207, '\p{Is_Bidi_Control=_F}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control=_F}', "");
Expect(1, 8207, '\P{Is_Bidi_Control=_F}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control=_F}', "");
Error('\p{Is_Bidi_C= /a/FALSE}');
Error('\P{Is_Bidi_C= /a/FALSE}');
Expect(1, 8205, '\p{Is_Bidi_C=false}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=false}', "");
Expect(0, 8205, '\P{Is_Bidi_C=false}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=false}', "");
Expect(0, 8207, '\p{Is_Bidi_C=false}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=false}', "");
Expect(1, 8207, '\P{Is_Bidi_C=false}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=false}', "");
Expect(1, 8205, '\p{Is_Bidi_C=_FALSE}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=_FALSE}', "");
Expect(0, 8205, '\P{Is_Bidi_C=_FALSE}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=_FALSE}', "");
Expect(0, 8207, '\p{Is_Bidi_C=_FALSE}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=_FALSE}', "");
Expect(1, 8207, '\P{Is_Bidi_C=_FALSE}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=_FALSE}', "");
Error('\p{ID_Continue=:= _YES}');
Error('\P{ID_Continue=:= _YES}');
Expect(1, 57, '\p{ID_Continue=yes}', "");
Expect(0, 57, '\p{^ID_Continue=yes}', "");
Expect(0, 57, '\P{ID_Continue=yes}', "");
Expect(1, 57, '\P{^ID_Continue=yes}', "");
Expect(0, 47, '\p{ID_Continue=yes}', "");
Expect(1, 47, '\p{^ID_Continue=yes}', "");
Expect(1, 47, '\P{ID_Continue=yes}', "");
Expect(0, 47, '\P{^ID_Continue=yes}', "");
Expect(1, 57, '\p{ID_Continue=_ yes}', "");
Expect(0, 57, '\p{^ID_Continue=_ yes}', "");
Expect(0, 57, '\P{ID_Continue=_ yes}', "");
Expect(1, 57, '\P{^ID_Continue=_ yes}', "");
Expect(0, 47, '\p{ID_Continue=_ yes}', "");
Expect(1, 47, '\p{^ID_Continue=_ yes}', "");
Expect(1, 47, '\P{ID_Continue=_ yes}', "");
Expect(0, 47, '\P{^ID_Continue=_ yes}', "");
Error('\p{IDC= -Y:=}');
Error('\P{IDC= -Y:=}');
Expect(1, 57, '\p{IDC=y}', "");
Expect(0, 57, '\p{^IDC=y}', "");
Expect(0, 57, '\P{IDC=y}', "");
Expect(1, 57, '\P{^IDC=y}', "");
Expect(0, 47, '\p{IDC=y}', "");
Expect(1, 47, '\p{^IDC=y}', "");
Expect(1, 47, '\P{IDC=y}', "");
Expect(0, 47, '\P{^IDC=y}', "");
Expect(1, 57, '\p{IDC=	y}', "");
Expect(0, 57, '\p{^IDC=	y}', "");
Expect(0, 57, '\P{IDC=	y}', "");
Expect(1, 57, '\P{^IDC=	y}', "");
Expect(0, 47, '\p{IDC=	y}', "");
Expect(1, 47, '\p{^IDC=	y}', "");
Expect(1, 47, '\P{IDC=	y}', "");
Expect(0, 47, '\P{^IDC=	y}', "");
Error('\p{Is_ID_Continue:  :=t}');
Error('\P{Is_ID_Continue:  :=t}');
Expect(1, 57, '\p{Is_ID_Continue=t}', "");
Expect(0, 57, '\p{^Is_ID_Continue=t}', "");
Expect(0, 57, '\P{Is_ID_Continue=t}', "");
Expect(1, 57, '\P{^Is_ID_Continue=t}', "");
Expect(0, 47, '\p{Is_ID_Continue=t}', "");
Expect(1, 47, '\p{^Is_ID_Continue=t}', "");
Expect(1, 47, '\P{Is_ID_Continue=t}', "");
Expect(0, 47, '\P{^Is_ID_Continue=t}', "");
Expect(1, 57, '\p{Is_ID_Continue:-T}', "");
Expect(0, 57, '\p{^Is_ID_Continue:-T}', "");
Expect(0, 57, '\P{Is_ID_Continue:-T}', "");
Expect(1, 57, '\P{^Is_ID_Continue:-T}', "");
Expect(0, 47, '\p{Is_ID_Continue:-T}', "");
Expect(1, 47, '\p{^Is_ID_Continue:-T}', "");
Expect(1, 47, '\P{Is_ID_Continue:-T}', "");
Expect(0, 47, '\P{^Is_ID_Continue:-T}', "");
Error('\p{Is_IDC: /a/_true}');
Error('\P{Is_IDC: /a/_true}');
Expect(1, 57, '\p{Is_IDC=true}', "");
Expect(0, 57, '\p{^Is_IDC=true}', "");
Expect(0, 57, '\P{Is_IDC=true}', "");
Expect(1, 57, '\P{^Is_IDC=true}', "");
Expect(0, 47, '\p{Is_IDC=true}', "");
Expect(1, 47, '\p{^Is_IDC=true}', "");
Expect(1, 47, '\P{Is_IDC=true}', "");
Expect(0, 47, '\P{^Is_IDC=true}', "");
Expect(1, 57, '\p{Is_IDC=TRUE}', "");
Expect(0, 57, '\p{^Is_IDC=TRUE}', "");
Expect(0, 57, '\P{Is_IDC=TRUE}', "");
Expect(1, 57, '\P{^Is_IDC=TRUE}', "");
Expect(0, 47, '\p{Is_IDC=TRUE}', "");
Expect(1, 47, '\p{^Is_IDC=TRUE}', "");
Expect(1, 47, '\P{Is_IDC=TRUE}', "");
Expect(0, 47, '\P{^Is_IDC=TRUE}', "");
Error('\p{ID_Continue=/a/ -NO}');
Error('\P{ID_Continue=/a/ -NO}');
Expect(1, 47, '\p{ID_Continue=no}', "");
Expect(0, 47, '\p{^ID_Continue=no}', "");
Expect(0, 47, '\P{ID_Continue=no}', "");
Expect(1, 47, '\P{^ID_Continue=no}', "");
Expect(0, 57, '\p{ID_Continue=no}', "");
Expect(1, 57, '\p{^ID_Continue=no}', "");
Expect(1, 57, '\P{ID_Continue=no}', "");
Expect(0, 57, '\P{^ID_Continue=no}', "");
Expect(1, 47, '\p{ID_Continue= 	No}', "");
Expect(0, 47, '\p{^ID_Continue= 	No}', "");
Expect(0, 47, '\P{ID_Continue= 	No}', "");
Expect(1, 47, '\P{^ID_Continue= 	No}', "");
Expect(0, 57, '\p{ID_Continue= 	No}', "");
Expect(1, 57, '\p{^ID_Continue= 	No}', "");
Expect(1, 57, '\P{ID_Continue= 	No}', "");
Expect(0, 57, '\P{^ID_Continue= 	No}', "");
Error('\p{IDC=-	n:=}');
Error('\P{IDC=-	n:=}');
Expect(1, 47, '\p{IDC=n}', "");
Expect(0, 47, '\p{^IDC=n}', "");
Expect(0, 47, '\P{IDC=n}', "");
Expect(1, 47, '\P{^IDC=n}', "");
Expect(0, 57, '\p{IDC=n}', "");
Expect(1, 57, '\p{^IDC=n}', "");
Expect(1, 57, '\P{IDC=n}', "");
Expect(0, 57, '\P{^IDC=n}', "");
Expect(1, 47, '\p{IDC:   _n}', "");
Expect(0, 47, '\p{^IDC:   _n}', "");
Expect(0, 47, '\P{IDC:   _n}', "");
Expect(1, 47, '\P{^IDC:   _n}', "");
Expect(0, 57, '\p{IDC:   _n}', "");
Expect(1, 57, '\p{^IDC:   _n}', "");
Expect(1, 57, '\P{IDC:   _n}', "");
Expect(0, 57, '\P{^IDC:   _n}', "");
Error('\p{Is_ID_Continue:-/a/f}');
Error('\P{Is_ID_Continue:-/a/f}');
Expect(1, 47, '\p{Is_ID_Continue:	f}', "");
Expect(0, 47, '\p{^Is_ID_Continue:	f}', "");
Expect(0, 47, '\P{Is_ID_Continue:	f}', "");
Expect(1, 47, '\P{^Is_ID_Continue:	f}', "");
Expect(0, 57, '\p{Is_ID_Continue:	f}', "");
Expect(1, 57, '\p{^Is_ID_Continue:	f}', "");
Expect(1, 57, '\P{Is_ID_Continue:	f}', "");
Expect(0, 57, '\P{^Is_ID_Continue:	f}', "");
Expect(1, 47, '\p{Is_ID_Continue=	-F}', "");
Expect(0, 47, '\p{^Is_ID_Continue=	-F}', "");
Expect(0, 47, '\P{Is_ID_Continue=	-F}', "");
Expect(1, 47, '\P{^Is_ID_Continue=	-F}', "");
Expect(0, 57, '\p{Is_ID_Continue=	-F}', "");
Expect(1, 57, '\p{^Is_ID_Continue=	-F}', "");
Expect(1, 57, '\P{Is_ID_Continue=	-F}', "");
Expect(0, 57, '\P{^Is_ID_Continue=	-F}', "");
Error('\p{Is_IDC=:=	False}');
Error('\P{Is_IDC=:=	False}');
Expect(1, 47, '\p{Is_IDC=false}', "");
Expect(0, 47, '\p{^Is_IDC=false}', "");
Expect(0, 47, '\P{Is_IDC=false}', "");
Expect(1, 47, '\P{^Is_IDC=false}', "");
Expect(0, 57, '\p{Is_IDC=false}', "");
Expect(1, 57, '\p{^Is_IDC=false}', "");
Expect(1, 57, '\P{Is_IDC=false}', "");
Expect(0, 57, '\P{^Is_IDC=false}', "");
Expect(1, 47, '\p{Is_IDC:		-FALSE}', "");
Expect(0, 47, '\p{^Is_IDC:		-FALSE}', "");
Expect(0, 47, '\P{Is_IDC:		-FALSE}', "");
Expect(1, 47, '\P{^Is_IDC:		-FALSE}', "");
Expect(0, 57, '\p{Is_IDC:		-FALSE}', "");
Expect(1, 57, '\p{^Is_IDC:		-FALSE}', "");
Expect(1, 57, '\P{Is_IDC:		-FALSE}', "");
Expect(0, 57, '\P{^Is_IDC:		-FALSE}', "");
Error('\p{Other_Alphabetic=/a/yes}');
Error('\P{Other_Alphabetic=/a/yes}');
Expect(1, 837, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\p{Other_Alphabetic=	 Yes}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=	 Yes}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=	 Yes}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=	 Yes}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=	 Yes}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=	 Yes}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=	 Yes}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=	 Yes}', 'deprecated');
Error('\p{OAlpha=	/a/Y}');
Error('\P{OAlpha=	/a/Y}');
Expect(1, 837, '\p{OAlpha=y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha=y}', 'deprecated');
Expect(0, 837, '\P{OAlpha=y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha=y}', 'deprecated');
Expect(0, 836, '\p{OAlpha=y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha=y}', 'deprecated');
Expect(1, 836, '\P{OAlpha=y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha=y}', 'deprecated');
Expect(1, 837, '\p{OAlpha=-_y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha=-_y}', 'deprecated');
Expect(0, 837, '\P{OAlpha=-_y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha=-_y}', 'deprecated');
Expect(0, 836, '\p{OAlpha=-_y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha=-_y}', 'deprecated');
Expect(1, 836, '\P{OAlpha=-_y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha=-_y}', 'deprecated');
Error('\p{Is_Other_Alphabetic=-/a/T}');
Error('\P{Is_Other_Alphabetic=-/a/T}');
Expect(1, 837, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\p{Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic=-	t}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic=-	t}', 'deprecated');
Error('\p{Is_OAlpha=-_True:=}');
Error('\P{Is_OAlpha=-_True:=}');
Expect(1, 837, '\p{Is_OAlpha=true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha=true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha=true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha=true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha=true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha=true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha=true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha=true}', 'deprecated');
Expect(1, 837, '\p{Is_OAlpha=	_true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha=	_true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha=	_true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha=	_true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha=	_true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha=	_true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha=	_true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha=	_true}', 'deprecated');
Error('\p{Other_Alphabetic:-:=No}');
Error('\P{Other_Alphabetic:-:=No}');
Expect(1, 836, '\p{Other_Alphabetic=no}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic=no}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic=no}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic=no}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic=no}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic=no}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic=no}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic=no}', 'deprecated');
Expect(1, 836, '\p{Other_Alphabetic:__NO}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic:__NO}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic:__NO}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic:__NO}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic:__NO}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic:__NO}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic:__NO}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic:__NO}', 'deprecated');
Error('\p{OAlpha=:= 	n}');
Error('\P{OAlpha=:= 	n}');
Expect(1, 836, '\p{OAlpha=n}', 'deprecated');
Expect(0, 836, '\p{^OAlpha=n}', 'deprecated');
Expect(0, 836, '\P{OAlpha=n}', 'deprecated');
Expect(1, 836, '\P{^OAlpha=n}', 'deprecated');
Expect(0, 837, '\p{OAlpha=n}', 'deprecated');
Expect(1, 837, '\p{^OAlpha=n}', 'deprecated');
Expect(1, 837, '\P{OAlpha=n}', 'deprecated');
Expect(0, 837, '\P{^OAlpha=n}', 'deprecated');
Expect(1, 836, '\p{OAlpha=--N}', 'deprecated');
Expect(0, 836, '\p{^OAlpha=--N}', 'deprecated');
Expect(0, 836, '\P{OAlpha=--N}', 'deprecated');
Expect(1, 836, '\P{^OAlpha=--N}', 'deprecated');
Expect(0, 837, '\p{OAlpha=--N}', 'deprecated');
Expect(1, 837, '\p{^OAlpha=--N}', 'deprecated');
Expect(1, 837, '\P{OAlpha=--N}', 'deprecated');
Expect(0, 837, '\P{^OAlpha=--N}', 'deprecated');
Error('\p{Is_Other_Alphabetic:   := F}');
Error('\P{Is_Other_Alphabetic:   := F}');
Expect(1, 836, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\p{Is_Other_Alphabetic=	F}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic=	F}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic=	F}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic=	F}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic=	F}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic=	F}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic=	F}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic=	F}', 'deprecated');
Error('\p{Is_OAlpha=/a/-FALSE}');
Error('\P{Is_OAlpha=/a/-FALSE}');
Expect(1, 836, '\p{Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\p{Is_OAlpha=-False}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha=-False}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha=-False}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha=-False}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha=-False}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha=-False}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha=-False}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha=-False}', 'deprecated');
Error('\p{NFKD_Quick_Check=  YES/a/}');
Error('\P{NFKD_Quick_Check=  YES/a/}');
Expect(1, 159, '\p{NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{NFKD_Quick_Check:     Yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check:     Yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check:     Yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check:     Yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check:     Yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check:     Yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check:     Yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check:     Yes}', "");
Error('\p{NFKD_QC= :=Y}');
Error('\P{NFKD_QC= :=Y}');
Expect(1, 159, '\p{NFKD_QC=y}', "");
Expect(0, 159, '\p{^NFKD_QC=y}', "");
Expect(0, 159, '\P{NFKD_QC=y}', "");
Expect(1, 159, '\P{^NFKD_QC=y}', "");
Expect(0, 160, '\p{NFKD_QC=y}', "");
Expect(1, 160, '\p{^NFKD_QC=y}', "");
Expect(1, 160, '\P{NFKD_QC=y}', "");
Expect(0, 160, '\P{^NFKD_QC=y}', "");
Expect(1, 159, '\p{NFKD_QC= -y}', "");
Expect(0, 159, '\p{^NFKD_QC= -y}', "");
Expect(0, 159, '\P{NFKD_QC= -y}', "");
Expect(1, 159, '\P{^NFKD_QC= -y}', "");
Expect(0, 160, '\p{NFKD_QC= -y}', "");
Expect(1, 160, '\p{^NFKD_QC= -y}', "");
Expect(1, 160, '\P{NFKD_QC= -y}', "");
Expect(0, 160, '\P{^NFKD_QC= -y}', "");
Error('\p{Is_NFKD_Quick_Check:    	yes/a/}');
Error('\P{Is_NFKD_Quick_Check:    	yes/a/}');
Expect(1, 159, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKD_Quick_Check=_	YES}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check=_	YES}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check=_	YES}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check=_	YES}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check=_	YES}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check=_	YES}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check=_	YES}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check=_	YES}', "");
Error('\p{Is_NFKD_QC=:=_y}');
Error('\P{Is_NFKD_QC=:=_y}');
Expect(1, 159, '\p{Is_NFKD_QC=y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC=y}', "");
Expect(0, 159, '\P{Is_NFKD_QC=y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC=y}', "");
Expect(0, 160, '\p{Is_NFKD_QC=y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC=y}', "");
Expect(1, 160, '\P{Is_NFKD_QC=y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC=y}', "");
Expect(1, 159, '\p{Is_NFKD_QC=	y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC=	y}', "");
Expect(0, 159, '\P{Is_NFKD_QC=	y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC=	y}', "");
Expect(0, 160, '\p{Is_NFKD_QC=	y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC=	y}', "");
Expect(1, 160, '\P{Is_NFKD_QC=	y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC=	y}', "");
Error('\p{NFKD_Quick_Check:  NO:=}');
Error('\P{NFKD_Quick_Check:  NO:=}');
Expect(1, 160, '\p{NFKD_Quick_Check=no}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check=no}', "");
Expect(0, 160, '\P{NFKD_Quick_Check=no}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check=no}', "");
Expect(0, 159, '\p{NFKD_Quick_Check=no}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check=no}', "");
Expect(1, 159, '\P{NFKD_Quick_Check=no}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check=no}', "");
Expect(1, 160, '\p{NFKD_Quick_Check=_NO}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check=_NO}', "");
Expect(0, 160, '\P{NFKD_Quick_Check=_NO}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check=_NO}', "");
Expect(0, 159, '\p{NFKD_Quick_Check=_NO}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check=_NO}', "");
Expect(1, 159, '\P{NFKD_Quick_Check=_NO}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check=_NO}', "");
Error('\p{NFKD_QC=- N:=}');
Error('\P{NFKD_QC=- N:=}');
Expect(1, 160, '\p{NFKD_QC=n}', "");
Expect(0, 160, '\p{^NFKD_QC=n}', "");
Expect(0, 160, '\P{NFKD_QC=n}', "");
Expect(1, 160, '\P{^NFKD_QC=n}', "");
Expect(0, 159, '\p{NFKD_QC=n}', "");
Expect(1, 159, '\p{^NFKD_QC=n}', "");
Expect(1, 159, '\P{NFKD_QC=n}', "");
Expect(0, 159, '\P{^NFKD_QC=n}', "");
Expect(1, 160, '\p{NFKD_QC=-	N}', "");
Expect(0, 160, '\p{^NFKD_QC=-	N}', "");
Expect(0, 160, '\P{NFKD_QC=-	N}', "");
Expect(1, 160, '\P{^NFKD_QC=-	N}', "");
Expect(0, 159, '\p{NFKD_QC=-	N}', "");
Expect(1, 159, '\p{^NFKD_QC=-	N}', "");
Expect(1, 159, '\P{NFKD_QC=-	N}', "");
Expect(0, 159, '\P{^NFKD_QC=-	N}', "");
Error('\p{Is_NFKD_Quick_Check=:= -No}');
Error('\P{Is_NFKD_Quick_Check=:= -No}');
Expect(1, 160, '\p{Is_NFKD_Quick_Check:   no}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check:   no}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check:   no}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check:   no}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check:   no}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check:   no}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check:   no}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check:   no}', "");
Expect(1, 160, '\p{Is_NFKD_Quick_Check=-	NO}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check=-	NO}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check=-	NO}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check=-	NO}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check=-	NO}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check=-	NO}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check=-	NO}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check=-	NO}', "");
Error('\p{Is_NFKD_QC=:=N}');
Error('\P{Is_NFKD_QC=:=N}');
Expect(1, 160, '\p{Is_NFKD_QC=n}', "");
Expect(0, 160, '\p{^Is_NFKD_QC=n}', "");
Expect(0, 160, '\P{Is_NFKD_QC=n}', "");
Expect(1, 160, '\P{^Is_NFKD_QC=n}', "");
Expect(0, 159, '\p{Is_NFKD_QC=n}', "");
Expect(1, 159, '\p{^Is_NFKD_QC=n}', "");
Expect(1, 159, '\P{Is_NFKD_QC=n}', "");
Expect(0, 159, '\P{^Is_NFKD_QC=n}', "");
Expect(1, 160, '\p{Is_NFKD_QC=- n}', "");
Expect(0, 160, '\p{^Is_NFKD_QC=- n}', "");
Expect(0, 160, '\P{Is_NFKD_QC=- n}', "");
Expect(1, 160, '\P{^Is_NFKD_QC=- n}', "");
Expect(0, 159, '\p{Is_NFKD_QC=- n}', "");
Expect(1, 159, '\p{^Is_NFKD_QC=- n}', "");
Expect(1, 159, '\P{Is_NFKD_QC=- n}', "");
Expect(0, 159, '\P{^Is_NFKD_QC=- n}', "");
Error('\p{Math= :=YES}');
Error('\P{Math= :=YES}');
Expect(1, 43, '\p{Math=yes}', "");
Expect(0, 43, '\p{^Math=yes}', "");
Expect(0, 43, '\P{Math=yes}', "");
Expect(1, 43, '\P{^Math=yes}', "");
Expect(0, 42, '\p{Math=yes}', "");
Expect(1, 42, '\p{^Math=yes}', "");
Expect(1, 42, '\P{Math=yes}', "");
Expect(0, 42, '\P{^Math=yes}', "");
Expect(1, 43, '\p{Math= Yes}', "");
Expect(0, 43, '\p{^Math= Yes}', "");
Expect(0, 43, '\P{Math= Yes}', "");
Expect(1, 43, '\P{^Math= Yes}', "");
Expect(0, 42, '\p{Math= Yes}', "");
Expect(1, 42, '\p{^Math= Yes}', "");
Expect(1, 42, '\P{Math= Yes}', "");
Expect(0, 42, '\P{^Math= Yes}', "");
Error('\p{Is_Math=/a/_	Y}');
Error('\P{Is_Math=/a/_	Y}');
Expect(1, 43, '\p{Is_Math=y}', "");
Expect(0, 43, '\p{^Is_Math=y}', "");
Expect(0, 43, '\P{Is_Math=y}', "");
Expect(1, 43, '\P{^Is_Math=y}', "");
Expect(0, 42, '\p{Is_Math=y}', "");
Expect(1, 42, '\p{^Is_Math=y}', "");
Expect(1, 42, '\P{Is_Math=y}', "");
Expect(0, 42, '\P{^Is_Math=y}', "");
Expect(1, 43, '\p{Is_Math=_	y}', "");
Expect(0, 43, '\p{^Is_Math=_	y}', "");
Expect(0, 43, '\P{Is_Math=_	y}', "");
Expect(1, 43, '\P{^Is_Math=_	y}', "");
Expect(0, 42, '\p{Is_Math=_	y}', "");
Expect(1, 42, '\p{^Is_Math=_	y}', "");
Expect(1, 42, '\P{Is_Math=_	y}', "");
Expect(0, 42, '\P{^Is_Math=_	y}', "");
Error('\p{Math=	_t/a/}');
Error('\P{Math=	_t/a/}');
Expect(1, 43, '\p{Math=t}', "");
Expect(0, 43, '\p{^Math=t}', "");
Expect(0, 43, '\P{Math=t}', "");
Expect(1, 43, '\P{^Math=t}', "");
Expect(0, 42, '\p{Math=t}', "");
Expect(1, 42, '\p{^Math=t}', "");
Expect(1, 42, '\P{Math=t}', "");
Expect(0, 42, '\P{^Math=t}', "");
Expect(1, 43, '\p{Math=-_T}', "");
Expect(0, 43, '\p{^Math=-_T}', "");
Expect(0, 43, '\P{Math=-_T}', "");
Expect(1, 43, '\P{^Math=-_T}', "");
Expect(0, 42, '\p{Math=-_T}', "");
Expect(1, 42, '\p{^Math=-_T}', "");
Expect(1, 42, '\P{Math=-_T}', "");
Expect(0, 42, '\P{^Math=-_T}', "");
Error('\p{Is_Math=	/a/true}');
Error('\P{Is_Math=	/a/true}');
Expect(1, 43, '\p{Is_Math=true}', "");
Expect(0, 43, '\p{^Is_Math=true}', "");
Expect(0, 43, '\P{Is_Math=true}', "");
Expect(1, 43, '\P{^Is_Math=true}', "");
Expect(0, 42, '\p{Is_Math=true}', "");
Expect(1, 42, '\p{^Is_Math=true}', "");
Expect(1, 42, '\P{Is_Math=true}', "");
Expect(0, 42, '\P{^Is_Math=true}', "");
Expect(1, 43, '\p{Is_Math=	 true}', "");
Expect(0, 43, '\p{^Is_Math=	 true}', "");
Expect(0, 43, '\P{Is_Math=	 true}', "");
Expect(1, 43, '\P{^Is_Math=	 true}', "");
Expect(0, 42, '\p{Is_Math=	 true}', "");
Expect(1, 42, '\p{^Is_Math=	 true}', "");
Expect(1, 42, '\P{Is_Math=	 true}', "");
Expect(0, 42, '\P{^Is_Math=	 true}', "");
Error('\p{Math=	No:=}');
Error('\P{Math=	No:=}');
Expect(1, 42, '\p{Math:   no}', "");
Expect(0, 42, '\p{^Math:   no}', "");
Expect(0, 42, '\P{Math:   no}', "");
Expect(1, 42, '\P{^Math:   no}', "");
Expect(0, 43, '\p{Math:   no}', "");
Expect(1, 43, '\p{^Math:   no}', "");
Expect(1, 43, '\P{Math:   no}', "");
Expect(0, 43, '\P{^Math:   no}', "");
Expect(1, 42, '\p{Math=-_NO}', "");
Expect(0, 42, '\p{^Math=-_NO}', "");
Expect(0, 42, '\P{Math=-_NO}', "");
Expect(1, 42, '\P{^Math=-_NO}', "");
Expect(0, 43, '\p{Math=-_NO}', "");
Expect(1, 43, '\p{^Math=-_NO}', "");
Expect(1, 43, '\P{Math=-_NO}', "");
Expect(0, 43, '\P{^Math=-_NO}', "");
Error('\p{Is_Math=/a/_N}');
Error('\P{Is_Math=/a/_N}');
Expect(1, 42, '\p{Is_Math=n}', "");
Expect(0, 42, '\p{^Is_Math=n}', "");
Expect(0, 42, '\P{Is_Math=n}', "");
Expect(1, 42, '\P{^Is_Math=n}', "");
Expect(0, 43, '\p{Is_Math=n}', "");
Expect(1, 43, '\p{^Is_Math=n}', "");
Expect(1, 43, '\P{Is_Math=n}', "");
Expect(0, 43, '\P{^Is_Math=n}', "");
Expect(1, 42, '\p{Is_Math=	_N}', "");
Expect(0, 42, '\p{^Is_Math=	_N}', "");
Expect(0, 42, '\P{Is_Math=	_N}', "");
Expect(1, 42, '\P{^Is_Math=	_N}', "");
Expect(0, 43, '\p{Is_Math=	_N}', "");
Expect(1, 43, '\p{^Is_Math=	_N}', "");
Expect(1, 43, '\P{Is_Math=	_N}', "");
Expect(0, 43, '\P{^Is_Math=	_N}', "");
Error('\p{Math:- f/a/}');
Error('\P{Math:- f/a/}');
Expect(1, 42, '\p{Math=f}', "");
Expect(0, 42, '\p{^Math=f}', "");
Expect(0, 42, '\P{Math=f}', "");
Expect(1, 42, '\P{^Math=f}', "");
Expect(0, 43, '\p{Math=f}', "");
Expect(1, 43, '\p{^Math=f}', "");
Expect(1, 43, '\P{Math=f}', "");
Expect(0, 43, '\P{^Math=f}', "");
Expect(1, 42, '\p{Math=	-f}', "");
Expect(0, 42, '\p{^Math=	-f}', "");
Expect(0, 42, '\P{Math=	-f}', "");
Expect(1, 42, '\P{^Math=	-f}', "");
Expect(0, 43, '\p{Math=	-f}', "");
Expect(1, 43, '\p{^Math=	-f}', "");
Expect(1, 43, '\P{Math=	-f}', "");
Expect(0, 43, '\P{^Math=	-f}', "");
Error('\p{Is_Math=_FALSE:=}');
Error('\P{Is_Math=_FALSE:=}');
Expect(1, 42, '\p{Is_Math=false}', "");
Expect(0, 42, '\p{^Is_Math=false}', "");
Expect(0, 42, '\P{Is_Math=false}', "");
Expect(1, 42, '\P{^Is_Math=false}', "");
Expect(0, 43, '\p{Is_Math=false}', "");
Expect(1, 43, '\p{^Is_Math=false}', "");
Expect(1, 43, '\P{Is_Math=false}', "");
Expect(0, 43, '\P{^Is_Math=false}', "");
Expect(1, 42, '\p{Is_Math=	 False}', "");
Expect(0, 42, '\p{^Is_Math=	 False}', "");
Expect(0, 42, '\P{Is_Math=	 False}', "");
Expect(1, 42, '\P{^Is_Math=	 False}', "");
Expect(0, 43, '\p{Is_Math=	 False}', "");
Expect(1, 43, '\p{^Is_Math=	 False}', "");
Expect(1, 43, '\P{Is_Math=	 False}', "");
Expect(0, 43, '\P{^Is_Math=	 False}', "");
Error('\p{Other_Uppercase=-/a/Yes}');
Error('\P{Other_Uppercase=-/a/Yes}');
Expect(1, 8559, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\p{Other_Uppercase=Yes}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase=Yes}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase=Yes}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase=Yes}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase=Yes}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase=Yes}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase=Yes}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase=Yes}', 'deprecated');
Error('\p{OUpper=:=-Y}');
Error('\P{OUpper=:=-Y}');
Expect(1, 8559, '\p{OUpper=y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper=y}', 'deprecated');
Expect(0, 8559, '\P{OUpper=y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper=y}', 'deprecated');
Expect(0, 8543, '\p{OUpper=y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper=y}', 'deprecated');
Expect(1, 8543, '\P{OUpper=y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper=y}', 'deprecated');
Expect(1, 8559, '\p{OUpper=	Y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper=	Y}', 'deprecated');
Expect(0, 8559, '\P{OUpper=	Y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper=	Y}', 'deprecated');
Expect(0, 8543, '\p{OUpper=	Y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper=	Y}', 'deprecated');
Expect(1, 8543, '\P{OUpper=	Y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper=	Y}', 'deprecated');
Error('\p{Is_Other_Uppercase=/a/-_T}');
Error('\P{Is_Other_Uppercase=/a/-_T}');
Expect(1, 8559, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\p{Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=__T}', 'deprecated');
Error('\p{Is_OUpper=-_True/a/}');
Error('\P{Is_OUpper=-_True/a/}');
Expect(1, 8559, '\p{Is_OUpper:   true}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper:   true}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper:   true}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper:   true}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper:   true}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper:   true}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper:   true}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper:   true}', 'deprecated');
Expect(1, 8559, '\p{Is_OUpper=-True}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper=-True}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper=-True}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper=-True}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper=-True}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper=-True}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper=-True}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper=-True}', 'deprecated');
Error('\p{Other_Uppercase=-_No:=}');
Error('\P{Other_Uppercase=-_No:=}');
Expect(1, 8543, '\p{Other_Uppercase:no}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase:no}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase:no}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase:no}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase:no}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase:no}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase:no}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase:no}', 'deprecated');
Expect(1, 8543, '\p{Other_Uppercase:		NO}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase:		NO}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase:		NO}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase:		NO}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase:		NO}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase:		NO}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase:		NO}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase:		NO}', 'deprecated');
Error('\p{OUpper: :=N}');
Error('\P{OUpper: :=N}');
Expect(1, 8543, '\p{OUpper=n}', 'deprecated');
Expect(0, 8543, '\p{^OUpper=n}', 'deprecated');
Expect(0, 8543, '\P{OUpper=n}', 'deprecated');
Expect(1, 8543, '\P{^OUpper=n}', 'deprecated');
Expect(0, 8559, '\p{OUpper=n}', 'deprecated');
Expect(1, 8559, '\p{^OUpper=n}', 'deprecated');
Expect(1, 8559, '\P{OUpper=n}', 'deprecated');
Expect(0, 8559, '\P{^OUpper=n}', 'deprecated');
Expect(1, 8543, '\p{OUpper= 	N}', 'deprecated');
Expect(0, 8543, '\p{^OUpper= 	N}', 'deprecated');
Expect(0, 8543, '\P{OUpper= 	N}', 'deprecated');
Expect(1, 8543, '\P{^OUpper= 	N}', 'deprecated');
Expect(0, 8559, '\p{OUpper= 	N}', 'deprecated');
Expect(1, 8559, '\p{^OUpper= 	N}', 'deprecated');
Expect(1, 8559, '\P{OUpper= 	N}', 'deprecated');
Expect(0, 8559, '\P{^OUpper= 	N}', 'deprecated');
Error('\p{Is_Other_Uppercase=/a/ _F}');
Error('\P{Is_Other_Uppercase=/a/ _F}');
Expect(1, 8543, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8543, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8543, '\p{Is_Other_Uppercase=__F}', 'deprecated');
Expect(0, 8543, '\p{^Is_Other_Uppercase=__F}', 'deprecated');
Expect(0, 8543, '\P{Is_Other_Uppercase=__F}', 'deprecated');
Expect(1, 8543, '\P{^Is_Other_Uppercase=__F}', 'deprecated');
Expect(0, 8559, '\p{Is_Other_Uppercase=__F}', 'deprecated');
Expect(1, 8559, '\p{^Is_Other_Uppercase=__F}', 'deprecated');
Expect(1, 8559, '\P{Is_Other_Uppercase=__F}', 'deprecated');
Expect(0, 8559, '\P{^Is_Other_Uppercase=__F}', 'deprecated');
Error('\p{Is_OUpper=:=- false}');
Error('\P{Is_OUpper=:=- false}');
Expect(1, 8543, '\p{Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\p{Is_OUpper=_-False}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=_-False}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=_-False}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=_-False}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=_-False}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=_-False}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=_-False}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=_-False}', 'deprecated');
Error('\p{Changes_When_Casemapped= -Yes:=}');
Error('\P{Changes_When_Casemapped= -Yes:=}');
Expect(1, 90, '\p{Changes_When_Casemapped=yes}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped=yes}', "");
Expect(0, 90, '\P{Changes_When_Casemapped=yes}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped=yes}', "");
Expect(0, 64, '\p{Changes_When_Casemapped=yes}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped=yes}', "");
Expect(1, 64, '\P{Changes_When_Casemapped=yes}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped=yes}', "");
Expect(1, 90, '\p{Changes_When_Casemapped=	-Yes}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped=	-Yes}', "");
Expect(0, 90, '\P{Changes_When_Casemapped=	-Yes}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped=	-Yes}', "");
Expect(0, 64, '\p{Changes_When_Casemapped=	-Yes}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped=	-Yes}', "");
Expect(1, 64, '\P{Changes_When_Casemapped=	-Yes}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped=	-Yes}', "");
Error('\p{CWCM:	_ Y/a/}');
Error('\P{CWCM:	_ Y/a/}');
Expect(1, 90, '\p{CWCM=y}', "");
Expect(0, 90, '\p{^CWCM=y}', "");
Expect(0, 90, '\P{CWCM=y}', "");
Expect(1, 90, '\P{^CWCM=y}', "");
Expect(0, 64, '\p{CWCM=y}', "");
Expect(1, 64, '\p{^CWCM=y}', "");
Expect(1, 64, '\P{CWCM=y}', "");
Expect(0, 64, '\P{^CWCM=y}', "");
Expect(1, 90, '\p{CWCM=-y}', "");
Expect(0, 90, '\p{^CWCM=-y}', "");
Expect(0, 90, '\P{CWCM=-y}', "");
Expect(1, 90, '\P{^CWCM=-y}', "");
Expect(0, 64, '\p{CWCM=-y}', "");
Expect(1, 64, '\p{^CWCM=-y}', "");
Expect(1, 64, '\P{CWCM=-y}', "");
Expect(0, 64, '\P{^CWCM=-y}', "");
Error('\p{Is_Changes_When_Casemapped:   _:=t}');
Error('\P{Is_Changes_When_Casemapped:   _:=t}');
Expect(1, 90, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casemapped= T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped= T}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped= T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped= T}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped= T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped= T}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped= T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped= T}', "");
Error('\p{Is_CWCM=:=- true}');
Error('\P{Is_CWCM=:=- true}');
Expect(1, 90, '\p{Is_CWCM=true}', "");
Expect(0, 90, '\p{^Is_CWCM=true}', "");
Expect(0, 90, '\P{Is_CWCM=true}', "");
Expect(1, 90, '\P{^Is_CWCM=true}', "");
Expect(0, 64, '\p{Is_CWCM=true}', "");
Expect(1, 64, '\p{^Is_CWCM=true}', "");
Expect(1, 64, '\P{Is_CWCM=true}', "");
Expect(0, 64, '\P{^Is_CWCM=true}', "");
Expect(1, 90, '\p{Is_CWCM= True}', "");
Expect(0, 90, '\p{^Is_CWCM= True}', "");
Expect(0, 90, '\P{Is_CWCM= True}', "");
Expect(1, 90, '\P{^Is_CWCM= True}', "");
Expect(0, 64, '\p{Is_CWCM= True}', "");
Expect(1, 64, '\p{^Is_CWCM= True}', "");
Expect(1, 64, '\P{Is_CWCM= True}', "");
Expect(0, 64, '\P{^Is_CWCM= True}', "");
Error('\p{Changes_When_Casemapped:		No:=}');
Error('\P{Changes_When_Casemapped:		No:=}');
Expect(1, 64, '\p{Changes_When_Casemapped:   no}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped:   no}', "");
Expect(0, 64, '\P{Changes_When_Casemapped:   no}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped:   no}', "");
Expect(0, 90, '\p{Changes_When_Casemapped:   no}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped:   no}', "");
Expect(1, 90, '\P{Changes_When_Casemapped:   no}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped:   no}', "");
Expect(1, 64, '\p{Changes_When_Casemapped=	_NO}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped=	_NO}', "");
Expect(0, 64, '\P{Changes_When_Casemapped=	_NO}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped=	_NO}', "");
Expect(0, 90, '\p{Changes_When_Casemapped=	_NO}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped=	_NO}', "");
Expect(1, 90, '\P{Changes_When_Casemapped=	_NO}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped=	_NO}', "");
Error('\p{CWCM=		N:=}');
Error('\P{CWCM=		N:=}');
Expect(1, 64, '\p{CWCM=n}', "");
Expect(0, 64, '\p{^CWCM=n}', "");
Expect(0, 64, '\P{CWCM=n}', "");
Expect(1, 64, '\P{^CWCM=n}', "");
Expect(0, 90, '\p{CWCM=n}', "");
Expect(1, 90, '\p{^CWCM=n}', "");
Expect(1, 90, '\P{CWCM=n}', "");
Expect(0, 90, '\P{^CWCM=n}', "");
Expect(1, 64, '\p{CWCM= -N}', "");
Expect(0, 64, '\p{^CWCM= -N}', "");
Expect(0, 64, '\P{CWCM= -N}', "");
Expect(1, 64, '\P{^CWCM= -N}', "");
Expect(0, 90, '\p{CWCM= -N}', "");
Expect(1, 90, '\p{^CWCM= -N}', "");
Expect(1, 90, '\P{CWCM= -N}', "");
Expect(0, 90, '\P{^CWCM= -N}', "");
Error('\p{Is_Changes_When_Casemapped=_F:=}');
Error('\P{Is_Changes_When_Casemapped=_F:=}');
Expect(1, 64, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casemapped= F}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped= F}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped= F}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped= F}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped= F}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped= F}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped= F}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped= F}', "");
Error('\p{Is_CWCM=	 false:=}');
Error('\P{Is_CWCM=	 false:=}');
Expect(1, 64, '\p{Is_CWCM=false}', "");
Expect(0, 64, '\p{^Is_CWCM=false}', "");
Expect(0, 64, '\P{Is_CWCM=false}', "");
Expect(1, 64, '\P{^Is_CWCM=false}', "");
Expect(0, 90, '\p{Is_CWCM=false}', "");
Expect(1, 90, '\p{^Is_CWCM=false}', "");
Expect(1, 90, '\P{Is_CWCM=false}', "");
Expect(0, 90, '\P{^Is_CWCM=false}', "");
Expect(1, 64, '\p{Is_CWCM=	-False}', "");
Expect(0, 64, '\p{^Is_CWCM=	-False}', "");
Expect(0, 64, '\P{Is_CWCM=	-False}', "");
Expect(1, 64, '\P{^Is_CWCM=	-False}', "");
Expect(0, 90, '\p{Is_CWCM=	-False}', "");
Expect(1, 90, '\p{^Is_CWCM=	-False}', "");
Expect(1, 90, '\P{Is_CWCM=	-False}', "");
Expect(0, 90, '\P{^Is_CWCM=	-False}', "");
Error('\p{Deprecated=/a/ yes}');
Error('\P{Deprecated=/a/ yes}');
Expect(1, 329, '\p{Deprecated=yes}', "");
Expect(0, 329, '\p{^Deprecated=yes}', "");
Expect(0, 329, '\P{Deprecated=yes}', "");
Expect(1, 329, '\P{^Deprecated=yes}', "");
Expect(0, 328, '\p{Deprecated=yes}', "");
Expect(1, 328, '\p{^Deprecated=yes}', "");
Expect(1, 328, '\P{Deprecated=yes}', "");
Expect(0, 328, '\P{^Deprecated=yes}', "");
Expect(1, 329, '\p{Deprecated:	yes}', "");
Expect(0, 329, '\p{^Deprecated:	yes}', "");
Expect(0, 329, '\P{Deprecated:	yes}', "");
Expect(1, 329, '\P{^Deprecated:	yes}', "");
Expect(0, 328, '\p{Deprecated:	yes}', "");
Expect(1, 328, '\p{^Deprecated:	yes}', "");
Expect(1, 328, '\P{Deprecated:	yes}', "");
Expect(0, 328, '\P{^Deprecated:	yes}', "");
Error('\p{Dep=/a/ Y}');
Error('\P{Dep=/a/ Y}');
Expect(1, 329, '\p{Dep:y}', "");
Expect(0, 329, '\p{^Dep:y}', "");
Expect(0, 329, '\P{Dep:y}', "");
Expect(1, 329, '\P{^Dep:y}', "");
Expect(0, 328, '\p{Dep:y}', "");
Expect(1, 328, '\p{^Dep:y}', "");
Expect(1, 328, '\P{Dep:y}', "");
Expect(0, 328, '\P{^Dep:y}', "");
Expect(1, 329, '\p{Dep=		Y}', "");
Expect(0, 329, '\p{^Dep=		Y}', "");
Expect(0, 329, '\P{Dep=		Y}', "");
Expect(1, 329, '\P{^Dep=		Y}', "");
Expect(0, 328, '\p{Dep=		Y}', "");
Expect(1, 328, '\p{^Dep=		Y}', "");
Expect(1, 328, '\P{Dep=		Y}', "");
Expect(0, 328, '\P{^Dep=		Y}', "");
Error('\p{Is_Deprecated=  t/a/}');
Error('\P{Is_Deprecated=  t/a/}');
Expect(1, 329, '\p{Is_Deprecated=t}', "");
Expect(0, 329, '\p{^Is_Deprecated=t}', "");
Expect(0, 329, '\P{Is_Deprecated=t}', "");
Expect(1, 329, '\P{^Is_Deprecated=t}', "");
Expect(0, 328, '\p{Is_Deprecated=t}', "");
Expect(1, 328, '\p{^Is_Deprecated=t}', "");
Expect(1, 328, '\P{Is_Deprecated=t}', "");
Expect(0, 328, '\P{^Is_Deprecated=t}', "");
Expect(1, 329, '\p{Is_Deprecated=--T}', "");
Expect(0, 329, '\p{^Is_Deprecated=--T}', "");
Expect(0, 329, '\P{Is_Deprecated=--T}', "");
Expect(1, 329, '\P{^Is_Deprecated=--T}', "");
Expect(0, 328, '\p{Is_Deprecated=--T}', "");
Expect(1, 328, '\p{^Is_Deprecated=--T}', "");
Expect(1, 328, '\P{Is_Deprecated=--T}', "");
Expect(0, 328, '\P{^Is_Deprecated=--T}', "");
Error('\p{Is_Dep=- true/a/}');
Error('\P{Is_Dep=- true/a/}');
Expect(1, 329, '\p{Is_Dep:   true}', "");
Expect(0, 329, '\p{^Is_Dep:   true}', "");
Expect(0, 329, '\P{Is_Dep:   true}', "");
Expect(1, 329, '\P{^Is_Dep:   true}', "");
Expect(0, 328, '\p{Is_Dep:   true}', "");
Expect(1, 328, '\p{^Is_Dep:   true}', "");
Expect(1, 328, '\P{Is_Dep:   true}', "");
Expect(0, 328, '\P{^Is_Dep:   true}', "");
Expect(1, 329, '\p{Is_Dep:	 TRUE}', "");
Expect(0, 329, '\p{^Is_Dep:	 TRUE}', "");
Expect(0, 329, '\P{Is_Dep:	 TRUE}', "");
Expect(1, 329, '\P{^Is_Dep:	 TRUE}', "");
Expect(0, 328, '\p{Is_Dep:	 TRUE}', "");
Expect(1, 328, '\p{^Is_Dep:	 TRUE}', "");
Expect(1, 328, '\P{Is_Dep:	 TRUE}', "");
Expect(0, 328, '\P{^Is_Dep:	 TRUE}', "");
Error('\p{Deprecated=/a/ No}');
Error('\P{Deprecated=/a/ No}');
Expect(1, 328, '\p{Deprecated=no}', "");
Expect(0, 328, '\p{^Deprecated=no}', "");
Expect(0, 328, '\P{Deprecated=no}', "");
Expect(1, 328, '\P{^Deprecated=no}', "");
Expect(0, 329, '\p{Deprecated=no}', "");
Expect(1, 329, '\p{^Deprecated=no}', "");
Expect(1, 329, '\P{Deprecated=no}', "");
Expect(0, 329, '\P{^Deprecated=no}', "");
Expect(1, 328, '\p{Deprecated=_ no}', "");
Expect(0, 328, '\p{^Deprecated=_ no}', "");
Expect(0, 328, '\P{Deprecated=_ no}', "");
Expect(1, 328, '\P{^Deprecated=_ no}', "");
Expect(0, 329, '\p{Deprecated=_ no}', "");
Expect(1, 329, '\p{^Deprecated=_ no}', "");
Expect(1, 329, '\P{Deprecated=_ no}', "");
Expect(0, 329, '\P{^Deprecated=_ no}', "");
Error('\p{Dep:  n/a/}');
Error('\P{Dep:  n/a/}');
Expect(1, 328, '\p{Dep=n}', "");
Expect(0, 328, '\p{^Dep=n}', "");
Expect(0, 328, '\P{Dep=n}', "");
Expect(1, 328, '\P{^Dep=n}', "");
Expect(0, 329, '\p{Dep=n}', "");
Expect(1, 329, '\p{^Dep=n}', "");
Expect(1, 329, '\P{Dep=n}', "");
Expect(0, 329, '\P{^Dep=n}', "");
Expect(1, 328, '\p{Dep=_	n}', "");
Expect(0, 328, '\p{^Dep=_	n}', "");
Expect(0, 328, '\P{Dep=_	n}', "");
Expect(1, 328, '\P{^Dep=_	n}', "");
Expect(0, 329, '\p{Dep=_	n}', "");
Expect(1, 329, '\p{^Dep=_	n}', "");
Expect(1, 329, '\P{Dep=_	n}', "");
Expect(0, 329, '\P{^Dep=_	n}', "");
Error('\p{Is_Deprecated= :=F}');
Error('\P{Is_Deprecated= :=F}');
Expect(1, 328, '\p{Is_Deprecated=f}', "");
Expect(0, 328, '\p{^Is_Deprecated=f}', "");
Expect(0, 328, '\P{Is_Deprecated=f}', "");
Expect(1, 328, '\P{^Is_Deprecated=f}', "");
Expect(0, 329, '\p{Is_Deprecated=f}', "");
Expect(1, 329, '\p{^Is_Deprecated=f}', "");
Expect(1, 329, '\P{Is_Deprecated=f}', "");
Expect(0, 329, '\P{^Is_Deprecated=f}', "");
Expect(1, 328, '\p{Is_Deprecated:   -F}', "");
Expect(0, 328, '\p{^Is_Deprecated:   -F}', "");
Expect(0, 328, '\P{Is_Deprecated:   -F}', "");
Expect(1, 328, '\P{^Is_Deprecated:   -F}', "");
Expect(0, 329, '\p{Is_Deprecated:   -F}', "");
Expect(1, 329, '\p{^Is_Deprecated:   -F}', "");
Expect(1, 329, '\P{Is_Deprecated:   -F}', "");
Expect(0, 329, '\P{^Is_Deprecated:   -F}', "");
Error('\p{Is_Dep=_/a/FALSE}');
Error('\P{Is_Dep=_/a/FALSE}');
Expect(1, 328, '\p{Is_Dep=false}', "");
Expect(0, 328, '\p{^Is_Dep=false}', "");
Expect(0, 328, '\P{Is_Dep=false}', "");
Expect(1, 328, '\P{^Is_Dep=false}', "");
Expect(0, 329, '\p{Is_Dep=false}', "");
Expect(1, 329, '\p{^Is_Dep=false}', "");
Expect(1, 329, '\P{Is_Dep=false}', "");
Expect(0, 329, '\P{^Is_Dep=false}', "");
Expect(1, 328, '\p{Is_Dep=_	FALSE}', "");
Expect(0, 328, '\p{^Is_Dep=_	FALSE}', "");
Expect(0, 328, '\P{Is_Dep=_	FALSE}', "");
Expect(1, 328, '\P{^Is_Dep=_	FALSE}', "");
Expect(0, 329, '\p{Is_Dep=_	FALSE}', "");
Expect(1, 329, '\p{^Is_Dep=_	FALSE}', "");
Expect(1, 329, '\P{Is_Dep=_	FALSE}', "");
Expect(0, 329, '\P{^Is_Dep=_	FALSE}', "");
Error('\p{Sentence_Break=-Sp/a/}');
Error('\P{Sentence_Break=-Sp/a/}');
Expect(1, 9, '\p{Sentence_Break=sp}', "");
Expect(0, 9, '\p{^Sentence_Break=sp}', "");
Expect(0, 9, '\P{Sentence_Break=sp}', "");
Expect(1, 9, '\P{^Sentence_Break=sp}', "");
Expect(0, 8, '\p{Sentence_Break=sp}', "");
Expect(1, 8, '\p{^Sentence_Break=sp}', "");
Expect(1, 8, '\P{Sentence_Break=sp}', "");
Expect(0, 8, '\P{^Sentence_Break=sp}', "");
Expect(1, 9, '\p{Sentence_Break=-Sp}', "");
Expect(0, 9, '\p{^Sentence_Break=-Sp}', "");
Expect(0, 9, '\P{Sentence_Break=-Sp}', "");
Expect(1, 9, '\P{^Sentence_Break=-Sp}', "");
Expect(0, 8, '\p{Sentence_Break=-Sp}', "");
Expect(1, 8, '\p{^Sentence_Break=-Sp}', "");
Expect(1, 8, '\P{Sentence_Break=-Sp}', "");
Expect(0, 8, '\P{^Sentence_Break=-Sp}', "");
Error('\p{SB=		sp/a/}');
Error('\P{SB=		sp/a/}');
Expect(1, 9, '\p{SB=sp}', "");
Expect(0, 9, '\p{^SB=sp}', "");
Expect(0, 9, '\P{SB=sp}', "");
Expect(1, 9, '\P{^SB=sp}', "");
Expect(0, 8, '\p{SB=sp}', "");
Expect(1, 8, '\p{^SB=sp}', "");
Expect(1, 8, '\P{SB=sp}', "");
Expect(0, 8, '\P{^SB=sp}', "");
Expect(1, 9, '\p{SB= 	Sp}', "");
Expect(0, 9, '\p{^SB= 	Sp}', "");
Expect(0, 9, '\P{SB= 	Sp}', "");
Expect(1, 9, '\P{^SB= 	Sp}', "");
Expect(0, 8, '\p{SB= 	Sp}', "");
Expect(1, 8, '\p{^SB= 	Sp}', "");
Expect(1, 8, '\P{SB= 	Sp}', "");
Expect(0, 8, '\P{^SB= 	Sp}', "");
Error('\p{Is_Sentence_Break=/a/ -Sp}');
Error('\P{Is_Sentence_Break=/a/ -Sp}');
Expect(1, 9, '\p{Is_Sentence_Break=sp}', "");
Expect(0, 9, '\p{^Is_Sentence_Break=sp}', "");
Expect(0, 9, '\P{Is_Sentence_Break=sp}', "");
Expect(1, 9, '\P{^Is_Sentence_Break=sp}', "");
Expect(0, 8, '\p{Is_Sentence_Break=sp}', "");
Expect(1, 8, '\p{^Is_Sentence_Break=sp}', "");
Expect(1, 8, '\P{Is_Sentence_Break=sp}', "");
Expect(0, 8, '\P{^Is_Sentence_Break=sp}', "");
Expect(1, 9, '\p{Is_Sentence_Break:	__sp}', "");
Expect(0, 9, '\p{^Is_Sentence_Break:	__sp}', "");
Expect(0, 9, '\P{Is_Sentence_Break:	__sp}', "");
Expect(1, 9, '\P{^Is_Sentence_Break:	__sp}', "");
Expect(0, 8, '\p{Is_Sentence_Break:	__sp}', "");
Expect(1, 8, '\p{^Is_Sentence_Break:	__sp}', "");
Expect(1, 8, '\P{Is_Sentence_Break:	__sp}', "");
Expect(0, 8, '\P{^Is_Sentence_Break:	__sp}', "");
Error('\p{Is_SB= :=SP}');
Error('\P{Is_SB= :=SP}');
Expect(1, 9, '\p{Is_SB=sp}', "");
Expect(0, 9, '\p{^Is_SB=sp}', "");
Expect(0, 9, '\P{Is_SB=sp}', "");
Expect(1, 9, '\P{^Is_SB=sp}', "");
Expect(0, 8, '\p{Is_SB=sp}', "");
Expect(1, 8, '\p{^Is_SB=sp}', "");
Expect(1, 8, '\P{Is_SB=sp}', "");
Expect(0, 8, '\P{^Is_SB=sp}', "");
Expect(1, 9, '\p{Is_SB:   	sp}', "");
Expect(0, 9, '\p{^Is_SB:   	sp}', "");
Expect(0, 9, '\P{Is_SB:   	sp}', "");
Expect(1, 9, '\P{^Is_SB:   	sp}', "");
Expect(0, 8, '\p{Is_SB:   	sp}', "");
Expect(1, 8, '\p{^Is_SB:   	sp}', "");
Expect(1, 8, '\P{Is_SB:   	sp}', "");
Expect(0, 8, '\P{^Is_SB:   	sp}', "");
Error('\p{Sentence_Break=/a/-SContinue}');
Error('\P{Sentence_Break=/a/-SContinue}');
Expect(1, 45, '\p{Sentence_Break=scontinue}', "");
Expect(0, 45, '\p{^Sentence_Break=scontinue}', "");
Expect(0, 45, '\P{Sentence_Break=scontinue}', "");
Expect(1, 45, '\P{^Sentence_Break=scontinue}', "");
Expect(0, 43, '\p{Sentence_Break=scontinue}', "");
Expect(1, 43, '\p{^Sentence_Break=scontinue}', "");
Expect(1, 43, '\P{Sentence_Break=scontinue}', "");
Expect(0, 43, '\P{^Sentence_Break=scontinue}', "");
Expect(1, 45, '\p{Sentence_Break=-SCONTINUE}', "");
Expect(0, 45, '\p{^Sentence_Break=-SCONTINUE}', "");
Expect(0, 45, '\P{Sentence_Break=-SCONTINUE}', "");
Expect(1, 45, '\P{^Sentence_Break=-SCONTINUE}', "");
Expect(0, 43, '\p{Sentence_Break=-SCONTINUE}', "");
Expect(1, 43, '\p{^Sentence_Break=-SCONTINUE}', "");
Expect(1, 43, '\P{Sentence_Break=-SCONTINUE}', "");
Expect(0, 43, '\P{^Sentence_Break=-SCONTINUE}', "");
Error('\p{SB=/a/_ SC}');
Error('\P{SB=/a/_ SC}');
Expect(1, 45, '\p{SB=sc}', "");
Expect(0, 45, '\p{^SB=sc}', "");
Expect(0, 45, '\P{SB=sc}', "");
Expect(1, 45, '\P{^SB=sc}', "");
Expect(0, 43, '\p{SB=sc}', "");
Expect(1, 43, '\p{^SB=sc}', "");
Expect(1, 43, '\P{SB=sc}', "");
Expect(0, 43, '\P{^SB=sc}', "");
Expect(1, 45, '\p{SB= 	SC}', "");
Expect(0, 45, '\p{^SB= 	SC}', "");
Expect(0, 45, '\P{SB= 	SC}', "");
Expect(1, 45, '\P{^SB= 	SC}', "");
Expect(0, 43, '\p{SB= 	SC}', "");
Expect(1, 43, '\p{^SB= 	SC}', "");
Expect(1, 43, '\P{SB= 	SC}', "");
Expect(0, 43, '\P{^SB= 	SC}', "");
Error('\p{Is_Sentence_Break=/a/SContinue}');
Error('\P{Is_Sentence_Break=/a/SContinue}');
Expect(1, 45, '\p{Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\p{Is_Sentence_Break=_SContinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break=_SContinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break=_SContinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break=_SContinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break=_SContinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break=_SContinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break=_SContinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break=_SContinue}', "");
Error('\p{Is_SB:  :=SC}');
Error('\P{Is_SB:  :=SC}');
Expect(1, 45, '\p{Is_SB:sc}', "");
Expect(0, 45, '\p{^Is_SB:sc}', "");
Expect(0, 45, '\P{Is_SB:sc}', "");
Expect(1, 45, '\P{^Is_SB:sc}', "");
Expect(0, 43, '\p{Is_SB:sc}', "");
Expect(1, 43, '\p{^Is_SB:sc}', "");
Expect(1, 43, '\P{Is_SB:sc}', "");
Expect(0, 43, '\P{^Is_SB:sc}', "");
Expect(1, 45, '\p{Is_SB=  sc}', "");
Expect(0, 45, '\p{^Is_SB=  sc}', "");
Expect(0, 45, '\P{Is_SB=  sc}', "");
Expect(1, 45, '\P{^Is_SB=  sc}', "");
Expect(0, 43, '\p{Is_SB=  sc}', "");
Expect(1, 43, '\p{^Is_SB=  sc}', "");
Expect(1, 43, '\P{Is_SB=  sc}', "");
Expect(0, 43, '\P{^Is_SB=  sc}', "");
Error('\p{Sentence_Break=-/a/ATerm}');
Error('\P{Sentence_Break=-/a/ATerm}');
Expect(1, 46, '\p{Sentence_Break=aterm}', "");
Expect(0, 46, '\p{^Sentence_Break=aterm}', "");
Expect(0, 46, '\P{Sentence_Break=aterm}', "");
Expect(1, 46, '\P{^Sentence_Break=aterm}', "");
Expect(0, 45, '\p{Sentence_Break=aterm}', "");
Expect(1, 45, '\p{^Sentence_Break=aterm}', "");
Expect(1, 45, '\P{Sentence_Break=aterm}', "");
Expect(0, 45, '\P{^Sentence_Break=aterm}', "");
Expect(1, 46, '\p{Sentence_Break=-ATERM}', "");
Expect(0, 46, '\p{^Sentence_Break=-ATERM}', "");
Expect(0, 46, '\P{Sentence_Break=-ATERM}', "");
Expect(1, 46, '\P{^Sentence_Break=-ATERM}', "");
Expect(0, 45, '\p{Sentence_Break=-ATERM}', "");
Expect(1, 45, '\p{^Sentence_Break=-ATERM}', "");
Expect(1, 45, '\P{Sentence_Break=-ATERM}', "");
Expect(0, 45, '\P{^Sentence_Break=-ATERM}', "");
Error('\p{SB=/a/ AT}');
Error('\P{SB=/a/ AT}');
Expect(1, 46, '\p{SB=at}', "");
Expect(0, 46, '\p{^SB=at}', "");
Expect(0, 46, '\P{SB=at}', "");
Expect(1, 46, '\P{^SB=at}', "");
Expect(0, 45, '\p{SB=at}', "");
Expect(1, 45, '\p{^SB=at}', "");
Expect(1, 45, '\P{SB=at}', "");
Expect(0, 45, '\P{^SB=at}', "");
Expect(1, 46, '\p{SB= 	AT}', "");
Expect(0, 46, '\p{^SB= 	AT}', "");
Expect(0, 46, '\P{SB= 	AT}', "");
Expect(1, 46, '\P{^SB= 	AT}', "");
Expect(0, 45, '\p{SB= 	AT}', "");
Expect(1, 45, '\p{^SB= 	AT}', "");
Expect(1, 45, '\P{SB= 	AT}', "");
Expect(0, 45, '\P{^SB= 	AT}', "");
Error('\p{Is_Sentence_Break=_-aterm/a/}');
Error('\P{Is_Sentence_Break=_-aterm/a/}');
Expect(1, 46, '\p{Is_Sentence_Break=aterm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break=aterm}', "");
Expect(0, 46, '\P{Is_Sentence_Break=aterm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break=aterm}', "");
Expect(0, 45, '\p{Is_Sentence_Break=aterm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break=aterm}', "");
Expect(1, 45, '\P{Is_Sentence_Break=aterm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break=aterm}', "");
Expect(1, 46, '\p{Is_Sentence_Break:   	-ATerm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break:   	-ATerm}', "");
Expect(0, 46, '\P{Is_Sentence_Break:   	-ATerm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break:   	-ATerm}', "");
Expect(0, 45, '\p{Is_Sentence_Break:   	-ATerm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break:   	-ATerm}', "");
Expect(1, 45, '\P{Is_Sentence_Break:   	-ATerm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break:   	-ATerm}', "");
Error('\p{Is_SB=-	AT/a/}');
Error('\P{Is_SB=-	AT/a/}');
Expect(1, 46, '\p{Is_SB=at}', "");
Expect(0, 46, '\p{^Is_SB=at}', "");
Expect(0, 46, '\P{Is_SB=at}', "");
Expect(1, 46, '\P{^Is_SB=at}', "");
Expect(0, 45, '\p{Is_SB=at}', "");
Expect(1, 45, '\p{^Is_SB=at}', "");
Expect(1, 45, '\P{Is_SB=at}', "");
Expect(0, 45, '\P{^Is_SB=at}', "");
Expect(1, 46, '\p{Is_SB=		AT}', "");
Expect(0, 46, '\p{^Is_SB=		AT}', "");
Expect(0, 46, '\P{Is_SB=		AT}', "");
Expect(1, 46, '\P{^Is_SB=		AT}', "");
Expect(0, 45, '\p{Is_SB=		AT}', "");
Expect(1, 45, '\p{^Is_SB=		AT}', "");
Expect(1, 45, '\P{Is_SB=		AT}', "");
Expect(0, 45, '\P{^Is_SB=		AT}', "");
Error('\p{Sentence_Break:	_/a/OLETTER}');
Error('\P{Sentence_Break:	_/a/OLETTER}');
Expect(1, 443, '\p{Sentence_Break=oletter}', "");
Expect(0, 443, '\p{^Sentence_Break=oletter}', "");
Expect(0, 443, '\P{Sentence_Break=oletter}', "");
Expect(1, 443, '\P{^Sentence_Break=oletter}', "");
Expect(0, 442, '\p{Sentence_Break=oletter}', "");
Expect(1, 442, '\p{^Sentence_Break=oletter}', "");
Expect(1, 442, '\P{Sentence_Break=oletter}', "");
Expect(0, 442, '\P{^Sentence_Break=oletter}', "");
Expect(1, 443, '\p{Sentence_Break=_OLetter}', "");
Expect(0, 443, '\p{^Sentence_Break=_OLetter}', "");
Expect(0, 443, '\P{Sentence_Break=_OLetter}', "");
Expect(1, 443, '\P{^Sentence_Break=_OLetter}', "");
Expect(0, 442, '\p{Sentence_Break=_OLetter}', "");
Expect(1, 442, '\p{^Sentence_Break=_OLetter}', "");
Expect(1, 442, '\P{Sentence_Break=_OLetter}', "");
Expect(0, 442, '\P{^Sentence_Break=_OLetter}', "");
Error('\p{SB:/a/LE}');
Error('\P{SB:/a/LE}');
Expect(1, 443, '\p{SB: le}', "");
Expect(0, 443, '\p{^SB: le}', "");
Expect(0, 443, '\P{SB: le}', "");
Expect(1, 443, '\P{^SB: le}', "");
Expect(0, 442, '\p{SB: le}', "");
Expect(1, 442, '\p{^SB: le}', "");
Expect(1, 442, '\P{SB: le}', "");
Expect(0, 442, '\P{^SB: le}', "");
Expect(1, 443, '\p{SB=--le}', "");
Expect(0, 443, '\p{^SB=--le}', "");
Expect(0, 443, '\P{SB=--le}', "");
Expect(1, 443, '\P{^SB=--le}', "");
Expect(0, 442, '\p{SB=--le}', "");
Expect(1, 442, '\p{^SB=--le}', "");
Expect(1, 442, '\P{SB=--le}', "");
Expect(0, 442, '\P{^SB=--le}', "");
Error('\p{Is_Sentence_Break= :=OLetter}');
Error('\P{Is_Sentence_Break= :=OLetter}');
Expect(1, 443, '\p{Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\p{^Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\P{Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\P{^Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\p{Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\p{^Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\P{Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\P{^Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\p{Is_Sentence_Break=_ OLetter}', "");
Expect(0, 443, '\p{^Is_Sentence_Break=_ OLetter}', "");
Expect(0, 443, '\P{Is_Sentence_Break=_ OLetter}', "");
Expect(1, 443, '\P{^Is_Sentence_Break=_ OLetter}', "");
Expect(0, 442, '\p{Is_Sentence_Break=_ OLetter}', "");
Expect(1, 442, '\p{^Is_Sentence_Break=_ OLetter}', "");
Expect(1, 442, '\P{Is_Sentence_Break=_ OLetter}', "");
Expect(0, 442, '\P{^Is_Sentence_Break=_ OLetter}', "");
Error('\p{Is_SB=_:=LE}');
Error('\P{Is_SB=_:=LE}');
Expect(1, 443, '\p{Is_SB=le}', "");
Expect(0, 443, '\p{^Is_SB=le}', "");
Expect(0, 443, '\P{Is_SB=le}', "");
Expect(1, 443, '\P{^Is_SB=le}', "");
Expect(0, 442, '\p{Is_SB=le}', "");
Expect(1, 442, '\p{^Is_SB=le}', "");
Expect(1, 442, '\P{Is_SB=le}', "");
Expect(0, 442, '\P{^Is_SB=le}', "");
Expect(1, 443, '\p{Is_SB=_LE}', "");
Expect(0, 443, '\p{^Is_SB=_LE}', "");
Expect(0, 443, '\P{Is_SB=_LE}', "");
Expect(1, 443, '\P{^Is_SB=_LE}', "");
Expect(0, 442, '\p{Is_SB=_LE}', "");
Expect(1, 442, '\p{^Is_SB=_LE}', "");
Expect(1, 442, '\P{Is_SB=_LE}', "");
Expect(0, 442, '\P{^Is_SB=_LE}', "");
Error('\p{Sentence_Break=:=_ cr}');
Error('\P{Sentence_Break=:=_ cr}');
Expect(1, 13, '\p{Sentence_Break=cr}', "");
Expect(0, 13, '\p{^Sentence_Break=cr}', "");
Expect(0, 13, '\P{Sentence_Break=cr}', "");
Expect(1, 13, '\P{^Sentence_Break=cr}', "");
Expect(0, 12, '\p{Sentence_Break=cr}', "");
Expect(1, 12, '\p{^Sentence_Break=cr}', "");
Expect(1, 12, '\P{Sentence_Break=cr}', "");
Expect(0, 12, '\P{^Sentence_Break=cr}', "");
Expect(1, 13, '\p{Sentence_Break=- CR}', "");
Expect(0, 13, '\p{^Sentence_Break=- CR}', "");
Expect(0, 13, '\P{Sentence_Break=- CR}', "");
Expect(1, 13, '\P{^Sentence_Break=- CR}', "");
Expect(0, 12, '\p{Sentence_Break=- CR}', "");
Expect(1, 12, '\p{^Sentence_Break=- CR}', "");
Expect(1, 12, '\P{Sentence_Break=- CR}', "");
Expect(0, 12, '\P{^Sentence_Break=- CR}', "");
Error('\p{SB=	-CR/a/}');
Error('\P{SB=	-CR/a/}');
Expect(1, 13, '\p{SB=cr}', "");
Expect(0, 13, '\p{^SB=cr}', "");
Expect(0, 13, '\P{SB=cr}', "");
Expect(1, 13, '\P{^SB=cr}', "");
Expect(0, 12, '\p{SB=cr}', "");
Expect(1, 12, '\p{^SB=cr}', "");
Expect(1, 12, '\P{SB=cr}', "");
Expect(0, 12, '\P{^SB=cr}', "");
Expect(1, 13, '\p{SB=_CR}', "");
Expect(0, 13, '\p{^SB=_CR}', "");
Expect(0, 13, '\P{SB=_CR}', "");
Expect(1, 13, '\P{^SB=_CR}', "");
Expect(0, 12, '\p{SB=_CR}', "");
Expect(1, 12, '\p{^SB=_CR}', "");
Expect(1, 12, '\P{SB=_CR}', "");
Expect(0, 12, '\P{^SB=_CR}', "");
Error('\p{Is_Sentence_Break=	-CR:=}');
Error('\P{Is_Sentence_Break=	-CR:=}');
Expect(1, 13, '\p{Is_Sentence_Break=cr}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=cr}', "");
Expect(0, 13, '\P{Is_Sentence_Break=cr}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=cr}', "");
Expect(0, 12, '\p{Is_Sentence_Break=cr}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=cr}', "");
Expect(1, 12, '\P{Is_Sentence_Break=cr}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=cr}', "");
Expect(1, 13, '\p{Is_Sentence_Break=	 CR}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=	 CR}', "");
Expect(0, 13, '\P{Is_Sentence_Break=	 CR}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=	 CR}', "");
Expect(0, 12, '\p{Is_Sentence_Break=	 CR}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=	 CR}', "");
Expect(1, 12, '\P{Is_Sentence_Break=	 CR}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=	 CR}', "");
Error('\p{Is_SB=-:=CR}');
Error('\P{Is_SB=-:=CR}');
Expect(1, 13, '\p{Is_SB=cr}', "");
Expect(0, 13, '\p{^Is_SB=cr}', "");
Expect(0, 13, '\P{Is_SB=cr}', "");
Expect(1, 13, '\P{^Is_SB=cr}', "");
Expect(0, 12, '\p{Is_SB=cr}', "");
Expect(1, 12, '\p{^Is_SB=cr}', "");
Expect(1, 12, '\P{Is_SB=cr}', "");
Expect(0, 12, '\P{^Is_SB=cr}', "");
Expect(1, 13, '\p{Is_SB= -CR}', "");
Expect(0, 13, '\p{^Is_SB= -CR}', "");
Expect(0, 13, '\P{Is_SB= -CR}', "");
Expect(1, 13, '\P{^Is_SB= -CR}', "");
Expect(0, 12, '\p{Is_SB= -CR}', "");
Expect(1, 12, '\p{^Is_SB= -CR}', "");
Expect(1, 12, '\P{Is_SB= -CR}', "");
Expect(0, 12, '\P{^Is_SB= -CR}', "");
Error('\p{Sentence_Break=- Other:=}');
Error('\P{Sentence_Break=- Other:=}');
Expect(1, 8, '\p{Sentence_Break=other}', "");
Expect(0, 8, '\p{^Sentence_Break=other}', "");
Expect(0, 8, '\P{Sentence_Break=other}', "");
Expect(1, 8, '\P{^Sentence_Break=other}', "");
Expect(0, 13, '\p{Sentence_Break=other}', "");
Expect(1, 13, '\p{^Sentence_Break=other}', "");
Expect(1, 13, '\P{Sentence_Break=other}', "");
Expect(0, 13, '\P{^Sentence_Break=other}', "");
Expect(1, 8, '\p{Sentence_Break=  Other}', "");
Expect(0, 8, '\p{^Sentence_Break=  Other}', "");
Expect(0, 8, '\P{Sentence_Break=  Other}', "");
Expect(1, 8, '\P{^Sentence_Break=  Other}', "");
Expect(0, 13, '\p{Sentence_Break=  Other}', "");
Expect(1, 13, '\p{^Sentence_Break=  Other}', "");
Expect(1, 13, '\P{Sentence_Break=  Other}', "");
Expect(0, 13, '\P{^Sentence_Break=  Other}', "");
Error('\p{SB=-XX/a/}');
Error('\P{SB=-XX/a/}');
Expect(1, 8, '\p{SB=xx}', "");
Expect(0, 8, '\p{^SB=xx}', "");
Expect(0, 8, '\P{SB=xx}', "");
Expect(1, 8, '\P{^SB=xx}', "");
Expect(0, 13, '\p{SB=xx}', "");
Expect(1, 13, '\p{^SB=xx}', "");
Expect(1, 13, '\P{SB=xx}', "");
Expect(0, 13, '\P{^SB=xx}', "");
Expect(1, 8, '\p{SB:   	_XX}', "");
Expect(0, 8, '\p{^SB:   	_XX}', "");
Expect(0, 8, '\P{SB:   	_XX}', "");
Expect(1, 8, '\P{^SB:   	_XX}', "");
Expect(0, 13, '\p{SB:   	_XX}', "");
Expect(1, 13, '\p{^SB:   	_XX}', "");
Expect(1, 13, '\P{SB:   	_XX}', "");
Expect(0, 13, '\P{^SB:   	_XX}', "");
Error('\p{Is_Sentence_Break=:=_ Other}');
Error('\P{Is_Sentence_Break=:=_ Other}');
Expect(1, 8, '\p{Is_Sentence_Break=other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break=other}', "");
Expect(0, 8, '\P{Is_Sentence_Break=other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break=other}', "");
Expect(0, 13, '\p{Is_Sentence_Break=other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break=other}', "");
Expect(1, 13, '\P{Is_Sentence_Break=other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break=other}', "");
Expect(1, 8, '\p{Is_Sentence_Break=-_Other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break=-_Other}', "");
Expect(0, 8, '\P{Is_Sentence_Break=-_Other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break=-_Other}', "");
Expect(0, 13, '\p{Is_Sentence_Break=-_Other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break=-_Other}', "");
Expect(1, 13, '\P{Is_Sentence_Break=-_Other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break=-_Other}', "");
Error('\p{Is_SB=- XX/a/}');
Error('\P{Is_SB=- XX/a/}');
Expect(1, 8, '\p{Is_SB=xx}', "");
Expect(0, 8, '\p{^Is_SB=xx}', "");
Expect(0, 8, '\P{Is_SB=xx}', "");
Expect(1, 8, '\P{^Is_SB=xx}', "");
Expect(0, 13, '\p{Is_SB=xx}', "");
Expect(1, 13, '\p{^Is_SB=xx}', "");
Expect(1, 13, '\P{Is_SB=xx}', "");
Expect(0, 13, '\P{^Is_SB=xx}', "");
Expect(1, 8, '\p{Is_SB=-_XX}', "");
Expect(0, 8, '\p{^Is_SB=-_XX}', "");
Expect(0, 8, '\P{Is_SB=-_XX}', "");
Expect(1, 8, '\P{^Is_SB=-_XX}', "");
Expect(0, 13, '\p{Is_SB=-_XX}', "");
Expect(1, 13, '\p{^Is_SB=-_XX}', "");
Expect(1, 13, '\P{Is_SB=-_XX}', "");
Expect(0, 13, '\P{^Is_SB=-_XX}', "");
Error('\p{Sentence_Break=_:=Numeric}');
Error('\P{Sentence_Break=_:=Numeric}');
Expect(1, 57, '\p{Sentence_Break=numeric}', "");
Expect(0, 57, '\p{^Sentence_Break=numeric}', "");
Expect(0, 57, '\P{Sentence_Break=numeric}', "");
Expect(1, 57, '\P{^Sentence_Break=numeric}', "");
Expect(0, 47, '\p{Sentence_Break=numeric}', "");
Expect(1, 47, '\p{^Sentence_Break=numeric}', "");
Expect(1, 47, '\P{Sentence_Break=numeric}', "");
Expect(0, 47, '\P{^Sentence_Break=numeric}', "");
Expect(1, 57, '\p{Sentence_Break=__NUMERIC}', "");
Expect(0, 57, '\p{^Sentence_Break=__NUMERIC}', "");
Expect(0, 57, '\P{Sentence_Break=__NUMERIC}', "");
Expect(1, 57, '\P{^Sentence_Break=__NUMERIC}', "");
Expect(0, 47, '\p{Sentence_Break=__NUMERIC}', "");
Expect(1, 47, '\p{^Sentence_Break=__NUMERIC}', "");
Expect(1, 47, '\P{Sentence_Break=__NUMERIC}', "");
Expect(0, 47, '\P{^Sentence_Break=__NUMERIC}', "");
Error('\p{SB::= nu}');
Error('\P{SB::= nu}');
Expect(1, 57, '\p{SB=nu}', "");
Expect(0, 57, '\p{^SB=nu}', "");
Expect(0, 57, '\P{SB=nu}', "");
Expect(1, 57, '\P{^SB=nu}', "");
Expect(0, 47, '\p{SB=nu}', "");
Expect(1, 47, '\p{^SB=nu}', "");
Expect(1, 47, '\P{SB=nu}', "");
Expect(0, 47, '\P{^SB=nu}', "");
Expect(1, 57, '\p{SB=--NU}', "");
Expect(0, 57, '\p{^SB=--NU}', "");
Expect(0, 57, '\P{SB=--NU}', "");
Expect(1, 57, '\P{^SB=--NU}', "");
Expect(0, 47, '\p{SB=--NU}', "");
Expect(1, 47, '\p{^SB=--NU}', "");
Expect(1, 47, '\P{SB=--NU}', "");
Expect(0, 47, '\P{^SB=--NU}', "");
Error('\p{Is_Sentence_Break=	-NUMERIC/a/}');
Error('\P{Is_Sentence_Break=	-NUMERIC/a/}');
Expect(1, 57, '\p{Is_Sentence_Break: numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break: numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break: numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break: numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break: numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break: numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break: numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break: numeric}', "");
Expect(1, 57, '\p{Is_Sentence_Break=- Numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break=- Numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break=- Numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break=- Numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break=- Numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break=- Numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break=- Numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break=- Numeric}', "");
Error('\p{Is_SB=	-NU:=}');
Error('\P{Is_SB=	-NU:=}');
Expect(1, 57, '\p{Is_SB=nu}', "");
Expect(0, 57, '\p{^Is_SB=nu}', "");
Expect(0, 57, '\P{Is_SB=nu}', "");
Expect(1, 57, '\P{^Is_SB=nu}', "");
Expect(0, 47, '\p{Is_SB=nu}', "");
Expect(1, 47, '\p{^Is_SB=nu}', "");
Expect(1, 47, '\P{Is_SB=nu}', "");
Expect(0, 47, '\P{^Is_SB=nu}', "");
Expect(1, 57, '\p{Is_SB= nu}', "");
Expect(0, 57, '\p{^Is_SB= nu}', "");
Expect(0, 57, '\P{Is_SB= nu}', "");
Expect(1, 57, '\P{^Is_SB= nu}', "");
Expect(0, 47, '\p{Is_SB= nu}', "");
Expect(1, 47, '\p{^Is_SB= nu}', "");
Expect(1, 47, '\P{Is_SB= nu}', "");
Expect(0, 47, '\P{^Is_SB= nu}', "");
Error('\p{Sentence_Break=/a/format}');
Error('\P{Sentence_Break=/a/format}');
Expect(1, 173, '\p{Sentence_Break=format}', "");
Expect(0, 173, '\p{^Sentence_Break=format}', "");
Expect(0, 173, '\P{Sentence_Break=format}', "");
Expect(1, 173, '\P{^Sentence_Break=format}', "");
Expect(0, 172, '\p{Sentence_Break=format}', "");
Expect(1, 172, '\p{^Sentence_Break=format}', "");
Expect(1, 172, '\P{Sentence_Break=format}', "");
Expect(0, 172, '\P{^Sentence_Break=format}', "");
Expect(1, 173, '\p{Sentence_Break= Format}', "");
Expect(0, 173, '\p{^Sentence_Break= Format}', "");
Expect(0, 173, '\P{Sentence_Break= Format}', "");
Expect(1, 173, '\P{^Sentence_Break= Format}', "");
Expect(0, 172, '\p{Sentence_Break= Format}', "");
Expect(1, 172, '\p{^Sentence_Break= Format}', "");
Expect(1, 172, '\P{Sentence_Break= Format}', "");
Expect(0, 172, '\P{^Sentence_Break= Format}', "");
Error('\p{SB=	:=fo}');
Error('\P{SB=	:=fo}');
Expect(1, 173, '\p{SB=fo}', "");
Expect(0, 173, '\p{^SB=fo}', "");
Expect(0, 173, '\P{SB=fo}', "");
Expect(1, 173, '\P{^SB=fo}', "");
Expect(0, 172, '\p{SB=fo}', "");
Expect(1, 172, '\p{^SB=fo}', "");
Expect(1, 172, '\P{SB=fo}', "");
Expect(0, 172, '\P{^SB=fo}', "");
Expect(1, 173, '\p{SB=	_fo}', "");
Expect(0, 173, '\p{^SB=	_fo}', "");
Expect(0, 173, '\P{SB=	_fo}', "");
Expect(1, 173, '\P{^SB=	_fo}', "");
Expect(0, 172, '\p{SB=	_fo}', "");
Expect(1, 172, '\p{^SB=	_fo}', "");
Expect(1, 172, '\P{SB=	_fo}', "");
Expect(0, 172, '\P{^SB=	_fo}', "");
Error('\p{Is_Sentence_Break=/a/_ Format}');
Error('\P{Is_Sentence_Break=/a/_ Format}');
Expect(1, 173, '\p{Is_Sentence_Break=format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break=format}', "");
Expect(0, 173, '\P{Is_Sentence_Break=format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break=format}', "");
Expect(0, 172, '\p{Is_Sentence_Break=format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break=format}', "");
Expect(1, 172, '\P{Is_Sentence_Break=format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break=format}', "");
Expect(1, 173, '\p{Is_Sentence_Break=-	Format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break=-	Format}', "");
Expect(0, 173, '\P{Is_Sentence_Break=-	Format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break=-	Format}', "");
Expect(0, 172, '\p{Is_Sentence_Break=-	Format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break=-	Format}', "");
Expect(1, 172, '\P{Is_Sentence_Break=-	Format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break=-	Format}', "");
Error('\p{Is_SB=	:=FO}');
Error('\P{Is_SB=	:=FO}');
Expect(1, 173, '\p{Is_SB=fo}', "");
Expect(0, 173, '\p{^Is_SB=fo}', "");
Expect(0, 173, '\P{Is_SB=fo}', "");
Expect(1, 173, '\P{^Is_SB=fo}', "");
Expect(0, 172, '\p{Is_SB=fo}', "");
Expect(1, 172, '\p{^Is_SB=fo}', "");
Expect(1, 172, '\P{Is_SB=fo}', "");
Expect(0, 172, '\P{^Is_SB=fo}', "");
Expect(1, 173, '\p{Is_SB:	-_FO}', "");
Expect(0, 173, '\p{^Is_SB:	-_FO}', "");
Expect(0, 173, '\P{Is_SB:	-_FO}', "");
Expect(1, 173, '\P{^Is_SB:	-_FO}', "");
Expect(0, 172, '\p{Is_SB:	-_FO}', "");
Expect(1, 172, '\p{^Is_SB:	-_FO}', "");
Expect(1, 172, '\P{Is_SB:	-_FO}', "");
Expect(0, 172, '\P{^Is_SB:	-_FO}', "");
Error('\p{Sentence_Break=:= Lower}');
Error('\P{Sentence_Break=:= Lower}');
Expect(1, 122, '\p{Sentence_Break=lower}', "");
Expect(0, 122, '\p{^Sentence_Break=lower}', "");
Expect(0, 122, '\P{Sentence_Break=lower}', "");
Expect(1, 122, '\P{^Sentence_Break=lower}', "");
Expect(0, 96, '\p{Sentence_Break=lower}', "");
Expect(1, 96, '\p{^Sentence_Break=lower}', "");
Expect(1, 96, '\P{Sentence_Break=lower}', "");
Expect(0, 96, '\P{^Sentence_Break=lower}', "");
Expect(1, 122, '\p{Sentence_Break: -Lower}', "");
Expect(0, 122, '\p{^Sentence_Break: -Lower}', "");
Expect(0, 122, '\P{Sentence_Break: -Lower}', "");
Expect(1, 122, '\P{^Sentence_Break: -Lower}', "");
Expect(0, 96, '\p{Sentence_Break: -Lower}', "");
Expect(1, 96, '\p{^Sentence_Break: -Lower}', "");
Expect(1, 96, '\P{Sentence_Break: -Lower}', "");
Expect(0, 96, '\P{^Sentence_Break: -Lower}', "");
Error('\p{SB:/a/_	LO}');
Error('\P{SB:/a/_	LO}');
Expect(1, 122, '\p{SB:   lo}', "");
Expect(0, 122, '\p{^SB:   lo}', "");
Expect(0, 122, '\P{SB:   lo}', "");
Expect(1, 122, '\P{^SB:   lo}', "");
Expect(0, 96, '\p{SB:   lo}', "");
Expect(1, 96, '\p{^SB:   lo}', "");
Expect(1, 96, '\P{SB:   lo}', "");
Expect(0, 96, '\P{^SB:   lo}', "");
Expect(1, 122, '\p{SB=_LO}', "");
Expect(0, 122, '\p{^SB=_LO}', "");
Expect(0, 122, '\P{SB=_LO}', "");
Expect(1, 122, '\P{^SB=_LO}', "");
Expect(0, 96, '\p{SB=_LO}', "");
Expect(1, 96, '\p{^SB=_LO}', "");
Expect(1, 96, '\P{SB=_LO}', "");
Expect(0, 96, '\P{^SB=_LO}', "");
Error('\p{Is_Sentence_Break=-/a/Lower}');
Error('\P{Is_Sentence_Break=-/a/Lower}');
Expect(1, 122, '\p{Is_Sentence_Break:	lower}', "");
Expect(0, 122, '\p{^Is_Sentence_Break:	lower}', "");
Expect(0, 122, '\P{Is_Sentence_Break:	lower}', "");
Expect(1, 122, '\P{^Is_Sentence_Break:	lower}', "");
Expect(0, 96, '\p{Is_Sentence_Break:	lower}', "");
Expect(1, 96, '\p{^Is_Sentence_Break:	lower}', "");
Expect(1, 96, '\P{Is_Sentence_Break:	lower}', "");
Expect(0, 96, '\P{^Is_Sentence_Break:	lower}', "");
Expect(1, 122, '\p{Is_Sentence_Break=	lower}', "");
Expect(0, 122, '\p{^Is_Sentence_Break=	lower}', "");
Expect(0, 122, '\P{Is_Sentence_Break=	lower}', "");
Expect(1, 122, '\P{^Is_Sentence_Break=	lower}', "");
Expect(0, 96, '\p{Is_Sentence_Break=	lower}', "");
Expect(1, 96, '\p{^Is_Sentence_Break=	lower}', "");
Expect(1, 96, '\P{Is_Sentence_Break=	lower}', "");
Expect(0, 96, '\P{^Is_Sentence_Break=	lower}', "");
Error('\p{Is_SB= LO/a/}');
Error('\P{Is_SB= LO/a/}');
Expect(1, 122, '\p{Is_SB=lo}', "");
Expect(0, 122, '\p{^Is_SB=lo}', "");
Expect(0, 122, '\P{Is_SB=lo}', "");
Expect(1, 122, '\P{^Is_SB=lo}', "");
Expect(0, 96, '\p{Is_SB=lo}', "");
Expect(1, 96, '\p{^Is_SB=lo}', "");
Expect(1, 96, '\P{Is_SB=lo}', "");
Expect(0, 96, '\P{^Is_SB=lo}', "");
Expect(1, 122, '\p{Is_SB=  LO}', "");
Expect(0, 122, '\p{^Is_SB=  LO}', "");
Expect(0, 122, '\P{Is_SB=  LO}', "");
Expect(1, 122, '\P{^Is_SB=  LO}', "");
Expect(0, 96, '\p{Is_SB=  LO}', "");
Expect(1, 96, '\p{^Is_SB=  LO}', "");
Expect(1, 96, '\P{Is_SB=  LO}', "");
Expect(0, 96, '\P{^Is_SB=  LO}', "");
Error('\p{Sentence_Break=	-UPPER/a/}');
Error('\P{Sentence_Break=	-UPPER/a/}');
Expect(1, 90, '\p{Sentence_Break=upper}', "");
Expect(0, 90, '\p{^Sentence_Break=upper}', "");
Expect(0, 90, '\P{Sentence_Break=upper}', "");
Expect(1, 90, '\P{^Sentence_Break=upper}', "");
Expect(0, 64, '\p{Sentence_Break=upper}', "");
Expect(1, 64, '\p{^Sentence_Break=upper}', "");
Expect(1, 64, '\P{Sentence_Break=upper}', "");
Expect(0, 64, '\P{^Sentence_Break=upper}', "");
Expect(1, 90, '\p{Sentence_Break= upper}', "");
Expect(0, 90, '\p{^Sentence_Break= upper}', "");
Expect(0, 90, '\P{Sentence_Break= upper}', "");
Expect(1, 90, '\P{^Sentence_Break= upper}', "");
Expect(0, 64, '\p{Sentence_Break= upper}', "");
Expect(1, 64, '\p{^Sentence_Break= upper}', "");
Expect(1, 64, '\P{Sentence_Break= upper}', "");
Expect(0, 64, '\P{^Sentence_Break= upper}', "");
Error('\p{SB=:= _UP}');
Error('\P{SB=:= _UP}');
Expect(1, 90, '\p{SB=up}', "");
Expect(0, 90, '\p{^SB=up}', "");
Expect(0, 90, '\P{SB=up}', "");
Expect(1, 90, '\P{^SB=up}', "");
Expect(0, 64, '\p{SB=up}', "");
Expect(1, 64, '\p{^SB=up}', "");
Expect(1, 64, '\P{SB=up}', "");
Expect(0, 64, '\P{^SB=up}', "");
Expect(1, 90, '\p{SB=--UP}', "");
Expect(0, 90, '\p{^SB=--UP}', "");
Expect(0, 90, '\P{SB=--UP}', "");
Expect(1, 90, '\P{^SB=--UP}', "");
Expect(0, 64, '\p{SB=--UP}', "");
Expect(1, 64, '\p{^SB=--UP}', "");
Expect(1, 64, '\P{SB=--UP}', "");
Expect(0, 64, '\P{^SB=--UP}', "");
Error('\p{Is_Sentence_Break::=_Upper}');
Error('\P{Is_Sentence_Break::=_Upper}');
Expect(1, 90, '\p{Is_Sentence_Break=upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=upper}', "");
Expect(1, 90, '\p{Is_Sentence_Break=  upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=  upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=  upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=  upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=  upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=  upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=  upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=  upper}', "");
Error('\p{Is_SB= UP:=}');
Error('\P{Is_SB= UP:=}');
Expect(1, 90, '\p{Is_SB:up}', "");
Expect(0, 90, '\p{^Is_SB:up}', "");
Expect(0, 90, '\P{Is_SB:up}', "");
Expect(1, 90, '\P{^Is_SB:up}', "");
Expect(0, 64, '\p{Is_SB:up}', "");
Expect(1, 64, '\p{^Is_SB:up}', "");
Expect(1, 64, '\P{Is_SB:up}', "");
Expect(0, 64, '\P{^Is_SB:up}', "");
Expect(1, 90, '\p{Is_SB=		UP}', "");
Expect(0, 90, '\p{^Is_SB=		UP}', "");
Expect(0, 90, '\P{Is_SB=		UP}', "");
Expect(1, 90, '\P{^Is_SB=		UP}', "");
Expect(0, 64, '\p{Is_SB=		UP}', "");
Expect(1, 64, '\p{^Is_SB=		UP}', "");
Expect(1, 64, '\P{Is_SB=		UP}', "");
Expect(0, 64, '\P{^Is_SB=		UP}', "");
Error('\p{Sentence_Break= _SEP:=}');
Error('\P{Sentence_Break= _SEP:=}');
Expect(1, 133, '\p{Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Sentence_Break=sep}', "");
Expect(0, 133, '\P{Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Sentence_Break=sep}', "");
Expect(0, 132, '\p{Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Sentence_Break=sep}', "");
Expect(1, 132, '\P{Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Sentence_Break=sep}', "");
Expect(1, 133, '\p{Sentence_Break:_SEP}', "");
Expect(0, 133, '\p{^Sentence_Break:_SEP}', "");
Expect(0, 133, '\P{Sentence_Break:_SEP}', "");
Expect(1, 133, '\P{^Sentence_Break:_SEP}', "");
Expect(0, 132, '\p{Sentence_Break:_SEP}', "");
Expect(1, 132, '\p{^Sentence_Break:_SEP}', "");
Expect(1, 132, '\P{Sentence_Break:_SEP}', "");
Expect(0, 132, '\P{^Sentence_Break:_SEP}', "");
Error('\p{SB=_/a/SE}');
Error('\P{SB=_/a/SE}');
Expect(1, 133, '\p{SB=se}', "");
Expect(0, 133, '\p{^SB=se}', "");
Expect(0, 133, '\P{SB=se}', "");
Expect(1, 133, '\P{^SB=se}', "");
Expect(0, 132, '\p{SB=se}', "");
Expect(1, 132, '\p{^SB=se}', "");
Expect(1, 132, '\P{SB=se}', "");
Expect(0, 132, '\P{^SB=se}', "");
Expect(1, 133, '\p{SB=	 SE}', "");
Expect(0, 133, '\p{^SB=	 SE}', "");
Expect(0, 133, '\P{SB=	 SE}', "");
Expect(1, 133, '\P{^SB=	 SE}', "");
Expect(0, 132, '\p{SB=	 SE}', "");
Expect(1, 132, '\p{^SB=	 SE}', "");
Expect(1, 132, '\P{SB=	 SE}', "");
Expect(0, 132, '\P{^SB=	 SE}', "");
Error('\p{Is_Sentence_Break=	Sep:=}');
Error('\P{Is_Sentence_Break=	Sep:=}');
Expect(1, 133, '\p{Is_Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break=sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break=sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break=sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break=sep}', "");
Expect(1, 133, '\p{Is_Sentence_Break=_Sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break=_Sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break=_Sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break=_Sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break=_Sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break=_Sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break=_Sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break=_Sep}', "");
Error('\p{Is_SB:		:=SE}');
Error('\P{Is_SB:		:=SE}');
Expect(1, 133, '\p{Is_SB=se}', "");
Expect(0, 133, '\p{^Is_SB=se}', "");
Expect(0, 133, '\P{Is_SB=se}', "");
Expect(1, 133, '\P{^Is_SB=se}', "");
Expect(0, 132, '\p{Is_SB=se}', "");
Expect(1, 132, '\p{^Is_SB=se}', "");
Expect(1, 132, '\P{Is_SB=se}', "");
Expect(0, 132, '\P{^Is_SB=se}', "");
Expect(1, 133, '\p{Is_SB=_	SE}', "");
Expect(0, 133, '\p{^Is_SB=_	SE}', "");
Expect(0, 133, '\P{Is_SB=_	SE}', "");
Expect(1, 133, '\P{^Is_SB=_	SE}', "");
Expect(0, 132, '\p{Is_SB=_	SE}', "");
Expect(1, 132, '\p{^Is_SB=_	SE}', "");
Expect(1, 132, '\P{Is_SB=_	SE}', "");
Expect(0, 132, '\P{^Is_SB=_	SE}', "");
Error('\p{Sentence_Break=_/a/extend}');
Error('\P{Sentence_Break=_/a/extend}');
Expect(1, 879, '\p{Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Sentence_Break=extend}', "");
Expect(0, 879, '\P{Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Sentence_Break=extend}', "");
Expect(0, 767, '\p{Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Sentence_Break=extend}', "");
Expect(1, 767, '\P{Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Sentence_Break=extend}', "");
Expect(1, 879, '\p{Sentence_Break= -Extend}', "");
Expect(0, 879, '\p{^Sentence_Break= -Extend}', "");
Expect(0, 879, '\P{Sentence_Break= -Extend}', "");
Expect(1, 879, '\P{^Sentence_Break= -Extend}', "");
Expect(0, 767, '\p{Sentence_Break= -Extend}', "");
Expect(1, 767, '\p{^Sentence_Break= -Extend}', "");
Expect(1, 767, '\P{Sentence_Break= -Extend}', "");
Expect(0, 767, '\P{^Sentence_Break= -Extend}', "");
Error('\p{SB=	:=ex}');
Error('\P{SB=	:=ex}');
Expect(1, 879, '\p{SB=ex}', "");
Expect(0, 879, '\p{^SB=ex}', "");
Expect(0, 879, '\P{SB=ex}', "");
Expect(1, 879, '\P{^SB=ex}', "");
Expect(0, 767, '\p{SB=ex}', "");
Expect(1, 767, '\p{^SB=ex}', "");
Expect(1, 767, '\P{SB=ex}', "");
Expect(0, 767, '\P{^SB=ex}', "");
Expect(1, 879, '\p{SB: -EX}', "");
Expect(0, 879, '\p{^SB: -EX}', "");
Expect(0, 879, '\P{SB: -EX}', "");
Expect(1, 879, '\P{^SB: -EX}', "");
Expect(0, 767, '\p{SB: -EX}', "");
Expect(1, 767, '\p{^SB: -EX}', "");
Expect(1, 767, '\P{SB: -EX}', "");
Expect(0, 767, '\P{^SB: -EX}', "");
Error('\p{Is_Sentence_Break=:= _Extend}');
Error('\P{Is_Sentence_Break=:= _Extend}');
Expect(1, 879, '\p{Is_Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=extend}', "");
Expect(1, 879, '\p{Is_Sentence_Break=--Extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=--Extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=--Extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=--Extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=--Extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=--Extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=--Extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=--Extend}', "");
Error('\p{Is_SB=_/a/EX}');
Error('\P{Is_SB=_/a/EX}');
Expect(1, 879, '\p{Is_SB=ex}', "");
Expect(0, 879, '\p{^Is_SB=ex}', "");
Expect(0, 879, '\P{Is_SB=ex}', "");
Expect(1, 879, '\P{^Is_SB=ex}', "");
Expect(0, 767, '\p{Is_SB=ex}', "");
Expect(1, 767, '\p{^Is_SB=ex}', "");
Expect(1, 767, '\P{Is_SB=ex}', "");
Expect(0, 767, '\P{^Is_SB=ex}', "");
Expect(1, 879, '\p{Is_SB=_ex}', "");
Expect(0, 879, '\p{^Is_SB=_ex}', "");
Expect(0, 879, '\P{Is_SB=_ex}', "");
Expect(1, 879, '\P{^Is_SB=_ex}', "");
Expect(0, 767, '\p{Is_SB=_ex}', "");
Expect(1, 767, '\p{^Is_SB=_ex}', "");
Expect(1, 767, '\P{Is_SB=_ex}', "");
Expect(0, 767, '\P{^Is_SB=_ex}', "");
Error('\p{Sentence_Break=	-STERM/a/}');
Error('\P{Sentence_Break=	-STERM/a/}');
Expect(1, 33, '\p{Sentence_Break:   sterm}', "");
Expect(0, 33, '\p{^Sentence_Break:   sterm}', "");
Expect(0, 33, '\P{Sentence_Break:   sterm}', "");
Expect(1, 33, '\P{^Sentence_Break:   sterm}', "");
Expect(0, 32, '\p{Sentence_Break:   sterm}', "");
Expect(1, 32, '\p{^Sentence_Break:   sterm}', "");
Expect(1, 32, '\P{Sentence_Break:   sterm}', "");
Expect(0, 32, '\P{^Sentence_Break:   sterm}', "");
Expect(1, 33, '\p{Sentence_Break=-STerm}', "");
Expect(0, 33, '\p{^Sentence_Break=-STerm}', "");
Expect(0, 33, '\P{Sentence_Break=-STerm}', "");
Expect(1, 33, '\P{^Sentence_Break=-STerm}', "");
Expect(0, 32, '\p{Sentence_Break=-STerm}', "");
Expect(1, 32, '\p{^Sentence_Break=-STerm}', "");
Expect(1, 32, '\P{Sentence_Break=-STerm}', "");
Expect(0, 32, '\P{^Sentence_Break=-STerm}', "");
Error('\p{SB=ST/a/}');
Error('\P{SB=ST/a/}');
Expect(1, 33, '\p{SB=st}', "");
Expect(0, 33, '\p{^SB=st}', "");
Expect(0, 33, '\P{SB=st}', "");
Expect(1, 33, '\P{^SB=st}', "");
Expect(0, 32, '\p{SB=st}', "");
Expect(1, 32, '\p{^SB=st}', "");
Expect(1, 32, '\P{SB=st}', "");
Expect(0, 32, '\P{^SB=st}', "");
Expect(1, 33, '\p{SB=-ST}', "");
Expect(0, 33, '\p{^SB=-ST}', "");
Expect(0, 33, '\P{SB=-ST}', "");
Expect(1, 33, '\P{^SB=-ST}', "");
Expect(0, 32, '\p{SB=-ST}', "");
Expect(1, 32, '\p{^SB=-ST}', "");
Expect(1, 32, '\P{SB=-ST}', "");
Expect(0, 32, '\P{^SB=-ST}', "");
Error('\p{Is_Sentence_Break=	_STerm:=}');
Error('\P{Is_Sentence_Break=	_STerm:=}');
Expect(1, 33, '\p{Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\p{Is_Sentence_Break=	sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break=	sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break=	sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break=	sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break=	sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break=	sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break=	sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break=	sterm}', "");
Error('\p{Is_SB:	_:=ST}');
Error('\P{Is_SB:	_:=ST}');
Expect(1, 33, '\p{Is_SB=st}', "");
Expect(0, 33, '\p{^Is_SB=st}', "");
Expect(0, 33, '\P{Is_SB=st}', "");
Expect(1, 33, '\P{^Is_SB=st}', "");
Expect(0, 32, '\p{Is_SB=st}', "");
Expect(1, 32, '\p{^Is_SB=st}', "");
Expect(1, 32, '\P{Is_SB=st}', "");
Expect(0, 32, '\P{^Is_SB=st}', "");
Expect(1, 33, '\p{Is_SB= -ST}', "");
Expect(0, 33, '\p{^Is_SB= -ST}', "");
Expect(0, 33, '\P{Is_SB= -ST}', "");
Expect(1, 33, '\P{^Is_SB= -ST}', "");
Expect(0, 32, '\p{Is_SB= -ST}', "");
Expect(1, 32, '\p{^Is_SB= -ST}', "");
Expect(1, 32, '\P{Is_SB= -ST}', "");
Expect(0, 32, '\P{^Is_SB= -ST}', "");
Error('\p{Sentence_Break=/a/	LF}');
Error('\P{Sentence_Break=/a/	LF}');
Expect(1, 10, '\p{Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Sentence_Break=lf}', "");
Expect(0, 10, '\P{Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Sentence_Break=lf}', "");
Expect(0, 9, '\p{Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Sentence_Break=lf}', "");
Expect(1, 9, '\P{Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Sentence_Break=lf}', "");
Expect(1, 10, '\p{Sentence_Break=__LF}', "");
Expect(0, 10, '\p{^Sentence_Break=__LF}', "");
Expect(0, 10, '\P{Sentence_Break=__LF}', "");
Expect(1, 10, '\P{^Sentence_Break=__LF}', "");
Expect(0, 9, '\p{Sentence_Break=__LF}', "");
Expect(1, 9, '\p{^Sentence_Break=__LF}', "");
Expect(1, 9, '\P{Sentence_Break=__LF}', "");
Expect(0, 9, '\P{^Sentence_Break=__LF}', "");
Error('\p{SB=/a/_ LF}');
Error('\P{SB=/a/_ LF}');
Expect(1, 10, '\p{SB=lf}', "");
Expect(0, 10, '\p{^SB=lf}', "");
Expect(0, 10, '\P{SB=lf}', "");
Expect(1, 10, '\P{^SB=lf}', "");
Expect(0, 9, '\p{SB=lf}', "");
Expect(1, 9, '\p{^SB=lf}', "");
Expect(1, 9, '\P{SB=lf}', "");
Expect(0, 9, '\P{^SB=lf}', "");
Expect(1, 10, '\p{SB=-LF}', "");
Expect(0, 10, '\p{^SB=-LF}', "");
Expect(0, 10, '\P{SB=-LF}', "");
Expect(1, 10, '\P{^SB=-LF}', "");
Expect(0, 9, '\p{SB=-LF}', "");
Expect(1, 9, '\p{^SB=-LF}', "");
Expect(1, 9, '\P{SB=-LF}', "");
Expect(0, 9, '\P{^SB=-LF}', "");
Error('\p{Is_Sentence_Break=:=_LF}');
Error('\P{Is_Sentence_Break=:=_LF}');
Expect(1, 10, '\p{Is_Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Is_Sentence_Break=lf}', "");
Expect(0, 10, '\P{Is_Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Is_Sentence_Break=lf}', "");
Expect(0, 9, '\p{Is_Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Is_Sentence_Break=lf}', "");
Expect(1, 9, '\P{Is_Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Is_Sentence_Break=lf}', "");
Expect(1, 10, '\p{Is_Sentence_Break=LF}', "");
Expect(0, 10, '\p{^Is_Sentence_Break=LF}', "");
Expect(0, 10, '\P{Is_Sentence_Break=LF}', "");
Expect(1, 10, '\P{^Is_Sentence_Break=LF}', "");
Expect(0, 9, '\p{Is_Sentence_Break=LF}', "");
Expect(1, 9, '\p{^Is_Sentence_Break=LF}', "");
Expect(1, 9, '\P{Is_Sentence_Break=LF}', "");
Expect(0, 9, '\P{^Is_Sentence_Break=LF}', "");
Error('\p{Is_SB=_ lf:=}');
Error('\P{Is_SB=_ lf:=}');
Expect(1, 10, '\p{Is_SB=lf}', "");
Expect(0, 10, '\p{^Is_SB=lf}', "");
Expect(0, 10, '\P{Is_SB=lf}', "");
Expect(1, 10, '\P{^Is_SB=lf}', "");
Expect(0, 9, '\p{Is_SB=lf}', "");
Expect(1, 9, '\p{^Is_SB=lf}', "");
Expect(1, 9, '\P{Is_SB=lf}', "");
Expect(0, 9, '\P{^Is_SB=lf}', "");
Expect(1, 10, '\p{Is_SB=__lf}', "");
Expect(0, 10, '\p{^Is_SB=__lf}', "");
Expect(0, 10, '\P{Is_SB=__lf}', "");
Expect(1, 10, '\P{^Is_SB=__lf}', "");
Expect(0, 9, '\p{Is_SB=__lf}', "");
Expect(1, 9, '\p{^Is_SB=__lf}', "");
Expect(1, 9, '\P{Is_SB=__lf}', "");
Expect(0, 9, '\P{^Is_SB=__lf}', "");
Error('\p{Sentence_Break=	:=CLOSE}');
Error('\P{Sentence_Break=	:=CLOSE}');
Expect(1, 34, '\p{Sentence_Break=close}', "");
Expect(0, 34, '\p{^Sentence_Break=close}', "");
Expect(0, 34, '\P{Sentence_Break=close}', "");
Expect(1, 34, '\P{^Sentence_Break=close}', "");
Expect(0, 33, '\p{Sentence_Break=close}', "");
Expect(1, 33, '\p{^Sentence_Break=close}', "");
Expect(1, 33, '\P{Sentence_Break=close}', "");
Expect(0, 33, '\P{^Sentence_Break=close}', "");
Expect(1, 34, '\p{Sentence_Break=	CLOSE}', "");
Expect(0, 34, '\p{^Sentence_Break=	CLOSE}', "");
Expect(0, 34, '\P{Sentence_Break=	CLOSE}', "");
Expect(1, 34, '\P{^Sentence_Break=	CLOSE}', "");
Expect(0, 33, '\p{Sentence_Break=	CLOSE}', "");
Expect(1, 33, '\p{^Sentence_Break=	CLOSE}', "");
Expect(1, 33, '\P{Sentence_Break=	CLOSE}', "");
Expect(0, 33, '\P{^Sentence_Break=	CLOSE}', "");
Error('\p{SB= _CL:=}');
Error('\P{SB= _CL:=}');
Expect(1, 34, '\p{SB=cl}', "");
Expect(0, 34, '\p{^SB=cl}', "");
Expect(0, 34, '\P{SB=cl}', "");
Expect(1, 34, '\P{^SB=cl}', "");
Expect(0, 33, '\p{SB=cl}', "");
Expect(1, 33, '\p{^SB=cl}', "");
Expect(1, 33, '\P{SB=cl}', "");
Expect(0, 33, '\P{^SB=cl}', "");
Expect(1, 34, '\p{SB=	CL}', "");
Expect(0, 34, '\p{^SB=	CL}', "");
Expect(0, 34, '\P{SB=	CL}', "");
Expect(1, 34, '\P{^SB=	CL}', "");
Expect(0, 33, '\p{SB=	CL}', "");
Expect(1, 33, '\p{^SB=	CL}', "");
Expect(1, 33, '\P{SB=	CL}', "");
Expect(0, 33, '\P{^SB=	CL}', "");
Error('\p{Is_Sentence_Break=-/a/close}');
Error('\P{Is_Sentence_Break=-/a/close}');
Expect(1, 34, '\p{Is_Sentence_Break=close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break=close}', "");
Expect(0, 34, '\P{Is_Sentence_Break=close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break=close}', "");
Expect(0, 33, '\p{Is_Sentence_Break=close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break=close}', "");
Expect(1, 33, '\P{Is_Sentence_Break=close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break=close}', "");
Expect(1, 34, '\p{Is_Sentence_Break= Close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break= Close}', "");
Expect(0, 34, '\P{Is_Sentence_Break= Close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break= Close}', "");
Expect(0, 33, '\p{Is_Sentence_Break= Close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break= Close}', "");
Expect(1, 33, '\P{Is_Sentence_Break= Close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break= Close}', "");
Error('\p{Is_SB=/a/		CL}');
Error('\P{Is_SB=/a/		CL}');
Expect(1, 34, '\p{Is_SB: cl}', "");
Expect(0, 34, '\p{^Is_SB: cl}', "");
Expect(0, 34, '\P{Is_SB: cl}', "");
Expect(1, 34, '\P{^Is_SB: cl}', "");
Expect(0, 33, '\p{Is_SB: cl}', "");
Expect(1, 33, '\p{^Is_SB: cl}', "");
Expect(1, 33, '\P{Is_SB: cl}', "");
Expect(0, 33, '\P{^Is_SB: cl}', "");
Expect(1, 34, '\p{Is_SB:__CL}', "");
Expect(0, 34, '\p{^Is_SB:__CL}', "");
Expect(0, 34, '\P{Is_SB:__CL}', "");
Expect(1, 34, '\P{^Is_SB:__CL}', "");
Expect(0, 33, '\p{Is_SB:__CL}', "");
Expect(1, 33, '\p{^Is_SB:__CL}', "");
Expect(1, 33, '\P{Is_SB:__CL}', "");
Expect(0, 33, '\P{^Is_SB:__CL}', "");
Error('\p{Alphabetic=/a/ yes}');
Error('\P{Alphabetic=/a/ yes}');
Expect(1, 90, '\p{Alphabetic=yes}', "");
Expect(0, 90, '\p{^Alphabetic=yes}', "");
Expect(0, 90, '\P{Alphabetic=yes}', "");
Expect(1, 90, '\P{^Alphabetic=yes}', "");
Expect(0, 64, '\p{Alphabetic=yes}', "");
Expect(1, 64, '\p{^Alphabetic=yes}', "");
Expect(1, 64, '\P{Alphabetic=yes}', "");
Expect(0, 64, '\P{^Alphabetic=yes}', "");
Expect(1, 90, '\p{Alphabetic:   _ Yes}', "");
Expect(0, 90, '\p{^Alphabetic:   _ Yes}', "");
Expect(0, 90, '\P{Alphabetic:   _ Yes}', "");
Expect(1, 90, '\P{^Alphabetic:   _ Yes}', "");
Expect(0, 64, '\p{Alphabetic:   _ Yes}', "");
Expect(1, 64, '\p{^Alphabetic:   _ Yes}', "");
Expect(1, 64, '\P{Alphabetic:   _ Yes}', "");
Expect(0, 64, '\P{^Alphabetic:   _ Yes}', "");
Error('\p{Alpha=- Y:=}');
Error('\P{Alpha=- Y:=}');
Expect(1, 90, '\p{Alpha:   y}', "");
Expect(0, 90, '\p{^Alpha:   y}', "");
Expect(0, 90, '\P{Alpha:   y}', "");
Expect(1, 90, '\P{^Alpha:   y}', "");
Expect(0, 64, '\p{Alpha:   y}', "");
Expect(1, 64, '\p{^Alpha:   y}', "");
Expect(1, 64, '\P{Alpha:   y}', "");
Expect(0, 64, '\P{^Alpha:   y}', "");
Expect(1, 90, '\p{Alpha= -Y}', "");
Expect(0, 90, '\p{^Alpha= -Y}', "");
Expect(0, 90, '\P{Alpha= -Y}', "");
Expect(1, 90, '\P{^Alpha= -Y}', "");
Expect(0, 64, '\p{Alpha= -Y}', "");
Expect(1, 64, '\p{^Alpha= -Y}', "");
Expect(1, 64, '\P{Alpha= -Y}', "");
Expect(0, 64, '\P{^Alpha= -Y}', "");
Error('\p{Is_Alphabetic=-	T:=}');
Error('\P{Is_Alphabetic=-	T:=}');
Expect(1, 90, '\p{Is_Alphabetic=t}', "");
Expect(0, 90, '\p{^Is_Alphabetic=t}', "");
Expect(0, 90, '\P{Is_Alphabetic=t}', "");
Expect(1, 90, '\P{^Is_Alphabetic=t}', "");
Expect(0, 64, '\p{Is_Alphabetic=t}', "");
Expect(1, 64, '\p{^Is_Alphabetic=t}', "");
Expect(1, 64, '\P{Is_Alphabetic=t}', "");
Expect(0, 64, '\P{^Is_Alphabetic=t}', "");
Expect(1, 90, '\p{Is_Alphabetic= T}', "");
Expect(0, 90, '\p{^Is_Alphabetic= T}', "");
Expect(0, 90, '\P{Is_Alphabetic= T}', "");
Expect(1, 90, '\P{^Is_Alphabetic= T}', "");
Expect(0, 64, '\p{Is_Alphabetic= T}', "");
Expect(1, 64, '\p{^Is_Alphabetic= T}', "");
Expect(1, 64, '\P{Is_Alphabetic= T}', "");
Expect(0, 64, '\P{^Is_Alphabetic= T}', "");
Error('\p{Is_Alpha=/a/ 	true}');
Error('\P{Is_Alpha=/a/ 	true}');
Expect(1, 90, '\p{Is_Alpha=true}', "");
Expect(0, 90, '\p{^Is_Alpha=true}', "");
Expect(0, 90, '\P{Is_Alpha=true}', "");
Expect(1, 90, '\P{^Is_Alpha=true}', "");
Expect(0, 64, '\p{Is_Alpha=true}', "");
Expect(1, 64, '\p{^Is_Alpha=true}', "");
Expect(1, 64, '\P{Is_Alpha=true}', "");
Expect(0, 64, '\P{^Is_Alpha=true}', "");
Expect(1, 90, '\p{Is_Alpha:   _	True}', "");
Expect(0, 90, '\p{^Is_Alpha:   _	True}', "");
Expect(0, 90, '\P{Is_Alpha:   _	True}', "");
Expect(1, 90, '\P{^Is_Alpha:   _	True}', "");
Expect(0, 64, '\p{Is_Alpha:   _	True}', "");
Expect(1, 64, '\p{^Is_Alpha:   _	True}', "");
Expect(1, 64, '\P{Is_Alpha:   _	True}', "");
Expect(0, 64, '\P{^Is_Alpha:   _	True}', "");
Error('\p{Alphabetic=	 No/a/}');
Error('\P{Alphabetic=	 No/a/}');
Expect(1, 64, '\p{Alphabetic=no}', "");
Expect(0, 64, '\p{^Alphabetic=no}', "");
Expect(0, 64, '\P{Alphabetic=no}', "");
Expect(1, 64, '\P{^Alphabetic=no}', "");
Expect(0, 90, '\p{Alphabetic=no}', "");
Expect(1, 90, '\p{^Alphabetic=no}', "");
Expect(1, 90, '\P{Alphabetic=no}', "");
Expect(0, 90, '\P{^Alphabetic=no}', "");
Expect(1, 64, '\p{Alphabetic=	_no}', "");
Expect(0, 64, '\p{^Alphabetic=	_no}', "");
Expect(0, 64, '\P{Alphabetic=	_no}', "");
Expect(1, 64, '\P{^Alphabetic=	_no}', "");
Expect(0, 90, '\p{Alphabetic=	_no}', "");
Expect(1, 90, '\p{^Alphabetic=	_no}', "");
Expect(1, 90, '\P{Alphabetic=	_no}', "");
Expect(0, 90, '\P{^Alphabetic=	_no}', "");
Error('\p{Alpha=:=_-N}');
Error('\P{Alpha=:=_-N}');
Expect(1, 64, '\p{Alpha=n}', "");
Expect(0, 64, '\p{^Alpha=n}', "");
Expect(0, 64, '\P{Alpha=n}', "");
Expect(1, 64, '\P{^Alpha=n}', "");
Expect(0, 90, '\p{Alpha=n}', "");
Expect(1, 90, '\p{^Alpha=n}', "");
Expect(1, 90, '\P{Alpha=n}', "");
Expect(0, 90, '\P{^Alpha=n}', "");
Expect(1, 64, '\p{Alpha=_-N}', "");
Expect(0, 64, '\p{^Alpha=_-N}', "");
Expect(0, 64, '\P{Alpha=_-N}', "");
Expect(1, 64, '\P{^Alpha=_-N}', "");
Expect(0, 90, '\p{Alpha=_-N}', "");
Expect(1, 90, '\p{^Alpha=_-N}', "");
Expect(1, 90, '\P{Alpha=_-N}', "");
Expect(0, 90, '\P{^Alpha=_-N}', "");
Error('\p{Is_Alphabetic:	:=-F}');
Error('\P{Is_Alphabetic:	:=-F}');
Expect(1, 64, '\p{Is_Alphabetic:f}', "");
Expect(0, 64, '\p{^Is_Alphabetic:f}', "");
Expect(0, 64, '\P{Is_Alphabetic:f}', "");
Expect(1, 64, '\P{^Is_Alphabetic:f}', "");
Expect(0, 90, '\p{Is_Alphabetic:f}', "");
Expect(1, 90, '\p{^Is_Alphabetic:f}', "");
Expect(1, 90, '\P{Is_Alphabetic:f}', "");
Expect(0, 90, '\P{^Is_Alphabetic:f}', "");
Expect(1, 64, '\p{Is_Alphabetic=  F}', "");
Expect(0, 64, '\p{^Is_Alphabetic=  F}', "");
Expect(0, 64, '\P{Is_Alphabetic=  F}', "");
Expect(1, 64, '\P{^Is_Alphabetic=  F}', "");
Expect(0, 90, '\p{Is_Alphabetic=  F}', "");
Expect(1, 90, '\p{^Is_Alphabetic=  F}', "");
Expect(1, 90, '\P{Is_Alphabetic=  F}', "");
Expect(0, 90, '\P{^Is_Alphabetic=  F}', "");
Error('\p{Is_Alpha=_ FALSE:=}');
Error('\P{Is_Alpha=_ FALSE:=}');
Expect(1, 64, '\p{Is_Alpha=false}', "");
Expect(0, 64, '\p{^Is_Alpha=false}', "");
Expect(0, 64, '\P{Is_Alpha=false}', "");
Expect(1, 64, '\P{^Is_Alpha=false}', "");
Expect(0, 90, '\p{Is_Alpha=false}', "");
Expect(1, 90, '\p{^Is_Alpha=false}', "");
Expect(1, 90, '\P{Is_Alpha=false}', "");
Expect(0, 90, '\P{^Is_Alpha=false}', "");
Expect(1, 64, '\p{Is_Alpha:		false}', "");
Expect(0, 64, '\p{^Is_Alpha:		false}', "");
Expect(0, 64, '\P{Is_Alpha:		false}', "");
Expect(1, 64, '\P{^Is_Alpha:		false}', "");
Expect(0, 90, '\p{Is_Alpha:		false}', "");
Expect(1, 90, '\p{^Is_Alpha:		false}', "");
Expect(1, 90, '\P{Is_Alpha:		false}', "");
Expect(0, 90, '\P{^Is_Alpha:		false}', "");
Error('\p{Hex_Digit=	/a/yes}');
Error('\P{Hex_Digit=	/a/yes}');
Expect(1, 57, '\p{Hex_Digit=yes}', "");
Expect(0, 57, '\p{^Hex_Digit=yes}', "");
Expect(0, 57, '\P{Hex_Digit=yes}', "");
Expect(1, 57, '\P{^Hex_Digit=yes}', "");
Expect(0, 47, '\p{Hex_Digit=yes}', "");
Expect(1, 47, '\p{^Hex_Digit=yes}', "");
Expect(1, 47, '\P{Hex_Digit=yes}', "");
Expect(0, 47, '\P{^Hex_Digit=yes}', "");
Expect(1, 57, '\p{Hex_Digit= yes}', "");
Expect(0, 57, '\p{^Hex_Digit= yes}', "");
Expect(0, 57, '\P{Hex_Digit= yes}', "");
Expect(1, 57, '\P{^Hex_Digit= yes}', "");
Expect(0, 47, '\p{Hex_Digit= yes}', "");
Expect(1, 47, '\p{^Hex_Digit= yes}', "");
Expect(1, 47, '\P{Hex_Digit= yes}', "");
Expect(0, 47, '\P{^Hex_Digit= yes}', "");
Error('\p{Hex= :=Y}');
Error('\P{Hex= :=Y}');
Expect(1, 57, '\p{Hex=y}', "");
Expect(0, 57, '\p{^Hex=y}', "");
Expect(0, 57, '\P{Hex=y}', "");
Expect(1, 57, '\P{^Hex=y}', "");
Expect(0, 47, '\p{Hex=y}', "");
Expect(1, 47, '\p{^Hex=y}', "");
Expect(1, 47, '\P{Hex=y}', "");
Expect(0, 47, '\P{^Hex=y}', "");
Expect(1, 57, '\p{Hex=	Y}', "");
Expect(0, 57, '\p{^Hex=	Y}', "");
Expect(0, 57, '\P{Hex=	Y}', "");
Expect(1, 57, '\P{^Hex=	Y}', "");
Expect(0, 47, '\p{Hex=	Y}', "");
Expect(1, 47, '\p{^Hex=	Y}', "");
Expect(1, 47, '\P{Hex=	Y}', "");
Expect(0, 47, '\P{^Hex=	Y}', "");
Error('\p{Is_Hex_Digit=:=	T}');
Error('\P{Is_Hex_Digit=:=	T}');
Expect(1, 57, '\p{Is_Hex_Digit=t}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=t}', "");
Expect(0, 57, '\P{Is_Hex_Digit=t}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=t}', "");
Expect(0, 47, '\p{Is_Hex_Digit=t}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=t}', "");
Expect(1, 47, '\P{Is_Hex_Digit=t}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=t}', "");
Expect(1, 57, '\p{Is_Hex_Digit=	t}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=	t}', "");
Expect(0, 57, '\P{Is_Hex_Digit=	t}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=	t}', "");
Expect(0, 47, '\p{Is_Hex_Digit=	t}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=	t}', "");
Expect(1, 47, '\P{Is_Hex_Digit=	t}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=	t}', "");
Error('\p{Is_Hex=	:=TRUE}');
Error('\P{Is_Hex=	:=TRUE}');
Expect(1, 57, '\p{Is_Hex=true}', "");
Expect(0, 57, '\p{^Is_Hex=true}', "");
Expect(0, 57, '\P{Is_Hex=true}', "");
Expect(1, 57, '\P{^Is_Hex=true}', "");
Expect(0, 47, '\p{Is_Hex=true}', "");
Expect(1, 47, '\p{^Is_Hex=true}', "");
Expect(1, 47, '\P{Is_Hex=true}', "");
Expect(0, 47, '\P{^Is_Hex=true}', "");
Expect(1, 57, '\p{Is_Hex= _TRUE}', "");
Expect(0, 57, '\p{^Is_Hex= _TRUE}', "");
Expect(0, 57, '\P{Is_Hex= _TRUE}', "");
Expect(1, 57, '\P{^Is_Hex= _TRUE}', "");
Expect(0, 47, '\p{Is_Hex= _TRUE}', "");
Expect(1, 47, '\p{^Is_Hex= _TRUE}', "");
Expect(1, 47, '\P{Is_Hex= _TRUE}', "");
Expect(0, 47, '\P{^Is_Hex= _TRUE}', "");
Error('\p{Hex_Digit=--no/a/}');
Error('\P{Hex_Digit=--no/a/}');
Expect(1, 47, '\p{Hex_Digit=no}', "");
Expect(0, 47, '\p{^Hex_Digit=no}', "");
Expect(0, 47, '\P{Hex_Digit=no}', "");
Expect(1, 47, '\P{^Hex_Digit=no}', "");
Expect(0, 57, '\p{Hex_Digit=no}', "");
Expect(1, 57, '\p{^Hex_Digit=no}', "");
Expect(1, 57, '\P{Hex_Digit=no}', "");
Expect(0, 57, '\P{^Hex_Digit=no}', "");
Expect(1, 47, '\p{Hex_Digit=__NO}', "");
Expect(0, 47, '\p{^Hex_Digit=__NO}', "");
Expect(0, 47, '\P{Hex_Digit=__NO}', "");
Expect(1, 47, '\P{^Hex_Digit=__NO}', "");
Expect(0, 57, '\p{Hex_Digit=__NO}', "");
Expect(1, 57, '\p{^Hex_Digit=__NO}', "");
Expect(1, 57, '\P{Hex_Digit=__NO}', "");
Expect(0, 57, '\P{^Hex_Digit=__NO}', "");
Error('\p{Hex=/a/	N}');
Error('\P{Hex=/a/	N}');
Expect(1, 47, '\p{Hex=n}', "");
Expect(0, 47, '\p{^Hex=n}', "");
Expect(0, 47, '\P{Hex=n}', "");
Expect(1, 47, '\P{^Hex=n}', "");
Expect(0, 57, '\p{Hex=n}', "");
Expect(1, 57, '\p{^Hex=n}', "");
Expect(1, 57, '\P{Hex=n}', "");
Expect(0, 57, '\P{^Hex=n}', "");
Expect(1, 47, '\p{Hex=N}', "");
Expect(0, 47, '\p{^Hex=N}', "");
Expect(0, 47, '\P{Hex=N}', "");
Expect(1, 47, '\P{^Hex=N}', "");
Expect(0, 57, '\p{Hex=N}', "");
Expect(1, 57, '\p{^Hex=N}', "");
Expect(1, 57, '\P{Hex=N}', "");
Expect(0, 57, '\P{^Hex=N}', "");
Error('\p{Is_Hex_Digit= :=F}');
Error('\P{Is_Hex_Digit= :=F}');
Expect(1, 47, '\p{Is_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_Hex_Digit=f}', "");
Expect(1, 47, '\p{Is_Hex_Digit=	F}', "");
Expect(0, 47, '\p{^Is_Hex_Digit=	F}', "");
Expect(0, 47, '\P{Is_Hex_Digit=	F}', "");
Expect(1, 47, '\P{^Is_Hex_Digit=	F}', "");
Expect(0, 57, '\p{Is_Hex_Digit=	F}', "");
Expect(1, 57, '\p{^Is_Hex_Digit=	F}', "");
Expect(1, 57, '\P{Is_Hex_Digit=	F}', "");
Expect(0, 57, '\P{^Is_Hex_Digit=	F}', "");
Error('\p{Is_Hex=/a/_ False}');
Error('\P{Is_Hex=/a/_ False}');
Expect(1, 47, '\p{Is_Hex:	false}', "");
Expect(0, 47, '\p{^Is_Hex:	false}', "");
Expect(0, 47, '\P{Is_Hex:	false}', "");
Expect(1, 47, '\P{^Is_Hex:	false}', "");
Expect(0, 57, '\p{Is_Hex:	false}', "");
Expect(1, 57, '\p{^Is_Hex:	false}', "");
Expect(1, 57, '\P{Is_Hex:	false}', "");
Expect(0, 57, '\P{^Is_Hex:	false}', "");
Expect(1, 47, '\p{Is_Hex=  false}', "");
Expect(0, 47, '\p{^Is_Hex=  false}', "");
Expect(0, 47, '\P{Is_Hex=  false}', "");
Expect(1, 47, '\P{^Is_Hex=  false}', "");
Expect(0, 57, '\p{Is_Hex=  false}', "");
Expect(1, 57, '\p{^Is_Hex=  false}', "");
Expect(1, 57, '\P{Is_Hex=  false}', "");
Expect(0, 57, '\P{^Is_Hex=  false}', "");
Error('\p{Canonical_Combining_Class: _+0/a/0 0-0_0_0	0_0 32}');
Error('\P{Canonical_Combining_Class: _+0/a/0 0-0_0_0	0_0 32}');
Expect(1, 1562, '\p{Canonical_Combining_Class=0000032}', "");
Expect(0, 1562, '\p{^Canonical_Combining_Class=0000032}', "");
Expect(0, 1562, '\P{Canonical_Combining_Class=0000032}', "");
Expect(1, 1562, '\P{^Canonical_Combining_Class=0000032}', "");
Expect(0, 1561, '\p{Canonical_Combining_Class=0000032}', "");
Expect(1, 1561, '\p{^Canonical_Combining_Class=0000032}', "");
Expect(1, 1561, '\P{Canonical_Combining_Class=0000032}', "");
Expect(0, 1561, '\P{^Canonical_Combining_Class=0000032}', "");
Error('\p{Ccc=	003:=2}');
Error('\P{Ccc=	003:=2}');
Expect(1, 1562, '\p{Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(0, 1562, '\p{^Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(0, 1562, '\P{Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(1, 1562, '\P{^Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(0, 1561, '\p{Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(1, 1561, '\p{^Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(1, 1561, '\P{Ccc=0_0_0_0_0_0_0_0_032}', "");
Expect(0, 1561, '\P{^Ccc=0_0_0_0_0_0_0_0_032}', "");
Error('\p{Is_Canonical_Combining_Class= /a/00000	00003 2}');
Error('\P{Is_Canonical_Combining_Class= /a/00000	00003 2}');
Expect(1, 1562, '\p{Is_Canonical_Combining_Class=0000000032}', "");
Expect(0, 1562, '\p{^Is_Canonical_Combining_Class=0000000032}', "");
Expect(0, 1562, '\P{Is_Canonical_Combining_Class=0000000032}', "");
Expect(1, 1562, '\P{^Is_Canonical_Combining_Class=0000000032}', "");
Expect(0, 1561, '\p{Is_Canonical_Combining_Class=0000000032}', "");
Expect(1, 1561, '\p{^Is_Canonical_Combining_Class=0000000032}', "");
Expect(1, 1561, '\P{Is_Canonical_Combining_Class=0000000032}', "");
Expect(0, 1561, '\P{^Is_Canonical_Combining_Class=0000000032}', "");
Error('\p{Is_Ccc=	:=3	2}');
Error('\P{Is_Ccc=	:=3	2}');
Expect(1, 1562, '\p{Is_Ccc=000000032}', "");
Expect(0, 1562, '\p{^Is_Ccc=000000032}', "");
Expect(0, 1562, '\P{Is_Ccc=000000032}', "");
Expect(1, 1562, '\P{^Is_Ccc=000000032}', "");
Expect(0, 1561, '\p{Is_Ccc=000000032}', "");
Expect(1, 1561, '\p{^Is_Ccc=000000032}', "");
Expect(1, 1561, '\P{Is_Ccc=000000032}', "");
Expect(0, 1561, '\P{^Is_Ccc=000000032}', "");
Error('\p{Canonical_Combining_Class=-0118:=}');
Error('\P{Canonical_Combining_Class=-0118:=}');
Expect(1, 3769, '\p{Canonical_Combining_Class=00118}', "");
Expect(0, 3769, '\p{^Canonical_Combining_Class=00118}', "");
Expect(0, 3769, '\P{Canonical_Combining_Class=00118}', "");
Expect(1, 3769, '\P{^Canonical_Combining_Class=00118}', "");
Expect(0, 3767, '\p{Canonical_Combining_Class=00118}', "");
Expect(1, 3767, '\p{^Canonical_Combining_Class=00118}', "");
Expect(1, 3767, '\P{Canonical_Combining_Class=00118}', "");
Expect(0, 3767, '\P{^Canonical_Combining_Class=00118}', "");
Error('\p{Ccc:   :=	0118}');
Error('\P{Ccc:   :=	0118}');
Expect(1, 3769, '\p{Ccc=0_0_0_0_0_0118}', "");
Expect(0, 3769, '\p{^Ccc=0_0_0_0_0_0118}', "");
Expect(0, 3769, '\P{Ccc=0_0_0_0_0_0118}', "");
Expect(1, 3769, '\P{^Ccc=0_0_0_0_0_0118}', "");
Expect(0, 3767, '\p{Ccc=0_0_0_0_0_0118}', "");
Expect(1, 3767, '\p{^Ccc=0_0_0_0_0_0118}', "");
Expect(1, 3767, '\P{Ccc=0_0_0_0_0_0118}', "");
Expect(0, 3767, '\P{^Ccc=0_0_0_0_0_0118}', "");
Error('\p{Is_Canonical_Combining_Class=-_00118/a/}');
Error('\P{Is_Canonical_Combining_Class=-_00118/a/}');
Expect(1, 3769, '\p{Is_Canonical_Combining_Class=118}', "");
Expect(0, 3769, '\p{^Is_Canonical_Combining_Class=118}', "");
Expect(0, 3769, '\P{Is_Canonical_Combining_Class=118}', "");
Expect(1, 3769, '\P{^Is_Canonical_Combining_Class=118}', "");
Expect(0, 3767, '\p{Is_Canonical_Combining_Class=118}', "");
Expect(1, 3767, '\p{^Is_Canonical_Combining_Class=118}', "");
Expect(1, 3767, '\P{Is_Canonical_Combining_Class=118}', "");
Expect(0, 3767, '\P{^Is_Canonical_Combining_Class=118}', "");
Error('\p{Is_Ccc=_:=+0118}');
Error('\P{Is_Ccc=_:=+0118}');
Expect(1, 3769, '\p{Is_Ccc=0_1_18}', "");
Expect(0, 3769, '\p{^Is_Ccc=0_1_18}', "");
Expect(0, 3769, '\P{Is_Ccc=0_1_18}', "");
Expect(1, 3769, '\P{^Is_Ccc=0_1_18}', "");
Expect(0, 3767, '\p{Is_Ccc=0_1_18}', "");
Expect(1, 3767, '\p{^Is_Ccc=0_1_18}', "");
Expect(1, 3767, '\P{Is_Ccc=0_1_18}', "");
Expect(0, 3767, '\P{^Is_Ccc=0_1_18}', "");
Error('\p{Canonical_Combining_Class=--doubleAbove:=}');
Error('\P{Canonical_Combining_Class=--doubleAbove:=}');
Expect(1, 862, '\p{Canonical_Combining_Class=doubleabove}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class=doubleabove}', "");
Expect(0, 862, '\P{Canonical_Combining_Class=doubleabove}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class=doubleabove}', "");
Expect(0, 860, '\p{Canonical_Combining_Class=doubleabove}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class=doubleabove}', "");
Expect(1, 860, '\P{Canonical_Combining_Class=doubleabove}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class=doubleabove}', "");
Expect(1, 862, '\p{Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(0, 862, '\P{Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(0, 860, '\p{Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(1, 860, '\P{Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class: DOUBLE	ABOVE}', "");
Error('\p{Ccc=:=	 DA}');
Error('\P{Ccc=:=	 DA}');
Expect(1, 862, '\p{Ccc=da}', "");
Expect(0, 862, '\p{^Ccc=da}', "");
Expect(0, 862, '\P{Ccc=da}', "");
Expect(1, 862, '\P{^Ccc=da}', "");
Expect(0, 860, '\p{Ccc=da}', "");
Expect(1, 860, '\p{^Ccc=da}', "");
Expect(1, 860, '\P{Ccc=da}', "");
Expect(0, 860, '\P{^Ccc=da}', "");
Expect(1, 862, '\p{Ccc=	 DA}', "");
Expect(0, 862, '\p{^Ccc=	 DA}', "");
Expect(0, 862, '\P{Ccc=	 DA}', "");
Expect(1, 862, '\P{^Ccc=	 DA}', "");
Expect(0, 860, '\p{Ccc=	 DA}', "");
Expect(1, 860, '\p{^Ccc=	 DA}', "");
Expect(1, 860, '\P{Ccc=	 DA}', "");
Expect(0, 860, '\P{^Ccc=	 DA}', "");
Error('\p{Is_Canonical_Combining_Class=_	00234/a/}');
Error('\P{Is_Canonical_Combining_Class=_	00234/a/}');
Expect(1, 862, '\p{Is_Canonical_Combining_Class=23_4}', "");
Expect(0, 862, '\p{^Is_Canonical_Combining_Class=23_4}', "");
Expect(0, 862, '\P{Is_Canonical_Combining_Class=23_4}', "");
Expect(1, 862, '\P{^Is_Canonical_Combining_Class=23_4}', "");
Expect(0, 860, '\p{Is_Canonical_Combining_Class=23_4}', "");
Expect(1, 860, '\p{^Is_Canonical_Combining_Class=23_4}', "");
Expect(1, 860, '\P{Is_Canonical_Combining_Class=23_4}', "");
Expect(0, 860, '\P{^Is_Canonical_Combining_Class=23_4}', "");
Error('\p{Is_Ccc=_/a/double_ABOVE}');
Error('\P{Is_Ccc=_/a/double_ABOVE}');
Expect(1, 862, '\p{Is_Ccc=doubleabove}', "");
Expect(0, 862, '\p{^Is_Ccc=doubleabove}', "");
Expect(0, 862, '\P{Is_Ccc=doubleabove}', "");
Expect(1, 862, '\P{^Is_Ccc=doubleabove}', "");
Expect(0, 860, '\p{Is_Ccc=doubleabove}', "");
Expect(1, 860, '\p{^Is_Ccc=doubleabove}', "");
Expect(1, 860, '\P{Is_Ccc=doubleabove}', "");
Expect(0, 860, '\P{^Is_Ccc=doubleabove}', "");
Expect(1, 862, '\p{Is_Ccc=_Double	ABOVE}', "");
Expect(0, 862, '\p{^Is_Ccc=_Double	ABOVE}', "");
Expect(0, 862, '\P{Is_Ccc=_Double	ABOVE}', "");
Expect(1, 862, '\P{^Is_Ccc=_Double	ABOVE}', "");
Expect(0, 860, '\p{Is_Ccc=_Double	ABOVE}', "");
Expect(1, 860, '\p{^Is_Ccc=_Double	ABOVE}', "");
Expect(1, 860, '\P{Is_Ccc=_Double	ABOVE}', "");
Expect(0, 860, '\P{^Is_Ccc=_Double	ABOVE}', "");
Error('\p{Canonical_Combining_Class= Attached-below:=Left}');
Error('\P{Canonical_Combining_Class= Attached-below:=Left}');
Expect(0, 1, '\p{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\p{Canonical_Combining_Class=attached_below left}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=attached_below left}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=attached_below left}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=attached_below left}', "");
Error('\p{Ccc=ATBL/a/}');
Error('\P{Ccc=ATBL/a/}');
Expect(0, 1, '\p{Ccc=atbl}', "");
Expect(1, 1, '\p{^Ccc=atbl}', "");
Expect(1, 1, '\P{Ccc=atbl}', "");
Expect(0, 1, '\P{^Ccc=atbl}', "");
Expect(0, 1, '\p{Ccc=  ATBL}', "");
Expect(1, 1, '\p{^Ccc=  ATBL}', "");
Expect(1, 1, '\P{Ccc=  ATBL}', "");
Expect(0, 1, '\P{^Ccc=  ATBL}', "");
Error('\p{Is_Canonical_Combining_Class: :=-0000000200}');
Error('\P{Is_Canonical_Combining_Class: :=-0000000200}');
Expect(0, 1, '\p{Is_Canonical_Combining_Class=00_20_0}', "");
Expect(1, 1, '\p{^Is_Canonical_Combining_Class=00_20_0}', "");
Expect(1, 1, '\P{Is_Canonical_Combining_Class=00_20_0}', "");
Expect(0, 1, '\P{^Is_Canonical_Combining_Class=00_20_0}', "");
Error('\p{Is_Ccc= attached:=BELOW-left}');
Error('\P{Is_Ccc= attached:=BELOW-left}');
Expect(0, 1, '\p{Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\p{^Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\P{Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\P{^Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\p{Is_Ccc=--attached_Below	LEFT}', "");
Expect(1, 1, '\p{^Is_Ccc=--attached_Below	LEFT}', "");
Expect(1, 1, '\P{Is_Ccc=--attached_Below	LEFT}', "");
Expect(0, 1, '\P{^Is_Ccc=--attached_Below	LEFT}', "");
Error('\p{Canonical_Combining_Class=:= _00000000018}');
Error('\P{Canonical_Combining_Class=:= _00000000018}');
Expect(1, 1464, '\p{Canonical_Combining_Class=000_001_8}', "");
Expect(0, 1464, '\p{^Canonical_Combining_Class=000_001_8}', "");
Expect(0, 1464, '\P{Canonical_Combining_Class=000_001_8}', "");
Expect(1, 1464, '\P{^Canonical_Combining_Class=000_001_8}', "");
Expect(0, 1463, '\p{Canonical_Combining_Class=000_001_8}', "");
Expect(1, 1463, '\p{^Canonical_Combining_Class=000_001_8}', "");
Expect(1, 1463, '\P{Canonical_Combining_Class=000_001_8}', "");
Expect(0, 1463, '\P{^Canonical_Combining_Class=000_001_8}', "");
Error('\p{Ccc:  +0:=0	0 0_00 0-0_0_18}');
Error('\P{Ccc:  +0:=0	0 0_00 0-0_0_18}');
Expect(1, 1464, '\p{Ccc=00000001_8}', "");
Expect(0, 1464, '\p{^Ccc=00000001_8}', "");
Expect(0, 1464, '\P{Ccc=00000001_8}', "");
Expect(1, 1464, '\P{^Ccc=00000001_8}', "");
Expect(0, 1463, '\p{Ccc=00000001_8}', "");
Expect(1, 1463, '\p{^Ccc=00000001_8}', "");
Expect(1, 1463, '\P{Ccc=00000001_8}', "");
Expect(0, 1463, '\P{^Ccc=00000001_8}', "");
Error('\p{Is_Canonical_Combining_Class=/a/+18}');
Error('\P{Is_Canonical_Combining_Class=/a/+18}');
Expect(1, 1464, '\p{Is_Canonical_Combining_Class=00000000018}', "");
Expect(0, 1464, '\p{^Is_Canonical_Combining_Class=00000000018}', "");
Expect(0, 1464, '\P{Is_Canonical_Combining_Class=00000000018}', "");
Expect(1, 1464, '\P{^Is_Canonical_Combining_Class=00000000018}', "");
Expect(0, 1463, '\p{Is_Canonical_Combining_Class=00000000018}', "");
Expect(1, 1463, '\p{^Is_Canonical_Combining_Class=00000000018}', "");
Expect(1, 1463, '\P{Is_Canonical_Combining_Class=00000000018}', "");
Expect(0, 1463, '\P{^Is_Canonical_Combining_Class=00000000018}', "");
Error('\p{Is_Ccc=_/a/0001	8}');
Error('\P{Is_Ccc=_/a/0001	8}');
Expect(1, 1464, '\p{Is_Ccc=+00018}', "");
Expect(0, 1464, '\p{^Is_Ccc=+00018}', "");
Expect(0, 1464, '\P{Is_Ccc=+00018}', "");
Expect(1, 1464, '\P{^Is_Ccc=+00018}', "");
Expect(0, 1463, '\p{Is_Ccc=+00018}', "");
Expect(1, 1463, '\p{^Is_Ccc=+00018}', "");
Expect(1, 1463, '\P{Is_Ccc=+00018}', "");
Expect(0, 1463, '\P{^Is_Ccc=+00018}', "");
Error('\p{Canonical_Combining_Class=	/a/+00	00 00	00 01 6}');
Error('\P{Canonical_Combining_Class=	/a/+00	00 00	00 01 6}');
Expect(1, 1462, '\p{Canonical_Combining_Class=001_6}', "");
Expect(0, 1462, '\p{^Canonical_Combining_Class=001_6}', "");
Expect(0, 1462, '\P{Canonical_Combining_Class=001_6}', "");
Expect(1, 1462, '\P{^Canonical_Combining_Class=001_6}', "");
Expect(0, 1461, '\p{Canonical_Combining_Class=001_6}', "");
Expect(1, 1461, '\p{^Canonical_Combining_Class=001_6}', "");
Expect(1, 1461, '\P{Canonical_Combining_Class=001_6}', "");
Expect(0, 1461, '\P{^Canonical_Combining_Class=001_6}', "");
Error('\p{Ccc=_:=000000016}');
Error('\P{Ccc=_:=000000016}');
Expect(1, 1462, '\p{Ccc=00016}', "");
Expect(0, 1462, '\p{^Ccc=00016}', "");
Expect(0, 1462, '\P{Ccc=00016}', "");
Expect(1, 1462, '\P{^Ccc=00016}', "");
Expect(0, 1461, '\p{Ccc=00016}', "");
Expect(1, 1461, '\p{^Ccc=00016}', "");
Expect(1, 1461, '\P{Ccc=00016}', "");
Expect(0, 1461, '\P{^Ccc=00016}', "");
Error('\p{Is_Canonical_Combining_Class=_/a/+000 000-000-16}');
Error('\P{Is_Canonical_Combining_Class=_/a/+000 000-000-16}');
Expect(1, 1462, '\p{Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(0, 1462, '\p{^Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(0, 1462, '\P{Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(1, 1462, '\P{^Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(0, 1461, '\p{Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(1, 1461, '\p{^Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(1, 1461, '\P{Is_Canonical_Combining_Class=0000_0001_6}', "");
Expect(0, 1461, '\P{^Is_Canonical_Combining_Class=0000_0001_6}', "");
Error('\p{Is_Ccc=_	+0/a/0 0-016}');
Error('\P{Is_Ccc=_	+0/a/0 0-016}');
Expect(1, 1462, '\p{Is_Ccc:	001_6}', "");
Expect(0, 1462, '\p{^Is_Ccc:	001_6}', "");
Expect(0, 1462, '\P{Is_Ccc:	001_6}', "");
Expect(1, 1462, '\P{^Is_Ccc:	001_6}', "");
Expect(0, 1461, '\p{Is_Ccc:	001_6}', "");
Expect(1, 1461, '\p{^Is_Ccc:	001_6}', "");
Expect(1, 1461, '\P{Is_Ccc:	001_6}', "");
Expect(0, 1461, '\P{^Is_Ccc:	001_6}', "");
Error('\p{Canonical_Combining_Class= 000000084:=}');
Error('\P{Canonical_Combining_Class= 000000084:=}');
Expect(1, 3157, '\p{Canonical_Combining_Class=8_4}', "");
Expect(0, 3157, '\p{^Canonical_Combining_Class=8_4}', "");
Expect(0, 3157, '\P{Canonical_Combining_Class=8_4}', "");
Expect(1, 3157, '\P{^Canonical_Combining_Class=8_4}', "");
Expect(0, 3156, '\p{Canonical_Combining_Class=8_4}', "");
Expect(1, 3156, '\p{^Canonical_Combining_Class=8_4}', "");
Expect(1, 3156, '\P{Canonical_Combining_Class=8_4}', "");
Expect(0, 3156, '\P{^Canonical_Combining_Class=8_4}', "");
Error('\p{Ccc:   _ 0:=0-0	0 0-0 084}');
Error('\P{Ccc:   _ 0:=0-0	0 0-0 084}');
Expect(1, 3157, '\p{Ccc=0084}', "");
Expect(0, 3157, '\p{^Ccc=0084}', "");
Expect(0, 3157, '\P{Ccc=0084}', "");
Expect(1, 3157, '\P{^Ccc=0084}', "");
Expect(0, 3156, '\p{Ccc=0084}', "");
Expect(1, 3156, '\p{^Ccc=0084}', "");
Expect(1, 3156, '\P{Ccc=0084}', "");
Expect(0, 3156, '\P{^Ccc=0084}', "");
Error('\p{Is_Canonical_Combining_Class=:=_000000084}');
Error('\P{Is_Canonical_Combining_Class=:=_000000084}');
Expect(1, 3157, '\p{Is_Canonical_Combining_Class=+0084}', "");
Expect(0, 3157, '\p{^Is_Canonical_Combining_Class=+0084}', "");
Expect(0, 3157, '\P{Is_Canonical_Combining_Class=+0084}', "");
Expect(1, 3157, '\P{^Is_Canonical_Combining_Class=+0084}', "");
Expect(0, 3156, '\p{Is_Canonical_Combining_Class=+0084}', "");
Expect(1, 3156, '\p{^Is_Canonical_Combining_Class=+0084}', "");
Expect(1, 3156, '\P{Is_Canonical_Combining_Class=+0084}', "");
Expect(0, 3156, '\P{^Is_Canonical_Combining_Class=+0084}', "");
Error('\p{Is_Ccc=	0000084:=}');
Error('\P{Is_Ccc=	0000084:=}');
Expect(1, 3157, '\p{Is_Ccc=+84}', "");
Expect(0, 3157, '\p{^Is_Ccc=+84}', "");
Expect(0, 3157, '\P{Is_Ccc=+84}', "");
Expect(1, 3157, '\P{^Is_Ccc=+84}', "");
Expect(0, 3156, '\p{Is_Ccc=+84}', "");
Expect(1, 3156, '\p{^Is_Ccc=+84}', "");
Expect(1, 3156, '\P{Is_Ccc=+84}', "");
Expect(0, 3156, '\P{^Is_Ccc=+84}', "");
Error('\p{Canonical_Combining_Class= :=000027}');
Error('\P{Canonical_Combining_Class= :=000027}');
Expect(1, 1611, '\p{Canonical_Combining_Class=+000_000_27}', "");
Expect(0, 1611, '\p{^Canonical_Combining_Class=+000_000_27}', "");
Expect(0, 1611, '\P{Canonical_Combining_Class=+000_000_27}', "");
Expect(1, 1611, '\P{^Canonical_Combining_Class=+000_000_27}', "");
Expect(0, 1610, '\p{Canonical_Combining_Class=+000_000_27}', "");
Expect(1, 1610, '\p{^Canonical_Combining_Class=+000_000_27}', "");
Expect(1, 1610, '\P{Canonical_Combining_Class=+000_000_27}', "");
Expect(0, 1610, '\P{^Canonical_Combining_Class=+000_000_27}', "");
Error('\p{Ccc= :=0000-27}');
Error('\P{Ccc= :=0000-27}');
Expect(1, 1611, '\p{Ccc: +027}', "");
Expect(0, 1611, '\p{^Ccc: +027}', "");
Expect(0, 1611, '\P{Ccc: +027}', "");
Expect(1, 1611, '\P{^Ccc: +027}', "");
Expect(0, 1610, '\p{Ccc: +027}', "");
Expect(1, 1610, '\p{^Ccc: +027}', "");
Expect(1, 1610, '\P{Ccc: +027}', "");
Expect(0, 1610, '\P{^Ccc: +027}', "");
Error('\p{Is_Canonical_Combining_Class= -0:=0_00	0_00 0_027}');
Error('\P{Is_Canonical_Combining_Class= -0:=0_00	0_00 0_027}');
Expect(1, 1611, '\p{Is_Canonical_Combining_Class=2_7}', "");
Expect(0, 1611, '\p{^Is_Canonical_Combining_Class=2_7}', "");
Expect(0, 1611, '\P{Is_Canonical_Combining_Class=2_7}', "");
Expect(1, 1611, '\P{^Is_Canonical_Combining_Class=2_7}', "");
Expect(0, 1610, '\p{Is_Canonical_Combining_Class=2_7}', "");
Expect(1, 1610, '\p{^Is_Canonical_Combining_Class=2_7}', "");
Expect(1, 1610, '\P{Is_Canonical_Combining_Class=2_7}', "");
Expect(0, 1610, '\P{^Is_Canonical_Combining_Class=2_7}', "");
Error('\p{Is_Ccc=	:=+000002-7}');
Error('\P{Is_Ccc=	:=+000002-7}');
Expect(1, 1611, '\p{Is_Ccc=+00_00_27}', "");
Expect(0, 1611, '\p{^Is_Ccc=+00_00_27}', "");
Expect(0, 1611, '\P{Is_Ccc=+00_00_27}', "");
Expect(1, 1611, '\P{^Is_Ccc=+00_00_27}', "");
Expect(0, 1610, '\p{Is_Ccc=+00_00_27}', "");
Expect(1, 1610, '\p{^Is_Ccc=+00_00_27}', "");
Expect(1, 1610, '\P{Is_Ccc=+00_00_27}', "");
Expect(0, 1610, '\P{^Is_Ccc=+00_00_27}', "");
Error('\p{Canonical_Combining_Class=	_DOUBLEbelow:=}');
Error('\P{Canonical_Combining_Class=	_DOUBLEbelow:=}');
Expect(1, 860, '\p{Canonical_Combining_Class=doublebelow}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class=doublebelow}', "");
Expect(0, 860, '\P{Canonical_Combining_Class=doublebelow}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class=doublebelow}', "");
Expect(0, 859, '\p{Canonical_Combining_Class=doublebelow}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class=doublebelow}', "");
Expect(1, 859, '\P{Canonical_Combining_Class=doublebelow}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class=doublebelow}', "");
Expect(1, 860, '\p{Canonical_Combining_Class=_double_below}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class=_double_below}', "");
Expect(0, 860, '\P{Canonical_Combining_Class=_double_below}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class=_double_below}', "");
Expect(0, 859, '\p{Canonical_Combining_Class=_double_below}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class=_double_below}', "");
Expect(1, 859, '\P{Canonical_Combining_Class=_double_below}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class=_double_below}', "");
Error('\p{Ccc=-/a/db}');
Error('\P{Ccc=-/a/db}');
Expect(1, 860, '\p{Ccc=db}', "");
Expect(0, 860, '\p{^Ccc=db}', "");
Expect(0, 860, '\P{Ccc=db}', "");
Expect(1, 860, '\P{^Ccc=db}', "");
Expect(0, 859, '\p{Ccc=db}', "");
Expect(1, 859, '\p{^Ccc=db}', "");
Expect(1, 859, '\P{Ccc=db}', "");
Expect(0, 859, '\P{^Ccc=db}', "");
Expect(1, 860, '\p{Ccc=_ DB}', "");
Expect(0, 860, '\p{^Ccc=_ DB}', "");
Expect(0, 860, '\P{Ccc=_ DB}', "");
Expect(1, 860, '\P{^Ccc=_ DB}', "");
Expect(0, 859, '\p{Ccc=_ DB}', "");
Expect(1, 859, '\p{^Ccc=_ DB}', "");
Expect(1, 859, '\P{Ccc=_ DB}', "");
Expect(0, 859, '\P{^Ccc=_ DB}', "");
Error('\p{Is_Canonical_Combining_Class:    _+00233:=}');
Error('\P{Is_Canonical_Combining_Class:    _+00233:=}');
Expect(1, 860, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(0, 860, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(0, 860, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(1, 860, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(0, 859, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(1, 859, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(1, 859, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Expect(0, 859, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_000233}', "");
Error('\p{Is_Ccc=DOUBLE/a/Below}');
Error('\P{Is_Ccc=DOUBLE/a/Below}');
Expect(1, 860, '\p{Is_Ccc=doublebelow}', "");
Expect(0, 860, '\p{^Is_Ccc=doublebelow}', "");
Expect(0, 860, '\P{Is_Ccc=doublebelow}', "");
Expect(1, 860, '\P{^Is_Ccc=doublebelow}', "");
Expect(0, 859, '\p{Is_Ccc=doublebelow}', "");
Expect(1, 859, '\p{^Is_Ccc=doublebelow}', "");
Expect(1, 859, '\P{Is_Ccc=doublebelow}', "");
Expect(0, 859, '\P{^Is_Ccc=doublebelow}', "");
Expect(1, 860, '\p{Is_Ccc=- Double-BELOW}', "");
Expect(0, 860, '\p{^Is_Ccc=- Double-BELOW}', "");
Expect(0, 860, '\P{Is_Ccc=- Double-BELOW}', "");
Expect(1, 860, '\P{^Is_Ccc=- Double-BELOW}', "");
Expect(0, 859, '\p{Is_Ccc=- Double-BELOW}', "");
Expect(1, 859, '\p{^Is_Ccc=- Double-BELOW}', "");
Expect(1, 859, '\P{Is_Ccc=- Double-BELOW}', "");
Expect(0, 859, '\P{^Is_Ccc=- Double-BELOW}', "");
Error('\p{Canonical_Combining_Class:/a/ -Below RIGHT}');
Error('\P{Canonical_Combining_Class:/a/ -Below RIGHT}');
Expect(1, 1434, '\p{Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\p{Canonical_Combining_Class=-BELOW_right}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class=-BELOW_right}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class=-BELOW_right}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class=-BELOW_right}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class=-BELOW_right}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class=-BELOW_right}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class=-BELOW_right}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class=-BELOW_right}', "");
Error('\p{Ccc=-:=BR}');
Error('\P{Ccc=-:=BR}');
Expect(1, 1434, '\p{Ccc:	br}', "");
Expect(0, 1434, '\p{^Ccc:	br}', "");
Expect(0, 1434, '\P{Ccc:	br}', "");
Expect(1, 1434, '\P{^Ccc:	br}', "");
Expect(0, 1433, '\p{Ccc:	br}', "");
Expect(1, 1433, '\p{^Ccc:	br}', "");
Expect(1, 1433, '\P{Ccc:	br}', "");
Expect(0, 1433, '\P{^Ccc:	br}', "");
Expect(1, 1434, '\p{Ccc= _br}', "");
Expect(0, 1434, '\p{^Ccc= _br}', "");
Expect(0, 1434, '\P{Ccc= _br}', "");
Expect(1, 1434, '\P{^Ccc= _br}', "");
Expect(0, 1433, '\p{Ccc= _br}', "");
Expect(1, 1433, '\p{^Ccc= _br}', "");
Expect(1, 1433, '\P{Ccc= _br}', "");
Expect(0, 1433, '\P{^Ccc= _br}', "");
Error('\p{Is_Canonical_Combining_Class::=-_0222}');
Error('\P{Is_Canonical_Combining_Class::=-_0222}');
Expect(1, 1434, '\p{Is_Canonical_Combining_Class=000222}', "");
Expect(0, 1434, '\p{^Is_Canonical_Combining_Class=000222}', "");
Expect(0, 1434, '\P{Is_Canonical_Combining_Class=000222}', "");
Expect(1, 1434, '\P{^Is_Canonical_Combining_Class=000222}', "");
Expect(0, 1433, '\p{Is_Canonical_Combining_Class=000222}', "");
Expect(1, 1433, '\p{^Is_Canonical_Combining_Class=000222}', "");
Expect(1, 1433, '\P{Is_Canonical_Combining_Class=000222}', "");
Expect(0, 1433, '\P{^Is_Canonical_Combining_Class=000222}', "");
Error('\p{Is_Ccc= 	below/a/Right}');
Error('\P{Is_Ccc= 	below/a/Right}');
Expect(1, 1434, '\p{Is_Ccc=belowright}', "");
Expect(0, 1434, '\p{^Is_Ccc=belowright}', "");
Expect(0, 1434, '\P{Is_Ccc=belowright}', "");
Expect(1, 1434, '\P{^Is_Ccc=belowright}', "");
Expect(0, 1433, '\p{Is_Ccc=belowright}', "");
Expect(1, 1433, '\p{^Is_Ccc=belowright}', "");
Expect(1, 1433, '\P{Is_Ccc=belowright}', "");
Expect(0, 1433, '\P{^Is_Ccc=belowright}', "");
Expect(1, 1434, '\p{Is_Ccc=-Below	Right}', "");
Expect(0, 1434, '\p{^Is_Ccc=-Below	Right}', "");
Expect(0, 1434, '\P{Is_Ccc=-Below	Right}', "");
Expect(1, 1434, '\P{^Is_Ccc=-Below	Right}', "");
Expect(0, 1433, '\p{Is_Ccc=-Below	Right}', "");
Expect(1, 1433, '\p{^Is_Ccc=-Below	Right}', "");
Expect(1, 1433, '\P{Is_Ccc=-Below	Right}', "");
Expect(0, 1433, '\P{^Is_Ccc=-Below	Right}', "");
Error('\p{Canonical_Combining_Class=_	KANA:=VOICING}');
Error('\P{Canonical_Combining_Class=_	KANA:=VOICING}');
Expect(1, 12442, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\p{Canonical_Combining_Class=__kana	Voicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class=__kana	Voicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class=__kana	Voicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class=__kana	Voicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class=__kana	Voicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class=__kana	Voicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class=__kana	Voicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class=__kana	Voicing}', "");
Error('\p{Ccc=:=KV}');
Error('\P{Ccc=:=KV}');
Expect(1, 12442, '\p{Ccc=kv}', "");
Expect(0, 12442, '\p{^Ccc=kv}', "");
Expect(0, 12442, '\P{Ccc=kv}', "");
Expect(1, 12442, '\P{^Ccc=kv}', "");
Expect(0, 12440, '\p{Ccc=kv}', "");
Expect(1, 12440, '\p{^Ccc=kv}', "");
Expect(1, 12440, '\P{Ccc=kv}', "");
Expect(0, 12440, '\P{^Ccc=kv}', "");
Expect(1, 12442, '\p{Ccc= -KV}', "");
Expect(0, 12442, '\p{^Ccc= -KV}', "");
Expect(0, 12442, '\P{Ccc= -KV}', "");
Expect(1, 12442, '\P{^Ccc= -KV}', "");
Expect(0, 12440, '\p{Ccc= -KV}', "");
Expect(1, 12440, '\p{^Ccc= -KV}', "");
Expect(1, 12440, '\P{Ccc= -KV}', "");
Expect(0, 12440, '\P{^Ccc= -KV}', "");
Error('\p{Is_Canonical_Combining_Class:   :=_000008}');
Error('\P{Is_Canonical_Combining_Class:   :=_000008}');
Expect(1, 12442, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(0, 12442, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(0, 12442, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(1, 12442, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(0, 12440, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(1, 12440, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(1, 12440, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Expect(0, 12440, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_08}', "");
Error('\p{Is_Ccc:   -kana:=VOICING}');
Error('\P{Is_Ccc:   -kana:=VOICING}');
Expect(1, 12442, '\p{Is_Ccc=kanavoicing}', "");
Expect(0, 12442, '\p{^Is_Ccc=kanavoicing}', "");
Expect(0, 12442, '\P{Is_Ccc=kanavoicing}', "");
Expect(1, 12442, '\P{^Is_Ccc=kanavoicing}', "");
Expect(0, 12440, '\p{Is_Ccc=kanavoicing}', "");
Expect(1, 12440, '\p{^Is_Ccc=kanavoicing}', "");
Expect(1, 12440, '\P{Is_Ccc=kanavoicing}', "");
Expect(0, 12440, '\P{^Is_Ccc=kanavoicing}', "");
Expect(1, 12442, '\p{Is_Ccc=	Kana-voicing}', "");
Expect(0, 12442, '\p{^Is_Ccc=	Kana-voicing}', "");
Expect(0, 12442, '\P{Is_Ccc=	Kana-voicing}', "");
Expect(1, 12442, '\P{^Is_Ccc=	Kana-voicing}', "");
Expect(0, 12440, '\p{Is_Ccc=	Kana-voicing}', "");
Expect(1, 12440, '\p{^Is_Ccc=	Kana-voicing}', "");
Expect(1, 12440, '\P{Is_Ccc=	Kana-voicing}', "");
Expect(0, 12440, '\P{^Is_Ccc=	Kana-voicing}', "");
Error('\p{Canonical_Combining_Class= /a/below}');
Error('\P{Canonical_Combining_Class= /a/below}');
Expect(1, 793, '\p{Canonical_Combining_Class=below}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class=below}', "");
Expect(0, 793, '\P{Canonical_Combining_Class=below}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class=below}', "");
Expect(0, 789, '\p{Canonical_Combining_Class=below}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class=below}', "");
Expect(1, 789, '\P{Canonical_Combining_Class=below}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class=below}', "");
Expect(1, 793, '\p{Canonical_Combining_Class:     BELOW}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class:     BELOW}', "");
Expect(0, 793, '\P{Canonical_Combining_Class:     BELOW}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class:     BELOW}', "");
Expect(0, 789, '\p{Canonical_Combining_Class:     BELOW}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class:     BELOW}', "");
Expect(1, 789, '\P{Canonical_Combining_Class:     BELOW}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class:     BELOW}', "");
Error('\p{Ccc= 	B/a/}');
Error('\P{Ccc= 	B/a/}');
Expect(1, 793, '\p{Ccc=b}', "");
Expect(0, 793, '\p{^Ccc=b}', "");
Expect(0, 793, '\P{Ccc=b}', "");
Expect(1, 793, '\P{^Ccc=b}', "");
Expect(0, 789, '\p{Ccc=b}', "");
Expect(1, 789, '\p{^Ccc=b}', "");
Expect(1, 789, '\P{Ccc=b}', "");
Expect(0, 789, '\P{^Ccc=b}', "");
Expect(1, 793, '\p{Ccc:   	_B}', "");
Expect(0, 793, '\p{^Ccc:   	_B}', "");
Expect(0, 793, '\P{Ccc:   	_B}', "");
Expect(1, 793, '\P{^Ccc:   	_B}', "");
Expect(0, 789, '\p{Ccc:   	_B}', "");
Expect(1, 789, '\p{^Ccc:   	_B}', "");
Expect(1, 789, '\P{Ccc:   	_B}', "");
Expect(0, 789, '\P{^Ccc:   	_B}', "");
Error('\p{Is_Canonical_Combining_Class=-_0:=00	0	0	0-2 20}');
Error('\P{Is_Canonical_Combining_Class=-_0:=00	0	0	0-2 20}');
Expect(1, 793, '\p{Is_Canonical_Combining_Class=00220}', "");
Expect(0, 793, '\p{^Is_Canonical_Combining_Class=00220}', "");
Expect(0, 793, '\P{Is_Canonical_Combining_Class=00220}', "");
Expect(1, 793, '\P{^Is_Canonical_Combining_Class=00220}', "");
Expect(0, 789, '\p{Is_Canonical_Combining_Class=00220}', "");
Expect(1, 789, '\p{^Is_Canonical_Combining_Class=00220}', "");
Expect(1, 789, '\P{Is_Canonical_Combining_Class=00220}', "");
Expect(0, 789, '\P{^Is_Canonical_Combining_Class=00220}', "");
Error('\p{Is_Ccc=--Below/a/}');
Error('\P{Is_Ccc=--Below/a/}');
Expect(1, 793, '\p{Is_Ccc=below}', "");
Expect(0, 793, '\p{^Is_Ccc=below}', "");
Expect(0, 793, '\P{Is_Ccc=below}', "");
Expect(1, 793, '\P{^Is_Ccc=below}', "");
Expect(0, 789, '\p{Is_Ccc=below}', "");
Expect(1, 789, '\p{^Is_Ccc=below}', "");
Expect(1, 789, '\P{Is_Ccc=below}', "");
Expect(0, 789, '\P{^Is_Ccc=below}', "");
Expect(1, 793, '\p{Is_Ccc= Below}', "");
Expect(0, 793, '\p{^Is_Ccc= Below}', "");
Expect(0, 793, '\P{Is_Ccc= Below}', "");
Expect(1, 793, '\P{^Is_Ccc= Below}', "");
Expect(0, 789, '\p{Is_Ccc= Below}', "");
Expect(1, 789, '\p{^Is_Ccc= Below}', "");
Expect(1, 789, '\P{Is_Ccc= Below}', "");
Expect(0, 789, '\P{^Is_Ccc= Below}', "");
Error('\p{Canonical_Combining_Class=_:=02-0}');
Error('\P{Canonical_Combining_Class=_:=02-0}');
Expect(1, 1467, '\p{Canonical_Combining_Class: 0020}', "");
Expect(0, 1467, '\p{^Canonical_Combining_Class: 0020}', "");
Expect(0, 1467, '\P{Canonical_Combining_Class: 0020}', "");
Expect(1, 1467, '\P{^Canonical_Combining_Class: 0020}', "");
Expect(0, 1466, '\p{Canonical_Combining_Class: 0020}', "");
Expect(1, 1466, '\p{^Canonical_Combining_Class: 0020}', "");
Expect(1, 1466, '\P{Canonical_Combining_Class: 0020}', "");
Expect(0, 1466, '\P{^Canonical_Combining_Class: 0020}', "");
Error('\p{Ccc=/a/_00000020}');
Error('\P{Ccc=/a/_00000020}');
Expect(1, 1467, '\p{Ccc=+0_0_0_0_0020}', "");
Expect(0, 1467, '\p{^Ccc=+0_0_0_0_0020}', "");
Expect(0, 1467, '\P{Ccc=+0_0_0_0_0020}', "");
Expect(1, 1467, '\P{^Ccc=+0_0_0_0_0020}', "");
Expect(0, 1466, '\p{Ccc=+0_0_0_0_0020}', "");
Expect(1, 1466, '\p{^Ccc=+0_0_0_0_0020}', "");
Expect(1, 1466, '\P{Ccc=+0_0_0_0_0020}', "");
Expect(0, 1466, '\P{^Ccc=+0_0_0_0_0020}', "");
Error('\p{Is_Canonical_Combining_Class=- 00	00_00-00:=20}');
Error('\P{Is_Canonical_Combining_Class=- 00	00_00-00:=20}');
Expect(1, 1467, '\p{Is_Canonical_Combining_Class=00000020}', "");
Expect(0, 1467, '\p{^Is_Canonical_Combining_Class=00000020}', "");
Expect(0, 1467, '\P{Is_Canonical_Combining_Class=00000020}', "");
Expect(1, 1467, '\P{^Is_Canonical_Combining_Class=00000020}', "");
Expect(0, 1466, '\p{Is_Canonical_Combining_Class=00000020}', "");
Expect(1, 1466, '\p{^Is_Canonical_Combining_Class=00000020}', "");
Expect(1, 1466, '\P{Is_Canonical_Combining_Class=00000020}', "");
Expect(0, 1466, '\P{^Is_Canonical_Combining_Class=00000020}', "");
Error('\p{Is_Ccc=/a/_	20}');
Error('\P{Is_Ccc=/a/_	20}');
Expect(1, 1467, '\p{Is_Ccc=0_0_20}', "");
Expect(0, 1467, '\p{^Is_Ccc=0_0_20}', "");
Expect(0, 1467, '\P{Is_Ccc=0_0_20}', "");
Expect(1, 1467, '\P{^Is_Ccc=0_0_20}', "");
Expect(0, 1466, '\p{Is_Ccc=0_0_20}', "");
Expect(1, 1466, '\p{^Is_Ccc=0_0_20}', "");
Expect(1, 1466, '\P{Is_Ccc=0_0_20}', "");
Expect(0, 1466, '\P{^Is_Ccc=0_0_20}', "");
Error('\p{Canonical_Combining_Class:			Attached	Aboveright:=}');
Error('\P{Canonical_Combining_Class:			Attached	Aboveright:=}');
Expect(1, 795, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\p{Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(0, 795, '\P{Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(0, 794, '\p{Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(1, 794, '\P{Canonical_Combining_Class= 	Attached above	Right}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class= 	Attached above	Right}', "");
Error('\p{Ccc=_	ATAR/a/}');
Error('\P{Ccc=_	ATAR/a/}');
Expect(1, 795, '\p{Ccc=atar}', "");
Expect(0, 795, '\p{^Ccc=atar}', "");
Expect(0, 795, '\P{Ccc=atar}', "");
Expect(1, 795, '\P{^Ccc=atar}', "");
Expect(0, 794, '\p{Ccc=atar}', "");
Expect(1, 794, '\p{^Ccc=atar}', "");
Expect(1, 794, '\P{Ccc=atar}', "");
Expect(0, 794, '\P{^Ccc=atar}', "");
Expect(1, 795, '\p{Ccc=_atar}', "");
Expect(0, 795, '\p{^Ccc=_atar}', "");
Expect(0, 795, '\P{Ccc=_atar}', "");
Expect(1, 795, '\P{^Ccc=_atar}', "");
Expect(0, 794, '\p{Ccc=_atar}', "");
Expect(1, 794, '\p{^Ccc=_atar}', "");
Expect(1, 794, '\P{Ccc=_atar}', "");
Expect(0, 794, '\P{^Ccc=_atar}', "");
Error('\p{Is_Canonical_Combining_Class=	/a/+0 0	0	0 0 00-00216}');
Error('\P{Is_Canonical_Combining_Class=	/a/+0 0	0	0 0 00-00216}');
Expect(1, 795, '\p{Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(0, 795, '\p{^Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(0, 795, '\P{Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(1, 795, '\P{^Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(0, 794, '\p{Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(1, 794, '\p{^Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(1, 794, '\P{Is_Canonical_Combining_Class=00_00_00_216}', "");
Expect(0, 794, '\P{^Is_Canonical_Combining_Class=00_00_00_216}', "");
Error('\p{Is_Ccc=-/a/Attached-Above	Right}');
Error('\P{Is_Ccc=-/a/Attached-Above	Right}');
Expect(1, 795, '\p{Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\P{Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\p{Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\P{Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\p{Is_Ccc=_	Attached Above	Right}', "");
Expect(0, 795, '\p{^Is_Ccc=_	Attached Above	Right}', "");
Expect(0, 795, '\P{Is_Ccc=_	Attached Above	Right}', "");
Expect(1, 795, '\P{^Is_Ccc=_	Attached Above	Right}', "");
Expect(0, 794, '\p{Is_Ccc=_	Attached Above	Right}', "");
Expect(1, 794, '\p{^Is_Ccc=_	Attached Above	Right}', "");
Expect(1, 794, '\P{Is_Ccc=_	Attached Above	Right}', "");
Expect(0, 794, '\P{^Is_Ccc=_	Attached Above	Right}', "");
Error('\p{Canonical_Combining_Class=-/a/+00-00_00-31}');
Error('\P{Canonical_Combining_Class=-/a/+00-00_00-31}');
Expect(1, 1561, '\p{Canonical_Combining_Class: 0003_1}', "");
Expect(0, 1561, '\p{^Canonical_Combining_Class: 0003_1}', "");
Expect(0, 1561, '\P{Canonical_Combining_Class: 0003_1}', "");
Expect(1, 1561, '\P{^Canonical_Combining_Class: 0003_1}', "");
Expect(0, 1560, '\p{Canonical_Combining_Class: 0003_1}', "");
Expect(1, 1560, '\p{^Canonical_Combining_Class: 0003_1}', "");
Expect(1, 1560, '\P{Canonical_Combining_Class: 0003_1}', "");
Expect(0, 1560, '\P{^Canonical_Combining_Class: 0003_1}', "");
Error('\p{Ccc=_-00 0 0 000:=031}');
Error('\P{Ccc=_-00 0 0 000:=031}');
Expect(1, 1561, '\p{Ccc:   031}', "");
Expect(0, 1561, '\p{^Ccc:   031}', "");
Expect(0, 1561, '\P{Ccc:   031}', "");
Expect(1, 1561, '\P{^Ccc:   031}', "");
Expect(0, 1560, '\p{Ccc:   031}', "");
Expect(1, 1560, '\p{^Ccc:   031}', "");
Expect(1, 1560, '\P{Ccc:   031}', "");
Expect(0, 1560, '\P{^Ccc:   031}', "");
Error('\p{Is_Canonical_Combining_Class=_ 031:=}');
Error('\P{Is_Canonical_Combining_Class=_ 031:=}');
Expect(1, 1561, '\p{Is_Canonical_Combining_Class=0031}', "");
Expect(0, 1561, '\p{^Is_Canonical_Combining_Class=0031}', "");
Expect(0, 1561, '\P{Is_Canonical_Combining_Class=0031}', "");
Expect(1, 1561, '\P{^Is_Canonical_Combining_Class=0031}', "");
Expect(0, 1560, '\p{Is_Canonical_Combining_Class=0031}', "");
Expect(1, 1560, '\p{^Is_Canonical_Combining_Class=0031}', "");
Expect(1, 1560, '\P{Is_Canonical_Combining_Class=0031}', "");
Expect(0, 1560, '\P{^Is_Canonical_Combining_Class=0031}', "");
Error('\p{Is_Ccc= -0 0	0	0/a/00031}');
Error('\P{Is_Ccc= -0 0	0	0/a/00031}');
Expect(1, 1561, '\p{Is_Ccc=00031}', "");
Expect(0, 1561, '\p{^Is_Ccc=00031}', "");
Expect(0, 1561, '\P{Is_Ccc=00031}', "");
Expect(1, 1561, '\P{^Is_Ccc=00031}', "");
Expect(0, 1560, '\p{Is_Ccc=00031}', "");
Expect(1, 1560, '\p{^Is_Ccc=00031}', "");
Expect(1, 1560, '\P{Is_Ccc=00031}', "");
Expect(0, 1560, '\P{^Is_Ccc=00031}', "");
Error('\p{Canonical_Combining_Class=	/a/0035}');
Error('\P{Canonical_Combining_Class=	/a/0035}');
Expect(1, 1648, '\p{Canonical_Combining_Class:   35}', "");
Expect(0, 1648, '\p{^Canonical_Combining_Class:   35}', "");
Expect(0, 1648, '\P{Canonical_Combining_Class:   35}', "");
Expect(1, 1648, '\P{^Canonical_Combining_Class:   35}', "");
Expect(0, 1647, '\p{Canonical_Combining_Class:   35}', "");
Expect(1, 1647, '\p{^Canonical_Combining_Class:   35}', "");
Expect(1, 1647, '\P{Canonical_Combining_Class:   35}', "");
Expect(0, 1647, '\P{^Canonical_Combining_Class:   35}', "");
Error('\p{Ccc=- +0000000035:=}');
Error('\P{Ccc=- +0000000035:=}');
Expect(1, 1648, '\p{Ccc=0000000035}', "");
Expect(0, 1648, '\p{^Ccc=0000000035}', "");
Expect(0, 1648, '\P{Ccc=0000000035}', "");
Expect(1, 1648, '\P{^Ccc=0000000035}', "");
Expect(0, 1647, '\p{Ccc=0000000035}', "");
Expect(1, 1647, '\p{^Ccc=0000000035}', "");
Expect(1, 1647, '\P{Ccc=0000000035}', "");
Expect(0, 1647, '\P{^Ccc=0000000035}', "");
Error('\p{Is_Canonical_Combining_Class= -00:=0-035}');
Error('\P{Is_Canonical_Combining_Class= -00:=0-035}');
Expect(1, 1648, '\p{Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(0, 1648, '\p{^Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(0, 1648, '\P{Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(1, 1648, '\P{^Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(0, 1647, '\p{Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(1, 1647, '\p{^Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(1, 1647, '\P{Is_Canonical_Combining_Class=00_00_03_5}', "");
Expect(0, 1647, '\P{^Is_Canonical_Combining_Class=00_00_03_5}', "");
Error('\p{Is_Ccc=/a/	 000000035}');
Error('\P{Is_Ccc=/a/	 000000035}');
Expect(1, 1648, '\p{Is_Ccc=+000035}', "");
Expect(0, 1648, '\p{^Is_Ccc=+000035}', "");
Expect(0, 1648, '\P{Is_Ccc=+000035}', "");
Expect(1, 1648, '\P{^Is_Ccc=+000035}', "");
Expect(0, 1647, '\p{Is_Ccc=+000035}', "");
Expect(1, 1647, '\p{^Is_Ccc=+000035}', "");
Expect(1, 1647, '\P{Is_Ccc=+000035}', "");
Expect(0, 1647, '\P{^Is_Ccc=+000035}', "");
Error('\p{Canonical_Combining_Class=_	00	0-00-0	0:=0011}');
Error('\P{Canonical_Combining_Class=_	00	0-00-0	0:=0011}');
Expect(1, 1457, '\p{Canonical_Combining_Class=00000011}', "");
Expect(0, 1457, '\p{^Canonical_Combining_Class=00000011}', "");
Expect(0, 1457, '\P{Canonical_Combining_Class=00000011}', "");
Expect(1, 1457, '\P{^Canonical_Combining_Class=00000011}', "");
Expect(0, 1456, '\p{Canonical_Combining_Class=00000011}', "");
Expect(1, 1456, '\p{^Canonical_Combining_Class=00000011}', "");
Expect(1, 1456, '\P{Canonical_Combining_Class=00000011}', "");
Expect(0, 1456, '\P{^Canonical_Combining_Class=00000011}', "");
Error('\p{Ccc:_:=00001 1}');
Error('\P{Ccc:_:=00001 1}');
Expect(1, 1457, '\p{Ccc=00000011}', "");
Expect(0, 1457, '\p{^Ccc=00000011}', "");
Expect(0, 1457, '\P{Ccc=00000011}', "");
Expect(1, 1457, '\P{^Ccc=00000011}', "");
Expect(0, 1456, '\p{Ccc=00000011}', "");
Expect(1, 1456, '\p{^Ccc=00000011}', "");
Expect(1, 1456, '\P{Ccc=00000011}', "");
Expect(0, 1456, '\P{^Ccc=00000011}', "");
Error('\p{Is_Canonical_Combining_Class=		11:=}');
Error('\P{Is_Canonical_Combining_Class=		11:=}');
Expect(1, 1457, '\p{Is_Canonical_Combining_Class=000_001_1}', "");
Expect(0, 1457, '\p{^Is_Canonical_Combining_Class=000_001_1}', "");
Expect(0, 1457, '\P{Is_Canonical_Combining_Class=000_001_1}', "");
Expect(1, 1457, '\P{^Is_Canonical_Combining_Class=000_001_1}', "");
Expect(0, 1456, '\p{Is_Canonical_Combining_Class=000_001_1}', "");
Expect(1, 1456, '\p{^Is_Canonical_Combining_Class=000_001_1}', "");
Expect(1, 1456, '\P{Is_Canonical_Combining_Class=000_001_1}', "");
Expect(0, 1456, '\P{^Is_Canonical_Combining_Class=000_001_1}', "");
Error('\p{Is_Ccc: /a/+0011}');
Error('\P{Is_Ccc: /a/+0011}');
Expect(1, 1457, '\p{Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(0, 1457, '\p{^Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(0, 1457, '\P{Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(1, 1457, '\P{^Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(0, 1456, '\p{Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(1, 1456, '\p{^Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(1, 1456, '\P{Is_Ccc=0_0_0_0_0_0_011}', "");
Expect(0, 1456, '\P{^Is_Ccc=0_0_0_0_0_0_011}', "");
Error('\p{Canonical_Combining_Class:   	/a/IotaSubscript}');
Error('\P{Canonical_Combining_Class:   	/a/IotaSubscript}');
Expect(1, 837, '\p{Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 837, '\P{Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 836, '\p{Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 836, '\P{Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 837, '\p{Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(0, 837, '\P{Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(0, 836, '\p{Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(1, 836, '\P{Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class:   _ IOTA	Subscript}', "");
Error('\p{Ccc=/a/		IS}');
Error('\P{Ccc=/a/		IS}');
Expect(1, 837, '\p{Ccc=is}', "");
Expect(0, 837, '\p{^Ccc=is}', "");
Expect(0, 837, '\P{Ccc=is}', "");
Expect(1, 837, '\P{^Ccc=is}', "");
Expect(0, 836, '\p{Ccc=is}', "");
Expect(1, 836, '\p{^Ccc=is}', "");
Expect(1, 836, '\P{Ccc=is}', "");
Expect(0, 836, '\P{^Ccc=is}', "");
Expect(1, 837, '\p{Ccc=_-IS}', "");
Expect(0, 837, '\p{^Ccc=_-IS}', "");
Expect(0, 837, '\P{Ccc=_-IS}', "");
Expect(1, 837, '\P{^Ccc=_-IS}', "");
Expect(0, 836, '\p{Ccc=_-IS}', "");
Expect(1, 836, '\p{^Ccc=_-IS}', "");
Expect(1, 836, '\P{Ccc=_-IS}', "");
Expect(0, 836, '\P{^Ccc=_-IS}', "");
Error('\p{Is_Canonical_Combining_Class=-:=+0_0	0 00	02 40}');
Error('\P{Is_Canonical_Combining_Class=-:=+0_0	0 00	02 40}');
Expect(1, 837, '\p{Is_Canonical_Combining_Class=0000024_0}', "");
Expect(0, 837, '\p{^Is_Canonical_Combining_Class=0000024_0}', "");
Expect(0, 837, '\P{Is_Canonical_Combining_Class=0000024_0}', "");
Expect(1, 837, '\P{^Is_Canonical_Combining_Class=0000024_0}', "");
Expect(0, 836, '\p{Is_Canonical_Combining_Class=0000024_0}', "");
Expect(1, 836, '\p{^Is_Canonical_Combining_Class=0000024_0}', "");
Expect(1, 836, '\P{Is_Canonical_Combining_Class=0000024_0}', "");
Expect(0, 836, '\P{^Is_Canonical_Combining_Class=0000024_0}', "");
Error('\p{Is_Ccc= -iota:=SUBSCRIPT}');
Error('\P{Is_Ccc= -iota:=SUBSCRIPT}');
Expect(1, 837, '\p{Is_Ccc:iotasubscript}', "");
Expect(0, 837, '\p{^Is_Ccc:iotasubscript}', "");
Expect(0, 837, '\P{Is_Ccc:iotasubscript}', "");
Expect(1, 837, '\P{^Is_Ccc:iotasubscript}', "");
Expect(0, 836, '\p{Is_Ccc:iotasubscript}', "");
Expect(1, 836, '\p{^Is_Ccc:iotasubscript}', "");
Expect(1, 836, '\P{Is_Ccc:iotasubscript}', "");
Expect(0, 836, '\P{^Is_Ccc:iotasubscript}', "");
Expect(1, 837, '\p{Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(0, 837, '\p{^Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(0, 837, '\P{Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(1, 837, '\P{^Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(0, 836, '\p{Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(1, 836, '\p{^Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(1, 836, '\P{Is_Ccc: -IOTASUBSCRIPT}', "");
Expect(0, 836, '\P{^Is_Ccc: -IOTASUBSCRIPT}', "");
Error('\p{Canonical_Combining_Class=_	Above-Right:=}');
Error('\P{Canonical_Combining_Class=_	Above-Right:=}');
Expect(1, 789, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\p{Canonical_Combining_Class=_	above	Right}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class=_	above	Right}', "");
Expect(0, 789, '\P{Canonical_Combining_Class=_	above	Right}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class=_	above	Right}', "");
Expect(0, 788, '\p{Canonical_Combining_Class=_	above	Right}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class=_	above	Right}', "");
Expect(1, 788, '\P{Canonical_Combining_Class=_	above	Right}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class=_	above	Right}', "");
Error('\p{Ccc=	:=AR}');
Error('\P{Ccc=	:=AR}');
Expect(1, 789, '\p{Ccc=ar}', "");
Expect(0, 789, '\p{^Ccc=ar}', "");
Expect(0, 789, '\P{Ccc=ar}', "");
Expect(1, 789, '\P{^Ccc=ar}', "");
Expect(0, 788, '\p{Ccc=ar}', "");
Expect(1, 788, '\p{^Ccc=ar}', "");
Expect(1, 788, '\P{Ccc=ar}', "");
Expect(0, 788, '\P{^Ccc=ar}', "");
Expect(1, 789, '\p{Ccc= AR}', "");
Expect(0, 789, '\p{^Ccc= AR}', "");
Expect(0, 789, '\P{Ccc= AR}', "");
Expect(1, 789, '\P{^Ccc= AR}', "");
Expect(0, 788, '\p{Ccc= AR}', "");
Expect(1, 788, '\p{^Ccc= AR}', "");
Expect(1, 788, '\P{Ccc= AR}', "");
Expect(0, 788, '\P{^Ccc= AR}', "");
Error('\p{Is_Canonical_Combining_Class= /a/232}');
Error('\P{Is_Canonical_Combining_Class= /a/232}');
Expect(1, 789, '\p{Is_Canonical_Combining_Class:000000232}', "");
Expect(0, 789, '\p{^Is_Canonical_Combining_Class:000000232}', "");
Expect(0, 789, '\P{Is_Canonical_Combining_Class:000000232}', "");
Expect(1, 789, '\P{^Is_Canonical_Combining_Class:000000232}', "");
Expect(0, 788, '\p{Is_Canonical_Combining_Class:000000232}', "");
Expect(1, 788, '\p{^Is_Canonical_Combining_Class:000000232}', "");
Expect(1, 788, '\P{Is_Canonical_Combining_Class:000000232}', "");
Expect(0, 788, '\P{^Is_Canonical_Combining_Class:000000232}', "");
Error('\p{Is_Ccc= _ABOVE:=right}');
Error('\P{Is_Ccc= _ABOVE:=right}');
Expect(1, 789, '\p{Is_Ccc=aboveright}', "");
Expect(0, 789, '\p{^Is_Ccc=aboveright}', "");
Expect(0, 789, '\P{Is_Ccc=aboveright}', "");
Expect(1, 789, '\P{^Is_Ccc=aboveright}', "");
Expect(0, 788, '\p{Is_Ccc=aboveright}', "");
Expect(1, 788, '\p{^Is_Ccc=aboveright}', "");
Expect(1, 788, '\P{Is_Ccc=aboveright}', "");
Expect(0, 788, '\P{^Is_Ccc=aboveright}', "");
Expect(1, 789, '\p{Is_Ccc=_Above_right}', "");
Expect(0, 789, '\p{^Is_Ccc=_Above_right}', "");
Expect(0, 789, '\P{Is_Ccc=_Above_right}', "");
Expect(1, 789, '\P{^Is_Ccc=_Above_right}', "");
Expect(0, 788, '\p{Is_Ccc=_Above_right}', "");
Expect(1, 788, '\p{^Is_Ccc=_Above_right}', "");
Expect(1, 788, '\P{Is_Ccc=_Above_right}', "");
Expect(0, 788, '\P{^Is_Ccc=_Above_right}', "");
Error('\p{Canonical_Combining_Class= _0-0-0	0 00 29/a/}');
Error('\P{Canonical_Combining_Class= _0-0-0	0 00 29/a/}');
Expect(1, 1613, '\p{Canonical_Combining_Class=+0029}', "");
Expect(0, 1613, '\p{^Canonical_Combining_Class=+0029}', "");
Expect(0, 1613, '\P{Canonical_Combining_Class=+0029}', "");
Expect(1, 1613, '\P{^Canonical_Combining_Class=+0029}', "");
Expect(0, 1612, '\p{Canonical_Combining_Class=+0029}', "");
Expect(1, 1612, '\p{^Canonical_Combining_Class=+0029}', "");
Expect(1, 1612, '\P{Canonical_Combining_Class=+0029}', "");
Expect(0, 1612, '\P{^Canonical_Combining_Class=+0029}', "");
Error('\p{Ccc=:=		02_9}');
Error('\P{Ccc=:=		02_9}');
Expect(1, 1613, '\p{Ccc:	02_9}', "");
Expect(0, 1613, '\p{^Ccc:	02_9}', "");
Expect(0, 1613, '\P{Ccc:	02_9}', "");
Expect(1, 1613, '\P{^Ccc:	02_9}', "");
Expect(0, 1612, '\p{Ccc:	02_9}', "");
Expect(1, 1612, '\p{^Ccc:	02_9}', "");
Expect(1, 1612, '\P{Ccc:	02_9}', "");
Expect(0, 1612, '\P{^Ccc:	02_9}', "");
Error('\p{Is_Canonical_Combining_Class=-:=+0000 00029}');
Error('\P{Is_Canonical_Combining_Class=-:=+0000 00029}');
Expect(1, 1613, '\p{Is_Canonical_Combining_Class=29}', "");
Expect(0, 1613, '\p{^Is_Canonical_Combining_Class=29}', "");
Expect(0, 1613, '\P{Is_Canonical_Combining_Class=29}', "");
Expect(1, 1613, '\P{^Is_Canonical_Combining_Class=29}', "");
Expect(0, 1612, '\p{Is_Canonical_Combining_Class=29}', "");
Expect(1, 1612, '\p{^Is_Canonical_Combining_Class=29}', "");
Expect(1, 1612, '\P{Is_Canonical_Combining_Class=29}', "");
Expect(0, 1612, '\P{^Is_Canonical_Combining_Class=29}', "");
Error('\p{Is_Ccc= 02:=9}');
Error('\P{Is_Ccc= 02:=9}');
Expect(1, 1613, '\p{Is_Ccc=002_9}', "");
Expect(0, 1613, '\p{^Is_Ccc=002_9}', "");
Expect(0, 1613, '\P{Is_Ccc=002_9}', "");
Expect(1, 1613, '\P{^Is_Ccc=002_9}', "");
Expect(0, 1612, '\p{Is_Ccc=002_9}', "");
Expect(1, 1612, '\p{^Is_Ccc=002_9}', "");
Expect(1, 1612, '\P{Is_Ccc=002_9}', "");
Expect(0, 1612, '\P{^Is_Ccc=002_9}', "");
Error('\p{Canonical_Combining_Class=_Right:=}');
Error('\P{Canonical_Combining_Class=_Right:=}');
Expect(1, 119149, '\p{Canonical_Combining_Class=right}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class=right}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class=right}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class=right}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class=right}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class=right}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class=right}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class=right}', "");
Expect(1, 119149, '\p{Canonical_Combining_Class=-RIGHT}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class=-RIGHT}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class=-RIGHT}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class=-RIGHT}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class=-RIGHT}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class=-RIGHT}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class=-RIGHT}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class=-RIGHT}', "");
Error('\p{Ccc:   :=_ R}');
Error('\P{Ccc:   :=_ R}');
Expect(1, 119149, '\p{Ccc=r}', "");
Expect(0, 119149, '\p{^Ccc=r}', "");
Expect(0, 119149, '\P{Ccc=r}', "");
Expect(1, 119149, '\P{^Ccc=r}', "");
Expect(0, 119148, '\p{Ccc=r}', "");
Expect(1, 119148, '\p{^Ccc=r}', "");
Expect(1, 119148, '\P{Ccc=r}', "");
Expect(0, 119148, '\P{^Ccc=r}', "");
Expect(1, 119149, '\p{Ccc= r}', "");
Expect(0, 119149, '\p{^Ccc= r}', "");
Expect(0, 119149, '\P{Ccc= r}', "");
Expect(1, 119149, '\P{^Ccc= r}', "");
Expect(0, 119148, '\p{Ccc= r}', "");
Expect(1, 119148, '\p{^Ccc= r}', "");
Expect(1, 119148, '\P{Ccc= r}', "");
Expect(0, 119148, '\P{^Ccc= r}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_	+0000000226}');
Error('\P{Is_Canonical_Combining_Class=/a/_	+0000000226}');
Expect(1, 119149, '\p{Is_Canonical_Combining_Class=0000000226}', "");
Expect(0, 119149, '\p{^Is_Canonical_Combining_Class=0000000226}', "");
Expect(0, 119149, '\P{Is_Canonical_Combining_Class=0000000226}', "");
Expect(1, 119149, '\P{^Is_Canonical_Combining_Class=0000000226}', "");
Expect(0, 119148, '\p{Is_Canonical_Combining_Class=0000000226}', "");
Expect(1, 119148, '\p{^Is_Canonical_Combining_Class=0000000226}', "");
Expect(1, 119148, '\P{Is_Canonical_Combining_Class=0000000226}', "");
Expect(0, 119148, '\P{^Is_Canonical_Combining_Class=0000000226}', "");
Error('\p{Is_Ccc=/a/Right}');
Error('\P{Is_Ccc=/a/Right}');
Expect(1, 119149, '\p{Is_Ccc=right}', "");
Expect(0, 119149, '\p{^Is_Ccc=right}', "");
Expect(0, 119149, '\P{Is_Ccc=right}', "");
Expect(1, 119149, '\P{^Is_Ccc=right}', "");
Expect(0, 119148, '\p{Is_Ccc=right}', "");
Expect(1, 119148, '\p{^Is_Ccc=right}', "");
Expect(1, 119148, '\P{Is_Ccc=right}', "");
Expect(0, 119148, '\P{^Is_Ccc=right}', "");
Expect(1, 119149, '\p{Is_Ccc=	_Right}', "");
Expect(0, 119149, '\p{^Is_Ccc=	_Right}', "");
Expect(0, 119149, '\P{Is_Ccc=	_Right}', "");
Expect(1, 119149, '\P{^Is_Ccc=	_Right}', "");
Expect(0, 119148, '\p{Is_Ccc=	_Right}', "");
Expect(1, 119148, '\p{^Is_Ccc=	_Right}', "");
Expect(1, 119148, '\P{Is_Ccc=	_Right}', "");
Expect(0, 119148, '\P{^Is_Ccc=	_Right}', "");
Error('\p{Canonical_Combining_Class=	-00000000015/a/}');
Error('\P{Canonical_Combining_Class=	-00000000015/a/}');
Expect(1, 1461, '\p{Canonical_Combining_Class=00015}', "");
Expect(0, 1461, '\p{^Canonical_Combining_Class=00015}', "");
Expect(0, 1461, '\P{Canonical_Combining_Class=00015}', "");
Expect(1, 1461, '\P{^Canonical_Combining_Class=00015}', "");
Expect(0, 1460, '\p{Canonical_Combining_Class=00015}', "");
Expect(1, 1460, '\p{^Canonical_Combining_Class=00015}', "");
Expect(1, 1460, '\P{Canonical_Combining_Class=00015}', "");
Expect(0, 1460, '\P{^Canonical_Combining_Class=00015}', "");
Error('\p{Ccc=_ +15/a/}');
Error('\P{Ccc=_ +15/a/}');
Expect(1, 1461, '\p{Ccc=+015}', "");
Expect(0, 1461, '\p{^Ccc=+015}', "");
Expect(0, 1461, '\P{Ccc=+015}', "");
Expect(1, 1461, '\P{^Ccc=+015}', "");
Expect(0, 1460, '\p{Ccc=+015}', "");
Expect(1, 1460, '\p{^Ccc=+015}', "");
Expect(1, 1460, '\P{Ccc=+015}', "");
Expect(0, 1460, '\P{^Ccc=+015}', "");
Error('\p{Is_Canonical_Combining_Class=_ 00	00-00-00/a/015}');
Error('\P{Is_Canonical_Combining_Class=_ 00	00-00-00/a/015}');
Expect(1, 1461, '\p{Is_Canonical_Combining_Class:   0015}', "");
Expect(0, 1461, '\p{^Is_Canonical_Combining_Class:   0015}', "");
Expect(0, 1461, '\P{Is_Canonical_Combining_Class:   0015}', "");
Expect(1, 1461, '\P{^Is_Canonical_Combining_Class:   0015}', "");
Expect(0, 1460, '\p{Is_Canonical_Combining_Class:   0015}', "");
Expect(1, 1460, '\p{^Is_Canonical_Combining_Class:   0015}', "");
Expect(1, 1460, '\P{Is_Canonical_Combining_Class:   0015}', "");
Expect(0, 1460, '\P{^Is_Canonical_Combining_Class:   0015}', "");
Error('\p{Is_Ccc=/a/ 0000015}');
Error('\P{Is_Ccc=/a/ 0000015}');
Expect(1, 1461, '\p{Is_Ccc=+0000015}', "");
Expect(0, 1461, '\p{^Is_Ccc=+0000015}', "");
Expect(0, 1461, '\P{Is_Ccc=+0000015}', "");
Expect(1, 1461, '\P{^Is_Ccc=+0000015}', "");
Expect(0, 1460, '\p{Is_Ccc=+0000015}', "");
Expect(1, 1460, '\p{^Is_Ccc=+0000015}', "");
Expect(1, 1460, '\P{Is_Ccc=+0000015}', "");
Expect(0, 1460, '\P{^Is_Ccc=+0000015}', "");
Error('\p{Canonical_Combining_Class=	belowLeft/a/}');
Error('\P{Canonical_Combining_Class=	belowLeft/a/}');
Expect(1, 12330, '\p{Canonical_Combining_Class=belowleft}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class=belowleft}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class=belowleft}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class=belowleft}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class=belowleft}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class=belowleft}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class=belowleft}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class=belowleft}', "");
Expect(1, 12330, '\p{Canonical_Combining_Class= 	BELOW_left}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class= 	BELOW_left}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class= 	BELOW_left}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class= 	BELOW_left}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class= 	BELOW_left}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class= 	BELOW_left}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class= 	BELOW_left}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class= 	BELOW_left}', "");
Error('\p{Ccc=:=-bl}');
Error('\P{Ccc=:=-bl}');
Expect(1, 12330, '\p{Ccc:	bl}', "");
Expect(0, 12330, '\p{^Ccc:	bl}', "");
Expect(0, 12330, '\P{Ccc:	bl}', "");
Expect(1, 12330, '\P{^Ccc:	bl}', "");
Expect(0, 12329, '\p{Ccc:	bl}', "");
Expect(1, 12329, '\p{^Ccc:	bl}', "");
Expect(1, 12329, '\P{Ccc:	bl}', "");
Expect(0, 12329, '\P{^Ccc:	bl}', "");
Expect(1, 12330, '\p{Ccc= bl}', "");
Expect(0, 12330, '\p{^Ccc= bl}', "");
Expect(0, 12330, '\P{Ccc= bl}', "");
Expect(1, 12330, '\P{^Ccc= bl}', "");
Expect(0, 12329, '\p{Ccc= bl}', "");
Expect(1, 12329, '\p{^Ccc= bl}', "");
Expect(1, 12329, '\P{Ccc= bl}', "");
Expect(0, 12329, '\P{^Ccc= bl}', "");
Error('\p{Is_Canonical_Combining_Class= 0	0 0-0-0:=0-000_218}');
Error('\P{Is_Canonical_Combining_Class= 0	0 0-0-0:=0-000_218}');
Expect(1, 12330, '\p{Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12330, '\p{^Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12330, '\P{Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12330, '\P{^Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12329, '\p{Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12329, '\p{^Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12329, '\P{Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12329, '\P{^Is_Canonical_Combining_Class=+0218}', "");
Error('\p{Is_Ccc=	Below LEFT/a/}');
Error('\P{Is_Ccc=	Below LEFT/a/}');
Expect(1, 12330, '\p{Is_Ccc=belowleft}', "");
Expect(0, 12330, '\p{^Is_Ccc=belowleft}', "");
Expect(0, 12330, '\P{Is_Ccc=belowleft}', "");
Expect(1, 12330, '\P{^Is_Ccc=belowleft}', "");
Expect(0, 12329, '\p{Is_Ccc=belowleft}', "");
Expect(1, 12329, '\p{^Is_Ccc=belowleft}', "");
Expect(1, 12329, '\P{Is_Ccc=belowleft}', "");
Expect(0, 12329, '\P{^Is_Ccc=belowleft}', "");
Expect(1, 12330, '\p{Is_Ccc= BELOW_Left}', "");
Expect(0, 12330, '\p{^Is_Ccc= BELOW_Left}', "");
Expect(0, 12330, '\P{Is_Ccc= BELOW_Left}', "");
Expect(1, 12330, '\P{^Is_Ccc= BELOW_Left}', "");
Expect(0, 12329, '\p{Is_Ccc= BELOW_Left}', "");
Expect(1, 12329, '\p{^Is_Ccc= BELOW_Left}', "");
Expect(1, 12329, '\P{Is_Ccc= BELOW_Left}', "");
Expect(0, 12329, '\P{^Is_Ccc= BELOW_Left}', "");
Error('\p{Canonical_Combining_Class=/a/_Left}');
Error('\P{Canonical_Combining_Class=/a/_Left}');
Expect(1, 12335, '\p{Canonical_Combining_Class=left}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class=left}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class=left}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class=left}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class=left}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class=left}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class=left}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class=left}', "");
Expect(1, 12335, '\p{Canonical_Combining_Class=	 LEFT}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class=	 LEFT}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class=	 LEFT}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class=	 LEFT}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class=	 LEFT}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class=	 LEFT}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class=	 LEFT}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class=	 LEFT}', "");
Error('\p{Ccc=_-L/a/}');
Error('\P{Ccc=_-L/a/}');
Expect(1, 12335, '\p{Ccc=l}', "");
Expect(0, 12335, '\p{^Ccc=l}', "");
Expect(0, 12335, '\P{Ccc=l}', "");
Expect(1, 12335, '\P{^Ccc=l}', "");
Expect(0, 12333, '\p{Ccc=l}', "");
Expect(1, 12333, '\p{^Ccc=l}', "");
Expect(1, 12333, '\P{Ccc=l}', "");
Expect(0, 12333, '\P{^Ccc=l}', "");
Expect(1, 12335, '\p{Ccc= 	L}', "");
Expect(0, 12335, '\p{^Ccc= 	L}', "");
Expect(0, 12335, '\P{Ccc= 	L}', "");
Expect(1, 12335, '\P{^Ccc= 	L}', "");
Expect(0, 12333, '\p{Ccc= 	L}', "");
Expect(1, 12333, '\p{^Ccc= 	L}', "");
Expect(1, 12333, '\P{Ccc= 	L}', "");
Expect(0, 12333, '\P{^Ccc= 	L}', "");
Error('\p{Is_Canonical_Combining_Class=/a/0224}');
Error('\P{Is_Canonical_Combining_Class=/a/0224}');
Expect(1, 12335, '\p{Is_Canonical_Combining_Class=00224}', "");
Expect(0, 12335, '\p{^Is_Canonical_Combining_Class=00224}', "");
Expect(0, 12335, '\P{Is_Canonical_Combining_Class=00224}', "");
Expect(1, 12335, '\P{^Is_Canonical_Combining_Class=00224}', "");
Expect(0, 12333, '\p{Is_Canonical_Combining_Class=00224}', "");
Expect(1, 12333, '\p{^Is_Canonical_Combining_Class=00224}', "");
Expect(1, 12333, '\P{Is_Canonical_Combining_Class=00224}', "");
Expect(0, 12333, '\P{^Is_Canonical_Combining_Class=00224}', "");
Error('\p{Is_Ccc=	/a/LEFT}');
Error('\P{Is_Ccc=	/a/LEFT}');
Expect(1, 12335, '\p{Is_Ccc=left}', "");
Expect(0, 12335, '\p{^Is_Ccc=left}', "");
Expect(0, 12335, '\P{Is_Ccc=left}', "");
Expect(1, 12335, '\P{^Is_Ccc=left}', "");
Expect(0, 12333, '\p{Is_Ccc=left}', "");
Expect(1, 12333, '\p{^Is_Ccc=left}', "");
Expect(1, 12333, '\P{Is_Ccc=left}', "");
Expect(0, 12333, '\P{^Is_Ccc=left}', "");
Expect(1, 12335, '\p{Is_Ccc=	LEFT}', "");
Expect(0, 12335, '\p{^Is_Ccc=	LEFT}', "");
Expect(0, 12335, '\P{Is_Ccc=	LEFT}', "");
Expect(1, 12335, '\P{^Is_Ccc=	LEFT}', "");
Expect(0, 12333, '\p{Is_Ccc=	LEFT}', "");
Expect(1, 12333, '\p{^Is_Ccc=	LEFT}', "");
Expect(1, 12333, '\P{Is_Ccc=	LEFT}', "");
Expect(0, 12333, '\P{^Is_Ccc=	LEFT}', "");
Error('\p{Canonical_Combining_Class=/a/_ABOVE}');
Error('\P{Canonical_Combining_Class=/a/_ABOVE}');
Expect(1, 788, '\p{Canonical_Combining_Class=above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=above}', "");
Expect(1, 788, '\p{Canonical_Combining_Class=--Above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=--Above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=--Above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=--Above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=--Above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=--Above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=--Above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=--Above}', "");
Error('\p{Ccc:	A/a/}');
Error('\P{Ccc:	A/a/}');
Expect(1, 788, '\p{Ccc:a}', "");
Expect(0, 788, '\p{^Ccc:a}', "");
Expect(0, 788, '\P{Ccc:a}', "");
Expect(1, 788, '\P{^Ccc:a}', "");
Expect(0, 767, '\p{Ccc:a}', "");
Expect(1, 767, '\p{^Ccc:a}', "");
Expect(1, 767, '\P{Ccc:a}', "");
Expect(0, 767, '\P{^Ccc:a}', "");
Expect(1, 788, '\p{Ccc:	__a}', "");
Expect(0, 788, '\p{^Ccc:	__a}', "");
Expect(0, 788, '\P{Ccc:	__a}', "");
Expect(1, 788, '\P{^Ccc:	__a}', "");
Expect(0, 767, '\p{Ccc:	__a}', "");
Expect(1, 767, '\p{^Ccc:	__a}', "");
Expect(1, 767, '\P{Ccc:	__a}', "");
Expect(0, 767, '\P{^Ccc:	__a}', "");
Error('\p{Is_Canonical_Combining_Class= _23 0:=}');
Error('\P{Is_Canonical_Combining_Class= _23 0:=}');
Expect(1, 788, '\p{Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(0, 788, '\p{^Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(0, 788, '\P{Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(1, 788, '\P{^Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(0, 767, '\p{Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(1, 767, '\p{^Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(1, 767, '\P{Is_Canonical_Combining_Class=00_00_02_30}', "");
Expect(0, 767, '\P{^Is_Canonical_Combining_Class=00_00_02_30}', "");
Error('\p{Is_Ccc=_:=ABOVE}');
Error('\P{Is_Ccc=_:=ABOVE}');
Expect(1, 788, '\p{Is_Ccc=above}', "");
Expect(0, 788, '\p{^Is_Ccc=above}', "");
Expect(0, 788, '\P{Is_Ccc=above}', "");
Expect(1, 788, '\P{^Is_Ccc=above}', "");
Expect(0, 767, '\p{Is_Ccc=above}', "");
Expect(1, 767, '\p{^Is_Ccc=above}', "");
Expect(1, 767, '\P{Is_Ccc=above}', "");
Expect(0, 767, '\P{^Is_Ccc=above}', "");
Expect(1, 788, '\p{Is_Ccc=_above}', "");
Expect(0, 788, '\p{^Is_Ccc=_above}', "");
Expect(0, 788, '\P{Is_Ccc=_above}', "");
Expect(1, 788, '\P{^Is_Ccc=_above}', "");
Expect(0, 767, '\p{Is_Ccc=_above}', "");
Expect(1, 767, '\p{^Is_Ccc=_above}', "");
Expect(1, 767, '\P{Is_Ccc=_above}', "");
Expect(0, 767, '\P{^Is_Ccc=_above}', "");
Error('\p{Canonical_Combining_Class=-/a/000000000129}');
Error('\P{Canonical_Combining_Class=-/a/000000000129}');
Expect(1, 3953, '\p{Canonical_Combining_Class:   00000129}', "");
Expect(0, 3953, '\p{^Canonical_Combining_Class:   00000129}', "");
Expect(0, 3953, '\P{Canonical_Combining_Class:   00000129}', "");
Expect(1, 3953, '\P{^Canonical_Combining_Class:   00000129}', "");
Expect(0, 3952, '\p{Canonical_Combining_Class:   00000129}', "");
Expect(1, 3952, '\p{^Canonical_Combining_Class:   00000129}', "");
Expect(1, 3952, '\P{Canonical_Combining_Class:   00000129}', "");
Expect(0, 3952, '\P{^Canonical_Combining_Class:   00000129}', "");
Error('\p{Ccc=-0:=0 000_0	0-00129}');
Error('\P{Ccc=-0:=0 000_0	0-00129}');
Expect(1, 3953, '\p{Ccc=00_00_00_01_29}', "");
Expect(0, 3953, '\p{^Ccc=00_00_00_01_29}', "");
Expect(0, 3953, '\P{Ccc=00_00_00_01_29}', "");
Expect(1, 3953, '\P{^Ccc=00_00_00_01_29}', "");
Expect(0, 3952, '\p{Ccc=00_00_00_01_29}', "");
Expect(1, 3952, '\p{^Ccc=00_00_00_01_29}', "");
Expect(1, 3952, '\P{Ccc=00_00_00_01_29}', "");
Expect(0, 3952, '\P{^Ccc=00_00_00_01_29}', "");
Error('\p{Is_Canonical_Combining_Class=_	00_00:=00_00_129}');
Error('\P{Is_Canonical_Combining_Class=_	00_00:=00_00_129}');
Expect(1, 3953, '\p{Is_Canonical_Combining_Class=000000012_9}', "");
Expect(0, 3953, '\p{^Is_Canonical_Combining_Class=000000012_9}', "");
Expect(0, 3953, '\P{Is_Canonical_Combining_Class=000000012_9}', "");
Expect(1, 3953, '\P{^Is_Canonical_Combining_Class=000000012_9}', "");
Expect(0, 3952, '\p{Is_Canonical_Combining_Class=000000012_9}', "");
Expect(1, 3952, '\p{^Is_Canonical_Combining_Class=000000012_9}', "");
Expect(1, 3952, '\P{Is_Canonical_Combining_Class=000000012_9}', "");
Expect(0, 3952, '\P{^Is_Canonical_Combining_Class=000000012_9}', "");
Error('\p{Is_Ccc= /a/0012-9}');
Error('\P{Is_Ccc= /a/0012-9}');
Expect(1, 3953, '\p{Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(0, 3953, '\p{^Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(0, 3953, '\P{Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(1, 3953, '\P{^Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(0, 3952, '\p{Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(1, 3952, '\p{^Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(1, 3952, '\P{Is_Ccc=0_0_0_0_0_0_00129}', "");
Expect(0, 3952, '\P{^Is_Ccc=0_0_0_0_0_0_00129}', "");
Error('\p{Canonical_Combining_Class: /a/00017}');
Error('\P{Canonical_Combining_Class: /a/00017}');
Expect(1, 1463, '\p{Canonical_Combining_Class=00001_7}', "");
Expect(0, 1463, '\p{^Canonical_Combining_Class=00001_7}', "");
Expect(0, 1463, '\P{Canonical_Combining_Class=00001_7}', "");
Expect(1, 1463, '\P{^Canonical_Combining_Class=00001_7}', "");
Expect(0, 1462, '\p{Canonical_Combining_Class=00001_7}', "");
Expect(1, 1462, '\p{^Canonical_Combining_Class=00001_7}', "");
Expect(1, 1462, '\P{Canonical_Combining_Class=00001_7}', "");
Expect(0, 1462, '\P{^Canonical_Combining_Class=00001_7}', "");
Error('\p{Ccc=:=	-+0	0_0-017}');
Error('\P{Ccc=:=	-+0	0_0-017}');
Expect(1, 1463, '\p{Ccc=+0017}', "");
Expect(0, 1463, '\p{^Ccc=+0017}', "");
Expect(0, 1463, '\P{Ccc=+0017}', "");
Expect(1, 1463, '\P{^Ccc=+0017}', "");
Expect(0, 1462, '\p{Ccc=+0017}', "");
Expect(1, 1462, '\p{^Ccc=+0017}', "");
Expect(1, 1462, '\P{Ccc=+0017}', "");
Expect(0, 1462, '\P{^Ccc=+0017}', "");
Error('\p{Is_Canonical_Combining_Class=	:=00-00	0000	17}');
Error('\P{Is_Canonical_Combining_Class=	:=00-00	0000	17}');
Expect(1, 1463, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(0, 1463, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(0, 1463, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(1, 1463, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(0, 1462, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(1, 1462, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(1, 1462, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Expect(0, 1462, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0017}', "");
Error('\p{Is_Ccc=-:=+01_7}');
Error('\P{Is_Ccc=-:=+01_7}');
Expect(1, 1463, '\p{Is_Ccc=00000000017}', "");
Expect(0, 1463, '\p{^Is_Ccc=00000000017}', "");
Expect(0, 1463, '\P{Is_Ccc=00000000017}', "");
Expect(1, 1463, '\P{^Is_Ccc=00000000017}', "");
Expect(0, 1462, '\p{Is_Ccc=00000000017}', "");
Expect(1, 1462, '\p{^Is_Ccc=00000000017}', "");
Expect(1, 1462, '\P{Is_Ccc=00000000017}', "");
Expect(0, 1462, '\P{^Is_Ccc=00000000017}', "");
Error('\p{Canonical_Combining_Class=NOTReordered:=}');
Error('\P{Canonical_Combining_Class=NOTReordered:=}');
Expect(1, 767, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\p{Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=  Not_REORDERED}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=  Not_REORDERED}', "");
Error('\p{Ccc=/a/--NR}');
Error('\P{Ccc=/a/--NR}');
Expect(1, 767, '\p{Ccc=nr}', "");
Expect(0, 767, '\p{^Ccc=nr}', "");
Expect(0, 767, '\P{Ccc=nr}', "");
Expect(1, 767, '\P{^Ccc=nr}', "");
Expect(0, 846, '\p{Ccc=nr}', "");
Expect(1, 846, '\p{^Ccc=nr}', "");
Expect(1, 846, '\P{Ccc=nr}', "");
Expect(0, 846, '\P{^Ccc=nr}', "");
Expect(1, 767, '\p{Ccc=  NR}', "");
Expect(0, 767, '\p{^Ccc=  NR}', "");
Expect(0, 767, '\P{Ccc=  NR}', "");
Expect(1, 767, '\P{^Ccc=  NR}', "");
Expect(0, 846, '\p{Ccc=  NR}', "");
Expect(1, 846, '\p{^Ccc=  NR}', "");
Expect(1, 846, '\P{Ccc=  NR}', "");
Expect(0, 846, '\P{^Ccc=  NR}', "");
Error('\p{Is_Canonical_Combining_Class=  0/a/}');
Error('\P{Is_Canonical_Combining_Class=  0/a/}');
Expect(1, 767, '\p{Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 767, '\p{^Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 767, '\P{Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 767, '\P{^Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 846, '\p{Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 846, '\p{^Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 846, '\P{Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 846, '\P{^Is_Canonical_Combining_Class=0000000}', "");
Error('\p{Is_Ccc:	-:=not Reordered}');
Error('\P{Is_Ccc:	-:=not Reordered}');
Expect(1, 767, '\p{Is_Ccc=notreordered}', "");
Expect(0, 767, '\p{^Is_Ccc=notreordered}', "");
Expect(0, 767, '\P{Is_Ccc=notreordered}', "");
Expect(1, 767, '\P{^Is_Ccc=notreordered}', "");
Expect(0, 846, '\p{Is_Ccc=notreordered}', "");
Expect(1, 846, '\p{^Is_Ccc=notreordered}', "");
Expect(1, 846, '\P{Is_Ccc=notreordered}', "");
Expect(0, 846, '\P{^Is_Ccc=notreordered}', "");
Expect(1, 767, '\p{Is_Ccc=-_Not-Reordered}', "");
Expect(0, 767, '\p{^Is_Ccc=-_Not-Reordered}', "");
Expect(0, 767, '\P{Is_Ccc=-_Not-Reordered}', "");
Expect(1, 767, '\P{^Is_Ccc=-_Not-Reordered}', "");
Expect(0, 846, '\p{Is_Ccc=-_Not-Reordered}', "");
Expect(1, 846, '\p{^Is_Ccc=-_Not-Reordered}', "");
Expect(1, 846, '\P{Is_Ccc=-_Not-Reordered}', "");
Expect(0, 846, '\P{^Is_Ccc=-_Not-Reordered}', "");
Error('\p{Canonical_Combining_Class=-Above/a/LEFT}');
Error('\P{Canonical_Combining_Class=-Above/a/LEFT}');
Expect(1, 1454, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\p{Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class:		-AboveLEFT}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class:		-AboveLEFT}', "");
Error('\p{Ccc=-_AL:=}');
Error('\P{Ccc=-_AL:=}');
Expect(1, 1454, '\p{Ccc=al}', "");
Expect(0, 1454, '\p{^Ccc=al}', "");
Expect(0, 1454, '\P{Ccc=al}', "");
Expect(1, 1454, '\P{^Ccc=al}', "");
Expect(0, 1453, '\p{Ccc=al}', "");
Expect(1, 1453, '\p{^Ccc=al}', "");
Expect(1, 1453, '\P{Ccc=al}', "");
Expect(0, 1453, '\P{^Ccc=al}', "");
Expect(1, 1454, '\p{Ccc=	_AL}', "");
Expect(0, 1454, '\p{^Ccc=	_AL}', "");
Expect(0, 1454, '\P{Ccc=	_AL}', "");
Expect(1, 1454, '\P{^Ccc=	_AL}', "");
Expect(0, 1453, '\p{Ccc=	_AL}', "");
Expect(1, 1453, '\p{^Ccc=	_AL}', "");
Expect(1, 1453, '\P{Ccc=	_AL}', "");
Expect(0, 1453, '\P{^Ccc=	_AL}', "");
Error('\p{Is_Canonical_Combining_Class=_-000/a/002 28}');
Error('\P{Is_Canonical_Combining_Class=_-000/a/002 28}');
Expect(1, 1454, '\p{Is_Canonical_Combining_Class=00000228}', "");
Expect(0, 1454, '\p{^Is_Canonical_Combining_Class=00000228}', "");
Expect(0, 1454, '\P{Is_Canonical_Combining_Class=00000228}', "");
Expect(1, 1454, '\P{^Is_Canonical_Combining_Class=00000228}', "");
Expect(0, 1453, '\p{Is_Canonical_Combining_Class=00000228}', "");
Expect(1, 1453, '\p{^Is_Canonical_Combining_Class=00000228}', "");
Expect(1, 1453, '\P{Is_Canonical_Combining_Class=00000228}', "");
Expect(0, 1453, '\P{^Is_Canonical_Combining_Class=00000228}', "");
Error('\p{Is_Ccc=--ABOVE/a/Left}');
Error('\P{Is_Ccc=--ABOVE/a/Left}');
Expect(1, 1454, '\p{Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\p{^Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\P{Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\P{^Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\p{Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\p{^Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\P{Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\P{^Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\p{Is_Ccc: _	above LEFT}', "");
Expect(0, 1454, '\p{^Is_Ccc: _	above LEFT}', "");
Expect(0, 1454, '\P{Is_Ccc: _	above LEFT}', "");
Expect(1, 1454, '\P{^Is_Ccc: _	above LEFT}', "");
Expect(0, 1453, '\p{Is_Ccc: _	above LEFT}', "");
Expect(1, 1453, '\p{^Is_Ccc: _	above LEFT}', "");
Expect(1, 1453, '\P{Is_Ccc: _	above LEFT}', "");
Expect(0, 1453, '\P{^Is_Ccc: _	above LEFT}', "");
Error('\p{Canonical_Combining_Class:	/a/- Overlay}');
Error('\P{Canonical_Combining_Class:	/a/- Overlay}');
Expect(1, 824, '\p{Canonical_Combining_Class=overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class=overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class=overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class=overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class=overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class=overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class=overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class=overlay}', "");
Expect(1, 824, '\p{Canonical_Combining_Class:     Overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class:     Overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class:     Overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class:     Overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class:     Overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class:     Overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class:     Overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class:     Overlay}', "");
Error('\p{Ccc= 	ov/a/}');
Error('\P{Ccc= 	ov/a/}');
Expect(1, 824, '\p{Ccc=ov}', "");
Expect(0, 824, '\p{^Ccc=ov}', "");
Expect(0, 824, '\P{Ccc=ov}', "");
Expect(1, 824, '\P{^Ccc=ov}', "");
Expect(0, 819, '\p{Ccc=ov}', "");
Expect(1, 819, '\p{^Ccc=ov}', "");
Expect(1, 819, '\P{Ccc=ov}', "");
Expect(0, 819, '\P{^Ccc=ov}', "");
Expect(1, 824, '\p{Ccc=  OV}', "");
Expect(0, 824, '\p{^Ccc=  OV}', "");
Expect(0, 824, '\P{Ccc=  OV}', "");
Expect(1, 824, '\P{^Ccc=  OV}', "");
Expect(0, 819, '\p{Ccc=  OV}', "");
Expect(1, 819, '\p{^Ccc=  OV}', "");
Expect(1, 819, '\P{Ccc=  OV}', "");
Expect(0, 819, '\P{^Ccc=  OV}', "");
Error('\p{Is_Canonical_Combining_Class:    -0001:=}');
Error('\P{Is_Canonical_Combining_Class:    -0001:=}');
Expect(1, 824, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(0, 824, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(0, 824, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(1, 824, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(0, 819, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(1, 819, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(1, 819, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Expect(0, 819, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_01}', "");
Error('\p{Is_Ccc=_/a/Overlay}');
Error('\P{Is_Ccc=_/a/Overlay}');
Expect(1, 824, '\p{Is_Ccc=overlay}', "");
Expect(0, 824, '\p{^Is_Ccc=overlay}', "");
Expect(0, 824, '\P{Is_Ccc=overlay}', "");
Expect(1, 824, '\P{^Is_Ccc=overlay}', "");
Expect(0, 819, '\p{Is_Ccc=overlay}', "");
Expect(1, 819, '\p{^Is_Ccc=overlay}', "");
Expect(1, 819, '\P{Is_Ccc=overlay}', "");
Expect(0, 819, '\P{^Is_Ccc=overlay}', "");
Expect(1, 824, '\p{Is_Ccc=-	OVERLAY}', "");
Expect(0, 824, '\p{^Is_Ccc=-	OVERLAY}', "");
Expect(0, 824, '\P{Is_Ccc=-	OVERLAY}', "");
Expect(1, 824, '\P{^Is_Ccc=-	OVERLAY}', "");
Expect(0, 819, '\p{Is_Ccc=-	OVERLAY}', "");
Expect(1, 819, '\p{^Is_Ccc=-	OVERLAY}', "");
Expect(1, 819, '\P{Is_Ccc=-	OVERLAY}', "");
Expect(0, 819, '\P{^Is_Ccc=-	OVERLAY}', "");
Error('\p{Canonical_Combining_Class=	_virama:=}');
Error('\P{Canonical_Combining_Class=	_virama:=}');
Expect(1, 2381, '\p{Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\p{Canonical_Combining_Class: --virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class: --virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class: --virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class: --virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class: --virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class: --virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class: --virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class: --virama}', "");
Error('\p{Ccc=/a/  VR}');
Error('\P{Ccc=/a/  VR}');
Expect(1, 2381, '\p{Ccc=vr}', "");
Expect(0, 2381, '\p{^Ccc=vr}', "");
Expect(0, 2381, '\P{Ccc=vr}', "");
Expect(1, 2381, '\P{^Ccc=vr}', "");
Expect(0, 2380, '\p{Ccc=vr}', "");
Expect(1, 2380, '\p{^Ccc=vr}', "");
Expect(1, 2380, '\P{Ccc=vr}', "");
Expect(0, 2380, '\P{^Ccc=vr}', "");
Expect(1, 2381, '\p{Ccc=_VR}', "");
Expect(0, 2381, '\p{^Ccc=_VR}', "");
Expect(0, 2381, '\P{Ccc=_VR}', "");
Expect(1, 2381, '\P{^Ccc=_VR}', "");
Expect(0, 2380, '\p{Ccc=_VR}', "");
Expect(1, 2380, '\p{^Ccc=_VR}', "");
Expect(1, 2380, '\P{Ccc=_VR}', "");
Expect(0, 2380, '\P{^Ccc=_VR}', "");
Error('\p{Is_Canonical_Combining_Class:		-0 0:=0-0-0_0009}');
Error('\P{Is_Canonical_Combining_Class:		-0 0:=0-0-0_0009}');
Expect(1, 2381, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(0, 2381, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(0, 2381, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(1, 2381, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(0, 2380, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(1, 2380, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(1, 2380, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Expect(0, 2380, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_0_0_009}', "");
Error('\p{Is_Ccc=-VIRAMA/a/}');
Error('\P{Is_Ccc=-VIRAMA/a/}');
Expect(1, 2381, '\p{Is_Ccc:	virama}', "");
Expect(0, 2381, '\p{^Is_Ccc:	virama}', "");
Expect(0, 2381, '\P{Is_Ccc:	virama}', "");
Expect(1, 2381, '\P{^Is_Ccc:	virama}', "");
Expect(0, 2380, '\p{Is_Ccc:	virama}', "");
Expect(1, 2380, '\p{^Is_Ccc:	virama}', "");
Expect(1, 2380, '\P{Is_Ccc:	virama}', "");
Expect(0, 2380, '\P{^Is_Ccc:	virama}', "");
Expect(1, 2381, '\p{Is_Ccc=  VIRAMA}', "");
Expect(0, 2381, '\p{^Is_Ccc=  VIRAMA}', "");
Expect(0, 2381, '\P{Is_Ccc=  VIRAMA}', "");
Expect(1, 2381, '\P{^Is_Ccc=  VIRAMA}', "");
Expect(0, 2380, '\p{Is_Ccc=  VIRAMA}', "");
Expect(1, 2380, '\p{^Is_Ccc=  VIRAMA}', "");
Expect(1, 2380, '\P{Is_Ccc=  VIRAMA}', "");
Expect(0, 2380, '\P{^Is_Ccc=  VIRAMA}', "");
Error('\p{Canonical_Combining_Class=:=--attachedBELOW}');
Error('\P{Canonical_Combining_Class=:=--attachedBELOW}');
Expect(1, 802, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\p{Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(0, 802, '\P{Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(0, 800, '\p{Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(1, 800, '\P{Canonical_Combining_Class= -Attached_BELOW}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class= -Attached_BELOW}', "");
Error('\p{Ccc=_-atb:=}');
Error('\P{Ccc=_-atb:=}');
Expect(1, 802, '\p{Ccc: atb}', "");
Expect(0, 802, '\p{^Ccc: atb}', "");
Expect(0, 802, '\P{Ccc: atb}', "");
Expect(1, 802, '\P{^Ccc: atb}', "");
Expect(0, 800, '\p{Ccc: atb}', "");
Expect(1, 800, '\p{^Ccc: atb}', "");
Expect(1, 800, '\P{Ccc: atb}', "");
Expect(0, 800, '\P{^Ccc: atb}', "");
Expect(1, 802, '\p{Ccc:	 ATB}', "");
Expect(0, 802, '\p{^Ccc:	 ATB}', "");
Expect(0, 802, '\P{Ccc:	 ATB}', "");
Expect(1, 802, '\P{^Ccc:	 ATB}', "");
Expect(0, 800, '\p{Ccc:	 ATB}', "");
Expect(1, 800, '\p{^Ccc:	 ATB}', "");
Expect(1, 800, '\P{Ccc:	 ATB}', "");
Expect(0, 800, '\P{^Ccc:	 ATB}', "");
Error('\p{Is_Canonical_Combining_Class=:=-00_0000 202}');
Error('\P{Is_Canonical_Combining_Class=:=-00_0000 202}');
Expect(1, 802, '\p{Is_Canonical_Combining_Class=0000000202}', "");
Expect(0, 802, '\p{^Is_Canonical_Combining_Class=0000000202}', "");
Expect(0, 802, '\P{Is_Canonical_Combining_Class=0000000202}', "");
Expect(1, 802, '\P{^Is_Canonical_Combining_Class=0000000202}', "");
Expect(0, 800, '\p{Is_Canonical_Combining_Class=0000000202}', "");
Expect(1, 800, '\p{^Is_Canonical_Combining_Class=0000000202}', "");
Expect(1, 800, '\P{Is_Canonical_Combining_Class=0000000202}', "");
Expect(0, 800, '\P{^Is_Canonical_Combining_Class=0000000202}', "");
Error('\p{Is_Ccc: _Attached	Below:=}');
Error('\P{Is_Ccc: _Attached	Below:=}');
Expect(1, 802, '\p{Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\p{^Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\P{Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\P{^Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\p{Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\p{^Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\P{Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\P{^Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\p{Is_Ccc=_ ATTACHED-Below}', "");
Expect(0, 802, '\p{^Is_Ccc=_ ATTACHED-Below}', "");
Expect(0, 802, '\P{Is_Ccc=_ ATTACHED-Below}', "");
Expect(1, 802, '\P{^Is_Ccc=_ ATTACHED-Below}', "");
Expect(0, 800, '\p{Is_Ccc=_ ATTACHED-Below}', "");
Expect(1, 800, '\p{^Is_Ccc=_ ATTACHED-Below}', "");
Expect(1, 800, '\P{Is_Ccc=_ ATTACHED-Below}', "");
Expect(0, 800, '\P{^Is_Ccc=_ ATTACHED-Below}', "");
Error('\p{Canonical_Combining_Class=-/a/014}');
Error('\P{Canonical_Combining_Class=-/a/014}');
Expect(1, 1460, '\p{Canonical_Combining_Class=0014}', "");
Expect(0, 1460, '\p{^Canonical_Combining_Class=0014}', "");
Expect(0, 1460, '\P{Canonical_Combining_Class=0014}', "");
Expect(1, 1460, '\P{^Canonical_Combining_Class=0014}', "");
Expect(0, 1459, '\p{Canonical_Combining_Class=0014}', "");
Expect(1, 1459, '\p{^Canonical_Combining_Class=0014}', "");
Expect(1, 1459, '\P{Canonical_Combining_Class=0014}', "");
Expect(0, 1459, '\P{^Canonical_Combining_Class=0014}', "");
Error('\p{Ccc: /a/001	4}');
Error('\P{Ccc: /a/001	4}');
Expect(1, 1460, '\p{Ccc=00_00_01_4}', "");
Expect(0, 1460, '\p{^Ccc=00_00_01_4}', "");
Expect(0, 1460, '\P{Ccc=00_00_01_4}', "");
Expect(1, 1460, '\P{^Ccc=00_00_01_4}', "");
Expect(0, 1459, '\p{Ccc=00_00_01_4}', "");
Expect(1, 1459, '\p{^Ccc=00_00_01_4}', "");
Expect(1, 1459, '\P{Ccc=00_00_01_4}', "");
Expect(0, 1459, '\P{^Ccc=00_00_01_4}', "");
Error('\p{Is_Canonical_Combining_Class=	:=00000000014}');
Error('\P{Is_Canonical_Combining_Class=	:=00000000014}');
Expect(1, 1460, '\p{Is_Canonical_Combining_Class=00000000014}', "");
Expect(0, 1460, '\p{^Is_Canonical_Combining_Class=00000000014}', "");
Expect(0, 1460, '\P{Is_Canonical_Combining_Class=00000000014}', "");
Expect(1, 1460, '\P{^Is_Canonical_Combining_Class=00000000014}', "");
Expect(0, 1459, '\p{Is_Canonical_Combining_Class=00000000014}', "");
Expect(1, 1459, '\p{^Is_Canonical_Combining_Class=00000000014}', "");
Expect(1, 1459, '\P{Is_Canonical_Combining_Class=00000000014}', "");
Expect(0, 1459, '\P{^Is_Canonical_Combining_Class=00000000014}', "");
Error('\p{Is_Ccc=/a/ -14}');
Error('\P{Is_Ccc=/a/ -14}');
Expect(1, 1460, '\p{Is_Ccc=0000000014}', "");
Expect(0, 1460, '\p{^Is_Ccc=0000000014}', "");
Expect(0, 1460, '\P{Is_Ccc=0000000014}', "");
Expect(1, 1460, '\P{^Is_Ccc=0000000014}', "");
Expect(0, 1459, '\p{Is_Ccc=0000000014}', "");
Expect(1, 1459, '\p{^Is_Ccc=0000000014}', "");
Expect(1, 1459, '\P{Is_Ccc=0000000014}', "");
Expect(0, 1459, '\P{^Is_Ccc=0000000014}', "");
Error('\p{Canonical_Combining_Class=	/a/00000000024}');
Error('\P{Canonical_Combining_Class=	/a/00000000024}');
Expect(1, 1473, '\p{Canonical_Combining_Class=000024}', "");
Expect(0, 1473, '\p{^Canonical_Combining_Class=000024}', "");
Expect(0, 1473, '\P{Canonical_Combining_Class=000024}', "");
Expect(1, 1473, '\P{^Canonical_Combining_Class=000024}', "");
Expect(0, 1472, '\p{Canonical_Combining_Class=000024}', "");
Expect(1, 1472, '\p{^Canonical_Combining_Class=000024}', "");
Expect(1, 1472, '\P{Canonical_Combining_Class=000024}', "");
Expect(0, 1472, '\P{^Canonical_Combining_Class=000024}', "");
Error('\p{Ccc=/a/000000024}');
Error('\P{Ccc=/a/000000024}');
Expect(1, 1473, '\p{Ccc:	+00000000024}', "");
Expect(0, 1473, '\p{^Ccc:	+00000000024}', "");
Expect(0, 1473, '\P{Ccc:	+00000000024}', "");
Expect(1, 1473, '\P{^Ccc:	+00000000024}', "");
Expect(0, 1472, '\p{Ccc:	+00000000024}', "");
Expect(1, 1472, '\p{^Ccc:	+00000000024}', "");
Expect(1, 1472, '\P{Ccc:	+00000000024}', "");
Expect(0, 1472, '\P{^Ccc:	+00000000024}', "");
Error('\p{Is_Canonical_Combining_Class=		0 0/a/24}');
Error('\P{Is_Canonical_Combining_Class=		0 0/a/24}');
Expect(1, 1473, '\p{Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(0, 1473, '\p{^Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(0, 1473, '\P{Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(1, 1473, '\P{^Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(0, 1472, '\p{Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(1, 1472, '\p{^Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(1, 1472, '\P{Is_Canonical_Combining_Class=0000_0000_24}', "");
Expect(0, 1472, '\P{^Is_Canonical_Combining_Class=0000_0000_24}', "");
Error('\p{Is_Ccc=:=_	024}');
Error('\P{Is_Ccc=:=_	024}');
Expect(1, 1473, '\p{Is_Ccc=0_0_0_0_0_00024}', "");
Expect(0, 1473, '\p{^Is_Ccc=0_0_0_0_0_00024}', "");
Expect(0, 1473, '\P{Is_Ccc=0_0_0_0_0_00024}', "");
Expect(1, 1473, '\P{^Is_Ccc=0_0_0_0_0_00024}', "");
Expect(0, 1472, '\p{Is_Ccc=0_0_0_0_0_00024}', "");
Expect(1, 1472, '\p{^Is_Ccc=0_0_0_0_0_00024}', "");
Expect(1, 1472, '\P{Is_Ccc=0_0_0_0_0_00024}', "");
Expect(0, 1472, '\P{^Is_Ccc=0_0_0_0_0_00024}', "");
Error('\p{Canonical_Combining_Class= 	+23/a/}');
Error('\P{Canonical_Combining_Class= 	+23/a/}');
Expect(1, 1471, '\p{Canonical_Combining_Class=000000023}', "");
Expect(0, 1471, '\p{^Canonical_Combining_Class=000000023}', "");
Expect(0, 1471, '\P{Canonical_Combining_Class=000000023}', "");
Expect(1, 1471, '\P{^Canonical_Combining_Class=000000023}', "");
Expect(0, 1470, '\p{Canonical_Combining_Class=000000023}', "");
Expect(1, 1470, '\p{^Canonical_Combining_Class=000000023}', "");
Expect(1, 1470, '\P{Canonical_Combining_Class=000000023}', "");
Expect(0, 1470, '\P{^Canonical_Combining_Class=000000023}', "");
Error('\p{Ccc=_ +000000023/a/}');
Error('\P{Ccc=_ +000000023/a/}');
Expect(1, 1471, '\p{Ccc=+000000023}', "");
Expect(0, 1471, '\p{^Ccc=+000000023}', "");
Expect(0, 1471, '\P{Ccc=+000000023}', "");
Expect(1, 1471, '\P{^Ccc=+000000023}', "");
Expect(0, 1470, '\p{Ccc=+000000023}', "");
Expect(1, 1470, '\p{^Ccc=+000000023}', "");
Expect(1, 1470, '\P{Ccc=+000000023}', "");
Expect(0, 1470, '\P{^Ccc=+000000023}', "");
Error('\p{Is_Canonical_Combining_Class: /a/--0_0	00 023}');
Error('\P{Is_Canonical_Combining_Class: /a/--0_0	00 023}');
Expect(1, 1471, '\p{Is_Canonical_Combining_Class: 00000023}', "");
Expect(0, 1471, '\p{^Is_Canonical_Combining_Class: 00000023}', "");
Expect(0, 1471, '\P{Is_Canonical_Combining_Class: 00000023}', "");
Expect(1, 1471, '\P{^Is_Canonical_Combining_Class: 00000023}', "");
Expect(0, 1470, '\p{Is_Canonical_Combining_Class: 00000023}', "");
Expect(1, 1470, '\p{^Is_Canonical_Combining_Class: 00000023}', "");
Expect(1, 1470, '\P{Is_Canonical_Combining_Class: 00000023}', "");
Expect(0, 1470, '\P{^Is_Canonical_Combining_Class: 00000023}', "");
Error('\p{Is_Ccc=_000023:=}');
Error('\P{Is_Ccc=_000023:=}');
Expect(1, 1471, '\p{Is_Ccc=+000023}', "");
Expect(0, 1471, '\p{^Is_Ccc=+000023}', "");
Expect(0, 1471, '\P{Is_Ccc=+000023}', "");
Expect(1, 1471, '\P{^Is_Ccc=+000023}', "");
Expect(0, 1470, '\p{Is_Ccc=+000023}', "");
Expect(1, 1470, '\p{^Is_Ccc=+000023}', "");
Expect(1, 1470, '\P{Is_Ccc=+000023}', "");
Expect(0, 1470, '\P{^Is_Ccc=+000023}', "");
Error('\p{Canonical_Combining_Class=:=_	NUKTA}');
Error('\P{Canonical_Combining_Class=:=_	NUKTA}');
Expect(1, 2364, '\p{Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\p{Canonical_Combining_Class=-NUKTA}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=-NUKTA}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=-NUKTA}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=-NUKTA}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=-NUKTA}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=-NUKTA}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=-NUKTA}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=-NUKTA}', "");
Error('\p{Ccc=:= 	nk}');
Error('\P{Ccc=:= 	nk}');
Expect(1, 2364, '\p{Ccc=nk}', "");
Expect(0, 2364, '\p{^Ccc=nk}', "");
Expect(0, 2364, '\P{Ccc=nk}', "");
Expect(1, 2364, '\P{^Ccc=nk}', "");
Expect(0, 2363, '\p{Ccc=nk}', "");
Expect(1, 2363, '\p{^Ccc=nk}', "");
Expect(1, 2363, '\P{Ccc=nk}', "");
Expect(0, 2363, '\P{^Ccc=nk}', "");
Expect(1, 2364, '\p{Ccc= _NK}', "");
Expect(0, 2364, '\p{^Ccc= _NK}', "");
Expect(0, 2364, '\P{Ccc= _NK}', "");
Expect(1, 2364, '\P{^Ccc= _NK}', "");
Expect(0, 2363, '\p{Ccc= _NK}', "");
Expect(1, 2363, '\p{^Ccc= _NK}', "");
Expect(1, 2363, '\P{Ccc= _NK}', "");
Expect(0, 2363, '\P{^Ccc= _NK}', "");
Error('\p{Is_Canonical_Combining_Class=	_000_000_7/a/}');
Error('\P{Is_Canonical_Combining_Class=	_000_000_7/a/}');
Expect(1, 2364, '\p{Is_Canonical_Combining_Class=+07}', "");
Expect(0, 2364, '\p{^Is_Canonical_Combining_Class=+07}', "");
Expect(0, 2364, '\P{Is_Canonical_Combining_Class=+07}', "");
Expect(1, 2364, '\P{^Is_Canonical_Combining_Class=+07}', "");
Expect(0, 2363, '\p{Is_Canonical_Combining_Class=+07}', "");
Expect(1, 2363, '\p{^Is_Canonical_Combining_Class=+07}', "");
Expect(1, 2363, '\P{Is_Canonical_Combining_Class=+07}', "");
Expect(0, 2363, '\P{^Is_Canonical_Combining_Class=+07}', "");
Error('\p{Is_Ccc=_:=Nukta}');
Error('\P{Is_Ccc=_:=Nukta}');
Expect(1, 2364, '\p{Is_Ccc:   nukta}', "");
Expect(0, 2364, '\p{^Is_Ccc:   nukta}', "");
Expect(0, 2364, '\P{Is_Ccc:   nukta}', "");
Expect(1, 2364, '\P{^Is_Ccc:   nukta}', "");
Expect(0, 2363, '\p{Is_Ccc:   nukta}', "");
Expect(1, 2363, '\p{^Is_Ccc:   nukta}', "");
Expect(1, 2363, '\P{Is_Ccc:   nukta}', "");
Expect(0, 2363, '\P{^Is_Ccc:   nukta}', "");
Expect(1, 2364, '\p{Is_Ccc= nukta}', "");
Expect(0, 2364, '\p{^Is_Ccc= nukta}', "");
Expect(0, 2364, '\P{Is_Ccc= nukta}', "");
Expect(1, 2364, '\P{^Is_Ccc= nukta}', "");
Expect(0, 2363, '\p{Is_Ccc= nukta}', "");
Expect(1, 2363, '\p{^Is_Ccc= nukta}', "");
Expect(1, 2363, '\P{Is_Ccc= nukta}', "");
Expect(0, 2363, '\P{^Is_Ccc= nukta}', "");
Error('\p{Canonical_Combining_Class= :=+0000033}');
Error('\P{Canonical_Combining_Class= :=+0000033}');
Expect(1, 1617, '\p{Canonical_Combining_Class=+0_0_33}', "");
Expect(0, 1617, '\p{^Canonical_Combining_Class=+0_0_33}', "");
Expect(0, 1617, '\P{Canonical_Combining_Class=+0_0_33}', "");
Expect(1, 1617, '\P{^Canonical_Combining_Class=+0_0_33}', "");
Expect(0, 1616, '\p{Canonical_Combining_Class=+0_0_33}', "");
Expect(1, 1616, '\p{^Canonical_Combining_Class=+0_0_33}', "");
Expect(1, 1616, '\P{Canonical_Combining_Class=+0_0_33}', "");
Expect(0, 1616, '\P{^Canonical_Combining_Class=+0_0_33}', "");
Error('\p{Ccc=:=+33}');
Error('\P{Ccc=:=+33}');
Expect(1, 1617, '\p{Ccc=00033}', "");
Expect(0, 1617, '\p{^Ccc=00033}', "");
Expect(0, 1617, '\P{Ccc=00033}', "");
Expect(1, 1617, '\P{^Ccc=00033}', "");
Expect(0, 1616, '\p{Ccc=00033}', "");
Expect(1, 1616, '\p{^Ccc=00033}', "");
Expect(1, 1616, '\P{Ccc=00033}', "");
Expect(0, 1616, '\P{^Ccc=00033}', "");
Error('\p{Is_Canonical_Combining_Class=:= 	+000033}');
Error('\P{Is_Canonical_Combining_Class=:= 	+000033}');
Expect(1, 1617, '\p{Is_Canonical_Combining_Class=+03_3}', "");
Expect(0, 1617, '\p{^Is_Canonical_Combining_Class=+03_3}', "");
Expect(0, 1617, '\P{Is_Canonical_Combining_Class=+03_3}', "");
Expect(1, 1617, '\P{^Is_Canonical_Combining_Class=+03_3}', "");
Expect(0, 1616, '\p{Is_Canonical_Combining_Class=+03_3}', "");
Expect(1, 1616, '\p{^Is_Canonical_Combining_Class=+03_3}', "");
Expect(1, 1616, '\P{Is_Canonical_Combining_Class=+03_3}', "");
Expect(0, 1616, '\P{^Is_Canonical_Combining_Class=+03_3}', "");
Error('\p{Is_Ccc=/a/_	0000033}');
Error('\P{Is_Ccc=/a/_	0000033}');
Expect(1, 1617, '\p{Is_Ccc=0_0_33}', "");
Expect(0, 1617, '\p{^Is_Ccc=0_0_33}', "");
Expect(0, 1617, '\P{Is_Ccc=0_0_33}', "");
Expect(1, 1617, '\P{^Is_Ccc=0_0_33}', "");
Expect(0, 1616, '\p{Is_Ccc=0_0_33}', "");
Expect(1, 1616, '\p{^Is_Ccc=0_0_33}', "");
Expect(1, 1616, '\P{Is_Ccc=0_0_33}', "");
Expect(0, 1616, '\P{^Is_Ccc=0_0_33}', "");
Error('\p{Canonical_Combining_Class:   _000/a/0021}');
Error('\P{Canonical_Combining_Class:   _000/a/0021}');
Expect(1, 1468, '\p{Canonical_Combining_Class=+00021}', "");
Expect(0, 1468, '\p{^Canonical_Combining_Class=+00021}', "");
Expect(0, 1468, '\P{Canonical_Combining_Class=+00021}', "");
Expect(1, 1468, '\P{^Canonical_Combining_Class=+00021}', "");
Expect(0, 1467, '\p{Canonical_Combining_Class=+00021}', "");
Expect(1, 1467, '\p{^Canonical_Combining_Class=+00021}', "");
Expect(1, 1467, '\P{Canonical_Combining_Class=+00021}', "");
Expect(0, 1467, '\P{^Canonical_Combining_Class=+00021}', "");
Error('\p{Ccc= /a/00_00 00 00-21}');
Error('\P{Ccc= /a/00_00 00 00-21}');
Expect(1, 1468, '\p{Ccc=00002_1}', "");
Expect(0, 1468, '\p{^Ccc=00002_1}', "");
Expect(0, 1468, '\P{Ccc=00002_1}', "");
Expect(1, 1468, '\P{^Ccc=00002_1}', "");
Expect(0, 1467, '\p{Ccc=00002_1}', "");
Expect(1, 1467, '\p{^Ccc=00002_1}', "");
Expect(1, 1467, '\P{Ccc=00002_1}', "");
Expect(0, 1467, '\P{^Ccc=00002_1}', "");
Error('\p{Is_Canonical_Combining_Class: _+00/a/00-21}');
Error('\P{Is_Canonical_Combining_Class: _+00/a/00-21}');
Expect(1, 1468, '\p{Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(0, 1468, '\p{^Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(0, 1468, '\P{Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(1, 1468, '\P{^Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(0, 1467, '\p{Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(1, 1467, '\p{^Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(1, 1467, '\P{Is_Canonical_Combining_Class=0000000002_1}', "");
Expect(0, 1467, '\P{^Is_Canonical_Combining_Class=0000000002_1}', "");
Error('\p{Is_Ccc=_/a/+00-021}');
Error('\P{Is_Ccc=_/a/+00-021}');
Expect(1, 1468, '\p{Is_Ccc=00002_1}', "");
Expect(0, 1468, '\p{^Is_Ccc=00002_1}', "");
Expect(0, 1468, '\P{Is_Ccc=00002_1}', "");
Expect(1, 1468, '\P{^Is_Ccc=00002_1}', "");
Expect(0, 1467, '\p{Is_Ccc=00002_1}', "");
Expect(1, 1467, '\p{^Is_Ccc=00002_1}', "");
Expect(1, 1467, '\P{Is_Ccc=00002_1}', "");
Expect(0, 1467, '\P{^Is_Ccc=00002_1}', "");
Error('\p{Canonical_Combining_Class=	/a/00_0-00 26}');
Error('\P{Canonical_Combining_Class=	/a/00_0-00 26}');
Expect(1, 64286, '\p{Canonical_Combining_Class=000_002_6}', "");
Expect(0, 64286, '\p{^Canonical_Combining_Class=000_002_6}', "");
Expect(0, 64286, '\P{Canonical_Combining_Class=000_002_6}', "");
Expect(1, 64286, '\P{^Canonical_Combining_Class=000_002_6}', "");
Expect(0, 64285, '\p{Canonical_Combining_Class=000_002_6}', "");
Expect(1, 64285, '\p{^Canonical_Combining_Class=000_002_6}', "");
Expect(1, 64285, '\P{Canonical_Combining_Class=000_002_6}', "");
Expect(0, 64285, '\P{^Canonical_Combining_Class=000_002_6}', "");
Error('\p{Ccc=:=0-0-0-026}');
Error('\P{Ccc=:=0-0-0-026}');
Expect(1, 64286, '\p{Ccc=+02_6}', "");
Expect(0, 64286, '\p{^Ccc=+02_6}', "");
Expect(0, 64286, '\P{Ccc=+02_6}', "");
Expect(1, 64286, '\P{^Ccc=+02_6}', "");
Expect(0, 64285, '\p{Ccc=+02_6}', "");
Expect(1, 64285, '\p{^Ccc=+02_6}', "");
Expect(1, 64285, '\P{Ccc=+02_6}', "");
Expect(0, 64285, '\P{^Ccc=+02_6}', "");
Error('\p{Is_Canonical_Combining_Class=:=	00000000026}');
Error('\P{Is_Canonical_Combining_Class=:=	00000000026}');
Expect(1, 64286, '\p{Is_Canonical_Combining_Class=2_6}', "");
Expect(0, 64286, '\p{^Is_Canonical_Combining_Class=2_6}', "");
Expect(0, 64286, '\P{Is_Canonical_Combining_Class=2_6}', "");
Expect(1, 64286, '\P{^Is_Canonical_Combining_Class=2_6}', "");
Expect(0, 64285, '\p{Is_Canonical_Combining_Class=2_6}', "");
Expect(1, 64285, '\p{^Is_Canonical_Combining_Class=2_6}', "");
Expect(1, 64285, '\P{Is_Canonical_Combining_Class=2_6}', "");
Expect(0, 64285, '\P{^Is_Canonical_Combining_Class=2_6}', "");
Error('\p{Is_Ccc=__2:=6}');
Error('\P{Is_Ccc=__2:=6}');
Expect(1, 64286, '\p{Is_Ccc:	000026}', "");
Expect(0, 64286, '\p{^Is_Ccc:	000026}', "");
Expect(0, 64286, '\P{Is_Ccc:	000026}', "");
Expect(1, 64286, '\P{^Is_Ccc:	000026}', "");
Expect(0, 64285, '\p{Is_Ccc:	000026}', "");
Expect(1, 64285, '\p{^Is_Ccc:	000026}', "");
Expect(1, 64285, '\P{Is_Ccc:	000026}', "");
Expect(0, 64285, '\P{^Is_Ccc:	000026}', "");
Error('\p{Canonical_Combining_Class=/a/-+000000000103}');
Error('\P{Canonical_Combining_Class=/a/-+000000000103}');
Expect(1, 3641, '\p{Canonical_Combining_Class=+000000103}', "");
Expect(0, 3641, '\p{^Canonical_Combining_Class=+000000103}', "");
Expect(0, 3641, '\P{Canonical_Combining_Class=+000000103}', "");
Expect(1, 3641, '\P{^Canonical_Combining_Class=+000000103}', "");
Expect(0, 3639, '\p{Canonical_Combining_Class=+000000103}', "");
Expect(1, 3639, '\p{^Canonical_Combining_Class=+000000103}', "");
Expect(1, 3639, '\P{Canonical_Combining_Class=+000000103}', "");
Expect(0, 3639, '\P{^Canonical_Combining_Class=+000000103}', "");
Error('\p{Ccc=/a/ _0000000103}');
Error('\P{Ccc=/a/ _0000000103}');
Expect(1, 3641, '\p{Ccc=0000000103}', "");
Expect(0, 3641, '\p{^Ccc=0000000103}', "");
Expect(0, 3641, '\P{Ccc=0000000103}', "");
Expect(1, 3641, '\P{^Ccc=0000000103}', "");
Expect(0, 3639, '\p{Ccc=0000000103}', "");
Expect(1, 3639, '\p{^Ccc=0000000103}', "");
Expect(1, 3639, '\P{Ccc=0000000103}', "");
Expect(0, 3639, '\P{^Ccc=0000000103}', "");
Error('\p{Is_Canonical_Combining_Class=-:=+0	00_0-00 0103}');
Error('\P{Is_Canonical_Combining_Class=-:=+0	00_0-00 0103}');
Expect(1, 3641, '\p{Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(0, 3641, '\p{^Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(0, 3641, '\P{Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(1, 3641, '\P{^Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(0, 3639, '\p{Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(1, 3639, '\p{^Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(1, 3639, '\P{Is_Canonical_Combining_Class=00_00_10_3}', "");
Expect(0, 3639, '\P{^Is_Canonical_Combining_Class=00_00_10_3}', "");
Error('\p{Is_Ccc: :=00103}');
Error('\P{Is_Ccc: :=00103}');
Expect(1, 3641, '\p{Is_Ccc:	0000000103}', "");
Expect(0, 3641, '\p{^Is_Ccc:	0000000103}', "");
Expect(0, 3641, '\P{Is_Ccc:	0000000103}', "");
Expect(1, 3641, '\P{^Is_Ccc:	0000000103}', "");
Expect(0, 3639, '\p{Is_Ccc:	0000000103}', "");
Expect(1, 3639, '\p{^Is_Ccc:	0000000103}', "");
Expect(1, 3639, '\P{Is_Ccc:	0000000103}', "");
Expect(0, 3639, '\P{^Is_Ccc:	0000000103}', "");
Error('\p{Canonical_Combining_Class: /a/01-0}');
Error('\P{Canonical_Combining_Class: /a/01-0}');
Expect(1, 1456, '\p{Canonical_Combining_Class=00000010}', "");
Expect(0, 1456, '\p{^Canonical_Combining_Class=00000010}', "");
Expect(0, 1456, '\P{Canonical_Combining_Class=00000010}', "");
Expect(1, 1456, '\P{^Canonical_Combining_Class=00000010}', "");
Expect(0, 1455, '\p{Canonical_Combining_Class=00000010}', "");
Expect(1, 1455, '\p{^Canonical_Combining_Class=00000010}', "");
Expect(1, 1455, '\P{Canonical_Combining_Class=00000010}', "");
Expect(0, 1455, '\P{^Canonical_Combining_Class=00000010}', "");
Error('\p{Ccc= :=00000000010}');
Error('\P{Ccc= :=00000000010}');
Expect(1, 1456, '\p{Ccc=+0010}', "");
Expect(0, 1456, '\p{^Ccc=+0010}', "");
Expect(0, 1456, '\P{Ccc=+0010}', "");
Expect(1, 1456, '\P{^Ccc=+0010}', "");
Expect(0, 1455, '\p{Ccc=+0010}', "");
Expect(1, 1455, '\p{^Ccc=+0010}', "");
Expect(1, 1455, '\P{Ccc=+0010}', "");
Expect(0, 1455, '\P{^Ccc=+0010}', "");
Error('\p{Is_Canonical_Combining_Class= _0010:=}');
Error('\P{Is_Canonical_Combining_Class= _0010:=}');
Expect(1, 1456, '\p{Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(0, 1456, '\p{^Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(0, 1456, '\P{Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(1, 1456, '\P{^Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(0, 1455, '\p{Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(1, 1455, '\p{^Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(1, 1455, '\P{Is_Canonical_Combining_Class=+0000001_0}', "");
Expect(0, 1455, '\P{^Is_Canonical_Combining_Class=+0000001_0}', "");
Error('\p{Is_Ccc:   -/a/0 00	0	0010}');
Error('\P{Is_Ccc:   -/a/0 00	0	0010}');
Expect(1, 1456, '\p{Is_Ccc=+0000010}', "");
Expect(0, 1456, '\p{^Is_Ccc=+0000010}', "");
Expect(0, 1456, '\P{Is_Ccc=+0000010}', "");
Expect(1, 1456, '\P{^Is_Ccc=+0000010}', "");
Expect(0, 1455, '\p{Is_Ccc=+0000010}', "");
Expect(1, 1455, '\p{^Is_Ccc=+0000010}', "");
Expect(1, 1455, '\P{Is_Ccc=+0000010}', "");
Expect(0, 1455, '\P{^Is_Ccc=+0000010}', "");
Error('\p{Canonical_Combining_Class=-+00/a/0_0-0091}');
Error('\P{Canonical_Combining_Class=-+00/a/0_0-0091}');
Expect(1, 3158, '\p{Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(0, 3158, '\p{^Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(0, 3158, '\P{Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(1, 3158, '\P{^Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(0, 3157, '\p{Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(1, 3157, '\p{^Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(1, 3157, '\P{Canonical_Combining_Class=+0_0_0_0_091}', "");
Expect(0, 3157, '\P{^Canonical_Combining_Class=+0_0_0_0_091}', "");
Error('\p{Ccc=:=	_91}');
Error('\P{Ccc=:=	_91}');
Expect(1, 3158, '\p{Ccc=00091}', "");
Expect(0, 3158, '\p{^Ccc=00091}', "");
Expect(0, 3158, '\P{Ccc=00091}', "");
Expect(1, 3158, '\P{^Ccc=00091}', "");
Expect(0, 3157, '\p{Ccc=00091}', "");
Expect(1, 3157, '\p{^Ccc=00091}', "");
Expect(1, 3157, '\P{Ccc=00091}', "");
Expect(0, 3157, '\P{^Ccc=00091}', "");
Error('\p{Is_Canonical_Combining_Class=  0	0 0:=00091}');
Error('\P{Is_Canonical_Combining_Class=  0	0 0:=00091}');
Expect(1, 3158, '\p{Is_Canonical_Combining_Class=00091}', "");
Expect(0, 3158, '\p{^Is_Canonical_Combining_Class=00091}', "");
Expect(0, 3158, '\P{Is_Canonical_Combining_Class=00091}', "");
Expect(1, 3158, '\P{^Is_Canonical_Combining_Class=00091}', "");
Expect(0, 3157, '\p{Is_Canonical_Combining_Class=00091}', "");
Expect(1, 3157, '\p{^Is_Canonical_Combining_Class=00091}', "");
Expect(1, 3157, '\P{Is_Canonical_Combining_Class=00091}', "");
Expect(0, 3157, '\P{^Is_Canonical_Combining_Class=00091}', "");
Error('\p{Is_Ccc= +0000/a/91}');
Error('\P{Is_Ccc= +0000/a/91}');
Expect(1, 3158, '\p{Is_Ccc=0000000091}', "");
Expect(0, 3158, '\p{^Is_Ccc=0000000091}', "");
Expect(0, 3158, '\P{Is_Ccc=0000000091}', "");
Expect(1, 3158, '\P{^Is_Ccc=0000000091}', "");
Expect(0, 3157, '\p{Is_Ccc=0000000091}', "");
Expect(1, 3157, '\p{^Is_Ccc=0000000091}', "");
Expect(1, 3157, '\P{Is_Ccc=0000000091}', "");
Expect(0, 3157, '\P{^Is_Ccc=0000000091}', "");
Error('\p{Canonical_Combining_Class=	 00000000107/a/}');
Error('\P{Canonical_Combining_Class=	 00000000107/a/}');
Expect(1, 3659, '\p{Canonical_Combining_Class=+0107}', "");
Expect(0, 3659, '\p{^Canonical_Combining_Class=+0107}', "");
Expect(0, 3659, '\P{Canonical_Combining_Class=+0107}', "");
Expect(1, 3659, '\P{^Canonical_Combining_Class=+0107}', "");
Expect(0, 3655, '\p{Canonical_Combining_Class=+0107}', "");
Expect(1, 3655, '\p{^Canonical_Combining_Class=+0107}', "");
Expect(1, 3655, '\P{Canonical_Combining_Class=+0107}', "");
Expect(0, 3655, '\P{^Canonical_Combining_Class=+0107}', "");
Error('\p{Ccc=--00107/a/}');
Error('\P{Ccc=--00107/a/}');
Expect(1, 3659, '\p{Ccc=+0010_7}', "");
Expect(0, 3659, '\p{^Ccc=+0010_7}', "");
Expect(0, 3659, '\P{Ccc=+0010_7}', "");
Expect(1, 3659, '\P{^Ccc=+0010_7}', "");
Expect(0, 3655, '\p{Ccc=+0010_7}', "");
Expect(1, 3655, '\p{^Ccc=+0010_7}', "");
Expect(1, 3655, '\P{Ccc=+0010_7}', "");
Expect(0, 3655, '\P{^Ccc=+0010_7}', "");
Error('\p{Is_Canonical_Combining_Class= +0-00_0_0	0	107:=}');
Error('\P{Is_Canonical_Combining_Class= +0-00_0_0	0	107:=}');
Expect(1, 3659, '\p{Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(0, 3659, '\p{^Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(0, 3659, '\P{Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(1, 3659, '\P{^Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(0, 3655, '\p{Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(1, 3655, '\p{^Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(1, 3655, '\P{Is_Canonical_Combining_Class=+00_00_00_107}', "");
Expect(0, 3655, '\P{^Is_Canonical_Combining_Class=+00_00_00_107}', "");
Error('\p{Is_Ccc=/a/0000010_7}');
Error('\P{Is_Ccc=/a/0000010_7}');
Expect(1, 3659, '\p{Is_Ccc:   +0000000107}', "");
Expect(0, 3659, '\p{^Is_Ccc:   +0000000107}', "");
Expect(0, 3659, '\P{Is_Ccc:   +0000000107}', "");
Expect(1, 3659, '\P{^Is_Ccc:   +0000000107}', "");
Expect(0, 3655, '\p{Is_Ccc:   +0000000107}', "");
Expect(1, 3655, '\p{^Is_Ccc:   +0000000107}', "");
Expect(1, 3655, '\P{Is_Ccc:   +0000000107}', "");
Expect(0, 3655, '\P{^Is_Ccc:   +0000000107}', "");
Error('\p{Canonical_Combining_Class= 	Attached/a/Above}');
Error('\P{Canonical_Combining_Class= 	Attached/a/Above}');
Expect(1, 7630, '\p{Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7630, '\p{Canonical_Combining_Class=_attached-above}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class=_attached-above}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class=_attached-above}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class=_attached-above}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class=_attached-above}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class=_attached-above}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class=_attached-above}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class=_attached-above}', "");
Error('\p{Ccc:   /a/ ATA}');
Error('\P{Ccc:   /a/ ATA}');
Expect(1, 7630, '\p{Ccc:   ata}', "");
Expect(0, 7630, '\p{^Ccc:   ata}', "");
Expect(0, 7630, '\P{Ccc:   ata}', "");
Expect(1, 7630, '\P{^Ccc:   ata}', "");
Expect(0, 7629, '\p{Ccc:   ata}', "");
Expect(1, 7629, '\p{^Ccc:   ata}', "");
Expect(1, 7629, '\P{Ccc:   ata}', "");
Expect(0, 7629, '\P{^Ccc:   ata}', "");
Expect(1, 7630, '\p{Ccc:   	-ATA}', "");
Expect(0, 7630, '\p{^Ccc:   	-ATA}', "");
Expect(0, 7630, '\P{Ccc:   	-ATA}', "");
Expect(1, 7630, '\P{^Ccc:   	-ATA}', "");
Expect(0, 7629, '\p{Ccc:   	-ATA}', "");
Expect(1, 7629, '\p{^Ccc:   	-ATA}', "");
Expect(1, 7629, '\P{Ccc:   	-ATA}', "");
Expect(0, 7629, '\P{^Ccc:   	-ATA}', "");
Error('\p{Is_Canonical_Combining_Class=_-0214:=}');
Error('\P{Is_Canonical_Combining_Class=_-0214:=}');
Expect(1, 7630, '\p{Is_Canonical_Combining_Class=00021_4}', "");
Expect(0, 7630, '\p{^Is_Canonical_Combining_Class=00021_4}', "");
Expect(0, 7630, '\P{Is_Canonical_Combining_Class=00021_4}', "");
Expect(1, 7630, '\P{^Is_Canonical_Combining_Class=00021_4}', "");
Expect(0, 7629, '\p{Is_Canonical_Combining_Class=00021_4}', "");
Expect(1, 7629, '\p{^Is_Canonical_Combining_Class=00021_4}', "");
Expect(1, 7629, '\P{Is_Canonical_Combining_Class=00021_4}', "");
Expect(0, 7629, '\P{^Is_Canonical_Combining_Class=00021_4}', "");
Error('\p{Is_Ccc= _Attached Above:=}');
Error('\P{Is_Ccc= _Attached Above:=}');
Expect(1, 7630, '\p{Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\p{^Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\P{Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\P{^Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\p{Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\p{^Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\P{Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\P{^Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\p{Is_Ccc= 	Attached_above}', "");
Expect(0, 7630, '\p{^Is_Ccc= 	Attached_above}', "");
Expect(0, 7630, '\P{Is_Ccc= 	Attached_above}', "");
Expect(1, 7630, '\P{^Is_Ccc= 	Attached_above}', "");
Expect(0, 7629, '\p{Is_Ccc= 	Attached_above}', "");
Expect(1, 7629, '\p{^Is_Ccc= 	Attached_above}', "");
Expect(1, 7629, '\P{Is_Ccc= 	Attached_above}', "");
Expect(0, 7629, '\P{^Is_Ccc= 	Attached_above}', "");
Error('\p{Canonical_Combining_Class=	0:=0-0	0 0_0_0 0012}');
Error('\P{Canonical_Combining_Class=	0:=0-0	0 0_0_0 0012}');
Expect(1, 1458, '\p{Canonical_Combining_Class=00000012}', "");
Expect(0, 1458, '\p{^Canonical_Combining_Class=00000012}', "");
Expect(0, 1458, '\P{Canonical_Combining_Class=00000012}', "");
Expect(1, 1458, '\P{^Canonical_Combining_Class=00000012}', "");
Expect(0, 1457, '\p{Canonical_Combining_Class=00000012}', "");
Expect(1, 1457, '\p{^Canonical_Combining_Class=00000012}', "");
Expect(1, 1457, '\P{Canonical_Combining_Class=00000012}', "");
Expect(0, 1457, '\P{^Canonical_Combining_Class=00000012}', "");
Error('\p{Ccc=-/a/000000012}');
Error('\P{Ccc=-/a/000000012}');
Expect(1, 1458, '\p{Ccc=+0_0_0_12}', "");
Expect(0, 1458, '\p{^Ccc=+0_0_0_12}', "");
Expect(0, 1458, '\P{Ccc=+0_0_0_12}', "");
Expect(1, 1458, '\P{^Ccc=+0_0_0_12}', "");
Expect(0, 1457, '\p{Ccc=+0_0_0_12}', "");
Expect(1, 1457, '\p{^Ccc=+0_0_0_12}', "");
Expect(1, 1457, '\P{Ccc=+0_0_0_12}', "");
Expect(0, 1457, '\P{^Ccc=+0_0_0_12}', "");
Error('\p{Is_Canonical_Combining_Class=+0000000012:=}');
Error('\P{Is_Canonical_Combining_Class=+0000000012:=}');
Expect(1, 1458, '\p{Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(0, 1458, '\p{^Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(0, 1458, '\P{Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(1, 1458, '\P{^Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(0, 1457, '\p{Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(1, 1457, '\p{^Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(1, 1457, '\P{Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Expect(0, 1457, '\P{^Is_Canonical_Combining_Class=0_0_0_0_12}', "");
Error('\p{Is_Ccc= 0000012:=}');
Error('\P{Is_Ccc= 0000012:=}');
Expect(1, 1458, '\p{Is_Ccc=00_01_2}', "");
Expect(0, 1458, '\p{^Is_Ccc=00_01_2}', "");
Expect(0, 1458, '\P{Is_Ccc=00_01_2}', "");
Expect(1, 1458, '\P{^Is_Ccc=00_01_2}', "");
Expect(0, 1457, '\p{Is_Ccc=00_01_2}', "");
Expect(1, 1457, '\p{^Is_Ccc=00_01_2}', "");
Expect(1, 1457, '\P{Is_Ccc=00_01_2}', "");
Expect(0, 1457, '\P{^Is_Ccc=00_01_2}', "");
Error('\p{Canonical_Combining_Class=-/a/19}');
Error('\P{Canonical_Combining_Class=-/a/19}');
Expect(1, 1466, '\p{Canonical_Combining_Class=000000001_9}', "");
Expect(0, 1466, '\p{^Canonical_Combining_Class=000000001_9}', "");
Expect(0, 1466, '\P{Canonical_Combining_Class=000000001_9}', "");
Expect(1, 1466, '\P{^Canonical_Combining_Class=000000001_9}', "");
Expect(0, 1464, '\p{Canonical_Combining_Class=000000001_9}', "");
Expect(1, 1464, '\p{^Canonical_Combining_Class=000000001_9}', "");
Expect(1, 1464, '\P{Canonical_Combining_Class=000000001_9}', "");
Expect(0, 1464, '\P{^Canonical_Combining_Class=000000001_9}', "");
Error('\p{Ccc=0000000019/a/}');
Error('\P{Ccc=0000000019/a/}');
Expect(1, 1466, '\p{Ccc=+000_000_000_19}', "");
Expect(0, 1466, '\p{^Ccc=+000_000_000_19}', "");
Expect(0, 1466, '\P{Ccc=+000_000_000_19}', "");
Expect(1, 1466, '\P{^Ccc=+000_000_000_19}', "");
Expect(0, 1464, '\p{Ccc=+000_000_000_19}', "");
Expect(1, 1464, '\p{^Ccc=+000_000_000_19}', "");
Expect(1, 1464, '\P{Ccc=+000_000_000_19}', "");
Expect(0, 1464, '\P{^Ccc=+000_000_000_19}', "");
Error('\p{Is_Canonical_Combining_Class=/a/-_00019}');
Error('\P{Is_Canonical_Combining_Class=/a/-_00019}');
Expect(1, 1466, '\p{Is_Canonical_Combining_Class=+0019}', "");
Expect(0, 1466, '\p{^Is_Canonical_Combining_Class=+0019}', "");
Expect(0, 1466, '\P{Is_Canonical_Combining_Class=+0019}', "");
Expect(1, 1466, '\P{^Is_Canonical_Combining_Class=+0019}', "");
Expect(0, 1464, '\p{Is_Canonical_Combining_Class=+0019}', "");
Expect(1, 1464, '\p{^Is_Canonical_Combining_Class=+0019}', "");
Expect(1, 1464, '\P{Is_Canonical_Combining_Class=+0019}', "");
Expect(0, 1464, '\P{^Is_Canonical_Combining_Class=+0019}', "");
Error('\p{Is_Ccc= 00019:=}');
Error('\P{Is_Ccc= 00019:=}');
Expect(1, 1466, '\p{Is_Ccc=0_0_0_0_019}', "");
Expect(0, 1466, '\p{^Is_Ccc=0_0_0_0_019}', "");
Expect(0, 1466, '\P{Is_Ccc=0_0_0_0_019}', "");
Expect(1, 1466, '\P{^Is_Ccc=0_0_0_0_019}', "");
Expect(0, 1464, '\p{Is_Ccc=0_0_0_0_019}', "");
Expect(1, 1464, '\p{^Is_Ccc=0_0_0_0_019}', "");
Expect(1, 1464, '\P{Is_Ccc=0_0_0_0_019}', "");
Expect(0, 1464, '\P{^Is_Ccc=0_0_0_0_019}', "");
Error('\p{Canonical_Combining_Class: :=030}');
Error('\P{Canonical_Combining_Class: :=030}');
Expect(1, 1560, '\p{Canonical_Combining_Class=+003_0}', "");
Expect(0, 1560, '\p{^Canonical_Combining_Class=+003_0}', "");
Expect(0, 1560, '\P{Canonical_Combining_Class=+003_0}', "");
Expect(1, 1560, '\P{^Canonical_Combining_Class=+003_0}', "");
Expect(0, 1559, '\p{Canonical_Combining_Class=+003_0}', "");
Expect(1, 1559, '\p{^Canonical_Combining_Class=+003_0}', "");
Expect(1, 1559, '\P{Canonical_Combining_Class=+003_0}', "");
Expect(0, 1559, '\P{^Canonical_Combining_Class=+003_0}', "");
Error('\p{Ccc: :=_	000000030}');
Error('\P{Ccc: :=_	000000030}');
Expect(1, 1560, '\p{Ccc=0_0_0_0_0_0_0030}', "");
Expect(0, 1560, '\p{^Ccc=0_0_0_0_0_0_0030}', "");
Expect(0, 1560, '\P{Ccc=0_0_0_0_0_0_0030}', "");
Expect(1, 1560, '\P{^Ccc=0_0_0_0_0_0_0030}', "");
Expect(0, 1559, '\p{Ccc=0_0_0_0_0_0_0030}', "");
Expect(1, 1559, '\p{^Ccc=0_0_0_0_0_0_0030}', "");
Expect(1, 1559, '\P{Ccc=0_0_0_0_0_0_0030}', "");
Expect(0, 1559, '\P{^Ccc=0_0_0_0_0_0_0030}', "");
Error('\p{Is_Canonical_Combining_Class=__+0000000030/a/}');
Error('\P{Is_Canonical_Combining_Class=__+0000000030/a/}');
Expect(1, 1560, '\p{Is_Canonical_Combining_Class=00000000030}', "");
Expect(0, 1560, '\p{^Is_Canonical_Combining_Class=00000000030}', "");
Expect(0, 1560, '\P{Is_Canonical_Combining_Class=00000000030}', "");
Expect(1, 1560, '\P{^Is_Canonical_Combining_Class=00000000030}', "");
Expect(0, 1559, '\p{Is_Canonical_Combining_Class=00000000030}', "");
Expect(1, 1559, '\p{^Is_Canonical_Combining_Class=00000000030}', "");
Expect(1, 1559, '\P{Is_Canonical_Combining_Class=00000000030}', "");
Expect(0, 1559, '\P{^Is_Canonical_Combining_Class=00000000030}', "");
Error('\p{Is_Ccc=/a/ -0030}');
Error('\P{Is_Ccc=/a/ -0030}');
Expect(1, 1560, '\p{Is_Ccc=+030}', "");
Expect(0, 1560, '\p{^Is_Ccc=+030}', "");
Expect(0, 1560, '\P{Is_Ccc=+030}', "");
Expect(1, 1560, '\P{^Is_Ccc=+030}', "");
Expect(0, 1559, '\p{Is_Ccc=+030}', "");
Expect(1, 1559, '\p{^Is_Ccc=+030}', "");
Expect(1, 1559, '\P{Is_Ccc=+030}', "");
Expect(0, 1559, '\P{^Is_Ccc=+030}', "");
Error('\p{Canonical_Combining_Class=:= _00_00-00_00	025}');
Error('\P{Canonical_Combining_Class=:= _00_00-00_00	025}');
Expect(1, 1474, '\p{Canonical_Combining_Class=025}', "");
Expect(0, 1474, '\p{^Canonical_Combining_Class=025}', "");
Expect(0, 1474, '\P{Canonical_Combining_Class=025}', "");
Expect(1, 1474, '\P{^Canonical_Combining_Class=025}', "");
Expect(0, 1473, '\p{Canonical_Combining_Class=025}', "");
Expect(1, 1473, '\p{^Canonical_Combining_Class=025}', "");
Expect(1, 1473, '\P{Canonical_Combining_Class=025}', "");
Expect(0, 1473, '\P{^Canonical_Combining_Class=025}', "");
Error('\p{Ccc=_:=0	0_0 0	0	25}');
Error('\P{Ccc=_:=0	0_0 0	0	25}');
Expect(1, 1474, '\p{Ccc=0025}', "");
Expect(0, 1474, '\p{^Ccc=0025}', "");
Expect(0, 1474, '\P{Ccc=0025}', "");
Expect(1, 1474, '\P{^Ccc=0025}', "");
Expect(0, 1473, '\p{Ccc=0025}', "");
Expect(1, 1473, '\p{^Ccc=0025}', "");
Expect(1, 1473, '\P{Ccc=0025}', "");
Expect(0, 1473, '\P{^Ccc=0025}', "");
Error('\p{Is_Canonical_Combining_Class=/a/0000025}');
Error('\P{Is_Canonical_Combining_Class=/a/0000025}');
Expect(1, 1474, '\p{Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(0, 1474, '\p{^Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(0, 1474, '\P{Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(1, 1474, '\P{^Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(0, 1473, '\p{Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(1, 1473, '\p{^Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(1, 1473, '\P{Is_Canonical_Combining_Class=00_00_02_5}', "");
Expect(0, 1473, '\P{^Is_Canonical_Combining_Class=00_00_02_5}', "");
Error('\p{Is_Ccc=_-+00025/a/}');
Error('\P{Is_Ccc=_-+00025/a/}');
Expect(1, 1474, '\p{Is_Ccc=+000002_5}', "");
Expect(0, 1474, '\p{^Is_Ccc=+000002_5}', "");
Expect(0, 1474, '\P{Is_Ccc=+000002_5}', "");
Expect(1, 1474, '\P{^Is_Ccc=+000002_5}', "");
Expect(0, 1473, '\p{Is_Ccc=+000002_5}', "");
Expect(1, 1473, '\p{^Is_Ccc=+000002_5}', "");
Expect(1, 1473, '\P{Is_Ccc=+000002_5}', "");
Expect(0, 1473, '\P{^Is_Ccc=+000002_5}', "");
Error('\p{Canonical_Combining_Class= :=02 8}');
Error('\P{Canonical_Combining_Class= :=02 8}');
Expect(1, 1612, '\p{Canonical_Combining_Class=+00_00_00_028}', "");
Expect(0, 1612, '\p{^Canonical_Combining_Class=+00_00_00_028}', "");
Expect(0, 1612, '\P{Canonical_Combining_Class=+00_00_00_028}', "");
Expect(1, 1612, '\P{^Canonical_Combining_Class=+00_00_00_028}', "");
Expect(0, 1611, '\p{Canonical_Combining_Class=+00_00_00_028}', "");
Expect(1, 1611, '\p{^Canonical_Combining_Class=+00_00_00_028}', "");
Expect(1, 1611, '\P{Canonical_Combining_Class=+00_00_00_028}', "");
Expect(0, 1611, '\P{^Canonical_Combining_Class=+00_00_00_028}', "");
Error('\p{Ccc=0000000002	8:=}');
Error('\P{Ccc=0000000002	8:=}');
Expect(1, 1612, '\p{Ccc=02_8}', "");
Expect(0, 1612, '\p{^Ccc=02_8}', "");
Expect(0, 1612, '\P{Ccc=02_8}', "");
Expect(1, 1612, '\P{^Ccc=02_8}', "");
Expect(0, 1611, '\p{Ccc=02_8}', "");
Expect(1, 1611, '\p{^Ccc=02_8}', "");
Expect(1, 1611, '\P{Ccc=02_8}', "");
Expect(0, 1611, '\P{^Ccc=02_8}', "");
Error('\p{Is_Canonical_Combining_Class=	 0 0:=28}');
Error('\P{Is_Canonical_Combining_Class=	 0 0:=28}');
Expect(1, 1612, '\p{Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(0, 1612, '\p{^Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(0, 1612, '\P{Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(1, 1612, '\P{^Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(0, 1611, '\p{Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(1, 1611, '\p{^Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(1, 1611, '\P{Is_Canonical_Combining_Class=00_00_00_28}', "");
Expect(0, 1611, '\P{^Is_Canonical_Combining_Class=00_00_00_28}', "");
Error('\p{Is_Ccc=-_0002:=8}');
Error('\P{Is_Ccc=-_0002:=8}');
Expect(1, 1612, '\p{Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(0, 1612, '\p{^Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(0, 1612, '\P{Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(1, 1612, '\P{^Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(0, 1611, '\p{Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(1, 1611, '\p{^Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(1, 1611, '\P{Is_Ccc=+0_0_0_0_0_0_28}', "");
Expect(0, 1611, '\P{^Is_Ccc=+0_0_0_0_0_0_28}', "");
Error('\p{Canonical_Combining_Class= -000130:=}');
Error('\P{Canonical_Combining_Class= -000130:=}');
Expect(1, 3954, '\p{Canonical_Combining_Class:000000130}', "");
Expect(0, 3954, '\p{^Canonical_Combining_Class:000000130}', "");
Expect(0, 3954, '\P{Canonical_Combining_Class:000000130}', "");
Expect(1, 3954, '\P{^Canonical_Combining_Class:000000130}', "");
Expect(0, 3953, '\p{Canonical_Combining_Class:000000130}', "");
Expect(1, 3953, '\p{^Canonical_Combining_Class:000000130}', "");
Expect(1, 3953, '\P{Canonical_Combining_Class:000000130}', "");
Expect(0, 3953, '\P{^Canonical_Combining_Class:000000130}', "");
Error('\p{Ccc= 	+0000130:=}');
Error('\P{Ccc= 	+0000130:=}');
Expect(1, 3954, '\p{Ccc=0000000130}', "");
Expect(0, 3954, '\p{^Ccc=0000000130}', "");
Expect(0, 3954, '\P{Ccc=0000000130}', "");
Expect(1, 3954, '\P{^Ccc=0000000130}', "");
Expect(0, 3953, '\p{Ccc=0000000130}', "");
Expect(1, 3953, '\p{^Ccc=0000000130}', "");
Expect(1, 3953, '\P{Ccc=0000000130}', "");
Expect(0, 3953, '\P{^Ccc=0000000130}', "");
Error('\p{Is_Canonical_Combining_Class=	000130:=}');
Error('\P{Is_Canonical_Combining_Class=	000130:=}');
Expect(1, 3954, '\p{Is_Canonical_Combining_Class=00130}', "");
Expect(0, 3954, '\p{^Is_Canonical_Combining_Class=00130}', "");
Expect(0, 3954, '\P{Is_Canonical_Combining_Class=00130}', "");
Expect(1, 3954, '\P{^Is_Canonical_Combining_Class=00130}', "");
Expect(0, 3953, '\p{Is_Canonical_Combining_Class=00130}', "");
Expect(1, 3953, '\p{^Is_Canonical_Combining_Class=00130}', "");
Expect(1, 3953, '\P{Is_Canonical_Combining_Class=00130}', "");
Expect(0, 3953, '\P{^Is_Canonical_Combining_Class=00130}', "");
Error('\p{Is_Ccc=/a/-	00000000130}');
Error('\P{Is_Ccc=/a/-	00000000130}');
Expect(1, 3954, '\p{Is_Ccc=0_0_0_130}', "");
Expect(0, 3954, '\p{^Is_Ccc=0_0_0_130}', "");
Expect(0, 3954, '\P{Is_Ccc=0_0_0_130}', "");
Expect(1, 3954, '\P{^Is_Ccc=0_0_0_130}', "");
Expect(0, 3953, '\p{Is_Ccc=0_0_0_130}', "");
Expect(1, 3953, '\p{^Is_Ccc=0_0_0_130}', "");
Expect(1, 3953, '\P{Is_Ccc=0_0_0_130}', "");
Expect(0, 3953, '\P{^Is_Ccc=0_0_0_130}', "");
Error('\p{Canonical_Combining_Class=/a/ 0122}');
Error('\P{Canonical_Combining_Class=/a/ 0122}');
Expect(1, 3787, '\p{Canonical_Combining_Class=00000000012_2}', "");
Expect(0, 3787, '\p{^Canonical_Combining_Class=00000000012_2}', "");
Expect(0, 3787, '\P{Canonical_Combining_Class=00000000012_2}', "");
Expect(1, 3787, '\P{^Canonical_Combining_Class=00000000012_2}', "");
Expect(0, 3783, '\p{Canonical_Combining_Class=00000000012_2}', "");
Expect(1, 3783, '\p{^Canonical_Combining_Class=00000000012_2}', "");
Expect(1, 3783, '\P{Canonical_Combining_Class=00000000012_2}', "");
Expect(0, 3783, '\P{^Canonical_Combining_Class=00000000012_2}', "");
Error('\p{Ccc=-	000/a/012-2}');
Error('\P{Ccc=-	000/a/012-2}');
Expect(1, 3787, '\p{Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(0, 3787, '\p{^Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(0, 3787, '\P{Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(1, 3787, '\P{^Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(0, 3783, '\p{Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(1, 3783, '\p{^Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(1, 3783, '\P{Ccc:	0_0_0_0_0_0_0_122}', "");
Expect(0, 3783, '\P{^Ccc:	0_0_0_0_0_0_0_122}', "");
Error('\p{Is_Canonical_Combining_Class=:= 	+000000122}');
Error('\P{Is_Canonical_Combining_Class=:= 	+000000122}');
Expect(1, 3787, '\p{Is_Canonical_Combining_Class=00122}', "");
Expect(0, 3787, '\p{^Is_Canonical_Combining_Class=00122}', "");
Expect(0, 3787, '\P{Is_Canonical_Combining_Class=00122}', "");
Expect(1, 3787, '\P{^Is_Canonical_Combining_Class=00122}', "");
Expect(0, 3783, '\p{Is_Canonical_Combining_Class=00122}', "");
Expect(1, 3783, '\p{^Is_Canonical_Combining_Class=00122}', "");
Expect(1, 3783, '\P{Is_Canonical_Combining_Class=00122}', "");
Expect(0, 3783, '\P{^Is_Canonical_Combining_Class=00122}', "");
Error('\p{Is_Ccc= 000_001:=22}');
Error('\P{Is_Ccc= 000_001:=22}');
Expect(1, 3787, '\p{Is_Ccc=00122}', "");
Expect(0, 3787, '\p{^Is_Ccc=00122}', "");
Expect(0, 3787, '\P{Is_Ccc=00122}', "");
Expect(1, 3787, '\P{^Is_Ccc=00122}', "");
Expect(0, 3783, '\p{Is_Ccc=00122}', "");
Expect(1, 3783, '\p{^Is_Ccc=00122}', "");
Expect(1, 3783, '\P{Is_Ccc=00122}', "");
Expect(0, 3783, '\P{^Is_Ccc=00122}', "");
Error('\p{Canonical_Combining_Class= :=2	2}');
Error('\P{Canonical_Combining_Class= :=2	2}');
Expect(1, 1469, '\p{Canonical_Combining_Class:	000000022}', "");
Expect(0, 1469, '\p{^Canonical_Combining_Class:	000000022}', "");
Expect(0, 1469, '\P{Canonical_Combining_Class:	000000022}', "");
Expect(1, 1469, '\P{^Canonical_Combining_Class:	000000022}', "");
Expect(0, 1468, '\p{Canonical_Combining_Class:	000000022}', "");
Expect(1, 1468, '\p{^Canonical_Combining_Class:	000000022}', "");
Expect(1, 1468, '\P{Canonical_Combining_Class:	000000022}', "");
Expect(0, 1468, '\P{^Canonical_Combining_Class:	000000022}', "");
Error('\p{Ccc=:=	-022}');
Error('\P{Ccc=:=	-022}');
Expect(1, 1469, '\p{Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(0, 1469, '\p{^Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(0, 1469, '\P{Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(1, 1469, '\P{^Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(0, 1468, '\p{Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(1, 1468, '\p{^Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(1, 1468, '\P{Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Expect(0, 1468, '\P{^Ccc=0_0_0_0_0_0_0_0_0_22}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_ 22}');
Error('\P{Is_Canonical_Combining_Class=/a/_ 22}');
Expect(1, 1469, '\p{Is_Canonical_Combining_Class=00_00_22}', "");
Expect(0, 1469, '\p{^Is_Canonical_Combining_Class=00_00_22}', "");
Expect(0, 1469, '\P{Is_Canonical_Combining_Class=00_00_22}', "");
Expect(1, 1469, '\P{^Is_Canonical_Combining_Class=00_00_22}', "");
Expect(0, 1468, '\p{Is_Canonical_Combining_Class=00_00_22}', "");
Expect(1, 1468, '\p{^Is_Canonical_Combining_Class=00_00_22}', "");
Expect(1, 1468, '\P{Is_Canonical_Combining_Class=00_00_22}', "");
Expect(0, 1468, '\P{^Is_Canonical_Combining_Class=00_00_22}', "");
Error('\p{Is_Ccc=	:=000000022}');
Error('\P{Is_Ccc=	:=000000022}');
Expect(1, 1469, '\p{Is_Ccc=0_0_0_22}', "");
Expect(0, 1469, '\p{^Is_Ccc=0_0_0_22}', "");
Expect(0, 1469, '\P{Is_Ccc=0_0_0_22}', "");
Expect(1, 1469, '\P{^Is_Ccc=0_0_0_22}', "");
Expect(0, 1468, '\p{Is_Ccc=0_0_0_22}', "");
Expect(1, 1468, '\p{^Is_Ccc=0_0_0_22}', "");
Expect(1, 1468, '\P{Is_Ccc=0_0_0_22}', "");
Expect(0, 1468, '\P{^Is_Ccc=0_0_0_22}', "");
Error('\p{Canonical_Combining_Class= :=0013}');
Error('\P{Canonical_Combining_Class= :=0013}');
Expect(1, 1459, '\p{Canonical_Combining_Class=0013}', "");
Expect(0, 1459, '\p{^Canonical_Combining_Class=0013}', "");
Expect(0, 1459, '\P{Canonical_Combining_Class=0013}', "");
Expect(1, 1459, '\P{^Canonical_Combining_Class=0013}', "");
Expect(0, 1458, '\p{Canonical_Combining_Class=0013}', "");
Expect(1, 1458, '\p{^Canonical_Combining_Class=0013}', "");
Expect(1, 1458, '\P{Canonical_Combining_Class=0013}', "");
Expect(0, 1458, '\P{^Canonical_Combining_Class=0013}', "");
Error('\p{Ccc=_:=0013}');
Error('\P{Ccc=_:=0013}');
Expect(1, 1459, '\p{Ccc=+00000001_3}', "");
Expect(0, 1459, '\p{^Ccc=+00000001_3}', "");
Expect(0, 1459, '\P{Ccc=+00000001_3}', "");
Expect(1, 1459, '\P{^Ccc=+00000001_3}', "");
Expect(0, 1458, '\p{Ccc=+00000001_3}', "");
Expect(1, 1458, '\p{^Ccc=+00000001_3}', "");
Expect(1, 1458, '\P{Ccc=+00000001_3}', "");
Expect(0, 1458, '\P{^Ccc=+00000001_3}', "");
Error('\p{Is_Canonical_Combining_Class=:=		0013}');
Error('\P{Is_Canonical_Combining_Class=:=		0013}');
Expect(1, 1459, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(0, 1459, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(0, 1459, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(1, 1459, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(0, 1458, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(1, 1458, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(1, 1458, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Expect(0, 1458, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0013}', "");
Error('\p{Is_Ccc=/a/- 000013}');
Error('\P{Is_Ccc=/a/- 000013}');
Expect(1, 1459, '\p{Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(0, 1459, '\p{^Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(0, 1459, '\P{Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(1, 1459, '\P{^Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(0, 1458, '\p{Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(1, 1458, '\p{^Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(1, 1458, '\P{Is_Ccc: 0_0_0_0_0_00013}', "");
Expect(0, 1458, '\P{^Is_Ccc: 0_0_0_0_0_00013}', "");
Error('\p{Canonical_Combining_Class=	+0000036:=}');
Error('\P{Canonical_Combining_Class=	+0000036:=}');
Expect(1, 1809, '\p{Canonical_Combining_Class:   0036}', "");
Expect(0, 1809, '\p{^Canonical_Combining_Class:   0036}', "");
Expect(0, 1809, '\P{Canonical_Combining_Class:   0036}', "");
Expect(1, 1809, '\P{^Canonical_Combining_Class:   0036}', "");
Expect(0, 1808, '\p{Canonical_Combining_Class:   0036}', "");
Expect(1, 1808, '\p{^Canonical_Combining_Class:   0036}', "");
Expect(1, 1808, '\P{Canonical_Combining_Class:   0036}', "");
Expect(0, 1808, '\P{^Canonical_Combining_Class:   0036}', "");
Error('\p{Ccc=:=__00000003 6}');
Error('\P{Ccc=:=__00000003 6}');
Expect(1, 1809, '\p{Ccc=3_6}', "");
Expect(0, 1809, '\p{^Ccc=3_6}', "");
Expect(0, 1809, '\P{Ccc=3_6}', "");
Expect(1, 1809, '\P{^Ccc=3_6}', "");
Expect(0, 1808, '\p{Ccc=3_6}', "");
Expect(1, 1808, '\p{^Ccc=3_6}', "");
Expect(1, 1808, '\P{Ccc=3_6}', "");
Expect(0, 1808, '\P{^Ccc=3_6}', "");
Error('\p{Is_Canonical_Combining_Class= _000000036/a/}');
Error('\P{Is_Canonical_Combining_Class= _000000036/a/}');
Expect(1, 1809, '\p{Is_Canonical_Combining_Class=0036}', "");
Expect(0, 1809, '\p{^Is_Canonical_Combining_Class=0036}', "");
Expect(0, 1809, '\P{Is_Canonical_Combining_Class=0036}', "");
Expect(1, 1809, '\P{^Is_Canonical_Combining_Class=0036}', "");
Expect(0, 1808, '\p{Is_Canonical_Combining_Class=0036}', "");
Expect(1, 1808, '\p{^Is_Canonical_Combining_Class=0036}', "");
Expect(1, 1808, '\P{Is_Canonical_Combining_Class=0036}', "");
Expect(0, 1808, '\P{^Is_Canonical_Combining_Class=0036}', "");
Error('\p{Is_Ccc=+00 00	00	00-36/a/}');
Error('\P{Is_Ccc=+00 00	00	00-36/a/}');
Expect(1, 1809, '\p{Is_Ccc=+00000036}', "");
Expect(0, 1809, '\p{^Is_Ccc=+00000036}', "");
Expect(0, 1809, '\P{Is_Ccc=+00000036}', "");
Expect(1, 1809, '\P{^Is_Ccc=+00000036}', "");
Expect(0, 1808, '\p{Is_Ccc=+00000036}', "");
Expect(1, 1808, '\p{^Is_Ccc=+00000036}', "");
Expect(1, 1808, '\P{Is_Ccc=+00000036}', "");
Expect(0, 1808, '\P{^Is_Ccc=+00000036}', "");
Error('\p{Canonical_Combining_Class=-:=0000_0003_4}');
Error('\P{Canonical_Combining_Class=-:=0000_0003_4}');
Expect(1, 1618, '\p{Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(0, 1618, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(0, 1618, '\P{Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(1, 1618, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(0, 1617, '\p{Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(1, 1617, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(1, 1617, '\P{Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Expect(0, 1617, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_34}', "");
Error('\p{Ccc=- 034:=}');
Error('\P{Ccc=- 034:=}');
Expect(1, 1618, '\p{Ccc=00034}', "");
Expect(0, 1618, '\p{^Ccc=00034}', "");
Expect(0, 1618, '\P{Ccc=00034}', "");
Expect(1, 1618, '\P{^Ccc=00034}', "");
Expect(0, 1617, '\p{Ccc=00034}', "");
Expect(1, 1617, '\p{^Ccc=00034}', "");
Expect(1, 1617, '\P{Ccc=00034}', "");
Expect(0, 1617, '\P{^Ccc=00034}', "");
Error('\p{Is_Canonical_Combining_Class=-:=0	0	0_0 0-0 0-34}');
Error('\P{Is_Canonical_Combining_Class=-:=0	0	0_0 0-0 0-34}');
Expect(1, 1618, '\p{Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1618, '\p{^Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1618, '\P{Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1618, '\P{^Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1617, '\p{Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1617, '\p{^Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1617, '\P{Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1617, '\P{^Is_Canonical_Combining_Class=0_0_0_0_034}', "");
Error('\p{Is_Ccc=:=--000000034}');
Error('\P{Is_Ccc=:=--000000034}');
Expect(1, 1618, '\p{Is_Ccc=0_0_0_34}', "");
Expect(0, 1618, '\p{^Is_Ccc=0_0_0_34}', "");
Expect(0, 1618, '\P{Is_Ccc=0_0_0_34}', "");
Expect(1, 1618, '\P{^Is_Ccc=0_0_0_34}', "");
Expect(0, 1617, '\p{Is_Ccc=0_0_0_34}', "");
Expect(1, 1617, '\p{^Is_Ccc=0_0_0_34}', "");
Expect(1, 1617, '\P{Is_Ccc=0_0_0_34}', "");
Expect(0, 1617, '\P{^Is_Ccc=0_0_0_34}', "");
Error('\p{Canonical_Combining_Class=:=_132}');
Error('\P{Canonical_Combining_Class=:=_132}');
Expect(1, 3956, '\p{Canonical_Combining_Class=+00_01_32}', "");
Expect(0, 3956, '\p{^Canonical_Combining_Class=+00_01_32}', "");
Expect(0, 3956, '\P{Canonical_Combining_Class=+00_01_32}', "");
Expect(1, 3956, '\P{^Canonical_Combining_Class=+00_01_32}', "");
Expect(0, 3955, '\p{Canonical_Combining_Class=+00_01_32}', "");
Expect(1, 3955, '\p{^Canonical_Combining_Class=+00_01_32}', "");
Expect(1, 3955, '\P{Canonical_Combining_Class=+00_01_32}', "");
Expect(0, 3955, '\P{^Canonical_Combining_Class=+00_01_32}', "");
Error('\p{Ccc=:=_13-2}');
Error('\P{Ccc=:=_13-2}');
Expect(1, 3956, '\p{Ccc:   000000132}', "");
Expect(0, 3956, '\p{^Ccc:   000000132}', "");
Expect(0, 3956, '\P{Ccc:   000000132}', "");
Expect(1, 3956, '\P{^Ccc:   000000132}', "");
Expect(0, 3955, '\p{Ccc:   000000132}', "");
Expect(1, 3955, '\p{^Ccc:   000000132}', "");
Expect(1, 3955, '\P{Ccc:   000000132}', "");
Expect(0, 3955, '\P{^Ccc:   000000132}', "");
Error('\p{Is_Canonical_Combining_Class: /a/	+132}');
Error('\P{Is_Canonical_Combining_Class: /a/	+132}');
Expect(1, 3956, '\p{Is_Canonical_Combining_Class=00013_2}', "");
Expect(0, 3956, '\p{^Is_Canonical_Combining_Class=00013_2}', "");
Expect(0, 3956, '\P{Is_Canonical_Combining_Class=00013_2}', "");
Expect(1, 3956, '\P{^Is_Canonical_Combining_Class=00013_2}', "");
Expect(0, 3955, '\p{Is_Canonical_Combining_Class=00013_2}', "");
Expect(1, 3955, '\p{^Is_Canonical_Combining_Class=00013_2}', "");
Expect(1, 3955, '\P{Is_Canonical_Combining_Class=00013_2}', "");
Expect(0, 3955, '\P{^Is_Canonical_Combining_Class=00013_2}', "");
Error('\p{Is_Ccc=	+000 000_013/a/2}');
Error('\P{Is_Ccc=	+000 000_013/a/2}');
Expect(1, 3956, '\p{Is_Ccc=000000132}', "");
Expect(0, 3956, '\p{^Is_Ccc=000000132}', "");
Expect(0, 3956, '\P{Is_Ccc=000000132}', "");
Expect(1, 3956, '\P{^Is_Ccc=000000132}', "");
Expect(0, 3955, '\p{Is_Ccc=000000132}', "");
Expect(1, 3955, '\p{^Is_Ccc=000000132}', "");
Expect(1, 3955, '\P{Is_Ccc=000000132}', "");
Expect(0, 3955, '\P{^Is_Ccc=000000132}', "");
Error('\p{Bidi_Class= :=SEGMENT separator}');
Error('\P{Bidi_Class= :=SEGMENT separator}');
Expect(1, 9, '\p{Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Bidi_Class=	segment_Separator}', "");
Expect(0, 9, '\p{^Bidi_Class=	segment_Separator}', "");
Expect(0, 9, '\P{Bidi_Class=	segment_Separator}', "");
Expect(1, 9, '\P{^Bidi_Class=	segment_Separator}', "");
Expect(0, 8, '\p{Bidi_Class=	segment_Separator}', "");
Expect(1, 8, '\p{^Bidi_Class=	segment_Separator}', "");
Expect(1, 8, '\P{Bidi_Class=	segment_Separator}', "");
Expect(0, 8, '\P{^Bidi_Class=	segment_Separator}', "");
Error('\p{Bc=/a/ S}');
Error('\P{Bc=/a/ S}');
Expect(1, 9, '\p{Bc:s}', "");
Expect(0, 9, '\p{^Bc:s}', "");
Expect(0, 9, '\P{Bc:s}', "");
Expect(1, 9, '\P{^Bc:s}', "");
Expect(0, 8, '\p{Bc:s}', "");
Expect(1, 8, '\p{^Bc:s}', "");
Expect(1, 8, '\P{Bc:s}', "");
Expect(0, 8, '\P{^Bc:s}', "");
Expect(1, 9, '\p{Bc=_s}', "");
Expect(0, 9, '\p{^Bc=_s}', "");
Expect(0, 9, '\P{Bc=_s}', "");
Expect(1, 9, '\P{^Bc=_s}', "");
Expect(0, 8, '\p{Bc=_s}', "");
Expect(1, 8, '\p{^Bc=_s}', "");
Expect(1, 8, '\P{Bc=_s}', "");
Expect(0, 8, '\P{^Bc=_s}', "");
Error('\p{Is_Bidi_Class= _Segment	Separator:=}');
Error('\P{Is_Bidi_Class= _Segment	Separator:=}');
Expect(1, 9, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(0, 9, '\P{Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(0, 8, '\p{Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(1, 8, '\P{Is_Bidi_Class=_ SEGMENT	Separator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class=_ SEGMENT	Separator}', "");
Error('\p{Is_Bc=:= -S}');
Error('\P{Is_Bc=:= -S}');
Expect(1, 9, '\p{Is_Bc=s}', "");
Expect(0, 9, '\p{^Is_Bc=s}', "");
Expect(0, 9, '\P{Is_Bc=s}', "");
Expect(1, 9, '\P{^Is_Bc=s}', "");
Expect(0, 8, '\p{Is_Bc=s}', "");
Expect(1, 8, '\p{^Is_Bc=s}', "");
Expect(1, 8, '\P{Is_Bc=s}', "");
Expect(0, 8, '\P{^Is_Bc=s}', "");
Expect(1, 9, '\p{Is_Bc= _S}', "");
Expect(0, 9, '\p{^Is_Bc= _S}', "");
Expect(0, 9, '\P{Is_Bc= _S}', "");
Expect(1, 9, '\P{^Is_Bc= _S}', "");
Expect(0, 8, '\p{Is_Bc= _S}', "");
Expect(1, 8, '\p{^Is_Bc= _S}', "");
Expect(1, 8, '\P{Is_Bc= _S}', "");
Expect(0, 8, '\P{^Is_Bc= _S}', "");
Error('\p{Bidi_Class=_Right-To LEFTOVERRIDE:=}');
Error('\P{Bidi_Class=_Right-To LEFTOVERRIDE:=}');
Expect(1, 8238, '\p{Bidi_Class:	righttoleftoverride}', "");
Expect(0, 8238, '\p{^Bidi_Class:	righttoleftoverride}', "");
Expect(0, 8238, '\P{Bidi_Class:	righttoleftoverride}', "");
Expect(1, 8238, '\P{^Bidi_Class:	righttoleftoverride}', "");
Expect(0, 8237, '\p{Bidi_Class:	righttoleftoverride}', "");
Expect(1, 8237, '\p{^Bidi_Class:	righttoleftoverride}', "");
Expect(1, 8237, '\P{Bidi_Class:	righttoleftoverride}', "");
Expect(0, 8237, '\P{^Bidi_Class:	righttoleftoverride}', "");
Expect(1, 8238, '\p{Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(0, 8238, '\p{^Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(0, 8238, '\P{Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(1, 8238, '\P{^Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(0, 8237, '\p{Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(1, 8237, '\p{^Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(1, 8237, '\P{Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Expect(0, 8237, '\P{^Bidi_Class=	-RightTO_leftOVERRIDE}', "");
Error('\p{Bc=:=_ RLO}');
Error('\P{Bc=:=_ RLO}');
Expect(1, 8238, '\p{Bc=rlo}', "");
Expect(0, 8238, '\p{^Bc=rlo}', "");
Expect(0, 8238, '\P{Bc=rlo}', "");
Expect(1, 8238, '\P{^Bc=rlo}', "");
Expect(0, 8237, '\p{Bc=rlo}', "");
Expect(1, 8237, '\p{^Bc=rlo}', "");
Expect(1, 8237, '\P{Bc=rlo}', "");
Expect(0, 8237, '\P{^Bc=rlo}', "");
Expect(1, 8238, '\p{Bc=	 RLO}', "");
Expect(0, 8238, '\p{^Bc=	 RLO}', "");
Expect(0, 8238, '\P{Bc=	 RLO}', "");
Expect(1, 8238, '\P{^Bc=	 RLO}', "");
Expect(0, 8237, '\p{Bc=	 RLO}', "");
Expect(1, 8237, '\p{^Bc=	 RLO}', "");
Expect(1, 8237, '\P{Bc=	 RLO}', "");
Expect(0, 8237, '\P{^Bc=	 RLO}', "");
Error('\p{Is_Bidi_Class= right	TO/a/Left-Override}');
Error('\P{Is_Bidi_Class= right	TO/a/Left-Override}');
Expect(1, 8238, '\p{Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\P{Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\p{Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\P{Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\p{Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(0, 8238, '\P{Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(0, 8237, '\p{Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(1, 8237, '\P{Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class=_-Right-TO_LEFT Override}', "");
Error('\p{Is_Bc=_/a/rlo}');
Error('\P{Is_Bc=_/a/rlo}');
Expect(1, 8238, '\p{Is_Bc=rlo}', "");
Expect(0, 8238, '\p{^Is_Bc=rlo}', "");
Expect(0, 8238, '\P{Is_Bc=rlo}', "");
Expect(1, 8238, '\P{^Is_Bc=rlo}', "");
Expect(0, 8237, '\p{Is_Bc=rlo}', "");
Expect(1, 8237, '\p{^Is_Bc=rlo}', "");
Expect(1, 8237, '\P{Is_Bc=rlo}', "");
Expect(0, 8237, '\P{^Is_Bc=rlo}', "");
Expect(1, 8238, '\p{Is_Bc=_RLO}', "");
Expect(0, 8238, '\p{^Is_Bc=_RLO}', "");
Expect(0, 8238, '\P{Is_Bc=_RLO}', "");
Expect(1, 8238, '\P{^Is_Bc=_RLO}', "");
Expect(0, 8237, '\p{Is_Bc=_RLO}', "");
Expect(1, 8237, '\p{^Is_Bc=_RLO}', "");
Expect(1, 8237, '\P{Is_Bc=_RLO}', "");
Expect(0, 8237, '\P{^Is_Bc=_RLO}', "");
Error('\p{Bidi_Class= _LEFT_TO-Right-Override:=}');
Error('\P{Bidi_Class= _LEFT_TO-Right-Override:=}');
Expect(1, 8237, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Bidi_Class=	 Left TO-right Override}', "");
Expect(0, 8237, '\p{^Bidi_Class=	 Left TO-right Override}', "");
Expect(0, 8237, '\P{Bidi_Class=	 Left TO-right Override}', "");
Expect(1, 8237, '\P{^Bidi_Class=	 Left TO-right Override}', "");
Expect(0, 8236, '\p{Bidi_Class=	 Left TO-right Override}', "");
Expect(1, 8236, '\p{^Bidi_Class=	 Left TO-right Override}', "");
Expect(1, 8236, '\P{Bidi_Class=	 Left TO-right Override}', "");
Expect(0, 8236, '\P{^Bidi_Class=	 Left TO-right Override}', "");
Error('\p{Bc=- LRO/a/}');
Error('\P{Bc=- LRO/a/}');
Expect(1, 8237, '\p{Bc=lro}', "");
Expect(0, 8237, '\p{^Bc=lro}', "");
Expect(0, 8237, '\P{Bc=lro}', "");
Expect(1, 8237, '\P{^Bc=lro}', "");
Expect(0, 8236, '\p{Bc=lro}', "");
Expect(1, 8236, '\p{^Bc=lro}', "");
Expect(1, 8236, '\P{Bc=lro}', "");
Expect(0, 8236, '\P{^Bc=lro}', "");
Expect(1, 8237, '\p{Bc=	LRO}', "");
Expect(0, 8237, '\p{^Bc=	LRO}', "");
Expect(0, 8237, '\P{Bc=	LRO}', "");
Expect(1, 8237, '\P{^Bc=	LRO}', "");
Expect(0, 8236, '\p{Bc=	LRO}', "");
Expect(1, 8236, '\p{^Bc=	LRO}', "");
Expect(1, 8236, '\P{Bc=	LRO}', "");
Expect(0, 8236, '\P{^Bc=	LRO}', "");
Error('\p{Is_Bidi_Class= /a/Left	toRight_Override}');
Error('\P{Is_Bidi_Class= /a/Left	toRight_Override}');
Expect(1, 8237, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=LEFT_To	RightOverride}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=LEFT_To	RightOverride}', "");
Error('\p{Is_Bc=:=	-lro}');
Error('\P{Is_Bc=:=	-lro}');
Expect(1, 8237, '\p{Is_Bc=lro}', "");
Expect(0, 8237, '\p{^Is_Bc=lro}', "");
Expect(0, 8237, '\P{Is_Bc=lro}', "");
Expect(1, 8237, '\P{^Is_Bc=lro}', "");
Expect(0, 8236, '\p{Is_Bc=lro}', "");
Expect(1, 8236, '\p{^Is_Bc=lro}', "");
Expect(1, 8236, '\P{Is_Bc=lro}', "");
Expect(0, 8236, '\P{^Is_Bc=lro}', "");
Expect(1, 8237, '\p{Is_Bc=  lro}', "");
Expect(0, 8237, '\p{^Is_Bc=  lro}', "");
Expect(0, 8237, '\P{Is_Bc=  lro}', "");
Expect(1, 8237, '\P{^Is_Bc=  lro}', "");
Expect(0, 8236, '\p{Is_Bc=  lro}', "");
Expect(1, 8236, '\p{^Is_Bc=  lro}', "");
Expect(1, 8236, '\P{Is_Bc=  lro}', "");
Expect(0, 8236, '\P{^Is_Bc=  lro}', "");
Error('\p{Bidi_Class=/a/	LeftTO-right}');
Error('\P{Bidi_Class=/a/	LeftTO-right}');
Expect(1, 90, '\p{Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Bidi_Class=__Left-To	Right}', "");
Expect(0, 90, '\p{^Bidi_Class=__Left-To	Right}', "");
Expect(0, 90, '\P{Bidi_Class=__Left-To	Right}', "");
Expect(1, 90, '\P{^Bidi_Class=__Left-To	Right}', "");
Expect(0, 64, '\p{Bidi_Class=__Left-To	Right}', "");
Expect(1, 64, '\p{^Bidi_Class=__Left-To	Right}', "");
Expect(1, 64, '\P{Bidi_Class=__Left-To	Right}', "");
Expect(0, 64, '\P{^Bidi_Class=__Left-To	Right}', "");
Error('\p{Bc=_:=L}');
Error('\P{Bc=_:=L}');
Expect(1, 90, '\p{Bc=l}', "");
Expect(0, 90, '\p{^Bc=l}', "");
Expect(0, 90, '\P{Bc=l}', "");
Expect(1, 90, '\P{^Bc=l}', "");
Expect(0, 64, '\p{Bc=l}', "");
Expect(1, 64, '\p{^Bc=l}', "");
Expect(1, 64, '\P{Bc=l}', "");
Expect(0, 64, '\P{^Bc=l}', "");
Error('\p{Is_Bidi_Class=_-Left ToRight:=}');
Error('\P{Is_Bidi_Class=_-Left ToRight:=}');
Expect(1, 90, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Is_Bidi_Class=  left-To-Right}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=  left-To-Right}', "");
Expect(0, 90, '\P{Is_Bidi_Class=  left-To-Right}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=  left-To-Right}', "");
Expect(0, 64, '\p{Is_Bidi_Class=  left-To-Right}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=  left-To-Right}', "");
Expect(1, 64, '\P{Is_Bidi_Class=  left-To-Right}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=  left-To-Right}', "");
Error('\p{Is_Bc:   --L/a/}');
Error('\P{Is_Bc:   --L/a/}');
Expect(1, 90, '\p{Is_Bc=l}', "");
Expect(0, 90, '\p{^Is_Bc=l}', "");
Expect(0, 90, '\P{Is_Bc=l}', "");
Expect(1, 90, '\P{^Is_Bc=l}', "");
Expect(0, 64, '\p{Is_Bc=l}', "");
Expect(1, 64, '\p{^Is_Bc=l}', "");
Expect(1, 64, '\P{Is_Bc=l}', "");
Expect(0, 64, '\P{^Is_Bc=l}', "");
Expect(1, 90, '\p{Is_Bc=	l}', "");
Expect(0, 90, '\p{^Is_Bc=	l}', "");
Expect(0, 90, '\P{Is_Bc=	l}', "");
Expect(1, 90, '\P{^Is_Bc=	l}', "");
Expect(0, 64, '\p{Is_Bc=	l}', "");
Expect(1, 64, '\p{^Is_Bc=	l}', "");
Expect(1, 64, '\P{Is_Bc=	l}', "");
Expect(0, 64, '\P{^Is_Bc=	l}', "");
Error('\p{Bidi_Class=	Right	To_Left	Embedding:=}');
Error('\P{Bidi_Class=	Right	To_Left	Embedding:=}');
Expect(1, 8235, '\p{Bidi_Class:	righttoleftembedding}', "");
Expect(0, 8235, '\p{^Bidi_Class:	righttoleftembedding}', "");
Expect(0, 8235, '\P{Bidi_Class:	righttoleftembedding}', "");
Expect(1, 8235, '\P{^Bidi_Class:	righttoleftembedding}', "");
Expect(0, 8234, '\p{Bidi_Class:	righttoleftembedding}', "");
Expect(1, 8234, '\p{^Bidi_Class:	righttoleftembedding}', "");
Expect(1, 8234, '\P{Bidi_Class:	righttoleftembedding}', "");
Expect(0, 8234, '\P{^Bidi_Class:	righttoleftembedding}', "");
Expect(1, 8235, '\p{Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(0, 8235, '\p{^Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(0, 8235, '\P{Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(1, 8235, '\P{^Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(0, 8234, '\p{Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(1, 8234, '\p{^Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(1, 8234, '\P{Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Expect(0, 8234, '\P{^Bidi_Class=_RIGHT_ToleftEmbedding}', "");
Error('\p{Bc= :=RLE}');
Error('\P{Bc= :=RLE}');
Expect(1, 8235, '\p{Bc=rle}', "");
Expect(0, 8235, '\p{^Bc=rle}', "");
Expect(0, 8235, '\P{Bc=rle}', "");
Expect(1, 8235, '\P{^Bc=rle}', "");
Expect(0, 8234, '\p{Bc=rle}', "");
Expect(1, 8234, '\p{^Bc=rle}', "");
Expect(1, 8234, '\P{Bc=rle}', "");
Expect(0, 8234, '\P{^Bc=rle}', "");
Expect(1, 8235, '\p{Bc=-rle}', "");
Expect(0, 8235, '\p{^Bc=-rle}', "");
Expect(0, 8235, '\P{Bc=-rle}', "");
Expect(1, 8235, '\P{^Bc=-rle}', "");
Expect(0, 8234, '\p{Bc=-rle}', "");
Expect(1, 8234, '\p{^Bc=-rle}', "");
Expect(1, 8234, '\P{Bc=-rle}', "");
Expect(0, 8234, '\P{^Bc=-rle}', "");
Error('\p{Is_Bidi_Class=-/a/RIGHT_TO-Left Embedding}');
Error('\P{Is_Bidi_Class=-/a/RIGHT_TO-Left Embedding}');
Expect(1, 8235, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\p{Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(0, 8235, '\P{Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(0, 8234, '\p{Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(1, 8234, '\P{Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class=-	RIGHTTo-LeftEmbedding}', "");
Error('\p{Is_Bc=:=_ RLE}');
Error('\P{Is_Bc=:=_ RLE}');
Expect(1, 8235, '\p{Is_Bc=rle}', "");
Expect(0, 8235, '\p{^Is_Bc=rle}', "");
Expect(0, 8235, '\P{Is_Bc=rle}', "");
Expect(1, 8235, '\P{^Is_Bc=rle}', "");
Expect(0, 8234, '\p{Is_Bc=rle}', "");
Expect(1, 8234, '\p{^Is_Bc=rle}', "");
Expect(1, 8234, '\P{Is_Bc=rle}', "");
Expect(0, 8234, '\P{^Is_Bc=rle}', "");
Expect(1, 8235, '\p{Is_Bc=_	RLE}', "");
Expect(0, 8235, '\p{^Is_Bc=_	RLE}', "");
Expect(0, 8235, '\P{Is_Bc=_	RLE}', "");
Expect(1, 8235, '\P{^Is_Bc=_	RLE}', "");
Expect(0, 8234, '\p{Is_Bc=_	RLE}', "");
Expect(1, 8234, '\p{^Is_Bc=_	RLE}', "");
Expect(1, 8234, '\P{Is_Bc=_	RLE}', "");
Expect(0, 8234, '\P{^Is_Bc=_	RLE}', "");
Error('\p{Bidi_Class=	_other NEUTRAL:=}');
Error('\P{Bidi_Class=	_other NEUTRAL:=}');
Expect(1, 34, '\p{Bidi_Class:	otherneutral}', "");
Expect(0, 34, '\p{^Bidi_Class:	otherneutral}', "");
Expect(0, 34, '\P{Bidi_Class:	otherneutral}', "");
Expect(1, 34, '\P{^Bidi_Class:	otherneutral}', "");
Expect(0, 32, '\p{Bidi_Class:	otherneutral}', "");
Expect(1, 32, '\p{^Bidi_Class:	otherneutral}', "");
Expect(1, 32, '\P{Bidi_Class:	otherneutral}', "");
Expect(0, 32, '\P{^Bidi_Class:	otherneutral}', "");
Expect(1, 34, '\p{Bidi_Class=OTHER	Neutral}', "");
Expect(0, 34, '\p{^Bidi_Class=OTHER	Neutral}', "");
Expect(0, 34, '\P{Bidi_Class=OTHER	Neutral}', "");
Expect(1, 34, '\P{^Bidi_Class=OTHER	Neutral}', "");
Expect(0, 32, '\p{Bidi_Class=OTHER	Neutral}', "");
Expect(1, 32, '\p{^Bidi_Class=OTHER	Neutral}', "");
Expect(1, 32, '\P{Bidi_Class=OTHER	Neutral}', "");
Expect(0, 32, '\P{^Bidi_Class=OTHER	Neutral}', "");
Error('\p{Bc=:=_	ON}');
Error('\P{Bc=:=_	ON}');
Expect(1, 34, '\p{Bc=on}', "");
Expect(0, 34, '\p{^Bc=on}', "");
Expect(0, 34, '\P{Bc=on}', "");
Expect(1, 34, '\P{^Bc=on}', "");
Expect(0, 32, '\p{Bc=on}', "");
Expect(1, 32, '\p{^Bc=on}', "");
Expect(1, 32, '\P{Bc=on}', "");
Expect(0, 32, '\P{^Bc=on}', "");
Expect(1, 34, '\p{Bc=-ON}', "");
Expect(0, 34, '\p{^Bc=-ON}', "");
Expect(0, 34, '\P{Bc=-ON}', "");
Expect(1, 34, '\P{^Bc=-ON}', "");
Expect(0, 32, '\p{Bc=-ON}', "");
Expect(1, 32, '\p{^Bc=-ON}', "");
Expect(1, 32, '\P{Bc=-ON}', "");
Expect(0, 32, '\P{^Bc=-ON}', "");
Error('\p{Is_Bidi_Class=/a/_-other-neutral}');
Error('\P{Is_Bidi_Class=/a/_-other-neutral}');
Expect(1, 34, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\p{Is_Bidi_Class=  other_Neutral}', "");
Expect(0, 34, '\p{^Is_Bidi_Class=  other_Neutral}', "");
Expect(0, 34, '\P{Is_Bidi_Class=  other_Neutral}', "");
Expect(1, 34, '\P{^Is_Bidi_Class=  other_Neutral}', "");
Expect(0, 32, '\p{Is_Bidi_Class=  other_Neutral}', "");
Expect(1, 32, '\p{^Is_Bidi_Class=  other_Neutral}', "");
Expect(1, 32, '\P{Is_Bidi_Class=  other_Neutral}', "");
Expect(0, 32, '\P{^Is_Bidi_Class=  other_Neutral}', "");
Error('\p{Is_Bc=:=ON}');
Error('\P{Is_Bc=:=ON}');
Expect(1, 34, '\p{Is_Bc=on}', "");
Expect(0, 34, '\p{^Is_Bc=on}', "");
Expect(0, 34, '\P{Is_Bc=on}', "");
Expect(1, 34, '\P{^Is_Bc=on}', "");
Expect(0, 32, '\p{Is_Bc=on}', "");
Expect(1, 32, '\p{^Is_Bc=on}', "");
Expect(1, 32, '\P{Is_Bc=on}', "");
Expect(0, 32, '\P{^Is_Bc=on}', "");
Expect(1, 34, '\p{Is_Bc= 	ON}', "");
Expect(0, 34, '\p{^Is_Bc= 	ON}', "");
Expect(0, 34, '\P{Is_Bc= 	ON}', "");
Expect(1, 34, '\P{^Is_Bc= 	ON}', "");
Expect(0, 32, '\p{Is_Bc= 	ON}', "");
Expect(1, 32, '\p{^Is_Bc= 	ON}', "");
Expect(1, 32, '\P{Is_Bc= 	ON}', "");
Expect(0, 32, '\P{^Is_Bc= 	ON}', "");
Error('\p{Bidi_Class=:= _Boundary neutral}');
Error('\P{Bidi_Class=:= _Boundary neutral}');
Expect(1, 8, '\p{Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\p{^Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\P{Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\P{^Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\p{Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\p{^Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\P{Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\P{^Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\p{Bidi_Class= _Boundary	Neutral}', "");
Expect(0, 8, '\p{^Bidi_Class= _Boundary	Neutral}', "");
Expect(0, 8, '\P{Bidi_Class= _Boundary	Neutral}', "");
Expect(1, 8, '\P{^Bidi_Class= _Boundary	Neutral}', "");
Expect(0, 13, '\p{Bidi_Class= _Boundary	Neutral}', "");
Expect(1, 13, '\p{^Bidi_Class= _Boundary	Neutral}', "");
Expect(1, 13, '\P{Bidi_Class= _Boundary	Neutral}', "");
Expect(0, 13, '\P{^Bidi_Class= _Boundary	Neutral}', "");
Error('\p{Bc:	 BN/a/}');
Error('\P{Bc:	 BN/a/}');
Expect(1, 8, '\p{Bc=bn}', "");
Expect(0, 8, '\p{^Bc=bn}', "");
Expect(0, 8, '\P{Bc=bn}', "");
Expect(1, 8, '\P{^Bc=bn}', "");
Expect(0, 13, '\p{Bc=bn}', "");
Expect(1, 13, '\p{^Bc=bn}', "");
Expect(1, 13, '\P{Bc=bn}', "");
Expect(0, 13, '\P{^Bc=bn}', "");
Expect(1, 8, '\p{Bc=-bn}', "");
Expect(0, 8, '\p{^Bc=-bn}', "");
Expect(0, 8, '\P{Bc=-bn}', "");
Expect(1, 8, '\P{^Bc=-bn}', "");
Expect(0, 13, '\p{Bc=-bn}', "");
Expect(1, 13, '\p{^Bc=-bn}', "");
Expect(1, 13, '\P{Bc=-bn}', "");
Expect(0, 13, '\P{^Bc=-bn}', "");
Error('\p{Is_Bidi_Class:/a/BOUNDARY-Neutral}');
Error('\P{Is_Bidi_Class:/a/BOUNDARY-Neutral}');
Expect(1, 8, '\p{Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\p{Is_Bidi_Class=	-Boundary neutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class=	-Boundary neutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class=	-Boundary neutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class=	-Boundary neutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class=	-Boundary neutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class=	-Boundary neutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class=	-Boundary neutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class=	-Boundary neutral}', "");
Error('\p{Is_Bc=/a/-	bn}');
Error('\P{Is_Bc=/a/-	bn}');
Expect(1, 8, '\p{Is_Bc=bn}', "");
Expect(0, 8, '\p{^Is_Bc=bn}', "");
Expect(0, 8, '\P{Is_Bc=bn}', "");
Expect(1, 8, '\P{^Is_Bc=bn}', "");
Expect(0, 13, '\p{Is_Bc=bn}', "");
Expect(1, 13, '\p{^Is_Bc=bn}', "");
Expect(1, 13, '\P{Is_Bc=bn}', "");
Expect(0, 13, '\P{^Is_Bc=bn}', "");
Expect(1, 8, '\p{Is_Bc=	bn}', "");
Expect(0, 8, '\p{^Is_Bc=	bn}', "");
Expect(0, 8, '\P{Is_Bc=	bn}', "");
Expect(1, 8, '\P{^Is_Bc=	bn}', "");
Expect(0, 13, '\p{Is_Bc=	bn}', "");
Expect(1, 13, '\p{^Is_Bc=	bn}', "");
Expect(1, 13, '\P{Is_Bc=	bn}', "");
Expect(0, 13, '\P{^Is_Bc=	bn}', "");
Error('\p{Bidi_Class=	Pop-directional:=format}');
Error('\P{Bidi_Class=	Pop-directional:=format}');
Expect(1, 8236, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\p{Bidi_Class=	pop	directionalFORMAT}', "");
Expect(0, 8236, '\p{^Bidi_Class=	pop	directionalFORMAT}', "");
Expect(0, 8236, '\P{Bidi_Class=	pop	directionalFORMAT}', "");
Expect(1, 8236, '\P{^Bidi_Class=	pop	directionalFORMAT}', "");
Expect(0, 8235, '\p{Bidi_Class=	pop	directionalFORMAT}', "");
Expect(1, 8235, '\p{^Bidi_Class=	pop	directionalFORMAT}', "");
Expect(1, 8235, '\P{Bidi_Class=	pop	directionalFORMAT}', "");
Expect(0, 8235, '\P{^Bidi_Class=	pop	directionalFORMAT}', "");
Error('\p{Bc=- pdf:=}');
Error('\P{Bc=- pdf:=}');
Expect(1, 8236, '\p{Bc=pdf}', "");
Expect(0, 8236, '\p{^Bc=pdf}', "");
Expect(0, 8236, '\P{Bc=pdf}', "");
Expect(1, 8236, '\P{^Bc=pdf}', "");
Expect(0, 8235, '\p{Bc=pdf}', "");
Expect(1, 8235, '\p{^Bc=pdf}', "");
Expect(1, 8235, '\P{Bc=pdf}', "");
Expect(0, 8235, '\P{^Bc=pdf}', "");
Expect(1, 8236, '\p{Bc=- pdf}', "");
Expect(0, 8236, '\p{^Bc=- pdf}', "");
Expect(0, 8236, '\P{Bc=- pdf}', "");
Expect(1, 8236, '\P{^Bc=- pdf}', "");
Expect(0, 8235, '\p{Bc=- pdf}', "");
Expect(1, 8235, '\p{^Bc=- pdf}', "");
Expect(1, 8235, '\P{Bc=- pdf}', "");
Expect(0, 8235, '\P{^Bc=- pdf}', "");
Error('\p{Is_Bidi_Class=_	pop directional/a/Format}');
Error('\P{Is_Bidi_Class=_	pop directional/a/Format}');
Expect(1, 8236, '\p{Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\P{Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\p{Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\P{Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\p{Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(0, 8236, '\P{Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(0, 8235, '\p{Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(1, 8235, '\P{Is_Bidi_Class=_PopDirectionalformat}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class=_PopDirectionalformat}', "");
Error('\p{Is_Bc=/a/__PDF}');
Error('\P{Is_Bc=/a/__PDF}');
Expect(1, 8236, '\p{Is_Bc=pdf}', "");
Expect(0, 8236, '\p{^Is_Bc=pdf}', "");
Expect(0, 8236, '\P{Is_Bc=pdf}', "");
Expect(1, 8236, '\P{^Is_Bc=pdf}', "");
Expect(0, 8235, '\p{Is_Bc=pdf}', "");
Expect(1, 8235, '\p{^Is_Bc=pdf}', "");
Expect(1, 8235, '\P{Is_Bc=pdf}', "");
Expect(0, 8235, '\P{^Is_Bc=pdf}', "");
Expect(1, 8236, '\p{Is_Bc: -PDF}', "");
Expect(0, 8236, '\p{^Is_Bc: -PDF}', "");
Expect(0, 8236, '\P{Is_Bc: -PDF}', "");
Expect(1, 8236, '\P{^Is_Bc: -PDF}', "");
Expect(0, 8235, '\p{Is_Bc: -PDF}', "");
Expect(1, 8235, '\p{^Is_Bc: -PDF}', "");
Expect(1, 8235, '\P{Is_Bc: -PDF}', "");
Expect(0, 8235, '\P{^Is_Bc: -PDF}', "");
Error('\p{Bidi_Class=	:=LeftTo-Right_EMBEDDING}');
Error('\P{Bidi_Class=	:=LeftTo-Right_EMBEDDING}');
Expect(1, 8234, '\p{Bidi_Class:   lefttorightembedding}', "");
Expect(0, 8234, '\p{^Bidi_Class:   lefttorightembedding}', "");
Expect(0, 8234, '\P{Bidi_Class:   lefttorightembedding}', "");
Expect(1, 8234, '\P{^Bidi_Class:   lefttorightembedding}', "");
Expect(0, 8233, '\p{Bidi_Class:   lefttorightembedding}', "");
Expect(1, 8233, '\p{^Bidi_Class:   lefttorightembedding}', "");
Expect(1, 8233, '\P{Bidi_Class:   lefttorightembedding}', "");
Expect(0, 8233, '\P{^Bidi_Class:   lefttorightembedding}', "");
Expect(1, 8234, '\p{Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(0, 8234, '\p{^Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(0, 8234, '\P{Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(1, 8234, '\P{^Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(0, 8233, '\p{Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(1, 8233, '\p{^Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(1, 8233, '\P{Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Expect(0, 8233, '\P{^Bidi_Class=-LEFT-to_RIGHTEmbedding}', "");
Error('\p{Bc=-/a/LRE}');
Error('\P{Bc=-/a/LRE}');
Expect(1, 8234, '\p{Bc:   lre}', "");
Expect(0, 8234, '\p{^Bc:   lre}', "");
Expect(0, 8234, '\P{Bc:   lre}', "");
Expect(1, 8234, '\P{^Bc:   lre}', "");
Expect(0, 8233, '\p{Bc:   lre}', "");
Expect(1, 8233, '\p{^Bc:   lre}', "");
Expect(1, 8233, '\P{Bc:   lre}', "");
Expect(0, 8233, '\P{^Bc:   lre}', "");
Expect(1, 8234, '\p{Bc= -LRE}', "");
Expect(0, 8234, '\p{^Bc= -LRE}', "");
Expect(0, 8234, '\P{Bc= -LRE}', "");
Expect(1, 8234, '\P{^Bc= -LRE}', "");
Expect(0, 8233, '\p{Bc= -LRE}', "");
Expect(1, 8233, '\p{^Bc= -LRE}', "");
Expect(1, 8233, '\P{Bc= -LRE}', "");
Expect(0, 8233, '\P{^Bc= -LRE}', "");
Error('\p{Is_Bidi_Class= :=LeftTo_Right	Embedding}');
Error('\P{Is_Bidi_Class= :=LeftTo_Right	Embedding}');
Expect(1, 8234, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\p{Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(0, 8234, '\P{Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(0, 8233, '\p{Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(1, 8233, '\P{Is_Bidi_Class=  Left ToRight embedding}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class=  Left ToRight embedding}', "");
Error('\p{Is_Bc=:=-_LRE}');
Error('\P{Is_Bc=:=-_LRE}');
Expect(1, 8234, '\p{Is_Bc=lre}', "");
Expect(0, 8234, '\p{^Is_Bc=lre}', "");
Expect(0, 8234, '\P{Is_Bc=lre}', "");
Expect(1, 8234, '\P{^Is_Bc=lre}', "");
Expect(0, 8233, '\p{Is_Bc=lre}', "");
Expect(1, 8233, '\p{^Is_Bc=lre}', "");
Expect(1, 8233, '\P{Is_Bc=lre}', "");
Expect(0, 8233, '\P{^Is_Bc=lre}', "");
Expect(1, 8234, '\p{Is_Bc=-_LRE}', "");
Expect(0, 8234, '\p{^Is_Bc=-_LRE}', "");
Expect(0, 8234, '\P{Is_Bc=-_LRE}', "");
Expect(1, 8234, '\P{^Is_Bc=-_LRE}', "");
Expect(0, 8233, '\p{Is_Bc=-_LRE}', "");
Expect(1, 8233, '\p{^Is_Bc=-_LRE}', "");
Expect(1, 8233, '\P{Is_Bc=-_LRE}', "");
Expect(0, 8233, '\P{^Is_Bc=-_LRE}', "");
Error('\p{Bidi_Class=		Arabic letter:=}');
Error('\P{Bidi_Class=		Arabic letter:=}');
Expect(1, 1541, '\p{Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Bidi_Class=	arabic	letter}', "");
Expect(0, 1541, '\p{^Bidi_Class=	arabic	letter}', "");
Expect(0, 1541, '\P{Bidi_Class=	arabic	letter}', "");
Expect(1, 1541, '\P{^Bidi_Class=	arabic	letter}', "");
Expect(0, 1539, '\p{Bidi_Class=	arabic	letter}', "");
Expect(1, 1539, '\p{^Bidi_Class=	arabic	letter}', "");
Expect(1, 1539, '\P{Bidi_Class=	arabic	letter}', "");
Expect(0, 1539, '\P{^Bidi_Class=	arabic	letter}', "");
Error('\p{Bc=		AL/a/}');
Error('\P{Bc=		AL/a/}');
Expect(1, 1541, '\p{Bc=al}', "");
Expect(0, 1541, '\p{^Bc=al}', "");
Expect(0, 1541, '\P{Bc=al}', "");
Expect(1, 1541, '\P{^Bc=al}', "");
Expect(0, 1539, '\p{Bc=al}', "");
Expect(1, 1539, '\p{^Bc=al}', "");
Expect(1, 1539, '\P{Bc=al}', "");
Expect(0, 1539, '\P{^Bc=al}', "");
Expect(1, 1541, '\p{Bc=_	al}', "");
Expect(0, 1541, '\p{^Bc=_	al}', "");
Expect(0, 1541, '\P{Bc=_	al}', "");
Expect(1, 1541, '\P{^Bc=_	al}', "");
Expect(0, 1539, '\p{Bc=_	al}', "");
Expect(1, 1539, '\p{^Bc=_	al}', "");
Expect(1, 1539, '\P{Bc=_	al}', "");
Expect(0, 1539, '\P{^Bc=_	al}', "");
Error('\p{Is_Bidi_Class=/a/	ARABIC letter}');
Error('\P{Is_Bidi_Class=/a/	ARABIC letter}');
Expect(1, 1541, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Is_Bidi_Class=_ArabicLETTER}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=_ArabicLETTER}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=_ArabicLETTER}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=_ArabicLETTER}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=_ArabicLETTER}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=_ArabicLETTER}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=_ArabicLETTER}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=_ArabicLETTER}', "");
Error('\p{Is_Bc=	-AL:=}');
Error('\P{Is_Bc=	-AL:=}');
Expect(1, 1541, '\p{Is_Bc=al}', "");
Expect(0, 1541, '\p{^Is_Bc=al}', "");
Expect(0, 1541, '\P{Is_Bc=al}', "");
Expect(1, 1541, '\P{^Is_Bc=al}', "");
Expect(0, 1539, '\p{Is_Bc=al}', "");
Expect(1, 1539, '\p{^Is_Bc=al}', "");
Expect(1, 1539, '\P{Is_Bc=al}', "");
Expect(0, 1539, '\P{^Is_Bc=al}', "");
Expect(1, 1541, '\p{Is_Bc=	AL}', "");
Expect(0, 1541, '\p{^Is_Bc=	AL}', "");
Expect(0, 1541, '\P{Is_Bc=	AL}', "");
Expect(1, 1541, '\P{^Is_Bc=	AL}', "");
Expect(0, 1539, '\p{Is_Bc=	AL}', "");
Expect(1, 1539, '\p{^Is_Bc=	AL}', "");
Expect(1, 1539, '\P{Is_Bc=	AL}', "");
Expect(0, 1539, '\P{^Is_Bc=	AL}', "");
Error('\p{Bidi_Class=/a/common Separator}');
Error('\P{Bidi_Class=/a/common Separator}');
Expect(1, 44, '\p{Bidi_Class: commonseparator}', "");
Expect(0, 44, '\p{^Bidi_Class: commonseparator}', "");
Expect(0, 44, '\P{Bidi_Class: commonseparator}', "");
Expect(1, 44, '\P{^Bidi_Class: commonseparator}', "");
Expect(0, 43, '\p{Bidi_Class: commonseparator}', "");
Expect(1, 43, '\p{^Bidi_Class: commonseparator}', "");
Expect(1, 43, '\P{Bidi_Class: commonseparator}', "");
Expect(0, 43, '\P{^Bidi_Class: commonseparator}', "");
Expect(1, 44, '\p{Bidi_Class=_COMMON_separator}', "");
Expect(0, 44, '\p{^Bidi_Class=_COMMON_separator}', "");
Expect(0, 44, '\P{Bidi_Class=_COMMON_separator}', "");
Expect(1, 44, '\P{^Bidi_Class=_COMMON_separator}', "");
Expect(0, 43, '\p{Bidi_Class=_COMMON_separator}', "");
Expect(1, 43, '\p{^Bidi_Class=_COMMON_separator}', "");
Expect(1, 43, '\P{Bidi_Class=_COMMON_separator}', "");
Expect(0, 43, '\P{^Bidi_Class=_COMMON_separator}', "");
Error('\p{Bc=-/a/cs}');
Error('\P{Bc=-/a/cs}');
Expect(1, 44, '\p{Bc=cs}', "");
Expect(0, 44, '\p{^Bc=cs}', "");
Expect(0, 44, '\P{Bc=cs}', "");
Expect(1, 44, '\P{^Bc=cs}', "");
Expect(0, 43, '\p{Bc=cs}', "");
Expect(1, 43, '\p{^Bc=cs}', "");
Expect(1, 43, '\P{Bc=cs}', "");
Expect(0, 43, '\P{^Bc=cs}', "");
Expect(1, 44, '\p{Bc= cs}', "");
Expect(0, 44, '\p{^Bc= cs}', "");
Expect(0, 44, '\P{Bc= cs}', "");
Expect(1, 44, '\P{^Bc= cs}', "");
Expect(0, 43, '\p{Bc= cs}', "");
Expect(1, 43, '\p{^Bc= cs}', "");
Expect(1, 43, '\P{Bc= cs}', "");
Expect(0, 43, '\P{^Bc= cs}', "");
Error('\p{Is_Bidi_Class=		COMMON separator:=}');
Error('\P{Is_Bidi_Class=		COMMON separator:=}');
Expect(1, 44, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\p{Is_Bidi_Class=- Common_separator}', "");
Expect(0, 44, '\p{^Is_Bidi_Class=- Common_separator}', "");
Expect(0, 44, '\P{Is_Bidi_Class=- Common_separator}', "");
Expect(1, 44, '\P{^Is_Bidi_Class=- Common_separator}', "");
Expect(0, 43, '\p{Is_Bidi_Class=- Common_separator}', "");
Expect(1, 43, '\p{^Is_Bidi_Class=- Common_separator}', "");
Expect(1, 43, '\P{Is_Bidi_Class=- Common_separator}', "");
Expect(0, 43, '\P{^Is_Bidi_Class=- Common_separator}', "");
Error('\p{Is_Bc=/a/		CS}');
Error('\P{Is_Bc=/a/		CS}');
Expect(1, 44, '\p{Is_Bc=cs}', "");
Expect(0, 44, '\p{^Is_Bc=cs}', "");
Expect(0, 44, '\P{Is_Bc=cs}', "");
Expect(1, 44, '\P{^Is_Bc=cs}', "");
Expect(0, 43, '\p{Is_Bc=cs}', "");
Expect(1, 43, '\p{^Is_Bc=cs}', "");
Expect(1, 43, '\P{Is_Bc=cs}', "");
Expect(0, 43, '\P{^Is_Bc=cs}', "");
Expect(1, 44, '\p{Is_Bc: 	CS}', "");
Expect(0, 44, '\p{^Is_Bc: 	CS}', "");
Expect(0, 44, '\P{Is_Bc: 	CS}', "");
Expect(1, 44, '\P{^Is_Bc: 	CS}', "");
Expect(0, 43, '\p{Is_Bc: 	CS}', "");
Expect(1, 43, '\p{^Is_Bc: 	CS}', "");
Expect(1, 43, '\P{Is_Bc: 	CS}', "");
Expect(0, 43, '\P{^Is_Bc: 	CS}', "");
Error('\p{Bidi_Class=	 White/a/Space}');
Error('\P{Bidi_Class=	 White/a/Space}');
Expect(1, 12, '\p{Bidi_Class=whitespace}', "");
Expect(0, 12, '\p{^Bidi_Class=whitespace}', "");
Expect(0, 12, '\P{Bidi_Class=whitespace}', "");
Expect(1, 12, '\P{^Bidi_Class=whitespace}', "");
Expect(0, 11, '\p{Bidi_Class=whitespace}', "");
Expect(1, 11, '\p{^Bidi_Class=whitespace}', "");
Expect(1, 11, '\P{Bidi_Class=whitespace}', "");
Expect(0, 11, '\P{^Bidi_Class=whitespace}', "");
Expect(1, 12, '\p{Bidi_Class:	 White-Space}', "");
Expect(0, 12, '\p{^Bidi_Class:	 White-Space}', "");
Expect(0, 12, '\P{Bidi_Class:	 White-Space}', "");
Expect(1, 12, '\P{^Bidi_Class:	 White-Space}', "");
Expect(0, 11, '\p{Bidi_Class:	 White-Space}', "");
Expect(1, 11, '\p{^Bidi_Class:	 White-Space}', "");
Expect(1, 11, '\P{Bidi_Class:	 White-Space}', "");
Expect(0, 11, '\P{^Bidi_Class:	 White-Space}', "");
Error('\p{Bc=	-WS/a/}');
Error('\P{Bc=	-WS/a/}');
Expect(1, 12, '\p{Bc=ws}', "");
Expect(0, 12, '\p{^Bc=ws}', "");
Expect(0, 12, '\P{Bc=ws}', "");
Expect(1, 12, '\P{^Bc=ws}', "");
Expect(0, 11, '\p{Bc=ws}', "");
Expect(1, 11, '\p{^Bc=ws}', "");
Expect(1, 11, '\P{Bc=ws}', "");
Expect(0, 11, '\P{^Bc=ws}', "");
Expect(1, 12, '\p{Bc= 	WS}', "");
Expect(0, 12, '\p{^Bc= 	WS}', "");
Expect(0, 12, '\P{Bc= 	WS}', "");
Expect(1, 12, '\P{^Bc= 	WS}', "");
Expect(0, 11, '\p{Bc= 	WS}', "");
Expect(1, 11, '\p{^Bc= 	WS}', "");
Expect(1, 11, '\P{Bc= 	WS}', "");
Expect(0, 11, '\P{^Bc= 	WS}', "");
Error('\p{Is_Bidi_Class=_/a/White	space}');
Error('\P{Is_Bidi_Class=_/a/White	space}');
Expect(1, 12, '\p{Is_Bidi_Class=whitespace}', "");
Expect(0, 12, '\p{^Is_Bidi_Class=whitespace}', "");
Expect(0, 12, '\P{Is_Bidi_Class=whitespace}', "");
Expect(1, 12, '\P{^Is_Bidi_Class=whitespace}', "");
Expect(0, 11, '\p{Is_Bidi_Class=whitespace}', "");
Expect(1, 11, '\p{^Is_Bidi_Class=whitespace}', "");
Expect(1, 11, '\P{Is_Bidi_Class=whitespace}', "");
Expect(0, 11, '\P{^Is_Bidi_Class=whitespace}', "");
Expect(1, 12, '\p{Is_Bidi_Class= WHITE	SPACE}', "");
Expect(0, 12, '\p{^Is_Bidi_Class= WHITE	SPACE}', "");
Expect(0, 12, '\P{Is_Bidi_Class= WHITE	SPACE}', "");
Expect(1, 12, '\P{^Is_Bidi_Class= WHITE	SPACE}', "");
Expect(0, 11, '\p{Is_Bidi_Class= WHITE	SPACE}', "");
Expect(1, 11, '\p{^Is_Bidi_Class= WHITE	SPACE}', "");
Expect(1, 11, '\P{Is_Bidi_Class= WHITE	SPACE}', "");
Expect(0, 11, '\P{^Is_Bidi_Class= WHITE	SPACE}', "");
Error('\p{Is_Bc=:=WS}');
Error('\P{Is_Bc=:=WS}');
Expect(1, 12, '\p{Is_Bc=ws}', "");
Expect(0, 12, '\p{^Is_Bc=ws}', "");
Expect(0, 12, '\P{Is_Bc=ws}', "");
Expect(1, 12, '\P{^Is_Bc=ws}', "");
Expect(0, 11, '\p{Is_Bc=ws}', "");
Expect(1, 11, '\p{^Is_Bc=ws}', "");
Expect(1, 11, '\P{Is_Bc=ws}', "");
Expect(0, 11, '\P{^Is_Bc=ws}', "");
Expect(1, 12, '\p{Is_Bc=WS}', "");
Expect(0, 12, '\p{^Is_Bc=WS}', "");
Expect(0, 12, '\P{Is_Bc=WS}', "");
Expect(1, 12, '\P{^Is_Bc=WS}', "");
Expect(0, 11, '\p{Is_Bc=WS}', "");
Expect(1, 11, '\p{^Is_Bc=WS}', "");
Expect(1, 11, '\P{Is_Bc=WS}', "");
Expect(0, 11, '\P{^Is_Bc=WS}', "");
Error('\p{Bidi_Class=	/a/PARAGRAPH	separator}');
Error('\P{Bidi_Class=	/a/PARAGRAPH	separator}');
Expect(1, 10, '\p{Bidi_Class:	paragraphseparator}', "");
Expect(0, 10, '\p{^Bidi_Class:	paragraphseparator}', "");
Expect(0, 10, '\P{Bidi_Class:	paragraphseparator}', "");
Expect(1, 10, '\P{^Bidi_Class:	paragraphseparator}', "");
Expect(0, 9, '\p{Bidi_Class:	paragraphseparator}', "");
Expect(1, 9, '\p{^Bidi_Class:	paragraphseparator}', "");
Expect(1, 9, '\P{Bidi_Class:	paragraphseparator}', "");
Expect(0, 9, '\P{^Bidi_Class:	paragraphseparator}', "");
Expect(1, 10, '\p{Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(0, 10, '\p{^Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(0, 10, '\P{Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(1, 10, '\P{^Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(0, 9, '\p{Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(1, 9, '\p{^Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(1, 9, '\P{Bidi_Class=--PARAGRAPH-Separator}', "");
Expect(0, 9, '\P{^Bidi_Class=--PARAGRAPH-Separator}', "");
Error('\p{Bc=-:=B}');
Error('\P{Bc=-:=B}');
Expect(1, 10, '\p{Bc=b}', "");
Expect(0, 10, '\p{^Bc=b}', "");
Expect(0, 10, '\P{Bc=b}', "");
Expect(1, 10, '\P{^Bc=b}', "");
Expect(0, 9, '\p{Bc=b}', "");
Expect(1, 9, '\p{^Bc=b}', "");
Expect(1, 9, '\P{Bc=b}', "");
Expect(0, 9, '\P{^Bc=b}', "");
Expect(1, 10, '\p{Bc=	-B}', "");
Expect(0, 10, '\p{^Bc=	-B}', "");
Expect(0, 10, '\P{Bc=	-B}', "");
Expect(1, 10, '\P{^Bc=	-B}', "");
Expect(0, 9, '\p{Bc=	-B}', "");
Expect(1, 9, '\p{^Bc=	-B}', "");
Expect(1, 9, '\P{Bc=	-B}', "");
Expect(0, 9, '\P{^Bc=	-B}', "");
Error('\p{Is_Bidi_Class:   _Paragraph/a/Separator}');
Error('\P{Is_Bidi_Class:   _Paragraph/a/Separator}');
Expect(1, 10, '\p{Is_Bidi_Class: paragraphseparator}', "");
Expect(0, 10, '\p{^Is_Bidi_Class: paragraphseparator}', "");
Expect(0, 10, '\P{Is_Bidi_Class: paragraphseparator}', "");
Expect(1, 10, '\P{^Is_Bidi_Class: paragraphseparator}', "");
Expect(0, 9, '\p{Is_Bidi_Class: paragraphseparator}', "");
Expect(1, 9, '\p{^Is_Bidi_Class: paragraphseparator}', "");
Expect(1, 9, '\P{Is_Bidi_Class: paragraphseparator}', "");
Expect(0, 9, '\P{^Is_Bidi_Class: paragraphseparator}', "");
Expect(1, 10, '\p{Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(0, 10, '\p{^Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(0, 10, '\P{Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(1, 10, '\P{^Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(0, 9, '\p{Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(1, 9, '\p{^Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(1, 9, '\P{Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Expect(0, 9, '\P{^Is_Bidi_Class=_PARAGRAPH_SEPARATOR}', "");
Error('\p{Is_Bc:	:=-_B}');
Error('\P{Is_Bc:	:=-_B}');
Expect(1, 10, '\p{Is_Bc:	b}', "");
Expect(0, 10, '\p{^Is_Bc:	b}', "");
Expect(0, 10, '\P{Is_Bc:	b}', "");
Expect(1, 10, '\P{^Is_Bc:	b}', "");
Expect(0, 9, '\p{Is_Bc:	b}', "");
Expect(1, 9, '\p{^Is_Bc:	b}', "");
Expect(1, 9, '\P{Is_Bc:	b}', "");
Expect(0, 9, '\P{^Is_Bc:	b}', "");
Expect(1, 10, '\p{Is_Bc: -B}', "");
Expect(0, 10, '\p{^Is_Bc: -B}', "");
Expect(0, 10, '\P{Is_Bc: -B}', "");
Expect(1, 10, '\P{^Is_Bc: -B}', "");
Expect(0, 9, '\p{Is_Bc: -B}', "");
Expect(1, 9, '\p{^Is_Bc: -B}', "");
Expect(1, 9, '\P{Is_Bc: -B}', "");
Expect(0, 9, '\P{^Is_Bc: -B}', "");
Error('\p{Bidi_Class=:=  Nonspacing	Mark}');
Error('\P{Bidi_Class=:=  Nonspacing	Mark}');
Expect(1, 879, '\p{Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Bidi_Class=_Nonspacing	mark}', "");
Expect(0, 879, '\p{^Bidi_Class=_Nonspacing	mark}', "");
Expect(0, 879, '\P{Bidi_Class=_Nonspacing	mark}', "");
Expect(1, 879, '\P{^Bidi_Class=_Nonspacing	mark}', "");
Expect(0, 767, '\p{Bidi_Class=_Nonspacing	mark}', "");
Expect(1, 767, '\p{^Bidi_Class=_Nonspacing	mark}', "");
Expect(1, 767, '\P{Bidi_Class=_Nonspacing	mark}', "");
Expect(0, 767, '\P{^Bidi_Class=_Nonspacing	mark}', "");
Error('\p{Bc:	_ nsm/a/}');
Error('\P{Bc:	_ nsm/a/}');
Expect(1, 879, '\p{Bc=nsm}', "");
Expect(0, 879, '\p{^Bc=nsm}', "");
Expect(0, 879, '\P{Bc=nsm}', "");
Expect(1, 879, '\P{^Bc=nsm}', "");
Expect(0, 767, '\p{Bc=nsm}', "");
Expect(1, 767, '\p{^Bc=nsm}', "");
Expect(1, 767, '\P{Bc=nsm}', "");
Expect(0, 767, '\P{^Bc=nsm}', "");
Expect(1, 879, '\p{Bc=  nsm}', "");
Expect(0, 879, '\p{^Bc=  nsm}', "");
Expect(0, 879, '\P{Bc=  nsm}', "");
Expect(1, 879, '\P{^Bc=  nsm}', "");
Expect(0, 767, '\p{Bc=  nsm}', "");
Expect(1, 767, '\p{^Bc=  nsm}', "");
Expect(1, 767, '\P{Bc=  nsm}', "");
Expect(0, 767, '\P{^Bc=  nsm}', "");
Error('\p{Is_Bidi_Class=/a/NONSPACINGMark}');
Error('\P{Is_Bidi_Class=/a/NONSPACINGMark}');
Expect(1, 879, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=_-NONSPACING-Mark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=_-NONSPACING-Mark}', "");
Error('\p{Is_Bc::=	-NSM}');
Error('\P{Is_Bc::=	-NSM}');
Expect(1, 879, '\p{Is_Bc: nsm}', "");
Expect(0, 879, '\p{^Is_Bc: nsm}', "");
Expect(0, 879, '\P{Is_Bc: nsm}', "");
Expect(1, 879, '\P{^Is_Bc: nsm}', "");
Expect(0, 767, '\p{Is_Bc: nsm}', "");
Expect(1, 767, '\p{^Is_Bc: nsm}', "");
Expect(1, 767, '\P{Is_Bc: nsm}', "");
Expect(0, 767, '\P{^Is_Bc: nsm}', "");
Expect(1, 879, '\p{Is_Bc=_NSM}', "");
Expect(0, 879, '\p{^Is_Bc=_NSM}', "");
Expect(0, 879, '\P{Is_Bc=_NSM}', "");
Expect(1, 879, '\P{^Is_Bc=_NSM}', "");
Expect(0, 767, '\p{Is_Bc=_NSM}', "");
Expect(1, 767, '\p{^Is_Bc=_NSM}', "");
Expect(1, 767, '\P{Is_Bc=_NSM}', "");
Expect(0, 767, '\P{^Is_Bc=_NSM}', "");
Error('\p{Bidi_Class=/a/ _european_separator}');
Error('\P{Bidi_Class=/a/ _european_separator}');
Expect(1, 43, '\p{Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\p{^Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\P{Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\P{^Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\p{Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\p{^Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\P{Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\P{^Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\p{Bidi_Class=--EUROPEANSeparator}', "");
Expect(0, 43, '\p{^Bidi_Class=--EUROPEANSeparator}', "");
Expect(0, 43, '\P{Bidi_Class=--EUROPEANSeparator}', "");
Expect(1, 43, '\P{^Bidi_Class=--EUROPEANSeparator}', "");
Expect(0, 42, '\p{Bidi_Class=--EUROPEANSeparator}', "");
Expect(1, 42, '\p{^Bidi_Class=--EUROPEANSeparator}', "");
Expect(1, 42, '\P{Bidi_Class=--EUROPEANSeparator}', "");
Expect(0, 42, '\P{^Bidi_Class=--EUROPEANSeparator}', "");
Error('\p{Bc=_:=es}');
Error('\P{Bc=_:=es}');
Expect(1, 43, '\p{Bc=es}', "");
Expect(0, 43, '\p{^Bc=es}', "");
Expect(0, 43, '\P{Bc=es}', "");
Expect(1, 43, '\P{^Bc=es}', "");
Expect(0, 42, '\p{Bc=es}', "");
Expect(1, 42, '\p{^Bc=es}', "");
Expect(1, 42, '\P{Bc=es}', "");
Expect(0, 42, '\P{^Bc=es}', "");
Expect(1, 43, '\p{Bc= ES}', "");
Expect(0, 43, '\p{^Bc= ES}', "");
Expect(0, 43, '\P{Bc= ES}', "");
Expect(1, 43, '\P{^Bc= ES}', "");
Expect(0, 42, '\p{Bc= ES}', "");
Expect(1, 42, '\p{^Bc= ES}', "");
Expect(1, 42, '\P{Bc= ES}', "");
Expect(0, 42, '\P{^Bc= ES}', "");
Error('\p{Is_Bidi_Class=	_European/a/Separator}');
Error('\P{Is_Bidi_Class=	_European/a/Separator}');
Expect(1, 43, '\p{Is_Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\p{^Is_Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\P{Is_Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\P{^Is_Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\p{Is_Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\p{^Is_Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\P{Is_Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\P{^Is_Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\p{Is_Bidi_Class= -European SEPARATOR}', "");
Expect(0, 43, '\p{^Is_Bidi_Class= -European SEPARATOR}', "");
Expect(0, 43, '\P{Is_Bidi_Class= -European SEPARATOR}', "");
Expect(1, 43, '\P{^Is_Bidi_Class= -European SEPARATOR}', "");
Expect(0, 42, '\p{Is_Bidi_Class= -European SEPARATOR}', "");
Expect(1, 42, '\p{^Is_Bidi_Class= -European SEPARATOR}', "");
Expect(1, 42, '\P{Is_Bidi_Class= -European SEPARATOR}', "");
Expect(0, 42, '\P{^Is_Bidi_Class= -European SEPARATOR}', "");
Error('\p{Is_Bc=/a/-ES}');
Error('\P{Is_Bc=/a/-ES}');
Expect(1, 43, '\p{Is_Bc=es}', "");
Expect(0, 43, '\p{^Is_Bc=es}', "");
Expect(0, 43, '\P{Is_Bc=es}', "");
Expect(1, 43, '\P{^Is_Bc=es}', "");
Expect(0, 42, '\p{Is_Bc=es}', "");
Expect(1, 42, '\p{^Is_Bc=es}', "");
Expect(1, 42, '\P{Is_Bc=es}', "");
Expect(0, 42, '\P{^Is_Bc=es}', "");
Expect(1, 43, '\p{Is_Bc:    es}', "");
Expect(0, 43, '\p{^Is_Bc:    es}', "");
Expect(0, 43, '\P{Is_Bc:    es}', "");
Expect(1, 43, '\P{^Is_Bc:    es}', "");
Expect(0, 42, '\p{Is_Bc:    es}', "");
Expect(1, 42, '\p{^Is_Bc:    es}', "");
Expect(1, 42, '\P{Is_Bc:    es}', "");
Expect(0, 42, '\P{^Is_Bc:    es}', "");
Error('\p{Bidi_Class=	_EUROPEAN/a/Number}');
Error('\P{Bidi_Class=	_EUROPEAN/a/Number}');
Expect(1, 57, '\p{Bidi_Class=europeannumber}', "");
Expect(0, 57, '\p{^Bidi_Class=europeannumber}', "");
Expect(0, 57, '\P{Bidi_Class=europeannumber}', "");
Expect(1, 57, '\P{^Bidi_Class=europeannumber}', "");
Expect(0, 47, '\p{Bidi_Class=europeannumber}', "");
Expect(1, 47, '\p{^Bidi_Class=europeannumber}', "");
Expect(1, 47, '\P{Bidi_Class=europeannumber}', "");
Expect(0, 47, '\P{^Bidi_Class=europeannumber}', "");
Expect(1, 57, '\p{Bidi_Class=_Europeannumber}', "");
Expect(0, 57, '\p{^Bidi_Class=_Europeannumber}', "");
Expect(0, 57, '\P{Bidi_Class=_Europeannumber}', "");
Expect(1, 57, '\P{^Bidi_Class=_Europeannumber}', "");
Expect(0, 47, '\p{Bidi_Class=_Europeannumber}', "");
Expect(1, 47, '\p{^Bidi_Class=_Europeannumber}', "");
Expect(1, 47, '\P{Bidi_Class=_Europeannumber}', "");
Expect(0, 47, '\P{^Bidi_Class=_Europeannumber}', "");
Error('\p{Bc=/a/		EN}');
Error('\P{Bc=/a/		EN}');
Expect(1, 57, '\p{Bc=en}', "");
Expect(0, 57, '\p{^Bc=en}', "");
Expect(0, 57, '\P{Bc=en}', "");
Expect(1, 57, '\P{^Bc=en}', "");
Expect(0, 47, '\p{Bc=en}', "");
Expect(1, 47, '\p{^Bc=en}', "");
Expect(1, 47, '\P{Bc=en}', "");
Expect(0, 47, '\P{^Bc=en}', "");
Expect(1, 57, '\p{Bc=	 en}', "");
Expect(0, 57, '\p{^Bc=	 en}', "");
Expect(0, 57, '\P{Bc=	 en}', "");
Expect(1, 57, '\P{^Bc=	 en}', "");
Expect(0, 47, '\p{Bc=	 en}', "");
Expect(1, 47, '\p{^Bc=	 en}', "");
Expect(1, 47, '\P{Bc=	 en}', "");
Expect(0, 47, '\P{^Bc=	 en}', "");
Error('\p{Is_Bidi_Class=:=- European_Number}');
Error('\P{Is_Bidi_Class=:=- European_Number}');
Expect(1, 57, '\p{Is_Bidi_Class: europeannumber}', "");
Expect(0, 57, '\p{^Is_Bidi_Class: europeannumber}', "");
Expect(0, 57, '\P{Is_Bidi_Class: europeannumber}', "");
Expect(1, 57, '\P{^Is_Bidi_Class: europeannumber}', "");
Expect(0, 47, '\p{Is_Bidi_Class: europeannumber}', "");
Expect(1, 47, '\p{^Is_Bidi_Class: europeannumber}', "");
Expect(1, 47, '\P{Is_Bidi_Class: europeannumber}', "");
Expect(0, 47, '\P{^Is_Bidi_Class: europeannumber}', "");
Expect(1, 57, '\p{Is_Bidi_Class:	 europeanNumber}', "");
Expect(0, 57, '\p{^Is_Bidi_Class:	 europeanNumber}', "");
Expect(0, 57, '\P{Is_Bidi_Class:	 europeanNumber}', "");
Expect(1, 57, '\P{^Is_Bidi_Class:	 europeanNumber}', "");
Expect(0, 47, '\p{Is_Bidi_Class:	 europeanNumber}', "");
Expect(1, 47, '\p{^Is_Bidi_Class:	 europeanNumber}', "");
Expect(1, 47, '\P{Is_Bidi_Class:	 europeanNumber}', "");
Expect(0, 47, '\P{^Is_Bidi_Class:	 europeanNumber}', "");
Error('\p{Is_Bc=/a/	-EN}');
Error('\P{Is_Bc=/a/	-EN}');
Expect(1, 57, '\p{Is_Bc=en}', "");
Expect(0, 57, '\p{^Is_Bc=en}', "");
Expect(0, 57, '\P{Is_Bc=en}', "");
Expect(1, 57, '\P{^Is_Bc=en}', "");
Expect(0, 47, '\p{Is_Bc=en}', "");
Expect(1, 47, '\p{^Is_Bc=en}', "");
Expect(1, 47, '\P{Is_Bc=en}', "");
Expect(0, 47, '\P{^Is_Bc=en}', "");
Expect(1, 57, '\p{Is_Bc=	EN}', "");
Expect(0, 57, '\p{^Is_Bc=	EN}', "");
Expect(0, 57, '\P{Is_Bc=	EN}', "");
Expect(1, 57, '\P{^Is_Bc=	EN}', "");
Expect(0, 47, '\p{Is_Bc=	EN}', "");
Expect(1, 47, '\p{^Is_Bc=	EN}', "");
Expect(1, 47, '\P{Is_Bc=	EN}', "");
Expect(0, 47, '\P{^Is_Bc=	EN}', "");
Error('\p{Bidi_Class=_European:=terminator}');
Error('\P{Bidi_Class=_European:=terminator}');
Expect(1, 37, '\p{Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\p{^Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\P{Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\P{^Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\p{Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\p{^Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\P{Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\P{^Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\p{Bidi_Class=_European	Terminator}', "");
Expect(0, 37, '\p{^Bidi_Class=_European	Terminator}', "");
Expect(0, 37, '\P{Bidi_Class=_European	Terminator}', "");
Expect(1, 37, '\P{^Bidi_Class=_European	Terminator}', "");
Expect(0, 34, '\p{Bidi_Class=_European	Terminator}', "");
Expect(1, 34, '\p{^Bidi_Class=_European	Terminator}', "");
Expect(1, 34, '\P{Bidi_Class=_European	Terminator}', "");
Expect(0, 34, '\P{^Bidi_Class=_European	Terminator}', "");
Error('\p{Bc= _ET/a/}');
Error('\P{Bc= _ET/a/}');
Expect(1, 37, '\p{Bc=et}', "");
Expect(0, 37, '\p{^Bc=et}', "");
Expect(0, 37, '\P{Bc=et}', "");
Expect(1, 37, '\P{^Bc=et}', "");
Expect(0, 34, '\p{Bc=et}', "");
Expect(1, 34, '\p{^Bc=et}', "");
Expect(1, 34, '\P{Bc=et}', "");
Expect(0, 34, '\P{^Bc=et}', "");
Expect(1, 37, '\p{Bc=_-ET}', "");
Expect(0, 37, '\p{^Bc=_-ET}', "");
Expect(0, 37, '\P{Bc=_-ET}', "");
Expect(1, 37, '\P{^Bc=_-ET}', "");
Expect(0, 34, '\p{Bc=_-ET}', "");
Expect(1, 34, '\p{^Bc=_-ET}', "");
Expect(1, 34, '\P{Bc=_-ET}', "");
Expect(0, 34, '\P{^Bc=_-ET}', "");
Error('\p{Is_Bidi_Class=  European:=Terminator}');
Error('\P{Is_Bidi_Class=  European:=Terminator}');
Expect(1, 37, '\p{Is_Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\p{Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class=  EUROPEAN terminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class=  EUROPEAN terminator}', "");
Error('\p{Is_Bc=	/a/ET}');
Error('\P{Is_Bc=	/a/ET}');
Expect(1, 37, '\p{Is_Bc=et}', "");
Expect(0, 37, '\p{^Is_Bc=et}', "");
Expect(0, 37, '\P{Is_Bc=et}', "");
Expect(1, 37, '\P{^Is_Bc=et}', "");
Expect(0, 34, '\p{Is_Bc=et}', "");
Expect(1, 34, '\p{^Is_Bc=et}', "");
Expect(1, 34, '\P{Is_Bc=et}', "");
Expect(0, 34, '\P{^Is_Bc=et}', "");
Expect(1, 37, '\p{Is_Bc:   ET}', "");
Expect(0, 37, '\p{^Is_Bc:   ET}', "");
Expect(0, 37, '\P{Is_Bc:   ET}', "");
Expect(1, 37, '\P{^Is_Bc:   ET}', "");
Expect(0, 34, '\p{Is_Bc:   ET}', "");
Expect(1, 34, '\p{^Is_Bc:   ET}', "");
Expect(1, 34, '\P{Is_Bc:   ET}', "");
Expect(0, 34, '\P{^Is_Bc:   ET}', "");
Error('\p{Bidi_Class= :=Arabic Number}');
Error('\P{Bidi_Class= :=Arabic Number}');
Expect(1, 1539, '\p{Bidi_Class:arabicnumber}', "");
Expect(0, 1539, '\p{^Bidi_Class:arabicnumber}', "");
Expect(0, 1539, '\P{Bidi_Class:arabicnumber}', "");
Expect(1, 1539, '\P{^Bidi_Class:arabicnumber}', "");
Expect(0, 1535, '\p{Bidi_Class:arabicnumber}', "");
Expect(1, 1535, '\p{^Bidi_Class:arabicnumber}', "");
Expect(1, 1535, '\P{Bidi_Class:arabicnumber}', "");
Expect(0, 1535, '\P{^Bidi_Class:arabicnumber}', "");
Expect(1, 1539, '\p{Bidi_Class=--ArabicNUMBER}', "");
Expect(0, 1539, '\p{^Bidi_Class=--ArabicNUMBER}', "");
Expect(0, 1539, '\P{Bidi_Class=--ArabicNUMBER}', "");
Expect(1, 1539, '\P{^Bidi_Class=--ArabicNUMBER}', "");
Expect(0, 1535, '\p{Bidi_Class=--ArabicNUMBER}', "");
Expect(1, 1535, '\p{^Bidi_Class=--ArabicNUMBER}', "");
Expect(1, 1535, '\P{Bidi_Class=--ArabicNUMBER}', "");
Expect(0, 1535, '\P{^Bidi_Class=--ArabicNUMBER}', "");
Error('\p{Bc=-/a/AN}');
Error('\P{Bc=-/a/AN}');
Expect(1, 1539, '\p{Bc=an}', "");
Expect(0, 1539, '\p{^Bc=an}', "");
Expect(0, 1539, '\P{Bc=an}', "");
Expect(1, 1539, '\P{^Bc=an}', "");
Expect(0, 1535, '\p{Bc=an}', "");
Expect(1, 1535, '\p{^Bc=an}', "");
Expect(1, 1535, '\P{Bc=an}', "");
Expect(0, 1535, '\P{^Bc=an}', "");
Expect(1, 1539, '\p{Bc= -AN}', "");
Expect(0, 1539, '\p{^Bc= -AN}', "");
Expect(0, 1539, '\P{Bc= -AN}', "");
Expect(1, 1539, '\P{^Bc= -AN}', "");
Expect(0, 1535, '\p{Bc= -AN}', "");
Expect(1, 1535, '\p{^Bc= -AN}', "");
Expect(1, 1535, '\P{Bc= -AN}', "");
Expect(0, 1535, '\P{^Bc= -AN}', "");
Error('\p{Is_Bidi_Class=_-ARABIC	Number:=}');
Error('\P{Is_Bidi_Class=_-ARABIC	Number:=}');
Expect(1, 1539, '\p{Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\P{Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\p{Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\P{Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\p{Is_Bidi_Class= _Arabic	Number}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class= _Arabic	Number}', "");
Expect(0, 1539, '\P{Is_Bidi_Class= _Arabic	Number}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class= _Arabic	Number}', "");
Expect(0, 1535, '\p{Is_Bidi_Class= _Arabic	Number}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class= _Arabic	Number}', "");
Expect(1, 1535, '\P{Is_Bidi_Class= _Arabic	Number}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class= _Arabic	Number}', "");
Error('\p{Is_Bc=	_AN/a/}');
Error('\P{Is_Bc=	_AN/a/}');
Expect(1, 1539, '\p{Is_Bc=an}', "");
Expect(0, 1539, '\p{^Is_Bc=an}', "");
Expect(0, 1539, '\P{Is_Bc=an}', "");
Expect(1, 1539, '\P{^Is_Bc=an}', "");
Expect(0, 1535, '\p{Is_Bc=an}', "");
Expect(1, 1535, '\p{^Is_Bc=an}', "");
Expect(1, 1535, '\P{Is_Bc=an}', "");
Expect(0, 1535, '\P{^Is_Bc=an}', "");
Expect(1, 1539, '\p{Is_Bc= AN}', "");
Expect(0, 1539, '\p{^Is_Bc= AN}', "");
Expect(0, 1539, '\P{Is_Bc= AN}', "");
Expect(1, 1539, '\P{^Is_Bc= AN}', "");
Expect(0, 1535, '\p{Is_Bc= AN}', "");
Expect(1, 1535, '\p{^Is_Bc= AN}', "");
Expect(1, 1535, '\P{Is_Bc= AN}', "");
Expect(0, 1535, '\P{^Is_Bc= AN}', "");
Error('\p{Bidi_Class= _right To:=Left}');
Error('\P{Bidi_Class= _right To:=Left}');
Expect(1, 1424, '\p{Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\p{^Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\P{Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\P{^Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\p{Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\p{^Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\P{Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\P{^Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\p{Bidi_Class=-_Right-toLeft}', "");
Expect(0, 1424, '\p{^Bidi_Class=-_Right-toLeft}', "");
Expect(0, 1424, '\P{Bidi_Class=-_Right-toLeft}', "");
Expect(1, 1424, '\P{^Bidi_Class=-_Right-toLeft}', "");
Expect(0, 1423, '\p{Bidi_Class=-_Right-toLeft}', "");
Expect(1, 1423, '\p{^Bidi_Class=-_Right-toLeft}', "");
Expect(1, 1423, '\P{Bidi_Class=-_Right-toLeft}', "");
Expect(0, 1423, '\P{^Bidi_Class=-_Right-toLeft}', "");
Error('\p{Bc=-	r:=}');
Error('\P{Bc=-	r:=}');
Expect(1, 1424, '\p{Bc:r}', "");
Expect(0, 1424, '\p{^Bc:r}', "");
Expect(0, 1424, '\P{Bc:r}', "");
Expect(1, 1424, '\P{^Bc:r}', "");
Expect(0, 1423, '\p{Bc:r}', "");
Expect(1, 1423, '\p{^Bc:r}', "");
Expect(1, 1423, '\P{Bc:r}', "");
Expect(0, 1423, '\P{^Bc:r}', "");
Expect(1, 1424, '\p{Bc=	r}', "");
Expect(0, 1424, '\p{^Bc=	r}', "");
Expect(0, 1424, '\P{Bc=	r}', "");
Expect(1, 1424, '\P{^Bc=	r}', "");
Expect(0, 1423, '\p{Bc=	r}', "");
Expect(1, 1423, '\p{^Bc=	r}', "");
Expect(1, 1423, '\P{Bc=	r}', "");
Expect(0, 1423, '\P{^Bc=	r}', "");
Error('\p{Is_Bidi_Class= /a/right	TO	Left}');
Error('\P{Is_Bidi_Class= /a/right	TO	Left}');
Expect(1, 1424, '\p{Is_Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\P{Is_Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\p{Is_Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\P{Is_Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\p{Is_Bidi_Class=	RightTO left}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class=	RightTO left}', "");
Expect(0, 1424, '\P{Is_Bidi_Class=	RightTO left}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class=	RightTO left}', "");
Expect(0, 1423, '\p{Is_Bidi_Class=	RightTO left}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class=	RightTO left}', "");
Expect(1, 1423, '\P{Is_Bidi_Class=	RightTO left}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class=	RightTO left}', "");
Error('\p{Is_Bc=:=-_R}');
Error('\P{Is_Bc=:=-_R}');
Expect(1, 1424, '\p{Is_Bc=r}', "");
Expect(0, 1424, '\p{^Is_Bc=r}', "");
Expect(0, 1424, '\P{Is_Bc=r}', "");
Expect(1, 1424, '\P{^Is_Bc=r}', "");
Expect(0, 1423, '\p{Is_Bc=r}', "");
Expect(1, 1423, '\p{^Is_Bc=r}', "");
Expect(1, 1423, '\P{Is_Bc=r}', "");
Expect(0, 1423, '\P{^Is_Bc=r}', "");
Expect(1, 1424, '\p{Is_Bc=--r}', "");
Expect(0, 1424, '\p{^Is_Bc=--r}', "");
Expect(0, 1424, '\P{Is_Bc=--r}', "");
Expect(1, 1424, '\P{^Is_Bc=--r}', "");
Expect(0, 1423, '\p{Is_Bc=--r}', "");
Expect(1, 1423, '\p{^Is_Bc=--r}', "");
Expect(1, 1423, '\P{Is_Bc=--r}', "");
Expect(0, 1423, '\P{^Is_Bc=--r}', "");
Error('\p{Radical=:=--Yes}');
Error('\P{Radical=:=--Yes}');
Expect(1, 11929, '\p{Radical=yes}', "");
Expect(0, 11929, '\p{^Radical=yes}', "");
Expect(0, 11929, '\P{Radical=yes}', "");
Expect(1, 11929, '\P{^Radical=yes}', "");
Expect(0, 11903, '\p{Radical=yes}', "");
Expect(1, 11903, '\p{^Radical=yes}', "");
Expect(1, 11903, '\P{Radical=yes}', "");
Expect(0, 11903, '\P{^Radical=yes}', "");
Expect(1, 11929, '\p{Radical=- YES}', "");
Expect(0, 11929, '\p{^Radical=- YES}', "");
Expect(0, 11929, '\P{Radical=- YES}', "");
Expect(1, 11929, '\P{^Radical=- YES}', "");
Expect(0, 11903, '\p{Radical=- YES}', "");
Expect(1, 11903, '\p{^Radical=- YES}', "");
Expect(1, 11903, '\P{Radical=- YES}', "");
Expect(0, 11903, '\P{^Radical=- YES}', "");
Error('\p{Is_Radical=/a/y}');
Error('\P{Is_Radical=/a/y}');
Expect(1, 11929, '\p{Is_Radical=y}', "");
Expect(0, 11929, '\p{^Is_Radical=y}', "");
Expect(0, 11929, '\P{Is_Radical=y}', "");
Expect(1, 11929, '\P{^Is_Radical=y}', "");
Expect(0, 11903, '\p{Is_Radical=y}', "");
Expect(1, 11903, '\p{^Is_Radical=y}', "");
Expect(1, 11903, '\P{Is_Radical=y}', "");
Expect(0, 11903, '\P{^Is_Radical=y}', "");
Expect(1, 11929, '\p{Is_Radical=	-y}', "");
Expect(0, 11929, '\p{^Is_Radical=	-y}', "");
Expect(0, 11929, '\P{Is_Radical=	-y}', "");
Expect(1, 11929, '\P{^Is_Radical=	-y}', "");
Expect(0, 11903, '\p{Is_Radical=	-y}', "");
Expect(1, 11903, '\p{^Is_Radical=	-y}', "");
Expect(1, 11903, '\P{Is_Radical=	-y}', "");
Expect(0, 11903, '\P{^Is_Radical=	-y}', "");
Error('\p{Radical=/a/T}');
Error('\P{Radical=/a/T}');
Expect(1, 11929, '\p{Radical=t}', "");
Expect(0, 11929, '\p{^Radical=t}', "");
Expect(0, 11929, '\P{Radical=t}', "");
Expect(1, 11929, '\P{^Radical=t}', "");
Expect(0, 11903, '\p{Radical=t}', "");
Expect(1, 11903, '\p{^Radical=t}', "");
Expect(1, 11903, '\P{Radical=t}', "");
Expect(0, 11903, '\P{^Radical=t}', "");
Expect(1, 11929, '\p{Radical= t}', "");
Expect(0, 11929, '\p{^Radical= t}', "");
Expect(0, 11929, '\P{Radical= t}', "");
Expect(1, 11929, '\P{^Radical= t}', "");
Expect(0, 11903, '\p{Radical= t}', "");
Expect(1, 11903, '\p{^Radical= t}', "");
Expect(1, 11903, '\P{Radical= t}', "");
Expect(0, 11903, '\P{^Radical= t}', "");
Error('\p{Is_Radical: /a/_	True}');
Error('\P{Is_Radical: /a/_	True}');
Expect(1, 11929, '\p{Is_Radical=true}', "");
Expect(0, 11929, '\p{^Is_Radical=true}', "");
Expect(0, 11929, '\P{Is_Radical=true}', "");
Expect(1, 11929, '\P{^Is_Radical=true}', "");
Expect(0, 11903, '\p{Is_Radical=true}', "");
Expect(1, 11903, '\p{^Is_Radical=true}', "");
Expect(1, 11903, '\P{Is_Radical=true}', "");
Expect(0, 11903, '\P{^Is_Radical=true}', "");
Expect(1, 11929, '\p{Is_Radical=TRUE}', "");
Expect(0, 11929, '\p{^Is_Radical=TRUE}', "");
Expect(0, 11929, '\P{Is_Radical=TRUE}', "");
Expect(1, 11929, '\P{^Is_Radical=TRUE}', "");
Expect(0, 11903, '\p{Is_Radical=TRUE}', "");
Expect(1, 11903, '\p{^Is_Radical=TRUE}', "");
Expect(1, 11903, '\P{Is_Radical=TRUE}', "");
Expect(0, 11903, '\P{^Is_Radical=TRUE}', "");
Error('\p{Radical= /a/No}');
Error('\P{Radical= /a/No}');
Expect(1, 11903, '\p{Radical=no}', "");
Expect(0, 11903, '\p{^Radical=no}', "");
Expect(0, 11903, '\P{Radical=no}', "");
Expect(1, 11903, '\P{^Radical=no}', "");
Expect(0, 11929, '\p{Radical=no}', "");
Expect(1, 11929, '\p{^Radical=no}', "");
Expect(1, 11929, '\P{Radical=no}', "");
Expect(0, 11929, '\P{^Radical=no}', "");
Expect(1, 11903, '\p{Radical:   No}', "");
Expect(0, 11903, '\p{^Radical:   No}', "");
Expect(0, 11903, '\P{Radical:   No}', "");
Expect(1, 11903, '\P{^Radical:   No}', "");
Expect(0, 11929, '\p{Radical:   No}', "");
Expect(1, 11929, '\p{^Radical:   No}', "");
Expect(1, 11929, '\P{Radical:   No}', "");
Expect(0, 11929, '\P{^Radical:   No}', "");
Error('\p{Is_Radical=	 N:=}');
Error('\P{Is_Radical=	 N:=}');
Expect(1, 11903, '\p{Is_Radical=n}', "");
Expect(0, 11903, '\p{^Is_Radical=n}', "");
Expect(0, 11903, '\P{Is_Radical=n}', "");
Expect(1, 11903, '\P{^Is_Radical=n}', "");
Expect(0, 11929, '\p{Is_Radical=n}', "");
Expect(1, 11929, '\p{^Is_Radical=n}', "");
Expect(1, 11929, '\P{Is_Radical=n}', "");
Expect(0, 11929, '\P{^Is_Radical=n}', "");
Expect(1, 11903, '\p{Is_Radical=_n}', "");
Expect(0, 11903, '\p{^Is_Radical=_n}', "");
Expect(0, 11903, '\P{Is_Radical=_n}', "");
Expect(1, 11903, '\P{^Is_Radical=_n}', "");
Expect(0, 11929, '\p{Is_Radical=_n}', "");
Expect(1, 11929, '\p{^Is_Radical=_n}', "");
Expect(1, 11929, '\P{Is_Radical=_n}', "");
Expect(0, 11929, '\P{^Is_Radical=_n}', "");
Error('\p{Radical:/a/__f}');
Error('\P{Radical:/a/__f}');
Expect(1, 11903, '\p{Radical=f}', "");
Expect(0, 11903, '\p{^Radical=f}', "");
Expect(0, 11903, '\P{Radical=f}', "");
Expect(1, 11903, '\P{^Radical=f}', "");
Expect(0, 11929, '\p{Radical=f}', "");
Expect(1, 11929, '\p{^Radical=f}', "");
Expect(1, 11929, '\P{Radical=f}', "");
Expect(0, 11929, '\P{^Radical=f}', "");
Expect(1, 11903, '\p{Radical=		F}', "");
Expect(0, 11903, '\p{^Radical=		F}', "");
Expect(0, 11903, '\P{Radical=		F}', "");
Expect(1, 11903, '\P{^Radical=		F}', "");
Expect(0, 11929, '\p{Radical=		F}', "");
Expect(1, 11929, '\p{^Radical=		F}', "");
Expect(1, 11929, '\P{Radical=		F}', "");
Expect(0, 11929, '\P{^Radical=		F}', "");
Error('\p{Is_Radical= _False/a/}');
Error('\P{Is_Radical= _False/a/}');
Expect(1, 11903, '\p{Is_Radical=false}', "");
Expect(0, 11903, '\p{^Is_Radical=false}', "");
Expect(0, 11903, '\P{Is_Radical=false}', "");
Expect(1, 11903, '\P{^Is_Radical=false}', "");
Expect(0, 11929, '\p{Is_Radical=false}', "");
Expect(1, 11929, '\p{^Is_Radical=false}', "");
Expect(1, 11929, '\P{Is_Radical=false}', "");
Expect(0, 11929, '\P{^Is_Radical=false}', "");
Expect(1, 11903, '\p{Is_Radical=- false}', "");
Expect(0, 11903, '\p{^Is_Radical=- false}', "");
Expect(0, 11903, '\P{Is_Radical=- false}', "");
Expect(1, 11903, '\P{^Is_Radical=- false}', "");
Expect(0, 11929, '\p{Is_Radical=- false}', "");
Expect(1, 11929, '\p{^Is_Radical=- false}', "");
Expect(1, 11929, '\P{Is_Radical=- false}', "");
Expect(0, 11929, '\P{^Is_Radical=- false}', "");
Error('\p{Quotation_Mark=	/a/yes}');
Error('\P{Quotation_Mark=	/a/yes}');
Expect(1, 34, '\p{Quotation_Mark=yes}', "");
Expect(0, 34, '\p{^Quotation_Mark=yes}', "");
Expect(0, 34, '\P{Quotation_Mark=yes}', "");
Expect(1, 34, '\P{^Quotation_Mark=yes}', "");
Expect(0, 33, '\p{Quotation_Mark=yes}', "");
Expect(1, 33, '\p{^Quotation_Mark=yes}', "");
Expect(1, 33, '\P{Quotation_Mark=yes}', "");
Expect(0, 33, '\P{^Quotation_Mark=yes}', "");
Expect(1, 34, '\p{Quotation_Mark= 	Yes}', "");
Expect(0, 34, '\p{^Quotation_Mark= 	Yes}', "");
Expect(0, 34, '\P{Quotation_Mark= 	Yes}', "");
Expect(1, 34, '\P{^Quotation_Mark= 	Yes}', "");
Expect(0, 33, '\p{Quotation_Mark= 	Yes}', "");
Expect(1, 33, '\p{^Quotation_Mark= 	Yes}', "");
Expect(1, 33, '\P{Quotation_Mark= 	Yes}', "");
Expect(0, 33, '\P{^Quotation_Mark= 	Yes}', "");
Error('\p{QMark=-:=Y}');
Error('\P{QMark=-:=Y}');
Expect(1, 34, '\p{QMark: y}', "");
Expect(0, 34, '\p{^QMark: y}', "");
Expect(0, 34, '\P{QMark: y}', "");
Expect(1, 34, '\P{^QMark: y}', "");
Expect(0, 33, '\p{QMark: y}', "");
Expect(1, 33, '\p{^QMark: y}', "");
Expect(1, 33, '\P{QMark: y}', "");
Expect(0, 33, '\P{^QMark: y}', "");
Expect(1, 34, '\p{QMark:	 -y}', "");
Expect(0, 34, '\p{^QMark:	 -y}', "");
Expect(0, 34, '\P{QMark:	 -y}', "");
Expect(1, 34, '\P{^QMark:	 -y}', "");
Expect(0, 33, '\p{QMark:	 -y}', "");
Expect(1, 33, '\p{^QMark:	 -y}', "");
Expect(1, 33, '\P{QMark:	 -y}', "");
Expect(0, 33, '\P{^QMark:	 -y}', "");
Error('\p{Is_Quotation_Mark=:=	T}');
Error('\P{Is_Quotation_Mark=:=	T}');
Expect(1, 34, '\p{Is_Quotation_Mark:	t}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark:	t}', "");
Expect(0, 34, '\P{Is_Quotation_Mark:	t}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark:	t}', "");
Expect(0, 33, '\p{Is_Quotation_Mark:	t}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark:	t}', "");
Expect(1, 33, '\P{Is_Quotation_Mark:	t}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark:	t}', "");
Expect(1, 34, '\p{Is_Quotation_Mark=_T}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark=_T}', "");
Expect(0, 34, '\P{Is_Quotation_Mark=_T}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark=_T}', "");
Expect(0, 33, '\p{Is_Quotation_Mark=_T}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark=_T}', "");
Expect(1, 33, '\P{Is_Quotation_Mark=_T}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark=_T}', "");
Error('\p{Is_QMark=	True/a/}');
Error('\P{Is_QMark=	True/a/}');
Expect(1, 34, '\p{Is_QMark=true}', "");
Expect(0, 34, '\p{^Is_QMark=true}', "");
Expect(0, 34, '\P{Is_QMark=true}', "");
Expect(1, 34, '\P{^Is_QMark=true}', "");
Expect(0, 33, '\p{Is_QMark=true}', "");
Expect(1, 33, '\p{^Is_QMark=true}', "");
Expect(1, 33, '\P{Is_QMark=true}', "");
Expect(0, 33, '\P{^Is_QMark=true}', "");
Expect(1, 34, '\p{Is_QMark:   	_True}', "");
Expect(0, 34, '\p{^Is_QMark:   	_True}', "");
Expect(0, 34, '\P{Is_QMark:   	_True}', "");
Expect(1, 34, '\P{^Is_QMark:   	_True}', "");
Expect(0, 33, '\p{Is_QMark:   	_True}', "");
Expect(1, 33, '\p{^Is_QMark:   	_True}', "");
Expect(1, 33, '\P{Is_QMark:   	_True}', "");
Expect(0, 33, '\P{^Is_QMark:   	_True}', "");
Error('\p{Quotation_Mark=	No:=}');
Error('\P{Quotation_Mark=	No:=}');
Expect(1, 33, '\p{Quotation_Mark=no}', "");
Expect(0, 33, '\p{^Quotation_Mark=no}', "");
Expect(0, 33, '\P{Quotation_Mark=no}', "");
Expect(1, 33, '\P{^Quotation_Mark=no}', "");
Expect(0, 34, '\p{Quotation_Mark=no}', "");
Expect(1, 34, '\p{^Quotation_Mark=no}', "");
Expect(1, 34, '\P{Quotation_Mark=no}', "");
Expect(0, 34, '\P{^Quotation_Mark=no}', "");
Expect(1, 33, '\p{Quotation_Mark:   		No}', "");
Expect(0, 33, '\p{^Quotation_Mark:   		No}', "");
Expect(0, 33, '\P{Quotation_Mark:   		No}', "");
Expect(1, 33, '\P{^Quotation_Mark:   		No}', "");
Expect(0, 34, '\p{Quotation_Mark:   		No}', "");
Expect(1, 34, '\p{^Quotation_Mark:   		No}', "");
Expect(1, 34, '\P{Quotation_Mark:   		No}', "");
Expect(0, 34, '\P{^Quotation_Mark:   		No}', "");
Error('\p{QMark=/a/ 	N}');
Error('\P{QMark=/a/ 	N}');
Expect(1, 33, '\p{QMark=n}', "");
Expect(0, 33, '\p{^QMark=n}', "");
Expect(0, 33, '\P{QMark=n}', "");
Expect(1, 33, '\P{^QMark=n}', "");
Expect(0, 34, '\p{QMark=n}', "");
Expect(1, 34, '\p{^QMark=n}', "");
Expect(1, 34, '\P{QMark=n}', "");
Expect(0, 34, '\P{^QMark=n}', "");
Expect(1, 33, '\p{QMark=_N}', "");
Expect(0, 33, '\p{^QMark=_N}', "");
Expect(0, 33, '\P{QMark=_N}', "");
Expect(1, 33, '\P{^QMark=_N}', "");
Expect(0, 34, '\p{QMark=_N}', "");
Expect(1, 34, '\p{^QMark=_N}', "");
Expect(1, 34, '\P{QMark=_N}', "");
Expect(0, 34, '\P{^QMark=_N}', "");
Error('\p{Is_Quotation_Mark:   -/a/F}');
Error('\P{Is_Quotation_Mark:   -/a/F}');
Expect(1, 33, '\p{Is_Quotation_Mark=f}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark=f}', "");
Expect(0, 33, '\P{Is_Quotation_Mark=f}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark=f}', "");
Expect(0, 34, '\p{Is_Quotation_Mark=f}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark=f}', "");
Expect(1, 34, '\P{Is_Quotation_Mark=f}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark=f}', "");
Expect(1, 33, '\p{Is_Quotation_Mark=_ F}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark=_ F}', "");
Expect(0, 33, '\P{Is_Quotation_Mark=_ F}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark=_ F}', "");
Expect(0, 34, '\p{Is_Quotation_Mark=_ F}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark=_ F}', "");
Expect(1, 34, '\P{Is_Quotation_Mark=_ F}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark=_ F}', "");
Error('\p{Is_QMark:   /a/False}');
Error('\P{Is_QMark:   /a/False}');
Expect(1, 33, '\p{Is_QMark=false}', "");
Expect(0, 33, '\p{^Is_QMark=false}', "");
Expect(0, 33, '\P{Is_QMark=false}', "");
Expect(1, 33, '\P{^Is_QMark=false}', "");
Expect(0, 34, '\p{Is_QMark=false}', "");
Expect(1, 34, '\p{^Is_QMark=false}', "");
Expect(1, 34, '\P{Is_QMark=false}', "");
Expect(0, 34, '\P{^Is_QMark=false}', "");
Expect(1, 33, '\p{Is_QMark=_	False}', "");
Expect(0, 33, '\p{^Is_QMark=_	False}', "");
Expect(0, 33, '\P{Is_QMark=_	False}', "");
Expect(1, 33, '\P{^Is_QMark=_	False}', "");
Expect(0, 34, '\p{Is_QMark=_	False}', "");
Expect(1, 34, '\p{^Is_QMark=_	False}', "");
Expect(1, 34, '\P{Is_QMark=_	False}', "");
Expect(0, 34, '\P{^Is_QMark=_	False}', "");
Error('\p{Expands_On_NFD=Yes}');
Error('\P{Expands_On_NFD=Yes}');
Error('\p{XO_NFD: Y}');
Error('\P{XO_NFD: Y}');
Error('\p{Is_Expands_On_NFD=T}');
Error('\P{Is_Expands_On_NFD=T}');
Error('\p{Is_XO_NFD=True}');
Error('\P{Is_XO_NFD=True}');
Error('\p{Expands_On_NFD=No}');
Error('\P{Expands_On_NFD=No}');
Error('\p{XO_NFD=N}');
Error('\P{XO_NFD=N}');
Error('\p{Is_Expands_On_NFD=F}');
Error('\P{Is_Expands_On_NFD=F}');
Error('\p{Is_XO_NFD=False}');
Error('\P{Is_XO_NFD=False}');
Error('\p{Soft_Dotted= :=Yes}');
Error('\P{Soft_Dotted= :=Yes}');
Expect(1, 106, '\p{Soft_Dotted=yes}', "");
Expect(0, 106, '\p{^Soft_Dotted=yes}', "");
Expect(0, 106, '\P{Soft_Dotted=yes}', "");
Expect(1, 106, '\P{^Soft_Dotted=yes}', "");
Expect(0, 104, '\p{Soft_Dotted=yes}', "");
Expect(1, 104, '\p{^Soft_Dotted=yes}', "");
Expect(1, 104, '\P{Soft_Dotted=yes}', "");
Expect(0, 104, '\P{^Soft_Dotted=yes}', "");
Expect(1, 106, '\p{Soft_Dotted=-_YES}', "");
Expect(0, 106, '\p{^Soft_Dotted=-_YES}', "");
Expect(0, 106, '\P{Soft_Dotted=-_YES}', "");
Expect(1, 106, '\P{^Soft_Dotted=-_YES}', "");
Expect(0, 104, '\p{Soft_Dotted=-_YES}', "");
Expect(1, 104, '\p{^Soft_Dotted=-_YES}', "");
Expect(1, 104, '\P{Soft_Dotted=-_YES}', "");
Expect(0, 104, '\P{^Soft_Dotted=-_YES}', "");
Error('\p{SD=:=y}');
Error('\P{SD=:=y}');
Expect(1, 106, '\p{SD=y}', "");
Expect(0, 106, '\p{^SD=y}', "");
Expect(0, 106, '\P{SD=y}', "");
Expect(1, 106, '\P{^SD=y}', "");
Expect(0, 104, '\p{SD=y}', "");
Expect(1, 104, '\p{^SD=y}', "");
Expect(1, 104, '\P{SD=y}', "");
Expect(0, 104, '\P{^SD=y}', "");
Expect(1, 106, '\p{SD=	Y}', "");
Expect(0, 106, '\p{^SD=	Y}', "");
Expect(0, 106, '\P{SD=	Y}', "");
Expect(1, 106, '\P{^SD=	Y}', "");
Expect(0, 104, '\p{SD=	Y}', "");
Expect(1, 104, '\p{^SD=	Y}', "");
Expect(1, 104, '\P{SD=	Y}', "");
Expect(0, 104, '\P{^SD=	Y}', "");
Error('\p{Is_Soft_Dotted=/a/-t}');
Error('\P{Is_Soft_Dotted=/a/-t}');
Expect(1, 106, '\p{Is_Soft_Dotted:   t}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted:   t}', "");
Expect(0, 106, '\P{Is_Soft_Dotted:   t}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted:   t}', "");
Expect(0, 104, '\p{Is_Soft_Dotted:   t}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted:   t}', "");
Expect(1, 104, '\P{Is_Soft_Dotted:   t}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted:   t}', "");
Expect(1, 106, '\p{Is_Soft_Dotted=_t}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted=_t}', "");
Expect(0, 106, '\P{Is_Soft_Dotted=_t}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted=_t}', "");
Expect(0, 104, '\p{Is_Soft_Dotted=_t}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted=_t}', "");
Expect(1, 104, '\P{Is_Soft_Dotted=_t}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted=_t}', "");
Error('\p{Is_SD:	 True/a/}');
Error('\P{Is_SD:	 True/a/}');
Expect(1, 106, '\p{Is_SD: true}', "");
Expect(0, 106, '\p{^Is_SD: true}', "");
Expect(0, 106, '\P{Is_SD: true}', "");
Expect(1, 106, '\P{^Is_SD: true}', "");
Expect(0, 104, '\p{Is_SD: true}', "");
Expect(1, 104, '\p{^Is_SD: true}', "");
Expect(1, 104, '\P{Is_SD: true}', "");
Expect(0, 104, '\P{^Is_SD: true}', "");
Expect(1, 106, '\p{Is_SD= -True}', "");
Expect(0, 106, '\p{^Is_SD= -True}', "");
Expect(0, 106, '\P{Is_SD= -True}', "");
Expect(1, 106, '\P{^Is_SD= -True}', "");
Expect(0, 104, '\p{Is_SD= -True}', "");
Expect(1, 104, '\p{^Is_SD= -True}', "");
Expect(1, 104, '\P{Is_SD= -True}', "");
Expect(0, 104, '\P{^Is_SD= -True}', "");
Error('\p{Soft_Dotted=/a/	_No}');
Error('\P{Soft_Dotted=/a/	_No}');
Expect(1, 104, '\p{Soft_Dotted=no}', "");
Expect(0, 104, '\p{^Soft_Dotted=no}', "");
Expect(0, 104, '\P{Soft_Dotted=no}', "");
Expect(1, 104, '\P{^Soft_Dotted=no}', "");
Expect(0, 106, '\p{Soft_Dotted=no}', "");
Expect(1, 106, '\p{^Soft_Dotted=no}', "");
Expect(1, 106, '\P{Soft_Dotted=no}', "");
Expect(0, 106, '\P{^Soft_Dotted=no}', "");
Expect(1, 104, '\p{Soft_Dotted= _No}', "");
Expect(0, 104, '\p{^Soft_Dotted= _No}', "");
Expect(0, 104, '\P{Soft_Dotted= _No}', "");
Expect(1, 104, '\P{^Soft_Dotted= _No}', "");
Expect(0, 106, '\p{Soft_Dotted= _No}', "");
Expect(1, 106, '\p{^Soft_Dotted= _No}', "");
Expect(1, 106, '\P{Soft_Dotted= _No}', "");
Expect(0, 106, '\P{^Soft_Dotted= _No}', "");
Error('\p{SD=__n/a/}');
Error('\P{SD=__n/a/}');
Expect(1, 104, '\p{SD:   n}', "");
Expect(0, 104, '\p{^SD:   n}', "");
Expect(0, 104, '\P{SD:   n}', "");
Expect(1, 104, '\P{^SD:   n}', "");
Expect(0, 106, '\p{SD:   n}', "");
Expect(1, 106, '\p{^SD:   n}', "");
Expect(1, 106, '\P{SD:   n}', "");
Expect(0, 106, '\P{^SD:   n}', "");
Expect(1, 104, '\p{SD=	-N}', "");
Expect(0, 104, '\p{^SD=	-N}', "");
Expect(0, 104, '\P{SD=	-N}', "");
Expect(1, 104, '\P{^SD=	-N}', "");
Expect(0, 106, '\p{SD=	-N}', "");
Expect(1, 106, '\p{^SD=	-N}', "");
Expect(1, 106, '\P{SD=	-N}', "");
Expect(0, 106, '\P{^SD=	-N}', "");
Error('\p{Is_Soft_Dotted=--F/a/}');
Error('\P{Is_Soft_Dotted=--F/a/}');
Expect(1, 104, '\p{Is_Soft_Dotted=f}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted=f}', "");
Expect(0, 104, '\P{Is_Soft_Dotted=f}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted=f}', "");
Expect(0, 106, '\p{Is_Soft_Dotted=f}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted=f}', "");
Expect(1, 106, '\P{Is_Soft_Dotted=f}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted=f}', "");
Expect(1, 104, '\p{Is_Soft_Dotted:   	F}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted:   	F}', "");
Expect(0, 104, '\P{Is_Soft_Dotted:   	F}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted:   	F}', "");
Expect(0, 106, '\p{Is_Soft_Dotted:   	F}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted:   	F}', "");
Expect(1, 106, '\P{Is_Soft_Dotted:   	F}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted:   	F}', "");
Error('\p{Is_SD=/a/false}');
Error('\P{Is_SD=/a/false}');
Expect(1, 104, '\p{Is_SD=false}', "");
Expect(0, 104, '\p{^Is_SD=false}', "");
Expect(0, 104, '\P{Is_SD=false}', "");
Expect(1, 104, '\P{^Is_SD=false}', "");
Expect(0, 106, '\p{Is_SD=false}', "");
Expect(1, 106, '\p{^Is_SD=false}', "");
Expect(1, 106, '\P{Is_SD=false}', "");
Expect(0, 106, '\P{^Is_SD=false}', "");
Expect(1, 104, '\p{Is_SD=-_false}', "");
Expect(0, 104, '\p{^Is_SD=-_false}', "");
Expect(0, 104, '\P{Is_SD=-_false}', "");
Expect(1, 104, '\P{^Is_SD=-_false}', "");
Expect(0, 106, '\p{Is_SD=-_false}', "");
Expect(1, 106, '\p{^Is_SD=-_false}', "");
Expect(1, 106, '\P{Is_SD=-_false}', "");
Expect(0, 106, '\P{^Is_SD=-_false}', "");
Error('\p{Other_ID_Start=:=	-yes}');
Error('\P{Other_ID_Start=:=	-yes}');
Expect(1, 8472, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\p{Other_ID_Start=		Yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=		Yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=		Yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=		Yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=		Yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=		Yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=		Yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=		Yes}', 'deprecated');
Error('\p{OIDS=_/a/Y}');
Error('\P{OIDS=_/a/Y}');
Expect(1, 8472, '\p{OIDS=y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS=y}', 'deprecated');
Expect(0, 8472, '\P{OIDS=y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS=y}', 'deprecated');
Expect(0, 8471, '\p{OIDS=y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS=y}', 'deprecated');
Expect(1, 8471, '\P{OIDS=y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS=y}', 'deprecated');
Expect(1, 8472, '\p{OIDS= _Y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS= _Y}', 'deprecated');
Expect(0, 8472, '\P{OIDS= _Y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS= _Y}', 'deprecated');
Expect(0, 8471, '\p{OIDS= _Y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS= _Y}', 'deprecated');
Expect(1, 8471, '\P{OIDS= _Y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS= _Y}', 'deprecated');
Error('\p{Is_Other_ID_Start=	-T/a/}');
Error('\P{Is_Other_ID_Start=	-T/a/}');
Expect(1, 8472, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8472, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Error('\p{Is_OIDS=-/a/true}');
Error('\P{Is_OIDS=-/a/true}');
Expect(1, 8472, '\p{Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\p{Is_OIDS=__True}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS=__True}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS=__True}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS=__True}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS=__True}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS=__True}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS=__True}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS=__True}', 'deprecated');
Error('\p{Other_ID_Start=_-No:=}');
Error('\P{Other_ID_Start=_-No:=}');
Expect(1, 8471, '\p{Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\p{Other_ID_Start= -No}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start= -No}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start= -No}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start= -No}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start= -No}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start= -No}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start= -No}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start= -No}', 'deprecated');
Error('\p{OIDS=_	N:=}');
Error('\P{OIDS=_	N:=}');
Expect(1, 8471, '\p{OIDS=n}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=n}', 'deprecated');
Expect(0, 8471, '\P{OIDS=n}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=n}', 'deprecated');
Expect(0, 8472, '\p{OIDS=n}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=n}', 'deprecated');
Expect(1, 8472, '\P{OIDS=n}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=n}', 'deprecated');
Expect(1, 8471, '\p{OIDS=_N}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=_N}', 'deprecated');
Expect(0, 8471, '\P{OIDS=_N}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=_N}', 'deprecated');
Expect(0, 8472, '\p{OIDS=_N}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=_N}', 'deprecated');
Expect(1, 8472, '\P{OIDS=_N}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=_N}', 'deprecated');
Error('\p{Is_Other_ID_Start=/a/	-F}');
Error('\P{Is_Other_ID_Start=/a/	-F}');
Expect(1, 8471, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\p{Is_Other_ID_Start: 		F}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start: 		F}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start: 		F}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start: 		F}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start: 		F}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start: 		F}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start: 		F}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start: 		F}', 'deprecated');
Error('\p{Is_OIDS=	 False:=}');
Error('\P{Is_OIDS=	 False:=}');
Expect(1, 8471, '\p{Is_OIDS=false}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS=false}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS=false}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS=false}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS=false}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS=false}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS=false}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS=false}', 'deprecated');
Expect(1, 8471, '\p{Is_OIDS=-	False}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS=-	False}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS=-	False}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS=-	False}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS=-	False}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS=-	False}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS=-	False}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS=-	False}', 'deprecated');
Error('\p{Grapheme_Base:   -:=yes}');
Error('\P{Grapheme_Base:   -:=yes}');
Expect(1, 126, '\p{Grapheme_Base=yes}', "");
Expect(0, 126, '\p{^Grapheme_Base=yes}', "");
Expect(0, 126, '\P{Grapheme_Base=yes}', "");
Expect(1, 126, '\P{^Grapheme_Base=yes}', "");
Expect(0, 31, '\p{Grapheme_Base=yes}', "");
Expect(1, 31, '\p{^Grapheme_Base=yes}', "");
Expect(1, 31, '\P{Grapheme_Base=yes}', "");
Expect(0, 31, '\P{^Grapheme_Base=yes}', "");
Expect(1, 126, '\p{Grapheme_Base=_Yes}', "");
Expect(0, 126, '\p{^Grapheme_Base=_Yes}', "");
Expect(0, 126, '\P{Grapheme_Base=_Yes}', "");
Expect(1, 126, '\P{^Grapheme_Base=_Yes}', "");
Expect(0, 31, '\p{Grapheme_Base=_Yes}', "");
Expect(1, 31, '\p{^Grapheme_Base=_Yes}', "");
Expect(1, 31, '\P{Grapheme_Base=_Yes}', "");
Expect(0, 31, '\P{^Grapheme_Base=_Yes}', "");
Error('\p{Gr_Base=	Y:=}');
Error('\P{Gr_Base=	Y:=}');
Expect(1, 126, '\p{Gr_Base=y}', "");
Expect(0, 126, '\p{^Gr_Base=y}', "");
Expect(0, 126, '\P{Gr_Base=y}', "");
Expect(1, 126, '\P{^Gr_Base=y}', "");
Expect(0, 31, '\p{Gr_Base=y}', "");
Expect(1, 31, '\p{^Gr_Base=y}', "");
Expect(1, 31, '\P{Gr_Base=y}', "");
Expect(0, 31, '\P{^Gr_Base=y}', "");
Expect(1, 126, '\p{Gr_Base:	 	Y}', "");
Expect(0, 126, '\p{^Gr_Base:	 	Y}', "");
Expect(0, 126, '\P{Gr_Base:	 	Y}', "");
Expect(1, 126, '\P{^Gr_Base:	 	Y}', "");
Expect(0, 31, '\p{Gr_Base:	 	Y}', "");
Expect(1, 31, '\p{^Gr_Base:	 	Y}', "");
Expect(1, 31, '\P{Gr_Base:	 	Y}', "");
Expect(0, 31, '\P{^Gr_Base:	 	Y}', "");
Error('\p{Is_Grapheme_Base=/a/_T}');
Error('\P{Is_Grapheme_Base=/a/_T}');
Expect(1, 126, '\p{Is_Grapheme_Base=t}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=t}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=t}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=t}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=t}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=t}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=t}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=t}', "");
Expect(1, 126, '\p{Is_Grapheme_Base=_	T}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=_	T}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=_	T}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=_	T}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=_	T}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=_	T}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=_	T}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=_	T}', "");
Error('\p{Is_Gr_Base=	TRUE:=}');
Error('\P{Is_Gr_Base=	TRUE:=}');
Expect(1, 126, '\p{Is_Gr_Base=true}', "");
Expect(0, 126, '\p{^Is_Gr_Base=true}', "");
Expect(0, 126, '\P{Is_Gr_Base=true}', "");
Expect(1, 126, '\P{^Is_Gr_Base=true}', "");
Expect(0, 31, '\p{Is_Gr_Base=true}', "");
Expect(1, 31, '\p{^Is_Gr_Base=true}', "");
Expect(1, 31, '\P{Is_Gr_Base=true}', "");
Expect(0, 31, '\P{^Is_Gr_Base=true}', "");
Expect(1, 126, '\p{Is_Gr_Base:   -_true}', "");
Expect(0, 126, '\p{^Is_Gr_Base:   -_true}', "");
Expect(0, 126, '\P{Is_Gr_Base:   -_true}', "");
Expect(1, 126, '\P{^Is_Gr_Base:   -_true}', "");
Expect(0, 31, '\p{Is_Gr_Base:   -_true}', "");
Expect(1, 31, '\p{^Is_Gr_Base:   -_true}', "");
Expect(1, 31, '\P{Is_Gr_Base:   -_true}', "");
Expect(0, 31, '\P{^Is_Gr_Base:   -_true}', "");
Error('\p{Grapheme_Base:/a/		NO}');
Error('\P{Grapheme_Base:/a/		NO}');
Expect(1, 31, '\p{Grapheme_Base=no}', "");
Expect(0, 31, '\p{^Grapheme_Base=no}', "");
Expect(0, 31, '\P{Grapheme_Base=no}', "");
Expect(1, 31, '\P{^Grapheme_Base=no}', "");
Expect(0, 126, '\p{Grapheme_Base=no}', "");
Expect(1, 126, '\p{^Grapheme_Base=no}', "");
Expect(1, 126, '\P{Grapheme_Base=no}', "");
Expect(0, 126, '\P{^Grapheme_Base=no}', "");
Expect(1, 31, '\p{Grapheme_Base=-	NO}', "");
Expect(0, 31, '\p{^Grapheme_Base=-	NO}', "");
Expect(0, 31, '\P{Grapheme_Base=-	NO}', "");
Expect(1, 31, '\P{^Grapheme_Base=-	NO}', "");
Expect(0, 126, '\p{Grapheme_Base=-	NO}', "");
Expect(1, 126, '\p{^Grapheme_Base=-	NO}', "");
Expect(1, 126, '\P{Grapheme_Base=-	NO}', "");
Expect(0, 126, '\P{^Grapheme_Base=-	NO}', "");
Error('\p{Gr_Base=-:=N}');
Error('\P{Gr_Base=-:=N}');
Expect(1, 31, '\p{Gr_Base=n}', "");
Expect(0, 31, '\p{^Gr_Base=n}', "");
Expect(0, 31, '\P{Gr_Base=n}', "");
Expect(1, 31, '\P{^Gr_Base=n}', "");
Expect(0, 126, '\p{Gr_Base=n}', "");
Expect(1, 126, '\p{^Gr_Base=n}', "");
Expect(1, 126, '\P{Gr_Base=n}', "");
Expect(0, 126, '\P{^Gr_Base=n}', "");
Expect(1, 31, '\p{Gr_Base=	_N}', "");
Expect(0, 31, '\p{^Gr_Base=	_N}', "");
Expect(0, 31, '\P{Gr_Base=	_N}', "");
Expect(1, 31, '\P{^Gr_Base=	_N}', "");
Expect(0, 126, '\p{Gr_Base=	_N}', "");
Expect(1, 126, '\p{^Gr_Base=	_N}', "");
Expect(1, 126, '\P{Gr_Base=	_N}', "");
Expect(0, 126, '\P{^Gr_Base=	_N}', "");
Error('\p{Is_Grapheme_Base=_F/a/}');
Error('\P{Is_Grapheme_Base=_F/a/}');
Expect(1, 31, '\p{Is_Grapheme_Base=f}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base=f}', "");
Expect(0, 31, '\P{Is_Grapheme_Base=f}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base=f}', "");
Expect(0, 126, '\p{Is_Grapheme_Base=f}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base=f}', "");
Expect(1, 126, '\P{Is_Grapheme_Base=f}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base=f}', "");
Expect(1, 31, '\p{Is_Grapheme_Base:	 _F}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base:	 _F}', "");
Expect(0, 31, '\P{Is_Grapheme_Base:	 _F}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base:	 _F}', "");
Expect(0, 126, '\p{Is_Grapheme_Base:	 _F}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base:	 _F}', "");
Expect(1, 126, '\P{Is_Grapheme_Base:	 _F}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base:	 _F}', "");
Error('\p{Is_Gr_Base=  false/a/}');
Error('\P{Is_Gr_Base=  false/a/}');
Expect(1, 31, '\p{Is_Gr_Base:   false}', "");
Expect(0, 31, '\p{^Is_Gr_Base:   false}', "");
Expect(0, 31, '\P{Is_Gr_Base:   false}', "");
Expect(1, 31, '\P{^Is_Gr_Base:   false}', "");
Expect(0, 126, '\p{Is_Gr_Base:   false}', "");
Expect(1, 126, '\p{^Is_Gr_Base:   false}', "");
Expect(1, 126, '\P{Is_Gr_Base:   false}', "");
Expect(0, 126, '\P{^Is_Gr_Base:   false}', "");
Expect(1, 31, '\p{Is_Gr_Base=  False}', "");
Expect(0, 31, '\p{^Is_Gr_Base=  False}', "");
Expect(0, 31, '\P{Is_Gr_Base=  False}', "");
Expect(1, 31, '\P{^Is_Gr_Base=  False}', "");
Expect(0, 126, '\p{Is_Gr_Base=  False}', "");
Expect(1, 126, '\p{^Is_Gr_Base=  False}', "");
Expect(1, 126, '\P{Is_Gr_Base=  False}', "");
Expect(0, 126, '\P{^Is_Gr_Base=  False}', "");
Error('\p{Numeric_Value=	:=0_0 0_00-0	00_33}');
Error('\P{Numeric_Value=	:=0_0 0_00-0	00_33}');
Expect(1, 12893, '\p{Numeric_Value=33}', "");
Expect(0, 12893, '\p{^Numeric_Value=33}', "");
Expect(0, 12893, '\P{Numeric_Value=33}', "");
Expect(1, 12893, '\P{^Numeric_Value=33}', "");
Expect(0, 12892, '\p{Numeric_Value=33}', "");
Expect(1, 12892, '\p{^Numeric_Value=33}', "");
Expect(1, 12892, '\P{Numeric_Value=33}', "");
Expect(0, 12892, '\P{^Numeric_Value=33}', "");
Error('\p{Nv:_+0:=0	0033}');
Error('\P{Nv:_+0:=0	0033}');
Expect(1, 12893, '\p{Nv=000_000_33}', "");
Expect(0, 12893, '\p{^Nv=000_000_33}', "");
Expect(0, 12893, '\P{Nv=000_000_33}', "");
Expect(1, 12893, '\P{^Nv=000_000_33}', "");
Expect(0, 12892, '\p{Nv=000_000_33}', "");
Expect(1, 12892, '\p{^Nv=000_000_33}', "");
Expect(1, 12892, '\P{Nv=000_000_33}', "");
Expect(0, 12892, '\P{^Nv=000_000_33}', "");
Error('\p{Is_Numeric_Value=:=0000000033}');
Error('\P{Is_Numeric_Value=:=0000000033}');
Expect(1, 12893, '\p{Is_Numeric_Value=0000000033}', "");
Expect(0, 12893, '\p{^Is_Numeric_Value=0000000033}', "");
Expect(0, 12893, '\P{Is_Numeric_Value=0000000033}', "");
Expect(1, 12893, '\P{^Is_Numeric_Value=0000000033}', "");
Expect(0, 12892, '\p{Is_Numeric_Value=0000000033}', "");
Expect(1, 12892, '\p{^Is_Numeric_Value=0000000033}', "");
Expect(1, 12892, '\P{Is_Numeric_Value=0000000033}', "");
Expect(0, 12892, '\P{^Is_Numeric_Value=0000000033}', "");
Error('\p{Is_Nv=  3 3/a/}');
Error('\P{Is_Nv=  3 3/a/}');
Expect(1, 12893, '\p{Is_Nv=033}', "");
Expect(0, 12893, '\p{^Is_Nv=033}', "");
Expect(0, 12893, '\P{Is_Nv=033}', "");
Expect(1, 12893, '\P{^Is_Nv=033}', "");
Expect(0, 12892, '\p{Is_Nv=033}', "");
Expect(1, 12892, '\p{^Is_Nv=033}', "");
Expect(1, 12892, '\P{Is_Nv=033}', "");
Expect(0, 12892, '\P{^Is_Nv=033}', "");
Error('\p{Numeric_Value=/a/- 00000000032}');
Error('\P{Numeric_Value=/a/- 00000000032}');
Expect(1, 12892, '\p{Numeric_Value=0000000032}', "");
Expect(0, 12892, '\p{^Numeric_Value=0000000032}', "");
Expect(0, 12892, '\P{Numeric_Value=0000000032}', "");
Expect(1, 12892, '\P{^Numeric_Value=0000000032}', "");
Expect(0, 12891, '\p{Numeric_Value=0000000032}', "");
Expect(1, 12891, '\p{^Numeric_Value=0000000032}', "");
Expect(1, 12891, '\P{Numeric_Value=0000000032}', "");
Expect(0, 12891, '\P{^Numeric_Value=0000000032}', "");
Error('\p{Nv=-	0:=00-0_0032}');
Error('\P{Nv=-	0:=00-0_0032}');
Expect(1, 12892, '\p{Nv=0000032}', "");
Expect(0, 12892, '\p{^Nv=0000032}', "");
Expect(0, 12892, '\P{Nv=0000032}', "");
Expect(1, 12892, '\P{^Nv=0000032}', "");
Expect(0, 12891, '\p{Nv=0000032}', "");
Expect(1, 12891, '\p{^Nv=0000032}', "");
Expect(1, 12891, '\P{Nv=0000032}', "");
Expect(0, 12891, '\P{^Nv=0000032}', "");
Error('\p{Is_Numeric_Value:	03 2:=}');
Error('\P{Is_Numeric_Value:	03 2:=}');
Expect(1, 12892, '\p{Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(0, 12892, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(0, 12892, '\P{Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(1, 12892, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(0, 12891, '\p{Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(1, 12891, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(1, 12891, '\P{Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Expect(0, 12891, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_0032}', "");
Error('\p{Is_Nv=:=_ +0	0 32}');
Error('\P{Is_Nv=:=_ +0	0 32}');
Expect(1, 12892, '\p{Is_Nv=0000000032}', "");
Expect(0, 12892, '\p{^Is_Nv=0000000032}', "");
Expect(0, 12892, '\P{Is_Nv=0000000032}', "");
Expect(1, 12892, '\P{^Is_Nv=0000000032}', "");
Expect(0, 12891, '\p{Is_Nv=0000000032}', "");
Expect(1, 12891, '\p{^Is_Nv=0000000032}', "");
Expect(1, 12891, '\P{Is_Nv=0000000032}', "");
Expect(0, 12891, '\P{^Is_Nv=0000000032}', "");
Error('\p{Numeric_Value=	/a/+00003/00016}');
Error('\P{Numeric_Value=	/a/+00003/00016}');
Expect(1, 2550, '\p{Numeric_Value=+00003/0016}', "");
Expect(0, 2550, '\p{^Numeric_Value=+00003/0016}', "");
Expect(0, 2550, '\P{Numeric_Value=+00003/0016}', "");
Expect(1, 2550, '\P{^Numeric_Value=+00003/0016}', "");
Expect(0, 2549, '\p{Numeric_Value=+00003/0016}', "");
Expect(1, 2549, '\p{^Numeric_Value=+00003/0016}', "");
Expect(1, 2549, '\P{Numeric_Value=+00003/0016}', "");
Expect(0, 2549, '\P{^Numeric_Value=+00003/0016}', "");
Error('\p{Numeric_Value=0.19}');
Error('\P{Numeric_Value=0.19}');
Expect(1, 2550, '\p{Numeric_Value=0.188}', "");
Expect(0, 2550, '\p{^Numeric_Value=0.188}', "");
Expect(0, 2550, '\P{Numeric_Value=0.188}', "");
Expect(1, 2550, '\P{^Numeric_Value=0.188}', "");
Expect(0, 2549, '\p{Numeric_Value=0.188}', "");
Expect(1, 2549, '\p{^Numeric_Value=0.188}', "");
Expect(1, 2549, '\P{Numeric_Value=0.188}', "");
Expect(0, 2549, '\P{^Numeric_Value=0.188}', "");
Error('\p{Nv=:=- 00003/000016}');
Error('\P{Nv=:=- 00003/000016}');
Expect(1, 2550, '\p{Nv=0003/0016}', "");
Expect(0, 2550, '\p{^Nv=0003/0016}', "");
Expect(0, 2550, '\P{Nv=0003/0016}', "");
Expect(1, 2550, '\P{^Nv=0003/0016}', "");
Expect(0, 2549, '\p{Nv=0003/0016}', "");
Expect(1, 2549, '\p{^Nv=0003/0016}', "");
Expect(1, 2549, '\P{Nv=0003/0016}', "");
Expect(0, 2549, '\P{^Nv=0003/0016}', "");
Error('\p{Nv=0.19}');
Error('\P{Nv=0.19}');
Expect(1, 2550, '\p{Nv=0.188}', "");
Expect(0, 2550, '\p{^Nv=0.188}', "");
Expect(0, 2550, '\P{Nv=0.188}', "");
Expect(1, 2550, '\P{^Nv=0.188}', "");
Expect(0, 2549, '\p{Nv=0.188}', "");
Expect(1, 2549, '\p{^Nv=0.188}', "");
Expect(1, 2549, '\P{Nv=0.188}', "");
Expect(0, 2549, '\P{^Nv=0.188}', "");
Error('\p{Is_Numeric_Value=-:=00000003/16}');
Error('\P{Is_Numeric_Value=-:=00000003/16}');
Expect(1, 2550, '\p{Is_Numeric_Value:   00003/000000016}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value:   00003/000000016}', "");
Expect(0, 2550, '\P{Is_Numeric_Value:   00003/000000016}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value:   00003/000000016}', "");
Expect(0, 2549, '\p{Is_Numeric_Value:   00003/000000016}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value:   00003/000000016}', "");
Expect(1, 2549, '\P{Is_Numeric_Value:   00003/000000016}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value:   00003/000000016}', "");
Error('\p{Is_Numeric_Value=0.19}');
Error('\P{Is_Numeric_Value=0.19}');
Expect(1, 2550, '\p{Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\P{Is_Numeric_Value=0.188}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\p{Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\P{Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value=0.188}', "");
Error('\p{Is_Nv=_00003/0016/a/}');
Error('\P{Is_Nv=_00003/0016/a/}');
Expect(1, 2550, '\p{Is_Nv: +0000000003/000000016}', "");
Expect(0, 2550, '\p{^Is_Nv: +0000000003/000000016}', "");
Expect(0, 2550, '\P{Is_Nv: +0000000003/000000016}', "");
Expect(1, 2550, '\P{^Is_Nv: +0000000003/000000016}', "");
Expect(0, 2549, '\p{Is_Nv: +0000000003/000000016}', "");
Expect(1, 2549, '\p{^Is_Nv: +0000000003/000000016}', "");
Expect(1, 2549, '\P{Is_Nv: +0000000003/000000016}', "");
Expect(0, 2549, '\P{^Is_Nv: +0000000003/000000016}', "");
Error('\p{Is_Nv=0.19}');
Error('\P{Is_Nv=0.19}');
Expect(1, 2550, '\p{Is_Nv=0.188}', "");
Expect(0, 2550, '\p{^Is_Nv=0.188}', "");
Expect(0, 2550, '\P{Is_Nv=0.188}', "");
Expect(1, 2550, '\P{^Is_Nv=0.188}', "");
Expect(0, 2549, '\p{Is_Nv=0.188}', "");
Expect(1, 2549, '\p{^Is_Nv=0.188}', "");
Expect(1, 2549, '\P{Is_Nv=0.188}', "");
Expect(0, 2549, '\P{^Is_Nv=0.188}', "");
Error('\p{Numeric_Value=/a/-+00000021}');
Error('\P{Numeric_Value=/a/-+00000021}');
Expect(1, 12881, '\p{Numeric_Value=21}', "");
Expect(0, 12881, '\p{^Numeric_Value=21}', "");
Expect(0, 12881, '\P{Numeric_Value=21}', "");
Expect(1, 12881, '\P{^Numeric_Value=21}', "");
Expect(0, 12880, '\p{Numeric_Value=21}', "");
Expect(1, 12880, '\p{^Numeric_Value=21}', "");
Expect(1, 12880, '\P{Numeric_Value=21}', "");
Expect(0, 12880, '\P{^Numeric_Value=21}', "");
Error('\p{Nv=/a/_2 1}');
Error('\P{Nv=/a/_2 1}');
Expect(1, 12881, '\p{Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(0, 12881, '\p{^Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(0, 12881, '\P{Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(1, 12881, '\P{^Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(0, 12880, '\p{Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(1, 12880, '\p{^Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(1, 12880, '\P{Nv: +0_0_0_0_0_0_0_0021}', "");
Expect(0, 12880, '\P{^Nv: +0_0_0_0_0_0_0_0021}', "");
Error('\p{Is_Numeric_Value=_+0:=00_0_00-0_021}');
Error('\P{Is_Numeric_Value=_+0:=00_0_00-0_021}');
Expect(1, 12881, '\p{Is_Numeric_Value=2_1}', "");
Expect(0, 12881, '\p{^Is_Numeric_Value=2_1}', "");
Expect(0, 12881, '\P{Is_Numeric_Value=2_1}', "");
Expect(1, 12881, '\P{^Is_Numeric_Value=2_1}', "");
Expect(0, 12880, '\p{Is_Numeric_Value=2_1}', "");
Expect(1, 12880, '\p{^Is_Numeric_Value=2_1}', "");
Expect(1, 12880, '\P{Is_Numeric_Value=2_1}', "");
Expect(0, 12880, '\P{^Is_Numeric_Value=2_1}', "");
Error('\p{Is_Nv=:=_-+0 0	0 0-0-0021}');
Error('\P{Is_Nv=:=_-+0 0	0 0-0-0021}');
Expect(1, 12881, '\p{Is_Nv=00000021}', "");
Expect(0, 12881, '\p{^Is_Nv=00000021}', "");
Expect(0, 12881, '\P{Is_Nv=00000021}', "");
Expect(1, 12881, '\P{^Is_Nv=00000021}', "");
Expect(0, 12880, '\p{Is_Nv=00000021}', "");
Expect(1, 12880, '\p{^Is_Nv=00000021}', "");
Expect(1, 12880, '\P{Is_Nv=00000021}', "");
Expect(0, 12880, '\P{^Is_Nv=00000021}', "");
Error('\p{Numeric_Value:-000000090/a/}');
Error('\P{Numeric_Value:-000000090/a/}');
Expect(1, 4986, '\p{Numeric_Value=000_009_0}', "");
Expect(0, 4986, '\p{^Numeric_Value=000_009_0}', "");
Expect(0, 4986, '\P{Numeric_Value=000_009_0}', "");
Expect(1, 4986, '\P{^Numeric_Value=000_009_0}', "");
Expect(0, 4985, '\p{Numeric_Value=000_009_0}', "");
Expect(1, 4985, '\p{^Numeric_Value=000_009_0}', "");
Expect(1, 4985, '\P{Numeric_Value=000_009_0}', "");
Expect(0, 4985, '\P{^Numeric_Value=000_009_0}', "");
Error('\p{Nv= -0_0 90/a/}');
Error('\P{Nv= -0_0 90/a/}');
Expect(1, 4986, '\p{Nv=90}', "");
Expect(0, 4986, '\p{^Nv=90}', "");
Expect(0, 4986, '\P{Nv=90}', "");
Expect(1, 4986, '\P{^Nv=90}', "");
Expect(0, 4985, '\p{Nv=90}', "");
Expect(1, 4985, '\p{^Nv=90}', "");
Expect(1, 4985, '\P{Nv=90}', "");
Expect(0, 4985, '\P{^Nv=90}', "");
Error('\p{Is_Numeric_Value= 00:=00	00 00-09	0}');
Error('\P{Is_Numeric_Value= 00:=00	00 00-09	0}');
Expect(1, 4986, '\p{Is_Numeric_Value=000090}', "");
Expect(0, 4986, '\p{^Is_Numeric_Value=000090}', "");
Expect(0, 4986, '\P{Is_Numeric_Value=000090}', "");
Expect(1, 4986, '\P{^Is_Numeric_Value=000090}', "");
Expect(0, 4985, '\p{Is_Numeric_Value=000090}', "");
Expect(1, 4985, '\p{^Is_Numeric_Value=000090}', "");
Expect(1, 4985, '\P{Is_Numeric_Value=000090}', "");
Expect(0, 4985, '\P{^Is_Numeric_Value=000090}', "");
Error('\p{Is_Nv=:=-	000090}');
Error('\P{Is_Nv=:=-	000090}');
Expect(1, 4986, '\p{Is_Nv=00000090}', "");
Expect(0, 4986, '\p{^Is_Nv=00000090}', "");
Expect(0, 4986, '\P{Is_Nv=00000090}', "");
Expect(1, 4986, '\P{^Is_Nv=00000090}', "");
Expect(0, 4985, '\p{Is_Nv=00000090}', "");
Expect(1, 4985, '\p{^Is_Nv=00000090}', "");
Expect(1, 4985, '\P{Is_Nv=00000090}', "");
Expect(0, 4985, '\P{^Is_Nv=00000090}', "");
Error('\p{Numeric_Value=:=_	0000000-7}');
Error('\P{Numeric_Value=:=_	0000000-7}');
Expect(1, 55, '\p{Numeric_Value=0_0_0_0_0_0007}', "");
Expect(0, 55, '\p{^Numeric_Value=0_0_0_0_0_0007}', "");
Expect(0, 55, '\P{Numeric_Value=0_0_0_0_0_0007}', "");
Expect(1, 55, '\P{^Numeric_Value=0_0_0_0_0_0007}', "");
Expect(0, 54, '\p{Numeric_Value=0_0_0_0_0_0007}', "");
Expect(1, 54, '\p{^Numeric_Value=0_0_0_0_0_0007}', "");
Expect(1, 54, '\P{Numeric_Value=0_0_0_0_0_0007}', "");
Expect(0, 54, '\P{^Numeric_Value=0_0_0_0_0_0007}', "");
Error('\p{Nv=_/a/7}');
Error('\P{Nv=_/a/7}');
Expect(1, 55, '\p{Nv=+007}', "");
Expect(0, 55, '\p{^Nv=+007}', "");
Expect(0, 55, '\P{Nv=+007}', "");
Expect(1, 55, '\P{^Nv=+007}', "");
Expect(0, 54, '\p{Nv=+007}', "");
Expect(1, 54, '\p{^Nv=+007}', "");
Expect(1, 54, '\P{Nv=+007}', "");
Expect(0, 54, '\P{^Nv=+007}', "");
Error('\p{Is_Numeric_Value=	:=+00_7}');
Error('\P{Is_Numeric_Value=	:=+00_7}');
Expect(1, 55, '\p{Is_Numeric_Value=0_0_0_07}', "");
Expect(0, 55, '\p{^Is_Numeric_Value=0_0_0_07}', "");
Expect(0, 55, '\P{Is_Numeric_Value=0_0_0_07}', "");
Expect(1, 55, '\P{^Is_Numeric_Value=0_0_0_07}', "");
Expect(0, 54, '\p{Is_Numeric_Value=0_0_0_07}', "");
Expect(1, 54, '\p{^Is_Numeric_Value=0_0_0_07}', "");
Expect(1, 54, '\P{Is_Numeric_Value=0_0_0_07}', "");
Expect(0, 54, '\P{^Is_Numeric_Value=0_0_0_07}', "");
Error('\p{Is_Nv=-_+000007/a/}');
Error('\P{Is_Nv=-_+000007/a/}');
Expect(1, 55, '\p{Is_Nv=+0000000007}', "");
Expect(0, 55, '\p{^Is_Nv=+0000000007}', "");
Expect(0, 55, '\P{Is_Nv=+0000000007}', "");
Expect(1, 55, '\P{^Is_Nv=+0000000007}', "");
Expect(0, 54, '\p{Is_Nv=+0000000007}', "");
Expect(1, 54, '\p{^Is_Nv=+0000000007}', "");
Expect(1, 54, '\P{Is_Nv=+0000000007}', "");
Expect(0, 54, '\P{^Is_Nv=+0000000007}', "");
Error('\p{Numeric_Value:   _0000000600/a/}');
Error('\P{Numeric_Value:   _0000000600/a/}');
Expect(1, 65822, '\p{Numeric_Value=+000600}', "");
Expect(0, 65822, '\p{^Numeric_Value=+000600}', "");
Expect(0, 65822, '\P{Numeric_Value=+000600}', "");
Expect(1, 65822, '\P{^Numeric_Value=+000600}', "");
Expect(0, 65821, '\p{Numeric_Value=+000600}', "");
Expect(1, 65821, '\p{^Numeric_Value=+000600}', "");
Expect(1, 65821, '\P{Numeric_Value=+000600}', "");
Expect(0, 65821, '\P{^Numeric_Value=+000600}', "");
Error('\p{Nv=-:=+000000600}');
Error('\P{Nv=-:=+000000600}');
Expect(1, 65822, '\p{Nv=+00000000600}', "");
Expect(0, 65822, '\p{^Nv=+00000000600}', "");
Expect(0, 65822, '\P{Nv=+00000000600}', "");
Expect(1, 65822, '\P{^Nv=+00000000600}', "");
Expect(0, 65821, '\p{Nv=+00000000600}', "");
Expect(1, 65821, '\p{^Nv=+00000000600}', "");
Expect(1, 65821, '\P{Nv=+00000000600}', "");
Expect(0, 65821, '\P{^Nv=+00000000600}', "");
Error('\p{Is_Numeric_Value=	:=00000600}');
Error('\P{Is_Numeric_Value=	:=00000600}');
Expect(1, 65822, '\p{Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(0, 65822, '\p{^Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(0, 65822, '\P{Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(1, 65822, '\P{^Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(0, 65821, '\p{Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(1, 65821, '\p{^Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(1, 65821, '\P{Is_Numeric_Value=0_0_0_0_0_00600}', "");
Expect(0, 65821, '\P{^Is_Numeric_Value=0_0_0_0_0_00600}', "");
Error('\p{Is_Nv=/a/__000000600}');
Error('\P{Is_Nv=/a/__000000600}');
Expect(1, 65822, '\p{Is_Nv:   0000600}', "");
Expect(0, 65822, '\p{^Is_Nv:   0000600}', "");
Expect(0, 65822, '\P{Is_Nv:   0000600}', "");
Expect(1, 65822, '\P{^Is_Nv:   0000600}', "");
Expect(0, 65821, '\p{Is_Nv:   0000600}', "");
Expect(1, 65821, '\p{^Is_Nv:   0000600}', "");
Expect(1, 65821, '\P{Is_Nv:   0000600}', "");
Expect(0, 65821, '\P{^Is_Nv:   0000600}', "");
Error('\p{Numeric_Value=:=_00-00 0	026}');
Error('\P{Numeric_Value=:=_00-00 0	026}');
Expect(1, 12886, '\p{Numeric_Value=26}', "");
Expect(0, 12886, '\p{^Numeric_Value=26}', "");
Expect(0, 12886, '\P{Numeric_Value=26}', "");
Expect(1, 12886, '\P{^Numeric_Value=26}', "");
Expect(0, 12885, '\p{Numeric_Value=26}', "");
Expect(1, 12885, '\p{^Numeric_Value=26}', "");
Expect(1, 12885, '\P{Numeric_Value=26}', "");
Expect(0, 12885, '\P{^Numeric_Value=26}', "");
Error('\p{Nv=-0002/a/6}');
Error('\P{Nv=-0002/a/6}');
Expect(1, 12886, '\p{Nv=0000000026}', "");
Expect(0, 12886, '\p{^Nv=0000000026}', "");
Expect(0, 12886, '\P{Nv=0000000026}', "");
Expect(1, 12886, '\P{^Nv=0000000026}', "");
Expect(0, 12885, '\p{Nv=0000000026}', "");
Expect(1, 12885, '\p{^Nv=0000000026}', "");
Expect(1, 12885, '\P{Nv=0000000026}', "");
Expect(0, 12885, '\P{^Nv=0000000026}', "");
Error('\p{Is_Numeric_Value=	-00 0_0 0 0026/a/}');
Error('\P{Is_Numeric_Value=	-00 0_0 0 0026/a/}');
Expect(1, 12886, '\p{Is_Numeric_Value=26}', "");
Expect(0, 12886, '\p{^Is_Numeric_Value=26}', "");
Expect(0, 12886, '\P{Is_Numeric_Value=26}', "");
Expect(1, 12886, '\P{^Is_Numeric_Value=26}', "");
Expect(0, 12885, '\p{Is_Numeric_Value=26}', "");
Expect(1, 12885, '\p{^Is_Numeric_Value=26}', "");
Expect(1, 12885, '\P{Is_Numeric_Value=26}', "");
Expect(0, 12885, '\P{^Is_Numeric_Value=26}', "");
Error('\p{Is_Nv=:=- 026}');
Error('\P{Is_Nv=:=- 026}');
Expect(1, 12886, '\p{Is_Nv=26}', "");
Expect(0, 12886, '\p{^Is_Nv=26}', "");
Expect(0, 12886, '\P{Is_Nv=26}', "");
Expect(1, 12886, '\P{^Is_Nv=26}', "");
Expect(0, 12885, '\p{Is_Nv=26}', "");
Expect(1, 12885, '\p{^Is_Nv=26}', "");
Expect(1, 12885, '\P{Is_Nv=26}', "");
Expect(0, 12885, '\P{^Is_Nv=26}', "");
Error('\p{Numeric_Value=/a/+0000080}');
Error('\P{Numeric_Value=/a/+0000080}');
Expect(1, 4985, '\p{Numeric_Value=000000080}', "");
Expect(0, 4985, '\p{^Numeric_Value=000000080}', "");
Expect(0, 4985, '\P{Numeric_Value=000000080}', "");
Expect(1, 4985, '\P{^Numeric_Value=000000080}', "");
Expect(0, 4984, '\p{Numeric_Value=000000080}', "");
Expect(1, 4984, '\p{^Numeric_Value=000000080}', "");
Expect(1, 4984, '\P{Numeric_Value=000000080}', "");
Expect(0, 4984, '\P{^Numeric_Value=000000080}', "");
Error('\p{Nv=	/a/00080}');
Error('\P{Nv=	/a/00080}');
Expect(1, 4985, '\p{Nv=0_0_80}', "");
Expect(0, 4985, '\p{^Nv=0_0_80}', "");
Expect(0, 4985, '\P{Nv=0_0_80}', "");
Expect(1, 4985, '\P{^Nv=0_0_80}', "");
Expect(0, 4984, '\p{Nv=0_0_80}', "");
Expect(1, 4984, '\p{^Nv=0_0_80}', "");
Expect(1, 4984, '\P{Nv=0_0_80}', "");
Expect(0, 4984, '\P{^Nv=0_0_80}', "");
Error('\p{Is_Numeric_Value:	:=0080}');
Error('\P{Is_Numeric_Value:	:=0080}');
Expect(1, 4985, '\p{Is_Numeric_Value=80}', "");
Expect(0, 4985, '\p{^Is_Numeric_Value=80}', "");
Expect(0, 4985, '\P{Is_Numeric_Value=80}', "");
Expect(1, 4985, '\P{^Is_Numeric_Value=80}', "");
Expect(0, 4984, '\p{Is_Numeric_Value=80}', "");
Expect(1, 4984, '\p{^Is_Numeric_Value=80}', "");
Expect(1, 4984, '\P{Is_Numeric_Value=80}', "");
Expect(0, 4984, '\P{^Is_Numeric_Value=80}', "");
Error('\p{Is_Nv=_0_0	0-0_0_080/a/}');
Error('\P{Is_Nv=_0_0	0-0_0_080/a/}');
Expect(1, 4985, '\p{Is_Nv=00000008_0}', "");
Expect(0, 4985, '\p{^Is_Nv=00000008_0}', "");
Expect(0, 4985, '\P{Is_Nv=00000008_0}', "");
Expect(1, 4985, '\P{^Is_Nv=00000008_0}', "");
Expect(0, 4984, '\p{Is_Nv=00000008_0}', "");
Expect(1, 4984, '\p{^Is_Nv=00000008_0}', "");
Expect(1, 4984, '\P{Is_Nv=00000008_0}', "");
Expect(0, 4984, '\P{^Is_Nv=00000008_0}', "");
Error('\p{Numeric_Value=--+00000_00002 00:=}');
Error('\P{Numeric_Value=--+00000_00002 00:=}');
Expect(1, 65818, '\p{Numeric_Value=200}', "");
Expect(0, 65818, '\p{^Numeric_Value=200}', "");
Expect(0, 65818, '\P{Numeric_Value=200}', "");
Expect(1, 65818, '\P{^Numeric_Value=200}', "");
Expect(0, 65817, '\p{Numeric_Value=200}', "");
Expect(1, 65817, '\p{^Numeric_Value=200}', "");
Expect(1, 65817, '\P{Numeric_Value=200}', "");
Expect(0, 65817, '\P{^Numeric_Value=200}', "");
Error('\p{Nv=:=_	0000200}');
Error('\P{Nv=:=_	0000200}');
Expect(1, 65818, '\p{Nv=+0_0_2_00}', "");
Expect(0, 65818, '\p{^Nv=+0_0_2_00}', "");
Expect(0, 65818, '\P{Nv=+0_0_2_00}', "");
Expect(1, 65818, '\P{^Nv=+0_0_2_00}', "");
Expect(0, 65817, '\p{Nv=+0_0_2_00}', "");
Expect(1, 65817, '\p{^Nv=+0_0_2_00}', "");
Expect(1, 65817, '\P{Nv=+0_0_2_00}', "");
Expect(0, 65817, '\P{^Nv=+0_0_2_00}', "");
Error('\p{Is_Numeric_Value=0_0:=0	200}');
Error('\P{Is_Numeric_Value=0_0:=0	200}');
Expect(1, 65818, '\p{Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(0, 65818, '\p{^Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(0, 65818, '\P{Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(1, 65818, '\P{^Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(0, 65817, '\p{Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(1, 65817, '\p{^Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(1, 65817, '\P{Is_Numeric_Value=+00_00_00_00_02_00}', "");
Expect(0, 65817, '\P{^Is_Numeric_Value=+00_00_00_00_02_00}', "");
Error('\p{Is_Nv=:=	000200}');
Error('\P{Is_Nv=:=	000200}');
Expect(1, 65818, '\p{Is_Nv=+000000200}', "");
Expect(0, 65818, '\p{^Is_Nv=+000000200}', "");
Expect(0, 65818, '\P{Is_Nv=+000000200}', "");
Expect(1, 65818, '\P{^Is_Nv=+000000200}', "");
Expect(0, 65817, '\p{Is_Nv=+000000200}', "");
Expect(1, 65817, '\p{^Is_Nv=+000000200}', "");
Expect(1, 65817, '\P{Is_Nv=+000000200}', "");
Expect(0, 65817, '\P{^Is_Nv=+000000200}', "");
Error('\p{Numeric_Value=:=	 +00001	8}');
Error('\P{Numeric_Value=:=	 +00001	8}');
Expect(1, 5871, '\p{Numeric_Value=+0000_0000_18}', "");
Expect(0, 5871, '\p{^Numeric_Value=+0000_0000_18}', "");
Expect(0, 5871, '\P{Numeric_Value=+0000_0000_18}', "");
Expect(1, 5871, '\P{^Numeric_Value=+0000_0000_18}', "");
Expect(0, 5870, '\p{Numeric_Value=+0000_0000_18}', "");
Expect(1, 5870, '\p{^Numeric_Value=+0000_0000_18}', "");
Expect(1, 5870, '\P{Numeric_Value=+0000_0000_18}', "");
Expect(0, 5870, '\P{^Numeric_Value=+0000_0000_18}', "");
Error('\p{Nv:	- 0000000018:=}');
Error('\P{Nv:	- 0000000018:=}');
Expect(1, 5871, '\p{Nv=00018}', "");
Expect(0, 5871, '\p{^Nv=00018}', "");
Expect(0, 5871, '\P{Nv=00018}', "");
Expect(1, 5871, '\P{^Nv=00018}', "");
Expect(0, 5870, '\p{Nv=00018}', "");
Expect(1, 5870, '\p{^Nv=00018}', "");
Expect(1, 5870, '\P{Nv=00018}', "");
Expect(0, 5870, '\P{^Nv=00018}', "");
Error('\p{Is_Numeric_Value=:= _00000000018}');
Error('\P{Is_Numeric_Value=:= _00000000018}');
Expect(1, 5871, '\p{Is_Numeric_Value=1_8}', "");
Expect(0, 5871, '\p{^Is_Numeric_Value=1_8}', "");
Expect(0, 5871, '\P{Is_Numeric_Value=1_8}', "");
Expect(1, 5871, '\P{^Is_Numeric_Value=1_8}', "");
Expect(0, 5870, '\p{Is_Numeric_Value=1_8}', "");
Expect(1, 5870, '\p{^Is_Numeric_Value=1_8}', "");
Expect(1, 5870, '\P{Is_Numeric_Value=1_8}', "");
Expect(0, 5870, '\P{^Is_Numeric_Value=1_8}', "");
Error('\p{Is_Nv=-	0/a/0-00_0-0	0018}');
Error('\P{Is_Nv=-	0/a/0-00_0-0	0018}');
Expect(1, 5871, '\p{Is_Nv=+001_8}', "");
Expect(0, 5871, '\p{^Is_Nv=+001_8}', "");
Expect(0, 5871, '\P{Is_Nv=+001_8}', "");
Expect(1, 5871, '\P{^Is_Nv=+001_8}', "");
Expect(0, 5870, '\p{Is_Nv=+001_8}', "");
Expect(1, 5870, '\p{^Is_Nv=+001_8}', "");
Expect(1, 5870, '\P{Is_Nv=+001_8}', "");
Expect(0, 5870, '\P{^Is_Nv=+001_8}', "");
Error('\p{Numeric_Value= :=0003/8}');
Error('\P{Numeric_Value= :=0003/8}');
Expect(1, 8540, '\p{Numeric_Value=+000000003/00000008}', "");
Expect(0, 8540, '\p{^Numeric_Value=+000000003/00000008}', "");
Expect(0, 8540, '\P{Numeric_Value=+000000003/00000008}', "");
Expect(1, 8540, '\P{^Numeric_Value=+000000003/00000008}', "");
Expect(0, 8539, '\p{Numeric_Value=+000000003/00000008}', "");
Expect(1, 8539, '\p{^Numeric_Value=+000000003/00000008}', "");
Expect(1, 8539, '\P{Numeric_Value=+000000003/00000008}', "");
Expect(0, 8539, '\P{^Numeric_Value=+000000003/00000008}', "");
Error('\p{Numeric_Value=0.38}');
Error('\P{Numeric_Value=0.38}');
Expect(1, 8540, '\p{Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Numeric_Value=0.375}', "");
Error('\p{Nv=_/a/0003/000000008}');
Error('\P{Nv=_/a/0003/000000008}');
Expect(1, 8540, '\p{Nv=00003/0000008}', "");
Expect(0, 8540, '\p{^Nv=00003/0000008}', "");
Expect(0, 8540, '\P{Nv=00003/0000008}', "");
Expect(1, 8540, '\P{^Nv=00003/0000008}', "");
Expect(0, 8539, '\p{Nv=00003/0000008}', "");
Expect(1, 8539, '\p{^Nv=00003/0000008}', "");
Expect(1, 8539, '\P{Nv=00003/0000008}', "");
Expect(0, 8539, '\P{^Nv=00003/0000008}', "");
Error('\p{Nv: 0.38}');
Error('\P{Nv: 0.38}');
Expect(1, 8540, '\p{Nv: 0.375}', "");
Expect(0, 8540, '\p{^Nv: 0.375}', "");
Expect(0, 8540, '\P{Nv: 0.375}', "");
Expect(1, 8540, '\P{^Nv: 0.375}', "");
Expect(0, 8539, '\p{Nv: 0.375}', "");
Expect(1, 8539, '\p{^Nv: 0.375}', "");
Expect(1, 8539, '\P{Nv: 0.375}', "");
Expect(0, 8539, '\P{^Nv: 0.375}', "");
Error('\p{Is_Numeric_Value=_/a/003/0000000008}');
Error('\P{Is_Numeric_Value=_/a/003/0000000008}');
Expect(1, 8540, '\p{Is_Numeric_Value=003/00008}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=003/00008}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=003/00008}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=003/00008}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=003/00008}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=003/00008}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=003/00008}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=003/00008}', "");
Error('\p{Is_Numeric_Value=0.38}');
Error('\P{Is_Numeric_Value=0.38}');
Expect(1, 8540, '\p{Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=0.375}', "");
Error('\p{Is_Nv=:=		3/00008}');
Error('\P{Is_Nv=:=		3/00008}');
Expect(1, 8540, '\p{Is_Nv=+3/000000008}', "");
Expect(0, 8540, '\p{^Is_Nv=+3/000000008}', "");
Expect(0, 8540, '\P{Is_Nv=+3/000000008}', "");
Expect(1, 8540, '\P{^Is_Nv=+3/000000008}', "");
Expect(0, 8539, '\p{Is_Nv=+3/000000008}', "");
Expect(1, 8539, '\p{^Is_Nv=+3/000000008}', "");
Expect(1, 8539, '\P{Is_Nv=+3/000000008}', "");
Expect(0, 8539, '\P{^Is_Nv=+3/000000008}', "");
Error('\p{Is_Nv=0.38}');
Error('\P{Is_Nv=0.38}');
Expect(1, 8540, '\p{Is_Nv=0.375}', "");
Expect(0, 8540, '\p{^Is_Nv=0.375}', "");
Expect(0, 8540, '\P{Is_Nv=0.375}', "");
Expect(1, 8540, '\P{^Is_Nv=0.375}', "");
Expect(0, 8539, '\p{Is_Nv=0.375}', "");
Expect(1, 8539, '\p{^Is_Nv=0.375}', "");
Expect(1, 8539, '\P{Is_Nv=0.375}', "");
Expect(0, 8539, '\P{^Is_Nv=0.375}', "");
Error('\p{Numeric_Value=	:=+500}');
Error('\P{Numeric_Value=	:=+500}');
Expect(1, 8558, '\p{Numeric_Value=50_0}', "");
Expect(0, 8558, '\p{^Numeric_Value=50_0}', "");
Expect(0, 8558, '\P{Numeric_Value=50_0}', "");
Expect(1, 8558, '\P{^Numeric_Value=50_0}', "");
Expect(0, 8557, '\p{Numeric_Value=50_0}', "");
Expect(1, 8557, '\p{^Numeric_Value=50_0}', "");
Expect(1, 8557, '\P{Numeric_Value=50_0}', "");
Expect(0, 8557, '\P{^Numeric_Value=50_0}', "");
Error('\p{Nv=- 0000000500/a/}');
Error('\P{Nv=- 0000000500/a/}');
Expect(1, 8558, '\p{Nv=000_005_00}', "");
Expect(0, 8558, '\p{^Nv=000_005_00}', "");
Expect(0, 8558, '\P{Nv=000_005_00}', "");
Expect(1, 8558, '\P{^Nv=000_005_00}', "");
Expect(0, 8557, '\p{Nv=000_005_00}', "");
Expect(1, 8557, '\p{^Nv=000_005_00}', "");
Expect(1, 8557, '\P{Nv=000_005_00}', "");
Expect(0, 8557, '\P{^Nv=000_005_00}', "");
Error('\p{Is_Numeric_Value=:= _0500}');
Error('\P{Is_Numeric_Value=:= _0500}');
Expect(1, 8558, '\p{Is_Numeric_Value=0000000500}', "");
Expect(0, 8558, '\p{^Is_Numeric_Value=0000000500}', "");
Expect(0, 8558, '\P{Is_Numeric_Value=0000000500}', "");
Expect(1, 8558, '\P{^Is_Numeric_Value=0000000500}', "");
Expect(0, 8557, '\p{Is_Numeric_Value=0000000500}', "");
Expect(1, 8557, '\p{^Is_Numeric_Value=0000000500}', "");
Expect(1, 8557, '\P{Is_Numeric_Value=0000000500}', "");
Expect(0, 8557, '\P{^Is_Numeric_Value=0000000500}', "");
Error('\p{Is_Nv=-00500/a/}');
Error('\P{Is_Nv=-00500/a/}');
Expect(1, 8558, '\p{Is_Nv:0_5_00}', "");
Expect(0, 8558, '\p{^Is_Nv:0_5_00}', "");
Expect(0, 8558, '\P{Is_Nv:0_5_00}', "");
Expect(1, 8558, '\P{^Is_Nv:0_5_00}', "");
Expect(0, 8557, '\p{Is_Nv:0_5_00}', "");
Expect(1, 8557, '\p{^Is_Nv:0_5_00}', "");
Expect(1, 8557, '\P{Is_Nv:0_5_00}', "");
Expect(0, 8557, '\P{^Is_Nv:0_5_00}', "");
Error('\p{Numeric_Value=:=_000016}');
Error('\P{Numeric_Value=:=_000016}');
Expect(1, 2553, '\p{Numeric_Value:   01_6}', "");
Expect(0, 2553, '\p{^Numeric_Value:   01_6}', "");
Expect(0, 2553, '\P{Numeric_Value:   01_6}', "");
Expect(1, 2553, '\P{^Numeric_Value:   01_6}', "");
Expect(0, 2552, '\p{Numeric_Value:   01_6}', "");
Expect(1, 2552, '\p{^Numeric_Value:   01_6}', "");
Expect(1, 2552, '\P{Numeric_Value:   01_6}', "");
Expect(0, 2552, '\P{^Numeric_Value:   01_6}', "");
Error('\p{Nv=_/a/+0000000016}');
Error('\P{Nv=_/a/+0000000016}');
Expect(1, 2553, '\p{Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(0, 2553, '\p{^Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(0, 2553, '\P{Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(1, 2553, '\P{^Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(0, 2552, '\p{Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(1, 2552, '\p{^Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(1, 2552, '\P{Nv: 0_0_0_0_0_0_0_0016}', "");
Expect(0, 2552, '\P{^Nv: 0_0_0_0_0_0_0_0016}', "");
Error('\p{Is_Numeric_Value= _+0:=0 0_0 016}');
Error('\P{Is_Numeric_Value= _+0:=0 0_0 016}');
Expect(1, 2553, '\p{Is_Numeric_Value=0000001_6}', "");
Expect(0, 2553, '\p{^Is_Numeric_Value=0000001_6}', "");
Expect(0, 2553, '\P{Is_Numeric_Value=0000001_6}', "");
Expect(1, 2553, '\P{^Is_Numeric_Value=0000001_6}', "");
Expect(0, 2552, '\p{Is_Numeric_Value=0000001_6}', "");
Expect(1, 2552, '\p{^Is_Numeric_Value=0000001_6}', "");
Expect(1, 2552, '\P{Is_Numeric_Value=0000001_6}', "");
Expect(0, 2552, '\P{^Is_Numeric_Value=0000001_6}', "");
Error('\p{Is_Nv=	00000000016/a/}');
Error('\P{Is_Nv=	00000000016/a/}');
Expect(1, 2553, '\p{Is_Nv=0000016}', "");
Expect(0, 2553, '\p{^Is_Nv=0000016}', "");
Expect(0, 2553, '\P{Is_Nv=0000016}', "");
Expect(1, 2553, '\P{^Is_Nv=0000016}', "");
Expect(0, 2552, '\p{Is_Nv=0000016}', "");
Expect(1, 2552, '\p{^Is_Nv=0000016}', "");
Expect(1, 2552, '\P{Is_Nv=0000016}', "");
Expect(0, 2552, '\P{^Is_Nv=0000016}', "");
Error('\p{Numeric_Value= +44:=}');
Error('\P{Numeric_Value= +44:=}');
Expect(1, 12985, '\p{Numeric_Value=+0000004_4}', "");
Expect(0, 12985, '\p{^Numeric_Value=+0000004_4}', "");
Expect(0, 12985, '\P{Numeric_Value=+0000004_4}', "");
Expect(1, 12985, '\P{^Numeric_Value=+0000004_4}', "");
Expect(0, 12984, '\p{Numeric_Value=+0000004_4}', "");
Expect(1, 12984, '\p{^Numeric_Value=+0000004_4}', "");
Expect(1, 12984, '\P{Numeric_Value=+0000004_4}', "");
Expect(0, 12984, '\P{^Numeric_Value=+0000004_4}', "");
Error('\p{Nv:   :=_-000000044}');
Error('\P{Nv:   :=_-000000044}');
Expect(1, 12985, '\p{Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(0, 12985, '\p{^Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(0, 12985, '\P{Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(1, 12985, '\P{^Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(0, 12984, '\p{Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(1, 12984, '\p{^Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(1, 12984, '\P{Nv:	0_0_0_0_0_0_0_0_044}', "");
Expect(0, 12984, '\P{^Nv:	0_0_0_0_0_0_0_0_044}', "");
Error('\p{Is_Numeric_Value=-	0000004:=4}');
Error('\P{Is_Numeric_Value=-	0000004:=4}');
Expect(1, 12985, '\p{Is_Numeric_Value=044}', "");
Expect(0, 12985, '\p{^Is_Numeric_Value=044}', "");
Expect(0, 12985, '\P{Is_Numeric_Value=044}', "");
Expect(1, 12985, '\P{^Is_Numeric_Value=044}', "");
Expect(0, 12984, '\p{Is_Numeric_Value=044}', "");
Expect(1, 12984, '\p{^Is_Numeric_Value=044}', "");
Expect(1, 12984, '\P{Is_Numeric_Value=044}', "");
Expect(0, 12984, '\P{^Is_Numeric_Value=044}', "");
Error('\p{Is_Nv=/a/	+000000044}');
Error('\P{Is_Nv=/a/	+000000044}');
Expect(1, 12985, '\p{Is_Nv=+0000000044}', "");
Expect(0, 12985, '\p{^Is_Nv=+0000000044}', "");
Expect(0, 12985, '\P{Is_Nv=+0000000044}', "");
Expect(1, 12985, '\P{^Is_Nv=+0000000044}', "");
Expect(0, 12984, '\p{Is_Nv=+0000000044}', "");
Expect(1, 12984, '\p{^Is_Nv=+0000000044}', "");
Expect(1, 12984, '\P{Is_Nv=+0000000044}', "");
Expect(0, 12984, '\P{^Is_Nv=+0000000044}', "");
Error('\p{Numeric_Value= :=00000027}');
Error('\P{Numeric_Value= :=00000027}');
Expect(1, 12887, '\p{Numeric_Value=000000027}', "");
Expect(0, 12887, '\p{^Numeric_Value=000000027}', "");
Expect(0, 12887, '\P{Numeric_Value=000000027}', "");
Expect(1, 12887, '\P{^Numeric_Value=000000027}', "");
Expect(0, 12886, '\p{Numeric_Value=000000027}', "");
Expect(1, 12886, '\p{^Numeric_Value=000000027}', "");
Expect(1, 12886, '\P{Numeric_Value=000000027}', "");
Expect(0, 12886, '\P{^Numeric_Value=000000027}', "");
Error('\p{Nv=:= 000002-7}');
Error('\P{Nv=:= 000002-7}');
Expect(1, 12887, '\p{Nv=00000027}', "");
Expect(0, 12887, '\p{^Nv=00000027}', "");
Expect(0, 12887, '\P{Nv=00000027}', "");
Expect(1, 12887, '\P{^Nv=00000027}', "");
Expect(0, 12886, '\p{Nv=00000027}', "");
Expect(1, 12886, '\p{^Nv=00000027}', "");
Expect(1, 12886, '\P{Nv=00000027}', "");
Expect(0, 12886, '\P{^Nv=00000027}', "");
Error('\p{Is_Numeric_Value=:= 00000027}');
Error('\P{Is_Numeric_Value=:= 00000027}');
Expect(1, 12887, '\p{Is_Numeric_Value=+000000027}', "");
Expect(0, 12887, '\p{^Is_Numeric_Value=+000000027}', "");
Expect(0, 12887, '\P{Is_Numeric_Value=+000000027}', "");
Expect(1, 12887, '\P{^Is_Numeric_Value=+000000027}', "");
Expect(0, 12886, '\p{Is_Numeric_Value=+000000027}', "");
Expect(1, 12886, '\p{^Is_Numeric_Value=+000000027}', "");
Expect(1, 12886, '\P{Is_Numeric_Value=+000000027}', "");
Expect(0, 12886, '\P{^Is_Numeric_Value=+000000027}', "");
Error('\p{Is_Nv=	:=02	7}');
Error('\P{Is_Nv=	:=02	7}');
Expect(1, 12887, '\p{Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(0, 12887, '\p{^Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(0, 12887, '\P{Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(1, 12887, '\P{^Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(0, 12886, '\p{Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(1, 12886, '\p{^Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(1, 12886, '\P{Is_Nv=0_0_0_0_0_0_00027}', "");
Expect(0, 12886, '\P{^Is_Nv=0_0_0_0_0_0_00027}', "");
Error('\p{Numeric_Value=/a/+10	00	00000}');
Error('\P{Numeric_Value=/a/+10	00	00000}');
Expect(1, 20159, '\p{Numeric_Value=00000_00001_00000_000}', "");
Expect(0, 20159, '\p{^Numeric_Value=00000_00001_00000_000}', "");
Expect(0, 20159, '\P{Numeric_Value=00000_00001_00000_000}', "");
Expect(1, 20159, '\P{^Numeric_Value=00000_00001_00000_000}', "");
Expect(0, 20158, '\p{Numeric_Value=00000_00001_00000_000}', "");
Expect(1, 20158, '\p{^Numeric_Value=00000_00001_00000_000}', "");
Expect(1, 20158, '\P{Numeric_Value=00000_00001_00000_000}', "");
Expect(0, 20158, '\P{^Numeric_Value=00000_00001_00000_000}', "");
Error('\p{Nv=-+0-00-0/a/1	0_000_0_000}');
Error('\P{Nv=-+0-00-0/a/1	0_000_0_000}');
Expect(1, 20159, '\p{Nv=000000000100000000}', "");
Expect(0, 20159, '\p{^Nv=000000000100000000}', "");
Expect(0, 20159, '\P{Nv=000000000100000000}', "");
Expect(1, 20159, '\P{^Nv=000000000100000000}', "");
Expect(0, 20158, '\p{Nv=000000000100000000}', "");
Expect(1, 20158, '\p{^Nv=000000000100000000}', "");
Expect(1, 20158, '\P{Nv=000000000100000000}', "");
Expect(0, 20158, '\P{^Nv=000000000100000000}', "");
Error('\p{Is_Numeric_Value=	01/a/00-00-00-00}');
Error('\P{Is_Numeric_Value=	01/a/00-00-00-00}');
Expect(1, 20159, '\p{Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(0, 20159, '\p{^Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(0, 20159, '\P{Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(1, 20159, '\P{^Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(0, 20158, '\p{Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(1, 20158, '\p{^Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(1, 20158, '\P{Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Expect(0, 20158, '\P{^Is_Numeric_Value=+00_00_00_01_00_00_00_00}', "");
Error('\p{Is_Nv=  00000000100000000:=}');
Error('\P{Is_Nv=  00000000100000000:=}');
Expect(1, 20159, '\p{Is_Nv=+00_10_00_00_000}', "");
Expect(0, 20159, '\p{^Is_Nv=+00_10_00_00_000}', "");
Expect(0, 20159, '\P{Is_Nv=+00_10_00_00_000}', "");
Expect(1, 20159, '\P{^Is_Nv=+00_10_00_00_000}', "");
Expect(0, 20158, '\p{Is_Nv=+00_10_00_00_000}', "");
Expect(1, 20158, '\p{^Is_Nv=+00_10_00_00_000}', "");
Expect(1, 20158, '\P{Is_Nv=+00_10_00_00_000}', "");
Expect(0, 20158, '\P{^Is_Nv=+00_10_00_00_000}', "");
Error('\p{Numeric_Value=:=	 00000001/0000000010}');
Error('\P{Numeric_Value=:=	 00000001/0000000010}');
Expect(1, 8530, '\p{Numeric_Value=0000001/00000000010}', "");
Expect(0, 8530, '\p{^Numeric_Value=0000001/00000000010}', "");
Expect(0, 8530, '\P{Numeric_Value=0000001/00000000010}', "");
Expect(1, 8530, '\P{^Numeric_Value=0000001/00000000010}', "");
Expect(0, 8529, '\p{Numeric_Value=0000001/00000000010}', "");
Expect(1, 8529, '\p{^Numeric_Value=0000001/00000000010}', "");
Expect(1, 8529, '\P{Numeric_Value=0000001/00000000010}', "");
Expect(0, 8529, '\P{^Numeric_Value=0000001/00000000010}', "");
Expect(1, 8530, '\p{Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Numeric_Value=0.100}', "");
Error('\p{Nv=:= 	000000001/0000010}');
Error('\P{Nv=:= 	000000001/0000010}');
Expect(1, 8530, '\p{Nv=00000001/000010}', "");
Expect(0, 8530, '\p{^Nv=00000001/000010}', "");
Expect(0, 8530, '\P{Nv=00000001/000010}', "");
Expect(1, 8530, '\P{^Nv=00000001/000010}', "");
Expect(0, 8529, '\p{Nv=00000001/000010}', "");
Expect(1, 8529, '\p{^Nv=00000001/000010}', "");
Expect(1, 8529, '\P{Nv=00000001/000010}', "");
Expect(0, 8529, '\P{^Nv=00000001/000010}', "");
Expect(1, 8530, '\p{Nv:	0.100}', "");
Expect(0, 8530, '\p{^Nv:	0.100}', "");
Expect(0, 8530, '\P{Nv:	0.100}', "");
Expect(1, 8530, '\P{^Nv:	0.100}', "");
Expect(0, 8529, '\p{Nv:	0.100}', "");
Expect(1, 8529, '\p{^Nv:	0.100}', "");
Expect(1, 8529, '\P{Nv:	0.100}', "");
Expect(0, 8529, '\P{^Nv:	0.100}', "");
Error('\p{Is_Numeric_Value: 	01/000000010/a/}');
Error('\P{Is_Numeric_Value: 	01/000000010/a/}');
Expect(1, 8530, '\p{Is_Numeric_Value=01/000000010}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=01/000000010}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=01/000000010}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=01/000000010}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=01/000000010}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=01/000000010}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=01/000000010}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=01/000000010}', "");
Expect(1, 8530, '\p{Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=0.100}', "");
Error('\p{Is_Nv=:=_-+0001/000000010}');
Error('\P{Is_Nv=:=_-+0001/000000010}');
Expect(1, 8530, '\p{Is_Nv=000000001/10}', "");
Expect(0, 8530, '\p{^Is_Nv=000000001/10}', "");
Expect(0, 8530, '\P{Is_Nv=000000001/10}', "");
Expect(1, 8530, '\P{^Is_Nv=000000001/10}', "");
Expect(0, 8529, '\p{Is_Nv=000000001/10}', "");
Expect(1, 8529, '\p{^Is_Nv=000000001/10}', "");
Expect(1, 8529, '\P{Is_Nv=000000001/10}', "");
Expect(0, 8529, '\P{^Is_Nv=000000001/10}', "");
Expect(1, 8530, '\p{Is_Nv=0.100}', "");
Expect(0, 8530, '\p{^Is_Nv=0.100}', "");
Expect(0, 8530, '\P{Is_Nv=0.100}', "");
Expect(1, 8530, '\P{^Is_Nv=0.100}', "");
Expect(0, 8529, '\p{Is_Nv=0.100}', "");
Expect(1, 8529, '\p{^Is_Nv=0.100}', "");
Expect(1, 8529, '\P{Is_Nv=0.100}', "");
Expect(0, 8529, '\P{^Is_Nv=0.100}', "");
Error('\p{Numeric_Value=	/a/+0000 00 00	0400}');
Error('\P{Numeric_Value=	/a/+0000 00 00	0400}');
Expect(1, 65820, '\p{Numeric_Value=0000400}', "");
Expect(0, 65820, '\p{^Numeric_Value=0000400}', "");
Expect(0, 65820, '\P{Numeric_Value=0000400}', "");
Expect(1, 65820, '\P{^Numeric_Value=0000400}', "");
Expect(0, 65819, '\p{Numeric_Value=0000400}', "");
Expect(1, 65819, '\p{^Numeric_Value=0000400}', "");
Expect(1, 65819, '\P{Numeric_Value=0000400}', "");
Expect(0, 65819, '\P{^Numeric_Value=0000400}', "");
Error('\p{Nv= +00/a/00_0_0 0-0	400}');
Error('\P{Nv= +00/a/00_0_0 0-0	400}');
Expect(1, 65820, '\p{Nv=+40_0}', "");
Expect(0, 65820, '\p{^Nv=+40_0}', "");
Expect(0, 65820, '\P{Nv=+40_0}', "");
Expect(1, 65820, '\P{^Nv=+40_0}', "");
Expect(0, 65819, '\p{Nv=+40_0}', "");
Expect(1, 65819, '\p{^Nv=+40_0}', "");
Expect(1, 65819, '\P{Nv=+40_0}', "");
Expect(0, 65819, '\P{^Nv=+40_0}', "");
Error('\p{Is_Numeric_Value= :=+000000000400}');
Error('\P{Is_Numeric_Value= :=+000000000400}');
Expect(1, 65820, '\p{Is_Numeric_Value=400}', "");
Expect(0, 65820, '\p{^Is_Numeric_Value=400}', "");
Expect(0, 65820, '\P{Is_Numeric_Value=400}', "");
Expect(1, 65820, '\P{^Is_Numeric_Value=400}', "");
Expect(0, 65819, '\p{Is_Numeric_Value=400}', "");
Expect(1, 65819, '\p{^Is_Numeric_Value=400}', "");
Expect(1, 65819, '\P{Is_Numeric_Value=400}', "");
Expect(0, 65819, '\P{^Is_Numeric_Value=400}', "");
Error('\p{Is_Nv=/a/		00000000400}');
Error('\P{Is_Nv=/a/		00000000400}');
Expect(1, 65820, '\p{Is_Nv=+0400}', "");
Expect(0, 65820, '\p{^Is_Nv=+0400}', "");
Expect(0, 65820, '\P{Is_Nv=+0400}', "");
Expect(1, 65820, '\P{^Is_Nv=+0400}', "");
Expect(0, 65819, '\p{Is_Nv=+0400}', "");
Expect(1, 65819, '\p{^Is_Nv=+0400}', "");
Expect(1, 65819, '\P{Is_Nv=+0400}', "");
Expect(0, 65819, '\P{^Is_Nv=+0400}', "");
Error('\p{Numeric_Value=:=	00000005/0000000008}');
Error('\P{Numeric_Value=:=	00000005/0000000008}');
Expect(1, 8541, '\p{Numeric_Value=+05/0000000008}', "");
Expect(0, 8541, '\p{^Numeric_Value=+05/0000000008}', "");
Expect(0, 8541, '\P{Numeric_Value=+05/0000000008}', "");
Expect(1, 8541, '\P{^Numeric_Value=+05/0000000008}', "");
Expect(0, 8540, '\p{Numeric_Value=+05/0000000008}', "");
Expect(1, 8540, '\p{^Numeric_Value=+05/0000000008}', "");
Expect(1, 8540, '\P{Numeric_Value=+05/0000000008}', "");
Expect(0, 8540, '\P{^Numeric_Value=+05/0000000008}', "");
Error('\p{Numeric_Value=0.63}');
Error('\P{Numeric_Value=0.63}');
Expect(1, 8541, '\p{Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Numeric_Value=0.625}', "");
Error('\p{Nv:_:=0000005/8}');
Error('\P{Nv:_:=0000005/8}');
Expect(1, 8541, '\p{Nv=+0000005/0000000008}', "");
Expect(0, 8541, '\p{^Nv=+0000005/0000000008}', "");
Expect(0, 8541, '\P{Nv=+0000005/0000000008}', "");
Expect(1, 8541, '\P{^Nv=+0000005/0000000008}', "");
Expect(0, 8540, '\p{Nv=+0000005/0000000008}', "");
Expect(1, 8540, '\p{^Nv=+0000005/0000000008}', "");
Expect(1, 8540, '\P{Nv=+0000005/0000000008}', "");
Expect(0, 8540, '\P{^Nv=+0000005/0000000008}', "");
Error('\p{Nv=0.63}');
Error('\P{Nv=0.63}');
Expect(1, 8541, '\p{Nv=0.625}', "");
Expect(0, 8541, '\p{^Nv=0.625}', "");
Expect(0, 8541, '\P{Nv=0.625}', "");
Expect(1, 8541, '\P{^Nv=0.625}', "");
Expect(0, 8540, '\p{Nv=0.625}', "");
Expect(1, 8540, '\p{^Nv=0.625}', "");
Expect(1, 8540, '\P{Nv=0.625}', "");
Expect(0, 8540, '\P{^Nv=0.625}', "");
Error('\p{Is_Numeric_Value= 	0000005/8:=}');
Error('\P{Is_Numeric_Value= 	0000005/8:=}');
Expect(1, 8541, '\p{Is_Numeric_Value=+005/0008}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=+005/0008}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=+005/0008}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=+005/0008}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=+005/0008}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=+005/0008}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=+005/0008}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=+005/0008}', "");
Error('\p{Is_Numeric_Value=0.63}');
Error('\P{Is_Numeric_Value=0.63}');
Expect(1, 8541, '\p{Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=0.625}', "");
Error('\p{Is_Nv= 000000005/0000000008:=}');
Error('\P{Is_Nv= 000000005/0000000008:=}');
Expect(1, 8541, '\p{Is_Nv=005/008}', "");
Expect(0, 8541, '\p{^Is_Nv=005/008}', "");
Expect(0, 8541, '\P{Is_Nv=005/008}', "");
Expect(1, 8541, '\P{^Is_Nv=005/008}', "");
Expect(0, 8540, '\p{Is_Nv=005/008}', "");
Expect(1, 8540, '\p{^Is_Nv=005/008}', "");
Expect(1, 8540, '\P{Is_Nv=005/008}', "");
Expect(0, 8540, '\P{^Is_Nv=005/008}', "");
Error('\p{Is_Nv=0.63}');
Error('\P{Is_Nv=0.63}');
Expect(1, 8541, '\p{Is_Nv=0.625}', "");
Expect(0, 8541, '\p{^Is_Nv=0.625}', "");
Expect(0, 8541, '\P{Is_Nv=0.625}', "");
Expect(1, 8541, '\P{^Is_Nv=0.625}', "");
Expect(0, 8540, '\p{Is_Nv=0.625}', "");
Expect(1, 8540, '\p{^Is_Nv=0.625}', "");
Expect(1, 8540, '\P{Is_Nv=0.625}', "");
Expect(0, 8540, '\P{^Is_Nv=0.625}', "");
Error('\p{Numeric_Value= +000002:=0}');
Error('\P{Numeric_Value= +000002:=0}');
Expect(1, 4979, '\p{Numeric_Value: 0000000020}', "");
Expect(0, 4979, '\p{^Numeric_Value: 0000000020}', "");
Expect(0, 4979, '\P{Numeric_Value: 0000000020}', "");
Expect(1, 4979, '\P{^Numeric_Value: 0000000020}', "");
Expect(0, 4978, '\p{Numeric_Value: 0000000020}', "");
Expect(1, 4978, '\p{^Numeric_Value: 0000000020}', "");
Expect(1, 4978, '\P{Numeric_Value: 0000000020}', "");
Expect(0, 4978, '\P{^Numeric_Value: 0000000020}', "");
Error('\p{Nv=00000020:=}');
Error('\P{Nv=00000020:=}');
Expect(1, 4979, '\p{Nv=00000020}', "");
Expect(0, 4979, '\p{^Nv=00000020}', "");
Expect(0, 4979, '\P{Nv=00000020}', "");
Expect(1, 4979, '\P{^Nv=00000020}', "");
Expect(0, 4978, '\p{Nv=00000020}', "");
Expect(1, 4978, '\p{^Nv=00000020}', "");
Expect(1, 4978, '\P{Nv=00000020}', "");
Expect(0, 4978, '\P{^Nv=00000020}', "");
Error('\p{Is_Numeric_Value= -00020/a/}');
Error('\P{Is_Numeric_Value= -00020/a/}');
Expect(1, 4979, '\p{Is_Numeric_Value=000_000_000_20}', "");
Expect(0, 4979, '\p{^Is_Numeric_Value=000_000_000_20}', "");
Expect(0, 4979, '\P{Is_Numeric_Value=000_000_000_20}', "");
Expect(1, 4979, '\P{^Is_Numeric_Value=000_000_000_20}', "");
Expect(0, 4978, '\p{Is_Numeric_Value=000_000_000_20}', "");
Expect(1, 4978, '\p{^Is_Numeric_Value=000_000_000_20}', "");
Expect(1, 4978, '\P{Is_Numeric_Value=000_000_000_20}', "");
Expect(0, 4978, '\P{^Is_Numeric_Value=000_000_000_20}', "");
Error('\p{Is_Nv=--+0000:=20}');
Error('\P{Is_Nv=--+0000:=20}');
Expect(1, 4979, '\p{Is_Nv=0_0_20}', "");
Expect(0, 4979, '\p{^Is_Nv=0_0_20}', "");
Expect(0, 4979, '\P{Is_Nv=0_0_20}', "");
Expect(1, 4979, '\P{^Is_Nv=0_0_20}', "");
Expect(0, 4978, '\p{Is_Nv=0_0_20}', "");
Expect(1, 4978, '\p{^Is_Nv=0_0_20}', "");
Expect(1, 4978, '\P{Is_Nv=0_0_20}', "");
Expect(0, 4978, '\P{^Is_Nv=0_0_20}', "");
Error('\p{Numeric_Value=	-+000030000/a/}');
Error('\P{Numeric_Value=	-+000030000/a/}');
Expect(1, 65837, '\p{Numeric_Value=+000_000_030_000}', "");
Expect(0, 65837, '\p{^Numeric_Value=+000_000_030_000}', "");
Expect(0, 65837, '\P{Numeric_Value=+000_000_030_000}', "");
Expect(1, 65837, '\P{^Numeric_Value=+000_000_030_000}', "");
Expect(0, 65836, '\p{Numeric_Value=+000_000_030_000}', "");
Expect(1, 65836, '\p{^Numeric_Value=+000_000_030_000}', "");
Expect(1, 65836, '\P{Numeric_Value=+000_000_030_000}', "");
Expect(0, 65836, '\P{^Numeric_Value=+000_000_030_000}', "");
Error('\p{Nv=:=-+000000030000}');
Error('\P{Nv=:=-+000000030000}');
Expect(1, 65837, '\p{Nv: +00000030000}', "");
Expect(0, 65837, '\p{^Nv: +00000030000}', "");
Expect(0, 65837, '\P{Nv: +00000030000}', "");
Expect(1, 65837, '\P{^Nv: +00000030000}', "");
Expect(0, 65836, '\p{Nv: +00000030000}', "");
Expect(1, 65836, '\p{^Nv: +00000030000}', "");
Expect(1, 65836, '\P{Nv: +00000030000}', "");
Expect(0, 65836, '\P{^Nv: +00000030000}', "");
Error('\p{Is_Numeric_Value= -0030000:=}');
Error('\P{Is_Numeric_Value= -0030000:=}');
Expect(1, 65837, '\p{Is_Numeric_Value=+0000003000_0}', "");
Expect(0, 65837, '\p{^Is_Numeric_Value=+0000003000_0}', "");
Expect(0, 65837, '\P{Is_Numeric_Value=+0000003000_0}', "");
Expect(1, 65837, '\P{^Is_Numeric_Value=+0000003000_0}', "");
Expect(0, 65836, '\p{Is_Numeric_Value=+0000003000_0}', "");
Expect(1, 65836, '\p{^Is_Numeric_Value=+0000003000_0}', "");
Expect(1, 65836, '\P{Is_Numeric_Value=+0000003000_0}', "");
Expect(0, 65836, '\P{^Is_Numeric_Value=+0000003000_0}', "");
Error('\p{Is_Nv=_-0000030000:=}');
Error('\P{Is_Nv=_-0000030000:=}');
Expect(1, 65837, '\p{Is_Nv=030000}', "");
Expect(0, 65837, '\p{^Is_Nv=030000}', "");
Expect(0, 65837, '\P{Is_Nv=030000}', "");
Expect(1, 65837, '\P{^Is_Nv=030000}', "");
Expect(0, 65836, '\p{Is_Nv=030000}', "");
Expect(1, 65836, '\p{^Is_Nv=030000}', "");
Expect(1, 65836, '\P{Is_Nv=030000}', "");
Expect(0, 65836, '\P{^Is_Nv=030000}', "");
Error('\p{Numeric_Value=-:=0000000010}');
Error('\P{Numeric_Value=-:=0000000010}');
Expect(1, 3056, '\p{Numeric_Value:00000010}', "");
Expect(0, 3056, '\p{^Numeric_Value:00000010}', "");
Expect(0, 3056, '\P{Numeric_Value:00000010}', "");
Expect(1, 3056, '\P{^Numeric_Value:00000010}', "");
Expect(0, 3055, '\p{Numeric_Value:00000010}', "");
Expect(1, 3055, '\p{^Numeric_Value:00000010}', "");
Expect(1, 3055, '\P{Numeric_Value:00000010}', "");
Expect(0, 3055, '\P{^Numeric_Value:00000010}', "");
Error('\p{Nv: 00	01-0/a/}');
Error('\P{Nv: 00	01-0/a/}');
Expect(1, 3056, '\p{Nv=+000000010}', "");
Expect(0, 3056, '\p{^Nv=+000000010}', "");
Expect(0, 3056, '\P{Nv=+000000010}', "");
Expect(1, 3056, '\P{^Nv=+000000010}', "");
Expect(0, 3055, '\p{Nv=+000000010}', "");
Expect(1, 3055, '\p{^Nv=+000000010}', "");
Expect(1, 3055, '\P{Nv=+000000010}', "");
Expect(0, 3055, '\P{^Nv=+000000010}', "");
Error('\p{Is_Numeric_Value:	--0_0:=0	0_0	0_0-010}');
Error('\P{Is_Numeric_Value:	--0_0:=0	0_0	0_0-010}');
Expect(1, 3056, '\p{Is_Numeric_Value=000000001_0}', "");
Expect(0, 3056, '\p{^Is_Numeric_Value=000000001_0}', "");
Expect(0, 3056, '\P{Is_Numeric_Value=000000001_0}', "");
Expect(1, 3056, '\P{^Is_Numeric_Value=000000001_0}', "");
Expect(0, 3055, '\p{Is_Numeric_Value=000000001_0}', "");
Expect(1, 3055, '\p{^Is_Numeric_Value=000000001_0}', "");
Expect(1, 3055, '\P{Is_Numeric_Value=000000001_0}', "");
Expect(0, 3055, '\P{^Is_Numeric_Value=000000001_0}', "");
Error('\p{Is_Nv=/a/_-0000010}');
Error('\P{Is_Nv=/a/_-0000010}');
Expect(1, 3056, '\p{Is_Nv=+1_0}', "");
Expect(0, 3056, '\p{^Is_Nv=+1_0}', "");
Expect(0, 3056, '\P{Is_Nv=+1_0}', "");
Expect(1, 3056, '\P{^Is_Nv=+1_0}', "");
Expect(0, 3055, '\p{Is_Nv=+1_0}', "");
Expect(1, 3055, '\p{^Is_Nv=+1_0}', "");
Expect(1, 3055, '\P{Is_Nv=+1_0}', "");
Expect(0, 3055, '\P{^Is_Nv=+1_0}', "");
Error('\p{Numeric_Value=	00000003-1/a/}');
Error('\P{Numeric_Value=	00000003-1/a/}');
Expect(1, 12891, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(0, 12891, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(0, 12891, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(1, 12891, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(0, 12890, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(1, 12890, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(1, 12890, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Expect(0, 12890, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_31}', "");
Error('\p{Nv:   _:=00000000031}');
Error('\P{Nv:   _:=00000000031}');
Expect(1, 12891, '\p{Nv=00000031}', "");
Expect(0, 12891, '\p{^Nv=00000031}', "");
Expect(0, 12891, '\P{Nv=00000031}', "");
Expect(1, 12891, '\P{^Nv=00000031}', "");
Expect(0, 12890, '\p{Nv=00000031}', "");
Expect(1, 12890, '\p{^Nv=00000031}', "");
Expect(1, 12890, '\P{Nv=00000031}', "");
Expect(0, 12890, '\P{^Nv=00000031}', "");
Error('\p{Is_Numeric_Value=-:=031}');
Error('\P{Is_Numeric_Value=-:=031}');
Expect(1, 12891, '\p{Is_Numeric_Value=+0031}', "");
Expect(0, 12891, '\p{^Is_Numeric_Value=+0031}', "");
Expect(0, 12891, '\P{Is_Numeric_Value=+0031}', "");
Expect(1, 12891, '\P{^Is_Numeric_Value=+0031}', "");
Expect(0, 12890, '\p{Is_Numeric_Value=+0031}', "");
Expect(1, 12890, '\p{^Is_Numeric_Value=+0031}', "");
Expect(1, 12890, '\P{Is_Numeric_Value=+0031}', "");
Expect(0, 12890, '\P{^Is_Numeric_Value=+0031}', "");
Error('\p{Is_Nv= :=00031}');
Error('\P{Is_Nv= :=00031}');
Expect(1, 12891, '\p{Is_Nv=0000031}', "");
Expect(0, 12891, '\p{^Is_Nv=0000031}', "");
Expect(0, 12891, '\P{Is_Nv=0000031}', "");
Expect(1, 12891, '\P{^Is_Nv=0000031}', "");
Expect(0, 12890, '\p{Is_Nv=0000031}', "");
Expect(1, 12890, '\p{^Is_Nv=0000031}', "");
Expect(1, 12890, '\P{Is_Nv=0000031}', "");
Expect(0, 12890, '\P{^Is_Nv=0000031}', "");
Error('\p{Numeric_Value=	/a/00000	0	0	08000}');
Error('\P{Numeric_Value=	/a/00000	0	0	08000}');
Expect(1, 65833, '\p{Numeric_Value=008000}', "");
Expect(0, 65833, '\p{^Numeric_Value=008000}', "");
Expect(0, 65833, '\P{Numeric_Value=008000}', "");
Expect(1, 65833, '\P{^Numeric_Value=008000}', "");
Expect(0, 65832, '\p{Numeric_Value=008000}', "");
Expect(1, 65832, '\p{^Numeric_Value=008000}', "");
Expect(1, 65832, '\P{Numeric_Value=008000}', "");
Expect(0, 65832, '\P{^Numeric_Value=008000}', "");
Error('\p{Nv=-0_0 0_0 0/a/00	0_80	00}');
Error('\P{Nv=-0_0 0_0 0/a/00	0_80	00}');
Expect(1, 65833, '\p{Nv=000008000}', "");
Expect(0, 65833, '\p{^Nv=000008000}', "");
Expect(0, 65833, '\P{Nv=000008000}', "");
Expect(1, 65833, '\P{^Nv=000008000}', "");
Expect(0, 65832, '\p{Nv=000008000}', "");
Expect(1, 65832, '\p{^Nv=000008000}', "");
Expect(1, 65832, '\P{Nv=000008000}', "");
Expect(0, 65832, '\P{^Nv=000008000}', "");
Error('\p{Is_Numeric_Value=/a/00	0_000_008000}');
Error('\P{Is_Numeric_Value=/a/00	0_000_008000}');
Expect(1, 65833, '\p{Is_Numeric_Value=+00000008000}', "");
Expect(0, 65833, '\p{^Is_Numeric_Value=+00000008000}', "");
Expect(0, 65833, '\P{Is_Numeric_Value=+00000008000}', "");
Expect(1, 65833, '\P{^Is_Numeric_Value=+00000008000}', "");
Expect(0, 65832, '\p{Is_Numeric_Value=+00000008000}', "");
Expect(1, 65832, '\p{^Is_Numeric_Value=+00000008000}', "");
Expect(1, 65832, '\P{Is_Numeric_Value=+00000008000}', "");
Expect(0, 65832, '\P{^Is_Numeric_Value=+00000008000}', "");
Error('\p{Is_Nv=/a/- 800-0}');
Error('\P{Is_Nv=/a/- 800-0}');
Expect(1, 65833, '\p{Is_Nv=0008000}', "");
Expect(0, 65833, '\p{^Is_Nv=0008000}', "");
Expect(0, 65833, '\P{Is_Nv=0008000}', "");
Expect(1, 65833, '\P{^Is_Nv=0008000}', "");
Expect(0, 65832, '\p{Is_Nv=0008000}', "");
Expect(1, 65832, '\p{^Is_Nv=0008000}', "");
Expect(1, 65832, '\P{Is_Nv=0008000}', "");
Expect(0, 65832, '\P{^Is_Nv=0008000}', "");
Error('\p{Numeric_Value=_:=0_0	0 10	0-0_00_0-000000}');
Error('\P{Numeric_Value=_:=0_0	0 10	0-0_00_0-000000}');
Expect(1, 20806, '\p{Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(0, 20806, '\p{^Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(0, 20806, '\P{Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(1, 20806, '\P{^Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(0, 20805, '\p{Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(1, 20805, '\p{^Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(1, 20805, '\P{Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Expect(0, 20805, '\P{^Numeric_Value=0_0_0_0_1_0_0_0_0_0_0_0_0_0_000}', "");
Error('\p{Nv=_:=00000001000000000000}');
Error('\P{Nv=_:=00000001000000000000}');
Expect(1, 20806, '\p{Nv=0000000001000000000000}', "");
Expect(0, 20806, '\p{^Nv=0000000001000000000000}', "");
Expect(0, 20806, '\P{Nv=0000000001000000000000}', "");
Expect(1, 20806, '\P{^Nv=0000000001000000000000}', "");
Expect(0, 20805, '\p{Nv=0000000001000000000000}', "");
Expect(1, 20805, '\p{^Nv=0000000001000000000000}', "");
Expect(1, 20805, '\P{Nv=0000000001000000000000}', "");
Expect(0, 20805, '\P{^Nv=0000000001000000000000}', "");
Error('\p{Is_Numeric_Value=	01000000000000:=}');
Error('\P{Is_Numeric_Value=	01000000000000:=}');
Expect(1, 20806, '\p{Is_Numeric_Value=+0100000000000_0}', "");
Expect(0, 20806, '\p{^Is_Numeric_Value=+0100000000000_0}', "");
Expect(0, 20806, '\P{Is_Numeric_Value=+0100000000000_0}', "");
Expect(1, 20806, '\P{^Is_Numeric_Value=+0100000000000_0}', "");
Expect(0, 20805, '\p{Is_Numeric_Value=+0100000000000_0}', "");
Expect(1, 20805, '\p{^Is_Numeric_Value=+0100000000000_0}', "");
Expect(1, 20805, '\P{Is_Numeric_Value=+0100000000000_0}', "");
Expect(0, 20805, '\P{^Is_Numeric_Value=+0100000000000_0}', "");
Error('\p{Is_Nv= -0:=0-1 0	0_0 0 0 0000000}');
Error('\P{Is_Nv= -0:=0-1 0	0_0 0 0 0000000}');
Expect(1, 20806, '\p{Is_Nv=001000000000000}', "");
Expect(0, 20806, '\p{^Is_Nv=001000000000000}', "");
Expect(0, 20806, '\P{Is_Nv=001000000000000}', "");
Expect(1, 20806, '\P{^Is_Nv=001000000000000}', "");
Expect(0, 20805, '\p{Is_Nv=001000000000000}', "");
Expect(1, 20805, '\p{^Is_Nv=001000000000000}', "");
Expect(1, 20805, '\P{Is_Nv=001000000000000}', "");
Expect(0, 20805, '\P{^Is_Nv=001000000000000}', "");
Error('\p{Numeric_Value=:=03_5}');
Error('\P{Numeric_Value=:=03_5}');
Expect(1, 12895, '\p{Numeric_Value=00000000035}', "");
Expect(0, 12895, '\p{^Numeric_Value=00000000035}', "");
Expect(0, 12895, '\P{Numeric_Value=00000000035}', "");
Expect(1, 12895, '\P{^Numeric_Value=00000000035}', "");
Expect(0, 12894, '\p{Numeric_Value=00000000035}', "");
Expect(1, 12894, '\p{^Numeric_Value=00000000035}', "");
Expect(1, 12894, '\P{Numeric_Value=00000000035}', "");
Expect(0, 12894, '\P{^Numeric_Value=00000000035}', "");
Error('\p{Nv=	+003:=5}');
Error('\P{Nv=	+003:=5}');
Expect(1, 12895, '\p{Nv=000035}', "");
Expect(0, 12895, '\p{^Nv=000035}', "");
Expect(0, 12895, '\P{Nv=000035}', "");
Expect(1, 12895, '\P{^Nv=000035}', "");
Expect(0, 12894, '\p{Nv=000035}', "");
Expect(1, 12894, '\p{^Nv=000035}', "");
Expect(1, 12894, '\P{Nv=000035}', "");
Expect(0, 12894, '\P{^Nv=000035}', "");
Error('\p{Is_Numeric_Value=_:=+035}');
Error('\P{Is_Numeric_Value=_:=+035}');
Expect(1, 12895, '\p{Is_Numeric_Value:	00000000035}', "");
Expect(0, 12895, '\p{^Is_Numeric_Value:	00000000035}', "");
Expect(0, 12895, '\P{Is_Numeric_Value:	00000000035}', "");
Expect(1, 12895, '\P{^Is_Numeric_Value:	00000000035}', "");
Expect(0, 12894, '\p{Is_Numeric_Value:	00000000035}', "");
Expect(1, 12894, '\p{^Is_Numeric_Value:	00000000035}', "");
Expect(1, 12894, '\P{Is_Numeric_Value:	00000000035}', "");
Expect(0, 12894, '\P{^Is_Numeric_Value:	00000000035}', "");
Error('\p{Is_Nv=-:=+0 0 0	00 0 00 0-35}');
Error('\P{Is_Nv=-:=+0 0 0	00 0 00 0-35}');
Expect(1, 12895, '\p{Is_Nv:0_0_0_0_35}', "");
Expect(0, 12895, '\p{^Is_Nv:0_0_0_0_35}', "");
Expect(0, 12895, '\P{Is_Nv:0_0_0_0_35}', "");
Expect(1, 12895, '\P{^Is_Nv:0_0_0_0_35}', "");
Expect(0, 12894, '\p{Is_Nv:0_0_0_0_35}', "");
Expect(1, 12894, '\p{^Is_Nv:0_0_0_0_35}', "");
Expect(1, 12894, '\P{Is_Nv:0_0_0_0_35}', "");
Expect(0, 12894, '\P{^Is_Nv:0_0_0_0_35}', "");
Error('\p{Numeric_Value=- +0000011:=}');
Error('\P{Numeric_Value=- +0000011:=}');
Expect(1, 8554, '\p{Numeric_Value=00000011}', "");
Expect(0, 8554, '\p{^Numeric_Value=00000011}', "");
Expect(0, 8554, '\P{Numeric_Value=00000011}', "");
Expect(1, 8554, '\P{^Numeric_Value=00000011}', "");
Expect(0, 8553, '\p{Numeric_Value=00000011}', "");
Expect(1, 8553, '\p{^Numeric_Value=00000011}', "");
Expect(1, 8553, '\P{Numeric_Value=00000011}', "");
Expect(0, 8553, '\P{^Numeric_Value=00000011}', "");
Error('\p{Nv:   /a/- +1 1}');
Error('\P{Nv:   /a/- +1 1}');
Expect(1, 8554, '\p{Nv=+0_0_0_0_0_0_00011}', "");
Expect(0, 8554, '\p{^Nv=+0_0_0_0_0_0_00011}', "");
Expect(0, 8554, '\P{Nv=+0_0_0_0_0_0_00011}', "");
Expect(1, 8554, '\P{^Nv=+0_0_0_0_0_0_00011}', "");
Expect(0, 8553, '\p{Nv=+0_0_0_0_0_0_00011}', "");
Expect(1, 8553, '\p{^Nv=+0_0_0_0_0_0_00011}', "");
Expect(1, 8553, '\P{Nv=+0_0_0_0_0_0_00011}', "");
Expect(0, 8553, '\P{^Nv=+0_0_0_0_0_0_00011}', "");
Error('\p{Is_Numeric_Value:	 :=0001_1}');
Error('\P{Is_Numeric_Value:	 :=0001_1}');
Expect(1, 8554, '\p{Is_Numeric_Value=1_1}', "");
Expect(0, 8554, '\p{^Is_Numeric_Value=1_1}', "");
Expect(0, 8554, '\P{Is_Numeric_Value=1_1}', "");
Expect(1, 8554, '\P{^Is_Numeric_Value=1_1}', "");
Expect(0, 8553, '\p{Is_Numeric_Value=1_1}', "");
Expect(1, 8553, '\p{^Is_Numeric_Value=1_1}', "");
Expect(1, 8553, '\P{Is_Numeric_Value=1_1}', "");
Expect(0, 8553, '\P{^Is_Numeric_Value=1_1}', "");
Error('\p{Is_Nv=/a/0-0 0	0 0_0	0 11}');
Error('\P{Is_Nv=/a/0-0 0	0 0_0	0 11}');
Expect(1, 8554, '\p{Is_Nv=+00000000011}', "");
Expect(0, 8554, '\p{^Is_Nv=+00000000011}', "");
Expect(0, 8554, '\P{Is_Nv=+00000000011}', "");
Expect(1, 8554, '\P{^Is_Nv=+00000000011}', "");
Expect(0, 8553, '\p{Is_Nv=+00000000011}', "");
Expect(1, 8553, '\p{^Is_Nv=+00000000011}', "");
Expect(1, 8553, '\P{Is_Nv=+00000000011}', "");
Expect(0, 8553, '\P{^Is_Nv=+00000000011}', "");
Error('\p{Numeric_Value=-:=0000001/5}');
Error('\P{Numeric_Value=-:=0000001/5}');
Expect(1, 8533, '\p{Numeric_Value=000001/005}', "");
Expect(0, 8533, '\p{^Numeric_Value=000001/005}', "");
Expect(0, 8533, '\P{Numeric_Value=000001/005}', "");
Expect(1, 8533, '\P{^Numeric_Value=000001/005}', "");
Expect(0, 8532, '\p{Numeric_Value=000001/005}', "");
Expect(1, 8532, '\p{^Numeric_Value=000001/005}', "");
Expect(1, 8532, '\P{Numeric_Value=000001/005}', "");
Expect(0, 8532, '\P{^Numeric_Value=000001/005}', "");
Expect(1, 8533, '\p{Numeric_Value=0.200}', "");
Expect(0, 8533, '\p{^Numeric_Value=0.200}', "");
Expect(0, 8533, '\P{Numeric_Value=0.200}', "");
Expect(1, 8533, '\P{^Numeric_Value=0.200}', "");
Expect(0, 8532, '\p{Numeric_Value=0.200}', "");
Expect(1, 8532, '\p{^Numeric_Value=0.200}', "");
Expect(1, 8532, '\P{Numeric_Value=0.200}', "");
Expect(0, 8532, '\P{^Numeric_Value=0.200}', "");
Error('\p{Nv=:=_+01/05}');
Error('\P{Nv=:=_+01/05}');
Expect(1, 8533, '\p{Nv=0001/0005}', "");
Expect(0, 8533, '\p{^Nv=0001/0005}', "");
Expect(0, 8533, '\P{Nv=0001/0005}', "");
Expect(1, 8533, '\P{^Nv=0001/0005}', "");
Expect(0, 8532, '\p{Nv=0001/0005}', "");
Expect(1, 8532, '\p{^Nv=0001/0005}', "");
Expect(1, 8532, '\P{Nv=0001/0005}', "");
Expect(0, 8532, '\P{^Nv=0001/0005}', "");
Expect(1, 8533, '\p{Nv=0.200}', "");
Expect(0, 8533, '\p{^Nv=0.200}', "");
Expect(0, 8533, '\P{Nv=0.200}', "");
Expect(1, 8533, '\P{^Nv=0.200}', "");
Expect(0, 8532, '\p{Nv=0.200}', "");
Expect(1, 8532, '\p{^Nv=0.200}', "");
Expect(1, 8532, '\P{Nv=0.200}', "");
Expect(0, 8532, '\P{^Nv=0.200}', "");
Error('\p{Is_Numeric_Value=/a/_00001/005}');
Error('\P{Is_Numeric_Value=/a/_00001/005}');
Expect(1, 8533, '\p{Is_Numeric_Value=+0000000001/005}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=+0000000001/005}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=+0000000001/005}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=+0000000001/005}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=+0000000001/005}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=+0000000001/005}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=+0000000001/005}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=+0000000001/005}', "");
Expect(1, 8533, '\p{Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=0.200}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=0.200}', "");
Error('\p{Is_Nv= -+00000001/00005:=}');
Error('\P{Is_Nv= -+00000001/00005:=}');
Expect(1, 8533, '\p{Is_Nv=+00000001/00005}', "");
Expect(0, 8533, '\p{^Is_Nv=+00000001/00005}', "");
Expect(0, 8533, '\P{Is_Nv=+00000001/00005}', "");
Expect(1, 8533, '\P{^Is_Nv=+00000001/00005}', "");
Expect(0, 8532, '\p{Is_Nv=+00000001/00005}', "");
Expect(1, 8532, '\p{^Is_Nv=+00000001/00005}', "");
Expect(1, 8532, '\P{Is_Nv=+00000001/00005}', "");
Expect(0, 8532, '\P{^Is_Nv=+00000001/00005}', "");
Expect(1, 8533, '\p{Is_Nv=0.200}', "");
Expect(0, 8533, '\p{^Is_Nv=0.200}', "");
Expect(0, 8533, '\P{Is_Nv=0.200}', "");
Expect(1, 8533, '\P{^Is_Nv=0.200}', "");
Expect(0, 8532, '\p{Is_Nv=0.200}', "");
Expect(1, 8532, '\p{^Is_Nv=0.200}', "");
Expect(1, 8532, '\P{Is_Nv=0.200}', "");
Expect(0, 8532, '\P{^Is_Nv=0.200}', "");
Error('\p{Numeric_Value=_ NaN:=}');
Error('\P{Numeric_Value=_ NaN:=}');
Expect(1, 47, '\p{Numeric_Value=nan}', "");
Expect(0, 47, '\p{^Numeric_Value=nan}', "");
Expect(0, 47, '\P{Numeric_Value=nan}', "");
Expect(1, 47, '\P{^Numeric_Value=nan}', "");
Expect(0, 57, '\p{Numeric_Value=nan}', "");
Expect(1, 57, '\p{^Numeric_Value=nan}', "");
Expect(1, 57, '\P{Numeric_Value=nan}', "");
Expect(0, 57, '\P{^Numeric_Value=nan}', "");
Expect(1, 47, '\p{Numeric_Value=NAN}', "");
Expect(0, 47, '\p{^Numeric_Value=NAN}', "");
Expect(0, 47, '\P{Numeric_Value=NAN}', "");
Expect(1, 47, '\P{^Numeric_Value=NAN}', "");
Expect(0, 57, '\p{Numeric_Value=NAN}', "");
Expect(1, 57, '\p{^Numeric_Value=NAN}', "");
Expect(1, 57, '\P{Numeric_Value=NAN}', "");
Expect(0, 57, '\P{^Numeric_Value=NAN}', "");
Error('\p{Nv=-:=NAN}');
Error('\P{Nv=-:=NAN}');
Expect(1, 47, '\p{Nv=nan}', "");
Expect(0, 47, '\p{^Nv=nan}', "");
Expect(0, 47, '\P{Nv=nan}', "");
Expect(1, 47, '\P{^Nv=nan}', "");
Expect(0, 57, '\p{Nv=nan}', "");
Expect(1, 57, '\p{^Nv=nan}', "");
Expect(1, 57, '\P{Nv=nan}', "");
Expect(0, 57, '\P{^Nv=nan}', "");
Expect(1, 47, '\p{Nv= NaN}', "");
Expect(0, 47, '\p{^Nv= NaN}', "");
Expect(0, 47, '\P{Nv= NaN}', "");
Expect(1, 47, '\P{^Nv= NaN}', "");
Expect(0, 57, '\p{Nv= NaN}', "");
Expect(1, 57, '\p{^Nv= NaN}', "");
Expect(1, 57, '\P{Nv= NaN}', "");
Expect(0, 57, '\P{^Nv= NaN}', "");
Error('\p{Is_Numeric_Value=-:=NaN}');
Error('\P{Is_Numeric_Value=-:=NaN}');
Expect(1, 47, '\p{Is_Numeric_Value: nan}', "");
Expect(0, 47, '\p{^Is_Numeric_Value: nan}', "");
Expect(0, 47, '\P{Is_Numeric_Value: nan}', "");
Expect(1, 47, '\P{^Is_Numeric_Value: nan}', "");
Expect(0, 57, '\p{Is_Numeric_Value: nan}', "");
Expect(1, 57, '\p{^Is_Numeric_Value: nan}', "");
Expect(1, 57, '\P{Is_Numeric_Value: nan}', "");
Expect(0, 57, '\P{^Is_Numeric_Value: nan}', "");
Expect(1, 47, '\p{Is_Numeric_Value:    -nan}', "");
Expect(0, 47, '\p{^Is_Numeric_Value:    -nan}', "");
Expect(0, 47, '\P{Is_Numeric_Value:    -nan}', "");
Expect(1, 47, '\P{^Is_Numeric_Value:    -nan}', "");
Expect(0, 57, '\p{Is_Numeric_Value:    -nan}', "");
Expect(1, 57, '\p{^Is_Numeric_Value:    -nan}', "");
Expect(1, 57, '\P{Is_Numeric_Value:    -nan}', "");
Expect(0, 57, '\P{^Is_Numeric_Value:    -nan}', "");
Error('\p{Is_Nv=_NaN:=}');
Error('\P{Is_Nv=_NaN:=}');
Expect(1, 47, '\p{Is_Nv=nan}', "");
Expect(0, 47, '\p{^Is_Nv=nan}', "");
Expect(0, 47, '\P{Is_Nv=nan}', "");
Expect(1, 47, '\P{^Is_Nv=nan}', "");
Expect(0, 57, '\p{Is_Nv=nan}', "");
Expect(1, 57, '\p{^Is_Nv=nan}', "");
Expect(1, 57, '\P{Is_Nv=nan}', "");
Expect(0, 57, '\P{^Is_Nv=nan}', "");
Expect(1, 47, '\p{Is_Nv=- nan}', "");
Expect(0, 47, '\p{^Is_Nv=- nan}', "");
Expect(0, 47, '\P{Is_Nv=- nan}', "");
Expect(1, 47, '\P{^Is_Nv=- nan}', "");
Expect(0, 57, '\p{Is_Nv=- nan}', "");
Expect(1, 57, '\p{^Is_Nv=- nan}', "");
Expect(1, 57, '\P{Is_Nv=- nan}', "");
Expect(0, 57, '\P{^Is_Nv=- nan}', "");
Error('\p{Numeric_Value=__000015/02/a/}');
Error('\P{Numeric_Value=__000015/02/a/}');
Expect(1, 3889, '\p{Numeric_Value=00015/2}', "");
Expect(0, 3889, '\p{^Numeric_Value=00015/2}', "");
Expect(0, 3889, '\P{Numeric_Value=00015/2}', "");
Expect(1, 3889, '\P{^Numeric_Value=00015/2}', "");
Expect(0, 3888, '\p{Numeric_Value=00015/2}', "");
Expect(1, 3888, '\p{^Numeric_Value=00015/2}', "");
Expect(1, 3888, '\P{Numeric_Value=00015/2}', "");
Expect(0, 3888, '\P{^Numeric_Value=00015/2}', "");
Expect(1, 3889, '\p{Numeric_Value:	7.500}', "");
Expect(0, 3889, '\p{^Numeric_Value:	7.500}', "");
Expect(0, 3889, '\P{Numeric_Value:	7.500}', "");
Expect(1, 3889, '\P{^Numeric_Value:	7.500}', "");
Expect(0, 3888, '\p{Numeric_Value:	7.500}', "");
Expect(1, 3888, '\p{^Numeric_Value:	7.500}', "");
Expect(1, 3888, '\P{Numeric_Value:	7.500}', "");
Expect(0, 3888, '\P{^Numeric_Value:	7.500}', "");
Error('\p{Nv=/a/-+0000015/00002}');
Error('\P{Nv=/a/-+0000015/00002}');
Expect(1, 3889, '\p{Nv=015/00000002}', "");
Expect(0, 3889, '\p{^Nv=015/00000002}', "");
Expect(0, 3889, '\P{Nv=015/00000002}', "");
Expect(1, 3889, '\P{^Nv=015/00000002}', "");
Expect(0, 3888, '\p{Nv=015/00000002}', "");
Expect(1, 3888, '\p{^Nv=015/00000002}', "");
Expect(1, 3888, '\P{Nv=015/00000002}', "");
Expect(0, 3888, '\P{^Nv=015/00000002}', "");
Expect(1, 3889, '\p{Nv: 7.500}', "");
Expect(0, 3889, '\p{^Nv: 7.500}', "");
Expect(0, 3889, '\P{Nv: 7.500}', "");
Expect(1, 3889, '\P{^Nv: 7.500}', "");
Expect(0, 3888, '\p{Nv: 7.500}', "");
Expect(1, 3888, '\p{^Nv: 7.500}', "");
Expect(1, 3888, '\P{Nv: 7.500}', "");
Expect(0, 3888, '\P{^Nv: 7.500}', "");
Error('\p{Is_Numeric_Value=_/a/00000015/000002}');
Error('\P{Is_Numeric_Value=_/a/00000015/000002}');
Expect(1, 3889, '\p{Is_Numeric_Value=00000000015/000002}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value=00000000015/000002}', "");
Expect(0, 3889, '\P{Is_Numeric_Value=00000000015/000002}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value=00000000015/000002}', "");
Expect(0, 3888, '\p{Is_Numeric_Value=00000000015/000002}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value=00000000015/000002}', "");
Expect(1, 3888, '\P{Is_Numeric_Value=00000000015/000002}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value=00000000015/000002}', "");
Expect(1, 3889, '\p{Is_Numeric_Value=7.500}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value=7.500}', "");
Expect(0, 3889, '\P{Is_Numeric_Value=7.500}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value=7.500}', "");
Expect(0, 3888, '\p{Is_Numeric_Value=7.500}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value=7.500}', "");
Expect(1, 3888, '\P{Is_Numeric_Value=7.500}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value=7.500}', "");
Error('\p{Is_Nv=_+015/00000002:=}');
Error('\P{Is_Nv=_+015/00000002:=}');
Expect(1, 3889, '\p{Is_Nv=000000015/00002}', "");
Expect(0, 3889, '\p{^Is_Nv=000000015/00002}', "");
Expect(0, 3889, '\P{Is_Nv=000000015/00002}', "");
Expect(1, 3889, '\P{^Is_Nv=000000015/00002}', "");
Expect(0, 3888, '\p{Is_Nv=000000015/00002}', "");
Expect(1, 3888, '\p{^Is_Nv=000000015/00002}', "");
Expect(1, 3888, '\P{Is_Nv=000000015/00002}', "");
Expect(0, 3888, '\P{^Is_Nv=000000015/00002}', "");
Expect(1, 3889, '\p{Is_Nv:	7.500}', "");
Expect(0, 3889, '\p{^Is_Nv:	7.500}', "");
Expect(0, 3889, '\P{Is_Nv:	7.500}', "");
Expect(1, 3889, '\P{^Is_Nv:	7.500}', "");
Expect(0, 3888, '\p{Is_Nv:	7.500}', "");
Expect(1, 3888, '\p{^Is_Nv:	7.500}', "");
Expect(1, 3888, '\P{Is_Nv:	7.500}', "");
Expect(0, 3888, '\P{^Is_Nv:	7.500}', "");
Error('\p{Numeric_Value=:=+7/0008}');
Error('\P{Numeric_Value=:=+7/0008}');
Expect(1, 8542, '\p{Numeric_Value=0000007/000008}', "");
Expect(0, 8542, '\p{^Numeric_Value=0000007/000008}', "");
Expect(0, 8542, '\P{Numeric_Value=0000007/000008}', "");
Expect(1, 8542, '\P{^Numeric_Value=0000007/000008}', "");
Expect(0, 8541, '\p{Numeric_Value=0000007/000008}', "");
Expect(1, 8541, '\p{^Numeric_Value=0000007/000008}', "");
Expect(1, 8541, '\P{Numeric_Value=0000007/000008}', "");
Expect(0, 8541, '\P{^Numeric_Value=0000007/000008}', "");
Error('\p{Numeric_Value=0.9}');
Error('\P{Numeric_Value=0.9}');
Error('\p{Numeric_Value=0.88}');
Error('\P{Numeric_Value=0.88}');
Expect(1, 8542, '\p{Numeric_Value: 0.875}', "");
Expect(0, 8542, '\p{^Numeric_Value: 0.875}', "");
Expect(0, 8542, '\P{Numeric_Value: 0.875}', "");
Expect(1, 8542, '\P{^Numeric_Value: 0.875}', "");
Expect(0, 8541, '\p{Numeric_Value: 0.875}', "");
Expect(1, 8541, '\p{^Numeric_Value: 0.875}', "");
Expect(1, 8541, '\P{Numeric_Value: 0.875}', "");
Expect(0, 8541, '\P{^Numeric_Value: 0.875}', "");
Error('\p{Nv=	:=07/08}');
Error('\P{Nv=	:=07/08}');
Expect(1, 8542, '\p{Nv: 0000000007/00008}', "");
Expect(0, 8542, '\p{^Nv: 0000000007/00008}', "");
Expect(0, 8542, '\P{Nv: 0000000007/00008}', "");
Expect(1, 8542, '\P{^Nv: 0000000007/00008}', "");
Expect(0, 8541, '\p{Nv: 0000000007/00008}', "");
Expect(1, 8541, '\p{^Nv: 0000000007/00008}', "");
Expect(1, 8541, '\P{Nv: 0000000007/00008}', "");
Expect(0, 8541, '\P{^Nv: 0000000007/00008}', "");
Error('\p{Nv=0.9}');
Error('\P{Nv=0.9}');
Error('\p{Nv=0.88}');
Error('\P{Nv=0.88}');
Expect(1, 8542, '\p{Nv=0.875}', "");
Expect(0, 8542, '\p{^Nv=0.875}', "");
Expect(0, 8542, '\P{Nv=0.875}', "");
Expect(1, 8542, '\P{^Nv=0.875}', "");
Expect(0, 8541, '\p{Nv=0.875}', "");
Expect(1, 8541, '\p{^Nv=0.875}', "");
Expect(1, 8541, '\P{Nv=0.875}', "");
Expect(0, 8541, '\P{^Nv=0.875}', "");
Error('\p{Is_Numeric_Value=	00007/8:=}');
Error('\P{Is_Numeric_Value=	00007/8:=}');
Expect(1, 8542, '\p{Is_Numeric_Value=+00007/00000008}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=+00007/00000008}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=+00007/00000008}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=+00007/00000008}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=+00007/00000008}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=+00007/00000008}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=+00007/00000008}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=+00007/00000008}', "");
Error('\p{Is_Numeric_Value=0.9}');
Error('\P{Is_Numeric_Value=0.9}');
Error('\p{Is_Numeric_Value: 0.88}');
Error('\P{Is_Numeric_Value: 0.88}');
Expect(1, 8542, '\p{Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=0.875}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=0.875}', "");
Error('\p{Is_Nv=_-+0000007/08/a/}');
Error('\P{Is_Nv=_-+0000007/08/a/}');
Expect(1, 8542, '\p{Is_Nv=0000007/0000000008}', "");
Expect(0, 8542, '\p{^Is_Nv=0000007/0000000008}', "");
Expect(0, 8542, '\P{Is_Nv=0000007/0000000008}', "");
Expect(1, 8542, '\P{^Is_Nv=0000007/0000000008}', "");
Expect(0, 8541, '\p{Is_Nv=0000007/0000000008}', "");
Expect(1, 8541, '\p{^Is_Nv=0000007/0000000008}', "");
Expect(1, 8541, '\P{Is_Nv=0000007/0000000008}', "");
Expect(0, 8541, '\P{^Is_Nv=0000007/0000000008}', "");
Error('\p{Is_Nv=0.9}');
Error('\P{Is_Nv=0.9}');
Error('\p{Is_Nv=0.88}');
Error('\P{Is_Nv=0.88}');
Expect(1, 8542, '\p{Is_Nv=0.875}', "");
Expect(0, 8542, '\p{^Is_Nv=0.875}', "");
Expect(0, 8542, '\P{Is_Nv=0.875}', "");
Expect(1, 8542, '\P{^Is_Nv=0.875}', "");
Expect(0, 8541, '\p{Is_Nv=0.875}', "");
Expect(1, 8541, '\p{^Is_Nv=0.875}', "");
Expect(1, 8541, '\P{Is_Nv=0.875}', "");
Expect(0, 8541, '\P{^Is_Nv=0.875}', "");
Error('\p{Numeric_Value=:=+0	0 0-0	00700}');
Error('\P{Numeric_Value=:=+0	0 0-0	00700}');
Expect(1, 65823, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(0, 65823, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(0, 65823, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(1, 65823, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(0, 65822, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(1, 65822, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(1, 65822, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Expect(0, 65822, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_7_00}', "");
Error('\p{Nv= -0700:=}');
Error('\P{Nv= -0700:=}');
Expect(1, 65823, '\p{Nv=+00000700}', "");
Expect(0, 65823, '\p{^Nv=+00000700}', "");
Expect(0, 65823, '\P{Nv=+00000700}', "");
Expect(1, 65823, '\P{^Nv=+00000700}', "");
Expect(0, 65822, '\p{Nv=+00000700}', "");
Expect(1, 65822, '\p{^Nv=+00000700}', "");
Expect(1, 65822, '\P{Nv=+00000700}', "");
Expect(0, 65822, '\P{^Nv=+00000700}', "");
Error('\p{Is_Numeric_Value:   /a/00-0-0-7_00}');
Error('\P{Is_Numeric_Value:   /a/00-0-0-7_00}');
Expect(1, 65823, '\p{Is_Numeric_Value=000_007_00}', "");
Expect(0, 65823, '\p{^Is_Numeric_Value=000_007_00}', "");
Expect(0, 65823, '\P{Is_Numeric_Value=000_007_00}', "");
Expect(1, 65823, '\P{^Is_Numeric_Value=000_007_00}', "");
Expect(0, 65822, '\p{Is_Numeric_Value=000_007_00}', "");
Expect(1, 65822, '\p{^Is_Numeric_Value=000_007_00}', "");
Expect(1, 65822, '\P{Is_Numeric_Value=000_007_00}', "");
Expect(0, 65822, '\P{^Is_Numeric_Value=000_007_00}', "");
Error('\p{Is_Nv=:=+0700}');
Error('\P{Is_Nv=:=+0700}');
Expect(1, 65823, '\p{Is_Nv=00000700}', "");
Expect(0, 65823, '\p{^Is_Nv=00000700}', "");
Expect(0, 65823, '\P{Is_Nv=00000700}', "");
Expect(1, 65823, '\P{^Is_Nv=00000700}', "");
Expect(0, 65822, '\p{Is_Nv=00000700}', "");
Expect(1, 65822, '\p{^Is_Nv=00000700}', "");
Expect(1, 65822, '\P{Is_Nv=00000700}', "");
Expect(0, 65822, '\P{^Is_Nv=00000700}', "");
Error('\p{Numeric_Value: _:=000013/002}');
Error('\P{Numeric_Value: _:=000013/002}');
Expect(1, 3888, '\p{Numeric_Value=13/0002}', "");
Expect(0, 3888, '\p{^Numeric_Value=13/0002}', "");
Expect(0, 3888, '\P{Numeric_Value=13/0002}', "");
Expect(1, 3888, '\P{^Numeric_Value=13/0002}', "");
Expect(0, 3887, '\p{Numeric_Value=13/0002}', "");
Expect(1, 3887, '\p{^Numeric_Value=13/0002}', "");
Expect(1, 3887, '\P{Numeric_Value=13/0002}', "");
Expect(0, 3887, '\P{^Numeric_Value=13/0002}', "");
Expect(1, 3888, '\p{Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Numeric_Value=6.500}', "");
Error('\p{Nv=	/a/+00000013/002}');
Error('\P{Nv=	/a/+00000013/002}');
Expect(1, 3888, '\p{Nv=00000013/000000002}', "");
Expect(0, 3888, '\p{^Nv=00000013/000000002}', "");
Expect(0, 3888, '\P{Nv=00000013/000000002}', "");
Expect(1, 3888, '\P{^Nv=00000013/000000002}', "");
Expect(0, 3887, '\p{Nv=00000013/000000002}', "");
Expect(1, 3887, '\p{^Nv=00000013/000000002}', "");
Expect(1, 3887, '\P{Nv=00000013/000000002}', "");
Expect(0, 3887, '\P{^Nv=00000013/000000002}', "");
Expect(1, 3888, '\p{Nv=6.500}', "");
Expect(0, 3888, '\p{^Nv=6.500}', "");
Expect(0, 3888, '\P{Nv=6.500}', "");
Expect(1, 3888, '\P{^Nv=6.500}', "");
Expect(0, 3887, '\p{Nv=6.500}', "");
Expect(1, 3887, '\p{^Nv=6.500}', "");
Expect(1, 3887, '\P{Nv=6.500}', "");
Expect(0, 3887, '\P{^Nv=6.500}', "");
Error('\p{Is_Numeric_Value=/a/	_+000013/00000002}');
Error('\P{Is_Numeric_Value=/a/	_+000013/00000002}');
Expect(1, 3888, '\p{Is_Numeric_Value=0000013/0000002}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=0000013/0000002}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=0000013/0000002}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=0000013/0000002}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=0000013/0000002}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=0000013/0000002}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=0000013/0000002}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=0000013/0000002}', "");
Expect(1, 3888, '\p{Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=6.500}', "");
Error('\p{Is_Nv=__13/0000002/a/}');
Error('\P{Is_Nv=__13/0000002/a/}');
Expect(1, 3888, '\p{Is_Nv=00013/00002}', "");
Expect(0, 3888, '\p{^Is_Nv=00013/00002}', "");
Expect(0, 3888, '\P{Is_Nv=00013/00002}', "");
Expect(1, 3888, '\P{^Is_Nv=00013/00002}', "");
Expect(0, 3887, '\p{Is_Nv=00013/00002}', "");
Expect(1, 3887, '\p{^Is_Nv=00013/00002}', "");
Expect(1, 3887, '\P{Is_Nv=00013/00002}', "");
Expect(0, 3887, '\P{^Is_Nv=00013/00002}', "");
Expect(1, 3888, '\p{Is_Nv=6.500}', "");
Expect(0, 3888, '\p{^Is_Nv=6.500}', "");
Expect(0, 3888, '\P{Is_Nv=6.500}', "");
Expect(1, 3888, '\P{^Is_Nv=6.500}', "");
Expect(0, 3887, '\p{Is_Nv=6.500}', "");
Expect(1, 3887, '\p{^Is_Nv=6.500}', "");
Expect(1, 3887, '\P{Is_Nv=6.500}', "");
Expect(0, 3887, '\P{^Is_Nv=6.500}', "");
Error('\p{Numeric_Value=	-+000048/a/}');
Error('\P{Numeric_Value=	-+000048/a/}');
Expect(1, 12989, '\p{Numeric_Value=+00000048}', "");
Expect(0, 12989, '\p{^Numeric_Value=+00000048}', "");
Expect(0, 12989, '\P{Numeric_Value=+00000048}', "");
Expect(1, 12989, '\P{^Numeric_Value=+00000048}', "");
Expect(0, 12988, '\p{Numeric_Value=+00000048}', "");
Expect(1, 12988, '\p{^Numeric_Value=+00000048}', "");
Expect(1, 12988, '\P{Numeric_Value=+00000048}', "");
Expect(0, 12988, '\P{^Numeric_Value=+00000048}', "");
Error('\p{Nv:		4/a/8}');
Error('\P{Nv:		4/a/8}');
Expect(1, 12989, '\p{Nv:	00000048}', "");
Expect(0, 12989, '\p{^Nv:	00000048}', "");
Expect(0, 12989, '\P{Nv:	00000048}', "");
Expect(1, 12989, '\P{^Nv:	00000048}', "");
Expect(0, 12988, '\p{Nv:	00000048}', "");
Expect(1, 12988, '\p{^Nv:	00000048}', "");
Expect(1, 12988, '\P{Nv:	00000048}', "");
Expect(0, 12988, '\P{^Nv:	00000048}', "");
Error('\p{Is_Numeric_Value=-00/a/00 48}');
Error('\P{Is_Numeric_Value=-00/a/00 48}');
Expect(1, 12989, '\p{Is_Numeric_Value=00000000048}', "");
Expect(0, 12989, '\p{^Is_Numeric_Value=00000000048}', "");
Expect(0, 12989, '\P{Is_Numeric_Value=00000000048}', "");
Expect(1, 12989, '\P{^Is_Numeric_Value=00000000048}', "");
Expect(0, 12988, '\p{Is_Numeric_Value=00000000048}', "");
Expect(1, 12988, '\p{^Is_Numeric_Value=00000000048}', "");
Expect(1, 12988, '\P{Is_Numeric_Value=00000000048}', "");
Expect(0, 12988, '\P{^Is_Numeric_Value=00000000048}', "");
Error('\p{Is_Nv=_/a/48}');
Error('\P{Is_Nv=_/a/48}');
Expect(1, 12989, '\p{Is_Nv=0004_8}', "");
Expect(0, 12989, '\p{^Is_Nv=0004_8}', "");
Expect(0, 12989, '\P{Is_Nv=0004_8}', "");
Expect(1, 12989, '\P{^Is_Nv=0004_8}', "");
Expect(0, 12988, '\p{Is_Nv=0004_8}', "");
Expect(1, 12988, '\p{^Is_Nv=0004_8}', "");
Expect(1, 12988, '\P{Is_Nv=0004_8}', "");
Expect(0, 12988, '\P{^Is_Nv=0004_8}', "");
Error('\p{Numeric_Value=_	000001/0000003/a/}');
Error('\P{Numeric_Value=_	000001/0000003/a/}');
Expect(1, 8531, '\p{Numeric_Value=000001/003}', "");
Expect(0, 8531, '\p{^Numeric_Value=000001/003}', "");
Expect(0, 8531, '\P{Numeric_Value=000001/003}', "");
Expect(1, 8531, '\P{^Numeric_Value=000001/003}', "");
Expect(0, 8530, '\p{Numeric_Value=000001/003}', "");
Expect(1, 8530, '\p{^Numeric_Value=000001/003}', "");
Expect(1, 8530, '\P{Numeric_Value=000001/003}', "");
Expect(0, 8530, '\P{^Numeric_Value=000001/003}', "");
Error('\p{Numeric_Value=0.3}');
Error('\P{Numeric_Value=0.3}');
Error('\p{Numeric_Value=0.33}');
Error('\P{Numeric_Value=0.33}');
Expect(1, 8531, '\p{Numeric_Value=0.333}', "");
Expect(0, 8531, '\p{^Numeric_Value=0.333}', "");
Expect(0, 8531, '\P{Numeric_Value=0.333}', "");
Expect(1, 8531, '\P{^Numeric_Value=0.333}', "");
Expect(0, 8530, '\p{Numeric_Value=0.333}', "");
Expect(1, 8530, '\p{^Numeric_Value=0.333}', "");
Expect(1, 8530, '\P{Numeric_Value=0.333}', "");
Expect(0, 8530, '\P{^Numeric_Value=0.333}', "");
Error('\p{Nv:	:=0000001/000000003}');
Error('\P{Nv:	:=0000001/000000003}');
Expect(1, 8531, '\p{Nv:	1/3}', "");
Expect(0, 8531, '\p{^Nv:	1/3}', "");
Expect(0, 8531, '\P{Nv:	1/3}', "");
Expect(1, 8531, '\P{^Nv:	1/3}', "");
Expect(0, 8530, '\p{Nv:	1/3}', "");
Expect(1, 8530, '\p{^Nv:	1/3}', "");
Expect(1, 8530, '\P{Nv:	1/3}', "");
Expect(0, 8530, '\P{^Nv:	1/3}', "");
Error('\p{Nv=0.3}');
Error('\P{Nv=0.3}');
Error('\p{Nv=0.33}');
Error('\P{Nv=0.33}');
Expect(1, 8531, '\p{Nv=0.333}', "");
Expect(0, 8531, '\p{^Nv=0.333}', "");
Expect(0, 8531, '\P{Nv=0.333}', "");
Expect(1, 8531, '\P{^Nv=0.333}', "");
Expect(0, 8530, '\p{Nv=0.333}', "");
Expect(1, 8530, '\p{^Nv=0.333}', "");
Expect(1, 8530, '\P{Nv=0.333}', "");
Expect(0, 8530, '\P{^Nv=0.333}', "");
Error('\p{Is_Numeric_Value=	/a/+0000000001/0000000003}');
Error('\P{Is_Numeric_Value=	/a/+0000000001/0000000003}');
Expect(1, 8531, '\p{Is_Numeric_Value=0000001/0000003}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value=0000001/0000003}', "");
Expect(0, 8531, '\P{Is_Numeric_Value=0000001/0000003}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value=0000001/0000003}', "");
Expect(0, 8530, '\p{Is_Numeric_Value=0000001/0000003}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value=0000001/0000003}', "");
Expect(1, 8530, '\P{Is_Numeric_Value=0000001/0000003}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value=0000001/0000003}', "");
Error('\p{Is_Numeric_Value=0.3}');
Error('\P{Is_Numeric_Value=0.3}');
Error('\p{Is_Numeric_Value=0.33}');
Error('\P{Is_Numeric_Value=0.33}');
Expect(1, 8531, '\p{Is_Numeric_Value: 0.333}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value: 0.333}', "");
Expect(0, 8531, '\P{Is_Numeric_Value: 0.333}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value: 0.333}', "");
Expect(0, 8530, '\p{Is_Numeric_Value: 0.333}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value: 0.333}', "");
Expect(1, 8530, '\P{Is_Numeric_Value: 0.333}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value: 0.333}', "");
Error('\p{Is_Nv=-/a/001/003}');
Error('\P{Is_Nv=-/a/001/003}');
Expect(1, 8531, '\p{Is_Nv=+01/003}', "");
Expect(0, 8531, '\p{^Is_Nv=+01/003}', "");
Expect(0, 8531, '\P{Is_Nv=+01/003}', "");
Expect(1, 8531, '\P{^Is_Nv=+01/003}', "");
Expect(0, 8530, '\p{Is_Nv=+01/003}', "");
Expect(1, 8530, '\p{^Is_Nv=+01/003}', "");
Expect(1, 8530, '\P{Is_Nv=+01/003}', "");
Expect(0, 8530, '\P{^Is_Nv=+01/003}', "");
Error('\p{Is_Nv=0.3}');
Error('\P{Is_Nv=0.3}');
Error('\p{Is_Nv=0.33}');
Error('\P{Is_Nv=0.33}');
Expect(1, 8531, '\p{Is_Nv=0.333}', "");
Expect(0, 8531, '\p{^Is_Nv=0.333}', "");
Expect(0, 8531, '\P{Is_Nv=0.333}', "");
Expect(1, 8531, '\P{^Is_Nv=0.333}', "");
Expect(0, 8530, '\p{Is_Nv=0.333}', "");
Expect(1, 8530, '\p{^Is_Nv=0.333}', "");
Expect(1, 8530, '\P{Is_Nv=0.333}', "");
Expect(0, 8530, '\P{^Is_Nv=0.333}', "");
Error('\p{Numeric_Value=--02:=00_0}');
Error('\P{Numeric_Value=--02:=00_0}');
Expect(1, 65827, '\p{Numeric_Value=0_0_0_0_0_02000}', "");
Expect(0, 65827, '\p{^Numeric_Value=0_0_0_0_0_02000}', "");
Expect(0, 65827, '\P{Numeric_Value=0_0_0_0_0_02000}', "");
Expect(1, 65827, '\P{^Numeric_Value=0_0_0_0_0_02000}', "");
Expect(0, 65826, '\p{Numeric_Value=0_0_0_0_0_02000}', "");
Expect(1, 65826, '\p{^Numeric_Value=0_0_0_0_0_02000}', "");
Expect(1, 65826, '\P{Numeric_Value=0_0_0_0_0_02000}', "");
Expect(0, 65826, '\P{^Numeric_Value=0_0_0_0_0_02000}', "");
Error('\p{Nv=0 0-0:=2-000}');
Error('\P{Nv=0 0-0:=2-000}');
Expect(1, 65827, '\p{Nv=+00000002000}', "");
Expect(0, 65827, '\p{^Nv=+00000002000}', "");
Expect(0, 65827, '\P{Nv=+00000002000}', "");
Expect(1, 65827, '\P{^Nv=+00000002000}', "");
Expect(0, 65826, '\p{Nv=+00000002000}', "");
Expect(1, 65826, '\p{^Nv=+00000002000}', "");
Expect(1, 65826, '\P{Nv=+00000002000}', "");
Expect(0, 65826, '\P{^Nv=+00000002000}', "");
Error('\p{Is_Numeric_Value=	:=+002000}');
Error('\P{Is_Numeric_Value=	:=+002000}');
Expect(1, 65827, '\p{Is_Numeric_Value=00_02_00_0}', "");
Expect(0, 65827, '\p{^Is_Numeric_Value=00_02_00_0}', "");
Expect(0, 65827, '\P{Is_Numeric_Value=00_02_00_0}', "");
Expect(1, 65827, '\P{^Is_Numeric_Value=00_02_00_0}', "");
Expect(0, 65826, '\p{Is_Numeric_Value=00_02_00_0}', "");
Expect(1, 65826, '\p{^Is_Numeric_Value=00_02_00_0}', "");
Expect(1, 65826, '\P{Is_Numeric_Value=00_02_00_0}', "");
Expect(0, 65826, '\P{^Is_Numeric_Value=00_02_00_0}', "");
Error('\p{Is_Nv=:=0002000}');
Error('\P{Is_Nv=:=0002000}');
Expect(1, 65827, '\p{Is_Nv=+00_20_00}', "");
Expect(0, 65827, '\p{^Is_Nv=+00_20_00}', "");
Expect(0, 65827, '\P{Is_Nv=+00_20_00}', "");
Expect(1, 65827, '\P{^Is_Nv=+00_20_00}', "");
Expect(0, 65826, '\p{Is_Nv=+00_20_00}', "");
Expect(1, 65826, '\p{^Is_Nv=+00_20_00}', "");
Expect(1, 65826, '\P{Is_Nv=+00_20_00}', "");
Expect(0, 65826, '\P{^Is_Nv=+00_20_00}', "");
Error('\p{Numeric_Value=_-029:=}');
Error('\P{Numeric_Value=_-029:=}');
Expect(1, 12889, '\p{Numeric_Value=0000029}', "");
Expect(0, 12889, '\p{^Numeric_Value=0000029}', "");
Expect(0, 12889, '\P{Numeric_Value=0000029}', "");
Expect(1, 12889, '\P{^Numeric_Value=0000029}', "");
Expect(0, 12888, '\p{Numeric_Value=0000029}', "");
Expect(1, 12888, '\p{^Numeric_Value=0000029}', "");
Expect(1, 12888, '\P{Numeric_Value=0000029}', "");
Expect(0, 12888, '\P{^Numeric_Value=0000029}', "");
Error('\p{Nv= _0000029/a/}');
Error('\P{Nv= _0000029/a/}');
Expect(1, 12889, '\p{Nv=00000000029}', "");
Expect(0, 12889, '\p{^Nv=00000000029}', "");
Expect(0, 12889, '\P{Nv=00000000029}', "");
Expect(1, 12889, '\P{^Nv=00000000029}', "");
Expect(0, 12888, '\p{Nv=00000000029}', "");
Expect(1, 12888, '\p{^Nv=00000000029}', "");
Expect(1, 12888, '\P{Nv=00000000029}', "");
Expect(0, 12888, '\P{^Nv=00000000029}', "");
Error('\p{Is_Numeric_Value=:=	+02	9}');
Error('\P{Is_Numeric_Value=:=	+02	9}');
Expect(1, 12889, '\p{Is_Numeric_Value=02_9}', "");
Expect(0, 12889, '\p{^Is_Numeric_Value=02_9}', "");
Expect(0, 12889, '\P{Is_Numeric_Value=02_9}', "");
Expect(1, 12889, '\P{^Is_Numeric_Value=02_9}', "");
Expect(0, 12888, '\p{Is_Numeric_Value=02_9}', "");
Expect(1, 12888, '\p{^Is_Numeric_Value=02_9}', "");
Expect(1, 12888, '\P{Is_Numeric_Value=02_9}', "");
Expect(0, 12888, '\P{^Is_Numeric_Value=02_9}', "");
Error('\p{Is_Nv=- 00:=0000	029}');
Error('\P{Is_Nv=- 00:=0000	029}');
Expect(1, 12889, '\p{Is_Nv=+000029}', "");
Expect(0, 12889, '\p{^Is_Nv=+000029}', "");
Expect(0, 12889, '\P{Is_Nv=+000029}', "");
Expect(1, 12889, '\P{^Is_Nv=+000029}', "");
Expect(0, 12888, '\p{Is_Nv=+000029}', "");
Expect(1, 12888, '\p{^Is_Nv=+000029}', "");
Expect(1, 12888, '\P{Is_Nv=+000029}', "");
Expect(0, 12888, '\P{^Is_Nv=+000029}', "");
Error('\p{Numeric_Value=/a/-	000000100000}');
Error('\P{Numeric_Value=/a/-	000000100000}');
Expect(1, 8584, '\p{Numeric_Value=010000_0}', "");
Expect(0, 8584, '\p{^Numeric_Value=010000_0}', "");
Expect(0, 8584, '\P{Numeric_Value=010000_0}', "");
Expect(1, 8584, '\P{^Numeric_Value=010000_0}', "");
Expect(0, 8583, '\p{Numeric_Value=010000_0}', "");
Expect(1, 8583, '\p{^Numeric_Value=010000_0}', "");
Expect(1, 8583, '\P{Numeric_Value=010000_0}', "");
Expect(0, 8583, '\P{^Numeric_Value=010000_0}', "");
Error('\p{Nv=/a/000000000100000}');
Error('\P{Nv=/a/000000000100000}');
Expect(1, 8584, '\p{Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(0, 8584, '\p{^Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(0, 8584, '\P{Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(1, 8584, '\P{^Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(0, 8583, '\p{Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(1, 8583, '\p{^Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(1, 8583, '\P{Nv=0_0_0_0_0_1_0_0_0_00}', "");
Expect(0, 8583, '\P{^Nv=0_0_0_0_0_1_0_0_0_00}', "");
Error('\p{Is_Numeric_Value= _0:=0_0_0 0_0-0_0-0	1-00 000}');
Error('\P{Is_Numeric_Value= _0:=0_0_0 0_0-0_0-0	1-00 000}');
Expect(1, 8584, '\p{Is_Numeric_Value:100000}', "");
Expect(0, 8584, '\p{^Is_Numeric_Value:100000}', "");
Expect(0, 8584, '\P{Is_Numeric_Value:100000}', "");
Expect(1, 8584, '\P{^Is_Numeric_Value:100000}', "");
Expect(0, 8583, '\p{Is_Numeric_Value:100000}', "");
Expect(1, 8583, '\p{^Is_Numeric_Value:100000}', "");
Expect(1, 8583, '\P{Is_Numeric_Value:100000}', "");
Expect(0, 8583, '\P{^Is_Numeric_Value:100000}', "");
Error('\p{Is_Nv=_/a/0000000100000}');
Error('\P{Is_Nv=_/a/0000000100000}');
Expect(1, 8584, '\p{Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8584, '\p{^Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8584, '\P{Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8584, '\P{^Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8583, '\p{Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8583, '\p{^Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8583, '\P{Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8583, '\P{^Is_Nv=+0_0_0_0_0_1_0_0_000}', "");
Error('\p{Numeric_Value= /a/0-0	0-0-050}');
Error('\P{Numeric_Value= /a/0-0	0-0-050}');
Expect(1, 4982, '\p{Numeric_Value=+05_0}', "");
Expect(0, 4982, '\p{^Numeric_Value=+05_0}', "");
Expect(0, 4982, '\P{Numeric_Value=+05_0}', "");
Expect(1, 4982, '\P{^Numeric_Value=+05_0}', "");
Expect(0, 4981, '\p{Numeric_Value=+05_0}', "");
Expect(1, 4981, '\p{^Numeric_Value=+05_0}', "");
Expect(1, 4981, '\P{Numeric_Value=+05_0}', "");
Expect(0, 4981, '\P{^Numeric_Value=+05_0}', "");
Error('\p{Nv=_/a/0000050}');
Error('\P{Nv=_/a/0000050}');
Expect(1, 4982, '\p{Nv=05_0}', "");
Expect(0, 4982, '\p{^Nv=05_0}', "");
Expect(0, 4982, '\P{Nv=05_0}', "");
Expect(1, 4982, '\P{^Nv=05_0}', "");
Expect(0, 4981, '\p{Nv=05_0}', "");
Expect(1, 4981, '\p{^Nv=05_0}', "");
Expect(1, 4981, '\P{Nv=05_0}', "");
Expect(0, 4981, '\P{^Nv=05_0}', "");
Error('\p{Is_Numeric_Value=	 00000050/a/}');
Error('\P{Is_Numeric_Value=	 00000050/a/}');
Expect(1, 4982, '\p{Is_Numeric_Value=0_0_50}', "");
Expect(0, 4982, '\p{^Is_Numeric_Value=0_0_50}', "");
Expect(0, 4982, '\P{Is_Numeric_Value=0_0_50}', "");
Expect(1, 4982, '\P{^Is_Numeric_Value=0_0_50}', "");
Expect(0, 4981, '\p{Is_Numeric_Value=0_0_50}', "");
Expect(1, 4981, '\p{^Is_Numeric_Value=0_0_50}', "");
Expect(1, 4981, '\P{Is_Numeric_Value=0_0_50}', "");
Expect(0, 4981, '\P{^Is_Numeric_Value=0_0_50}', "");
Error('\p{Is_Nv=/a/- +00000050}');
Error('\P{Is_Nv=/a/- +00000050}');
Expect(1, 4982, '\p{Is_Nv=0000050}', "");
Expect(0, 4982, '\p{^Is_Nv=0000050}', "");
Expect(0, 4982, '\P{Is_Nv=0000050}', "");
Expect(1, 4982, '\P{^Is_Nv=0000050}', "");
Expect(0, 4981, '\p{Is_Nv=0000050}', "");
Expect(1, 4981, '\p{^Is_Nv=0000050}', "");
Expect(1, 4981, '\P{Is_Nv=0000050}', "");
Expect(0, 4981, '\P{^Is_Nv=0000050}', "");
Error('\p{Numeric_Value= /a/+39}');
Error('\P{Numeric_Value= /a/+39}');
Expect(1, 12980, '\p{Numeric_Value=000000039}', "");
Expect(0, 12980, '\p{^Numeric_Value=000000039}', "");
Expect(0, 12980, '\P{Numeric_Value=000000039}', "");
Expect(1, 12980, '\P{^Numeric_Value=000000039}', "");
Expect(0, 12979, '\p{Numeric_Value=000000039}', "");
Expect(1, 12979, '\p{^Numeric_Value=000000039}', "");
Expect(1, 12979, '\P{Numeric_Value=000000039}', "");
Expect(0, 12979, '\P{^Numeric_Value=000000039}', "");
Error('\p{Nv=__00039:=}');
Error('\P{Nv=__00039:=}');
Expect(1, 12980, '\p{Nv=+0000000039}', "");
Expect(0, 12980, '\p{^Nv=+0000000039}', "");
Expect(0, 12980, '\P{Nv=+0000000039}', "");
Expect(1, 12980, '\P{^Nv=+0000000039}', "");
Expect(0, 12979, '\p{Nv=+0000000039}', "");
Expect(1, 12979, '\p{^Nv=+0000000039}', "");
Expect(1, 12979, '\P{Nv=+0000000039}', "");
Expect(0, 12979, '\P{^Nv=+0000000039}', "");
Error('\p{Is_Numeric_Value=:=+000039}');
Error('\P{Is_Numeric_Value=:=+000039}');
Expect(1, 12980, '\p{Is_Numeric_Value=+00000000039}', "");
Expect(0, 12980, '\p{^Is_Numeric_Value=+00000000039}', "");
Expect(0, 12980, '\P{Is_Numeric_Value=+00000000039}', "");
Expect(1, 12980, '\P{^Is_Numeric_Value=+00000000039}', "");
Expect(0, 12979, '\p{Is_Numeric_Value=+00000000039}', "");
Expect(1, 12979, '\p{^Is_Numeric_Value=+00000000039}', "");
Expect(1, 12979, '\P{Is_Numeric_Value=+00000000039}', "");
Expect(0, 12979, '\P{^Is_Numeric_Value=+00000000039}', "");
Error('\p{Is_Nv:-/a/0	0	0	0-000 0_039}');
Error('\P{Is_Nv:-/a/0	0	0	0-000 0_039}');
Expect(1, 12980, '\p{Is_Nv=0000_0000_39}', "");
Expect(0, 12980, '\p{^Is_Nv=0000_0000_39}', "");
Expect(0, 12980, '\P{Is_Nv=0000_0000_39}', "");
Expect(1, 12980, '\P{^Is_Nv=0000_0000_39}', "");
Expect(0, 12979, '\p{Is_Nv=0000_0000_39}', "");
Expect(1, 12979, '\p{^Is_Nv=0000_0000_39}', "");
Expect(1, 12979, '\P{Is_Nv=0000_0000_39}', "");
Expect(0, 12979, '\P{^Is_Nv=0000_0000_39}', "");
Error('\p{Numeric_Value=:=000000001/0016}');
Error('\P{Numeric_Value=:=000000001/0016}');
Expect(1, 2548, '\p{Numeric_Value=0001/0016}', "");
Expect(0, 2548, '\p{^Numeric_Value=0001/0016}', "");
Expect(0, 2548, '\P{Numeric_Value=0001/0016}', "");
Expect(1, 2548, '\P{^Numeric_Value=0001/0016}', "");
Expect(0, 2547, '\p{Numeric_Value=0001/0016}', "");
Expect(1, 2547, '\p{^Numeric_Value=0001/0016}', "");
Expect(1, 2547, '\P{Numeric_Value=0001/0016}', "");
Expect(0, 2547, '\P{^Numeric_Value=0001/0016}', "");
Error('\p{Numeric_Value=0.06}');
Error('\P{Numeric_Value=0.06}');
Expect(1, 2548, '\p{Numeric_Value=0.063}', "");
Expect(0, 2548, '\p{^Numeric_Value=0.063}', "");
Expect(0, 2548, '\P{Numeric_Value=0.063}', "");
Expect(1, 2548, '\P{^Numeric_Value=0.063}', "");
Expect(0, 2547, '\p{Numeric_Value=0.063}', "");
Expect(1, 2547, '\p{^Numeric_Value=0.063}', "");
Expect(1, 2547, '\P{Numeric_Value=0.063}', "");
Expect(0, 2547, '\P{^Numeric_Value=0.063}', "");
Error('\p{Nv= :=00000001/016}');
Error('\P{Nv= :=00000001/016}');
Expect(1, 2548, '\p{Nv:	+01/00016}', "");
Expect(0, 2548, '\p{^Nv:	+01/00016}', "");
Expect(0, 2548, '\P{Nv:	+01/00016}', "");
Expect(1, 2548, '\P{^Nv:	+01/00016}', "");
Expect(0, 2547, '\p{Nv:	+01/00016}', "");
Expect(1, 2547, '\p{^Nv:	+01/00016}', "");
Expect(1, 2547, '\P{Nv:	+01/00016}', "");
Expect(0, 2547, '\P{^Nv:	+01/00016}', "");
Error('\p{Nv=0.06}');
Error('\P{Nv=0.06}');
Expect(1, 2548, '\p{Nv=0.063}', "");
Expect(0, 2548, '\p{^Nv=0.063}', "");
Expect(0, 2548, '\P{Nv=0.063}', "");
Expect(1, 2548, '\P{^Nv=0.063}', "");
Expect(0, 2547, '\p{Nv=0.063}', "");
Expect(1, 2547, '\p{^Nv=0.063}', "");
Expect(1, 2547, '\P{Nv=0.063}', "");
Expect(0, 2547, '\P{^Nv=0.063}', "");
Error('\p{Is_Numeric_Value= 000001/016/a/}');
Error('\P{Is_Numeric_Value= 000001/016/a/}');
Expect(1, 2548, '\p{Is_Numeric_Value=000000001/16}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value=000000001/16}', "");
Expect(0, 2548, '\P{Is_Numeric_Value=000000001/16}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value=000000001/16}', "");
Expect(0, 2547, '\p{Is_Numeric_Value=000000001/16}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value=000000001/16}', "");
Expect(1, 2547, '\P{Is_Numeric_Value=000000001/16}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value=000000001/16}', "");
Error('\p{Is_Numeric_Value=0.06}');
Error('\P{Is_Numeric_Value=0.06}');
Expect(1, 2548, '\p{Is_Numeric_Value=0.063}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value=0.063}', "");
Expect(0, 2548, '\P{Is_Numeric_Value=0.063}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value=0.063}', "");
Expect(0, 2547, '\p{Is_Numeric_Value=0.063}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value=0.063}', "");
Expect(1, 2547, '\P{Is_Numeric_Value=0.063}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value=0.063}', "");
Error('\p{Is_Nv=:=00001/000000016}');
Error('\P{Is_Nv=:=00001/000000016}');
Expect(1, 2548, '\p{Is_Nv=+000001/016}', "");
Expect(0, 2548, '\p{^Is_Nv=+000001/016}', "");
Expect(0, 2548, '\P{Is_Nv=+000001/016}', "");
Expect(1, 2548, '\P{^Is_Nv=+000001/016}', "");
Expect(0, 2547, '\p{Is_Nv=+000001/016}', "");
Expect(1, 2547, '\p{^Is_Nv=+000001/016}', "");
Expect(1, 2547, '\P{Is_Nv=+000001/016}', "");
Expect(0, 2547, '\P{^Is_Nv=+000001/016}', "");
Error('\p{Is_Nv=0.06}');
Error('\P{Is_Nv=0.06}');
Expect(1, 2548, '\p{Is_Nv=0.063}', "");
Expect(0, 2548, '\p{^Is_Nv=0.063}', "");
Expect(0, 2548, '\P{Is_Nv=0.063}', "");
Expect(1, 2548, '\P{^Is_Nv=0.063}', "");
Expect(0, 2547, '\p{Is_Nv=0.063}', "");
Expect(1, 2547, '\p{^Is_Nv=0.063}', "");
Expect(1, 2547, '\P{Is_Nv=0.063}', "");
Expect(0, 2547, '\P{^Is_Nv=0.063}', "");
Error('\p{Numeric_Value=/a/_0003/02}');
Error('\P{Numeric_Value=/a/_0003/02}');
Expect(1, 3883, '\p{Numeric_Value=000000003/00002}', "");
Expect(0, 3883, '\p{^Numeric_Value=000000003/00002}', "");
Expect(0, 3883, '\P{Numeric_Value=000000003/00002}', "");
Expect(1, 3883, '\P{^Numeric_Value=000000003/00002}', "");
Expect(0, 3882, '\p{Numeric_Value=000000003/00002}', "");
Expect(1, 3882, '\p{^Numeric_Value=000000003/00002}', "");
Expect(1, 3882, '\P{Numeric_Value=000000003/00002}', "");
Expect(0, 3882, '\P{^Numeric_Value=000000003/00002}', "");
Expect(1, 3883, '\p{Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Numeric_Value=1.500}', "");
Error('\p{Nv=/a/__+000003/02}');
Error('\P{Nv=/a/__+000003/02}');
Expect(1, 3883, '\p{Nv=00003/02}', "");
Expect(0, 3883, '\p{^Nv=00003/02}', "");
Expect(0, 3883, '\P{Nv=00003/02}', "");
Expect(1, 3883, '\P{^Nv=00003/02}', "");
Expect(0, 3882, '\p{Nv=00003/02}', "");
Expect(1, 3882, '\p{^Nv=00003/02}', "");
Expect(1, 3882, '\P{Nv=00003/02}', "");
Expect(0, 3882, '\P{^Nv=00003/02}', "");
Expect(1, 3883, '\p{Nv=1.500}', "");
Expect(0, 3883, '\p{^Nv=1.500}', "");
Expect(0, 3883, '\P{Nv=1.500}', "");
Expect(1, 3883, '\P{^Nv=1.500}', "");
Expect(0, 3882, '\p{Nv=1.500}', "");
Expect(1, 3882, '\p{^Nv=1.500}', "");
Expect(1, 3882, '\P{Nv=1.500}', "");
Expect(0, 3882, '\P{^Nv=1.500}', "");
Error('\p{Is_Numeric_Value=:=	-000000003/002}');
Error('\P{Is_Numeric_Value=:=	-000000003/002}');
Expect(1, 3883, '\p{Is_Numeric_Value=003/0000002}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=003/0000002}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=003/0000002}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=003/0000002}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=003/0000002}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=003/0000002}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=003/0000002}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=003/0000002}', "");
Expect(1, 3883, '\p{Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=1.500}', "");
Error('\p{Is_Nv=/a/	00003/00000002}');
Error('\P{Is_Nv=/a/	00003/00000002}');
Expect(1, 3883, '\p{Is_Nv=0000003/000002}', "");
Expect(0, 3883, '\p{^Is_Nv=0000003/000002}', "");
Expect(0, 3883, '\P{Is_Nv=0000003/000002}', "");
Expect(1, 3883, '\P{^Is_Nv=0000003/000002}', "");
Expect(0, 3882, '\p{Is_Nv=0000003/000002}', "");
Expect(1, 3882, '\p{^Is_Nv=0000003/000002}', "");
Expect(1, 3882, '\P{Is_Nv=0000003/000002}', "");
Expect(0, 3882, '\P{^Is_Nv=0000003/000002}', "");
Expect(1, 3883, '\p{Is_Nv=1.500}', "");
Expect(0, 3883, '\p{^Is_Nv=1.500}', "");
Expect(0, 3883, '\P{Is_Nv=1.500}', "");
Expect(1, 3883, '\P{^Is_Nv=1.500}', "");
Expect(0, 3882, '\p{Is_Nv=1.500}', "");
Expect(1, 3882, '\p{^Is_Nv=1.500}', "");
Expect(1, 3882, '\P{Is_Nv=1.500}', "");
Expect(0, 3882, '\P{^Is_Nv=1.500}', "");
Error('\p{Numeric_Value=:=+0_0	0_0-041}');
Error('\P{Numeric_Value=:=+0_0	0_0-041}');
Expect(1, 12982, '\p{Numeric_Value=+004_1}', "");
Expect(0, 12982, '\p{^Numeric_Value=+004_1}', "");
Expect(0, 12982, '\P{Numeric_Value=+004_1}', "");
Expect(1, 12982, '\P{^Numeric_Value=+004_1}', "");
Expect(0, 12981, '\p{Numeric_Value=+004_1}', "");
Expect(1, 12981, '\p{^Numeric_Value=+004_1}', "");
Expect(1, 12981, '\P{Numeric_Value=+004_1}', "");
Expect(0, 12981, '\P{^Numeric_Value=+004_1}', "");
Error('\p{Nv=/a/ 0000000041}');
Error('\P{Nv=/a/ 0000000041}');
Expect(1, 12982, '\p{Nv=+000041}', "");
Expect(0, 12982, '\p{^Nv=+000041}', "");
Expect(0, 12982, '\P{Nv=+000041}', "");
Expect(1, 12982, '\P{^Nv=+000041}', "");
Expect(0, 12981, '\p{Nv=+000041}', "");
Expect(1, 12981, '\p{^Nv=+000041}', "");
Expect(1, 12981, '\P{Nv=+000041}', "");
Expect(0, 12981, '\P{^Nv=+000041}', "");
Error('\p{Is_Numeric_Value=	:=+00004-1}');
Error('\P{Is_Numeric_Value=	:=+00004-1}');
Expect(1, 12982, '\p{Is_Numeric_Value=0041}', "");
Expect(0, 12982, '\p{^Is_Numeric_Value=0041}', "");
Expect(0, 12982, '\P{Is_Numeric_Value=0041}', "");
Expect(1, 12982, '\P{^Is_Numeric_Value=0041}', "");
Expect(0, 12981, '\p{Is_Numeric_Value=0041}', "");
Expect(1, 12981, '\p{^Is_Numeric_Value=0041}', "");
Expect(1, 12981, '\P{Is_Numeric_Value=0041}', "");
Expect(0, 12981, '\P{^Is_Numeric_Value=0041}', "");
Error('\p{Is_Nv=/a/ 000041}');
Error('\P{Is_Nv=/a/ 000041}');
Expect(1, 12982, '\p{Is_Nv=04_1}', "");
Expect(0, 12982, '\p{^Is_Nv=04_1}', "");
Expect(0, 12982, '\P{Is_Nv=04_1}', "");
Expect(1, 12982, '\P{^Is_Nv=04_1}', "");
Expect(0, 12981, '\p{Is_Nv=04_1}', "");
Expect(1, 12981, '\p{^Is_Nv=04_1}', "");
Expect(1, 12981, '\P{Is_Nv=04_1}', "");
Expect(0, 12981, '\P{^Is_Nv=04_1}', "");
Error('\p{Numeric_Value=  00012:=}');
Error('\P{Numeric_Value=  00012:=}');
Expect(1, 8555, '\p{Numeric_Value=000_000_001_2}', "");
Expect(0, 8555, '\p{^Numeric_Value=000_000_001_2}', "");
Expect(0, 8555, '\P{Numeric_Value=000_000_001_2}', "");
Expect(1, 8555, '\P{^Numeric_Value=000_000_001_2}', "");
Expect(0, 8554, '\p{Numeric_Value=000_000_001_2}', "");
Expect(1, 8554, '\p{^Numeric_Value=000_000_001_2}', "");
Expect(1, 8554, '\P{Numeric_Value=000_000_001_2}', "");
Expect(0, 8554, '\P{^Numeric_Value=000_000_001_2}', "");
Error('\p{Nv=:= -1-2}');
Error('\P{Nv=:= -1-2}');
Expect(1, 8555, '\p{Nv:000012}', "");
Expect(0, 8555, '\p{^Nv:000012}', "");
Expect(0, 8555, '\P{Nv:000012}', "");
Expect(1, 8555, '\P{^Nv:000012}', "");
Expect(0, 8554, '\p{Nv:000012}', "");
Expect(1, 8554, '\p{^Nv:000012}', "");
Expect(1, 8554, '\P{Nv:000012}', "");
Expect(0, 8554, '\P{^Nv:000012}', "");
Error('\p{Is_Numeric_Value=:=	00012}');
Error('\P{Is_Numeric_Value=:=	00012}');
Expect(1, 8555, '\p{Is_Numeric_Value:   12}', "");
Expect(0, 8555, '\p{^Is_Numeric_Value:   12}', "");
Expect(0, 8555, '\P{Is_Numeric_Value:   12}', "");
Expect(1, 8555, '\P{^Is_Numeric_Value:   12}', "");
Expect(0, 8554, '\p{Is_Numeric_Value:   12}', "");
Expect(1, 8554, '\p{^Is_Numeric_Value:   12}', "");
Expect(1, 8554, '\P{Is_Numeric_Value:   12}', "");
Expect(0, 8554, '\P{^Is_Numeric_Value:   12}', "");
Error('\p{Is_Nv=  00:=012}');
Error('\P{Is_Nv=  00:=012}');
Expect(1, 8555, '\p{Is_Nv=+0_0_12}', "");
Expect(0, 8555, '\p{^Is_Nv=+0_0_12}', "");
Expect(0, 8555, '\P{Is_Nv=+0_0_12}', "");
Expect(1, 8555, '\P{^Is_Nv=+0_0_12}', "");
Expect(0, 8554, '\p{Is_Nv=+0_0_12}', "");
Expect(1, 8554, '\p{^Is_Nv=+0_0_12}', "");
Expect(1, 8554, '\P{Is_Nv=+0_0_12}', "");
Expect(0, 8554, '\P{^Is_Nv=+0_0_12}', "");
Error('\p{Numeric_Value=	/a/+15}');
Error('\P{Numeric_Value=	/a/+15}');
Expect(1, 9326, '\p{Numeric_Value: +0000000015}', "");
Expect(0, 9326, '\p{^Numeric_Value: +0000000015}', "");
Expect(0, 9326, '\P{Numeric_Value: +0000000015}', "");
Expect(1, 9326, '\P{^Numeric_Value: +0000000015}', "");
Expect(0, 9325, '\p{Numeric_Value: +0000000015}', "");
Expect(1, 9325, '\p{^Numeric_Value: +0000000015}', "");
Expect(1, 9325, '\P{Numeric_Value: +0000000015}', "");
Expect(0, 9325, '\P{^Numeric_Value: +0000000015}', "");
Error('\p{Nv=-:=0	00_0-0 0 15}');
Error('\P{Nv=-:=0	00_0-0 0 15}');
Expect(1, 9326, '\p{Nv=0_0_0_0_0_0_0_0015}', "");
Expect(0, 9326, '\p{^Nv=0_0_0_0_0_0_0_0015}', "");
Expect(0, 9326, '\P{Nv=0_0_0_0_0_0_0_0015}', "");
Expect(1, 9326, '\P{^Nv=0_0_0_0_0_0_0_0015}', "");
Expect(0, 9325, '\p{Nv=0_0_0_0_0_0_0_0015}', "");
Expect(1, 9325, '\p{^Nv=0_0_0_0_0_0_0_0015}', "");
Expect(1, 9325, '\P{Nv=0_0_0_0_0_0_0_0015}', "");
Expect(0, 9325, '\P{^Nv=0_0_0_0_0_0_0_0015}', "");
Error('\p{Is_Numeric_Value=-:=+00015}');
Error('\P{Is_Numeric_Value=-:=+00015}');
Expect(1, 9326, '\p{Is_Numeric_Value=000001_5}', "");
Expect(0, 9326, '\p{^Is_Numeric_Value=000001_5}', "");
Expect(0, 9326, '\P{Is_Numeric_Value=000001_5}', "");
Expect(1, 9326, '\P{^Is_Numeric_Value=000001_5}', "");
Expect(0, 9325, '\p{Is_Numeric_Value=000001_5}', "");
Expect(1, 9325, '\p{^Is_Numeric_Value=000001_5}', "");
Expect(1, 9325, '\P{Is_Numeric_Value=000001_5}', "");
Expect(0, 9325, '\P{^Is_Numeric_Value=000001_5}', "");
Error('\p{Is_Nv=	:=+1-5}');
Error('\P{Is_Nv=	:=+1-5}');
Expect(1, 9326, '\p{Is_Nv=00015}', "");
Expect(0, 9326, '\p{^Is_Nv=00015}', "");
Expect(0, 9326, '\P{Is_Nv=00015}', "");
Expect(1, 9326, '\P{^Is_Nv=00015}', "");
Expect(0, 9325, '\p{Is_Nv=00015}', "");
Expect(1, 9325, '\p{^Is_Nv=00015}', "");
Expect(1, 9325, '\P{Is_Nv=00015}', "");
Expect(0, 9325, '\P{^Is_Nv=00015}', "");
Error('\p{Numeric_Value:   /a/	_-001/00002}');
Error('\P{Numeric_Value:   /a/	_-001/00002}');
Expect(1, 3891, '\p{Numeric_Value=-1/000002}', "");
Expect(0, 3891, '\p{^Numeric_Value=-1/000002}', "");
Expect(0, 3891, '\P{Numeric_Value=-1/000002}', "");
Expect(1, 3891, '\P{^Numeric_Value=-1/000002}', "");
Expect(0, 3890, '\p{Numeric_Value=-1/000002}', "");
Expect(1, 3890, '\p{^Numeric_Value=-1/000002}', "");
Expect(1, 3890, '\P{Numeric_Value=-1/000002}', "");
Expect(0, 3890, '\P{^Numeric_Value=-1/000002}', "");
Expect(1, 3891, '\p{Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Numeric_Value=-0.500}', "");
Error('\p{Nv=/a/__0001/00002}');
Error('\P{Nv=/a/__0001/00002}');
Expect(1, 3891, '\p{Nv=-001/000000002}', "");
Expect(0, 3891, '\p{^Nv=-001/000000002}', "");
Expect(0, 3891, '\P{Nv=-001/000000002}', "");
Expect(1, 3891, '\P{^Nv=-001/000000002}', "");
Expect(0, 3890, '\p{Nv=-001/000000002}', "");
Expect(1, 3890, '\p{^Nv=-001/000000002}', "");
Expect(1, 3890, '\P{Nv=-001/000000002}', "");
Expect(0, 3890, '\P{^Nv=-001/000000002}', "");
Expect(1, 3891, '\p{Nv=-0.500}', "");
Expect(0, 3891, '\p{^Nv=-0.500}', "");
Expect(0, 3891, '\P{Nv=-0.500}', "");
Expect(1, 3891, '\P{^Nv=-0.500}', "");
Expect(0, 3890, '\p{Nv=-0.500}', "");
Expect(1, 3890, '\p{^Nv=-0.500}', "");
Expect(1, 3890, '\P{Nv=-0.500}', "");
Expect(0, 3890, '\P{^Nv=-0.500}', "");
Error('\p{Is_Numeric_Value=:=	  00000001/0000002}');
Error('\P{Is_Numeric_Value=:=	  00000001/0000002}');
Expect(1, 3891, '\p{Is_Numeric_Value=-0000000001/02}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-0000000001/02}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-0000000001/02}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-0000000001/02}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-0000000001/02}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-0000000001/02}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-0000000001/02}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-0000000001/02}', "");
Expect(1, 3891, '\p{Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-0.500}', "");
Error('\p{Is_Nv=/a/	 00001/000002}');
Error('\P{Is_Nv=/a/	 00001/000002}');
Expect(1, 3891, '\p{Is_Nv=-1/0000002}', "");
Expect(0, 3891, '\p{^Is_Nv=-1/0000002}', "");
Expect(0, 3891, '\P{Is_Nv=-1/0000002}', "");
Expect(1, 3891, '\P{^Is_Nv=-1/0000002}', "");
Expect(0, 3890, '\p{Is_Nv=-1/0000002}', "");
Expect(1, 3890, '\p{^Is_Nv=-1/0000002}', "");
Expect(1, 3890, '\P{Is_Nv=-1/0000002}', "");
Expect(0, 3890, '\P{^Is_Nv=-1/0000002}', "");
Expect(1, 3891, '\p{Is_Nv=-0.500}', "");
Expect(0, 3891, '\p{^Is_Nv=-0.500}', "");
Expect(0, 3891, '\P{Is_Nv=-0.500}', "");
Expect(1, 3891, '\P{^Is_Nv=-0.500}', "");
Expect(0, 3890, '\p{Is_Nv=-0.500}', "");
Expect(1, 3890, '\p{^Is_Nv=-0.500}', "");
Expect(1, 3890, '\P{Is_Nv=-0.500}', "");
Expect(0, 3890, '\P{^Is_Nv=-0.500}', "");
Error('\p{Numeric_Value= +00000080000:=}');
Error('\P{Numeric_Value= +00000080000:=}');
Expect(1, 65842, '\p{Numeric_Value=0_0_0_8_0000}', "");
Expect(0, 65842, '\p{^Numeric_Value=0_0_0_8_0000}', "");
Expect(0, 65842, '\P{Numeric_Value=0_0_0_8_0000}', "");
Expect(1, 65842, '\P{^Numeric_Value=0_0_0_8_0000}', "");
Expect(0, 65841, '\p{Numeric_Value=0_0_0_8_0000}', "");
Expect(1, 65841, '\p{^Numeric_Value=0_0_0_8_0000}', "");
Expect(1, 65841, '\P{Numeric_Value=0_0_0_8_0000}', "");
Expect(0, 65841, '\P{^Numeric_Value=0_0_0_8_0000}', "");
Error('\p{Nv:     0/a/0	0_0 8-0-0-00}');
Error('\P{Nv:     0/a/0	0_0 8-0-0-00}');
Expect(1, 65842, '\p{Nv=+080000}', "");
Expect(0, 65842, '\p{^Nv=+080000}', "");
Expect(0, 65842, '\P{Nv=+080000}', "");
Expect(1, 65842, '\P{^Nv=+080000}', "");
Expect(0, 65841, '\p{Nv=+080000}', "");
Expect(1, 65841, '\p{^Nv=+080000}', "");
Expect(1, 65841, '\P{Nv=+080000}', "");
Expect(0, 65841, '\P{^Nv=+080000}', "");
Error('\p{Is_Numeric_Value= :=+000000080000}');
Error('\P{Is_Numeric_Value= :=+000000080000}');
Expect(1, 65842, '\p{Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(0, 65842, '\p{^Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(0, 65842, '\P{Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(1, 65842, '\P{^Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(0, 65841, '\p{Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(1, 65841, '\p{^Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(1, 65841, '\P{Is_Numeric_Value=00_00_00_00_08_0000}', "");
Expect(0, 65841, '\P{^Is_Numeric_Value=00_00_00_00_08_0000}', "");
Error('\p{Is_Nv=:=_	+0000080000}');
Error('\P{Is_Nv=:=_	+0000080000}');
Expect(1, 65842, '\p{Is_Nv=080000}', "");
Expect(0, 65842, '\p{^Is_Nv=080000}', "");
Expect(0, 65842, '\P{Is_Nv=080000}', "");
Expect(1, 65842, '\P{^Is_Nv=080000}', "");
Expect(0, 65841, '\p{Is_Nv=080000}', "");
Expect(1, 65841, '\p{^Is_Nv=080000}', "");
Expect(1, 65841, '\P{Is_Nv=080000}', "");
Expect(0, 65841, '\P{^Is_Nv=080000}', "");
Error('\p{Numeric_Value=	/a/00	0-0_00_00060}');
Error('\P{Numeric_Value=	/a/00	0-0_00_00060}');
Expect(1, 4983, '\p{Numeric_Value=00000006_0}', "");
Expect(0, 4983, '\p{^Numeric_Value=00000006_0}', "");
Expect(0, 4983, '\P{Numeric_Value=00000006_0}', "");
Expect(1, 4983, '\P{^Numeric_Value=00000006_0}', "");
Expect(0, 4982, '\p{Numeric_Value=00000006_0}', "");
Expect(1, 4982, '\p{^Numeric_Value=00000006_0}', "");
Expect(1, 4982, '\P{Numeric_Value=00000006_0}', "");
Expect(0, 4982, '\P{^Numeric_Value=00000006_0}', "");
Error('\p{Nv= /a/0 0 60}');
Error('\P{Nv= /a/0 0 60}');
Expect(1, 4983, '\p{Nv=0_0_0_0_60}', "");
Expect(0, 4983, '\p{^Nv=0_0_0_0_60}', "");
Expect(0, 4983, '\P{Nv=0_0_0_0_60}', "");
Expect(1, 4983, '\P{^Nv=0_0_0_0_60}', "");
Expect(0, 4982, '\p{Nv=0_0_0_0_60}', "");
Expect(1, 4982, '\p{^Nv=0_0_0_0_60}', "");
Expect(1, 4982, '\P{Nv=0_0_0_0_60}', "");
Expect(0, 4982, '\P{^Nv=0_0_0_0_60}', "");
Error('\p{Is_Numeric_Value=_/a/+060}');
Error('\P{Is_Numeric_Value=_/a/+060}');
Expect(1, 4983, '\p{Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(0, 4983, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(0, 4983, '\P{Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(1, 4983, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(0, 4982, '\p{Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(1, 4982, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(1, 4982, '\P{Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Expect(0, 4982, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_060}', "");
Error('\p{Is_Nv=:=--60}');
Error('\P{Is_Nv=:=--60}');
Expect(1, 4983, '\p{Is_Nv=060}', "");
Expect(0, 4983, '\p{^Is_Nv=060}', "");
Expect(0, 4983, '\P{Is_Nv=060}', "");
Expect(1, 4983, '\P{^Is_Nv=060}', "");
Expect(0, 4982, '\p{Is_Nv=060}', "");
Expect(1, 4982, '\p{^Is_Nv=060}', "");
Expect(1, 4982, '\P{Is_Nv=060}', "");
Expect(0, 4982, '\P{^Is_Nv=060}', "");
Error('\p{Numeric_Value=:=_+000000045}');
Error('\P{Numeric_Value=:=_+000000045}');
Expect(1, 12986, '\p{Numeric_Value=00000000045}', "");
Expect(0, 12986, '\p{^Numeric_Value=00000000045}', "");
Expect(0, 12986, '\P{Numeric_Value=00000000045}', "");
Expect(1, 12986, '\P{^Numeric_Value=00000000045}', "");
Expect(0, 12985, '\p{Numeric_Value=00000000045}', "");
Expect(1, 12985, '\p{^Numeric_Value=00000000045}', "");
Expect(1, 12985, '\P{Numeric_Value=00000000045}', "");
Expect(0, 12985, '\P{^Numeric_Value=00000000045}', "");
Error('\p{Nv=/a/_	004 5}');
Error('\P{Nv=/a/_	004 5}');
Expect(1, 12986, '\p{Nv=000000045}', "");
Expect(0, 12986, '\p{^Nv=000000045}', "");
Expect(0, 12986, '\P{Nv=000000045}', "");
Expect(1, 12986, '\P{^Nv=000000045}', "");
Expect(0, 12985, '\p{Nv=000000045}', "");
Expect(1, 12985, '\p{^Nv=000000045}', "");
Expect(1, 12985, '\P{Nv=000000045}', "");
Expect(0, 12985, '\P{^Nv=000000045}', "");
Error('\p{Is_Numeric_Value=	:=0000000045}');
Error('\P{Is_Numeric_Value=	:=0000000045}');
Expect(1, 12986, '\p{Is_Numeric_Value=0004_5}', "");
Expect(0, 12986, '\p{^Is_Numeric_Value=0004_5}', "");
Expect(0, 12986, '\P{Is_Numeric_Value=0004_5}', "");
Expect(1, 12986, '\P{^Is_Numeric_Value=0004_5}', "");
Expect(0, 12985, '\p{Is_Numeric_Value=0004_5}', "");
Expect(1, 12985, '\p{^Is_Numeric_Value=0004_5}', "");
Expect(1, 12985, '\P{Is_Numeric_Value=0004_5}', "");
Expect(0, 12985, '\P{^Is_Numeric_Value=0004_5}', "");
Error('\p{Is_Nv=__0000000045:=}');
Error('\P{Is_Nv=__0000000045:=}');
Expect(1, 12986, '\p{Is_Nv=00_00_00_00_04_5}', "");
Expect(0, 12986, '\p{^Is_Nv=00_00_00_00_04_5}', "");
Expect(0, 12986, '\P{Is_Nv=00_00_00_00_04_5}', "");
Expect(1, 12986, '\P{^Is_Nv=00_00_00_00_04_5}', "");
Expect(0, 12985, '\p{Is_Nv=00_00_00_00_04_5}', "");
Expect(1, 12985, '\p{^Is_Nv=00_00_00_00_04_5}', "");
Expect(1, 12985, '\P{Is_Nv=00_00_00_00_04_5}', "");
Expect(0, 12985, '\P{^Is_Nv=00_00_00_00_04_5}', "");
Error('\p{Numeric_Value=	000001:=9}');
Error('\P{Numeric_Value=	000001:=9}');
Expect(1, 5872, '\p{Numeric_Value=0_0_0_0_019}', "");
Expect(0, 5872, '\p{^Numeric_Value=0_0_0_0_019}', "");
Expect(0, 5872, '\P{Numeric_Value=0_0_0_0_019}', "");
Expect(1, 5872, '\P{^Numeric_Value=0_0_0_0_019}', "");
Expect(0, 5871, '\p{Numeric_Value=0_0_0_0_019}', "");
Expect(1, 5871, '\p{^Numeric_Value=0_0_0_0_019}', "");
Expect(1, 5871, '\P{Numeric_Value=0_0_0_0_019}', "");
Expect(0, 5871, '\P{^Numeric_Value=0_0_0_0_019}', "");
Error('\p{Nv=/a/00-00-00 19}');
Error('\P{Nv=/a/00-00-00 19}');
Expect(1, 5872, '\p{Nv=+0_0_19}', "");
Expect(0, 5872, '\p{^Nv=+0_0_19}', "");
Expect(0, 5872, '\P{Nv=+0_0_19}', "");
Expect(1, 5872, '\P{^Nv=+0_0_19}', "");
Expect(0, 5871, '\p{Nv=+0_0_19}', "");
Expect(1, 5871, '\p{^Nv=+0_0_19}', "");
Expect(1, 5871, '\P{Nv=+0_0_19}', "");
Expect(0, 5871, '\P{^Nv=+0_0_19}', "");
Error('\p{Is_Numeric_Value=:=0019}');
Error('\P{Is_Numeric_Value=:=0019}');
Expect(1, 5872, '\p{Is_Numeric_Value=019}', "");
Expect(0, 5872, '\p{^Is_Numeric_Value=019}', "");
Expect(0, 5872, '\P{Is_Numeric_Value=019}', "");
Expect(1, 5872, '\P{^Is_Numeric_Value=019}', "");
Expect(0, 5871, '\p{Is_Numeric_Value=019}', "");
Expect(1, 5871, '\p{^Is_Numeric_Value=019}', "");
Expect(1, 5871, '\P{Is_Numeric_Value=019}', "");
Expect(0, 5871, '\P{^Is_Numeric_Value=019}', "");
Error('\p{Is_Nv= _0:=0-0 0	0_019}');
Error('\P{Is_Nv= _0:=0-0 0	0_019}');
Expect(1, 5872, '\p{Is_Nv: 000000019}', "");
Expect(0, 5872, '\p{^Is_Nv: 000000019}', "");
Expect(0, 5872, '\P{Is_Nv: 000000019}', "");
Expect(1, 5872, '\P{^Is_Nv: 000000019}', "");
Expect(0, 5871, '\p{Is_Nv: 000000019}', "");
Expect(1, 5871, '\p{^Is_Nv: 000000019}', "");
Expect(1, 5871, '\P{Is_Nv: 000000019}', "");
Expect(0, 5871, '\P{^Is_Nv: 000000019}', "");
Error('\p{Numeric_Value=	-000011/002:=}');
Error('\P{Numeric_Value=	-000011/002:=}');
Expect(1, 3887, '\p{Numeric_Value=0000000011/000002}', "");
Expect(0, 3887, '\p{^Numeric_Value=0000000011/000002}', "");
Expect(0, 3887, '\P{Numeric_Value=0000000011/000002}', "");
Expect(1, 3887, '\P{^Numeric_Value=0000000011/000002}', "");
Expect(0, 3886, '\p{Numeric_Value=0000000011/000002}', "");
Expect(1, 3886, '\p{^Numeric_Value=0000000011/000002}', "");
Expect(1, 3886, '\P{Numeric_Value=0000000011/000002}', "");
Expect(0, 3886, '\P{^Numeric_Value=0000000011/000002}', "");
Expect(1, 3887, '\p{Numeric_Value:   5.500}', "");
Expect(0, 3887, '\p{^Numeric_Value:   5.500}', "");
Expect(0, 3887, '\P{Numeric_Value:   5.500}', "");
Expect(1, 3887, '\P{^Numeric_Value:   5.500}', "");
Expect(0, 3886, '\p{Numeric_Value:   5.500}', "");
Expect(1, 3886, '\p{^Numeric_Value:   5.500}', "");
Expect(1, 3886, '\P{Numeric_Value:   5.500}', "");
Expect(0, 3886, '\P{^Numeric_Value:   5.500}', "");
Error('\p{Nv= /a/00000000011/00002}');
Error('\P{Nv= /a/00000000011/00002}');
Expect(1, 3887, '\p{Nv=00011/0002}', "");
Expect(0, 3887, '\p{^Nv=00011/0002}', "");
Expect(0, 3887, '\P{Nv=00011/0002}', "");
Expect(1, 3887, '\P{^Nv=00011/0002}', "");
Expect(0, 3886, '\p{Nv=00011/0002}', "");
Expect(1, 3886, '\p{^Nv=00011/0002}', "");
Expect(1, 3886, '\P{Nv=00011/0002}', "");
Expect(0, 3886, '\P{^Nv=00011/0002}', "");
Expect(1, 3887, '\p{Nv=5.500}', "");
Expect(0, 3887, '\p{^Nv=5.500}', "");
Expect(0, 3887, '\P{Nv=5.500}', "");
Expect(1, 3887, '\P{^Nv=5.500}', "");
Expect(0, 3886, '\p{Nv=5.500}', "");
Expect(1, 3886, '\p{^Nv=5.500}', "");
Expect(1, 3886, '\P{Nv=5.500}', "");
Expect(0, 3886, '\P{^Nv=5.500}', "");
Error('\p{Is_Numeric_Value=/a/ -11/000002}');
Error('\P{Is_Numeric_Value=/a/ -11/000002}');
Expect(1, 3887, '\p{Is_Numeric_Value=011/000000002}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=011/000000002}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=011/000000002}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=011/000000002}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=011/000000002}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=011/000000002}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=011/000000002}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=011/000000002}', "");
Expect(1, 3887, '\p{Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=5.500}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=5.500}', "");
Error('\p{Is_Nv=	_+000000011/0002:=}');
Error('\P{Is_Nv=	_+000000011/0002:=}');
Expect(1, 3887, '\p{Is_Nv=0000011/000000002}', "");
Expect(0, 3887, '\p{^Is_Nv=0000011/000000002}', "");
Expect(0, 3887, '\P{Is_Nv=0000011/000000002}', "");
Expect(1, 3887, '\P{^Is_Nv=0000011/000000002}', "");
Expect(0, 3886, '\p{Is_Nv=0000011/000000002}', "");
Expect(1, 3886, '\p{^Is_Nv=0000011/000000002}', "");
Expect(1, 3886, '\P{Is_Nv=0000011/000000002}', "");
Expect(0, 3886, '\P{^Is_Nv=0000011/000000002}', "");
Expect(1, 3887, '\p{Is_Nv=5.500}', "");
Expect(0, 3887, '\p{^Is_Nv=5.500}', "");
Expect(0, 3887, '\P{Is_Nv=5.500}', "");
Expect(1, 3887, '\P{^Is_Nv=5.500}', "");
Expect(0, 3886, '\p{Is_Nv=5.500}', "");
Expect(1, 3886, '\p{^Is_Nv=5.500}', "");
Expect(1, 3886, '\P{Is_Nv=5.500}', "");
Expect(0, 3886, '\P{^Is_Nv=5.500}', "");
Error('\p{Numeric_Value=--070:=}');
Error('\P{Numeric_Value=--070:=}');
Expect(1, 4984, '\p{Numeric_Value=0000007_0}', "");
Expect(0, 4984, '\p{^Numeric_Value=0000007_0}', "");
Expect(0, 4984, '\P{Numeric_Value=0000007_0}', "");
Expect(1, 4984, '\P{^Numeric_Value=0000007_0}', "");
Expect(0, 4983, '\p{Numeric_Value=0000007_0}', "");
Expect(1, 4983, '\p{^Numeric_Value=0000007_0}', "");
Expect(1, 4983, '\P{Numeric_Value=0000007_0}', "");
Expect(0, 4983, '\P{^Numeric_Value=0000007_0}', "");
Error('\p{Nv=/a/-	000007	0}');
Error('\P{Nv=/a/-	000007	0}');
Expect(1, 4984, '\p{Nv=+0000000070}', "");
Expect(0, 4984, '\p{^Nv=+0000000070}', "");
Expect(0, 4984, '\P{Nv=+0000000070}', "");
Expect(1, 4984, '\P{^Nv=+0000000070}', "");
Expect(0, 4983, '\p{Nv=+0000000070}', "");
Expect(1, 4983, '\p{^Nv=+0000000070}', "");
Expect(1, 4983, '\P{Nv=+0000000070}', "");
Expect(0, 4983, '\P{^Nv=+0000000070}', "");
Error('\p{Is_Numeric_Value= 	+0	0	0:=0 070}');
Error('\P{Is_Numeric_Value= 	+0	0	0:=0 070}');
Expect(1, 4984, '\p{Is_Numeric_Value=0070}', "");
Expect(0, 4984, '\p{^Is_Numeric_Value=0070}', "");
Expect(0, 4984, '\P{Is_Numeric_Value=0070}', "");
Expect(1, 4984, '\P{^Is_Numeric_Value=0070}', "");
Expect(0, 4983, '\p{Is_Numeric_Value=0070}', "");
Expect(1, 4983, '\p{^Is_Numeric_Value=0070}', "");
Expect(1, 4983, '\P{Is_Numeric_Value=0070}', "");
Expect(0, 4983, '\P{^Is_Numeric_Value=0070}', "");
Error('\p{Is_Nv=	_0000007_0/a/}');
Error('\P{Is_Nv=	_0000007_0/a/}');
Expect(1, 4984, '\p{Is_Nv=00000070}', "");
Expect(0, 4984, '\p{^Is_Nv=00000070}', "");
Expect(0, 4984, '\P{Is_Nv=00000070}', "");
Expect(1, 4984, '\P{^Is_Nv=00000070}', "");
Expect(0, 4983, '\p{Is_Nv=00000070}', "");
Expect(1, 4983, '\p{^Is_Nv=00000070}', "");
Expect(1, 4983, '\P{Is_Nv=00000070}', "");
Expect(0, 4983, '\P{^Is_Nv=00000070}', "");
Error('\p{Numeric_Value=_/a/000002}');
Error('\P{Numeric_Value=_/a/000002}');
Expect(1, 50, '\p{Numeric_Value:   00_00_2}', "");
Expect(0, 50, '\p{^Numeric_Value:   00_00_2}', "");
Expect(0, 50, '\P{Numeric_Value:   00_00_2}', "");
Expect(1, 50, '\P{^Numeric_Value:   00_00_2}', "");
Expect(0, 49, '\p{Numeric_Value:   00_00_2}', "");
Expect(1, 49, '\p{^Numeric_Value:   00_00_2}', "");
Expect(1, 49, '\P{Numeric_Value:   00_00_2}', "");
Expect(0, 49, '\P{^Numeric_Value:   00_00_2}', "");
Error('\p{Nv=	-000/a/2}');
Error('\P{Nv=	-000/a/2}');
Expect(1, 50, '\p{Nv=0_0_02}', "");
Expect(0, 50, '\p{^Nv=0_0_02}', "");
Expect(0, 50, '\P{Nv=0_0_02}', "");
Expect(1, 50, '\P{^Nv=0_0_02}', "");
Expect(0, 49, '\p{Nv=0_0_02}', "");
Expect(1, 49, '\p{^Nv=0_0_02}', "");
Expect(1, 49, '\P{Nv=0_0_02}', "");
Expect(0, 49, '\P{^Nv=0_0_02}', "");
Error('\p{Is_Numeric_Value=/a/	_0000002}');
Error('\P{Is_Numeric_Value=/a/	_0000002}');
Expect(1, 50, '\p{Is_Numeric_Value=2}', "");
Expect(0, 50, '\p{^Is_Numeric_Value=2}', "");
Expect(0, 50, '\P{Is_Numeric_Value=2}', "");
Expect(1, 50, '\P{^Is_Numeric_Value=2}', "");
Expect(0, 49, '\p{Is_Numeric_Value=2}', "");
Expect(1, 49, '\p{^Is_Numeric_Value=2}', "");
Expect(1, 49, '\P{Is_Numeric_Value=2}', "");
Expect(0, 49, '\P{^Is_Numeric_Value=2}', "");
Error('\p{Is_Nv=	-000002:=}');
Error('\P{Is_Nv=	-000002:=}');
Expect(1, 50, '\p{Is_Nv=0_2}', "");
Expect(0, 50, '\p{^Is_Nv=0_2}', "");
Expect(0, 50, '\P{Is_Nv=0_2}', "");
Expect(1, 50, '\P{^Is_Nv=0_2}', "");
Expect(0, 49, '\p{Is_Nv=0_2}', "");
Expect(1, 49, '\p{^Is_Nv=0_2}', "");
Expect(1, 49, '\P{Is_Nv=0_2}', "");
Expect(0, 49, '\P{^Is_Nv=0_2}', "");
Error('\p{Numeric_Value=:= 	00017}');
Error('\P{Numeric_Value=:= 	00017}');
Expect(1, 5870, '\p{Numeric_Value=+01_7}', "");
Expect(0, 5870, '\p{^Numeric_Value=+01_7}', "");
Expect(0, 5870, '\P{Numeric_Value=+01_7}', "");
Expect(1, 5870, '\P{^Numeric_Value=+01_7}', "");
Expect(0, 5869, '\p{Numeric_Value=+01_7}', "");
Expect(1, 5869, '\p{^Numeric_Value=+01_7}', "");
Expect(1, 5869, '\P{Numeric_Value=+01_7}', "");
Expect(0, 5869, '\P{^Numeric_Value=+01_7}', "");
Error('\p{Nv=/a/_ 0000017}');
Error('\P{Nv=/a/_ 0000017}');
Expect(1, 5870, '\p{Nv=+0000017}', "");
Expect(0, 5870, '\p{^Nv=+0000017}', "");
Expect(0, 5870, '\P{Nv=+0000017}', "");
Expect(1, 5870, '\P{^Nv=+0000017}', "");
Expect(0, 5869, '\p{Nv=+0000017}', "");
Expect(1, 5869, '\p{^Nv=+0000017}', "");
Expect(1, 5869, '\P{Nv=+0000017}', "");
Expect(0, 5869, '\P{^Nv=+0000017}', "");
Error('\p{Is_Numeric_Value=-:=0 0	00-17}');
Error('\P{Is_Numeric_Value=-:=0 0	00-17}');
Expect(1, 5870, '\p{Is_Numeric_Value=000017}', "");
Expect(0, 5870, '\p{^Is_Numeric_Value=000017}', "");
Expect(0, 5870, '\P{Is_Numeric_Value=000017}', "");
Expect(1, 5870, '\P{^Is_Numeric_Value=000017}', "");
Expect(0, 5869, '\p{Is_Numeric_Value=000017}', "");
Expect(1, 5869, '\p{^Is_Numeric_Value=000017}', "");
Expect(1, 5869, '\P{Is_Numeric_Value=000017}', "");
Expect(0, 5869, '\P{^Is_Numeric_Value=000017}', "");
Error('\p{Is_Nv=/a/_ 0000000017}');
Error('\P{Is_Nv=/a/_ 0000000017}');
Expect(1, 5870, '\p{Is_Nv:	00_01_7}', "");
Expect(0, 5870, '\p{^Is_Nv:	00_01_7}', "");
Expect(0, 5870, '\P{Is_Nv:	00_01_7}', "");
Expect(1, 5870, '\P{^Is_Nv:	00_01_7}', "");
Expect(0, 5869, '\p{Is_Nv:	00_01_7}', "");
Expect(1, 5869, '\p{^Is_Nv:	00_01_7}', "");
Expect(1, 5869, '\P{Is_Nv:	00_01_7}', "");
Expect(0, 5869, '\P{^Is_Nv:	00_01_7}', "");
Error('\p{Numeric_Value=--+20000/a/}');
Error('\P{Numeric_Value=--+20000/a/}');
Expect(1, 65836, '\p{Numeric_Value=0020000}', "");
Expect(0, 65836, '\p{^Numeric_Value=0020000}', "");
Expect(0, 65836, '\P{Numeric_Value=0020000}', "");
Expect(1, 65836, '\P{^Numeric_Value=0020000}', "");
Expect(0, 65835, '\p{Numeric_Value=0020000}', "");
Expect(1, 65835, '\p{^Numeric_Value=0020000}', "");
Expect(1, 65835, '\P{Numeric_Value=0020000}', "");
Expect(0, 65835, '\P{^Numeric_Value=0020000}', "");
Error('\p{Nv=	+00020000:=}');
Error('\P{Nv=	+00020000:=}');
Expect(1, 65836, '\p{Nv=020000}', "");
Expect(0, 65836, '\p{^Nv=020000}', "");
Expect(0, 65836, '\P{Nv=020000}', "");
Expect(1, 65836, '\P{^Nv=020000}', "");
Expect(0, 65835, '\p{Nv=020000}', "");
Expect(1, 65835, '\p{^Nv=020000}', "");
Expect(1, 65835, '\P{Nv=020000}', "");
Expect(0, 65835, '\P{^Nv=020000}', "");
Error('\p{Is_Numeric_Value: := +0000020000}');
Error('\P{Is_Numeric_Value: := +0000020000}');
Expect(1, 65836, '\p{Is_Numeric_Value=+2000_0}', "");
Expect(0, 65836, '\p{^Is_Numeric_Value=+2000_0}', "");
Expect(0, 65836, '\P{Is_Numeric_Value=+2000_0}', "");
Expect(1, 65836, '\P{^Is_Numeric_Value=+2000_0}', "");
Expect(0, 65835, '\p{Is_Numeric_Value=+2000_0}', "");
Expect(1, 65835, '\p{^Is_Numeric_Value=+2000_0}', "");
Expect(1, 65835, '\P{Is_Numeric_Value=+2000_0}', "");
Expect(0, 65835, '\P{^Is_Numeric_Value=+2000_0}', "");
Error('\p{Is_Nv=_000020000/a/}');
Error('\P{Is_Nv=_000020000/a/}');
Expect(1, 65836, '\p{Is_Nv:   0000000020000}', "");
Expect(0, 65836, '\p{^Is_Nv:   0000000020000}', "");
Expect(0, 65836, '\P{Is_Nv:   0000000020000}', "");
Expect(1, 65836, '\P{^Is_Nv:   0000000020000}', "");
Expect(0, 65835, '\p{Is_Nv:   0000000020000}', "");
Expect(1, 65835, '\p{^Is_Nv:   0000000020000}', "");
Expect(1, 65835, '\P{Is_Nv:   0000000020000}', "");
Expect(0, 65835, '\P{^Is_Nv:   0000000020000}', "");
Error('\p{Numeric_Value=_/a/+0-00 0-01}');
Error('\P{Numeric_Value=_/a/+0-00 0-01}');
Expect(1, 49, '\p{Numeric_Value=0000000001}', "");
Expect(0, 49, '\p{^Numeric_Value=0000000001}', "");
Expect(0, 49, '\P{Numeric_Value=0000000001}', "");
Expect(1, 49, '\P{^Numeric_Value=0000000001}', "");
Expect(0, 48, '\p{Numeric_Value=0000000001}', "");
Expect(1, 48, '\p{^Numeric_Value=0000000001}', "");
Expect(1, 48, '\P{Numeric_Value=0000000001}', "");
Expect(0, 48, '\P{^Numeric_Value=0000000001}', "");
Error('\p{Nv=/a/ _001}');
Error('\P{Nv=/a/ _001}');
Expect(1, 49, '\p{Nv=0000000001}', "");
Expect(0, 49, '\p{^Nv=0000000001}', "");
Expect(0, 49, '\P{Nv=0000000001}', "");
Expect(1, 49, '\P{^Nv=0000000001}', "");
Expect(0, 48, '\p{Nv=0000000001}', "");
Expect(1, 48, '\p{^Nv=0000000001}', "");
Expect(1, 48, '\P{Nv=0000000001}', "");
Expect(0, 48, '\P{^Nv=0000000001}', "");
Error('\p{Is_Numeric_Value=	+0:=1}');
Error('\P{Is_Numeric_Value=	+0:=1}');
Expect(1, 49, '\p{Is_Numeric_Value=000_1}', "");
Expect(0, 49, '\p{^Is_Numeric_Value=000_1}', "");
Expect(0, 49, '\P{Is_Numeric_Value=000_1}', "");
Expect(1, 49, '\P{^Is_Numeric_Value=000_1}', "");
Expect(0, 48, '\p{Is_Numeric_Value=000_1}', "");
Expect(1, 48, '\p{^Is_Numeric_Value=000_1}', "");
Expect(1, 48, '\P{Is_Numeric_Value=000_1}', "");
Expect(0, 48, '\P{^Is_Numeric_Value=000_1}', "");
Error('\p{Is_Nv=	_+00000_1:=}');
Error('\P{Is_Nv=	_+00000_1:=}');
Expect(1, 49, '\p{Is_Nv:	+0_0_0_0_0001}', "");
Expect(0, 49, '\p{^Is_Nv:	+0_0_0_0_0001}', "");
Expect(0, 49, '\P{Is_Nv:	+0_0_0_0_0001}', "");
Expect(1, 49, '\P{^Is_Nv:	+0_0_0_0_0001}', "");
Expect(0, 48, '\p{Is_Nv:	+0_0_0_0_0001}', "");
Expect(1, 48, '\p{^Is_Nv:	+0_0_0_0_0001}', "");
Expect(1, 48, '\P{Is_Nv:	+0_0_0_0_0001}', "");
Expect(0, 48, '\P{^Is_Nv:	+0_0_0_0_0001}', "");
Error('\p{Numeric_Value= 0000000006000/a/}');
Error('\P{Numeric_Value= 0000000006000/a/}');
Expect(1, 65831, '\p{Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(0, 65831, '\p{^Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(0, 65831, '\P{Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(1, 65831, '\P{^Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(0, 65830, '\p{Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(1, 65830, '\p{^Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(1, 65830, '\P{Numeric_Value=+0_0_0_0_0_6_000}', "");
Expect(0, 65830, '\P{^Numeric_Value=+0_0_0_0_0_6_000}', "");
Error('\p{Nv=_/a/00006000}');
Error('\P{Nv=_/a/00006000}');
Expect(1, 65831, '\p{Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(0, 65831, '\p{^Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(0, 65831, '\P{Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(1, 65831, '\P{^Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(0, 65830, '\p{Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(1, 65830, '\p{^Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(1, 65830, '\P{Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Expect(0, 65830, '\P{^Nv=0_0_0_0_0_0_0_0_6_0_00}', "");
Error('\p{Is_Numeric_Value=_-00000006000:=}');
Error('\P{Is_Numeric_Value=_-00000006000:=}');
Expect(1, 65831, '\p{Is_Numeric_Value=00_06_00_0}', "");
Expect(0, 65831, '\p{^Is_Numeric_Value=00_06_00_0}', "");
Expect(0, 65831, '\P{Is_Numeric_Value=00_06_00_0}', "");
Expect(1, 65831, '\P{^Is_Numeric_Value=00_06_00_0}', "");
Expect(0, 65830, '\p{Is_Numeric_Value=00_06_00_0}', "");
Expect(1, 65830, '\p{^Is_Numeric_Value=00_06_00_0}', "");
Expect(1, 65830, '\P{Is_Numeric_Value=00_06_00_0}', "");
Expect(0, 65830, '\P{^Is_Numeric_Value=00_06_00_0}', "");
Error('\p{Is_Nv=-+000000006000/a/}');
Error('\P{Is_Nv=-+000000006000/a/}');
Expect(1, 65831, '\p{Is_Nv=000600_0}', "");
Expect(0, 65831, '\p{^Is_Nv=000600_0}', "");
Expect(0, 65831, '\P{Is_Nv=000600_0}', "");
Expect(1, 65831, '\P{^Is_Nv=000600_0}', "");
Expect(0, 65830, '\p{Is_Nv=000600_0}', "");
Expect(1, 65830, '\p{^Is_Nv=000600_0}', "");
Expect(1, 65830, '\P{Is_Nv=000600_0}', "");
Expect(0, 65830, '\P{^Is_Nv=000600_0}', "");
Error('\p{Numeric_Value=/a/-030}');
Error('\P{Numeric_Value=/a/-030}');
Expect(1, 4980, '\p{Numeric_Value=0_0_0_0_030}', "");
Expect(0, 4980, '\p{^Numeric_Value=0_0_0_0_030}', "");
Expect(0, 4980, '\P{Numeric_Value=0_0_0_0_030}', "");
Expect(1, 4980, '\P{^Numeric_Value=0_0_0_0_030}', "");
Expect(0, 4979, '\p{Numeric_Value=0_0_0_0_030}', "");
Expect(1, 4979, '\p{^Numeric_Value=0_0_0_0_030}', "");
Expect(1, 4979, '\P{Numeric_Value=0_0_0_0_030}', "");
Expect(0, 4979, '\P{^Numeric_Value=0_0_0_0_030}', "");
Error('\p{Nv:	-30:=}');
Error('\P{Nv:	-30:=}');
Expect(1, 4980, '\p{Nv=+0_0_0_0_0_0_0_30}', "");
Expect(0, 4980, '\p{^Nv=+0_0_0_0_0_0_0_30}', "");
Expect(0, 4980, '\P{Nv=+0_0_0_0_0_0_0_30}', "");
Expect(1, 4980, '\P{^Nv=+0_0_0_0_0_0_0_30}', "");
Expect(0, 4979, '\p{Nv=+0_0_0_0_0_0_0_30}', "");
Expect(1, 4979, '\p{^Nv=+0_0_0_0_0_0_0_30}', "");
Expect(1, 4979, '\P{Nv=+0_0_0_0_0_0_0_30}', "");
Expect(0, 4979, '\P{^Nv=+0_0_0_0_0_0_0_30}', "");
Error('\p{Is_Numeric_Value=/a/-00000030}');
Error('\P{Is_Numeric_Value=/a/-00000030}');
Expect(1, 4980, '\p{Is_Numeric_Value=30}', "");
Expect(0, 4980, '\p{^Is_Numeric_Value=30}', "");
Expect(0, 4980, '\P{Is_Numeric_Value=30}', "");
Expect(1, 4980, '\P{^Is_Numeric_Value=30}', "");
Expect(0, 4979, '\p{Is_Numeric_Value=30}', "");
Expect(1, 4979, '\p{^Is_Numeric_Value=30}', "");
Expect(1, 4979, '\P{Is_Numeric_Value=30}', "");
Expect(0, 4979, '\P{^Is_Numeric_Value=30}', "");
Error('\p{Is_Nv=/a/		+00000030}');
Error('\P{Is_Nv=/a/		+00000030}');
Expect(1, 4980, '\p{Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(0, 4980, '\p{^Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(0, 4980, '\P{Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(1, 4980, '\P{^Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(0, 4979, '\p{Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(1, 4979, '\p{^Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(1, 4979, '\P{Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Expect(0, 4979, '\P{^Is_Nv=0_0_0_0_0_0_0_0_30}', "");
Error('\p{Numeric_Value=:=__000000002/03}');
Error('\P{Numeric_Value=:=__000000002/03}');
Expect(1, 8532, '\p{Numeric_Value=0000000002/03}', "");
Expect(0, 8532, '\p{^Numeric_Value=0000000002/03}', "");
Expect(0, 8532, '\P{Numeric_Value=0000000002/03}', "");
Expect(1, 8532, '\P{^Numeric_Value=0000000002/03}', "");
Expect(0, 8531, '\p{Numeric_Value=0000000002/03}', "");
Expect(1, 8531, '\p{^Numeric_Value=0000000002/03}', "");
Expect(1, 8531, '\P{Numeric_Value=0000000002/03}', "");
Expect(0, 8531, '\P{^Numeric_Value=0000000002/03}', "");
Error('\p{Numeric_Value=0.7}');
Error('\P{Numeric_Value=0.7}');
Error('\p{Numeric_Value=0.67}');
Error('\P{Numeric_Value=0.67}');
Expect(1, 8532, '\p{Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Numeric_Value=0.667}', "");
Error('\p{Nv=:=_-00002/00003}');
Error('\P{Nv=:=_-00002/00003}');
Expect(1, 8532, '\p{Nv=0000000002/000000003}', "");
Expect(0, 8532, '\p{^Nv=0000000002/000000003}', "");
Expect(0, 8532, '\P{Nv=0000000002/000000003}', "");
Expect(1, 8532, '\P{^Nv=0000000002/000000003}', "");
Expect(0, 8531, '\p{Nv=0000000002/000000003}', "");
Expect(1, 8531, '\p{^Nv=0000000002/000000003}', "");
Expect(1, 8531, '\P{Nv=0000000002/000000003}', "");
Expect(0, 8531, '\P{^Nv=0000000002/000000003}', "");
Error('\p{Nv:	0.7}');
Error('\P{Nv:	0.7}');
Error('\p{Nv=0.67}');
Error('\P{Nv=0.67}');
Expect(1, 8532, '\p{Nv=0.667}', "");
Expect(0, 8532, '\p{^Nv=0.667}', "");
Expect(0, 8532, '\P{Nv=0.667}', "");
Expect(1, 8532, '\P{^Nv=0.667}', "");
Expect(0, 8531, '\p{Nv=0.667}', "");
Expect(1, 8531, '\p{^Nv=0.667}', "");
Expect(1, 8531, '\P{Nv=0.667}', "");
Expect(0, 8531, '\P{^Nv=0.667}', "");
Error('\p{Is_Numeric_Value: 	+0000000002/0000003:=}');
Error('\P{Is_Numeric_Value: 	+0000000002/0000003:=}');
Expect(1, 8532, '\p{Is_Numeric_Value=+00000002/0000000003}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value=+00000002/0000000003}', "");
Expect(0, 8532, '\P{Is_Numeric_Value=+00000002/0000000003}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value=+00000002/0000000003}', "");
Expect(0, 8531, '\p{Is_Numeric_Value=+00000002/0000000003}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value=+00000002/0000000003}', "");
Expect(1, 8531, '\P{Is_Numeric_Value=+00000002/0000000003}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value=+00000002/0000000003}', "");
Error('\p{Is_Numeric_Value=0.7}');
Error('\P{Is_Numeric_Value=0.7}');
Error('\p{Is_Numeric_Value=0.67}');
Error('\P{Is_Numeric_Value=0.67}');
Expect(1, 8532, '\p{Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Is_Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value=0.667}', "");
Error('\p{Is_Nv=:=-_00002/0000003}');
Error('\P{Is_Nv=:=-_00002/0000003}');
Expect(1, 8532, '\p{Is_Nv=000002/3}', "");
Expect(0, 8532, '\p{^Is_Nv=000002/3}', "");
Expect(0, 8532, '\P{Is_Nv=000002/3}', "");
Expect(1, 8532, '\P{^Is_Nv=000002/3}', "");
Expect(0, 8531, '\p{Is_Nv=000002/3}', "");
Expect(1, 8531, '\p{^Is_Nv=000002/3}', "");
Expect(1, 8531, '\P{Is_Nv=000002/3}', "");
Expect(0, 8531, '\P{^Is_Nv=000002/3}', "");
Error('\p{Is_Nv=0.7}');
Error('\P{Is_Nv=0.7}');
Error('\p{Is_Nv=0.67}');
Error('\P{Is_Nv=0.67}');
Expect(1, 8532, '\p{Is_Nv:   0.667}', "");
Expect(0, 8532, '\p{^Is_Nv:   0.667}', "");
Expect(0, 8532, '\P{Is_Nv:   0.667}', "");
Expect(1, 8532, '\P{^Is_Nv:   0.667}', "");
Expect(0, 8531, '\p{Is_Nv:   0.667}', "");
Expect(1, 8531, '\p{^Is_Nv:   0.667}', "");
Expect(1, 8531, '\P{Is_Nv:   0.667}', "");
Expect(0, 8531, '\P{^Is_Nv:   0.667}', "");
Error('\p{Numeric_Value=	:=0_04	000}');
Error('\P{Numeric_Value=	:=0_04	000}');
Expect(1, 65829, '\p{Numeric_Value:	+000004000}', "");
Expect(0, 65829, '\p{^Numeric_Value:	+000004000}', "");
Expect(0, 65829, '\P{Numeric_Value:	+000004000}', "");
Expect(1, 65829, '\P{^Numeric_Value:	+000004000}', "");
Expect(0, 65828, '\p{Numeric_Value:	+000004000}', "");
Expect(1, 65828, '\p{^Numeric_Value:	+000004000}', "");
Expect(1, 65828, '\P{Numeric_Value:	+000004000}', "");
Expect(0, 65828, '\P{^Numeric_Value:	+000004000}', "");
Error('\p{Nv=-0 0/a/0 0_0-0_00-04	0-00}');
Error('\P{Nv=-0 0/a/0 0_0-0_00-04	0-00}');
Expect(1, 65829, '\p{Nv=0_0_0_0_0_4_0_00}', "");
Expect(0, 65829, '\p{^Nv=0_0_0_0_0_4_0_00}', "");
Expect(0, 65829, '\P{Nv=0_0_0_0_0_4_0_00}', "");
Expect(1, 65829, '\P{^Nv=0_0_0_0_0_4_0_00}', "");
Expect(0, 65828, '\p{Nv=0_0_0_0_0_4_0_00}', "");
Expect(1, 65828, '\p{^Nv=0_0_0_0_0_4_0_00}', "");
Expect(1, 65828, '\P{Nv=0_0_0_0_0_4_0_00}', "");
Expect(0, 65828, '\P{^Nv=0_0_0_0_0_4_0_00}', "");
Error('\p{Is_Numeric_Value=+00:=00-00-40	00}');
Error('\P{Is_Numeric_Value=+00:=00-00-40	00}');
Expect(1, 65829, '\p{Is_Numeric_Value=00400_0}', "");
Expect(0, 65829, '\p{^Is_Numeric_Value=00400_0}', "");
Expect(0, 65829, '\P{Is_Numeric_Value=00400_0}', "");
Expect(1, 65829, '\P{^Is_Numeric_Value=00400_0}', "");
Expect(0, 65828, '\p{Is_Numeric_Value=00400_0}', "");
Expect(1, 65828, '\p{^Is_Numeric_Value=00400_0}', "");
Expect(1, 65828, '\P{Is_Numeric_Value=00400_0}', "");
Expect(0, 65828, '\P{^Is_Numeric_Value=00400_0}', "");
Error('\p{Is_Nv= +4000/a/}');
Error('\P{Is_Nv= +4000/a/}');
Expect(1, 65829, '\p{Is_Nv=+0000000004000}', "");
Expect(0, 65829, '\p{^Is_Nv=+0000000004000}', "");
Expect(0, 65829, '\P{Is_Nv=+0000000004000}', "");
Expect(1, 65829, '\P{^Is_Nv=+0000000004000}', "");
Expect(0, 65828, '\p{Is_Nv=+0000000004000}', "");
Expect(1, 65828, '\p{^Is_Nv=+0000000004000}', "");
Expect(1, 65828, '\P{Is_Nv=+0000000004000}', "");
Expect(0, 65828, '\P{^Is_Nv=+0000000004000}', "");
Error('\p{Numeric_Value=- 000000000100/a/}');
Error('\P{Numeric_Value=- 000000000100/a/}');
Expect(1, 3057, '\p{Numeric_Value: 10_0}', "");
Expect(0, 3057, '\p{^Numeric_Value: 10_0}', "");
Expect(0, 3057, '\P{Numeric_Value: 10_0}', "");
Expect(1, 3057, '\P{^Numeric_Value: 10_0}', "");
Expect(0, 3056, '\p{Numeric_Value: 10_0}', "");
Expect(1, 3056, '\p{^Numeric_Value: 10_0}', "");
Expect(1, 3056, '\P{Numeric_Value: 10_0}', "");
Expect(0, 3056, '\P{^Numeric_Value: 10_0}', "");
Error('\p{Nv=	-+000:=000-00100}');
Error('\P{Nv=	-+000:=000-00100}');
Expect(1, 3057, '\p{Nv=00100}', "");
Expect(0, 3057, '\p{^Nv=00100}', "");
Expect(0, 3057, '\P{Nv=00100}', "");
Expect(1, 3057, '\P{^Nv=00100}', "");
Expect(0, 3056, '\p{Nv=00100}', "");
Expect(1, 3056, '\p{^Nv=00100}', "");
Expect(1, 3056, '\P{Nv=00100}', "");
Expect(0, 3056, '\P{^Nv=00100}', "");
Error('\p{Is_Numeric_Value=	 0:=00-100}');
Error('\P{Is_Numeric_Value=	 0:=00-100}');
Expect(1, 3057, '\p{Is_Numeric_Value=+00100}', "");
Expect(0, 3057, '\p{^Is_Numeric_Value=+00100}', "");
Expect(0, 3057, '\P{Is_Numeric_Value=+00100}', "");
Expect(1, 3057, '\P{^Is_Numeric_Value=+00100}', "");
Expect(0, 3056, '\p{Is_Numeric_Value=+00100}', "");
Expect(1, 3056, '\p{^Is_Numeric_Value=+00100}', "");
Expect(1, 3056, '\P{Is_Numeric_Value=+00100}', "");
Expect(0, 3056, '\P{^Is_Numeric_Value=+00100}', "");
Error('\p{Is_Nv=-/a/0100}');
Error('\P{Is_Nv=-/a/0100}');
Expect(1, 3057, '\p{Is_Nv=000000000100}', "");
Expect(0, 3057, '\p{^Is_Nv=000000000100}', "");
Expect(0, 3057, '\P{Is_Nv=000000000100}', "");
Expect(1, 3057, '\P{^Is_Nv=000000000100}', "");
Expect(0, 3056, '\p{Is_Nv=000000000100}', "");
Expect(1, 3056, '\p{^Is_Nv=000000000100}', "");
Expect(1, 3056, '\P{Is_Nv=000000000100}', "");
Expect(0, 3056, '\P{^Is_Nv=000000000100}', "");
Error('\p{Numeric_Value=/a/ 0300}');
Error('\P{Numeric_Value=/a/ 0300}');
Expect(1, 65819, '\p{Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(0, 65819, '\p{^Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(0, 65819, '\P{Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(1, 65819, '\P{^Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(0, 65818, '\p{Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(1, 65818, '\p{^Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(1, 65818, '\P{Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Expect(0, 65818, '\P{^Numeric_Value:	0_0_0_0_0_0_0_0_3_00}', "");
Error('\p{Nv: 	_30_0/a/}');
Error('\P{Nv: 	_30_0/a/}');
Expect(1, 65819, '\p{Nv=+0_0_0_0_0_0_300}', "");
Expect(0, 65819, '\p{^Nv=+0_0_0_0_0_0_300}', "");
Expect(0, 65819, '\P{Nv=+0_0_0_0_0_0_300}', "");
Expect(1, 65819, '\P{^Nv=+0_0_0_0_0_0_300}', "");
Expect(0, 65818, '\p{Nv=+0_0_0_0_0_0_300}', "");
Expect(1, 65818, '\p{^Nv=+0_0_0_0_0_0_300}', "");
Expect(1, 65818, '\P{Nv=+0_0_0_0_0_0_300}', "");
Expect(0, 65818, '\P{^Nv=+0_0_0_0_0_0_300}', "");
Error('\p{Is_Numeric_Value=-_000300:=}');
Error('\P{Is_Numeric_Value=-_000300:=}');
Expect(1, 65819, '\p{Is_Numeric_Value=+0300}', "");
Expect(0, 65819, '\p{^Is_Numeric_Value=+0300}', "");
Expect(0, 65819, '\P{Is_Numeric_Value=+0300}', "");
Expect(1, 65819, '\P{^Is_Numeric_Value=+0300}', "");
Expect(0, 65818, '\p{Is_Numeric_Value=+0300}', "");
Expect(1, 65818, '\p{^Is_Numeric_Value=+0300}', "");
Expect(1, 65818, '\P{Is_Numeric_Value=+0300}', "");
Expect(0, 65818, '\P{^Is_Numeric_Value=+0300}', "");
Error('\p{Is_Nv:   	_000030/a/0}');
Error('\P{Is_Nv:   	_000030/a/0}');
Expect(1, 65819, '\p{Is_Nv=+00300}', "");
Expect(0, 65819, '\p{^Is_Nv=+00300}', "");
Expect(0, 65819, '\P{Is_Nv=+00300}', "");
Expect(1, 65819, '\P{^Is_Nv=+00300}', "");
Expect(0, 65818, '\p{Is_Nv=+00300}', "");
Expect(1, 65818, '\p{^Is_Nv=+00300}', "");
Expect(1, 65818, '\P{Is_Nv=+00300}', "");
Expect(0, 65818, '\P{^Is_Nv=+00300}', "");
Error('\p{Numeric_Value=:= 0001/000008}');
Error('\P{Numeric_Value=:= 0001/000008}');
Expect(1, 2549, '\p{Numeric_Value=00000001/0000000008}', "");
Expect(0, 2549, '\p{^Numeric_Value=00000001/0000000008}', "");
Expect(0, 2549, '\P{Numeric_Value=00000001/0000000008}', "");
Expect(1, 2549, '\P{^Numeric_Value=00000001/0000000008}', "");
Expect(0, 2548, '\p{Numeric_Value=00000001/0000000008}', "");
Expect(1, 2548, '\p{^Numeric_Value=00000001/0000000008}', "");
Expect(1, 2548, '\P{Numeric_Value=00000001/0000000008}', "");
Expect(0, 2548, '\P{^Numeric_Value=00000001/0000000008}', "");
Error('\p{Numeric_Value:0.13}');
Error('\P{Numeric_Value:0.13}');
Expect(1, 2549, '\p{Numeric_Value:	0.125}', "");
Expect(0, 2549, '\p{^Numeric_Value:	0.125}', "");
Expect(0, 2549, '\P{Numeric_Value:	0.125}', "");
Expect(1, 2549, '\P{^Numeric_Value:	0.125}', "");
Expect(0, 2548, '\p{Numeric_Value:	0.125}', "");
Expect(1, 2548, '\p{^Numeric_Value:	0.125}', "");
Expect(1, 2548, '\P{Numeric_Value:	0.125}', "");
Expect(0, 2548, '\P{^Numeric_Value:	0.125}', "");
Error('\p{Nv=_ 001/0000000008:=}');
Error('\P{Nv=_ 001/0000000008:=}');
Expect(1, 2549, '\p{Nv=0000000001/00000008}', "");
Expect(0, 2549, '\p{^Nv=0000000001/00000008}', "");
Expect(0, 2549, '\P{Nv=0000000001/00000008}', "");
Expect(1, 2549, '\P{^Nv=0000000001/00000008}', "");
Expect(0, 2548, '\p{Nv=0000000001/00000008}', "");
Expect(1, 2548, '\p{^Nv=0000000001/00000008}', "");
Expect(1, 2548, '\P{Nv=0000000001/00000008}', "");
Expect(0, 2548, '\P{^Nv=0000000001/00000008}', "");
Error('\p{Nv=0.13}');
Error('\P{Nv=0.13}');
Expect(1, 2549, '\p{Nv=0.125}', "");
Expect(0, 2549, '\p{^Nv=0.125}', "");
Expect(0, 2549, '\P{Nv=0.125}', "");
Expect(1, 2549, '\P{^Nv=0.125}', "");
Expect(0, 2548, '\p{Nv=0.125}', "");
Expect(1, 2548, '\p{^Nv=0.125}', "");
Expect(1, 2548, '\P{Nv=0.125}', "");
Expect(0, 2548, '\P{^Nv=0.125}', "");
Error('\p{Is_Numeric_Value=:=-000000001/08}');
Error('\P{Is_Numeric_Value=:=-000000001/08}');
Expect(1, 2549, '\p{Is_Numeric_Value=01/00000008}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value=01/00000008}', "");
Expect(0, 2549, '\P{Is_Numeric_Value=01/00000008}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value=01/00000008}', "");
Expect(0, 2548, '\p{Is_Numeric_Value=01/00000008}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value=01/00000008}', "");
Expect(1, 2548, '\P{Is_Numeric_Value=01/00000008}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value=01/00000008}', "");
Error('\p{Is_Numeric_Value=0.13}');
Error('\P{Is_Numeric_Value=0.13}');
Expect(1, 2549, '\p{Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\P{Is_Numeric_Value=0.125}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\p{Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\P{Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value=0.125}', "");
Error('\p{Is_Nv=	/a/+1/0000008}');
Error('\P{Is_Nv=	/a/+1/0000008}');
Expect(1, 2549, '\p{Is_Nv=00001/8}', "");
Expect(0, 2549, '\p{^Is_Nv=00001/8}', "");
Expect(0, 2549, '\P{Is_Nv=00001/8}', "");
Expect(1, 2549, '\P{^Is_Nv=00001/8}', "");
Expect(0, 2548, '\p{Is_Nv=00001/8}', "");
Expect(1, 2548, '\p{^Is_Nv=00001/8}', "");
Expect(1, 2548, '\P{Is_Nv=00001/8}', "");
Expect(0, 2548, '\P{^Is_Nv=00001/8}', "");
Error('\p{Is_Nv:   0.13}');
Error('\P{Is_Nv:   0.13}');
Expect(1, 2549, '\p{Is_Nv=0.125}', "");
Expect(0, 2549, '\p{^Is_Nv=0.125}', "");
Expect(0, 2549, '\P{Is_Nv=0.125}', "");
Expect(1, 2549, '\P{^Is_Nv=0.125}', "");
Expect(0, 2548, '\p{Is_Nv=0.125}', "");
Expect(1, 2548, '\p{^Is_Nv=0.125}', "");
Expect(1, 2548, '\P{Is_Nv=0.125}', "");
Expect(0, 2548, '\P{^Is_Nv=0.125}', "");
Error('\p{Numeric_Value= +005/00000006/a/}');
Error('\P{Numeric_Value= +005/00000006/a/}');
Expect(1, 8538, '\p{Numeric_Value:	+0005/00000006}', "");
Expect(0, 8538, '\p{^Numeric_Value:	+0005/00000006}', "");
Expect(0, 8538, '\P{Numeric_Value:	+0005/00000006}', "");
Expect(1, 8538, '\P{^Numeric_Value:	+0005/00000006}', "");
Expect(0, 8537, '\p{Numeric_Value:	+0005/00000006}', "");
Expect(1, 8537, '\p{^Numeric_Value:	+0005/00000006}', "");
Expect(1, 8537, '\P{Numeric_Value:	+0005/00000006}', "");
Expect(0, 8537, '\P{^Numeric_Value:	+0005/00000006}', "");
Error('\p{Numeric_Value=0.83}');
Error('\P{Numeric_Value=0.83}');
Expect(1, 8538, '\p{Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Numeric_Value=0.833}', "");
Error('\p{Nv=_:=05/00000006}');
Error('\P{Nv=_:=05/00000006}');
Expect(1, 8538, '\p{Nv=0005/00006}', "");
Expect(0, 8538, '\p{^Nv=0005/00006}', "");
Expect(0, 8538, '\P{Nv=0005/00006}', "");
Expect(1, 8538, '\P{^Nv=0005/00006}', "");
Expect(0, 8537, '\p{Nv=0005/00006}', "");
Expect(1, 8537, '\p{^Nv=0005/00006}', "");
Expect(1, 8537, '\P{Nv=0005/00006}', "");
Expect(0, 8537, '\P{^Nv=0005/00006}', "");
Error('\p{Nv=0.83}');
Error('\P{Nv=0.83}');
Expect(1, 8538, '\p{Nv: 0.833}', "");
Expect(0, 8538, '\p{^Nv: 0.833}', "");
Expect(0, 8538, '\P{Nv: 0.833}', "");
Expect(1, 8538, '\P{^Nv: 0.833}', "");
Expect(0, 8537, '\p{Nv: 0.833}', "");
Expect(1, 8537, '\p{^Nv: 0.833}', "");
Expect(1, 8537, '\P{Nv: 0.833}', "");
Expect(0, 8537, '\P{^Nv: 0.833}', "");
Error('\p{Is_Numeric_Value=/a/	 005/6}');
Error('\P{Is_Numeric_Value=/a/	 005/6}');
Expect(1, 8538, '\p{Is_Numeric_Value:	+0005/000006}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value:	+0005/000006}', "");
Expect(0, 8538, '\P{Is_Numeric_Value:	+0005/000006}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value:	+0005/000006}', "");
Expect(0, 8537, '\p{Is_Numeric_Value:	+0005/000006}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value:	+0005/000006}', "");
Expect(1, 8537, '\P{Is_Numeric_Value:	+0005/000006}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value:	+0005/000006}', "");
Error('\p{Is_Numeric_Value=0.83}');
Error('\P{Is_Numeric_Value=0.83}');
Expect(1, 8538, '\p{Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Is_Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value=0.833}', "");
Error('\p{Is_Nv=:=-	000000005/06}');
Error('\P{Is_Nv=:=-	000000005/06}');
Expect(1, 8538, '\p{Is_Nv:	0000005/000006}', "");
Expect(0, 8538, '\p{^Is_Nv:	0000005/000006}', "");
Expect(0, 8538, '\P{Is_Nv:	0000005/000006}', "");
Expect(1, 8538, '\P{^Is_Nv:	0000005/000006}', "");
Expect(0, 8537, '\p{Is_Nv:	0000005/000006}', "");
Expect(1, 8537, '\p{^Is_Nv:	0000005/000006}', "");
Expect(1, 8537, '\P{Is_Nv:	0000005/000006}', "");
Expect(0, 8537, '\P{^Is_Nv:	0000005/000006}', "");
Error('\p{Is_Nv=0.83}');
Error('\P{Is_Nv=0.83}');
Expect(1, 8538, '\p{Is_Nv:0.833}', "");
Expect(0, 8538, '\p{^Is_Nv:0.833}', "");
Expect(0, 8538, '\P{Is_Nv:0.833}', "");
Expect(1, 8538, '\P{^Is_Nv:0.833}', "");
Expect(0, 8537, '\p{Is_Nv:0.833}', "");
Expect(1, 8537, '\p{^Is_Nv:0.833}', "");
Expect(1, 8537, '\P{Is_Nv:0.833}', "");
Expect(0, 8537, '\P{^Is_Nv:0.833}', "");
Error('\p{Numeric_Value=-/a/00000000025}');
Error('\P{Numeric_Value=-/a/00000000025}');
Expect(1, 12885, '\p{Numeric_Value=00000000025}', "");
Expect(0, 12885, '\p{^Numeric_Value=00000000025}', "");
Expect(0, 12885, '\P{Numeric_Value=00000000025}', "");
Expect(1, 12885, '\P{^Numeric_Value=00000000025}', "");
Expect(0, 12884, '\p{Numeric_Value=00000000025}', "");
Expect(1, 12884, '\p{^Numeric_Value=00000000025}', "");
Expect(1, 12884, '\P{Numeric_Value=00000000025}', "");
Expect(0, 12884, '\P{^Numeric_Value=00000000025}', "");
Error('\p{Nv= 0002/a/5}');
Error('\P{Nv= 0002/a/5}');
Expect(1, 12885, '\p{Nv=+00000025}', "");
Expect(0, 12885, '\p{^Nv=+00000025}', "");
Expect(0, 12885, '\P{Nv=+00000025}', "");
Expect(1, 12885, '\P{^Nv=+00000025}', "");
Expect(0, 12884, '\p{Nv=+00000025}', "");
Expect(1, 12884, '\p{^Nv=+00000025}', "");
Expect(1, 12884, '\P{Nv=+00000025}', "");
Expect(0, 12884, '\P{^Nv=+00000025}', "");
Error('\p{Is_Numeric_Value=/a/ _000_000 000-25}');
Error('\P{Is_Numeric_Value=/a/ _000_000 000-25}');
Expect(1, 12885, '\p{Is_Numeric_Value:	000000002_5}', "");
Expect(0, 12885, '\p{^Is_Numeric_Value:	000000002_5}', "");
Expect(0, 12885, '\P{Is_Numeric_Value:	000000002_5}', "");
Expect(1, 12885, '\P{^Is_Numeric_Value:	000000002_5}', "");
Expect(0, 12884, '\p{Is_Numeric_Value:	000000002_5}', "");
Expect(1, 12884, '\p{^Is_Numeric_Value:	000000002_5}', "");
Expect(1, 12884, '\P{Is_Numeric_Value:	000000002_5}', "");
Expect(0, 12884, '\P{^Is_Numeric_Value:	000000002_5}', "");
Error('\p{Is_Nv=-/a/0 0	0-25}');
Error('\P{Is_Nv=-/a/0 0	0-25}');
Expect(1, 12885, '\p{Is_Nv:0000025}', "");
Expect(0, 12885, '\p{^Is_Nv:0000025}', "");
Expect(0, 12885, '\P{Is_Nv:0000025}', "");
Expect(1, 12885, '\P{^Is_Nv:0000025}', "");
Expect(0, 12884, '\p{Is_Nv:0000025}', "");
Expect(1, 12884, '\p{^Is_Nv:0000025}', "");
Expect(1, 12884, '\P{Is_Nv:0000025}', "");
Expect(0, 12884, '\P{^Is_Nv:0000025}', "");
Error('\p{Numeric_Value=00_0028:=}');
Error('\P{Numeric_Value=00_0028:=}');
Expect(1, 12888, '\p{Numeric_Value=000028}', "");
Expect(0, 12888, '\p{^Numeric_Value=000028}', "");
Expect(0, 12888, '\P{Numeric_Value=000028}', "");
Expect(1, 12888, '\P{^Numeric_Value=000028}', "");
Expect(0, 12887, '\p{Numeric_Value=000028}', "");
Expect(1, 12887, '\p{^Numeric_Value=000028}', "");
Expect(1, 12887, '\P{Numeric_Value=000028}', "");
Expect(0, 12887, '\P{^Numeric_Value=000028}', "");
Error('\p{Nv=-/a/028}');
Error('\P{Nv=-/a/028}');
Expect(1, 12888, '\p{Nv=0000002_8}', "");
Expect(0, 12888, '\p{^Nv=0000002_8}', "");
Expect(0, 12888, '\P{Nv=0000002_8}', "");
Expect(1, 12888, '\P{^Nv=0000002_8}', "");
Expect(0, 12887, '\p{Nv=0000002_8}', "");
Expect(1, 12887, '\p{^Nv=0000002_8}', "");
Expect(1, 12887, '\P{Nv=0000002_8}', "");
Expect(0, 12887, '\P{^Nv=0000002_8}', "");
Error('\p{Is_Numeric_Value= 	2-8:=}');
Error('\P{Is_Numeric_Value= 	2-8:=}');
Expect(1, 12888, '\p{Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(0, 12888, '\p{^Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(0, 12888, '\P{Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(1, 12888, '\P{^Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(0, 12887, '\p{Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(1, 12887, '\p{^Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(1, 12887, '\P{Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Expect(0, 12887, '\P{^Is_Numeric_Value=0_0_0_0_0_0_00028}', "");
Error('\p{Is_Nv= 	02/a/8}');
Error('\P{Is_Nv= 	02/a/8}');
Expect(1, 12888, '\p{Is_Nv=00000028}', "");
Expect(0, 12888, '\p{^Is_Nv=00000028}', "");
Expect(0, 12888, '\P{Is_Nv=00000028}', "");
Expect(1, 12888, '\P{^Is_Nv=00000028}', "");
Expect(0, 12887, '\p{Is_Nv=00000028}', "");
Expect(1, 12887, '\p{^Is_Nv=00000028}', "");
Expect(1, 12887, '\P{Is_Nv=00000028}', "");
Expect(0, 12887, '\P{^Is_Nv=00000028}', "");
Error('\p{Numeric_Value= /a/0007/0000000002}');
Error('\P{Numeric_Value= /a/0007/0000000002}');
Expect(1, 3885, '\p{Numeric_Value=007/000002}', "");
Expect(0, 3885, '\p{^Numeric_Value=007/000002}', "");
Expect(0, 3885, '\P{Numeric_Value=007/000002}', "");
Expect(1, 3885, '\P{^Numeric_Value=007/000002}', "");
Expect(0, 3884, '\p{Numeric_Value=007/000002}', "");
Expect(1, 3884, '\p{^Numeric_Value=007/000002}', "");
Expect(1, 3884, '\P{Numeric_Value=007/000002}', "");
Expect(0, 3884, '\P{^Numeric_Value=007/000002}', "");
Expect(1, 3885, '\p{Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Numeric_Value=3.500}', "");
Error('\p{Nv::=		7/000000002}');
Error('\P{Nv::=		7/000000002}');
Expect(1, 3885, '\p{Nv:	+7/002}', "");
Expect(0, 3885, '\p{^Nv:	+7/002}', "");
Expect(0, 3885, '\P{Nv:	+7/002}', "");
Expect(1, 3885, '\P{^Nv:	+7/002}', "");
Expect(0, 3884, '\p{Nv:	+7/002}', "");
Expect(1, 3884, '\p{^Nv:	+7/002}', "");
Expect(1, 3884, '\P{Nv:	+7/002}', "");
Expect(0, 3884, '\P{^Nv:	+7/002}', "");
Expect(1, 3885, '\p{Nv=3.500}', "");
Expect(0, 3885, '\p{^Nv=3.500}', "");
Expect(0, 3885, '\P{Nv=3.500}', "");
Expect(1, 3885, '\P{^Nv=3.500}', "");
Expect(0, 3884, '\p{Nv=3.500}', "");
Expect(1, 3884, '\p{^Nv=3.500}', "");
Expect(1, 3884, '\P{Nv=3.500}', "");
Expect(0, 3884, '\P{^Nv=3.500}', "");
Error('\p{Is_Numeric_Value=_ 007/000002/a/}');
Error('\P{Is_Numeric_Value=_ 007/000002/a/}');
Expect(1, 3885, '\p{Is_Numeric_Value=007/0002}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=007/0002}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=007/0002}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=007/0002}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=007/0002}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=007/0002}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=007/0002}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=007/0002}', "");
Expect(1, 3885, '\p{Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=3.500}', "");
Error('\p{Is_Nv=:=_007/000000002}');
Error('\P{Is_Nv=:=_007/000000002}');
Expect(1, 3885, '\p{Is_Nv=000007/0000000002}', "");
Expect(0, 3885, '\p{^Is_Nv=000007/0000000002}', "");
Expect(0, 3885, '\P{Is_Nv=000007/0000000002}', "");
Expect(1, 3885, '\P{^Is_Nv=000007/0000000002}', "");
Expect(0, 3884, '\p{Is_Nv=000007/0000000002}', "");
Expect(1, 3884, '\p{^Is_Nv=000007/0000000002}', "");
Expect(1, 3884, '\P{Is_Nv=000007/0000000002}', "");
Expect(0, 3884, '\P{^Is_Nv=000007/0000000002}', "");
Expect(1, 3885, '\p{Is_Nv=3.500}', "");
Expect(0, 3885, '\p{^Is_Nv=3.500}', "");
Expect(0, 3885, '\P{Is_Nv=3.500}', "");
Expect(1, 3885, '\P{^Is_Nv=3.500}', "");
Expect(0, 3884, '\p{Is_Nv=3.500}', "");
Expect(1, 3884, '\p{^Is_Nv=3.500}', "");
Expect(1, 3884, '\P{Is_Nv=3.500}', "");
Expect(0, 3884, '\P{^Is_Nv=3.500}', "");
Error('\p{Numeric_Value=/a/		9/0002}');
Error('\P{Numeric_Value=/a/		9/0002}');
Expect(1, 3886, '\p{Numeric_Value=+0000000009/02}', "");
Expect(0, 3886, '\p{^Numeric_Value=+0000000009/02}', "");
Expect(0, 3886, '\P{Numeric_Value=+0000000009/02}', "");
Expect(1, 3886, '\P{^Numeric_Value=+0000000009/02}', "");
Expect(0, 3885, '\p{Numeric_Value=+0000000009/02}', "");
Expect(1, 3885, '\p{^Numeric_Value=+0000000009/02}', "");
Expect(1, 3885, '\P{Numeric_Value=+0000000009/02}', "");
Expect(0, 3885, '\P{^Numeric_Value=+0000000009/02}', "");
Expect(1, 3886, '\p{Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Numeric_Value=4.500}', "");
Error('\p{Nv=	+09/0000000002:=}');
Error('\P{Nv=	+09/0000000002:=}');
Expect(1, 3886, '\p{Nv=00009/2}', "");
Expect(0, 3886, '\p{^Nv=00009/2}', "");
Expect(0, 3886, '\P{Nv=00009/2}', "");
Expect(1, 3886, '\P{^Nv=00009/2}', "");
Expect(0, 3885, '\p{Nv=00009/2}', "");
Expect(1, 3885, '\p{^Nv=00009/2}', "");
Expect(1, 3885, '\P{Nv=00009/2}', "");
Expect(0, 3885, '\P{^Nv=00009/2}', "");
Expect(1, 3886, '\p{Nv=4.500}', "");
Expect(0, 3886, '\p{^Nv=4.500}', "");
Expect(0, 3886, '\P{Nv=4.500}', "");
Expect(1, 3886, '\P{^Nv=4.500}', "");
Expect(0, 3885, '\p{Nv=4.500}', "");
Expect(1, 3885, '\p{^Nv=4.500}', "");
Expect(1, 3885, '\P{Nv=4.500}', "");
Expect(0, 3885, '\P{^Nv=4.500}', "");
Error('\p{Is_Numeric_Value=- +0000009/0002/a/}');
Error('\P{Is_Numeric_Value=- +0000009/0002/a/}');
Expect(1, 3886, '\p{Is_Numeric_Value=000009/00000002}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=000009/00000002}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=000009/00000002}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=000009/00000002}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=000009/00000002}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=000009/00000002}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=000009/00000002}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=000009/00000002}', "");
Expect(1, 3886, '\p{Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=4.500}', "");
Error('\p{Is_Nv=	+09/00000002:=}');
Error('\P{Is_Nv=	+09/00000002:=}');
Expect(1, 3886, '\p{Is_Nv=0009/0000002}', "");
Expect(0, 3886, '\p{^Is_Nv=0009/0000002}', "");
Expect(0, 3886, '\P{Is_Nv=0009/0000002}', "");
Expect(1, 3886, '\P{^Is_Nv=0009/0000002}', "");
Expect(0, 3885, '\p{Is_Nv=0009/0000002}', "");
Expect(1, 3885, '\p{^Is_Nv=0009/0000002}', "");
Expect(1, 3885, '\P{Is_Nv=0009/0000002}', "");
Expect(0, 3885, '\P{^Is_Nv=0009/0000002}', "");
Expect(1, 3886, '\p{Is_Nv=4.500}', "");
Expect(0, 3886, '\p{^Is_Nv=4.500}', "");
Expect(0, 3886, '\P{Is_Nv=4.500}', "");
Expect(1, 3886, '\P{^Is_Nv=4.500}', "");
Expect(0, 3885, '\p{Is_Nv=4.500}', "");
Expect(1, 3885, '\p{^Is_Nv=4.500}', "");
Expect(1, 3885, '\P{Is_Nv=4.500}', "");
Expect(0, 3885, '\P{^Is_Nv=4.500}', "");
Error('\p{Numeric_Value=	 0_0/a/0_0 0-040}');
Error('\P{Numeric_Value=	 0_0/a/0_0 0-040}');
Expect(1, 4981, '\p{Numeric_Value=+0000000040}', "");
Expect(0, 4981, '\p{^Numeric_Value=+0000000040}', "");
Expect(0, 4981, '\P{Numeric_Value=+0000000040}', "");
Expect(1, 4981, '\P{^Numeric_Value=+0000000040}', "");
Expect(0, 4980, '\p{Numeric_Value=+0000000040}', "");
Expect(1, 4980, '\p{^Numeric_Value=+0000000040}', "");
Expect(1, 4980, '\P{Numeric_Value=+0000000040}', "");
Expect(0, 4980, '\P{^Numeric_Value=+0000000040}', "");
Error('\p{Nv=/a/-	00000040}');
Error('\P{Nv=/a/-	00000040}');
Expect(1, 4981, '\p{Nv=40}', "");
Expect(0, 4981, '\p{^Nv=40}', "");
Expect(0, 4981, '\P{Nv=40}', "");
Expect(1, 4981, '\P{^Nv=40}', "");
Expect(0, 4980, '\p{Nv=40}', "");
Expect(1, 4980, '\p{^Nv=40}', "");
Expect(1, 4980, '\P{Nv=40}', "");
Expect(0, 4980, '\P{^Nv=40}', "");
Error('\p{Is_Numeric_Value::=__+040}');
Error('\P{Is_Numeric_Value::=__+040}');
Expect(1, 4981, '\p{Is_Numeric_Value=00000040}', "");
Expect(0, 4981, '\p{^Is_Numeric_Value=00000040}', "");
Expect(0, 4981, '\P{Is_Numeric_Value=00000040}', "");
Expect(1, 4981, '\P{^Is_Numeric_Value=00000040}', "");
Expect(0, 4980, '\p{Is_Numeric_Value=00000040}', "");
Expect(1, 4980, '\p{^Is_Numeric_Value=00000040}', "");
Expect(1, 4980, '\P{Is_Numeric_Value=00000040}', "");
Expect(0, 4980, '\P{^Is_Numeric_Value=00000040}', "");
Error('\p{Is_Nv= 	+00000040/a/}');
Error('\P{Is_Nv= 	+00000040/a/}');
Expect(1, 4981, '\p{Is_Nv=000000040}', "");
Expect(0, 4981, '\p{^Is_Nv=000000040}', "");
Expect(0, 4981, '\P{Is_Nv=000000040}', "");
Expect(1, 4981, '\P{^Is_Nv=000000040}', "");
Expect(0, 4980, '\p{Is_Nv=000000040}', "");
Expect(1, 4980, '\p{^Is_Nv=000000040}', "");
Expect(1, 4980, '\P{Is_Nv=000000040}', "");
Expect(0, 4980, '\P{^Is_Nv=000000040}', "");
Error('\p{Numeric_Value=_:=0 0	0	0	0_03000}');
Error('\P{Numeric_Value=_:=0 0	0	0	0_03000}');
Expect(1, 65828, '\p{Numeric_Value=3_0_00}', "");
Expect(0, 65828, '\p{^Numeric_Value=3_0_00}', "");
Expect(0, 65828, '\P{Numeric_Value=3_0_00}', "");
Expect(1, 65828, '\P{^Numeric_Value=3_0_00}', "");
Expect(0, 65827, '\p{Numeric_Value=3_0_00}', "");
Expect(1, 65827, '\p{^Numeric_Value=3_0_00}', "");
Expect(1, 65827, '\P{Numeric_Value=3_0_00}', "");
Expect(0, 65827, '\P{^Numeric_Value=3_0_00}', "");
Error('\p{Nv=- 0000003000:=}');
Error('\P{Nv=- 0000003000:=}');
Expect(1, 65828, '\p{Nv=0_0_0_0_3_0_00}', "");
Expect(0, 65828, '\p{^Nv=0_0_0_0_3_0_00}', "");
Expect(0, 65828, '\P{Nv=0_0_0_0_3_0_00}', "");
Expect(1, 65828, '\P{^Nv=0_0_0_0_3_0_00}', "");
Expect(0, 65827, '\p{Nv=0_0_0_0_3_0_00}', "");
Expect(1, 65827, '\p{^Nv=0_0_0_0_3_0_00}', "");
Expect(1, 65827, '\P{Nv=0_0_0_0_3_0_00}', "");
Expect(0, 65827, '\P{^Nv=0_0_0_0_3_0_00}', "");
Error('\p{Is_Numeric_Value=_-+0003000:=}');
Error('\P{Is_Numeric_Value=_-+0003000:=}');
Expect(1, 65828, '\p{Is_Numeric_Value=+3000}', "");
Expect(0, 65828, '\p{^Is_Numeric_Value=+3000}', "");
Expect(0, 65828, '\P{Is_Numeric_Value=+3000}', "");
Expect(1, 65828, '\P{^Is_Numeric_Value=+3000}', "");
Expect(0, 65827, '\p{Is_Numeric_Value=+3000}', "");
Expect(1, 65827, '\p{^Is_Numeric_Value=+3000}', "");
Expect(1, 65827, '\P{Is_Numeric_Value=+3000}', "");
Expect(0, 65827, '\P{^Is_Numeric_Value=+3000}', "");
Error('\p{Is_Nv=:= _00000003000}');
Error('\P{Is_Nv=:= _00000003000}');
Expect(1, 65828, '\p{Is_Nv=003000}', "");
Expect(0, 65828, '\p{^Is_Nv=003000}', "");
Expect(0, 65828, '\P{Is_Nv=003000}', "");
Expect(1, 65828, '\P{^Is_Nv=003000}', "");
Expect(0, 65827, '\p{Is_Nv=003000}', "");
Expect(1, 65827, '\p{^Is_Nv=003000}', "");
Expect(1, 65827, '\P{Is_Nv=003000}', "");
Expect(0, 65827, '\P{^Is_Nv=003000}', "");
Error('\p{Numeric_Value=_-+000000000800:=}');
Error('\P{Numeric_Value=_-+000000000800:=}');
Expect(1, 65824, '\p{Numeric_Value=000000800}', "");
Expect(0, 65824, '\p{^Numeric_Value=000000800}', "");
Expect(0, 65824, '\P{Numeric_Value=000000800}', "");
Expect(1, 65824, '\P{^Numeric_Value=000000800}', "");
Expect(0, 65823, '\p{Numeric_Value=000000800}', "");
Expect(1, 65823, '\p{^Numeric_Value=000000800}', "");
Expect(1, 65823, '\P{Numeric_Value=000000800}', "");
Expect(0, 65823, '\P{^Numeric_Value=000000800}', "");
Error('\p{Nv=_0000800/a/}');
Error('\P{Nv=_0000800/a/}');
Expect(1, 65824, '\p{Nv=+80_0}', "");
Expect(0, 65824, '\p{^Nv=+80_0}', "");
Expect(0, 65824, '\P{Nv=+80_0}', "");
Expect(1, 65824, '\P{^Nv=+80_0}', "");
Expect(0, 65823, '\p{Nv=+80_0}', "");
Expect(1, 65823, '\p{^Nv=+80_0}', "");
Expect(1, 65823, '\P{Nv=+80_0}', "");
Expect(0, 65823, '\P{^Nv=+80_0}', "");
Error('\p{Is_Numeric_Value=- +0:=00 0-00-0800}');
Error('\P{Is_Numeric_Value=- +0:=00 0-00-0800}');
Expect(1, 65824, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65824, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65824, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65824, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65823, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65823, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65823, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65823, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_00800}', "");
Error('\p{Is_Nv=:= +000000000800}');
Error('\P{Is_Nv=:= +000000000800}');
Expect(1, 65824, '\p{Is_Nv:   800}', "");
Expect(0, 65824, '\p{^Is_Nv:   800}', "");
Expect(0, 65824, '\P{Is_Nv:   800}', "");
Expect(1, 65824, '\P{^Is_Nv:   800}', "");
Expect(0, 65823, '\p{Is_Nv:   800}', "");
Expect(1, 65823, '\p{^Is_Nv:   800}', "");
Expect(1, 65823, '\P{Is_Nv:   800}', "");
Expect(0, 65823, '\P{^Is_Nv:   800}', "");
Error('\p{Numeric_Value=_ 0009000/a/}');
Error('\P{Numeric_Value=_ 0009000/a/}');
Expect(1, 65834, '\p{Numeric_Value=+0_0_0_9_000}', "");
Expect(0, 65834, '\p{^Numeric_Value=+0_0_0_9_000}', "");
Expect(0, 65834, '\P{Numeric_Value=+0_0_0_9_000}', "");
Expect(1, 65834, '\P{^Numeric_Value=+0_0_0_9_000}', "");
Expect(0, 65833, '\p{Numeric_Value=+0_0_0_9_000}', "");
Expect(1, 65833, '\p{^Numeric_Value=+0_0_0_9_000}', "");
Expect(1, 65833, '\P{Numeric_Value=+0_0_0_9_000}', "");
Expect(0, 65833, '\P{^Numeric_Value=+0_0_0_9_000}', "");
Error('\p{Nv: :=00000-009000}');
Error('\P{Nv: :=00000-009000}');
Expect(1, 65834, '\p{Nv=0_0_9_000}', "");
Expect(0, 65834, '\p{^Nv=0_0_9_000}', "");
Expect(0, 65834, '\P{Nv=0_0_9_000}', "");
Expect(1, 65834, '\P{^Nv=0_0_9_000}', "");
Expect(0, 65833, '\p{Nv=0_0_9_000}', "");
Expect(1, 65833, '\p{^Nv=0_0_9_000}', "");
Expect(1, 65833, '\P{Nv=0_0_9_000}', "");
Expect(0, 65833, '\P{^Nv=0_0_9_000}', "");
Error('\p{Is_Numeric_Value=_:=00_00-00 00 09-000}');
Error('\P{Is_Numeric_Value=_:=00_00-00 00 09-000}');
Expect(1, 65834, '\p{Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(0, 65834, '\p{^Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(0, 65834, '\P{Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(1, 65834, '\P{^Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(0, 65833, '\p{Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(1, 65833, '\p{^Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(1, 65833, '\P{Is_Numeric_Value=+0_0_0_0_9_000}', "");
Expect(0, 65833, '\P{^Is_Numeric_Value=+0_0_0_0_9_000}', "");
Error('\p{Is_Nv=--900	0:=}');
Error('\P{Is_Nv=--900	0:=}');
Expect(1, 65834, '\p{Is_Nv=000_090_00}', "");
Expect(0, 65834, '\p{^Is_Nv=000_090_00}', "");
Expect(0, 65834, '\P{Is_Nv=000_090_00}', "");
Expect(1, 65834, '\P{^Is_Nv=000_090_00}', "");
Expect(0, 65833, '\p{Is_Nv=000_090_00}', "");
Expect(1, 65833, '\p{^Is_Nv=000_090_00}', "");
Expect(1, 65833, '\P{Is_Nv=000_090_00}', "");
Expect(0, 65833, '\P{^Is_Nv=000_090_00}', "");
Error('\p{Numeric_Value=/a/-_000014}');
Error('\P{Numeric_Value=/a/-_000014}');
Expect(1, 9325, '\p{Numeric_Value:   014}', "");
Expect(0, 9325, '\p{^Numeric_Value:   014}', "");
Expect(0, 9325, '\P{Numeric_Value:   014}', "");
Expect(1, 9325, '\P{^Numeric_Value:   014}', "");
Expect(0, 9324, '\p{Numeric_Value:   014}', "");
Expect(1, 9324, '\p{^Numeric_Value:   014}', "");
Expect(1, 9324, '\P{Numeric_Value:   014}', "");
Expect(0, 9324, '\P{^Numeric_Value:   014}', "");
Error('\p{Nv=_	000_001 4:=}');
Error('\P{Nv=_	000_001 4:=}');
Expect(1, 9325, '\p{Nv=00000000014}', "");
Expect(0, 9325, '\p{^Nv=00000000014}', "");
Expect(0, 9325, '\P{Nv=00000000014}', "");
Expect(1, 9325, '\P{^Nv=00000000014}', "");
Expect(0, 9324, '\p{Nv=00000000014}', "");
Expect(1, 9324, '\p{^Nv=00000000014}', "");
Expect(1, 9324, '\P{Nv=00000000014}', "");
Expect(0, 9324, '\P{^Nv=00000000014}', "");
Error('\p{Is_Numeric_Value=-:=0001 4}');
Error('\P{Is_Numeric_Value=-:=0001 4}');
Expect(1, 9325, '\p{Is_Numeric_Value=+000_000_001_4}', "");
Expect(0, 9325, '\p{^Is_Numeric_Value=+000_000_001_4}', "");
Expect(0, 9325, '\P{Is_Numeric_Value=+000_000_001_4}', "");
Expect(1, 9325, '\P{^Is_Numeric_Value=+000_000_001_4}', "");
Expect(0, 9324, '\p{Is_Numeric_Value=+000_000_001_4}', "");
Expect(1, 9324, '\p{^Is_Numeric_Value=+000_000_001_4}', "");
Expect(1, 9324, '\P{Is_Numeric_Value=+000_000_001_4}', "");
Expect(0, 9324, '\P{^Is_Numeric_Value=+000_000_001_4}', "");
Error('\p{Is_Nv=/a/	_01-4}');
Error('\P{Is_Nv=/a/	_01-4}');
Expect(1, 9325, '\p{Is_Nv=+00_00_01_4}', "");
Expect(0, 9325, '\p{^Is_Nv=+00_00_01_4}', "");
Expect(0, 9325, '\P{Is_Nv=+00_00_01_4}', "");
Expect(1, 9325, '\P{^Is_Nv=+00_00_01_4}', "");
Expect(0, 9324, '\p{Is_Nv=+00_00_01_4}', "");
Expect(1, 9324, '\p{^Is_Nv=+00_00_01_4}', "");
Expect(1, 9324, '\P{Is_Nv=+00_00_01_4}', "");
Expect(0, 9324, '\P{^Is_Nv=+00_00_01_4}', "");
Error('\p{Numeric_Value=_+006000:=0}');
Error('\P{Numeric_Value=_+006000:=0}');
Expect(1, 65840, '\p{Numeric_Value=+0000_0600_00}', "");
Expect(0, 65840, '\p{^Numeric_Value=+0000_0600_00}', "");
Expect(0, 65840, '\P{Numeric_Value=+0000_0600_00}', "");
Expect(1, 65840, '\P{^Numeric_Value=+0000_0600_00}', "");
Expect(0, 65839, '\p{Numeric_Value=+0000_0600_00}', "");
Expect(1, 65839, '\p{^Numeric_Value=+0000_0600_00}', "");
Expect(1, 65839, '\P{Numeric_Value=+0000_0600_00}', "");
Expect(0, 65839, '\P{^Numeric_Value=+0000_0600_00}', "");
Error('\p{Nv=	0 0-6	0:=0-00}');
Error('\P{Nv=	0 0-6	0:=0-00}');
Expect(1, 65840, '\p{Nv=+60000}', "");
Expect(0, 65840, '\p{^Nv=+60000}', "");
Expect(0, 65840, '\P{Nv=+60000}', "");
Expect(1, 65840, '\P{^Nv=+60000}', "");
Expect(0, 65839, '\p{Nv=+60000}', "");
Expect(1, 65839, '\p{^Nv=+60000}', "");
Expect(1, 65839, '\P{Nv=+60000}', "");
Expect(0, 65839, '\P{^Nv=+60000}', "");
Error('\p{Is_Numeric_Value:  /a/00000000060000}');
Error('\P{Is_Numeric_Value:  /a/00000000060000}');
Expect(1, 65840, '\p{Is_Numeric_Value=00_06_00_00}', "");
Expect(0, 65840, '\p{^Is_Numeric_Value=00_06_00_00}', "");
Expect(0, 65840, '\P{Is_Numeric_Value=00_06_00_00}', "");
Expect(1, 65840, '\P{^Is_Numeric_Value=00_06_00_00}', "");
Expect(0, 65839, '\p{Is_Numeric_Value=00_06_00_00}', "");
Expect(1, 65839, '\p{^Is_Numeric_Value=00_06_00_00}', "");
Expect(1, 65839, '\P{Is_Numeric_Value=00_06_00_00}', "");
Expect(0, 65839, '\P{^Is_Numeric_Value=00_06_00_00}', "");
Error('\p{Is_Nv:__+0/a/0 0-0 0 60000}');
Error('\P{Is_Nv:__+0/a/0 0-0 0 60000}');
Expect(1, 65840, '\p{Is_Nv=0000006000_0}', "");
Expect(0, 65840, '\p{^Is_Nv=0000006000_0}', "");
Expect(0, 65840, '\P{Is_Nv=0000006000_0}', "");
Expect(1, 65840, '\P{^Is_Nv=0000006000_0}', "");
Expect(0, 65839, '\p{Is_Nv=0000006000_0}', "");
Expect(1, 65839, '\p{^Is_Nv=0000006000_0}', "");
Expect(1, 65839, '\P{Is_Nv=0000006000_0}', "");
Expect(0, 65839, '\P{^Is_Nv=0000006000_0}', "");
Error('\p{Numeric_Value=__49:=}');
Error('\P{Numeric_Value=__49:=}');
Expect(1, 12990, '\p{Numeric_Value=+00_00_00_00_04_9}', "");
Expect(0, 12990, '\p{^Numeric_Value=+00_00_00_00_04_9}', "");
Expect(0, 12990, '\P{Numeric_Value=+00_00_00_00_04_9}', "");
Expect(1, 12990, '\P{^Numeric_Value=+00_00_00_00_04_9}', "");
Expect(0, 12989, '\p{Numeric_Value=+00_00_00_00_04_9}', "");
Expect(1, 12989, '\p{^Numeric_Value=+00_00_00_00_04_9}', "");
Expect(1, 12989, '\P{Numeric_Value=+00_00_00_00_04_9}', "");
Expect(0, 12989, '\P{^Numeric_Value=+00_00_00_00_04_9}', "");
Error('\p{Nv=:=+0000049}');
Error('\P{Nv=:=+0000049}');
Expect(1, 12990, '\p{Nv=4_9}', "");
Expect(0, 12990, '\p{^Nv=4_9}', "");
Expect(0, 12990, '\P{Nv=4_9}', "");
Expect(1, 12990, '\P{^Nv=4_9}', "");
Expect(0, 12989, '\p{Nv=4_9}', "");
Expect(1, 12989, '\p{^Nv=4_9}', "");
Expect(1, 12989, '\P{Nv=4_9}', "");
Expect(0, 12989, '\P{^Nv=4_9}', "");
Error('\p{Is_Numeric_Value=_00049:=}');
Error('\P{Is_Numeric_Value=_00049:=}');
Expect(1, 12990, '\p{Is_Numeric_Value=000000049}', "");
Expect(0, 12990, '\p{^Is_Numeric_Value=000000049}', "");
Expect(0, 12990, '\P{Is_Numeric_Value=000000049}', "");
Expect(1, 12990, '\P{^Is_Numeric_Value=000000049}', "");
Expect(0, 12989, '\p{Is_Numeric_Value=000000049}', "");
Expect(1, 12989, '\p{^Is_Numeric_Value=000000049}', "");
Expect(1, 12989, '\P{Is_Numeric_Value=000000049}', "");
Expect(0, 12989, '\P{^Is_Numeric_Value=000000049}', "");
Error('\p{Is_Nv=--0049/a/}');
Error('\P{Is_Nv=--0049/a/}');
Expect(1, 12990, '\p{Is_Nv=+0004_9}', "");
Expect(0, 12990, '\p{^Is_Nv=+0004_9}', "");
Expect(0, 12990, '\P{Is_Nv=+0004_9}', "");
Expect(1, 12990, '\P{^Is_Nv=+0004_9}', "");
Expect(0, 12989, '\p{Is_Nv=+0004_9}', "");
Expect(1, 12989, '\p{^Is_Nv=+0004_9}', "");
Expect(1, 12989, '\P{Is_Nv=+0004_9}', "");
Expect(0, 12989, '\P{^Is_Nv=+0004_9}', "");
Error('\p{Numeric_Value=- +000000024/a/}');
Error('\P{Numeric_Value=- +000000024/a/}');
Expect(1, 12884, '\p{Numeric_Value=+00024}', "");
Expect(0, 12884, '\p{^Numeric_Value=+00024}', "");
Expect(0, 12884, '\P{Numeric_Value=+00024}', "");
Expect(1, 12884, '\P{^Numeric_Value=+00024}', "");
Expect(0, 12883, '\p{Numeric_Value=+00024}', "");
Expect(1, 12883, '\p{^Numeric_Value=+00024}', "");
Expect(1, 12883, '\P{Numeric_Value=+00024}', "");
Expect(0, 12883, '\P{^Numeric_Value=+00024}', "");
Error('\p{Nv=-/a/024}');
Error('\P{Nv=-/a/024}');
Expect(1, 12884, '\p{Nv=+0_0_0_0_0_0_0_24}', "");
Expect(0, 12884, '\p{^Nv=+0_0_0_0_0_0_0_24}', "");
Expect(0, 12884, '\P{Nv=+0_0_0_0_0_0_0_24}', "");
Expect(1, 12884, '\P{^Nv=+0_0_0_0_0_0_0_24}', "");
Expect(0, 12883, '\p{Nv=+0_0_0_0_0_0_0_24}', "");
Expect(1, 12883, '\p{^Nv=+0_0_0_0_0_0_0_24}', "");
Expect(1, 12883, '\P{Nv=+0_0_0_0_0_0_0_24}', "");
Expect(0, 12883, '\P{^Nv=+0_0_0_0_0_0_0_24}', "");
Error('\p{Is_Numeric_Value= 2/a/4}');
Error('\P{Is_Numeric_Value= 2/a/4}');
Expect(1, 12884, '\p{Is_Numeric_Value=0000_0002_4}', "");
Expect(0, 12884, '\p{^Is_Numeric_Value=0000_0002_4}', "");
Expect(0, 12884, '\P{Is_Numeric_Value=0000_0002_4}', "");
Expect(1, 12884, '\P{^Is_Numeric_Value=0000_0002_4}', "");
Expect(0, 12883, '\p{Is_Numeric_Value=0000_0002_4}', "");
Expect(1, 12883, '\p{^Is_Numeric_Value=0000_0002_4}', "");
Expect(1, 12883, '\P{Is_Numeric_Value=0000_0002_4}', "");
Expect(0, 12883, '\P{^Is_Numeric_Value=0000_0002_4}', "");
Error('\p{Is_Nv=	-00024/a/}');
Error('\P{Is_Nv=	-00024/a/}');
Expect(1, 12884, '\p{Is_Nv=000024}', "");
Expect(0, 12884, '\p{^Is_Nv=000024}', "");
Expect(0, 12884, '\P{Is_Nv=000024}', "");
Expect(1, 12884, '\P{^Is_Nv=000024}', "");
Expect(0, 12883, '\p{Is_Nv=000024}', "");
Expect(1, 12883, '\p{^Is_Nv=000024}', "");
Expect(1, 12883, '\P{Is_Nv=000024}', "");
Expect(0, 12883, '\P{^Is_Nv=000024}', "");
Error('\p{Numeric_Value=--001/00000004:=}');
Error('\P{Numeric_Value=--001/00000004:=}');
Expect(1, 188, '\p{Numeric_Value=0000001/00004}', "");
Expect(0, 188, '\p{^Numeric_Value=0000001/00004}', "");
Expect(0, 188, '\P{Numeric_Value=0000001/00004}', "");
Expect(1, 188, '\P{^Numeric_Value=0000001/00004}', "");
Expect(0, 187, '\p{Numeric_Value=0000001/00004}', "");
Expect(1, 187, '\p{^Numeric_Value=0000001/00004}', "");
Expect(1, 187, '\P{Numeric_Value=0000001/00004}', "");
Expect(0, 187, '\P{^Numeric_Value=0000001/00004}', "");
Error('\p{Numeric_Value=0.3}');
Error('\P{Numeric_Value=0.3}');
Expect(1, 188, '\p{Numeric_Value=0.250}', "");
Expect(0, 188, '\p{^Numeric_Value=0.250}', "");
Expect(0, 188, '\P{Numeric_Value=0.250}', "");
Expect(1, 188, '\P{^Numeric_Value=0.250}', "");
Expect(0, 187, '\p{Numeric_Value=0.250}', "");
Expect(1, 187, '\p{^Numeric_Value=0.250}', "");
Expect(1, 187, '\P{Numeric_Value=0.250}', "");
Expect(0, 187, '\P{^Numeric_Value=0.250}', "");
Error('\p{Nv=:=	 00000001/00004}');
Error('\P{Nv=:=	 00000001/00004}');
Expect(1, 188, '\p{Nv=+000000001/00000004}', "");
Expect(0, 188, '\p{^Nv=+000000001/00000004}', "");
Expect(0, 188, '\P{Nv=+000000001/00000004}', "");
Expect(1, 188, '\P{^Nv=+000000001/00000004}', "");
Expect(0, 187, '\p{Nv=+000000001/00000004}', "");
Expect(1, 187, '\p{^Nv=+000000001/00000004}', "");
Expect(1, 187, '\P{Nv=+000000001/00000004}', "");
Expect(0, 187, '\P{^Nv=+000000001/00000004}', "");
Error('\p{Nv=0.3}');
Error('\P{Nv=0.3}');
Expect(1, 188, '\p{Nv=0.250}', "");
Expect(0, 188, '\p{^Nv=0.250}', "");
Expect(0, 188, '\P{Nv=0.250}', "");
Expect(1, 188, '\P{^Nv=0.250}', "");
Expect(0, 187, '\p{Nv=0.250}', "");
Expect(1, 187, '\p{^Nv=0.250}', "");
Expect(1, 187, '\P{Nv=0.250}', "");
Expect(0, 187, '\P{^Nv=0.250}', "");
Error('\p{Is_Numeric_Value= :=0000001/04}');
Error('\P{Is_Numeric_Value= :=0000001/04}');
Expect(1, 188, '\p{Is_Numeric_Value=+001/0004}', "");
Expect(0, 188, '\p{^Is_Numeric_Value=+001/0004}', "");
Expect(0, 188, '\P{Is_Numeric_Value=+001/0004}', "");
Expect(1, 188, '\P{^Is_Numeric_Value=+001/0004}', "");
Expect(0, 187, '\p{Is_Numeric_Value=+001/0004}', "");
Expect(1, 187, '\p{^Is_Numeric_Value=+001/0004}', "");
Expect(1, 187, '\P{Is_Numeric_Value=+001/0004}', "");
Expect(0, 187, '\P{^Is_Numeric_Value=+001/0004}', "");
Error('\p{Is_Numeric_Value=0.3}');
Error('\P{Is_Numeric_Value=0.3}');
Expect(1, 188, '\p{Is_Numeric_Value=0.250}', "");
Expect(0, 188, '\p{^Is_Numeric_Value=0.250}', "");
Expect(0, 188, '\P{Is_Numeric_Value=0.250}', "");
Expect(1, 188, '\P{^Is_Numeric_Value=0.250}', "");
Expect(0, 187, '\p{Is_Numeric_Value=0.250}', "");
Expect(1, 187, '\p{^Is_Numeric_Value=0.250}', "");
Expect(1, 187, '\P{Is_Numeric_Value=0.250}', "");
Expect(0, 187, '\P{^Is_Numeric_Value=0.250}', "");
Error('\p{Is_Nv=:= _+000001/00004}');
Error('\P{Is_Nv=:= _+000001/00004}');
Expect(1, 188, '\p{Is_Nv=01/000004}', "");
Expect(0, 188, '\p{^Is_Nv=01/000004}', "");
Expect(0, 188, '\P{Is_Nv=01/000004}', "");
Expect(1, 188, '\P{^Is_Nv=01/000004}', "");
Expect(0, 187, '\p{Is_Nv=01/000004}', "");
Expect(1, 187, '\p{^Is_Nv=01/000004}', "");
Expect(1, 187, '\P{Is_Nv=01/000004}', "");
Expect(0, 187, '\P{^Is_Nv=01/000004}', "");
Error('\p{Is_Nv:   0.3}');
Error('\P{Is_Nv:   0.3}');
Expect(1, 188, '\p{Is_Nv=0.250}', "");
Expect(0, 188, '\p{^Is_Nv=0.250}', "");
Expect(0, 188, '\P{Is_Nv=0.250}', "");
Expect(1, 188, '\P{^Is_Nv=0.250}', "");
Expect(0, 187, '\p{Is_Nv=0.250}', "");
Expect(1, 187, '\p{^Is_Nv=0.250}', "");
Expect(1, 187, '\P{Is_Nv=0.250}', "");
Expect(0, 187, '\P{^Is_Nv=0.250}', "");
Error('\p{Numeric_Value=-/a/+000090000}');
Error('\P{Numeric_Value=-/a/+000090000}');
Expect(1, 65843, '\p{Numeric_Value=+00000000090000}', "");
Expect(0, 65843, '\p{^Numeric_Value=+00000000090000}', "");
Expect(0, 65843, '\P{Numeric_Value=+00000000090000}', "");
Expect(1, 65843, '\P{^Numeric_Value=+00000000090000}', "");
Expect(0, 65842, '\p{Numeric_Value=+00000000090000}', "");
Expect(1, 65842, '\p{^Numeric_Value=+00000000090000}', "");
Expect(1, 65842, '\P{Numeric_Value=+00000000090000}', "");
Expect(0, 65842, '\P{^Numeric_Value=+00000000090000}', "");
Error('\p{Nv=--00:=90	00	0}');
Error('\P{Nv=--00:=90	00	0}');
Expect(1, 65843, '\p{Nv=0090000}', "");
Expect(0, 65843, '\p{^Nv=0090000}', "");
Expect(0, 65843, '\P{Nv=0090000}', "");
Expect(1, 65843, '\P{^Nv=0090000}', "");
Expect(0, 65842, '\p{Nv=0090000}', "");
Expect(1, 65842, '\p{^Nv=0090000}', "");
Expect(1, 65842, '\P{Nv=0090000}', "");
Expect(0, 65842, '\P{^Nv=0090000}', "");
Error('\p{Is_Numeric_Value=/a/	-0000090000}');
Error('\P{Is_Numeric_Value=/a/	-0000090000}');
Expect(1, 65843, '\p{Is_Numeric_Value=0000090000}', "");
Expect(0, 65843, '\p{^Is_Numeric_Value=0000090000}', "");
Expect(0, 65843, '\P{Is_Numeric_Value=0000090000}', "");
Expect(1, 65843, '\P{^Is_Numeric_Value=0000090000}', "");
Expect(0, 65842, '\p{Is_Numeric_Value=0000090000}', "");
Expect(1, 65842, '\p{^Is_Numeric_Value=0000090000}', "");
Expect(1, 65842, '\P{Is_Numeric_Value=0000090000}', "");
Expect(0, 65842, '\P{^Is_Numeric_Value=0000090000}', "");
Error('\p{Is_Nv= /a/00000090000}');
Error('\P{Is_Nv= /a/00000090000}');
Expect(1, 65843, '\p{Is_Nv=000090000}', "");
Expect(0, 65843, '\p{^Is_Nv=000090000}', "");
Expect(0, 65843, '\P{Is_Nv=000090000}', "");
Expect(1, 65843, '\P{^Is_Nv=000090000}', "");
Expect(0, 65842, '\p{Is_Nv=000090000}', "");
Expect(1, 65842, '\p{^Is_Nv=000090000}', "");
Expect(1, 65842, '\P{Is_Nv=000090000}', "");
Expect(0, 65842, '\P{^Is_Nv=000090000}', "");
Error('\p{Numeric_Value=0/a/0-0_00-0-50000}');
Error('\P{Numeric_Value=0/a/0-0_00-0-50000}');
Expect(1, 8583, '\p{Numeric_Value=5_0_0_00}', "");
Expect(0, 8583, '\p{^Numeric_Value=5_0_0_00}', "");
Expect(0, 8583, '\P{Numeric_Value=5_0_0_00}', "");
Expect(1, 8583, '\P{^Numeric_Value=5_0_0_00}', "");
Expect(0, 8582, '\p{Numeric_Value=5_0_0_00}', "");
Expect(1, 8582, '\p{^Numeric_Value=5_0_0_00}', "");
Expect(1, 8582, '\P{Numeric_Value=5_0_0_00}', "");
Expect(0, 8582, '\P{^Numeric_Value=5_0_0_00}', "");
Error('\p{Nv=/a/_	050000}');
Error('\P{Nv=/a/_	050000}');
Expect(1, 8583, '\p{Nv=+00005000_0}', "");
Expect(0, 8583, '\p{^Nv=+00005000_0}', "");
Expect(0, 8583, '\P{Nv=+00005000_0}', "");
Expect(1, 8583, '\P{^Nv=+00005000_0}', "");
Expect(0, 8582, '\p{Nv=+00005000_0}', "");
Expect(1, 8582, '\p{^Nv=+00005000_0}', "");
Expect(1, 8582, '\P{Nv=+00005000_0}', "");
Expect(0, 8582, '\P{^Nv=+00005000_0}', "");
Error('\p{Is_Numeric_Value=/a/0005 00_00}');
Error('\P{Is_Numeric_Value=/a/0005 00_00}');
Expect(1, 8583, '\p{Is_Numeric_Value=000_000_500_00}', "");
Expect(0, 8583, '\p{^Is_Numeric_Value=000_000_500_00}', "");
Expect(0, 8583, '\P{Is_Numeric_Value=000_000_500_00}', "");
Expect(1, 8583, '\P{^Is_Numeric_Value=000_000_500_00}', "");
Expect(0, 8582, '\p{Is_Numeric_Value=000_000_500_00}', "");
Expect(1, 8582, '\p{^Is_Numeric_Value=000_000_500_00}', "");
Expect(1, 8582, '\P{Is_Numeric_Value=000_000_500_00}', "");
Expect(0, 8582, '\P{^Is_Numeric_Value=000_000_500_00}', "");
Error('\p{Is_Nv= 00050000:=}');
Error('\P{Is_Nv= 00050000:=}');
Expect(1, 8583, '\p{Is_Nv=05000_0}', "");
Expect(0, 8583, '\p{^Is_Nv=05000_0}', "");
Expect(0, 8583, '\P{Is_Nv=05000_0}', "");
Expect(1, 8583, '\P{^Is_Nv=05000_0}', "");
Expect(0, 8582, '\p{Is_Nv=05000_0}', "");
Expect(1, 8582, '\p{^Is_Nv=05000_0}', "");
Expect(1, 8582, '\P{Is_Nv=05000_0}', "");
Expect(0, 8582, '\P{^Is_Nv=05000_0}', "");
Error('\p{Numeric_Value=/a/-+00 40	00-0}');
Error('\P{Numeric_Value=/a/-+00 40	00-0}');
Expect(1, 65838, '\p{Numeric_Value=+0_0_0_4_0000}', "");
Expect(0, 65838, '\p{^Numeric_Value=+0_0_0_4_0000}', "");
Expect(0, 65838, '\P{Numeric_Value=+0_0_0_4_0000}', "");
Expect(1, 65838, '\P{^Numeric_Value=+0_0_0_4_0000}', "");
Expect(0, 65837, '\p{Numeric_Value=+0_0_0_4_0000}', "");
Expect(1, 65837, '\p{^Numeric_Value=+0_0_0_4_0000}', "");
Expect(1, 65837, '\P{Numeric_Value=+0_0_0_4_0000}', "");
Expect(0, 65837, '\P{^Numeric_Value=+0_0_0_4_0000}', "");
Error('\p{Nv=-:=+0_000_40-000}');
Error('\P{Nv=-:=+0_000_40-000}');
Expect(1, 65838, '\p{Nv=+0_4_0_0_00}', "");
Expect(0, 65838, '\p{^Nv=+0_4_0_0_00}', "");
Expect(0, 65838, '\P{Nv=+0_4_0_0_00}', "");
Expect(1, 65838, '\P{^Nv=+0_4_0_0_00}', "");
Expect(0, 65837, '\p{Nv=+0_4_0_0_00}', "");
Expect(1, 65837, '\p{^Nv=+0_4_0_0_00}', "");
Expect(1, 65837, '\P{Nv=+0_4_0_0_00}', "");
Expect(0, 65837, '\P{^Nv=+0_4_0_0_00}', "");
Error('\p{Is_Numeric_Value= :=00	00-00_00 04_0000}');
Error('\P{Is_Numeric_Value= :=00	00-00_00 04_0000}');
Expect(1, 65838, '\p{Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(0, 65838, '\p{^Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(0, 65838, '\P{Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(1, 65838, '\P{^Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(0, 65837, '\p{Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(1, 65837, '\p{^Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(1, 65837, '\P{Is_Numeric_Value=00_00_00_04_0000}', "");
Expect(0, 65837, '\P{^Is_Numeric_Value=00_00_00_04_0000}', "");
Error('\p{Is_Nv=:=_ 0000040000}');
Error('\P{Is_Nv=:=_ 0000040000}');
Expect(1, 65838, '\p{Is_Nv=040000}', "");
Expect(0, 65838, '\p{^Is_Nv=040000}', "");
Expect(0, 65838, '\P{Is_Nv=040000}', "");
Expect(1, 65838, '\P{^Is_Nv=040000}', "");
Expect(0, 65837, '\p{Is_Nv=040000}', "");
Expect(1, 65837, '\p{^Is_Nv=040000}', "");
Expect(1, 65837, '\P{Is_Nv=040000}', "");
Expect(0, 65837, '\P{^Is_Nv=040000}', "");
Error('\p{Numeric_Value=00001/00000002:=}');
Error('\P{Numeric_Value=00001/00000002:=}');
Expect(1, 189, '\p{Numeric_Value=00000001/000000002}', "");
Expect(0, 189, '\p{^Numeric_Value=00000001/000000002}', "");
Expect(0, 189, '\P{Numeric_Value=00000001/000000002}', "");
Expect(1, 189, '\P{^Numeric_Value=00000001/000000002}', "");
Expect(0, 188, '\p{Numeric_Value=00000001/000000002}', "");
Expect(1, 188, '\p{^Numeric_Value=00000001/000000002}', "");
Expect(1, 188, '\P{Numeric_Value=00000001/000000002}', "");
Expect(0, 188, '\P{^Numeric_Value=00000001/000000002}', "");
Expect(1, 189, '\p{Numeric_Value=0.500}', "");
Expect(0, 189, '\p{^Numeric_Value=0.500}', "");
Expect(0, 189, '\P{Numeric_Value=0.500}', "");
Expect(1, 189, '\P{^Numeric_Value=0.500}', "");
Expect(0, 188, '\p{Numeric_Value=0.500}', "");
Expect(1, 188, '\p{^Numeric_Value=0.500}', "");
Expect(1, 188, '\P{Numeric_Value=0.500}', "");
Expect(0, 188, '\P{^Numeric_Value=0.500}', "");
Error('\p{Nv=:=+01/2}');
Error('\P{Nv=:=+01/2}');
Expect(1, 189, '\p{Nv=+0001/002}', "");
Expect(0, 189, '\p{^Nv=+0001/002}', "");
Expect(0, 189, '\P{Nv=+0001/002}', "");
Expect(1, 189, '\P{^Nv=+0001/002}', "");
Expect(0, 188, '\p{Nv=+0001/002}', "");
Expect(1, 188, '\p{^Nv=+0001/002}', "");
Expect(1, 188, '\P{Nv=+0001/002}', "");
Expect(0, 188, '\P{^Nv=+0001/002}', "");
Expect(1, 189, '\p{Nv=0.500}', "");
Expect(0, 189, '\p{^Nv=0.500}', "");
Expect(0, 189, '\P{Nv=0.500}', "");
Expect(1, 189, '\P{^Nv=0.500}', "");
Expect(0, 188, '\p{Nv=0.500}', "");
Expect(1, 188, '\p{^Nv=0.500}', "");
Expect(1, 188, '\P{Nv=0.500}', "");
Expect(0, 188, '\P{^Nv=0.500}', "");
Error('\p{Is_Numeric_Value=:= -0000001/000000002}');
Error('\P{Is_Numeric_Value=:= -0000001/000000002}');
Expect(1, 189, '\p{Is_Numeric_Value=000001/000000002}', "");
Expect(0, 189, '\p{^Is_Numeric_Value=000001/000000002}', "");
Expect(0, 189, '\P{Is_Numeric_Value=000001/000000002}', "");
Expect(1, 189, '\P{^Is_Numeric_Value=000001/000000002}', "");
Expect(0, 188, '\p{Is_Numeric_Value=000001/000000002}', "");
Expect(1, 188, '\p{^Is_Numeric_Value=000001/000000002}', "");
Expect(1, 188, '\P{Is_Numeric_Value=000001/000000002}', "");
Expect(0, 188, '\P{^Is_Numeric_Value=000001/000000002}', "");
Expect(1, 189, '\p{Is_Numeric_Value=0.500}', "");
Expect(0, 189, '\p{^Is_Numeric_Value=0.500}', "");
Expect(0, 189, '\P{Is_Numeric_Value=0.500}', "");
Expect(1, 189, '\P{^Is_Numeric_Value=0.500}', "");
Expect(0, 188, '\p{Is_Numeric_Value=0.500}', "");
Expect(1, 188, '\p{^Is_Numeric_Value=0.500}', "");
Expect(1, 188, '\P{Is_Numeric_Value=0.500}', "");
Expect(0, 188, '\P{^Is_Numeric_Value=0.500}', "");
Error('\p{Is_Nv=		+1/000000002:=}');
Error('\P{Is_Nv=		+1/000000002:=}');
Expect(1, 189, '\p{Is_Nv=1/0000000002}', "");
Expect(0, 189, '\p{^Is_Nv=1/0000000002}', "");
Expect(0, 189, '\P{Is_Nv=1/0000000002}', "");
Expect(1, 189, '\P{^Is_Nv=1/0000000002}', "");
Expect(0, 188, '\p{Is_Nv=1/0000000002}', "");
Expect(1, 188, '\p{^Is_Nv=1/0000000002}', "");
Expect(1, 188, '\P{Is_Nv=1/0000000002}', "");
Expect(0, 188, '\P{^Is_Nv=1/0000000002}', "");
Expect(1, 189, '\p{Is_Nv=0.500}', "");
Expect(0, 189, '\p{^Is_Nv=0.500}', "");
Expect(0, 189, '\P{Is_Nv=0.500}', "");
Expect(1, 189, '\P{^Is_Nv=0.500}', "");
Expect(0, 188, '\p{Is_Nv=0.500}', "");
Expect(1, 188, '\p{^Is_Nv=0.500}', "");
Expect(1, 188, '\P{Is_Nv=0.500}', "");
Expect(0, 188, '\P{^Is_Nv=0.500}', "");
Error('\p{Numeric_Value=-000	000:=07000}');
Error('\P{Numeric_Value=-000	000:=07000}');
Expect(1, 65832, '\p{Numeric_Value=00000700_0}', "");
Expect(0, 65832, '\p{^Numeric_Value=00000700_0}', "");
Expect(0, 65832, '\P{Numeric_Value=00000700_0}', "");
Expect(1, 65832, '\P{^Numeric_Value=00000700_0}', "");
Expect(0, 65831, '\p{Numeric_Value=00000700_0}', "");
Expect(1, 65831, '\p{^Numeric_Value=00000700_0}', "");
Expect(1, 65831, '\P{Numeric_Value=00000700_0}', "");
Expect(0, 65831, '\P{^Numeric_Value=00000700_0}', "");
Error('\p{Nv=:=000000007000}');
Error('\P{Nv=:=000000007000}');
Expect(1, 65832, '\p{Nv=+07000}', "");
Expect(0, 65832, '\p{^Nv=+07000}', "");
Expect(0, 65832, '\P{Nv=+07000}', "");
Expect(1, 65832, '\P{^Nv=+07000}', "");
Expect(0, 65831, '\p{Nv=+07000}', "");
Expect(1, 65831, '\p{^Nv=+07000}', "");
Expect(1, 65831, '\P{Nv=+07000}', "");
Expect(0, 65831, '\P{^Nv=+07000}', "");
Error('\p{Is_Numeric_Value=_	0:=0	0	0	0_0_0_7000}');
Error('\P{Is_Numeric_Value=_	0:=0	0	0	0_0_0_7000}');
Expect(1, 65832, '\p{Is_Numeric_Value=+0000007000}', "");
Expect(0, 65832, '\p{^Is_Numeric_Value=+0000007000}', "");
Expect(0, 65832, '\P{Is_Numeric_Value=+0000007000}', "");
Expect(1, 65832, '\P{^Is_Numeric_Value=+0000007000}', "");
Expect(0, 65831, '\p{Is_Numeric_Value=+0000007000}', "");
Expect(1, 65831, '\p{^Is_Numeric_Value=+0000007000}', "");
Expect(1, 65831, '\P{Is_Numeric_Value=+0000007000}', "");
Expect(0, 65831, '\P{^Is_Numeric_Value=+0000007000}', "");
Error('\p{Is_Nv:-0 7/a/0 00}');
Error('\P{Is_Nv:-0 7/a/0 00}');
Expect(1, 65832, '\p{Is_Nv=+00007000}', "");
Expect(0, 65832, '\p{^Is_Nv=+00007000}', "");
Expect(0, 65832, '\P{Is_Nv=+00007000}', "");
Expect(1, 65832, '\P{^Is_Nv=+00007000}', "");
Expect(0, 65831, '\p{Is_Nv=+00007000}', "");
Expect(1, 65831, '\p{^Is_Nv=+00007000}', "");
Expect(1, 65831, '\P{Is_Nv=+00007000}', "");
Expect(0, 65831, '\P{^Is_Nv=+00007000}', "");
Error('\p{Numeric_Value:	-/a/+3/0005}');
Error('\P{Numeric_Value:	-/a/+3/0005}');
Expect(1, 8535, '\p{Numeric_Value=3/0000005}', "");
Expect(0, 8535, '\p{^Numeric_Value=3/0000005}', "");
Expect(0, 8535, '\P{Numeric_Value=3/0000005}', "");
Expect(1, 8535, '\P{^Numeric_Value=3/0000005}', "");
Expect(0, 8534, '\p{Numeric_Value=3/0000005}', "");
Expect(1, 8534, '\p{^Numeric_Value=3/0000005}', "");
Expect(1, 8534, '\P{Numeric_Value=3/0000005}', "");
Expect(0, 8534, '\P{^Numeric_Value=3/0000005}', "");
Expect(1, 8535, '\p{Numeric_Value=0.600}', "");
Expect(0, 8535, '\p{^Numeric_Value=0.600}', "");
Expect(0, 8535, '\P{Numeric_Value=0.600}', "");
Expect(1, 8535, '\P{^Numeric_Value=0.600}', "");
Expect(0, 8534, '\p{Numeric_Value=0.600}', "");
Expect(1, 8534, '\p{^Numeric_Value=0.600}', "");
Expect(1, 8534, '\P{Numeric_Value=0.600}', "");
Expect(0, 8534, '\P{^Numeric_Value=0.600}', "");
Error('\p{Nv=	/a/03/000005}');
Error('\P{Nv=	/a/03/000005}');
Expect(1, 8535, '\p{Nv=00003/005}', "");
Expect(0, 8535, '\p{^Nv=00003/005}', "");
Expect(0, 8535, '\P{Nv=00003/005}', "");
Expect(1, 8535, '\P{^Nv=00003/005}', "");
Expect(0, 8534, '\p{Nv=00003/005}', "");
Expect(1, 8534, '\p{^Nv=00003/005}', "");
Expect(1, 8534, '\P{Nv=00003/005}', "");
Expect(0, 8534, '\P{^Nv=00003/005}', "");
Expect(1, 8535, '\p{Nv=0.600}', "");
Expect(0, 8535, '\p{^Nv=0.600}', "");
Expect(0, 8535, '\P{Nv=0.600}', "");
Expect(1, 8535, '\P{^Nv=0.600}', "");
Expect(0, 8534, '\p{Nv=0.600}', "");
Expect(1, 8534, '\p{^Nv=0.600}', "");
Expect(1, 8534, '\P{Nv=0.600}', "");
Expect(0, 8534, '\P{^Nv=0.600}', "");
Error('\p{Is_Numeric_Value=_:=+003/05}');
Error('\P{Is_Numeric_Value=_:=+003/05}');
Expect(1, 8535, '\p{Is_Numeric_Value=000000003/5}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value=000000003/5}', "");
Expect(0, 8535, '\P{Is_Numeric_Value=000000003/5}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value=000000003/5}', "");
Expect(0, 8534, '\p{Is_Numeric_Value=000000003/5}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value=000000003/5}', "");
Expect(1, 8534, '\P{Is_Numeric_Value=000000003/5}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value=000000003/5}', "");
Expect(1, 8535, '\p{Is_Numeric_Value=0.600}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value=0.600}', "");
Expect(0, 8535, '\P{Is_Numeric_Value=0.600}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value=0.600}', "");
Expect(0, 8534, '\p{Is_Numeric_Value=0.600}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value=0.600}', "");
Expect(1, 8534, '\P{Is_Numeric_Value=0.600}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value=0.600}', "");
Error('\p{Is_Nv: _/a/00003/0000005}');
Error('\P{Is_Nv: _/a/00003/0000005}');
Expect(1, 8535, '\p{Is_Nv=0003/005}', "");
Expect(0, 8535, '\p{^Is_Nv=0003/005}', "");
Expect(0, 8535, '\P{Is_Nv=0003/005}', "");
Expect(1, 8535, '\P{^Is_Nv=0003/005}', "");
Expect(0, 8534, '\p{Is_Nv=0003/005}', "");
Expect(1, 8534, '\p{^Is_Nv=0003/005}', "");
Expect(1, 8534, '\P{Is_Nv=0003/005}', "");
Expect(0, 8534, '\P{^Is_Nv=0003/005}', "");
Expect(1, 8535, '\p{Is_Nv=0.600}', "");
Expect(0, 8535, '\p{^Is_Nv=0.600}', "");
Expect(0, 8535, '\P{Is_Nv=0.600}', "");
Expect(1, 8535, '\P{^Is_Nv=0.600}', "");
Expect(0, 8534, '\p{Is_Nv=0.600}', "");
Expect(1, 8534, '\p{^Is_Nv=0.600}', "");
Expect(1, 8534, '\P{Is_Nv=0.600}', "");
Expect(0, 8534, '\P{^Is_Nv=0.600}', "");
Error('\p{Numeric_Value=-:=+17/00002}');
Error('\P{Numeric_Value=-:=+17/00002}');
Expect(1, 3890, '\p{Numeric_Value=000000017/000000002}', "");
Expect(0, 3890, '\p{^Numeric_Value=000000017/000000002}', "");
Expect(0, 3890, '\P{Numeric_Value=000000017/000000002}', "");
Expect(1, 3890, '\P{^Numeric_Value=000000017/000000002}', "");
Expect(0, 3889, '\p{Numeric_Value=000000017/000000002}', "");
Expect(1, 3889, '\p{^Numeric_Value=000000017/000000002}', "");
Expect(1, 3889, '\P{Numeric_Value=000000017/000000002}', "");
Expect(0, 3889, '\P{^Numeric_Value=000000017/000000002}', "");
Expect(1, 3890, '\p{Numeric_Value=8.500}', "");
Expect(0, 3890, '\p{^Numeric_Value=8.500}', "");
Expect(0, 3890, '\P{Numeric_Value=8.500}', "");
Expect(1, 3890, '\P{^Numeric_Value=8.500}', "");
Expect(0, 3889, '\p{Numeric_Value=8.500}', "");
Expect(1, 3889, '\p{^Numeric_Value=8.500}', "");
Expect(1, 3889, '\P{Numeric_Value=8.500}', "");
Expect(0, 3889, '\P{^Numeric_Value=8.500}', "");
Error('\p{Nv=/a/--+0000017/000000002}');
Error('\P{Nv=/a/--+0000017/000000002}');
Expect(1, 3890, '\p{Nv=+00000000017/00002}', "");
Expect(0, 3890, '\p{^Nv=+00000000017/00002}', "");
Expect(0, 3890, '\P{Nv=+00000000017/00002}', "");
Expect(1, 3890, '\P{^Nv=+00000000017/00002}', "");
Expect(0, 3889, '\p{Nv=+00000000017/00002}', "");
Expect(1, 3889, '\p{^Nv=+00000000017/00002}', "");
Expect(1, 3889, '\P{Nv=+00000000017/00002}', "");
Expect(0, 3889, '\P{^Nv=+00000000017/00002}', "");
Expect(1, 3890, '\p{Nv=8.500}', "");
Expect(0, 3890, '\p{^Nv=8.500}', "");
Expect(0, 3890, '\P{Nv=8.500}', "");
Expect(1, 3890, '\P{^Nv=8.500}', "");
Expect(0, 3889, '\p{Nv=8.500}', "");
Expect(1, 3889, '\p{^Nv=8.500}', "");
Expect(1, 3889, '\P{Nv=8.500}', "");
Expect(0, 3889, '\P{^Nv=8.500}', "");
Error('\p{Is_Numeric_Value=/a/	00000017/00000002}');
Error('\P{Is_Numeric_Value=/a/	00000017/00000002}');
Expect(1, 3890, '\p{Is_Numeric_Value=+0000000017/0000002}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value=+0000000017/0000002}', "");
Expect(0, 3890, '\P{Is_Numeric_Value=+0000000017/0000002}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value=+0000000017/0000002}', "");
Expect(0, 3889, '\p{Is_Numeric_Value=+0000000017/0000002}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value=+0000000017/0000002}', "");
Expect(1, 3889, '\P{Is_Numeric_Value=+0000000017/0000002}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value=+0000000017/0000002}', "");
Expect(1, 3890, '\p{Is_Numeric_Value=8.500}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value=8.500}', "");
Expect(0, 3890, '\P{Is_Numeric_Value=8.500}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value=8.500}', "");
Expect(0, 3889, '\p{Is_Numeric_Value=8.500}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value=8.500}', "");
Expect(1, 3889, '\P{Is_Numeric_Value=8.500}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value=8.500}', "");
Error('\p{Is_Nv=	_000017/0002/a/}');
Error('\P{Is_Nv=	_000017/0002/a/}');
Expect(1, 3890, '\p{Is_Nv: 00000017/02}', "");
Expect(0, 3890, '\p{^Is_Nv: 00000017/02}', "");
Expect(0, 3890, '\P{Is_Nv: 00000017/02}', "");
Expect(1, 3890, '\P{^Is_Nv: 00000017/02}', "");
Expect(0, 3889, '\p{Is_Nv: 00000017/02}', "");
Expect(1, 3889, '\p{^Is_Nv: 00000017/02}', "");
Expect(1, 3889, '\P{Is_Nv: 00000017/02}', "");
Expect(0, 3889, '\P{^Is_Nv: 00000017/02}', "");
Expect(1, 3890, '\p{Is_Nv=8.500}', "");
Expect(0, 3890, '\p{^Is_Nv=8.500}', "");
Expect(0, 3890, '\P{Is_Nv=8.500}', "");
Expect(1, 3890, '\P{^Is_Nv=8.500}', "");
Expect(0, 3889, '\p{Is_Nv=8.500}', "");
Expect(1, 3889, '\p{^Is_Nv=8.500}', "");
Expect(1, 3889, '\P{Is_Nv=8.500}', "");
Expect(0, 3889, '\P{^Is_Nv=8.500}', "");
Error('\p{Numeric_Value=_	+000042/a/}');
Error('\P{Numeric_Value=_	+000042/a/}');
Expect(1, 12983, '\p{Numeric_Value=0000_0000_42}', "");
Expect(0, 12983, '\p{^Numeric_Value=0000_0000_42}', "");
Expect(0, 12983, '\P{Numeric_Value=0000_0000_42}', "");
Expect(1, 12983, '\P{^Numeric_Value=0000_0000_42}', "");
Expect(0, 12982, '\p{Numeric_Value=0000_0000_42}', "");
Expect(1, 12982, '\p{^Numeric_Value=0000_0000_42}', "");
Expect(1, 12982, '\P{Numeric_Value=0000_0000_42}', "");
Expect(0, 12982, '\P{^Numeric_Value=0000_0000_42}', "");
Error('\p{Nv=_	0000042:=}');
Error('\P{Nv=_	0000042:=}');
Expect(1, 12983, '\p{Nv=+000000042}', "");
Expect(0, 12983, '\p{^Nv=+000000042}', "");
Expect(0, 12983, '\P{Nv=+000000042}', "");
Expect(1, 12983, '\P{^Nv=+000000042}', "");
Expect(0, 12982, '\p{Nv=+000000042}', "");
Expect(1, 12982, '\p{^Nv=+000000042}', "");
Expect(1, 12982, '\P{Nv=+000000042}', "");
Expect(0, 12982, '\P{^Nv=+000000042}', "");
Error('\p{Is_Numeric_Value= -0000/a/42}');
Error('\P{Is_Numeric_Value= -0000/a/42}');
Expect(1, 12983, '\p{Is_Numeric_Value=00_00_00_04_2}', "");
Expect(0, 12983, '\p{^Is_Numeric_Value=00_00_00_04_2}', "");
Expect(0, 12983, '\P{Is_Numeric_Value=00_00_00_04_2}', "");
Expect(1, 12983, '\P{^Is_Numeric_Value=00_00_00_04_2}', "");
Expect(0, 12982, '\p{Is_Numeric_Value=00_00_00_04_2}', "");
Expect(1, 12982, '\p{^Is_Numeric_Value=00_00_00_04_2}', "");
Expect(1, 12982, '\P{Is_Numeric_Value=00_00_00_04_2}', "");
Expect(0, 12982, '\P{^Is_Numeric_Value=00_00_00_04_2}', "");
Error('\p{Is_Nv=_/a/+42}');
Error('\P{Is_Nv=_/a/+42}');
Expect(1, 12983, '\p{Is_Nv=+00000042}', "");
Expect(0, 12983, '\p{^Is_Nv=+00000042}', "");
Expect(0, 12983, '\P{Is_Nv=+00000042}', "");
Expect(1, 12983, '\P{^Is_Nv=+00000042}', "");
Expect(0, 12982, '\p{Is_Nv=+00000042}', "");
Expect(1, 12982, '\p{^Is_Nv=+00000042}', "");
Expect(1, 12982, '\P{Is_Nv=+00000042}', "");
Expect(0, 12982, '\P{^Is_Nv=+00000042}', "");
Error('\p{Numeric_Value=	:=+00000000022}');
Error('\P{Numeric_Value=	:=+00000000022}');
Expect(1, 12882, '\p{Numeric_Value=00022}', "");
Expect(0, 12882, '\p{^Numeric_Value=00022}', "");
Expect(0, 12882, '\P{Numeric_Value=00022}', "");
Expect(1, 12882, '\P{^Numeric_Value=00022}', "");
Expect(0, 12881, '\p{Numeric_Value=00022}', "");
Expect(1, 12881, '\p{^Numeric_Value=00022}', "");
Expect(1, 12881, '\P{Numeric_Value=00022}', "");
Expect(0, 12881, '\P{^Numeric_Value=00022}', "");
Error('\p{Nv=__0022/a/}');
Error('\P{Nv=__0022/a/}');
Expect(1, 12882, '\p{Nv=+0_0_0_22}', "");
Expect(0, 12882, '\p{^Nv=+0_0_0_22}', "");
Expect(0, 12882, '\P{Nv=+0_0_0_22}', "");
Expect(1, 12882, '\P{^Nv=+0_0_0_22}', "");
Expect(0, 12881, '\p{Nv=+0_0_0_22}', "");
Expect(1, 12881, '\p{^Nv=+0_0_0_22}', "");
Expect(1, 12881, '\P{Nv=+0_0_0_22}', "");
Expect(0, 12881, '\P{^Nv=+0_0_0_22}', "");
Error('\p{Is_Numeric_Value=:=00022}');
Error('\P{Is_Numeric_Value=:=00022}');
Expect(1, 12882, '\p{Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(0, 12882, '\p{^Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(0, 12882, '\P{Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(1, 12882, '\P{^Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(0, 12881, '\p{Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(1, 12881, '\p{^Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(1, 12881, '\P{Is_Numeric_Value:   0_0_0_0_0_022}', "");
Expect(0, 12881, '\P{^Is_Numeric_Value:   0_0_0_0_0_022}', "");
Error('\p{Is_Nv::= _0000000022}');
Error('\P{Is_Nv::= _0000000022}');
Expect(1, 12882, '\p{Is_Nv=00_00_00_02_2}', "");
Expect(0, 12882, '\p{^Is_Nv=00_00_00_02_2}', "");
Expect(0, 12882, '\P{Is_Nv=00_00_00_02_2}', "");
Expect(1, 12882, '\P{^Is_Nv=00_00_00_02_2}', "");
Expect(0, 12881, '\p{Is_Nv=00_00_00_02_2}', "");
Expect(1, 12881, '\p{^Is_Nv=00_00_00_02_2}', "");
Expect(1, 12881, '\P{Is_Nv=00_00_00_02_2}', "");
Expect(0, 12881, '\P{^Is_Nv=00_00_00_02_2}', "");
Error('\p{Numeric_Value=	-+000001/00000009:=}');
Error('\P{Numeric_Value=	-+000001/00000009:=}');
Expect(1, 8529, '\p{Numeric_Value=000000001/009}', "");
Expect(0, 8529, '\p{^Numeric_Value=000000001/009}', "");
Expect(0, 8529, '\P{Numeric_Value=000000001/009}', "");
Expect(1, 8529, '\P{^Numeric_Value=000000001/009}', "");
Expect(0, 8528, '\p{Numeric_Value=000000001/009}', "");
Expect(1, 8528, '\p{^Numeric_Value=000000001/009}', "");
Expect(1, 8528, '\P{Numeric_Value=000000001/009}', "");
Expect(0, 8528, '\P{^Numeric_Value=000000001/009}', "");
Error('\p{Numeric_Value=0.11}');
Error('\P{Numeric_Value=0.11}');
Expect(1, 8529, '\p{Numeric_Value=0.111}', "");
Expect(0, 8529, '\p{^Numeric_Value=0.111}', "");
Expect(0, 8529, '\P{Numeric_Value=0.111}', "");
Expect(1, 8529, '\P{^Numeric_Value=0.111}', "");
Expect(0, 8528, '\p{Numeric_Value=0.111}', "");
Expect(1, 8528, '\p{^Numeric_Value=0.111}', "");
Expect(1, 8528, '\P{Numeric_Value=0.111}', "");
Expect(0, 8528, '\P{^Numeric_Value=0.111}', "");
Error('\p{Nv:/a/-+0000001/09}');
Error('\P{Nv:/a/-+0000001/09}');
Expect(1, 8529, '\p{Nv:   +001/00009}', "");
Expect(0, 8529, '\p{^Nv:   +001/00009}', "");
Expect(0, 8529, '\P{Nv:   +001/00009}', "");
Expect(1, 8529, '\P{^Nv:   +001/00009}', "");
Expect(0, 8528, '\p{Nv:   +001/00009}', "");
Expect(1, 8528, '\p{^Nv:   +001/00009}', "");
Expect(1, 8528, '\P{Nv:   +001/00009}', "");
Expect(0, 8528, '\P{^Nv:   +001/00009}', "");
Error('\p{Nv=0.11}');
Error('\P{Nv=0.11}');
Expect(1, 8529, '\p{Nv=0.111}', "");
Expect(0, 8529, '\p{^Nv=0.111}', "");
Expect(0, 8529, '\P{Nv=0.111}', "");
Expect(1, 8529, '\P{^Nv=0.111}', "");
Expect(0, 8528, '\p{Nv=0.111}', "");
Expect(1, 8528, '\p{^Nv=0.111}', "");
Expect(1, 8528, '\P{Nv=0.111}', "");
Expect(0, 8528, '\P{^Nv=0.111}', "");
Error('\p{Is_Numeric_Value:_:=+0000001/000000009}');
Error('\P{Is_Numeric_Value:_:=+0000001/000000009}');
Expect(1, 8529, '\p{Is_Numeric_Value=+00001/0000009}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=+00001/0000009}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=+00001/0000009}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=+00001/0000009}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=+00001/0000009}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=+00001/0000009}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=+00001/0000009}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=+00001/0000009}', "");
Error('\p{Is_Numeric_Value=0.11}');
Error('\P{Is_Numeric_Value=0.11}');
Expect(1, 8529, '\p{Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=0.111}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=0.111}', "");
Error('\p{Is_Nv=/a/	_+000000001/0000000009}');
Error('\P{Is_Nv=/a/	_+000000001/0000000009}');
Expect(1, 8529, '\p{Is_Nv:	1/09}', "");
Expect(0, 8529, '\p{^Is_Nv:	1/09}', "");
Expect(0, 8529, '\P{Is_Nv:	1/09}', "");
Expect(1, 8529, '\P{^Is_Nv:	1/09}', "");
Expect(0, 8528, '\p{Is_Nv:	1/09}', "");
Expect(1, 8528, '\p{^Is_Nv:	1/09}', "");
Expect(1, 8528, '\P{Is_Nv:	1/09}', "");
Expect(0, 8528, '\P{^Is_Nv:	1/09}', "");
Error('\p{Is_Nv=0.11}');
Error('\P{Is_Nv=0.11}');
Expect(1, 8529, '\p{Is_Nv:	0.111}', "");
Expect(0, 8529, '\p{^Is_Nv:	0.111}', "");
Expect(0, 8529, '\P{Is_Nv:	0.111}', "");
Expect(1, 8529, '\P{^Is_Nv:	0.111}', "");
Expect(0, 8528, '\p{Is_Nv:	0.111}', "");
Expect(1, 8528, '\p{^Is_Nv:	0.111}', "");
Expect(1, 8528, '\P{Is_Nv:	0.111}', "");
Expect(0, 8528, '\P{^Is_Nv:	0.111}', "");
Error('\p{Numeric_Value=:= +000000900}');
Error('\P{Numeric_Value=:= +000000900}');
Expect(1, 65825, '\p{Numeric_Value=90_0}', "");
Expect(0, 65825, '\p{^Numeric_Value=90_0}', "");
Expect(0, 65825, '\P{Numeric_Value=90_0}', "");
Expect(1, 65825, '\P{^Numeric_Value=90_0}', "");
Expect(0, 65824, '\p{Numeric_Value=90_0}', "");
Expect(1, 65824, '\p{^Numeric_Value=90_0}', "");
Expect(1, 65824, '\P{Numeric_Value=90_0}', "");
Expect(0, 65824, '\P{^Numeric_Value=90_0}', "");
Error('\p{Nv: 	:=+0900}');
Error('\P{Nv: 	:=+0900}');
Expect(1, 65825, '\p{Nv=00000000900}', "");
Expect(0, 65825, '\p{^Nv=00000000900}', "");
Expect(0, 65825, '\P{Nv=00000000900}', "");
Expect(1, 65825, '\P{^Nv=00000000900}', "");
Expect(0, 65824, '\p{Nv=00000000900}', "");
Expect(1, 65824, '\p{^Nv=00000000900}', "");
Expect(1, 65824, '\P{Nv=00000000900}', "");
Expect(0, 65824, '\P{^Nv=00000000900}', "");
Error('\p{Is_Numeric_Value=:=	_000900}');
Error('\P{Is_Numeric_Value=:=	_000900}');
Expect(1, 65825, '\p{Is_Numeric_Value=0000000090_0}', "");
Expect(0, 65825, '\p{^Is_Numeric_Value=0000000090_0}', "");
Expect(0, 65825, '\P{Is_Numeric_Value=0000000090_0}', "");
Expect(1, 65825, '\P{^Is_Numeric_Value=0000000090_0}', "");
Expect(0, 65824, '\p{Is_Numeric_Value=0000000090_0}', "");
Expect(1, 65824, '\p{^Is_Numeric_Value=0000000090_0}', "");
Expect(1, 65824, '\P{Is_Numeric_Value=0000000090_0}', "");
Expect(0, 65824, '\P{^Is_Numeric_Value=0000000090_0}', "");
Error('\p{Is_Nv=:=	000000900}');
Error('\P{Is_Nv=:=	000000900}');
Expect(1, 65825, '\p{Is_Nv=+0_9_00}', "");
Expect(0, 65825, '\p{^Is_Nv=+0_9_00}', "");
Expect(0, 65825, '\P{Is_Nv=+0_9_00}', "");
Expect(1, 65825, '\P{^Is_Nv=+0_9_00}', "");
Expect(0, 65824, '\p{Is_Nv=+0_9_00}', "");
Expect(1, 65824, '\p{^Is_Nv=+0_9_00}', "");
Expect(1, 65824, '\P{Is_Nv=+0_9_00}', "");
Expect(0, 65824, '\P{^Is_Nv=+0_9_00}', "");
Error('\p{Numeric_Value=:=-002/000005}');
Error('\P{Numeric_Value=:=-002/000005}');
Expect(1, 8534, '\p{Numeric_Value=0002/0000005}', "");
Expect(0, 8534, '\p{^Numeric_Value=0002/0000005}', "");
Expect(0, 8534, '\P{Numeric_Value=0002/0000005}', "");
Expect(1, 8534, '\P{^Numeric_Value=0002/0000005}', "");
Expect(0, 8533, '\p{Numeric_Value=0002/0000005}', "");
Expect(1, 8533, '\p{^Numeric_Value=0002/0000005}', "");
Expect(1, 8533, '\P{Numeric_Value=0002/0000005}', "");
Expect(0, 8533, '\P{^Numeric_Value=0002/0000005}', "");
Expect(1, 8534, '\p{Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Numeric_Value=0.400}', "");
Error('\p{Nv=-/a/0000002/0000000005}');
Error('\P{Nv=-/a/0000002/0000000005}');
Expect(1, 8534, '\p{Nv: 02/05}', "");
Expect(0, 8534, '\p{^Nv: 02/05}', "");
Expect(0, 8534, '\P{Nv: 02/05}', "");
Expect(1, 8534, '\P{^Nv: 02/05}', "");
Expect(0, 8533, '\p{Nv: 02/05}', "");
Expect(1, 8533, '\p{^Nv: 02/05}', "");
Expect(1, 8533, '\P{Nv: 02/05}', "");
Expect(0, 8533, '\P{^Nv: 02/05}', "");
Expect(1, 8534, '\p{Nv:	0.400}', "");
Expect(0, 8534, '\p{^Nv:	0.400}', "");
Expect(0, 8534, '\P{Nv:	0.400}', "");
Expect(1, 8534, '\P{^Nv:	0.400}', "");
Expect(0, 8533, '\p{Nv:	0.400}', "");
Expect(1, 8533, '\p{^Nv:	0.400}', "");
Expect(1, 8533, '\P{Nv:	0.400}', "");
Expect(0, 8533, '\P{^Nv:	0.400}', "");
Error('\p{Is_Numeric_Value=/a/ -+2/00000005}');
Error('\P{Is_Numeric_Value=/a/ -+2/00000005}');
Expect(1, 8534, '\p{Is_Numeric_Value=0000000002/00000005}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=0000000002/00000005}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=0000000002/00000005}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=0000000002/00000005}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=0000000002/00000005}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=0000000002/00000005}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=0000000002/00000005}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=0000000002/00000005}', "");
Expect(1, 8534, '\p{Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=0.400}', "");
Error('\p{Is_Nv=	/a/00002/0000005}');
Error('\P{Is_Nv=	/a/00002/0000005}');
Expect(1, 8534, '\p{Is_Nv:   0000000002/000000005}', "");
Expect(0, 8534, '\p{^Is_Nv:   0000000002/000000005}', "");
Expect(0, 8534, '\P{Is_Nv:   0000000002/000000005}', "");
Expect(1, 8534, '\P{^Is_Nv:   0000000002/000000005}', "");
Expect(0, 8533, '\p{Is_Nv:   0000000002/000000005}', "");
Expect(1, 8533, '\p{^Is_Nv:   0000000002/000000005}', "");
Expect(1, 8533, '\P{Is_Nv:   0000000002/000000005}', "");
Expect(0, 8533, '\P{^Is_Nv:   0000000002/000000005}', "");
Expect(1, 8534, '\p{Is_Nv=0.400}', "");
Expect(0, 8534, '\p{^Is_Nv=0.400}', "");
Expect(0, 8534, '\P{Is_Nv=0.400}', "");
Expect(1, 8534, '\P{^Is_Nv=0.400}', "");
Expect(0, 8533, '\p{Is_Nv=0.400}', "");
Expect(1, 8533, '\p{^Is_Nv=0.400}', "");
Expect(1, 8533, '\P{Is_Nv=0.400}', "");
Expect(0, 8533, '\P{^Is_Nv=0.400}', "");
Error('\p{Numeric_Value= +04_6/a/}');
Error('\P{Numeric_Value= +04_6/a/}');
Expect(1, 12987, '\p{Numeric_Value=0_0_0_46}', "");
Expect(0, 12987, '\p{^Numeric_Value=0_0_0_46}', "");
Expect(0, 12987, '\P{Numeric_Value=0_0_0_46}', "");
Expect(1, 12987, '\P{^Numeric_Value=0_0_0_46}', "");
Expect(0, 12986, '\p{Numeric_Value=0_0_0_46}', "");
Expect(1, 12986, '\p{^Numeric_Value=0_0_0_46}', "");
Expect(1, 12986, '\P{Numeric_Value=0_0_0_46}', "");
Expect(0, 12986, '\P{^Numeric_Value=0_0_0_46}', "");
Error('\p{Nv=-_0 0/a/0_0	0 0	0-046}');
Error('\P{Nv=-_0 0/a/0_0	0 0	0-046}');
Expect(1, 12987, '\p{Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(0, 12987, '\p{^Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(0, 12987, '\P{Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(1, 12987, '\P{^Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(0, 12986, '\p{Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(1, 12986, '\p{^Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(1, 12986, '\P{Nv:   0_0_0_0_0_0_0_0046}', "");
Expect(0, 12986, '\P{^Nv:   0_0_0_0_0_0_0_0046}', "");
Error('\p{Is_Numeric_Value=	:=0 0 00 0_0	0 0	46}');
Error('\P{Is_Numeric_Value=	:=0 0 00 0_0	0 0	46}');
Expect(1, 12987, '\p{Is_Numeric_Value=46}', "");
Expect(0, 12987, '\p{^Is_Numeric_Value=46}', "");
Expect(0, 12987, '\P{Is_Numeric_Value=46}', "");
Expect(1, 12987, '\P{^Is_Numeric_Value=46}', "");
Expect(0, 12986, '\p{Is_Numeric_Value=46}', "");
Expect(1, 12986, '\p{^Is_Numeric_Value=46}', "");
Expect(1, 12986, '\P{Is_Numeric_Value=46}', "");
Expect(0, 12986, '\P{^Is_Numeric_Value=46}', "");
Error('\p{Is_Nv=_04/a/6}');
Error('\P{Is_Nv=_04/a/6}');
Expect(1, 12987, '\p{Is_Nv=0000000046}', "");
Expect(0, 12987, '\p{^Is_Nv=0000000046}', "");
Expect(0, 12987, '\P{Is_Nv=0000000046}', "");
Expect(1, 12987, '\P{^Is_Nv=0000000046}', "");
Expect(0, 12986, '\p{Is_Nv=0000000046}', "");
Expect(1, 12986, '\p{^Is_Nv=0000000046}', "");
Expect(1, 12986, '\P{Is_Nv=0000000046}', "");
Expect(0, 12986, '\P{^Is_Nv=0000000046}', "");
Error('\p{Numeric_Value=-+0000/a/0}');
Error('\P{Numeric_Value=-+0000/a/0}');
Expect(1, 48, '\p{Numeric_Value=0_0}', "");
Expect(0, 48, '\p{^Numeric_Value=0_0}', "");
Expect(0, 48, '\P{Numeric_Value=0_0}', "");
Expect(1, 48, '\P{^Numeric_Value=0_0}', "");
Expect(0, 47, '\p{Numeric_Value=0_0}', "");
Expect(1, 47, '\p{^Numeric_Value=0_0}', "");
Expect(1, 47, '\P{Numeric_Value=0_0}', "");
Expect(0, 47, '\P{^Numeric_Value=0_0}', "");
Error('\p{Nv=-00:=}');
Error('\P{Nv=-00:=}');
Expect(1, 48, '\p{Nv=00000}', "");
Expect(0, 48, '\p{^Nv=00000}', "");
Expect(0, 48, '\P{Nv=00000}', "");
Expect(1, 48, '\P{^Nv=00000}', "");
Expect(0, 47, '\p{Nv=00000}', "");
Expect(1, 47, '\p{^Nv=00000}', "");
Expect(1, 47, '\P{Nv=00000}', "");
Expect(0, 47, '\P{^Nv=00000}', "");
Error('\p{Is_Numeric_Value:	_00-0_00/a/}');
Error('\P{Is_Numeric_Value:	_00-0_00/a/}');
Expect(1, 48, '\p{Is_Numeric_Value=00000}', "");
Expect(0, 48, '\p{^Is_Numeric_Value=00000}', "");
Expect(0, 48, '\P{Is_Numeric_Value=00000}', "");
Expect(1, 48, '\P{^Is_Numeric_Value=00000}', "");
Expect(0, 47, '\p{Is_Numeric_Value=00000}', "");
Expect(1, 47, '\p{^Is_Numeric_Value=00000}', "");
Expect(1, 47, '\P{Is_Numeric_Value=00000}', "");
Expect(0, 47, '\P{^Is_Numeric_Value=00000}', "");
Error('\p{Is_Nv=/a/ 000000}');
Error('\P{Is_Nv=/a/ 000000}');
Expect(1, 48, '\p{Is_Nv=+0}', "");
Expect(0, 48, '\p{^Is_Nv=+0}', "");
Expect(0, 48, '\P{Is_Nv=+0}', "");
Expect(1, 48, '\P{^Is_Nv=+0}', "");
Expect(0, 47, '\p{Is_Nv=+0}', "");
Expect(1, 47, '\p{^Is_Nv=+0}', "");
Expect(1, 47, '\P{Is_Nv=+0}', "");
Expect(0, 47, '\P{^Is_Nv=+0}', "");
Error('\p{Numeric_Value=/a/000023}');
Error('\P{Numeric_Value=/a/000023}');
Expect(1, 12883, '\p{Numeric_Value=00_00_00_023}', "");
Expect(0, 12883, '\p{^Numeric_Value=00_00_00_023}', "");
Expect(0, 12883, '\P{Numeric_Value=00_00_00_023}', "");
Expect(1, 12883, '\P{^Numeric_Value=00_00_00_023}', "");
Expect(0, 12882, '\p{Numeric_Value=00_00_00_023}', "");
Expect(1, 12882, '\p{^Numeric_Value=00_00_00_023}', "");
Expect(1, 12882, '\P{Numeric_Value=00_00_00_023}', "");
Expect(0, 12882, '\P{^Numeric_Value=00_00_00_023}', "");
Error('\p{Nv=- 0000023/a/}');
Error('\P{Nv=- 0000023/a/}');
Expect(1, 12883, '\p{Nv:0023}', "");
Expect(0, 12883, '\p{^Nv:0023}', "");
Expect(0, 12883, '\P{Nv:0023}', "");
Expect(1, 12883, '\P{^Nv:0023}', "");
Expect(0, 12882, '\p{Nv:0023}', "");
Expect(1, 12882, '\p{^Nv:0023}', "");
Expect(1, 12882, '\P{Nv:0023}', "");
Expect(0, 12882, '\P{^Nv:0023}', "");
Error('\p{Is_Numeric_Value=:=-_00000000023}');
Error('\P{Is_Numeric_Value=:=-_00000000023}');
Expect(1, 12883, '\p{Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(0, 12883, '\p{^Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(0, 12883, '\P{Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(1, 12883, '\P{^Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(0, 12882, '\p{Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(1, 12882, '\p{^Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(1, 12882, '\P{Is_Numeric_Value=0_0_0_0_0_0023}', "");
Expect(0, 12882, '\P{^Is_Numeric_Value=0_0_0_0_0_0023}', "");
Error('\p{Is_Nv=:=-+0000023}');
Error('\P{Is_Nv=:=-+0000023}');
Expect(1, 12883, '\p{Is_Nv=+0000000023}', "");
Expect(0, 12883, '\p{^Is_Nv=+0000000023}', "");
Expect(0, 12883, '\P{Is_Nv=+0000000023}', "");
Expect(1, 12883, '\P{^Is_Nv=+0000000023}', "");
Expect(0, 12882, '\p{Is_Nv=+0000000023}', "");
Expect(1, 12882, '\p{^Is_Nv=+0000000023}', "");
Expect(1, 12882, '\P{Is_Nv=+0000000023}', "");
Expect(0, 12882, '\P{^Is_Nv=+0000000023}', "");
Error('\p{Numeric_Value:-00000001/0000007/a/}');
Error('\P{Numeric_Value:-00000001/0000007/a/}');
Expect(1, 8528, '\p{Numeric_Value=1/000007}', "");
Expect(0, 8528, '\p{^Numeric_Value=1/000007}', "");
Expect(0, 8528, '\P{Numeric_Value=1/000007}', "");
Expect(1, 8528, '\P{^Numeric_Value=1/000007}', "");
Expect(0, 8527, '\p{Numeric_Value=1/000007}', "");
Expect(1, 8527, '\p{^Numeric_Value=1/000007}', "");
Expect(1, 8527, '\P{Numeric_Value=1/000007}', "");
Expect(0, 8527, '\P{^Numeric_Value=1/000007}', "");
Error('\p{Numeric_Value=0.14}');
Error('\P{Numeric_Value=0.14}');
Expect(1, 8528, '\p{Numeric_Value=0.143}', "");
Expect(0, 8528, '\p{^Numeric_Value=0.143}', "");
Expect(0, 8528, '\P{Numeric_Value=0.143}', "");
Expect(1, 8528, '\P{^Numeric_Value=0.143}', "");
Expect(0, 8527, '\p{Numeric_Value=0.143}', "");
Expect(1, 8527, '\p{^Numeric_Value=0.143}', "");
Expect(1, 8527, '\P{Numeric_Value=0.143}', "");
Expect(0, 8527, '\P{^Numeric_Value=0.143}', "");
Error('\p{Nv=:=	 000000001/7}');
Error('\P{Nv=:=	 000000001/7}');
Expect(1, 8528, '\p{Nv=0000001/07}', "");
Expect(0, 8528, '\p{^Nv=0000001/07}', "");
Expect(0, 8528, '\P{Nv=0000001/07}', "");
Expect(1, 8528, '\P{^Nv=0000001/07}', "");
Expect(0, 8527, '\p{Nv=0000001/07}', "");
Expect(1, 8527, '\p{^Nv=0000001/07}', "");
Expect(1, 8527, '\P{Nv=0000001/07}', "");
Expect(0, 8527, '\P{^Nv=0000001/07}', "");
Error('\p{Nv=0.14}');
Error('\P{Nv=0.14}');
Expect(1, 8528, '\p{Nv=0.143}', "");
Expect(0, 8528, '\p{^Nv=0.143}', "");
Expect(0, 8528, '\P{Nv=0.143}', "");
Expect(1, 8528, '\P{^Nv=0.143}', "");
Expect(0, 8527, '\p{Nv=0.143}', "");
Expect(1, 8527, '\p{^Nv=0.143}', "");
Expect(1, 8527, '\P{Nv=0.143}', "");
Expect(0, 8527, '\P{^Nv=0.143}', "");
Error('\p{Is_Numeric_Value: _:=+000000001/0007}');
Error('\P{Is_Numeric_Value: _:=+000000001/0007}');
Expect(1, 8528, '\p{Is_Numeric_Value=0000001/00000007}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value=0000001/00000007}', "");
Expect(0, 8528, '\P{Is_Numeric_Value=0000001/00000007}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value=0000001/00000007}', "");
Expect(0, 8527, '\p{Is_Numeric_Value=0000001/00000007}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value=0000001/00000007}', "");
Expect(1, 8527, '\P{Is_Numeric_Value=0000001/00000007}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value=0000001/00000007}', "");
Error('\p{Is_Numeric_Value=0.14}');
Error('\P{Is_Numeric_Value=0.14}');
Expect(1, 8528, '\p{Is_Numeric_Value:   0.143}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value:   0.143}', "");
Expect(0, 8528, '\P{Is_Numeric_Value:   0.143}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value:   0.143}', "");
Expect(0, 8527, '\p{Is_Numeric_Value:   0.143}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value:   0.143}', "");
Expect(1, 8527, '\P{Is_Numeric_Value:   0.143}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value:   0.143}', "");
Error('\p{Is_Nv=__01/0000000007/a/}');
Error('\P{Is_Nv=__01/0000000007/a/}');
Expect(1, 8528, '\p{Is_Nv=0000001/07}', "");
Expect(0, 8528, '\p{^Is_Nv=0000001/07}', "");
Expect(0, 8528, '\P{Is_Nv=0000001/07}', "");
Expect(1, 8528, '\P{^Is_Nv=0000001/07}', "");
Expect(0, 8527, '\p{Is_Nv=0000001/07}', "");
Expect(1, 8527, '\p{^Is_Nv=0000001/07}', "");
Expect(1, 8527, '\P{Is_Nv=0000001/07}', "");
Expect(0, 8527, '\P{^Is_Nv=0000001/07}', "");
Error('\p{Is_Nv=0.14}');
Error('\P{Is_Nv=0.14}');
Expect(1, 8528, '\p{Is_Nv=0.143}', "");
Expect(0, 8528, '\p{^Is_Nv=0.143}', "");
Expect(0, 8528, '\P{Is_Nv=0.143}', "");
Expect(1, 8528, '\P{^Is_Nv=0.143}', "");
Expect(0, 8527, '\p{Is_Nv=0.143}', "");
Expect(1, 8527, '\p{^Is_Nv=0.143}', "");
Expect(1, 8527, '\P{Is_Nv=0.143}', "");
Expect(0, 8527, '\P{^Is_Nv=0.143}', "");
Error('\p{Numeric_Value= /a/+4/0005}');
Error('\P{Numeric_Value= /a/+4/0005}');
Expect(1, 8536, '\p{Numeric_Value=0000004/000005}', "");
Expect(0, 8536, '\p{^Numeric_Value=0000004/000005}', "");
Expect(0, 8536, '\P{Numeric_Value=0000004/000005}', "");
Expect(1, 8536, '\P{^Numeric_Value=0000004/000005}', "");
Expect(0, 8535, '\p{Numeric_Value=0000004/000005}', "");
Expect(1, 8535, '\p{^Numeric_Value=0000004/000005}', "");
Expect(1, 8535, '\P{Numeric_Value=0000004/000005}', "");
Expect(0, 8535, '\P{^Numeric_Value=0000004/000005}', "");
Expect(1, 8536, '\p{Numeric_Value=0.800}', "");
Expect(0, 8536, '\p{^Numeric_Value=0.800}', "");
Expect(0, 8536, '\P{Numeric_Value=0.800}', "");
Expect(1, 8536, '\P{^Numeric_Value=0.800}', "");
Expect(0, 8535, '\p{Numeric_Value=0.800}', "");
Expect(1, 8535, '\p{^Numeric_Value=0.800}', "");
Expect(1, 8535, '\P{Numeric_Value=0.800}', "");
Expect(0, 8535, '\P{^Numeric_Value=0.800}', "");
Error('\p{Nv=-/a/04/5}');
Error('\P{Nv=-/a/04/5}');
Expect(1, 8536, '\p{Nv:	000000004/00000005}', "");
Expect(0, 8536, '\p{^Nv:	000000004/00000005}', "");
Expect(0, 8536, '\P{Nv:	000000004/00000005}', "");
Expect(1, 8536, '\P{^Nv:	000000004/00000005}', "");
Expect(0, 8535, '\p{Nv:	000000004/00000005}', "");
Expect(1, 8535, '\p{^Nv:	000000004/00000005}', "");
Expect(1, 8535, '\P{Nv:	000000004/00000005}', "");
Expect(0, 8535, '\P{^Nv:	000000004/00000005}', "");
Expect(1, 8536, '\p{Nv=0.800}', "");
Expect(0, 8536, '\p{^Nv=0.800}', "");
Expect(0, 8536, '\P{Nv=0.800}', "");
Expect(1, 8536, '\P{^Nv=0.800}', "");
Expect(0, 8535, '\p{Nv=0.800}', "");
Expect(1, 8535, '\p{^Nv=0.800}', "");
Expect(1, 8535, '\P{Nv=0.800}', "");
Expect(0, 8535, '\P{^Nv=0.800}', "");
Error('\p{Is_Numeric_Value: := -004/5}');
Error('\P{Is_Numeric_Value: := -004/5}');
Expect(1, 8536, '\p{Is_Numeric_Value:004/0005}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value:004/0005}', "");
Expect(0, 8536, '\P{Is_Numeric_Value:004/0005}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value:004/0005}', "");
Expect(0, 8535, '\p{Is_Numeric_Value:004/0005}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value:004/0005}', "");
Expect(1, 8535, '\P{Is_Numeric_Value:004/0005}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value:004/0005}', "");
Expect(1, 8536, '\p{Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\P{Is_Numeric_Value=0.800}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\p{Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\P{Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value=0.800}', "");
Error('\p{Is_Nv=:=-	4/05}');
Error('\P{Is_Nv=:=-	4/05}');
Expect(1, 8536, '\p{Is_Nv=00004/000005}', "");
Expect(0, 8536, '\p{^Is_Nv=00004/000005}', "");
Expect(0, 8536, '\P{Is_Nv=00004/000005}', "");
Expect(1, 8536, '\P{^Is_Nv=00004/000005}', "");
Expect(0, 8535, '\p{Is_Nv=00004/000005}', "");
Expect(1, 8535, '\p{^Is_Nv=00004/000005}', "");
Expect(1, 8535, '\P{Is_Nv=00004/000005}', "");
Expect(0, 8535, '\P{^Is_Nv=00004/000005}', "");
Expect(1, 8536, '\p{Is_Nv: 0.800}', "");
Expect(0, 8536, '\p{^Is_Nv: 0.800}', "");
Expect(0, 8536, '\P{Is_Nv: 0.800}', "");
Expect(1, 8536, '\P{^Is_Nv: 0.800}', "");
Expect(0, 8535, '\p{Is_Nv: 0.800}', "");
Expect(1, 8535, '\p{^Is_Nv: 0.800}', "");
Expect(1, 8535, '\P{Is_Nv: 0.800}', "");
Expect(0, 8535, '\P{^Is_Nv: 0.800}', "");
Error('\p{Numeric_Value:	-/a/+013}');
Error('\P{Numeric_Value:	-/a/+013}');
Expect(1, 9324, '\p{Numeric_Value=00000013}', "");
Expect(0, 9324, '\p{^Numeric_Value=00000013}', "");
Expect(0, 9324, '\P{Numeric_Value=00000013}', "");
Expect(1, 9324, '\P{^Numeric_Value=00000013}', "");
Expect(0, 9323, '\p{Numeric_Value=00000013}', "");
Expect(1, 9323, '\p{^Numeric_Value=00000013}', "");
Expect(1, 9323, '\P{Numeric_Value=00000013}', "");
Expect(0, 9323, '\P{^Numeric_Value=00000013}', "");
Error('\p{Nv=:=0	0 00 0_013}');
Error('\P{Nv=:=0	0 00 0_013}');
Expect(1, 9324, '\p{Nv:	0_0_0_0_13}', "");
Expect(0, 9324, '\p{^Nv:	0_0_0_0_13}', "");
Expect(0, 9324, '\P{Nv:	0_0_0_0_13}', "");
Expect(1, 9324, '\P{^Nv:	0_0_0_0_13}', "");
Expect(0, 9323, '\p{Nv:	0_0_0_0_13}', "");
Expect(1, 9323, '\p{^Nv:	0_0_0_0_13}', "");
Expect(1, 9323, '\P{Nv:	0_0_0_0_13}', "");
Expect(0, 9323, '\P{^Nv:	0_0_0_0_13}', "");
Error('\p{Is_Numeric_Value= 	+0000-00-013/a/}');
Error('\P{Is_Numeric_Value= 	+0000-00-013/a/}');
Expect(1, 9324, '\p{Is_Numeric_Value=013}', "");
Expect(0, 9324, '\p{^Is_Numeric_Value=013}', "");
Expect(0, 9324, '\P{Is_Numeric_Value=013}', "");
Expect(1, 9324, '\P{^Is_Numeric_Value=013}', "");
Expect(0, 9323, '\p{Is_Numeric_Value=013}', "");
Expect(1, 9323, '\p{^Is_Numeric_Value=013}', "");
Expect(1, 9323, '\P{Is_Numeric_Value=013}', "");
Expect(0, 9323, '\P{^Is_Numeric_Value=013}', "");
Error('\p{Is_Nv=		0000/a/0000_13}');
Error('\P{Is_Nv=		0000/a/0000_13}');
Expect(1, 9324, '\p{Is_Nv=1_3}', "");
Expect(0, 9324, '\p{^Is_Nv=1_3}', "");
Expect(0, 9324, '\P{Is_Nv=1_3}', "");
Expect(1, 9324, '\P{^Is_Nv=1_3}', "");
Expect(0, 9323, '\p{Is_Nv=1_3}', "");
Expect(1, 9323, '\p{^Is_Nv=1_3}', "");
Expect(1, 9323, '\P{Is_Nv=1_3}', "");
Expect(0, 9323, '\P{^Is_Nv=1_3}', "");
Error('\p{Numeric_Value:   _	0:=6}');
Error('\P{Numeric_Value:   _	0:=6}');
Expect(1, 54, '\p{Numeric_Value=6}', "");
Expect(0, 54, '\p{^Numeric_Value=6}', "");
Expect(0, 54, '\P{Numeric_Value=6}', "");
Expect(1, 54, '\P{^Numeric_Value=6}', "");
Expect(0, 53, '\p{Numeric_Value=6}', "");
Expect(1, 53, '\p{^Numeric_Value=6}', "");
Expect(1, 53, '\P{Numeric_Value=6}', "");
Expect(0, 53, '\P{^Numeric_Value=6}', "");
Error('\p{Nv=-000	000/a/6}');
Error('\P{Nv=-000	000/a/6}');
Expect(1, 54, '\p{Nv=0000006}', "");
Expect(0, 54, '\p{^Nv=0000006}', "");
Expect(0, 54, '\P{Nv=0000006}', "");
Expect(1, 54, '\P{^Nv=0000006}', "");
Expect(0, 53, '\p{Nv=0000006}', "");
Expect(1, 53, '\p{^Nv=0000006}', "");
Expect(1, 53, '\P{Nv=0000006}', "");
Expect(0, 53, '\P{^Nv=0000006}', "");
Error('\p{Is_Numeric_Value=_	+0000-0000:=6}');
Error('\P{Is_Numeric_Value=_	+0000-0000:=6}');
Expect(1, 54, '\p{Is_Numeric_Value: 0_6}', "");
Expect(0, 54, '\p{^Is_Numeric_Value: 0_6}', "");
Expect(0, 54, '\P{Is_Numeric_Value: 0_6}', "");
Expect(1, 54, '\P{^Is_Numeric_Value: 0_6}', "");
Expect(0, 53, '\p{Is_Numeric_Value: 0_6}', "");
Expect(1, 53, '\p{^Is_Numeric_Value: 0_6}', "");
Expect(1, 53, '\P{Is_Numeric_Value: 0_6}', "");
Expect(0, 53, '\P{^Is_Numeric_Value: 0_6}', "");
Error('\p{Is_Nv=-:=+0 0-06}');
Error('\P{Is_Nv=-:=+0 0-06}');
Expect(1, 54, '\p{Is_Nv=00_6}', "");
Expect(0, 54, '\p{^Is_Nv=00_6}', "");
Expect(0, 54, '\P{Is_Nv=00_6}', "");
Expect(1, 54, '\P{^Is_Nv=00_6}', "");
Expect(0, 53, '\p{Is_Nv=00_6}', "");
Expect(1, 53, '\p{^Is_Nv=00_6}', "");
Expect(1, 53, '\P{Is_Nv=00_6}', "");
Expect(0, 53, '\P{^Is_Nv=00_6}', "");
Error('\p{Numeric_Value=/a/ -000000007000 0}');
Error('\P{Numeric_Value=/a/ -000000007000 0}');
Expect(1, 65841, '\p{Numeric_Value=+00000070000}', "");
Expect(0, 65841, '\p{^Numeric_Value=+00000070000}', "");
Expect(0, 65841, '\P{Numeric_Value=+00000070000}', "");
Expect(1, 65841, '\P{^Numeric_Value=+00000070000}', "");
Expect(0, 65840, '\p{Numeric_Value=+00000070000}', "");
Expect(1, 65840, '\p{^Numeric_Value=+00000070000}', "");
Expect(1, 65840, '\P{Numeric_Value=+00000070000}', "");
Expect(0, 65840, '\P{^Numeric_Value=+00000070000}', "");
Error('\p{Nv=-	70000/a/}');
Error('\P{Nv=-	70000/a/}');
Expect(1, 65841, '\p{Nv=0070000}', "");
Expect(0, 65841, '\p{^Nv=0070000}', "");
Expect(0, 65841, '\P{Nv=0070000}', "");
Expect(1, 65841, '\P{^Nv=0070000}', "");
Expect(0, 65840, '\p{Nv=0070000}', "");
Expect(1, 65840, '\p{^Nv=0070000}', "");
Expect(1, 65840, '\P{Nv=0070000}', "");
Expect(0, 65840, '\P{^Nv=0070000}', "");
Error('\p{Is_Numeric_Value:   	:=000070000}');
Error('\P{Is_Numeric_Value:   	:=000070000}');
Expect(1, 65841, '\p{Is_Numeric_Value=00000070000}', "");
Expect(0, 65841, '\p{^Is_Numeric_Value=00000070000}', "");
Expect(0, 65841, '\P{Is_Numeric_Value=00000070000}', "");
Expect(1, 65841, '\P{^Is_Numeric_Value=00000070000}', "");
Expect(0, 65840, '\p{Is_Numeric_Value=00000070000}', "");
Expect(1, 65840, '\p{^Is_Numeric_Value=00000070000}', "");
Expect(1, 65840, '\P{Is_Numeric_Value=00000070000}', "");
Expect(0, 65840, '\P{^Is_Numeric_Value=00000070000}', "");
Error('\p{Is_Nv= /a/+0007000_0}');
Error('\P{Is_Nv= /a/+0007000_0}');
Expect(1, 65841, '\p{Is_Nv: 0000007000_0}', "");
Expect(0, 65841, '\p{^Is_Nv: 0000007000_0}', "");
Expect(0, 65841, '\P{Is_Nv: 0000007000_0}', "");
Expect(1, 65841, '\P{^Is_Nv: 0000007000_0}', "");
Expect(0, 65840, '\p{Is_Nv: 0000007000_0}', "");
Expect(1, 65840, '\p{^Is_Nv: 0000007000_0}', "");
Expect(1, 65840, '\P{Is_Nv: 0000007000_0}', "");
Expect(0, 65840, '\P{^Is_Nv: 0000007000_0}', "");
Error('\p{Numeric_Value=	000000036/a/}');
Error('\P{Numeric_Value=	000000036/a/}');
Expect(1, 12977, '\p{Numeric_Value=0000_0003_6}', "");
Expect(0, 12977, '\p{^Numeric_Value=0000_0003_6}', "");
Expect(0, 12977, '\P{Numeric_Value=0000_0003_6}', "");
Expect(1, 12977, '\P{^Numeric_Value=0000_0003_6}', "");
Expect(0, 12976, '\p{Numeric_Value=0000_0003_6}', "");
Expect(1, 12976, '\p{^Numeric_Value=0000_0003_6}', "");
Expect(1, 12976, '\P{Numeric_Value=0000_0003_6}', "");
Expect(0, 12976, '\P{^Numeric_Value=0000_0003_6}', "");
Error('\p{Nv=-_03_6:=}');
Error('\P{Nv=-_03_6:=}');
Expect(1, 12977, '\p{Nv=0003_6}', "");
Expect(0, 12977, '\p{^Nv=0003_6}', "");
Expect(0, 12977, '\P{Nv=0003_6}', "");
Expect(1, 12977, '\P{^Nv=0003_6}', "");
Expect(0, 12976, '\p{Nv=0003_6}', "");
Expect(1, 12976, '\p{^Nv=0003_6}', "");
Expect(1, 12976, '\P{Nv=0003_6}', "");
Expect(0, 12976, '\P{^Nv=0003_6}', "");
Error('\p{Is_Numeric_Value=	-000036/a/}');
Error('\P{Is_Numeric_Value=	-000036/a/}');
Expect(1, 12977, '\p{Is_Numeric_Value=+00000036}', "");
Expect(0, 12977, '\p{^Is_Numeric_Value=+00000036}', "");
Expect(0, 12977, '\P{Is_Numeric_Value=+00000036}', "");
Expect(1, 12977, '\P{^Is_Numeric_Value=+00000036}', "");
Expect(0, 12976, '\p{Is_Numeric_Value=+00000036}', "");
Expect(1, 12976, '\p{^Is_Numeric_Value=+00000036}', "");
Expect(1, 12976, '\P{Is_Numeric_Value=+00000036}', "");
Expect(0, 12976, '\P{^Is_Numeric_Value=+00000036}', "");
Error('\p{Is_Nv=_/a/000000036}');
Error('\P{Is_Nv=_/a/000000036}');
Expect(1, 12977, '\p{Is_Nv:   +000000036}', "");
Expect(0, 12977, '\p{^Is_Nv:   +000000036}', "");
Expect(0, 12977, '\P{Is_Nv:   +000000036}', "");
Expect(1, 12977, '\P{^Is_Nv:   +000000036}', "");
Expect(0, 12976, '\p{Is_Nv:   +000000036}', "");
Expect(1, 12976, '\p{^Is_Nv:   +000000036}', "");
Expect(1, 12976, '\P{Is_Nv:   +000000036}', "");
Expect(0, 12976, '\P{^Is_Nv:   +000000036}', "");
Error('\p{Numeric_Value=:=- 00-3}');
Error('\P{Numeric_Value=:=- 00-3}');
Expect(1, 51, '\p{Numeric_Value=00_00_3}', "");
Expect(0, 51, '\p{^Numeric_Value=00_00_3}', "");
Expect(0, 51, '\P{Numeric_Value=00_00_3}', "");
Expect(1, 51, '\P{^Numeric_Value=00_00_3}', "");
Expect(0, 50, '\p{Numeric_Value=00_00_3}', "");
Expect(1, 50, '\p{^Numeric_Value=00_00_3}', "");
Expect(1, 50, '\P{Numeric_Value=00_00_3}', "");
Expect(0, 50, '\P{^Numeric_Value=00_00_3}', "");
Error('\p{Nv= 0 0	0:=0	003}');
Error('\P{Nv= 0 0	0:=0	003}');
Expect(1, 51, '\p{Nv=00_3}', "");
Expect(0, 51, '\p{^Nv=00_3}', "");
Expect(0, 51, '\P{Nv=00_3}', "");
Expect(1, 51, '\P{^Nv=00_3}', "");
Expect(0, 50, '\p{Nv=00_3}', "");
Expect(1, 50, '\p{^Nv=00_3}', "");
Expect(1, 50, '\P{Nv=00_3}', "");
Expect(0, 50, '\P{^Nv=00_3}', "");
Error('\p{Is_Numeric_Value= +000003/a/}');
Error('\P{Is_Numeric_Value= +000003/a/}');
Expect(1, 51, '\p{Is_Numeric_Value=+0003}', "");
Expect(0, 51, '\p{^Is_Numeric_Value=+0003}', "");
Expect(0, 51, '\P{Is_Numeric_Value=+0003}', "");
Expect(1, 51, '\P{^Is_Numeric_Value=+0003}', "");
Expect(0, 50, '\p{Is_Numeric_Value=+0003}', "");
Expect(1, 50, '\p{^Is_Numeric_Value=+0003}', "");
Expect(1, 50, '\P{Is_Numeric_Value=+0003}', "");
Expect(0, 50, '\P{^Is_Numeric_Value=+0003}', "");
Error('\p{Is_Nv=	/a/00003}');
Error('\P{Is_Nv=	/a/00003}');
Expect(1, 51, '\p{Is_Nv=000000003}', "");
Expect(0, 51, '\p{^Is_Nv=000000003}', "");
Expect(0, 51, '\P{Is_Nv=000000003}', "");
Expect(1, 51, '\P{^Is_Nv=000000003}', "");
Expect(0, 50, '\p{Is_Nv=000000003}', "");
Expect(1, 50, '\p{^Is_Nv=000000003}', "");
Expect(1, 50, '\P{Is_Nv=000000003}', "");
Expect(0, 50, '\P{^Is_Nv=000000003}', "");
Error('\p{Numeric_Value=:=+0 0_0	0-0_05000}');
Error('\P{Numeric_Value=:=+0 0_0	0-0_05000}');
Expect(1, 8577, '\p{Numeric_Value=05000}', "");
Expect(0, 8577, '\p{^Numeric_Value=05000}', "");
Expect(0, 8577, '\P{Numeric_Value=05000}', "");
Expect(1, 8577, '\P{^Numeric_Value=05000}', "");
Expect(0, 8576, '\p{Numeric_Value=05000}', "");
Expect(1, 8576, '\p{^Numeric_Value=05000}', "");
Expect(1, 8576, '\P{Numeric_Value=05000}', "");
Expect(0, 8576, '\P{^Numeric_Value=05000}', "");
Error('\p{Nv=--0	0 0-0	5000/a/}');
Error('\P{Nv=--0	0 0-0	5000/a/}');
Expect(1, 8577, '\p{Nv=0000000005000}', "");
Expect(0, 8577, '\p{^Nv=0000000005000}', "");
Expect(0, 8577, '\P{Nv=0000000005000}', "");
Expect(1, 8577, '\P{^Nv=0000000005000}', "");
Expect(0, 8576, '\p{Nv=0000000005000}', "");
Expect(1, 8576, '\p{^Nv=0000000005000}', "");
Expect(1, 8576, '\P{Nv=0000000005000}', "");
Expect(0, 8576, '\P{^Nv=0000000005000}', "");
Error('\p{Is_Numeric_Value= -500:=0}');
Error('\P{Is_Numeric_Value= -500:=0}');
Expect(1, 8577, '\p{Is_Numeric_Value=05000}', "");
Expect(0, 8577, '\p{^Is_Numeric_Value=05000}', "");
Expect(0, 8577, '\P{Is_Numeric_Value=05000}', "");
Expect(1, 8577, '\P{^Is_Numeric_Value=05000}', "");
Expect(0, 8576, '\p{Is_Numeric_Value=05000}', "");
Expect(1, 8576, '\p{^Is_Numeric_Value=05000}', "");
Expect(1, 8576, '\P{Is_Numeric_Value=05000}', "");
Expect(0, 8576, '\P{^Is_Numeric_Value=05000}', "");
Error('\p{Is_Nv=/a/000000005000}');
Error('\P{Is_Nv=/a/000000005000}');
Expect(1, 8577, '\p{Is_Nv=+5_0_00}', "");
Expect(0, 8577, '\p{^Is_Nv=+5_0_00}', "");
Expect(0, 8577, '\P{Is_Nv=+5_0_00}', "");
Expect(1, 8577, '\P{^Is_Nv=+5_0_00}', "");
Expect(0, 8576, '\p{Is_Nv=+5_0_00}', "");
Expect(1, 8576, '\p{^Is_Nv=+5_0_00}', "");
Expect(1, 8576, '\P{Is_Nv=+5_0_00}', "");
Expect(0, 8576, '\P{^Is_Nv=+5_0_00}', "");
Error('\p{Numeric_Value= :=0	000-0 09}');
Error('\P{Numeric_Value= :=0	000-0 09}');
Expect(1, 57, '\p{Numeric_Value=9}', "");
Expect(0, 57, '\p{^Numeric_Value=9}', "");
Expect(0, 57, '\P{Numeric_Value=9}', "");
Expect(1, 57, '\P{^Numeric_Value=9}', "");
Expect(0, 56, '\p{Numeric_Value=9}', "");
Expect(1, 56, '\p{^Numeric_Value=9}', "");
Expect(1, 56, '\P{Numeric_Value=9}', "");
Expect(0, 56, '\P{^Numeric_Value=9}', "");
Error('\p{Nv=_:=009}');
Error('\P{Nv=_:=009}');
Expect(1, 57, '\p{Nv=00_9}', "");
Expect(0, 57, '\p{^Nv=00_9}', "");
Expect(0, 57, '\P{Nv=00_9}', "");
Expect(1, 57, '\P{^Nv=00_9}', "");
Expect(0, 56, '\p{Nv=00_9}', "");
Expect(1, 56, '\p{^Nv=00_9}', "");
Expect(1, 56, '\P{Nv=00_9}', "");
Expect(0, 56, '\P{^Nv=00_9}', "");
Error('\p{Is_Numeric_Value=/a/ 000-9}');
Error('\P{Is_Numeric_Value=/a/ 000-9}');
Expect(1, 57, '\p{Is_Numeric_Value=0000009}', "");
Expect(0, 57, '\p{^Is_Numeric_Value=0000009}', "");
Expect(0, 57, '\P{Is_Numeric_Value=0000009}', "");
Expect(1, 57, '\P{^Is_Numeric_Value=0000009}', "");
Expect(0, 56, '\p{Is_Numeric_Value=0000009}', "");
Expect(1, 56, '\p{^Is_Numeric_Value=0000009}', "");
Expect(1, 56, '\P{Is_Numeric_Value=0000009}', "");
Expect(0, 56, '\P{^Is_Numeric_Value=0000009}', "");
Error('\p{Is_Nv=/a/--+0000000009}');
Error('\P{Is_Nv=/a/--+0000000009}');
Expect(1, 57, '\p{Is_Nv=0009}', "");
Expect(0, 57, '\p{^Is_Nv=0009}', "");
Expect(0, 57, '\P{Is_Nv=0009}', "");
Expect(1, 57, '\P{^Is_Nv=0009}', "");
Expect(0, 56, '\p{Is_Nv=0009}', "");
Expect(1, 56, '\p{^Is_Nv=0009}', "");
Expect(1, 56, '\P{Is_Nv=0009}', "");
Expect(0, 56, '\P{^Is_Nv=0009}', "");
Error('\p{Numeric_Value=:=  +0000010000}');
Error('\P{Numeric_Value=:=  +0000010000}');
Expect(1, 4988, '\p{Numeric_Value:	+0_1_0_000}', "");
Expect(0, 4988, '\p{^Numeric_Value:	+0_1_0_000}', "");
Expect(0, 4988, '\P{Numeric_Value:	+0_1_0_000}', "");
Expect(1, 4988, '\P{^Numeric_Value:	+0_1_0_000}', "");
Expect(0, 4987, '\p{Numeric_Value:	+0_1_0_000}', "");
Expect(1, 4987, '\p{^Numeric_Value:	+0_1_0_000}', "");
Expect(1, 4987, '\P{Numeric_Value:	+0_1_0_000}', "");
Expect(0, 4987, '\P{^Numeric_Value:	+0_1_0_000}', "");
Error('\p{Nv=_/a/0000010000}');
Error('\P{Nv=_/a/0000010000}');
Expect(1, 4988, '\p{Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(0, 4988, '\p{^Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(0, 4988, '\P{Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(1, 4988, '\P{^Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(0, 4987, '\p{Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(1, 4987, '\p{^Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(1, 4987, '\P{Nv=0_0_0_0_0_0_1_0_0_00}', "");
Expect(0, 4987, '\P{^Nv=0_0_0_0_0_0_1_0_0_00}', "");
Error('\p{Is_Numeric_Value:   /a/+1000	0}');
Error('\P{Is_Numeric_Value:   /a/+1000	0}');
Expect(1, 4988, '\p{Is_Numeric_Value:0001000_0}', "");
Expect(0, 4988, '\p{^Is_Numeric_Value:0001000_0}', "");
Expect(0, 4988, '\P{Is_Numeric_Value:0001000_0}', "");
Expect(1, 4988, '\P{^Is_Numeric_Value:0001000_0}', "");
Expect(0, 4987, '\p{Is_Numeric_Value:0001000_0}', "");
Expect(1, 4987, '\p{^Is_Numeric_Value:0001000_0}', "");
Expect(1, 4987, '\P{Is_Numeric_Value:0001000_0}', "");
Expect(0, 4987, '\P{^Is_Numeric_Value:0001000_0}', "");
Error('\p{Is_Nv=	:=+00000000010000}');
Error('\P{Is_Nv=	:=+00000000010000}');
Expect(1, 4988, '\p{Is_Nv=+01000_0}', "");
Expect(0, 4988, '\p{^Is_Nv=+01000_0}', "");
Expect(0, 4988, '\P{Is_Nv=+01000_0}', "");
Expect(1, 4988, '\P{^Is_Nv=+01000_0}', "");
Expect(0, 4987, '\p{Is_Nv=+01000_0}', "");
Expect(1, 4987, '\p{^Is_Nv=+01000_0}', "");
Expect(1, 4987, '\P{Is_Nv=+01000_0}', "");
Expect(0, 4987, '\P{^Is_Nv=+01000_0}', "");
Error('\p{Numeric_Value= 00047:=}');
Error('\P{Numeric_Value= 00047:=}');
Expect(1, 12988, '\p{Numeric_Value=0047}', "");
Expect(0, 12988, '\p{^Numeric_Value=0047}', "");
Expect(0, 12988, '\P{Numeric_Value=0047}', "");
Expect(1, 12988, '\P{^Numeric_Value=0047}', "");
Expect(0, 12987, '\p{Numeric_Value=0047}', "");
Expect(1, 12987, '\p{^Numeric_Value=0047}', "");
Expect(1, 12987, '\P{Numeric_Value=0047}', "");
Expect(0, 12987, '\P{^Numeric_Value=0047}', "");
Error('\p{Nv= _04:=7}');
Error('\P{Nv= _04:=7}');
Expect(1, 12988, '\p{Nv=+4_7}', "");
Expect(0, 12988, '\p{^Nv=+4_7}', "");
Expect(0, 12988, '\P{Nv=+4_7}', "");
Expect(1, 12988, '\P{^Nv=+4_7}', "");
Expect(0, 12987, '\p{Nv=+4_7}', "");
Expect(1, 12987, '\p{^Nv=+4_7}', "");
Expect(1, 12987, '\P{Nv=+4_7}', "");
Expect(0, 12987, '\P{^Nv=+4_7}', "");
Error('\p{Is_Numeric_Value=	/a/+000000047}');
Error('\P{Is_Numeric_Value=	/a/+000000047}');
Expect(1, 12988, '\p{Is_Numeric_Value=00000_00004_7}', "");
Expect(0, 12988, '\p{^Is_Numeric_Value=00000_00004_7}', "");
Expect(0, 12988, '\P{Is_Numeric_Value=00000_00004_7}', "");
Expect(1, 12988, '\P{^Is_Numeric_Value=00000_00004_7}', "");
Expect(0, 12987, '\p{Is_Numeric_Value=00000_00004_7}', "");
Expect(1, 12987, '\p{^Is_Numeric_Value=00000_00004_7}', "");
Expect(1, 12987, '\P{Is_Numeric_Value=00000_00004_7}', "");
Expect(0, 12987, '\P{^Is_Numeric_Value=00000_00004_7}', "");
Error('\p{Is_Nv=	:=+000047}');
Error('\P{Is_Nv=	:=+000047}');
Expect(1, 12988, '\p{Is_Nv:	+00000000047}', "");
Expect(0, 12988, '\p{^Is_Nv:	+00000000047}', "");
Expect(0, 12988, '\P{Is_Nv:	+00000000047}', "");
Expect(1, 12988, '\P{^Is_Nv:	+00000000047}', "");
Expect(0, 12987, '\p{Is_Nv:	+00000000047}', "");
Expect(1, 12987, '\p{^Is_Nv:	+00000000047}', "");
Expect(1, 12987, '\P{Is_Nv:	+00000000047}', "");
Expect(0, 12987, '\P{^Is_Nv:	+00000000047}', "");
Error('\p{Numeric_Value=:=	 000001/06}');
Error('\P{Numeric_Value=:=	 000001/06}');
Expect(1, 8537, '\p{Numeric_Value: 000001/00000006}', "");
Expect(0, 8537, '\p{^Numeric_Value: 000001/00000006}', "");
Expect(0, 8537, '\P{Numeric_Value: 000001/00000006}', "");
Expect(1, 8537, '\P{^Numeric_Value: 000001/00000006}', "");
Expect(0, 8536, '\p{Numeric_Value: 000001/00000006}', "");
Expect(1, 8536, '\p{^Numeric_Value: 000001/00000006}', "");
Expect(1, 8536, '\P{Numeric_Value: 000001/00000006}', "");
Expect(0, 8536, '\P{^Numeric_Value: 000001/00000006}', "");
Error('\p{Numeric_Value=0.17}');
Error('\P{Numeric_Value=0.17}');
Expect(1, 8537, '\p{Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Numeric_Value=0.167}', "");
Error('\p{Nv=/a/001/6}');
Error('\P{Nv=/a/001/6}');
Expect(1, 8537, '\p{Nv: 0001/0000000006}', "");
Expect(0, 8537, '\p{^Nv: 0001/0000000006}', "");
Expect(0, 8537, '\P{Nv: 0001/0000000006}', "");
Expect(1, 8537, '\P{^Nv: 0001/0000000006}', "");
Expect(0, 8536, '\p{Nv: 0001/0000000006}', "");
Expect(1, 8536, '\p{^Nv: 0001/0000000006}', "");
Expect(1, 8536, '\P{Nv: 0001/0000000006}', "");
Expect(0, 8536, '\P{^Nv: 0001/0000000006}', "");
Error('\p{Nv=0.17}');
Error('\P{Nv=0.17}');
Expect(1, 8537, '\p{Nv=0.167}', "");
Expect(0, 8537, '\p{^Nv=0.167}', "");
Expect(0, 8537, '\P{Nv=0.167}', "");
Expect(1, 8537, '\P{^Nv=0.167}', "");
Expect(0, 8536, '\p{Nv=0.167}', "");
Expect(1, 8536, '\p{^Nv=0.167}', "");
Expect(1, 8536, '\P{Nv=0.167}', "");
Expect(0, 8536, '\P{^Nv=0.167}', "");
Error('\p{Is_Numeric_Value=:=001/000000006}');
Error('\P{Is_Numeric_Value=:=001/000000006}');
Expect(1, 8537, '\p{Is_Numeric_Value=0001/0000000006}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=0001/0000000006}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=0001/0000000006}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=0001/0000000006}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=0001/0000000006}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=0001/0000000006}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=0001/0000000006}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=0001/0000000006}', "");
Error('\p{Is_Numeric_Value=0.17}');
Error('\P{Is_Numeric_Value=0.17}');
Expect(1, 8537, '\p{Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=0.167}', "");
Error('\p{Is_Nv=_/a/0000000001/006}');
Error('\P{Is_Nv=_/a/0000000001/006}');
Expect(1, 8537, '\p{Is_Nv=+000000001/6}', "");
Expect(0, 8537, '\p{^Is_Nv=+000000001/6}', "");
Expect(0, 8537, '\P{Is_Nv=+000000001/6}', "");
Expect(1, 8537, '\P{^Is_Nv=+000000001/6}', "");
Expect(0, 8536, '\p{Is_Nv=+000000001/6}', "");
Expect(1, 8536, '\p{^Is_Nv=+000000001/6}', "");
Expect(1, 8536, '\P{Is_Nv=+000000001/6}', "");
Expect(0, 8536, '\P{^Is_Nv=+000000001/6}', "");
Error('\p{Is_Nv=0.17}');
Error('\P{Is_Nv=0.17}');
Expect(1, 8537, '\p{Is_Nv=0.167}', "");
Expect(0, 8537, '\p{^Is_Nv=0.167}', "");
Expect(0, 8537, '\P{Is_Nv=0.167}', "");
Expect(1, 8537, '\P{^Is_Nv=0.167}', "");
Expect(0, 8536, '\p{Is_Nv=0.167}', "");
Expect(1, 8536, '\p{^Is_Nv=0.167}', "");
Expect(1, 8536, '\P{Is_Nv=0.167}', "");
Expect(0, 8536, '\P{^Is_Nv=0.167}', "");
Error('\p{Numeric_Value=/a/	 0038}');
Error('\P{Numeric_Value=/a/	 0038}');
Expect(1, 12979, '\p{Numeric_Value: 00038}', "");
Expect(0, 12979, '\p{^Numeric_Value: 00038}', "");
Expect(0, 12979, '\P{Numeric_Value: 00038}', "");
Expect(1, 12979, '\P{^Numeric_Value: 00038}', "");
Expect(0, 12978, '\p{Numeric_Value: 00038}', "");
Expect(1, 12978, '\p{^Numeric_Value: 00038}', "");
Expect(1, 12978, '\P{Numeric_Value: 00038}', "");
Expect(0, 12978, '\P{^Numeric_Value: 00038}', "");
Error('\p{Nv:   	/a/00000038}');
Error('\P{Nv:   	/a/00000038}');
Expect(1, 12979, '\p{Nv=03_8}', "");
Expect(0, 12979, '\p{^Nv=03_8}', "");
Expect(0, 12979, '\P{Nv=03_8}', "");
Expect(1, 12979, '\P{^Nv=03_8}', "");
Expect(0, 12978, '\p{Nv=03_8}', "");
Expect(1, 12978, '\p{^Nv=03_8}', "");
Expect(1, 12978, '\P{Nv=03_8}', "");
Expect(0, 12978, '\P{^Nv=03_8}', "");
Error('\p{Is_Numeric_Value=-:=+0003 8}');
Error('\P{Is_Numeric_Value=-:=+0003 8}');
Expect(1, 12979, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(0, 12979, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(0, 12979, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(1, 12979, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(0, 12978, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(1, 12978, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(1, 12978, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Expect(0, 12978, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_038}', "");
Error('\p{Is_Nv:/a/	 000038}');
Error('\P{Is_Nv:/a/	 000038}');
Expect(1, 12979, '\p{Is_Nv=000_003_8}', "");
Expect(0, 12979, '\p{^Is_Nv=000_003_8}', "");
Expect(0, 12979, '\P{Is_Nv=000_003_8}', "");
Expect(1, 12979, '\P{^Is_Nv=000_003_8}', "");
Expect(0, 12978, '\p{Is_Nv=000_003_8}', "");
Expect(1, 12978, '\p{^Is_Nv=000_003_8}', "");
Expect(1, 12978, '\P{Is_Nv=000_003_8}', "");
Expect(0, 12978, '\P{^Is_Nv=000_003_8}', "");
Error('\p{Numeric_Value=  +000000008:=}');
Error('\P{Numeric_Value=  +000000008:=}');
Expect(1, 56, '\p{Numeric_Value=08}', "");
Expect(0, 56, '\p{^Numeric_Value=08}', "");
Expect(0, 56, '\P{Numeric_Value=08}', "");
Expect(1, 56, '\P{^Numeric_Value=08}', "");
Expect(0, 55, '\p{Numeric_Value=08}', "");
Expect(1, 55, '\p{^Numeric_Value=08}', "");
Expect(1, 55, '\P{Numeric_Value=08}', "");
Expect(0, 55, '\P{^Numeric_Value=08}', "");
Error('\p{Nv= 008/a/}');
Error('\P{Nv= 008/a/}');
Expect(1, 56, '\p{Nv=00_00_00_8}', "");
Expect(0, 56, '\p{^Nv=00_00_00_8}', "");
Expect(0, 56, '\P{Nv=00_00_00_8}', "");
Expect(1, 56, '\P{^Nv=00_00_00_8}', "");
Expect(0, 55, '\p{Nv=00_00_00_8}', "");
Expect(1, 55, '\p{^Nv=00_00_00_8}', "");
Expect(1, 55, '\P{Nv=00_00_00_8}', "");
Expect(0, 55, '\P{^Nv=00_00_00_8}', "");
Error('\p{Is_Numeric_Value=:=_ 00000008}');
Error('\P{Is_Numeric_Value=:=_ 00000008}');
Expect(1, 56, '\p{Is_Numeric_Value:0000_8}', "");
Expect(0, 56, '\p{^Is_Numeric_Value:0000_8}', "");
Expect(0, 56, '\P{Is_Numeric_Value:0000_8}', "");
Expect(1, 56, '\P{^Is_Numeric_Value:0000_8}', "");
Expect(0, 55, '\p{Is_Numeric_Value:0000_8}', "");
Expect(1, 55, '\p{^Is_Numeric_Value:0000_8}', "");
Expect(1, 55, '\P{Is_Numeric_Value:0000_8}', "");
Expect(0, 55, '\P{^Is_Numeric_Value:0000_8}', "");
Error('\p{Is_Nv: /a/-08}');
Error('\P{Is_Nv: /a/-08}');
Expect(1, 56, '\p{Is_Nv=000_000_08}', "");
Expect(0, 56, '\p{^Is_Nv=000_000_08}', "");
Expect(0, 56, '\P{Is_Nv=000_000_08}', "");
Expect(1, 56, '\P{^Is_Nv=000_000_08}', "");
Expect(0, 55, '\p{Is_Nv=000_000_08}', "");
Expect(1, 55, '\p{^Is_Nv=000_000_08}', "");
Expect(1, 55, '\P{Is_Nv=000_000_08}', "");
Expect(0, 55, '\P{^Is_Nv=000_000_08}', "");
Error('\p{Numeric_Value= /a/0000000003/04}');
Error('\P{Numeric_Value= /a/0000000003/04}');
Expect(1, 190, '\p{Numeric_Value=0000003/04}', "");
Expect(0, 190, '\p{^Numeric_Value=0000003/04}', "");
Expect(0, 190, '\P{Numeric_Value=0000003/04}', "");
Expect(1, 190, '\P{^Numeric_Value=0000003/04}', "");
Expect(0, 189, '\p{Numeric_Value=0000003/04}', "");
Expect(1, 189, '\p{^Numeric_Value=0000003/04}', "");
Expect(1, 189, '\P{Numeric_Value=0000003/04}', "");
Expect(0, 189, '\P{^Numeric_Value=0000003/04}', "");
Expect(1, 190, '\p{Numeric_Value: 0.750}', "");
Expect(0, 190, '\p{^Numeric_Value: 0.750}', "");
Expect(0, 190, '\P{Numeric_Value: 0.750}', "");
Expect(1, 190, '\P{^Numeric_Value: 0.750}', "");
Expect(0, 189, '\p{Numeric_Value: 0.750}', "");
Expect(1, 189, '\p{^Numeric_Value: 0.750}', "");
Expect(1, 189, '\P{Numeric_Value: 0.750}', "");
Expect(0, 189, '\P{^Numeric_Value: 0.750}', "");
Error('\p{Nv=/a/- 00000003/4}');
Error('\P{Nv=/a/- 00000003/4}');
Expect(1, 190, '\p{Nv=03/0000000004}', "");
Expect(0, 190, '\p{^Nv=03/0000000004}', "");
Expect(0, 190, '\P{Nv=03/0000000004}', "");
Expect(1, 190, '\P{^Nv=03/0000000004}', "");
Expect(0, 189, '\p{Nv=03/0000000004}', "");
Expect(1, 189, '\p{^Nv=03/0000000004}', "");
Expect(1, 189, '\P{Nv=03/0000000004}', "");
Expect(0, 189, '\P{^Nv=03/0000000004}', "");
Expect(1, 190, '\p{Nv=0.750}', "");
Expect(0, 190, '\p{^Nv=0.750}', "");
Expect(0, 190, '\P{Nv=0.750}', "");
Expect(1, 190, '\P{^Nv=0.750}', "");
Expect(0, 189, '\p{Nv=0.750}', "");
Expect(1, 189, '\p{^Nv=0.750}', "");
Expect(1, 189, '\P{Nv=0.750}', "");
Expect(0, 189, '\P{^Nv=0.750}', "");
Error('\p{Is_Numeric_Value=/a/--+00003/004}');
Error('\P{Is_Numeric_Value=/a/--+00003/004}');
Expect(1, 190, '\p{Is_Numeric_Value=0000003/000004}', "");
Expect(0, 190, '\p{^Is_Numeric_Value=0000003/000004}', "");
Expect(0, 190, '\P{Is_Numeric_Value=0000003/000004}', "");
Expect(1, 190, '\P{^Is_Numeric_Value=0000003/000004}', "");
Expect(0, 189, '\p{Is_Numeric_Value=0000003/000004}', "");
Expect(1, 189, '\p{^Is_Numeric_Value=0000003/000004}', "");
Expect(1, 189, '\P{Is_Numeric_Value=0000003/000004}', "");
Expect(0, 189, '\P{^Is_Numeric_Value=0000003/000004}', "");
Expect(1, 190, '\p{Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\p{^Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\P{Is_Numeric_Value=0.750}', "");
Expect(1, 190, '\P{^Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\p{Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\p{^Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\P{Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\P{^Is_Numeric_Value=0.750}', "");
Error('\p{Is_Nv=_ 0000003/04:=}');
Error('\P{Is_Nv=_ 0000003/04:=}');
Expect(1, 190, '\p{Is_Nv=0003/00000004}', "");
Expect(0, 190, '\p{^Is_Nv=0003/00000004}', "");
Expect(0, 190, '\P{Is_Nv=0003/00000004}', "");
Expect(1, 190, '\P{^Is_Nv=0003/00000004}', "");
Expect(0, 189, '\p{Is_Nv=0003/00000004}', "");
Expect(1, 189, '\p{^Is_Nv=0003/00000004}', "");
Expect(1, 189, '\P{Is_Nv=0003/00000004}', "");
Expect(0, 189, '\P{^Is_Nv=0003/00000004}', "");
Expect(1, 190, '\p{Is_Nv=0.750}', "");
Expect(0, 190, '\p{^Is_Nv=0.750}', "");
Expect(0, 190, '\P{Is_Nv=0.750}', "");
Expect(1, 190, '\P{^Is_Nv=0.750}', "");
Expect(0, 189, '\p{Is_Nv=0.750}', "");
Expect(1, 189, '\p{^Is_Nv=0.750}', "");
Expect(1, 189, '\P{Is_Nv=0.750}', "");
Expect(0, 189, '\P{^Is_Nv=0.750}', "");
Error('\p{Numeric_Value= /a/0000000004}');
Error('\P{Numeric_Value= /a/0000000004}');
Expect(1, 52, '\p{Numeric_Value=004}', "");
Expect(0, 52, '\p{^Numeric_Value=004}', "");
Expect(0, 52, '\P{Numeric_Value=004}', "");
Expect(1, 52, '\P{^Numeric_Value=004}', "");
Expect(0, 51, '\p{Numeric_Value=004}', "");
Expect(1, 51, '\p{^Numeric_Value=004}', "");
Expect(1, 51, '\P{Numeric_Value=004}', "");
Expect(0, 51, '\P{^Numeric_Value=004}', "");
Error('\p{Nv=_	0000004:=}');
Error('\P{Nv=_	0000004:=}');
Expect(1, 52, '\p{Nv=+0004}', "");
Expect(0, 52, '\p{^Nv=+0004}', "");
Expect(0, 52, '\P{Nv=+0004}', "");
Expect(1, 52, '\P{^Nv=+0004}', "");
Expect(0, 51, '\p{Nv=+0004}', "");
Expect(1, 51, '\p{^Nv=+0004}', "");
Expect(1, 51, '\P{Nv=+0004}', "");
Expect(0, 51, '\P{^Nv=+0004}', "");
Error('\p{Is_Numeric_Value=/a/		4}');
Error('\P{Is_Numeric_Value=/a/		4}');
Expect(1, 52, '\p{Is_Numeric_Value=00004}', "");
Expect(0, 52, '\p{^Is_Numeric_Value=00004}', "");
Expect(0, 52, '\P{Is_Numeric_Value=00004}', "");
Expect(1, 52, '\P{^Is_Numeric_Value=00004}', "");
Expect(0, 51, '\p{Is_Numeric_Value=00004}', "");
Expect(1, 51, '\p{^Is_Numeric_Value=00004}', "");
Expect(1, 51, '\P{Is_Numeric_Value=00004}', "");
Expect(0, 51, '\P{^Is_Numeric_Value=00004}', "");
Error('\p{Is_Nv=_:=+04}');
Error('\P{Is_Nv=_:=+04}');
Expect(1, 52, '\p{Is_Nv=0000_0000_04}', "");
Expect(0, 52, '\p{^Is_Nv=0000_0000_04}', "");
Expect(0, 52, '\P{Is_Nv=0000_0000_04}', "");
Expect(1, 52, '\P{^Is_Nv=0000_0000_04}', "");
Expect(0, 51, '\p{Is_Nv=0000_0000_04}', "");
Expect(1, 51, '\p{^Is_Nv=0000_0000_04}', "");
Expect(1, 51, '\P{Is_Nv=0000_0000_04}', "");
Expect(0, 51, '\P{^Is_Nv=0000_0000_04}', "");
Error('\p{Numeric_Value:/a/ 	+0000000034}');
Error('\P{Numeric_Value:/a/ 	+0000000034}');
Expect(1, 12894, '\p{Numeric_Value=+03_4}', "");
Expect(0, 12894, '\p{^Numeric_Value=+03_4}', "");
Expect(0, 12894, '\P{Numeric_Value=+03_4}', "");
Expect(1, 12894, '\P{^Numeric_Value=+03_4}', "");
Expect(0, 12893, '\p{Numeric_Value=+03_4}', "");
Expect(1, 12893, '\p{^Numeric_Value=+03_4}', "");
Expect(1, 12893, '\P{Numeric_Value=+03_4}', "");
Expect(0, 12893, '\P{^Numeric_Value=+03_4}', "");
Error('\p{Nv=/a/_	0	0_0	034}');
Error('\P{Nv=/a/_	0	0_0	034}');
Expect(1, 12894, '\p{Nv=0034}', "");
Expect(0, 12894, '\p{^Nv=0034}', "");
Expect(0, 12894, '\P{Nv=0034}', "");
Expect(1, 12894, '\P{^Nv=0034}', "");
Expect(0, 12893, '\p{Nv=0034}', "");
Expect(1, 12893, '\p{^Nv=0034}', "");
Expect(1, 12893, '\P{Nv=0034}', "");
Expect(0, 12893, '\P{^Nv=0034}', "");
Error('\p{Is_Numeric_Value=_0034/a/}');
Error('\P{Is_Numeric_Value=_0034/a/}');
Expect(1, 12894, '\p{Is_Numeric_Value=0000034}', "");
Expect(0, 12894, '\p{^Is_Numeric_Value=0000034}', "");
Expect(0, 12894, '\P{Is_Numeric_Value=0000034}', "");
Expect(1, 12894, '\P{^Is_Numeric_Value=0000034}', "");
Expect(0, 12893, '\p{Is_Numeric_Value=0000034}', "");
Expect(1, 12893, '\p{^Is_Numeric_Value=0000034}', "");
Expect(1, 12893, '\P{Is_Numeric_Value=0000034}', "");
Expect(0, 12893, '\P{^Is_Numeric_Value=0000034}', "");
Error('\p{Is_Nv=-+34/a/}');
Error('\P{Is_Nv=-+34/a/}');
Expect(1, 12894, '\p{Is_Nv: 00_00_00_34}', "");
Expect(0, 12894, '\p{^Is_Nv: 00_00_00_34}', "");
Expect(0, 12894, '\P{Is_Nv: 00_00_00_34}', "");
Expect(1, 12894, '\P{^Is_Nv: 00_00_00_34}', "");
Expect(0, 12893, '\p{Is_Nv: 00_00_00_34}', "");
Expect(1, 12893, '\p{^Is_Nv: 00_00_00_34}', "");
Expect(1, 12893, '\P{Is_Nv: 00_00_00_34}', "");
Expect(0, 12893, '\P{^Is_Nv: 00_00_00_34}', "");
Error('\p{Numeric_Value=		0037/a/}');
Error('\P{Numeric_Value=		0037/a/}');
Expect(1, 12978, '\p{Numeric_Value=3_7}', "");
Expect(0, 12978, '\p{^Numeric_Value=3_7}', "");
Expect(0, 12978, '\P{Numeric_Value=3_7}', "");
Expect(1, 12978, '\P{^Numeric_Value=3_7}', "");
Expect(0, 12977, '\p{Numeric_Value=3_7}', "");
Expect(1, 12977, '\p{^Numeric_Value=3_7}', "");
Expect(1, 12977, '\P{Numeric_Value=3_7}', "");
Expect(0, 12977, '\P{^Numeric_Value=3_7}', "");
Error('\p{Nv=:=	_+00000037}');
Error('\P{Nv=:=	_+00000037}');
Expect(1, 12978, '\p{Nv=00000037}', "");
Expect(0, 12978, '\p{^Nv=00000037}', "");
Expect(0, 12978, '\P{Nv=00000037}', "");
Expect(1, 12978, '\P{^Nv=00000037}', "");
Expect(0, 12977, '\p{Nv=00000037}', "");
Expect(1, 12977, '\p{^Nv=00000037}', "");
Expect(1, 12977, '\P{Nv=00000037}', "");
Expect(0, 12977, '\P{^Nv=00000037}', "");
Error('\p{Is_Numeric_Value:-	000000037:=}');
Error('\P{Is_Numeric_Value:-	000000037:=}');
Expect(1, 12978, '\p{Is_Numeric_Value=+0000000037}', "");
Expect(0, 12978, '\p{^Is_Numeric_Value=+0000000037}', "");
Expect(0, 12978, '\P{Is_Numeric_Value=+0000000037}', "");
Expect(1, 12978, '\P{^Is_Numeric_Value=+0000000037}', "");
Expect(0, 12977, '\p{Is_Numeric_Value=+0000000037}', "");
Expect(1, 12977, '\p{^Is_Numeric_Value=+0000000037}', "");
Expect(1, 12977, '\P{Is_Numeric_Value=+0000000037}', "");
Expect(0, 12977, '\P{^Is_Numeric_Value=+0000000037}', "");
Error('\p{Is_Nv=	 +0000000037:=}');
Error('\P{Is_Nv=	 +0000000037:=}');
Expect(1, 12978, '\p{Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(0, 12978, '\p{^Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(0, 12978, '\P{Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(1, 12978, '\P{^Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(0, 12977, '\p{Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(1, 12977, '\p{^Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(1, 12977, '\P{Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Expect(0, 12977, '\P{^Is_Nv=0_0_0_0_0_0_0_0_0_37}', "");
Error('\p{Numeric_Value:		/a/+0005/000002}');
Error('\P{Numeric_Value:		/a/+0005/000002}');
Expect(1, 3884, '\p{Numeric_Value:	5/0000002}', "");
Expect(0, 3884, '\p{^Numeric_Value:	5/0000002}', "");
Expect(0, 3884, '\P{Numeric_Value:	5/0000002}', "");
Expect(1, 3884, '\P{^Numeric_Value:	5/0000002}', "");
Expect(0, 3883, '\p{Numeric_Value:	5/0000002}', "");
Expect(1, 3883, '\p{^Numeric_Value:	5/0000002}', "");
Expect(1, 3883, '\P{Numeric_Value:	5/0000002}', "");
Expect(0, 3883, '\P{^Numeric_Value:	5/0000002}', "");
Expect(1, 3884, '\p{Numeric_Value:   2.500}', "");
Expect(0, 3884, '\p{^Numeric_Value:   2.500}', "");
Expect(0, 3884, '\P{Numeric_Value:   2.500}', "");
Expect(1, 3884, '\P{^Numeric_Value:   2.500}', "");
Expect(0, 3883, '\p{Numeric_Value:   2.500}', "");
Expect(1, 3883, '\p{^Numeric_Value:   2.500}', "");
Expect(1, 3883, '\P{Numeric_Value:   2.500}', "");
Expect(0, 3883, '\P{^Numeric_Value:   2.500}', "");
Error('\p{Nv=/a/_+0005/000000002}');
Error('\P{Nv=/a/_+0005/000000002}');
Expect(1, 3884, '\p{Nv=0000000005/02}', "");
Expect(0, 3884, '\p{^Nv=0000000005/02}', "");
Expect(0, 3884, '\P{Nv=0000000005/02}', "");
Expect(1, 3884, '\P{^Nv=0000000005/02}', "");
Expect(0, 3883, '\p{Nv=0000000005/02}', "");
Expect(1, 3883, '\p{^Nv=0000000005/02}', "");
Expect(1, 3883, '\P{Nv=0000000005/02}', "");
Expect(0, 3883, '\P{^Nv=0000000005/02}', "");
Expect(1, 3884, '\p{Nv=2.500}', "");
Expect(0, 3884, '\p{^Nv=2.500}', "");
Expect(0, 3884, '\P{Nv=2.500}', "");
Expect(1, 3884, '\P{^Nv=2.500}', "");
Expect(0, 3883, '\p{Nv=2.500}', "");
Expect(1, 3883, '\p{^Nv=2.500}', "");
Expect(1, 3883, '\P{Nv=2.500}', "");
Expect(0, 3883, '\P{^Nv=2.500}', "");
Error('\p{Is_Numeric_Value= 5/0002/a/}');
Error('\P{Is_Numeric_Value= 5/0002/a/}');
Expect(1, 3884, '\p{Is_Numeric_Value=05/000002}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value=05/000002}', "");
Expect(0, 3884, '\P{Is_Numeric_Value=05/000002}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value=05/000002}', "");
Expect(0, 3883, '\p{Is_Numeric_Value=05/000002}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value=05/000002}', "");
Expect(1, 3883, '\P{Is_Numeric_Value=05/000002}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value=05/000002}', "");
Expect(1, 3884, '\p{Is_Numeric_Value=2.500}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value=2.500}', "");
Expect(0, 3884, '\P{Is_Numeric_Value=2.500}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value=2.500}', "");
Expect(0, 3883, '\p{Is_Numeric_Value=2.500}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value=2.500}', "");
Expect(1, 3883, '\P{Is_Numeric_Value=2.500}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value=2.500}', "");
Error('\p{Is_Nv=005/00002:=}');
Error('\P{Is_Nv=005/00002:=}');
Expect(1, 3884, '\p{Is_Nv=000000005/02}', "");
Expect(0, 3884, '\p{^Is_Nv=000000005/02}', "");
Expect(0, 3884, '\P{Is_Nv=000000005/02}', "");
Expect(1, 3884, '\P{^Is_Nv=000000005/02}', "");
Expect(0, 3883, '\p{Is_Nv=000000005/02}', "");
Expect(1, 3883, '\p{^Is_Nv=000000005/02}', "");
Expect(1, 3883, '\P{Is_Nv=000000005/02}', "");
Expect(0, 3883, '\P{^Is_Nv=000000005/02}', "");
Expect(1, 3884, '\p{Is_Nv=2.500}', "");
Expect(0, 3884, '\p{^Is_Nv=2.500}', "");
Expect(0, 3884, '\P{Is_Nv=2.500}', "");
Expect(1, 3884, '\P{^Is_Nv=2.500}', "");
Expect(0, 3883, '\p{Is_Nv=2.500}', "");
Expect(1, 3883, '\p{^Is_Nv=2.500}', "");
Expect(1, 3883, '\P{Is_Nv=2.500}', "");
Expect(0, 3883, '\P{^Is_Nv=2.500}', "");
Error('\p{Numeric_Value=_ 00	00	0/a/0_0_1_000}');
Error('\P{Numeric_Value=_ 00	00	0/a/0_0_1_000}');
Expect(1, 3058, '\p{Numeric_Value=00_00_00_01_000}', "");
Expect(0, 3058, '\p{^Numeric_Value=00_00_00_01_000}', "");
Expect(0, 3058, '\P{Numeric_Value=00_00_00_01_000}', "");
Expect(1, 3058, '\P{^Numeric_Value=00_00_00_01_000}', "");
Expect(0, 3057, '\p{Numeric_Value=00_00_00_01_000}', "");
Expect(1, 3057, '\p{^Numeric_Value=00_00_00_01_000}', "");
Expect(1, 3057, '\P{Numeric_Value=00_00_00_01_000}', "");
Expect(0, 3057, '\P{^Numeric_Value=00_00_00_01_000}', "");
Error('\p{Nv= /a/00001000}');
Error('\P{Nv= /a/00001000}');
Expect(1, 3058, '\p{Nv:   0001000}', "");
Expect(0, 3058, '\p{^Nv:   0001000}', "");
Expect(0, 3058, '\P{Nv:   0001000}', "");
Expect(1, 3058, '\P{^Nv:   0001000}', "");
Expect(0, 3057, '\p{Nv:   0001000}', "");
Expect(1, 3057, '\p{^Nv:   0001000}', "");
Expect(1, 3057, '\P{Nv:   0001000}', "");
Expect(0, 3057, '\P{^Nv:   0001000}', "");
Error('\p{Is_Numeric_Value=-+0	0 0:=0	0_0 1000}');
Error('\P{Is_Numeric_Value=-+0	0 0:=0	0_0 1000}');
Expect(1, 3058, '\p{Is_Numeric_Value=0000001000}', "");
Expect(0, 3058, '\p{^Is_Numeric_Value=0000001000}', "");
Expect(0, 3058, '\P{Is_Numeric_Value=0000001000}', "");
Expect(1, 3058, '\P{^Is_Numeric_Value=0000001000}', "");
Expect(0, 3057, '\p{Is_Numeric_Value=0000001000}', "");
Expect(1, 3057, '\p{^Is_Numeric_Value=0000001000}', "");
Expect(1, 3057, '\P{Is_Numeric_Value=0000001000}', "");
Expect(0, 3057, '\P{^Is_Numeric_Value=0000001000}', "");
Error('\p{Is_Nv=-_+01	00	0:=}');
Error('\P{Is_Nv=-_+01	00	0:=}');
Expect(1, 3058, '\p{Is_Nv=1_0_00}', "");
Expect(0, 3058, '\p{^Is_Nv=1_0_00}', "");
Expect(0, 3058, '\P{Is_Nv=1_0_00}', "");
Expect(1, 3058, '\P{^Is_Nv=1_0_00}', "");
Expect(0, 3057, '\p{Is_Nv=1_0_00}', "");
Expect(1, 3057, '\p{^Is_Nv=1_0_00}', "");
Expect(1, 3057, '\P{Is_Nv=1_0_00}', "");
Expect(0, 3057, '\P{^Is_Nv=1_0_00}', "");
Error('\p{Numeric_Value: 	00/a/00	00 00	04_3}');
Error('\P{Numeric_Value: 	00/a/00	00 00	04_3}');
Expect(1, 12984, '\p{Numeric_Value=4_3}', "");
Expect(0, 12984, '\p{^Numeric_Value=4_3}', "");
Expect(0, 12984, '\P{Numeric_Value=4_3}', "");
Expect(1, 12984, '\P{^Numeric_Value=4_3}', "");
Expect(0, 12983, '\p{Numeric_Value=4_3}', "");
Expect(1, 12983, '\p{^Numeric_Value=4_3}', "");
Expect(1, 12983, '\P{Numeric_Value=4_3}', "");
Expect(0, 12983, '\P{^Numeric_Value=4_3}', "");
Error('\p{Nv=/a/_	0_0	00-43}');
Error('\P{Nv=/a/_	0_0	00-43}');
Expect(1, 12984, '\p{Nv=00000043}', "");
Expect(0, 12984, '\p{^Nv=00000043}', "");
Expect(0, 12984, '\P{Nv=00000043}', "");
Expect(1, 12984, '\P{^Nv=00000043}', "");
Expect(0, 12983, '\p{Nv=00000043}', "");
Expect(1, 12983, '\p{^Nv=00000043}', "");
Expect(1, 12983, '\P{Nv=00000043}', "");
Expect(0, 12983, '\P{^Nv=00000043}', "");
Error('\p{Is_Numeric_Value=-	00000043:=}');
Error('\P{Is_Numeric_Value=-	00000043:=}');
Expect(1, 12984, '\p{Is_Numeric_Value=0043}', "");
Expect(0, 12984, '\p{^Is_Numeric_Value=0043}', "");
Expect(0, 12984, '\P{Is_Numeric_Value=0043}', "");
Expect(1, 12984, '\P{^Is_Numeric_Value=0043}', "");
Expect(0, 12983, '\p{Is_Numeric_Value=0043}', "");
Expect(1, 12983, '\p{^Is_Numeric_Value=0043}', "");
Expect(1, 12983, '\P{Is_Numeric_Value=0043}', "");
Expect(0, 12983, '\P{^Is_Numeric_Value=0043}', "");
Error('\p{Is_Nv= 	000043/a/}');
Error('\P{Is_Nv= 	000043/a/}');
Expect(1, 12984, '\p{Is_Nv=0_0_0_0_43}', "");
Expect(0, 12984, '\p{^Is_Nv=0_0_0_0_43}', "");
Expect(0, 12984, '\P{Is_Nv=0_0_0_0_43}', "");
Expect(1, 12984, '\P{^Is_Nv=0_0_0_0_43}', "");
Expect(0, 12983, '\p{Is_Nv=0_0_0_0_43}', "");
Expect(1, 12983, '\p{^Is_Nv=0_0_0_0_43}', "");
Expect(1, 12983, '\P{Is_Nv=0_0_0_0_43}', "");
Expect(0, 12983, '\P{^Is_Nv=0_0_0_0_43}', "");
Error('\p{Numeric_Value:   :=_ +05}');
Error('\P{Numeric_Value:   :=_ +05}');
Expect(1, 53, '\p{Numeric_Value=0000000005}', "");
Expect(0, 53, '\p{^Numeric_Value=0000000005}', "");
Expect(0, 53, '\P{Numeric_Value=0000000005}', "");
Expect(1, 53, '\P{^Numeric_Value=0000000005}', "");
Expect(0, 52, '\p{Numeric_Value=0000000005}', "");
Expect(1, 52, '\p{^Numeric_Value=0000000005}', "");
Expect(1, 52, '\P{Numeric_Value=0000000005}', "");
Expect(0, 52, '\P{^Numeric_Value=0000000005}', "");
Error('\p{Nv: :=- 0005}');
Error('\P{Nv: :=- 0005}');
Expect(1, 53, '\p{Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(0, 53, '\p{^Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(0, 53, '\P{Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(1, 53, '\P{^Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(0, 52, '\p{Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(1, 52, '\p{^Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(1, 52, '\P{Nv=0_0_0_0_0_0_0_0_05}', "");
Expect(0, 52, '\P{^Nv=0_0_0_0_0_0_0_0_05}', "");
Error('\p{Is_Numeric_Value=:=_ +00	5}');
Error('\P{Is_Numeric_Value=:=_ +00	5}');
Expect(1, 53, '\p{Is_Numeric_Value=0000000005}', "");
Expect(0, 53, '\p{^Is_Numeric_Value=0000000005}', "");
Expect(0, 53, '\P{Is_Numeric_Value=0000000005}', "");
Expect(1, 53, '\P{^Is_Numeric_Value=0000000005}', "");
Expect(0, 52, '\p{Is_Numeric_Value=0000000005}', "");
Expect(1, 52, '\p{^Is_Numeric_Value=0000000005}', "");
Expect(1, 52, '\P{Is_Numeric_Value=0000000005}', "");
Expect(0, 52, '\P{^Is_Numeric_Value=0000000005}', "");
Error('\p{Is_Nv=	:=000005}');
Error('\P{Is_Nv=	:=000005}');
Expect(1, 53, '\p{Is_Nv=0_5}', "");
Expect(0, 53, '\p{^Is_Nv=0_5}', "");
Expect(0, 53, '\P{Is_Nv=0_5}', "");
Expect(1, 53, '\P{^Is_Nv=0_5}', "");
Expect(0, 52, '\p{Is_Nv=0_5}', "");
Expect(1, 52, '\p{^Is_Nv=0_5}', "");
Expect(1, 52, '\P{Is_Nv=0_5}', "");
Expect(0, 52, '\P{^Is_Nv=0_5}', "");
Error('\p{Changes_When_Uppercased=:=- YES}');
Error('\P{Changes_When_Uppercased=:=- YES}');
Expect(1, 122, '\p{Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\p{Changes_When_Uppercased=	-Yes}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=	-Yes}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=	-Yes}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=	-Yes}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=	-Yes}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=	-Yes}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=	-Yes}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=	-Yes}', "");
Error('\p{CWU=_Y/a/}');
Error('\P{CWU=_Y/a/}');
Expect(1, 122, '\p{CWU=y}', "");
Expect(0, 122, '\p{^CWU=y}', "");
Expect(0, 122, '\P{CWU=y}', "");
Expect(1, 122, '\P{^CWU=y}', "");
Expect(0, 96, '\p{CWU=y}', "");
Expect(1, 96, '\p{^CWU=y}', "");
Expect(1, 96, '\P{CWU=y}', "");
Expect(0, 96, '\P{^CWU=y}', "");
Expect(1, 122, '\p{CWU= Y}', "");
Expect(0, 122, '\p{^CWU= Y}', "");
Expect(0, 122, '\P{CWU= Y}', "");
Expect(1, 122, '\P{^CWU= Y}', "");
Expect(0, 96, '\p{CWU= Y}', "");
Expect(1, 96, '\p{^CWU= Y}', "");
Expect(1, 96, '\P{CWU= Y}', "");
Expect(0, 96, '\P{^CWU= Y}', "");
Error('\p{Is_Changes_When_Uppercased=:=__T}');
Error('\P{Is_Changes_When_Uppercased=:=__T}');
Expect(1, 122, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\p{Is_Changes_When_Uppercased=- T}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased=- T}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased=- T}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased=- T}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased=- T}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased=- T}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased=- T}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased=- T}', "");
Error('\p{Is_CWU=  true:=}');
Error('\P{Is_CWU=  true:=}');
Expect(1, 122, '\p{Is_CWU=true}', "");
Expect(0, 122, '\p{^Is_CWU=true}', "");
Expect(0, 122, '\P{Is_CWU=true}', "");
Expect(1, 122, '\P{^Is_CWU=true}', "");
Expect(0, 96, '\p{Is_CWU=true}', "");
Expect(1, 96, '\p{^Is_CWU=true}', "");
Expect(1, 96, '\P{Is_CWU=true}', "");
Expect(0, 96, '\P{^Is_CWU=true}', "");
Expect(1, 122, '\p{Is_CWU=-TRUE}', "");
Expect(0, 122, '\p{^Is_CWU=-TRUE}', "");
Expect(0, 122, '\P{Is_CWU=-TRUE}', "");
Expect(1, 122, '\P{^Is_CWU=-TRUE}', "");
Expect(0, 96, '\p{Is_CWU=-TRUE}', "");
Expect(1, 96, '\p{^Is_CWU=-TRUE}', "");
Expect(1, 96, '\P{Is_CWU=-TRUE}', "");
Expect(0, 96, '\P{^Is_CWU=-TRUE}', "");
Error('\p{Changes_When_Uppercased=/a/	 No}');
Error('\P{Changes_When_Uppercased=/a/	 No}');
Expect(1, 96, '\p{Changes_When_Uppercased=no}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=no}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=no}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=no}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=no}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=no}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=no}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=no}', "");
Expect(1, 96, '\p{Changes_When_Uppercased=-_no}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=-_no}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=-_no}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=-_no}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=-_no}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=-_no}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=-_no}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=-_no}', "");
Error('\p{CWU=/a/  n}');
Error('\P{CWU=/a/  n}');
Expect(1, 96, '\p{CWU:   n}', "");
Expect(0, 96, '\p{^CWU:   n}', "");
Expect(0, 96, '\P{CWU:   n}', "");
Expect(1, 96, '\P{^CWU:   n}', "");
Expect(0, 122, '\p{CWU:   n}', "");
Expect(1, 122, '\p{^CWU:   n}', "");
Expect(1, 122, '\P{CWU:   n}', "");
Expect(0, 122, '\P{^CWU:   n}', "");
Expect(1, 96, '\p{CWU=	N}', "");
Expect(0, 96, '\p{^CWU=	N}', "");
Expect(0, 96, '\P{CWU=	N}', "");
Expect(1, 96, '\P{^CWU=	N}', "");
Expect(0, 122, '\p{CWU=	N}', "");
Expect(1, 122, '\p{^CWU=	N}', "");
Expect(1, 122, '\P{CWU=	N}', "");
Expect(0, 122, '\P{^CWU=	N}', "");
Error('\p{Is_Changes_When_Uppercased= :=f}');
Error('\P{Is_Changes_When_Uppercased= :=f}');
Expect(1, 96, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Uppercased:	- F}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased:	- F}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased:	- F}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased:	- F}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased:	- F}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased:	- F}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased:	- F}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased:	- F}', "");
Error('\p{Is_CWU=-:=False}');
Error('\P{Is_CWU=-:=False}');
Expect(1, 96, '\p{Is_CWU=false}', "");
Expect(0, 96, '\p{^Is_CWU=false}', "");
Expect(0, 96, '\P{Is_CWU=false}', "");
Expect(1, 96, '\P{^Is_CWU=false}', "");
Expect(0, 122, '\p{Is_CWU=false}', "");
Expect(1, 122, '\p{^Is_CWU=false}', "");
Expect(1, 122, '\P{Is_CWU=false}', "");
Expect(0, 122, '\P{^Is_CWU=false}', "");
Expect(1, 96, '\p{Is_CWU=	false}', "");
Expect(0, 96, '\p{^Is_CWU=	false}', "");
Expect(0, 96, '\P{Is_CWU=	false}', "");
Expect(1, 96, '\P{^Is_CWU=	false}', "");
Expect(0, 122, '\p{Is_CWU=	false}', "");
Expect(1, 122, '\p{^Is_CWU=	false}', "");
Expect(1, 122, '\P{Is_CWU=	false}', "");
Expect(0, 122, '\P{^Is_CWU=	false}', "");
Error('\p{Changes_When_Lowercased=	_YES/a/}');
Error('\P{Changes_When_Lowercased=	_YES/a/}');
Expect(1, 90, '\p{Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\p{Changes_When_Lowercased=_ Yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=_ Yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=_ Yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=_ Yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=_ Yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=_ Yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=_ Yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=_ Yes}', "");
Error('\p{CWL=:=_Y}');
Error('\P{CWL=:=_Y}');
Expect(1, 90, '\p{CWL=y}', "");
Expect(0, 90, '\p{^CWL=y}', "");
Expect(0, 90, '\P{CWL=y}', "");
Expect(1, 90, '\P{^CWL=y}', "");
Expect(0, 64, '\p{CWL=y}', "");
Expect(1, 64, '\p{^CWL=y}', "");
Expect(1, 64, '\P{CWL=y}', "");
Expect(0, 64, '\P{^CWL=y}', "");
Expect(1, 90, '\p{CWL=-y}', "");
Expect(0, 90, '\p{^CWL=-y}', "");
Expect(0, 90, '\P{CWL=-y}', "");
Expect(1, 90, '\P{^CWL=-y}', "");
Expect(0, 64, '\p{CWL=-y}', "");
Expect(1, 64, '\p{^CWL=-y}', "");
Expect(1, 64, '\P{CWL=-y}', "");
Expect(0, 64, '\P{^CWL=-y}', "");
Error('\p{Is_Changes_When_Lowercased=:=T}');
Error('\P{Is_Changes_When_Lowercased=:=T}');
Expect(1, 90, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Lowercased=	t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased=	t}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased=	t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased=	t}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased=	t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased=	t}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased=	t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased=	t}', "");
Error('\p{Is_CWL= /a/True}');
Error('\P{Is_CWL= /a/True}');
Expect(1, 90, '\p{Is_CWL=true}', "");
Expect(0, 90, '\p{^Is_CWL=true}', "");
Expect(0, 90, '\P{Is_CWL=true}', "");
Expect(1, 90, '\P{^Is_CWL=true}', "");
Expect(0, 64, '\p{Is_CWL=true}', "");
Expect(1, 64, '\p{^Is_CWL=true}', "");
Expect(1, 64, '\P{Is_CWL=true}', "");
Expect(0, 64, '\P{^Is_CWL=true}', "");
Expect(1, 90, '\p{Is_CWL=-True}', "");
Expect(0, 90, '\p{^Is_CWL=-True}', "");
Expect(0, 90, '\P{Is_CWL=-True}', "");
Expect(1, 90, '\P{^Is_CWL=-True}', "");
Expect(0, 64, '\p{Is_CWL=-True}', "");
Expect(1, 64, '\p{^Is_CWL=-True}', "");
Expect(1, 64, '\P{Is_CWL=-True}', "");
Expect(0, 64, '\P{^Is_CWL=-True}', "");
Error('\p{Changes_When_Lowercased=/a/_ No}');
Error('\P{Changes_When_Lowercased=/a/_ No}');
Expect(1, 64, '\p{Changes_When_Lowercased=no}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased=no}', "");
Expect(0, 64, '\P{Changes_When_Lowercased=no}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased=no}', "");
Expect(0, 90, '\p{Changes_When_Lowercased=no}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased=no}', "");
Expect(1, 90, '\P{Changes_When_Lowercased=no}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased=no}', "");
Expect(1, 64, '\p{Changes_When_Lowercased=		NO}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased=		NO}', "");
Expect(0, 64, '\P{Changes_When_Lowercased=		NO}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased=		NO}', "");
Expect(0, 90, '\p{Changes_When_Lowercased=		NO}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased=		NO}', "");
Expect(1, 90, '\P{Changes_When_Lowercased=		NO}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased=		NO}', "");
Error('\p{CWL=:=	 n}');
Error('\P{CWL=:=	 n}');
Expect(1, 64, '\p{CWL: n}', "");
Expect(0, 64, '\p{^CWL: n}', "");
Expect(0, 64, '\P{CWL: n}', "");
Expect(1, 64, '\P{^CWL: n}', "");
Expect(0, 90, '\p{CWL: n}', "");
Expect(1, 90, '\p{^CWL: n}', "");
Expect(1, 90, '\P{CWL: n}', "");
Expect(0, 90, '\P{^CWL: n}', "");
Expect(1, 64, '\p{CWL:	--N}', "");
Expect(0, 64, '\p{^CWL:	--N}', "");
Expect(0, 64, '\P{CWL:	--N}', "");
Expect(1, 64, '\P{^CWL:	--N}', "");
Expect(0, 90, '\p{CWL:	--N}', "");
Expect(1, 90, '\p{^CWL:	--N}', "");
Expect(1, 90, '\P{CWL:	--N}', "");
Expect(0, 90, '\P{^CWL:	--N}', "");
Error('\p{Is_Changes_When_Lowercased=_F/a/}');
Error('\P{Is_Changes_When_Lowercased=_F/a/}');
Expect(1, 64, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Lowercased=	-F}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=	-F}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=	-F}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=	-F}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=	-F}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=	-F}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=	-F}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=	-F}', "");
Error('\p{Is_CWL=/a/__False}');
Error('\P{Is_CWL=/a/__False}');
Expect(1, 64, '\p{Is_CWL=false}', "");
Expect(0, 64, '\p{^Is_CWL=false}', "");
Expect(0, 64, '\P{Is_CWL=false}', "");
Expect(1, 64, '\P{^Is_CWL=false}', "");
Expect(0, 90, '\p{Is_CWL=false}', "");
Expect(1, 90, '\p{^Is_CWL=false}', "");
Expect(1, 90, '\P{Is_CWL=false}', "");
Expect(0, 90, '\P{^Is_CWL=false}', "");
Expect(1, 64, '\p{Is_CWL= false}', "");
Expect(0, 64, '\p{^Is_CWL= false}', "");
Expect(0, 64, '\P{Is_CWL= false}', "");
Expect(1, 64, '\P{^Is_CWL= false}', "");
Expect(0, 90, '\p{Is_CWL= false}', "");
Expect(1, 90, '\p{^Is_CWL= false}', "");
Expect(1, 90, '\P{Is_CWL= false}', "");
Expect(0, 90, '\P{^Is_CWL= false}', "");
Error('\p{Case_Ignorable=-:=YES}');
Error('\P{Case_Ignorable=-:=YES}');
Expect(1, 39, '\p{Case_Ignorable:   yes}', "");
Expect(0, 39, '\p{^Case_Ignorable:   yes}', "");
Expect(0, 39, '\P{Case_Ignorable:   yes}', "");
Expect(1, 39, '\P{^Case_Ignorable:   yes}', "");
Expect(0, 38, '\p{Case_Ignorable:   yes}', "");
Expect(1, 38, '\p{^Case_Ignorable:   yes}', "");
Expect(1, 38, '\P{Case_Ignorable:   yes}', "");
Expect(0, 38, '\P{^Case_Ignorable:   yes}', "");
Expect(1, 39, '\p{Case_Ignorable=_Yes}', "");
Expect(0, 39, '\p{^Case_Ignorable=_Yes}', "");
Expect(0, 39, '\P{Case_Ignorable=_Yes}', "");
Expect(1, 39, '\P{^Case_Ignorable=_Yes}', "");
Expect(0, 38, '\p{Case_Ignorable=_Yes}', "");
Expect(1, 38, '\p{^Case_Ignorable=_Yes}', "");
Expect(1, 38, '\P{Case_Ignorable=_Yes}', "");
Expect(0, 38, '\P{^Case_Ignorable=_Yes}', "");
Error('\p{CI=:= Y}');
Error('\P{CI=:= Y}');
Expect(1, 39, '\p{CI=y}', "");
Expect(0, 39, '\p{^CI=y}', "");
Expect(0, 39, '\P{CI=y}', "");
Expect(1, 39, '\P{^CI=y}', "");
Expect(0, 38, '\p{CI=y}', "");
Expect(1, 38, '\p{^CI=y}', "");
Expect(1, 38, '\P{CI=y}', "");
Expect(0, 38, '\P{^CI=y}', "");
Expect(1, 39, '\p{CI=_	Y}', "");
Expect(0, 39, '\p{^CI=_	Y}', "");
Expect(0, 39, '\P{CI=_	Y}', "");
Expect(1, 39, '\P{^CI=_	Y}', "");
Expect(0, 38, '\p{CI=_	Y}', "");
Expect(1, 38, '\p{^CI=_	Y}', "");
Expect(1, 38, '\P{CI=_	Y}', "");
Expect(0, 38, '\P{^CI=_	Y}', "");
Error('\p{Is_Case_Ignorable=-:=T}');
Error('\P{Is_Case_Ignorable=-:=T}');
Expect(1, 39, '\p{Is_Case_Ignorable=t}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable=t}', "");
Expect(0, 39, '\P{Is_Case_Ignorable=t}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable=t}', "");
Expect(0, 38, '\p{Is_Case_Ignorable=t}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable=t}', "");
Expect(1, 38, '\P{Is_Case_Ignorable=t}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable=t}', "");
Expect(1, 39, '\p{Is_Case_Ignorable=-T}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable=-T}', "");
Expect(0, 39, '\P{Is_Case_Ignorable=-T}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable=-T}', "");
Expect(0, 38, '\p{Is_Case_Ignorable=-T}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable=-T}', "");
Expect(1, 38, '\P{Is_Case_Ignorable=-T}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable=-T}', "");
Error('\p{Is_CI=-:=TRUE}');
Error('\P{Is_CI=-:=TRUE}');
Expect(1, 39, '\p{Is_CI=true}', "");
Expect(0, 39, '\p{^Is_CI=true}', "");
Expect(0, 39, '\P{Is_CI=true}', "");
Expect(1, 39, '\P{^Is_CI=true}', "");
Expect(0, 38, '\p{Is_CI=true}', "");
Expect(1, 38, '\p{^Is_CI=true}', "");
Expect(1, 38, '\P{Is_CI=true}', "");
Expect(0, 38, '\P{^Is_CI=true}', "");
Expect(1, 39, '\p{Is_CI=	-True}', "");
Expect(0, 39, '\p{^Is_CI=	-True}', "");
Expect(0, 39, '\P{Is_CI=	-True}', "");
Expect(1, 39, '\P{^Is_CI=	-True}', "");
Expect(0, 38, '\p{Is_CI=	-True}', "");
Expect(1, 38, '\p{^Is_CI=	-True}', "");
Expect(1, 38, '\P{Is_CI=	-True}', "");
Expect(0, 38, '\P{^Is_CI=	-True}', "");
Error('\p{Case_Ignorable=/a/  NO}');
Error('\P{Case_Ignorable=/a/  NO}');
Expect(1, 38, '\p{Case_Ignorable=no}', "");
Expect(0, 38, '\p{^Case_Ignorable=no}', "");
Expect(0, 38, '\P{Case_Ignorable=no}', "");
Expect(1, 38, '\P{^Case_Ignorable=no}', "");
Expect(0, 39, '\p{Case_Ignorable=no}', "");
Expect(1, 39, '\p{^Case_Ignorable=no}', "");
Expect(1, 39, '\P{Case_Ignorable=no}', "");
Expect(0, 39, '\P{^Case_Ignorable=no}', "");
Expect(1, 38, '\p{Case_Ignorable=__NO}', "");
Expect(0, 38, '\p{^Case_Ignorable=__NO}', "");
Expect(0, 38, '\P{Case_Ignorable=__NO}', "");
Expect(1, 38, '\P{^Case_Ignorable=__NO}', "");
Expect(0, 39, '\p{Case_Ignorable=__NO}', "");
Expect(1, 39, '\p{^Case_Ignorable=__NO}', "");
Expect(1, 39, '\P{Case_Ignorable=__NO}', "");
Expect(0, 39, '\P{^Case_Ignorable=__NO}', "");
Error('\p{CI=/a/_N}');
Error('\P{CI=/a/_N}');
Expect(1, 38, '\p{CI=n}', "");
Expect(0, 38, '\p{^CI=n}', "");
Expect(0, 38, '\P{CI=n}', "");
Expect(1, 38, '\P{^CI=n}', "");
Expect(0, 39, '\p{CI=n}', "");
Expect(1, 39, '\p{^CI=n}', "");
Expect(1, 39, '\P{CI=n}', "");
Expect(0, 39, '\P{^CI=n}', "");
Expect(1, 38, '\p{CI=- N}', "");
Expect(0, 38, '\p{^CI=- N}', "");
Expect(0, 38, '\P{CI=- N}', "");
Expect(1, 38, '\P{^CI=- N}', "");
Expect(0, 39, '\p{CI=- N}', "");
Expect(1, 39, '\p{^CI=- N}', "");
Expect(1, 39, '\P{CI=- N}', "");
Expect(0, 39, '\P{^CI=- N}', "");
Error('\p{Is_Case_Ignorable=:=	-F}');
Error('\P{Is_Case_Ignorable=:=	-F}');
Expect(1, 38, '\p{Is_Case_Ignorable=f}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=f}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=f}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=f}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=f}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=f}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=f}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=f}', "");
Expect(1, 38, '\p{Is_Case_Ignorable=_-F}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=_-F}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=_-F}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=_-F}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=_-F}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=_-F}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=_-F}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=_-F}', "");
Error('\p{Is_CI=	:=False}');
Error('\P{Is_CI=	:=False}');
Expect(1, 38, '\p{Is_CI=false}', "");
Expect(0, 38, '\p{^Is_CI=false}', "");
Expect(0, 38, '\P{Is_CI=false}', "");
Expect(1, 38, '\P{^Is_CI=false}', "");
Expect(0, 39, '\p{Is_CI=false}', "");
Expect(1, 39, '\p{^Is_CI=false}', "");
Expect(1, 39, '\P{Is_CI=false}', "");
Expect(0, 39, '\P{^Is_CI=false}', "");
Expect(1, 38, '\p{Is_CI= false}', "");
Expect(0, 38, '\p{^Is_CI= false}', "");
Expect(0, 38, '\P{Is_CI= false}', "");
Expect(1, 38, '\P{^Is_CI= false}', "");
Expect(0, 39, '\p{Is_CI= false}', "");
Expect(1, 39, '\p{^Is_CI= false}', "");
Expect(1, 39, '\P{Is_CI= false}', "");
Expect(0, 39, '\P{^Is_CI= false}', "");
Error('\p{Pattern_Syntax=_/a/Yes}');
Error('\P{Pattern_Syntax=_/a/Yes}');
Expect(1, 47, '\p{Pattern_Syntax=yes}', "");
Expect(0, 47, '\p{^Pattern_Syntax=yes}', "");
Expect(0, 47, '\P{Pattern_Syntax=yes}', "");
Expect(1, 47, '\P{^Pattern_Syntax=yes}', "");
Expect(0, 32, '\p{Pattern_Syntax=yes}', "");
Expect(1, 32, '\p{^Pattern_Syntax=yes}', "");
Expect(1, 32, '\P{Pattern_Syntax=yes}', "");
Expect(0, 32, '\P{^Pattern_Syntax=yes}', "");
Expect(1, 47, '\p{Pattern_Syntax=_-Yes}', "");
Expect(0, 47, '\p{^Pattern_Syntax=_-Yes}', "");
Expect(0, 47, '\P{Pattern_Syntax=_-Yes}', "");
Expect(1, 47, '\P{^Pattern_Syntax=_-Yes}', "");
Expect(0, 32, '\p{Pattern_Syntax=_-Yes}', "");
Expect(1, 32, '\p{^Pattern_Syntax=_-Yes}', "");
Expect(1, 32, '\P{Pattern_Syntax=_-Yes}', "");
Expect(0, 32, '\P{^Pattern_Syntax=_-Yes}', "");
Error('\p{Pat_Syn=/a/_Y}');
Error('\P{Pat_Syn=/a/_Y}');
Expect(1, 47, '\p{Pat_Syn=y}', "");
Expect(0, 47, '\p{^Pat_Syn=y}', "");
Expect(0, 47, '\P{Pat_Syn=y}', "");
Expect(1, 47, '\P{^Pat_Syn=y}', "");
Expect(0, 32, '\p{Pat_Syn=y}', "");
Expect(1, 32, '\p{^Pat_Syn=y}', "");
Expect(1, 32, '\P{Pat_Syn=y}', "");
Expect(0, 32, '\P{^Pat_Syn=y}', "");
Expect(1, 47, '\p{Pat_Syn:   	_Y}', "");
Expect(0, 47, '\p{^Pat_Syn:   	_Y}', "");
Expect(0, 47, '\P{Pat_Syn:   	_Y}', "");
Expect(1, 47, '\P{^Pat_Syn:   	_Y}', "");
Expect(0, 32, '\p{Pat_Syn:   	_Y}', "");
Expect(1, 32, '\p{^Pat_Syn:   	_Y}', "");
Expect(1, 32, '\P{Pat_Syn:   	_Y}', "");
Expect(0, 32, '\P{^Pat_Syn:   	_Y}', "");
Error('\p{Is_Pattern_Syntax= _t:=}');
Error('\P{Is_Pattern_Syntax= _t:=}');
Expect(1, 47, '\p{Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\p{Is_Pattern_Syntax=__t}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=__t}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=__t}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=__t}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=__t}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=__t}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=__t}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=__t}', "");
Error('\p{Is_Pat_Syn=:=TRUE}');
Error('\P{Is_Pat_Syn=:=TRUE}');
Expect(1, 47, '\p{Is_Pat_Syn=true}', "");
Expect(0, 47, '\p{^Is_Pat_Syn=true}', "");
Expect(0, 47, '\P{Is_Pat_Syn=true}', "");
Expect(1, 47, '\P{^Is_Pat_Syn=true}', "");
Expect(0, 32, '\p{Is_Pat_Syn=true}', "");
Expect(1, 32, '\p{^Is_Pat_Syn=true}', "");
Expect(1, 32, '\P{Is_Pat_Syn=true}', "");
Expect(0, 32, '\P{^Is_Pat_Syn=true}', "");
Expect(1, 47, '\p{Is_Pat_Syn=_TRUE}', "");
Expect(0, 47, '\p{^Is_Pat_Syn=_TRUE}', "");
Expect(0, 47, '\P{Is_Pat_Syn=_TRUE}', "");
Expect(1, 47, '\P{^Is_Pat_Syn=_TRUE}', "");
Expect(0, 32, '\p{Is_Pat_Syn=_TRUE}', "");
Expect(1, 32, '\p{^Is_Pat_Syn=_TRUE}', "");
Expect(1, 32, '\P{Is_Pat_Syn=_TRUE}', "");
Expect(0, 32, '\P{^Is_Pat_Syn=_TRUE}', "");
Error('\p{Pattern_Syntax: 	/a/No}');
Error('\P{Pattern_Syntax: 	/a/No}');
Expect(1, 32, '\p{Pattern_Syntax=no}', "");
Expect(0, 32, '\p{^Pattern_Syntax=no}', "");
Expect(0, 32, '\P{Pattern_Syntax=no}', "");
Expect(1, 32, '\P{^Pattern_Syntax=no}', "");
Expect(0, 47, '\p{Pattern_Syntax=no}', "");
Expect(1, 47, '\p{^Pattern_Syntax=no}', "");
Expect(1, 47, '\P{Pattern_Syntax=no}', "");
Expect(0, 47, '\P{^Pattern_Syntax=no}', "");
Expect(1, 32, '\p{Pattern_Syntax=	 No}', "");
Expect(0, 32, '\p{^Pattern_Syntax=	 No}', "");
Expect(0, 32, '\P{Pattern_Syntax=	 No}', "");
Expect(1, 32, '\P{^Pattern_Syntax=	 No}', "");
Expect(0, 47, '\p{Pattern_Syntax=	 No}', "");
Expect(1, 47, '\p{^Pattern_Syntax=	 No}', "");
Expect(1, 47, '\P{Pattern_Syntax=	 No}', "");
Expect(0, 47, '\P{^Pattern_Syntax=	 No}', "");
Error('\p{Pat_Syn=_N/a/}');
Error('\P{Pat_Syn=_N/a/}');
Expect(1, 32, '\p{Pat_Syn=n}', "");
Expect(0, 32, '\p{^Pat_Syn=n}', "");
Expect(0, 32, '\P{Pat_Syn=n}', "");
Expect(1, 32, '\P{^Pat_Syn=n}', "");
Expect(0, 47, '\p{Pat_Syn=n}', "");
Expect(1, 47, '\p{^Pat_Syn=n}', "");
Expect(1, 47, '\P{Pat_Syn=n}', "");
Expect(0, 47, '\P{^Pat_Syn=n}', "");
Expect(1, 32, '\p{Pat_Syn:_ N}', "");
Expect(0, 32, '\p{^Pat_Syn:_ N}', "");
Expect(0, 32, '\P{Pat_Syn:_ N}', "");
Expect(1, 32, '\P{^Pat_Syn:_ N}', "");
Expect(0, 47, '\p{Pat_Syn:_ N}', "");
Expect(1, 47, '\p{^Pat_Syn:_ N}', "");
Expect(1, 47, '\P{Pat_Syn:_ N}', "");
Expect(0, 47, '\P{^Pat_Syn:_ N}', "");
Error('\p{Is_Pattern_Syntax=/a/	_F}');
Error('\P{Is_Pattern_Syntax=/a/	_F}');
Expect(1, 32, '\p{Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\p{Is_Pattern_Syntax:		f}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax:		f}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax:		f}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax:		f}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax:		f}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax:		f}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax:		f}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax:		f}', "");
Error('\p{Is_Pat_Syn=  False:=}');
Error('\P{Is_Pat_Syn=  False:=}');
Expect(1, 32, '\p{Is_Pat_Syn=false}', "");
Expect(0, 32, '\p{^Is_Pat_Syn=false}', "");
Expect(0, 32, '\P{Is_Pat_Syn=false}', "");
Expect(1, 32, '\P{^Is_Pat_Syn=false}', "");
Expect(0, 47, '\p{Is_Pat_Syn=false}', "");
Expect(1, 47, '\p{^Is_Pat_Syn=false}', "");
Expect(1, 47, '\P{Is_Pat_Syn=false}', "");
Expect(0, 47, '\P{^Is_Pat_Syn=false}', "");
Expect(1, 32, '\p{Is_Pat_Syn=		False}', "");
Expect(0, 32, '\p{^Is_Pat_Syn=		False}', "");
Expect(0, 32, '\P{Is_Pat_Syn=		False}', "");
Expect(1, 32, '\P{^Is_Pat_Syn=		False}', "");
Expect(0, 47, '\p{Is_Pat_Syn=		False}', "");
Expect(1, 47, '\p{^Is_Pat_Syn=		False}', "");
Expect(1, 47, '\P{Is_Pat_Syn=		False}', "");
Expect(0, 47, '\P{^Is_Pat_Syn=		False}', "");
Error('\p{Numeric_Type= /a/none}');
Error('\P{Numeric_Type= /a/none}');
Expect(1, 47, '\p{Numeric_Type=none}', "");
Expect(0, 47, '\p{^Numeric_Type=none}', "");
Expect(0, 47, '\P{Numeric_Type=none}', "");
Expect(1, 47, '\P{^Numeric_Type=none}', "");
Expect(0, 57, '\p{Numeric_Type=none}', "");
Expect(1, 57, '\p{^Numeric_Type=none}', "");
Expect(1, 57, '\P{Numeric_Type=none}', "");
Expect(0, 57, '\P{^Numeric_Type=none}', "");
Expect(1, 47, '\p{Numeric_Type=-_None}', "");
Expect(0, 47, '\p{^Numeric_Type=-_None}', "");
Expect(0, 47, '\P{Numeric_Type=-_None}', "");
Expect(1, 47, '\P{^Numeric_Type=-_None}', "");
Expect(0, 57, '\p{Numeric_Type=-_None}', "");
Expect(1, 57, '\p{^Numeric_Type=-_None}', "");
Expect(1, 57, '\P{Numeric_Type=-_None}', "");
Expect(0, 57, '\P{^Numeric_Type=-_None}', "");
Error('\p{Nt=	:=None}');
Error('\P{Nt=	:=None}');
Expect(1, 47, '\p{Nt: none}', "");
Expect(0, 47, '\p{^Nt: none}', "");
Expect(0, 47, '\P{Nt: none}', "");
Expect(1, 47, '\P{^Nt: none}', "");
Expect(0, 57, '\p{Nt: none}', "");
Expect(1, 57, '\p{^Nt: none}', "");
Expect(1, 57, '\P{Nt: none}', "");
Expect(0, 57, '\P{^Nt: none}', "");
Expect(1, 47, '\p{Nt=-none}', "");
Expect(0, 47, '\p{^Nt=-none}', "");
Expect(0, 47, '\P{Nt=-none}', "");
Expect(1, 47, '\P{^Nt=-none}', "");
Expect(0, 57, '\p{Nt=-none}', "");
Expect(1, 57, '\p{^Nt=-none}', "");
Expect(1, 57, '\P{Nt=-none}', "");
Expect(0, 57, '\P{^Nt=-none}', "");
Error('\p{Is_Numeric_Type=:= -NONE}');
Error('\P{Is_Numeric_Type=:= -NONE}');
Expect(1, 47, '\p{Is_Numeric_Type=none}', "");
Expect(0, 47, '\p{^Is_Numeric_Type=none}', "");
Expect(0, 47, '\P{Is_Numeric_Type=none}', "");
Expect(1, 47, '\P{^Is_Numeric_Type=none}', "");
Expect(0, 57, '\p{Is_Numeric_Type=none}', "");
Expect(1, 57, '\p{^Is_Numeric_Type=none}', "");
Expect(1, 57, '\P{Is_Numeric_Type=none}', "");
Expect(0, 57, '\P{^Is_Numeric_Type=none}', "");
Expect(1, 47, '\p{Is_Numeric_Type=-_none}', "");
Expect(0, 47, '\p{^Is_Numeric_Type=-_none}', "");
Expect(0, 47, '\P{Is_Numeric_Type=-_none}', "");
Expect(1, 47, '\P{^Is_Numeric_Type=-_none}', "");
Expect(0, 57, '\p{Is_Numeric_Type=-_none}', "");
Expect(1, 57, '\p{^Is_Numeric_Type=-_none}', "");
Expect(1, 57, '\P{Is_Numeric_Type=-_none}', "");
Expect(0, 57, '\P{^Is_Numeric_Type=-_none}', "");
Error('\p{Is_Nt=:=None}');
Error('\P{Is_Nt=:=None}');
Expect(1, 47, '\p{Is_Nt=none}', "");
Expect(0, 47, '\p{^Is_Nt=none}', "");
Expect(0, 47, '\P{Is_Nt=none}', "");
Expect(1, 47, '\P{^Is_Nt=none}', "");
Expect(0, 57, '\p{Is_Nt=none}', "");
Expect(1, 57, '\p{^Is_Nt=none}', "");
Expect(1, 57, '\P{Is_Nt=none}', "");
Expect(0, 57, '\P{^Is_Nt=none}', "");
Expect(1, 47, '\p{Is_Nt= none}', "");
Expect(0, 47, '\p{^Is_Nt= none}', "");
Expect(0, 47, '\P{Is_Nt= none}', "");
Expect(1, 47, '\P{^Is_Nt= none}', "");
Expect(0, 57, '\p{Is_Nt= none}', "");
Expect(1, 57, '\p{^Is_Nt= none}', "");
Expect(1, 57, '\P{Is_Nt= none}', "");
Expect(0, 57, '\P{^Is_Nt= none}', "");
Error('\p{Numeric_Type:   	_Digit:=}');
Error('\P{Numeric_Type:   	_Digit:=}');
Expect(1, 179, '\p{Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Numeric_Type=digit}', "");
Expect(0, 179, '\P{Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Numeric_Type=digit}', "");
Expect(0, 177, '\p{Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Numeric_Type=digit}', "");
Expect(1, 177, '\P{Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Numeric_Type=digit}', "");
Expect(1, 179, '\p{Numeric_Type=_-Digit}', "");
Expect(0, 179, '\p{^Numeric_Type=_-Digit}', "");
Expect(0, 179, '\P{Numeric_Type=_-Digit}', "");
Expect(1, 179, '\P{^Numeric_Type=_-Digit}', "");
Expect(0, 177, '\p{Numeric_Type=_-Digit}', "");
Expect(1, 177, '\p{^Numeric_Type=_-Digit}', "");
Expect(1, 177, '\P{Numeric_Type=_-Digit}', "");
Expect(0, 177, '\P{^Numeric_Type=_-Digit}', "");
Error('\p{Nt=_/a/DI}');
Error('\P{Nt=_/a/DI}');
Expect(1, 179, '\p{Nt=di}', "");
Expect(0, 179, '\p{^Nt=di}', "");
Expect(0, 179, '\P{Nt=di}', "");
Expect(1, 179, '\P{^Nt=di}', "");
Expect(0, 177, '\p{Nt=di}', "");
Expect(1, 177, '\p{^Nt=di}', "");
Expect(1, 177, '\P{Nt=di}', "");
Expect(0, 177, '\P{^Nt=di}', "");
Expect(1, 179, '\p{Nt:   _Di}', "");
Expect(0, 179, '\p{^Nt:   _Di}', "");
Expect(0, 179, '\P{Nt:   _Di}', "");
Expect(1, 179, '\P{^Nt:   _Di}', "");
Expect(0, 177, '\p{Nt:   _Di}', "");
Expect(1, 177, '\p{^Nt:   _Di}', "");
Expect(1, 177, '\P{Nt:   _Di}', "");
Expect(0, 177, '\P{^Nt:   _Di}', "");
Error('\p{Is_Numeric_Type=-	DIGIT:=}');
Error('\P{Is_Numeric_Type=-	DIGIT:=}');
Expect(1, 179, '\p{Is_Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type=digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type=digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type=digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type=digit}', "");
Expect(1, 179, '\p{Is_Numeric_Type=	digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type=	digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type=	digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type=	digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type=	digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type=	digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type=	digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type=	digit}', "");
Error('\p{Is_Nt= Di/a/}');
Error('\P{Is_Nt= Di/a/}');
Expect(1, 179, '\p{Is_Nt=di}', "");
Expect(0, 179, '\p{^Is_Nt=di}', "");
Expect(0, 179, '\P{Is_Nt=di}', "");
Expect(1, 179, '\P{^Is_Nt=di}', "");
Expect(0, 177, '\p{Is_Nt=di}', "");
Expect(1, 177, '\p{^Is_Nt=di}', "");
Expect(1, 177, '\P{Is_Nt=di}', "");
Expect(0, 177, '\P{^Is_Nt=di}', "");
Expect(1, 179, '\p{Is_Nt= di}', "");
Expect(0, 179, '\p{^Is_Nt= di}', "");
Expect(0, 179, '\P{Is_Nt= di}', "");
Expect(1, 179, '\P{^Is_Nt= di}', "");
Expect(0, 177, '\p{Is_Nt= di}', "");
Expect(1, 177, '\p{^Is_Nt= di}', "");
Expect(1, 177, '\P{Is_Nt= di}', "");
Expect(0, 177, '\P{^Is_Nt= di}', "");
Error('\p{Numeric_Type=:=_-Decimal}');
Error('\P{Numeric_Type=:=_-Decimal}');
Expect(1, 57, '\p{Numeric_Type=decimal}', "");
Expect(0, 57, '\p{^Numeric_Type=decimal}', "");
Expect(0, 57, '\P{Numeric_Type=decimal}', "");
Expect(1, 57, '\P{^Numeric_Type=decimal}', "");
Expect(0, 47, '\p{Numeric_Type=decimal}', "");
Expect(1, 47, '\p{^Numeric_Type=decimal}', "");
Expect(1, 47, '\P{Numeric_Type=decimal}', "");
Expect(0, 47, '\P{^Numeric_Type=decimal}', "");
Expect(1, 57, '\p{Numeric_Type= DECIMAL}', "");
Expect(0, 57, '\p{^Numeric_Type= DECIMAL}', "");
Expect(0, 57, '\P{Numeric_Type= DECIMAL}', "");
Expect(1, 57, '\P{^Numeric_Type= DECIMAL}', "");
Expect(0, 47, '\p{Numeric_Type= DECIMAL}', "");
Expect(1, 47, '\p{^Numeric_Type= DECIMAL}', "");
Expect(1, 47, '\P{Numeric_Type= DECIMAL}', "");
Expect(0, 47, '\P{^Numeric_Type= DECIMAL}', "");
Error('\p{Nt= :=DE}');
Error('\P{Nt= :=DE}');
Expect(1, 57, '\p{Nt: de}', "");
Expect(0, 57, '\p{^Nt: de}', "");
Expect(0, 57, '\P{Nt: de}', "");
Expect(1, 57, '\P{^Nt: de}', "");
Expect(0, 47, '\p{Nt: de}', "");
Expect(1, 47, '\p{^Nt: de}', "");
Expect(1, 47, '\P{Nt: de}', "");
Expect(0, 47, '\P{^Nt: de}', "");
Expect(1, 57, '\p{Nt=__De}', "");
Expect(0, 57, '\p{^Nt=__De}', "");
Expect(0, 57, '\P{Nt=__De}', "");
Expect(1, 57, '\P{^Nt=__De}', "");
Expect(0, 47, '\p{Nt=__De}', "");
Expect(1, 47, '\p{^Nt=__De}', "");
Expect(1, 47, '\P{Nt=__De}', "");
Expect(0, 47, '\P{^Nt=__De}', "");
Error('\p{Is_Numeric_Type=	/a/DECIMAL}');
Error('\P{Is_Numeric_Type=	/a/DECIMAL}');
Expect(1, 57, '\p{Is_Numeric_Type=decimal}', "");
Expect(0, 57, '\p{^Is_Numeric_Type=decimal}', "");
Expect(0, 57, '\P{Is_Numeric_Type=decimal}', "");
Expect(1, 57, '\P{^Is_Numeric_Type=decimal}', "");
Expect(0, 47, '\p{Is_Numeric_Type=decimal}', "");
Expect(1, 47, '\p{^Is_Numeric_Type=decimal}', "");
Expect(1, 47, '\P{Is_Numeric_Type=decimal}', "");
Expect(0, 47, '\P{^Is_Numeric_Type=decimal}', "");
Expect(1, 57, '\p{Is_Numeric_Type=-Decimal}', "");
Expect(0, 57, '\p{^Is_Numeric_Type=-Decimal}', "");
Expect(0, 57, '\P{Is_Numeric_Type=-Decimal}', "");
Expect(1, 57, '\P{^Is_Numeric_Type=-Decimal}', "");
Expect(0, 47, '\p{Is_Numeric_Type=-Decimal}', "");
Expect(1, 47, '\p{^Is_Numeric_Type=-Decimal}', "");
Expect(1, 47, '\P{Is_Numeric_Type=-Decimal}', "");
Expect(0, 47, '\P{^Is_Numeric_Type=-Decimal}', "");
Error('\p{Is_Nt=	-DE/a/}');
Error('\P{Is_Nt=	-DE/a/}');
Expect(1, 57, '\p{Is_Nt=de}', "");
Expect(0, 57, '\p{^Is_Nt=de}', "");
Expect(0, 57, '\P{Is_Nt=de}', "");
Expect(1, 57, '\P{^Is_Nt=de}', "");
Expect(0, 47, '\p{Is_Nt=de}', "");
Expect(1, 47, '\p{^Is_Nt=de}', "");
Expect(1, 47, '\P{Is_Nt=de}', "");
Expect(0, 47, '\P{^Is_Nt=de}', "");
Expect(1, 57, '\p{Is_Nt=_ De}', "");
Expect(0, 57, '\p{^Is_Nt=_ De}', "");
Expect(0, 57, '\P{Is_Nt=_ De}', "");
Expect(1, 57, '\P{^Is_Nt=_ De}', "");
Expect(0, 47, '\p{Is_Nt=_ De}', "");
Expect(1, 47, '\p{^Is_Nt=_ De}', "");
Expect(1, 47, '\P{Is_Nt=_ De}', "");
Expect(0, 47, '\P{^Is_Nt=_ De}', "");
Error('\p{Numeric_Type=:=-_Numeric}');
Error('\P{Numeric_Type=:=-_Numeric}');
Expect(1, 190, '\p{Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Numeric_Type= numeric}', "");
Expect(0, 190, '\p{^Numeric_Type= numeric}', "");
Expect(0, 190, '\P{Numeric_Type= numeric}', "");
Expect(1, 190, '\P{^Numeric_Type= numeric}', "");
Expect(0, 187, '\p{Numeric_Type= numeric}', "");
Expect(1, 187, '\p{^Numeric_Type= numeric}', "");
Expect(1, 187, '\P{Numeric_Type= numeric}', "");
Expect(0, 187, '\P{^Numeric_Type= numeric}', "");
Error('\p{Nt=-Nu/a/}');
Error('\P{Nt=-Nu/a/}');
Expect(1, 190, '\p{Nt=nu}', "");
Expect(0, 190, '\p{^Nt=nu}', "");
Expect(0, 190, '\P{Nt=nu}', "");
Expect(1, 190, '\P{^Nt=nu}', "");
Expect(0, 187, '\p{Nt=nu}', "");
Expect(1, 187, '\p{^Nt=nu}', "");
Expect(1, 187, '\P{Nt=nu}', "");
Expect(0, 187, '\P{^Nt=nu}', "");
Expect(1, 190, '\p{Nt:_	Nu}', "");
Expect(0, 190, '\p{^Nt:_	Nu}', "");
Expect(0, 190, '\P{Nt:_	Nu}', "");
Expect(1, 190, '\P{^Nt:_	Nu}', "");
Expect(0, 187, '\p{Nt:_	Nu}', "");
Expect(1, 187, '\p{^Nt:_	Nu}', "");
Expect(1, 187, '\P{Nt:_	Nu}', "");
Expect(0, 187, '\P{^Nt:_	Nu}', "");
Error('\p{Is_Numeric_Type=/a/_-Numeric}');
Error('\P{Is_Numeric_Type=/a/_-Numeric}');
Expect(1, 190, '\p{Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Is_Numeric_Type= -Numeric}', "");
Expect(0, 190, '\p{^Is_Numeric_Type= -Numeric}', "");
Expect(0, 190, '\P{Is_Numeric_Type= -Numeric}', "");
Expect(1, 190, '\P{^Is_Numeric_Type= -Numeric}', "");
Expect(0, 187, '\p{Is_Numeric_Type= -Numeric}', "");
Expect(1, 187, '\p{^Is_Numeric_Type= -Numeric}', "");
Expect(1, 187, '\P{Is_Numeric_Type= -Numeric}', "");
Expect(0, 187, '\P{^Is_Numeric_Type= -Numeric}', "");
Error('\p{Is_Nt=_/a/NU}');
Error('\P{Is_Nt=_/a/NU}');
Expect(1, 190, '\p{Is_Nt=nu}', "");
Expect(0, 190, '\p{^Is_Nt=nu}', "");
Expect(0, 190, '\P{Is_Nt=nu}', "");
Expect(1, 190, '\P{^Is_Nt=nu}', "");
Expect(0, 187, '\p{Is_Nt=nu}', "");
Expect(1, 187, '\p{^Is_Nt=nu}', "");
Expect(1, 187, '\P{Is_Nt=nu}', "");
Expect(0, 187, '\P{^Is_Nt=nu}', "");
Expect(1, 190, '\p{Is_Nt=-	Nu}', "");
Expect(0, 190, '\p{^Is_Nt=-	Nu}', "");
Expect(0, 190, '\P{Is_Nt=-	Nu}', "");
Expect(1, 190, '\P{^Is_Nt=-	Nu}', "");
Expect(0, 187, '\p{Is_Nt=-	Nu}', "");
Expect(1, 187, '\p{^Is_Nt=-	Nu}', "");
Expect(1, 187, '\P{Is_Nt=-	Nu}', "");
Expect(0, 187, '\P{^Is_Nt=-	Nu}', "");
Error('\p{Expands_On_NFC=Yes}');
Error('\P{Expands_On_NFC=Yes}');
Error('\p{XO_NFC=Y}');
Error('\P{XO_NFC=Y}');
Error('\p{Is_Expands_On_NFC=T}');
Error('\P{Is_Expands_On_NFC=T}');
Error('\p{Is_XO_NFC: True}');
Error('\P{Is_XO_NFC: True}');
Error('\p{Expands_On_NFC=No}');
Error('\P{Expands_On_NFC=No}');
Error('\p{XO_NFC=N}');
Error('\P{XO_NFC=N}');
Error('\p{Is_Expands_On_NFC=F}');
Error('\P{Is_Expands_On_NFC=F}');
Error('\p{Is_XO_NFC=False}');
Error('\P{Is_XO_NFC=False}');
Error('\p{Dash:	:= Yes}');
Error('\P{Dash:	:= Yes}');
Expect(1, 45, '\p{Dash=yes}', "");
Expect(0, 45, '\p{^Dash=yes}', "");
Expect(0, 45, '\P{Dash=yes}', "");
Expect(1, 45, '\P{^Dash=yes}', "");
Expect(0, 44, '\p{Dash=yes}', "");
Expect(1, 44, '\p{^Dash=yes}', "");
Expect(1, 44, '\P{Dash=yes}', "");
Expect(0, 44, '\P{^Dash=yes}', "");
Expect(1, 45, '\p{Dash=- YES}', "");
Expect(0, 45, '\p{^Dash=- YES}', "");
Expect(0, 45, '\P{Dash=- YES}', "");
Expect(1, 45, '\P{^Dash=- YES}', "");
Expect(0, 44, '\p{Dash=- YES}', "");
Expect(1, 44, '\p{^Dash=- YES}', "");
Expect(1, 44, '\P{Dash=- YES}', "");
Expect(0, 44, '\P{^Dash=- YES}', "");
Error('\p{Is_Dash:   /a/Y}');
Error('\P{Is_Dash:   /a/Y}');
Expect(1, 45, '\p{Is_Dash=y}', "");
Expect(0, 45, '\p{^Is_Dash=y}', "");
Expect(0, 45, '\P{Is_Dash=y}', "");
Expect(1, 45, '\P{^Is_Dash=y}', "");
Expect(0, 44, '\p{Is_Dash=y}', "");
Expect(1, 44, '\p{^Is_Dash=y}', "");
Expect(1, 44, '\P{Is_Dash=y}', "");
Expect(0, 44, '\P{^Is_Dash=y}', "");
Expect(1, 45, '\p{Is_Dash=_Y}', "");
Expect(0, 45, '\p{^Is_Dash=_Y}', "");
Expect(0, 45, '\P{Is_Dash=_Y}', "");
Expect(1, 45, '\P{^Is_Dash=_Y}', "");
Expect(0, 44, '\p{Is_Dash=_Y}', "");
Expect(1, 44, '\p{^Is_Dash=_Y}', "");
Expect(1, 44, '\P{Is_Dash=_Y}', "");
Expect(0, 44, '\P{^Is_Dash=_Y}', "");
Error('\p{Dash= :=T}');
Error('\P{Dash= :=T}');
Expect(1, 45, '\p{Dash=t}', "");
Expect(0, 45, '\p{^Dash=t}', "");
Expect(0, 45, '\P{Dash=t}', "");
Expect(1, 45, '\P{^Dash=t}', "");
Expect(0, 44, '\p{Dash=t}', "");
Expect(1, 44, '\p{^Dash=t}', "");
Expect(1, 44, '\P{Dash=t}', "");
Expect(0, 44, '\P{^Dash=t}', "");
Expect(1, 45, '\p{Dash=	 t}', "");
Expect(0, 45, '\p{^Dash=	 t}', "");
Expect(0, 45, '\P{Dash=	 t}', "");
Expect(1, 45, '\P{^Dash=	 t}', "");
Expect(0, 44, '\p{Dash=	 t}', "");
Expect(1, 44, '\p{^Dash=	 t}', "");
Expect(1, 44, '\P{Dash=	 t}', "");
Expect(0, 44, '\P{^Dash=	 t}', "");
Error('\p{Is_Dash=:=-TRUE}');
Error('\P{Is_Dash=:=-TRUE}');
Expect(1, 45, '\p{Is_Dash=true}', "");
Expect(0, 45, '\p{^Is_Dash=true}', "");
Expect(0, 45, '\P{Is_Dash=true}', "");
Expect(1, 45, '\P{^Is_Dash=true}', "");
Expect(0, 44, '\p{Is_Dash=true}', "");
Expect(1, 44, '\p{^Is_Dash=true}', "");
Expect(1, 44, '\P{Is_Dash=true}', "");
Expect(0, 44, '\P{^Is_Dash=true}', "");
Expect(1, 45, '\p{Is_Dash= _True}', "");
Expect(0, 45, '\p{^Is_Dash= _True}', "");
Expect(0, 45, '\P{Is_Dash= _True}', "");
Expect(1, 45, '\P{^Is_Dash= _True}', "");
Expect(0, 44, '\p{Is_Dash= _True}', "");
Expect(1, 44, '\p{^Is_Dash= _True}', "");
Expect(1, 44, '\P{Is_Dash= _True}', "");
Expect(0, 44, '\P{^Is_Dash= _True}', "");
Error('\p{Dash=_	no:=}');
Error('\P{Dash=_	no:=}');
Expect(1, 44, '\p{Dash=no}', "");
Expect(0, 44, '\p{^Dash=no}', "");
Expect(0, 44, '\P{Dash=no}', "");
Expect(1, 44, '\P{^Dash=no}', "");
Expect(0, 45, '\p{Dash=no}', "");
Expect(1, 45, '\p{^Dash=no}', "");
Expect(1, 45, '\P{Dash=no}', "");
Expect(0, 45, '\P{^Dash=no}', "");
Expect(1, 44, '\p{Dash=_ No}', "");
Expect(0, 44, '\p{^Dash=_ No}', "");
Expect(0, 44, '\P{Dash=_ No}', "");
Expect(1, 44, '\P{^Dash=_ No}', "");
Expect(0, 45, '\p{Dash=_ No}', "");
Expect(1, 45, '\p{^Dash=_ No}', "");
Expect(1, 45, '\P{Dash=_ No}', "");
Expect(0, 45, '\P{^Dash=_ No}', "");
Error('\p{Is_Dash:	:=N}');
Error('\P{Is_Dash:	:=N}');
Expect(1, 44, '\p{Is_Dash=n}', "");
Expect(0, 44, '\p{^Is_Dash=n}', "");
Expect(0, 44, '\P{Is_Dash=n}', "");
Expect(1, 44, '\P{^Is_Dash=n}', "");
Expect(0, 45, '\p{Is_Dash=n}', "");
Expect(1, 45, '\p{^Is_Dash=n}', "");
Expect(1, 45, '\P{Is_Dash=n}', "");
Expect(0, 45, '\P{^Is_Dash=n}', "");
Expect(1, 44, '\p{Is_Dash:		_n}', "");
Expect(0, 44, '\p{^Is_Dash:		_n}', "");
Expect(0, 44, '\P{Is_Dash:		_n}', "");
Expect(1, 44, '\P{^Is_Dash:		_n}', "");
Expect(0, 45, '\p{Is_Dash:		_n}', "");
Expect(1, 45, '\p{^Is_Dash:		_n}', "");
Expect(1, 45, '\P{Is_Dash:		_n}', "");
Expect(0, 45, '\P{^Is_Dash:		_n}', "");
Error('\p{Dash=-F:=}');
Error('\P{Dash=-F:=}');
Expect(1, 44, '\p{Dash: f}', "");
Expect(0, 44, '\p{^Dash: f}', "");
Expect(0, 44, '\P{Dash: f}', "");
Expect(1, 44, '\P{^Dash: f}', "");
Expect(0, 45, '\p{Dash: f}', "");
Expect(1, 45, '\p{^Dash: f}', "");
Expect(1, 45, '\P{Dash: f}', "");
Expect(0, 45, '\P{^Dash: f}', "");
Expect(1, 44, '\p{Dash= _F}', "");
Expect(0, 44, '\p{^Dash= _F}', "");
Expect(0, 44, '\P{Dash= _F}', "");
Expect(1, 44, '\P{^Dash= _F}', "");
Expect(0, 45, '\p{Dash= _F}', "");
Expect(1, 45, '\p{^Dash= _F}', "");
Expect(1, 45, '\P{Dash= _F}', "");
Expect(0, 45, '\P{^Dash= _F}', "");
Error('\p{Is_Dash=	/a/False}');
Error('\P{Is_Dash=	/a/False}');
Expect(1, 44, '\p{Is_Dash=false}', "");
Expect(0, 44, '\p{^Is_Dash=false}', "");
Expect(0, 44, '\P{Is_Dash=false}', "");
Expect(1, 44, '\P{^Is_Dash=false}', "");
Expect(0, 45, '\p{Is_Dash=false}', "");
Expect(1, 45, '\p{^Is_Dash=false}', "");
Expect(1, 45, '\P{Is_Dash=false}', "");
Expect(0, 45, '\P{^Is_Dash=false}', "");
Expect(1, 44, '\p{Is_Dash=	_False}', "");
Expect(0, 44, '\p{^Is_Dash=	_False}', "");
Expect(0, 44, '\P{Is_Dash=	_False}', "");
Expect(1, 44, '\P{^Is_Dash=	_False}', "");
Expect(0, 45, '\p{Is_Dash=	_False}', "");
Expect(1, 45, '\p{^Is_Dash=	_False}', "");
Expect(1, 45, '\P{Is_Dash=	_False}', "");
Expect(0, 45, '\P{^Is_Dash=	_False}', "");
Error('\p{Changes_When_Titlecased=	YES/a/}');
Error('\P{Changes_When_Titlecased=	YES/a/}');
Expect(1, 122, '\p{Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\p{Changes_When_Titlecased= 	Yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased= 	Yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased= 	Yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased= 	Yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased= 	Yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased= 	Yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased= 	Yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased= 	Yes}', "");
Error('\p{CWT=_/a/Y}');
Error('\P{CWT=_/a/Y}');
Expect(1, 122, '\p{CWT=y}', "");
Expect(0, 122, '\p{^CWT=y}', "");
Expect(0, 122, '\P{CWT=y}', "");
Expect(1, 122, '\P{^CWT=y}', "");
Expect(0, 96, '\p{CWT=y}', "");
Expect(1, 96, '\p{^CWT=y}', "");
Expect(1, 96, '\P{CWT=y}', "");
Expect(0, 96, '\P{^CWT=y}', "");
Expect(1, 122, '\p{CWT=	y}', "");
Expect(0, 122, '\p{^CWT=	y}', "");
Expect(0, 122, '\P{CWT=	y}', "");
Expect(1, 122, '\P{^CWT=	y}', "");
Expect(0, 96, '\p{CWT=	y}', "");
Expect(1, 96, '\p{^CWT=	y}', "");
Expect(1, 96, '\P{CWT=	y}', "");
Expect(0, 96, '\P{^CWT=	y}', "");
Error('\p{Is_Changes_When_Titlecased=:=T}');
Error('\P{Is_Changes_When_Titlecased=:=T}');
Expect(1, 122, '\p{Is_Changes_When_Titlecased=t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased=t}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased=t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased=t}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased=t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased=t}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased=t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased=t}', "");
Expect(1, 122, '\p{Is_Changes_When_Titlecased=	-T}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased=	-T}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased=	-T}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased=	-T}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased=	-T}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased=	-T}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased=	-T}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased=	-T}', "");
Error('\p{Is_CWT=:= TRUE}');
Error('\P{Is_CWT=:= TRUE}');
Expect(1, 122, '\p{Is_CWT=true}', "");
Expect(0, 122, '\p{^Is_CWT=true}', "");
Expect(0, 122, '\P{Is_CWT=true}', "");
Expect(1, 122, '\P{^Is_CWT=true}', "");
Expect(0, 96, '\p{Is_CWT=true}', "");
Expect(1, 96, '\p{^Is_CWT=true}', "");
Expect(1, 96, '\P{Is_CWT=true}', "");
Expect(0, 96, '\P{^Is_CWT=true}', "");
Expect(1, 122, '\p{Is_CWT=	-true}', "");
Expect(0, 122, '\p{^Is_CWT=	-true}', "");
Expect(0, 122, '\P{Is_CWT=	-true}', "");
Expect(1, 122, '\P{^Is_CWT=	-true}', "");
Expect(0, 96, '\p{Is_CWT=	-true}', "");
Expect(1, 96, '\p{^Is_CWT=	-true}', "");
Expect(1, 96, '\P{Is_CWT=	-true}', "");
Expect(0, 96, '\P{^Is_CWT=	-true}', "");
Error('\p{Changes_When_Titlecased:		:=no}');
Error('\P{Changes_When_Titlecased:		:=no}');
Expect(1, 96, '\p{Changes_When_Titlecased=no}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased=no}', "");
Expect(0, 96, '\P{Changes_When_Titlecased=no}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased=no}', "");
Expect(0, 122, '\p{Changes_When_Titlecased=no}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased=no}', "");
Expect(1, 122, '\P{Changes_When_Titlecased=no}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased=no}', "");
Expect(1, 96, '\p{Changes_When_Titlecased=	_NO}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased=	_NO}', "");
Expect(0, 96, '\P{Changes_When_Titlecased=	_NO}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased=	_NO}', "");
Expect(0, 122, '\p{Changes_When_Titlecased=	_NO}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased=	_NO}', "");
Expect(1, 122, '\P{Changes_When_Titlecased=	_NO}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased=	_NO}', "");
Error('\p{CWT=_	n/a/}');
Error('\P{CWT=_	n/a/}');
Expect(1, 96, '\p{CWT=n}', "");
Expect(0, 96, '\p{^CWT=n}', "");
Expect(0, 96, '\P{CWT=n}', "");
Expect(1, 96, '\P{^CWT=n}', "");
Expect(0, 122, '\p{CWT=n}', "");
Expect(1, 122, '\p{^CWT=n}', "");
Expect(1, 122, '\P{CWT=n}', "");
Expect(0, 122, '\P{^CWT=n}', "");
Expect(1, 96, '\p{CWT=--N}', "");
Expect(0, 96, '\p{^CWT=--N}', "");
Expect(0, 96, '\P{CWT=--N}', "");
Expect(1, 96, '\P{^CWT=--N}', "");
Expect(0, 122, '\p{CWT=--N}', "");
Expect(1, 122, '\p{^CWT=--N}', "");
Expect(1, 122, '\P{CWT=--N}', "");
Expect(0, 122, '\P{^CWT=--N}', "");
Error('\p{Is_Changes_When_Titlecased=/a/F}');
Error('\P{Is_Changes_When_Titlecased=/a/F}');
Expect(1, 96, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Titlecased=		F}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased=		F}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased=		F}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased=		F}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased=		F}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased=		F}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased=		F}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased=		F}', "");
Error('\p{Is_CWT= :=False}');
Error('\P{Is_CWT= :=False}');
Expect(1, 96, '\p{Is_CWT=false}', "");
Expect(0, 96, '\p{^Is_CWT=false}', "");
Expect(0, 96, '\P{Is_CWT=false}', "");
Expect(1, 96, '\P{^Is_CWT=false}', "");
Expect(0, 122, '\p{Is_CWT=false}', "");
Expect(1, 122, '\p{^Is_CWT=false}', "");
Expect(1, 122, '\P{Is_CWT=false}', "");
Expect(0, 122, '\P{^Is_CWT=false}', "");
Expect(1, 96, '\p{Is_CWT= -FALSE}', "");
Expect(0, 96, '\p{^Is_CWT= -FALSE}', "");
Expect(0, 96, '\P{Is_CWT= -FALSE}', "");
Expect(1, 96, '\P{^Is_CWT= -FALSE}', "");
Expect(0, 122, '\p{Is_CWT= -FALSE}', "");
Expect(1, 122, '\p{^Is_CWT= -FALSE}', "");
Expect(1, 122, '\P{Is_CWT= -FALSE}', "");
Expect(0, 122, '\P{^Is_CWT= -FALSE}', "");
Error('\p{Hangul_Syllable_Type=trailing:=Jamo}');
Error('\P{Hangul_Syllable_Type=trailing:=Jamo}');
Expect(1, 4607, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type= -TrailingJamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type= -TrailingJamo}', "");
Error('\p{Hst=/a/T}');
Error('\P{Hst=/a/T}');
Expect(1, 4607, '\p{Hst=t}', "");
Expect(0, 4607, '\p{^Hst=t}', "");
Expect(0, 4607, '\P{Hst=t}', "");
Expect(1, 4607, '\P{^Hst=t}', "");
Expect(0, 4519, '\p{Hst=t}', "");
Expect(1, 4519, '\p{^Hst=t}', "");
Expect(1, 4519, '\P{Hst=t}', "");
Expect(0, 4519, '\P{^Hst=t}', "");
Expect(1, 4607, '\p{Hst=--T}', "");
Expect(0, 4607, '\p{^Hst=--T}', "");
Expect(0, 4607, '\P{Hst=--T}', "");
Expect(1, 4607, '\P{^Hst=--T}', "");
Expect(0, 4519, '\p{Hst=--T}', "");
Expect(1, 4519, '\p{^Hst=--T}', "");
Expect(1, 4519, '\P{Hst=--T}', "");
Expect(0, 4519, '\P{^Hst=--T}', "");
Error('\p{Is_Hangul_Syllable_Type=/a/	_trailing Jamo}');
Error('\P{Is_Hangul_Syllable_Type=/a/	_trailing Jamo}');
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=- TRAILINGJAMO}', "");
Error('\p{Is_Hst= :=T}');
Error('\P{Is_Hst= :=T}');
Expect(1, 4607, '\p{Is_Hst=t}', "");
Expect(0, 4607, '\p{^Is_Hst=t}', "");
Expect(0, 4607, '\P{Is_Hst=t}', "");
Expect(1, 4607, '\P{^Is_Hst=t}', "");
Expect(0, 4519, '\p{Is_Hst=t}', "");
Expect(1, 4519, '\p{^Is_Hst=t}', "");
Expect(1, 4519, '\P{Is_Hst=t}', "");
Expect(0, 4519, '\P{^Is_Hst=t}', "");
Expect(1, 4607, '\p{Is_Hst=-T}', "");
Expect(0, 4607, '\p{^Is_Hst=-T}', "");
Expect(0, 4607, '\P{Is_Hst=-T}', "");
Expect(1, 4607, '\P{^Is_Hst=-T}', "");
Expect(0, 4519, '\p{Is_Hst=-T}', "");
Expect(1, 4519, '\p{^Is_Hst=-T}', "");
Expect(1, 4519, '\P{Is_Hst=-T}', "");
Expect(0, 4519, '\P{^Is_Hst=-T}', "");
Error('\p{Hangul_Syllable_Type=	:=LVT_Syllable}');
Error('\P{Hangul_Syllable_Type=	:=LVT_Syllable}');
Expect(1, 44059, '\p{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\p{Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type=-LVT SYLLABLE}', "");
Error('\p{Hst=-/a/LVT}');
Error('\P{Hst=-/a/LVT}');
Expect(1, 44059, '\p{Hst=lvt}', "");
Expect(0, 44059, '\p{^Hst=lvt}', "");
Expect(0, 44059, '\P{Hst=lvt}', "");
Expect(1, 44059, '\P{^Hst=lvt}', "");
Expect(0, 44032, '\p{Hst=lvt}', "");
Expect(1, 44032, '\p{^Hst=lvt}', "");
Expect(1, 44032, '\P{Hst=lvt}', "");
Expect(0, 44032, '\P{^Hst=lvt}', "");
Expect(1, 44059, '\p{Hst=_-LVT}', "");
Expect(0, 44059, '\p{^Hst=_-LVT}', "");
Expect(0, 44059, '\P{Hst=_-LVT}', "");
Expect(1, 44059, '\P{^Hst=_-LVT}', "");
Expect(0, 44032, '\p{Hst=_-LVT}', "");
Expect(1, 44032, '\p{^Hst=_-LVT}', "");
Expect(1, 44032, '\P{Hst=_-LVT}', "");
Expect(0, 44032, '\P{^Hst=_-LVT}', "");
Error('\p{Is_Hangul_Syllable_Type=-LVT/a/Syllable}');
Error('\P{Is_Hangul_Syllable_Type=-LVT/a/Syllable}');
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type:	lvtsyllable}', "");
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type=		LVTsyllable}', "");
Error('\p{Is_Hst=-/a/lvt}');
Error('\P{Is_Hst=-/a/lvt}');
Expect(1, 44059, '\p{Is_Hst=lvt}', "");
Expect(0, 44059, '\p{^Is_Hst=lvt}', "");
Expect(0, 44059, '\P{Is_Hst=lvt}', "");
Expect(1, 44059, '\P{^Is_Hst=lvt}', "");
Expect(0, 44032, '\p{Is_Hst=lvt}', "");
Expect(1, 44032, '\p{^Is_Hst=lvt}', "");
Expect(1, 44032, '\P{Is_Hst=lvt}', "");
Expect(0, 44032, '\P{^Is_Hst=lvt}', "");
Error('\p{Hangul_Syllable_Type=	-vowel/a/Jamo}');
Error('\P{Hangul_Syllable_Type=	-vowel/a/Jamo}');
Expect(1, 4519, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=-Vowel_JAMO}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=-Vowel_JAMO}', "");
Error('\p{Hst=_V:=}');
Error('\P{Hst=_V:=}');
Expect(1, 4519, '\p{Hst=v}', "");
Expect(0, 4519, '\p{^Hst=v}', "");
Expect(0, 4519, '\P{Hst=v}', "");
Expect(1, 4519, '\P{^Hst=v}', "");
Expect(0, 4447, '\p{Hst=v}', "");
Expect(1, 4447, '\p{^Hst=v}', "");
Expect(1, 4447, '\P{Hst=v}', "");
Expect(0, 4447, '\P{^Hst=v}', "");
Expect(1, 4519, '\p{Hst=	_v}', "");
Expect(0, 4519, '\p{^Hst=	_v}', "");
Expect(0, 4519, '\P{Hst=	_v}', "");
Expect(1, 4519, '\P{^Hst=	_v}', "");
Expect(0, 4447, '\p{Hst=	_v}', "");
Expect(1, 4447, '\p{^Hst=	_v}', "");
Expect(1, 4447, '\P{Hst=	_v}', "");
Expect(0, 4447, '\P{^Hst=	_v}', "");
Error('\p{Is_Hangul_Syllable_Type=--vowel_jamo:=}');
Error('\P{Is_Hangul_Syllable_Type=--vowel_jamo:=}');
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=--vowel Jamo}', "");
Error('\p{Is_Hst:   /a/V}');
Error('\P{Is_Hst:   /a/V}');
Expect(1, 4519, '\p{Is_Hst:v}', "");
Expect(0, 4519, '\p{^Is_Hst:v}', "");
Expect(0, 4519, '\P{Is_Hst:v}', "");
Expect(1, 4519, '\P{^Is_Hst:v}', "");
Expect(0, 4447, '\p{Is_Hst:v}', "");
Expect(1, 4447, '\p{^Is_Hst:v}', "");
Expect(1, 4447, '\P{Is_Hst:v}', "");
Expect(0, 4447, '\P{^Is_Hst:v}', "");
Expect(1, 4519, '\p{Is_Hst:	 V}', "");
Expect(0, 4519, '\p{^Is_Hst:	 V}', "");
Expect(0, 4519, '\P{Is_Hst:	 V}', "");
Expect(1, 4519, '\P{^Is_Hst:	 V}', "");
Expect(0, 4447, '\p{Is_Hst:	 V}', "");
Expect(1, 4447, '\p{^Is_Hst:	 V}', "");
Expect(1, 4447, '\P{Is_Hst:	 V}', "");
Expect(0, 4447, '\P{^Is_Hst:	 V}', "");
Error('\p{Hangul_Syllable_Type:	_ lv	Syllable:=}');
Error('\P{Hangul_Syllable_Type:	_ lv	Syllable:=}');
Expect(1, 44032, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type= -lv_Syllable}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type= -lv_Syllable}', "");
Error('\p{Hst=:=	LV}');
Error('\P{Hst=:=	LV}');
Expect(1, 44032, '\p{Hst=lv}', "");
Expect(0, 44032, '\p{^Hst=lv}', "");
Expect(0, 44032, '\P{Hst=lv}', "");
Expect(1, 44032, '\P{^Hst=lv}', "");
Expect(0, 44031, '\p{Hst=lv}', "");
Expect(1, 44031, '\p{^Hst=lv}', "");
Expect(1, 44031, '\P{Hst=lv}', "");
Expect(0, 44031, '\P{^Hst=lv}', "");
Expect(1, 44032, '\p{Hst=	_LV}', "");
Expect(0, 44032, '\p{^Hst=	_LV}', "");
Expect(0, 44032, '\P{Hst=	_LV}', "");
Expect(1, 44032, '\P{^Hst=	_LV}', "");
Expect(0, 44031, '\p{Hst=	_LV}', "");
Expect(1, 44031, '\p{^Hst=	_LV}', "");
Expect(1, 44031, '\P{Hst=	_LV}', "");
Expect(0, 44031, '\P{^Hst=	_LV}', "");
Error('\p{Is_Hangul_Syllable_Type=/a/lvSyllable}');
Error('\P{Is_Hangul_Syllable_Type=/a/lvSyllable}');
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type=__LVSYLLABLE}', "");
Error('\p{Is_Hst=	LV/a/}');
Error('\P{Is_Hst=	LV/a/}');
Expect(1, 44032, '\p{Is_Hst=lv}', "");
Expect(0, 44032, '\p{^Is_Hst=lv}', "");
Expect(0, 44032, '\P{Is_Hst=lv}', "");
Expect(1, 44032, '\P{^Is_Hst=lv}', "");
Expect(0, 44031, '\p{Is_Hst=lv}', "");
Expect(1, 44031, '\p{^Is_Hst=lv}', "");
Expect(1, 44031, '\P{Is_Hst=lv}', "");
Expect(0, 44031, '\P{^Is_Hst=lv}', "");
Expect(1, 44032, '\p{Is_Hst=  LV}', "");
Expect(0, 44032, '\p{^Is_Hst=  LV}', "");
Expect(0, 44032, '\P{Is_Hst=  LV}', "");
Expect(1, 44032, '\P{^Is_Hst=  LV}', "");
Expect(0, 44031, '\p{Is_Hst=  LV}', "");
Expect(1, 44031, '\p{^Is_Hst=  LV}', "");
Expect(1, 44031, '\P{Is_Hst=  LV}', "");
Expect(0, 44031, '\P{^Is_Hst=  LV}', "");
Error('\p{Hangul_Syllable_Type=-not/a/Applicable}');
Error('\P{Hangul_Syllable_Type=-not/a/Applicable}');
Expect(1, 4351, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type=--Not_Applicable}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type=--Not_Applicable}', "");
Error('\p{Hst=-:=NA}');
Error('\P{Hst=-:=NA}');
Expect(1, 4351, '\p{Hst=na}', "");
Expect(0, 4351, '\p{^Hst=na}', "");
Expect(0, 4351, '\P{Hst=na}', "");
Expect(1, 4351, '\P{^Hst=na}', "");
Expect(0, 4607, '\p{Hst=na}', "");
Expect(1, 4607, '\p{^Hst=na}', "");
Expect(1, 4607, '\P{Hst=na}', "");
Expect(0, 4607, '\P{^Hst=na}', "");
Expect(1, 4351, '\p{Hst=  NA}', "");
Expect(0, 4351, '\p{^Hst=  NA}', "");
Expect(0, 4351, '\P{Hst=  NA}', "");
Expect(1, 4351, '\P{^Hst=  NA}', "");
Expect(0, 4607, '\p{Hst=  NA}', "");
Expect(1, 4607, '\p{^Hst=  NA}', "");
Expect(1, 4607, '\P{Hst=  NA}', "");
Expect(0, 4607, '\P{^Hst=  NA}', "");
Error('\p{Is_Hangul_Syllable_Type=__Not_applicable/a/}');
Error('\P{Is_Hangul_Syllable_Type=__Not_applicable/a/}');
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type:		 Not_Applicable}', "");
Error('\p{Is_Hst=  NA:=}');
Error('\P{Is_Hst=  NA:=}');
Expect(1, 4351, '\p{Is_Hst: na}', "");
Expect(0, 4351, '\p{^Is_Hst: na}', "");
Expect(0, 4351, '\P{Is_Hst: na}', "");
Expect(1, 4351, '\P{^Is_Hst: na}', "");
Expect(0, 4607, '\p{Is_Hst: na}', "");
Expect(1, 4607, '\p{^Is_Hst: na}', "");
Expect(1, 4607, '\P{Is_Hst: na}', "");
Expect(0, 4607, '\P{^Is_Hst: na}', "");
Expect(1, 4351, '\p{Is_Hst= 	NA}', "");
Expect(0, 4351, '\p{^Is_Hst= 	NA}', "");
Expect(0, 4351, '\P{Is_Hst= 	NA}', "");
Expect(1, 4351, '\P{^Is_Hst= 	NA}', "");
Expect(0, 4607, '\p{Is_Hst= 	NA}', "");
Expect(1, 4607, '\p{^Is_Hst= 	NA}', "");
Expect(1, 4607, '\P{Is_Hst= 	NA}', "");
Expect(0, 4607, '\P{^Is_Hst= 	NA}', "");
Error('\p{Hangul_Syllable_Type=-	Leading/a/Jamo}');
Error('\P{Hangul_Syllable_Type=-	Leading/a/Jamo}');
Expect(1, 4447, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type= -LEADING_Jamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type= -LEADING_Jamo}', "");
Error('\p{Hst=:=		L}');
Error('\P{Hst=:=		L}');
Expect(1, 4447, '\p{Hst=l}', "");
Expect(0, 4447, '\p{^Hst=l}', "");
Expect(0, 4447, '\P{Hst=l}', "");
Expect(1, 4447, '\P{^Hst=l}', "");
Expect(0, 4351, '\p{Hst=l}', "");
Expect(1, 4351, '\p{^Hst=l}', "");
Expect(1, 4351, '\P{Hst=l}', "");
Expect(0, 4351, '\P{^Hst=l}', "");
Expect(1, 4447, '\p{Hst:   _L}', "");
Expect(0, 4447, '\p{^Hst:   _L}', "");
Expect(0, 4447, '\P{Hst:   _L}', "");
Expect(1, 4447, '\P{^Hst:   _L}', "");
Expect(0, 4351, '\p{Hst:   _L}', "");
Expect(1, 4351, '\p{^Hst:   _L}', "");
Expect(1, 4351, '\P{Hst:   _L}', "");
Expect(0, 4351, '\P{^Hst:   _L}', "");
Error('\p{Is_Hangul_Syllable_Type=/a/Leading_Jamo}');
Error('\P{Is_Hangul_Syllable_Type=/a/Leading_Jamo}');
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type=- leading	Jamo}', "");
Error('\p{Is_Hst=/a/_-l}');
Error('\P{Is_Hst=/a/_-l}');
Expect(1, 4447, '\p{Is_Hst=l}', "");
Expect(0, 4447, '\p{^Is_Hst=l}', "");
Expect(0, 4447, '\P{Is_Hst=l}', "");
Expect(1, 4447, '\P{^Is_Hst=l}', "");
Expect(0, 4351, '\p{Is_Hst=l}', "");
Expect(1, 4351, '\p{^Is_Hst=l}', "");
Expect(1, 4351, '\P{Is_Hst=l}', "");
Expect(0, 4351, '\P{^Is_Hst=l}', "");
Expect(1, 4447, '\p{Is_Hst=--L}', "");
Expect(0, 4447, '\p{^Is_Hst=--L}', "");
Expect(0, 4447, '\P{Is_Hst=--L}', "");
Expect(1, 4447, '\P{^Is_Hst=--L}', "");
Expect(0, 4351, '\p{Is_Hst=--L}', "");
Expect(1, 4351, '\p{^Is_Hst=--L}', "");
Expect(1, 4351, '\P{Is_Hst=--L}', "");
Expect(0, 4351, '\P{^Is_Hst=--L}', "");
Error('\p{Noncharacter_Code_Point=:=	YES}');
Error('\P{Noncharacter_Code_Point=:=	YES}');
Expect(0, 64975, '\p{Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\p{Noncharacter_Code_Point=_	yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=_	yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=_	yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=_	yes}', "");
Error('\p{NChar=-:=y}');
Error('\P{NChar=-:=y}');
Expect(0, 64975, '\p{NChar=y}', "");
Expect(1, 64975, '\p{^NChar=y}', "");
Expect(1, 64975, '\P{NChar=y}', "");
Expect(0, 64975, '\P{^NChar=y}', "");
Expect(0, 64975, '\p{NChar: y}', "");
Expect(1, 64975, '\p{^NChar: y}', "");
Expect(1, 64975, '\P{NChar: y}', "");
Expect(0, 64975, '\P{^NChar: y}', "");
Error('\p{Is_Noncharacter_Code_Point= 	t:=}');
Error('\P{Is_Noncharacter_Code_Point= 	t:=}');
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=	t}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=	t}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=	t}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=	t}', "");
Error('\p{Is_NChar=-TRUE/a/}');
Error('\P{Is_NChar=-TRUE/a/}');
Expect(0, 64975, '\p{Is_NChar=true}', "");
Expect(1, 64975, '\p{^Is_NChar=true}', "");
Expect(1, 64975, '\P{Is_NChar=true}', "");
Expect(0, 64975, '\P{^Is_NChar=true}', "");
Expect(0, 64975, '\p{Is_NChar=_True}', "");
Expect(1, 64975, '\p{^Is_NChar=_True}', "");
Expect(1, 64975, '\P{Is_NChar=_True}', "");
Expect(0, 64975, '\P{^Is_NChar=_True}', "");
Error('\p{Noncharacter_Code_Point= _No:=}');
Error('\P{Noncharacter_Code_Point= _No:=}');
Expect(1, 64975, '\p{Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\p{Noncharacter_Code_Point=	-no}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point=	-no}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point=	-no}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point=	-no}', "");
Error('\p{NChar=- N:=}');
Error('\P{NChar=- N:=}');
Expect(1, 64975, '\p{NChar=n}', "");
Expect(0, 64975, '\p{^NChar=n}', "");
Expect(0, 64975, '\P{NChar=n}', "");
Expect(1, 64975, '\P{^NChar=n}', "");
Expect(1, 64975, '\p{NChar=  N}', "");
Expect(0, 64975, '\p{^NChar=  N}', "");
Expect(0, 64975, '\P{NChar=  N}', "");
Expect(1, 64975, '\P{^NChar=  N}', "");
Error('\p{Is_Noncharacter_Code_Point=/a/ _F}');
Error('\P{Is_Noncharacter_Code_Point=/a/ _F}');
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point=f}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point=f}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point=f}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point=f}', "");
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point:	 	F}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point:	 	F}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point:	 	F}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point:	 	F}', "");
Error('\p{Is_NChar=	False:=}');
Error('\P{Is_NChar=	False:=}');
Expect(1, 64975, '\p{Is_NChar:false}', "");
Expect(0, 64975, '\p{^Is_NChar:false}', "");
Expect(0, 64975, '\P{Is_NChar:false}', "");
Expect(1, 64975, '\P{^Is_NChar:false}', "");
Expect(1, 64975, '\p{Is_NChar=-_FALSE}', "");
Expect(0, 64975, '\p{^Is_NChar=-_FALSE}', "");
Expect(0, 64975, '\P{Is_NChar=-_FALSE}', "");
Expect(1, 64975, '\P{^Is_NChar=-_FALSE}', "");
Error('\p{Unified_Ideograph=:=_-Yes}');
Error('\P{Unified_Ideograph=:=_-Yes}');
Expect(1, 19893, '\p{Unified_Ideograph:   yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph:   yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph:   yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph:   yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph:   yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph:   yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph:   yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph:   yes}', "");
Expect(1, 19893, '\p{Unified_Ideograph=-	Yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph=-	Yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph=-	Yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph=-	Yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph=-	Yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph=-	Yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph=-	Yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph=-	Yes}', "");
Error('\p{UIdeo= _Y:=}');
Error('\P{UIdeo= _Y:=}');
Expect(1, 19893, '\p{UIdeo=y}', "");
Expect(0, 19893, '\p{^UIdeo=y}', "");
Expect(0, 19893, '\P{UIdeo=y}', "");
Expect(1, 19893, '\P{^UIdeo=y}', "");
Expect(0, 13311, '\p{UIdeo=y}', "");
Expect(1, 13311, '\p{^UIdeo=y}', "");
Expect(1, 13311, '\P{UIdeo=y}', "");
Expect(0, 13311, '\P{^UIdeo=y}', "");
Expect(1, 19893, '\p{UIdeo=	y}', "");
Expect(0, 19893, '\p{^UIdeo=	y}', "");
Expect(0, 19893, '\P{UIdeo=	y}', "");
Expect(1, 19893, '\P{^UIdeo=	y}', "");
Expect(0, 13311, '\p{UIdeo=	y}', "");
Expect(1, 13311, '\p{^UIdeo=	y}', "");
Expect(1, 13311, '\P{UIdeo=	y}', "");
Expect(0, 13311, '\P{^UIdeo=	y}', "");
Error('\p{Is_Unified_Ideograph=:=_T}');
Error('\P{Is_Unified_Ideograph=:=_T}');
Expect(1, 19893, '\p{Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\p{Is_Unified_Ideograph=-	T}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=-	T}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=-	T}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=-	T}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=-	T}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=-	T}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=-	T}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=-	T}', "");
Error('\p{Is_UIdeo: /a/ True}');
Error('\P{Is_UIdeo: /a/ True}');
Expect(1, 19893, '\p{Is_UIdeo=true}', "");
Expect(0, 19893, '\p{^Is_UIdeo=true}', "");
Expect(0, 19893, '\P{Is_UIdeo=true}', "");
Expect(1, 19893, '\P{^Is_UIdeo=true}', "");
Expect(0, 13311, '\p{Is_UIdeo=true}', "");
Expect(1, 13311, '\p{^Is_UIdeo=true}', "");
Expect(1, 13311, '\P{Is_UIdeo=true}', "");
Expect(0, 13311, '\P{^Is_UIdeo=true}', "");
Expect(1, 19893, '\p{Is_UIdeo=_TRUE}', "");
Expect(0, 19893, '\p{^Is_UIdeo=_TRUE}', "");
Expect(0, 19893, '\P{Is_UIdeo=_TRUE}', "");
Expect(1, 19893, '\P{^Is_UIdeo=_TRUE}', "");
Expect(0, 13311, '\p{Is_UIdeo=_TRUE}', "");
Expect(1, 13311, '\p{^Is_UIdeo=_TRUE}', "");
Expect(1, 13311, '\P{Is_UIdeo=_TRUE}', "");
Expect(0, 13311, '\P{^Is_UIdeo=_TRUE}', "");
Error('\p{Unified_Ideograph=		no/a/}');
Error('\P{Unified_Ideograph=		no/a/}');
Expect(1, 13311, '\p{Unified_Ideograph=no}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=no}', "");
Expect(0, 13311, '\P{Unified_Ideograph=no}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=no}', "");
Expect(0, 19893, '\p{Unified_Ideograph=no}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=no}', "");
Expect(1, 19893, '\P{Unified_Ideograph=no}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=no}', "");
Expect(1, 13311, '\p{Unified_Ideograph=_ no}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=_ no}', "");
Expect(0, 13311, '\P{Unified_Ideograph=_ no}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=_ no}', "");
Expect(0, 19893, '\p{Unified_Ideograph=_ no}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=_ no}', "");
Expect(1, 19893, '\P{Unified_Ideograph=_ no}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=_ no}', "");
Error('\p{UIdeo=-n/a/}');
Error('\P{UIdeo=-n/a/}');
Expect(1, 13311, '\p{UIdeo=n}', "");
Expect(0, 13311, '\p{^UIdeo=n}', "");
Expect(0, 13311, '\P{UIdeo=n}', "");
Expect(1, 13311, '\P{^UIdeo=n}', "");
Expect(0, 19893, '\p{UIdeo=n}', "");
Expect(1, 19893, '\p{^UIdeo=n}', "");
Expect(1, 19893, '\P{UIdeo=n}', "");
Expect(0, 19893, '\P{^UIdeo=n}', "");
Expect(1, 13311, '\p{UIdeo=_	n}', "");
Expect(0, 13311, '\p{^UIdeo=_	n}', "");
Expect(0, 13311, '\P{UIdeo=_	n}', "");
Expect(1, 13311, '\P{^UIdeo=_	n}', "");
Expect(0, 19893, '\p{UIdeo=_	n}', "");
Expect(1, 19893, '\p{^UIdeo=_	n}', "");
Expect(1, 19893, '\P{UIdeo=_	n}', "");
Expect(0, 19893, '\P{^UIdeo=_	n}', "");
Error('\p{Is_Unified_Ideograph=	:=F}');
Error('\P{Is_Unified_Ideograph=	:=F}');
Expect(1, 13311, '\p{Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\p{Is_Unified_Ideograph=-	F}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph=-	F}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph=-	F}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph=-	F}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph=-	F}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph=-	F}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph=-	F}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph=-	F}', "");
Error('\p{Is_UIdeo:   _FALSE:=}');
Error('\P{Is_UIdeo:   _FALSE:=}');
Expect(1, 13311, '\p{Is_UIdeo=false}', "");
Expect(0, 13311, '\p{^Is_UIdeo=false}', "");
Expect(0, 13311, '\P{Is_UIdeo=false}', "");
Expect(1, 13311, '\P{^Is_UIdeo=false}', "");
Expect(0, 19893, '\p{Is_UIdeo=false}', "");
Expect(1, 19893, '\p{^Is_UIdeo=false}', "");
Expect(1, 19893, '\P{Is_UIdeo=false}', "");
Expect(0, 19893, '\P{^Is_UIdeo=false}', "");
Expect(1, 13311, '\p{Is_UIdeo=	-false}', "");
Expect(0, 13311, '\p{^Is_UIdeo=	-false}', "");
Expect(0, 13311, '\P{Is_UIdeo=	-false}', "");
Expect(1, 13311, '\P{^Is_UIdeo=	-false}', "");
Expect(0, 19893, '\p{Is_UIdeo=	-false}', "");
Expect(1, 19893, '\p{^Is_UIdeo=	-false}', "");
Expect(1, 19893, '\P{Is_UIdeo=	-false}', "");
Expect(0, 19893, '\P{^Is_UIdeo=	-false}', "");
Error('\p{Diacritic=:=_	yes}');
Error('\P{Diacritic=:=_	yes}');
Expect(1, 94, '\p{Diacritic=yes}', "");
Expect(0, 94, '\p{^Diacritic=yes}', "");
Expect(0, 94, '\P{Diacritic=yes}', "");
Expect(1, 94, '\P{^Diacritic=yes}', "");
Expect(0, 93, '\p{Diacritic=yes}', "");
Expect(1, 93, '\p{^Diacritic=yes}', "");
Expect(1, 93, '\P{Diacritic=yes}', "");
Expect(0, 93, '\P{^Diacritic=yes}', "");
Expect(1, 94, '\p{Diacritic=- yes}', "");
Expect(0, 94, '\p{^Diacritic=- yes}', "");
Expect(0, 94, '\P{Diacritic=- yes}', "");
Expect(1, 94, '\P{^Diacritic=- yes}', "");
Expect(0, 93, '\p{Diacritic=- yes}', "");
Expect(1, 93, '\p{^Diacritic=- yes}', "");
Expect(1, 93, '\P{Diacritic=- yes}', "");
Expect(0, 93, '\P{^Diacritic=- yes}', "");
Error('\p{Dia=/a/	-Y}');
Error('\P{Dia=/a/	-Y}');
Expect(1, 94, '\p{Dia=y}', "");
Expect(0, 94, '\p{^Dia=y}', "");
Expect(0, 94, '\P{Dia=y}', "");
Expect(1, 94, '\P{^Dia=y}', "");
Expect(0, 93, '\p{Dia=y}', "");
Expect(1, 93, '\p{^Dia=y}', "");
Expect(1, 93, '\P{Dia=y}', "");
Expect(0, 93, '\P{^Dia=y}', "");
Expect(1, 94, '\p{Dia=	-Y}', "");
Expect(0, 94, '\p{^Dia=	-Y}', "");
Expect(0, 94, '\P{Dia=	-Y}', "");
Expect(1, 94, '\P{^Dia=	-Y}', "");
Expect(0, 93, '\p{Dia=	-Y}', "");
Expect(1, 93, '\p{^Dia=	-Y}', "");
Expect(1, 93, '\P{Dia=	-Y}', "");
Expect(0, 93, '\P{^Dia=	-Y}', "");
Error('\p{Is_Diacritic= :=T}');
Error('\P{Is_Diacritic= :=T}');
Expect(1, 94, '\p{Is_Diacritic=t}', "");
Expect(0, 94, '\p{^Is_Diacritic=t}', "");
Expect(0, 94, '\P{Is_Diacritic=t}', "");
Expect(1, 94, '\P{^Is_Diacritic=t}', "");
Expect(0, 93, '\p{Is_Diacritic=t}', "");
Expect(1, 93, '\p{^Is_Diacritic=t}', "");
Expect(1, 93, '\P{Is_Diacritic=t}', "");
Expect(0, 93, '\P{^Is_Diacritic=t}', "");
Expect(1, 94, '\p{Is_Diacritic:	_-T}', "");
Expect(0, 94, '\p{^Is_Diacritic:	_-T}', "");
Expect(0, 94, '\P{Is_Diacritic:	_-T}', "");
Expect(1, 94, '\P{^Is_Diacritic:	_-T}', "");
Expect(0, 93, '\p{Is_Diacritic:	_-T}', "");
Expect(1, 93, '\p{^Is_Diacritic:	_-T}', "");
Expect(1, 93, '\P{Is_Diacritic:	_-T}', "");
Expect(0, 93, '\P{^Is_Diacritic:	_-T}', "");
Error('\p{Is_Dia= _true/a/}');
Error('\P{Is_Dia= _true/a/}');
Expect(1, 94, '\p{Is_Dia=true}', "");
Expect(0, 94, '\p{^Is_Dia=true}', "");
Expect(0, 94, '\P{Is_Dia=true}', "");
Expect(1, 94, '\P{^Is_Dia=true}', "");
Expect(0, 93, '\p{Is_Dia=true}', "");
Expect(1, 93, '\p{^Is_Dia=true}', "");
Expect(1, 93, '\P{Is_Dia=true}', "");
Expect(0, 93, '\P{^Is_Dia=true}', "");
Expect(1, 94, '\p{Is_Dia=	TRUE}', "");
Expect(0, 94, '\p{^Is_Dia=	TRUE}', "");
Expect(0, 94, '\P{Is_Dia=	TRUE}', "");
Expect(1, 94, '\P{^Is_Dia=	TRUE}', "");
Expect(0, 93, '\p{Is_Dia=	TRUE}', "");
Expect(1, 93, '\p{^Is_Dia=	TRUE}', "");
Expect(1, 93, '\P{Is_Dia=	TRUE}', "");
Expect(0, 93, '\P{^Is_Dia=	TRUE}', "");
Error('\p{Diacritic=		NO/a/}');
Error('\P{Diacritic=		NO/a/}');
Expect(1, 93, '\p{Diacritic=no}', "");
Expect(0, 93, '\p{^Diacritic=no}', "");
Expect(0, 93, '\P{Diacritic=no}', "");
Expect(1, 93, '\P{^Diacritic=no}', "");
Expect(0, 94, '\p{Diacritic=no}', "");
Expect(1, 94, '\p{^Diacritic=no}', "");
Expect(1, 94, '\P{Diacritic=no}', "");
Expect(0, 94, '\P{^Diacritic=no}', "");
Expect(1, 93, '\p{Diacritic= -No}', "");
Expect(0, 93, '\p{^Diacritic= -No}', "");
Expect(0, 93, '\P{Diacritic= -No}', "");
Expect(1, 93, '\P{^Diacritic= -No}', "");
Expect(0, 94, '\p{Diacritic= -No}', "");
Expect(1, 94, '\p{^Diacritic= -No}', "");
Expect(1, 94, '\P{Diacritic= -No}', "");
Expect(0, 94, '\P{^Diacritic= -No}', "");
Error('\p{Dia=	_N:=}');
Error('\P{Dia=	_N:=}');
Expect(1, 93, '\p{Dia=n}', "");
Expect(0, 93, '\p{^Dia=n}', "");
Expect(0, 93, '\P{Dia=n}', "");
Expect(1, 93, '\P{^Dia=n}', "");
Expect(0, 94, '\p{Dia=n}', "");
Expect(1, 94, '\p{^Dia=n}', "");
Expect(1, 94, '\P{Dia=n}', "");
Expect(0, 94, '\P{^Dia=n}', "");
Expect(1, 93, '\p{Dia:   - N}', "");
Expect(0, 93, '\p{^Dia:   - N}', "");
Expect(0, 93, '\P{Dia:   - N}', "");
Expect(1, 93, '\P{^Dia:   - N}', "");
Expect(0, 94, '\p{Dia:   - N}', "");
Expect(1, 94, '\p{^Dia:   - N}', "");
Expect(1, 94, '\P{Dia:   - N}', "");
Expect(0, 94, '\P{^Dia:   - N}', "");
Error('\p{Is_Diacritic=/a/ F}');
Error('\P{Is_Diacritic=/a/ F}');
Expect(1, 93, '\p{Is_Diacritic=f}', "");
Expect(0, 93, '\p{^Is_Diacritic=f}', "");
Expect(0, 93, '\P{Is_Diacritic=f}', "");
Expect(1, 93, '\P{^Is_Diacritic=f}', "");
Expect(0, 94, '\p{Is_Diacritic=f}', "");
Expect(1, 94, '\p{^Is_Diacritic=f}', "");
Expect(1, 94, '\P{Is_Diacritic=f}', "");
Expect(0, 94, '\P{^Is_Diacritic=f}', "");
Expect(1, 93, '\p{Is_Diacritic= -F}', "");
Expect(0, 93, '\p{^Is_Diacritic= -F}', "");
Expect(0, 93, '\P{Is_Diacritic= -F}', "");
Expect(1, 93, '\P{^Is_Diacritic= -F}', "");
Expect(0, 94, '\p{Is_Diacritic= -F}', "");
Expect(1, 94, '\p{^Is_Diacritic= -F}', "");
Expect(1, 94, '\P{Is_Diacritic= -F}', "");
Expect(0, 94, '\P{^Is_Diacritic= -F}', "");
Error('\p{Is_Dia=- FALSE:=}');
Error('\P{Is_Dia=- FALSE:=}');
Expect(1, 93, '\p{Is_Dia=false}', "");
Expect(0, 93, '\p{^Is_Dia=false}', "");
Expect(0, 93, '\P{Is_Dia=false}', "");
Expect(1, 93, '\P{^Is_Dia=false}', "");
Expect(0, 94, '\p{Is_Dia=false}', "");
Expect(1, 94, '\p{^Is_Dia=false}', "");
Expect(1, 94, '\P{Is_Dia=false}', "");
Expect(0, 94, '\P{^Is_Dia=false}', "");
Expect(1, 93, '\p{Is_Dia=	FALSE}', "");
Expect(0, 93, '\p{^Is_Dia=	FALSE}', "");
Expect(0, 93, '\P{Is_Dia=	FALSE}', "");
Expect(1, 93, '\P{^Is_Dia=	FALSE}', "");
Expect(0, 94, '\p{Is_Dia=	FALSE}', "");
Expect(1, 94, '\p{^Is_Dia=	FALSE}', "");
Expect(1, 94, '\P{Is_Dia=	FALSE}', "");
Expect(0, 94, '\P{^Is_Dia=	FALSE}', "");
Error('\p{Perl_Canonical_Combining_Class=0}');
Error('\P{Perl_Canonical_Combining_Class=0}');
Error('\p{Perl_ccc=0}');
Error('\P{Perl_ccc=0}');
Error('\p{Grapheme_Extend= :=Yes}');
Error('\P{Grapheme_Extend= :=Yes}');
Expect(1, 879, '\p{Grapheme_Extend:   yes}', "");
Expect(0, 879, '\p{^Grapheme_Extend:   yes}', "");
Expect(0, 879, '\P{Grapheme_Extend:   yes}', "");
Expect(1, 879, '\P{^Grapheme_Extend:   yes}', "");
Expect(0, 767, '\p{Grapheme_Extend:   yes}', "");
Expect(1, 767, '\p{^Grapheme_Extend:   yes}', "");
Expect(1, 767, '\P{Grapheme_Extend:   yes}', "");
Expect(0, 767, '\P{^Grapheme_Extend:   yes}', "");
Expect(1, 879, '\p{Grapheme_Extend:_-yes}', "");
Expect(0, 879, '\p{^Grapheme_Extend:_-yes}', "");
Expect(0, 879, '\P{Grapheme_Extend:_-yes}', "");
Expect(1, 879, '\P{^Grapheme_Extend:_-yes}', "");
Expect(0, 767, '\p{Grapheme_Extend:_-yes}', "");
Expect(1, 767, '\p{^Grapheme_Extend:_-yes}', "");
Expect(1, 767, '\P{Grapheme_Extend:_-yes}', "");
Expect(0, 767, '\P{^Grapheme_Extend:_-yes}', "");
Error('\p{Gr_Ext=_Y:=}');
Error('\P{Gr_Ext=_Y:=}');
Expect(1, 879, '\p{Gr_Ext=y}', "");
Expect(0, 879, '\p{^Gr_Ext=y}', "");
Expect(0, 879, '\P{Gr_Ext=y}', "");
Expect(1, 879, '\P{^Gr_Ext=y}', "");
Expect(0, 767, '\p{Gr_Ext=y}', "");
Expect(1, 767, '\p{^Gr_Ext=y}', "");
Expect(1, 767, '\P{Gr_Ext=y}', "");
Expect(0, 767, '\P{^Gr_Ext=y}', "");
Expect(1, 879, '\p{Gr_Ext=_y}', "");
Expect(0, 879, '\p{^Gr_Ext=_y}', "");
Expect(0, 879, '\P{Gr_Ext=_y}', "");
Expect(1, 879, '\P{^Gr_Ext=_y}', "");
Expect(0, 767, '\p{Gr_Ext=_y}', "");
Expect(1, 767, '\p{^Gr_Ext=_y}', "");
Expect(1, 767, '\P{Gr_Ext=_y}', "");
Expect(0, 767, '\P{^Gr_Ext=_y}', "");
Error('\p{Is_Grapheme_Extend=T/a/}');
Error('\P{Is_Grapheme_Extend=T/a/}');
Expect(1, 879, '\p{Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\p{Is_Grapheme_Extend=_t}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=_t}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=_t}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=_t}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=_t}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=_t}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=_t}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=_t}', "");
Error('\p{Is_Gr_Ext=/a/TRUE}');
Error('\P{Is_Gr_Ext=/a/TRUE}');
Expect(1, 879, '\p{Is_Gr_Ext:true}', "");
Expect(0, 879, '\p{^Is_Gr_Ext:true}', "");
Expect(0, 879, '\P{Is_Gr_Ext:true}', "");
Expect(1, 879, '\P{^Is_Gr_Ext:true}', "");
Expect(0, 767, '\p{Is_Gr_Ext:true}', "");
Expect(1, 767, '\p{^Is_Gr_Ext:true}', "");
Expect(1, 767, '\P{Is_Gr_Ext:true}', "");
Expect(0, 767, '\P{^Is_Gr_Ext:true}', "");
Expect(1, 879, '\p{Is_Gr_Ext=		TRUE}', "");
Expect(0, 879, '\p{^Is_Gr_Ext=		TRUE}', "");
Expect(0, 879, '\P{Is_Gr_Ext=		TRUE}', "");
Expect(1, 879, '\P{^Is_Gr_Ext=		TRUE}', "");
Expect(0, 767, '\p{Is_Gr_Ext=		TRUE}', "");
Expect(1, 767, '\p{^Is_Gr_Ext=		TRUE}', "");
Expect(1, 767, '\P{Is_Gr_Ext=		TRUE}', "");
Expect(0, 767, '\P{^Is_Gr_Ext=		TRUE}', "");
Error('\p{Grapheme_Extend=		no:=}');
Error('\P{Grapheme_Extend=		no:=}');
Expect(1, 767, '\p{Grapheme_Extend=no}', "");
Expect(0, 767, '\p{^Grapheme_Extend=no}', "");
Expect(0, 767, '\P{Grapheme_Extend=no}', "");
Expect(1, 767, '\P{^Grapheme_Extend=no}', "");
Expect(0, 879, '\p{Grapheme_Extend=no}', "");
Expect(1, 879, '\p{^Grapheme_Extend=no}', "");
Expect(1, 879, '\P{Grapheme_Extend=no}', "");
Expect(0, 879, '\P{^Grapheme_Extend=no}', "");
Expect(1, 767, '\p{Grapheme_Extend=	NO}', "");
Expect(0, 767, '\p{^Grapheme_Extend=	NO}', "");
Expect(0, 767, '\P{Grapheme_Extend=	NO}', "");
Expect(1, 767, '\P{^Grapheme_Extend=	NO}', "");
Expect(0, 879, '\p{Grapheme_Extend=	NO}', "");
Expect(1, 879, '\p{^Grapheme_Extend=	NO}', "");
Expect(1, 879, '\P{Grapheme_Extend=	NO}', "");
Expect(0, 879, '\P{^Grapheme_Extend=	NO}', "");
Error('\p{Gr_Ext=/a/N}');
Error('\P{Gr_Ext=/a/N}');
Expect(1, 767, '\p{Gr_Ext=n}', "");
Expect(0, 767, '\p{^Gr_Ext=n}', "");
Expect(0, 767, '\P{Gr_Ext=n}', "");
Expect(1, 767, '\P{^Gr_Ext=n}', "");
Expect(0, 879, '\p{Gr_Ext=n}', "");
Expect(1, 879, '\p{^Gr_Ext=n}', "");
Expect(1, 879, '\P{Gr_Ext=n}', "");
Expect(0, 879, '\P{^Gr_Ext=n}', "");
Expect(1, 767, '\p{Gr_Ext=	N}', "");
Expect(0, 767, '\p{^Gr_Ext=	N}', "");
Expect(0, 767, '\P{Gr_Ext=	N}', "");
Expect(1, 767, '\P{^Gr_Ext=	N}', "");
Expect(0, 879, '\p{Gr_Ext=	N}', "");
Expect(1, 879, '\p{^Gr_Ext=	N}', "");
Expect(1, 879, '\P{Gr_Ext=	N}', "");
Expect(0, 879, '\P{^Gr_Ext=	N}', "");
Error('\p{Is_Grapheme_Extend=_/a/F}');
Error('\P{Is_Grapheme_Extend=_/a/F}');
Expect(1, 767, '\p{Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\p{Is_Grapheme_Extend=	-F}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend=	-F}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend=	-F}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend=	-F}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend=	-F}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend=	-F}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend=	-F}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend=	-F}', "");
Error('\p{Is_Gr_Ext=-/a/False}');
Error('\P{Is_Gr_Ext=-/a/False}');
Expect(1, 767, '\p{Is_Gr_Ext=false}', "");
Expect(0, 767, '\p{^Is_Gr_Ext=false}', "");
Expect(0, 767, '\P{Is_Gr_Ext=false}', "");
Expect(1, 767, '\P{^Is_Gr_Ext=false}', "");
Expect(0, 879, '\p{Is_Gr_Ext=false}', "");
Expect(1, 879, '\p{^Is_Gr_Ext=false}', "");
Expect(1, 879, '\P{Is_Gr_Ext=false}', "");
Expect(0, 879, '\P{^Is_Gr_Ext=false}', "");
Expect(1, 767, '\p{Is_Gr_Ext=_	FALSE}', "");
Expect(0, 767, '\p{^Is_Gr_Ext=_	FALSE}', "");
Expect(0, 767, '\P{Is_Gr_Ext=_	FALSE}', "");
Expect(1, 767, '\P{^Is_Gr_Ext=_	FALSE}', "");
Expect(0, 879, '\p{Is_Gr_Ext=_	FALSE}', "");
Expect(1, 879, '\p{^Is_Gr_Ext=_	FALSE}', "");
Expect(1, 879, '\P{Is_Gr_Ext=_	FALSE}', "");
Expect(0, 879, '\P{^Is_Gr_Ext=_	FALSE}', "");
Error('\p{Other_ID_Continue=-Yes:=}');
Error('\P{Other_ID_Continue=-Yes:=}');
Expect(1, 183, '\p{Other_ID_Continue:	yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue:	yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue:	yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue:	yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue:	yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue:	yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue:	yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue:	yes}', 'deprecated');
Expect(1, 183, '\p{Other_ID_Continue= yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue= yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue= yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue= yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue= yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue= yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue= yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue= yes}', 'deprecated');
Error('\p{OIDC=/a/ _Y}');
Error('\P{OIDC=/a/ _Y}');
Expect(1, 183, '\p{OIDC=y}', 'deprecated');
Expect(0, 183, '\p{^OIDC=y}', 'deprecated');
Expect(0, 183, '\P{OIDC=y}', 'deprecated');
Expect(1, 183, '\P{^OIDC=y}', 'deprecated');
Expect(0, 182, '\p{OIDC=y}', 'deprecated');
Expect(1, 182, '\p{^OIDC=y}', 'deprecated');
Expect(1, 182, '\P{OIDC=y}', 'deprecated');
Expect(0, 182, '\P{^OIDC=y}', 'deprecated');
Expect(1, 183, '\p{OIDC:   Y}', 'deprecated');
Expect(0, 183, '\p{^OIDC:   Y}', 'deprecated');
Expect(0, 183, '\P{OIDC:   Y}', 'deprecated');
Expect(1, 183, '\P{^OIDC:   Y}', 'deprecated');
Expect(0, 182, '\p{OIDC:   Y}', 'deprecated');
Expect(1, 182, '\p{^OIDC:   Y}', 'deprecated');
Expect(1, 182, '\P{OIDC:   Y}', 'deprecated');
Expect(0, 182, '\P{^OIDC:   Y}', 'deprecated');
Error('\p{Is_Other_ID_Continue= /a/t}');
Error('\P{Is_Other_ID_Continue= /a/t}');
Expect(1, 183, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\p{Is_Other_ID_Continue= _T}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue= _T}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue= _T}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue= _T}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue= _T}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue= _T}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue= _T}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue= _T}', 'deprecated');
Error('\p{Is_OIDC=:=-	TRUE}');
Error('\P{Is_OIDC=:=-	TRUE}');
Expect(1, 183, '\p{Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\p{Is_OIDC= True}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC= True}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC= True}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC= True}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC= True}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC= True}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC= True}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC= True}', 'deprecated');
Error('\p{Other_ID_Continue:   :=		No}');
Error('\P{Other_ID_Continue:   :=		No}');
Expect(1, 182, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\p{Other_ID_Continue=_No}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=_No}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=_No}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=_No}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=_No}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=_No}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=_No}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=_No}', 'deprecated');
Error('\p{OIDC: /a/_-n}');
Error('\P{OIDC: /a/_-n}');
Expect(1, 182, '\p{OIDC=n}', 'deprecated');
Expect(0, 182, '\p{^OIDC=n}', 'deprecated');
Expect(0, 182, '\P{OIDC=n}', 'deprecated');
Expect(1, 182, '\P{^OIDC=n}', 'deprecated');
Expect(0, 183, '\p{OIDC=n}', 'deprecated');
Expect(1, 183, '\p{^OIDC=n}', 'deprecated');
Expect(1, 183, '\P{OIDC=n}', 'deprecated');
Expect(0, 183, '\P{^OIDC=n}', 'deprecated');
Expect(1, 182, '\p{OIDC=		N}', 'deprecated');
Expect(0, 182, '\p{^OIDC=		N}', 'deprecated');
Expect(0, 182, '\P{OIDC=		N}', 'deprecated');
Expect(1, 182, '\P{^OIDC=		N}', 'deprecated');
Expect(0, 183, '\p{OIDC=		N}', 'deprecated');
Expect(1, 183, '\p{^OIDC=		N}', 'deprecated');
Expect(1, 183, '\P{OIDC=		N}', 'deprecated');
Expect(0, 183, '\P{^OIDC=		N}', 'deprecated');
Error('\p{Is_Other_ID_Continue=	:=F}');
Error('\P{Is_Other_ID_Continue=	:=F}');
Expect(1, 182, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\p{Is_Other_ID_Continue=--F}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue=--F}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue=--F}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue=--F}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue=--F}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue=--F}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue=--F}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue=--F}', 'deprecated');
Error('\p{Is_OIDC=:=	False}');
Error('\P{Is_OIDC=:=	False}');
Expect(1, 182, '\p{Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\p{Is_OIDC=		False}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC=		False}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC=		False}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC=		False}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC=		False}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC=		False}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC=		False}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC=		False}', 'deprecated');
Error('\p{Joining_Group= :=SWASH	Kaf}');
Error('\P{Joining_Group= :=SWASH	Kaf}');
Expect(1, 1706, '\p{Joining_Group: swashkaf}', "");
Expect(0, 1706, '\p{^Joining_Group: swashkaf}', "");
Expect(0, 1706, '\P{Joining_Group: swashkaf}', "");
Expect(1, 1706, '\P{^Joining_Group: swashkaf}', "");
Expect(0, 1705, '\p{Joining_Group: swashkaf}', "");
Expect(1, 1705, '\p{^Joining_Group: swashkaf}', "");
Expect(1, 1705, '\P{Joining_Group: swashkaf}', "");
Expect(0, 1705, '\P{^Joining_Group: swashkaf}', "");
Expect(1, 1706, '\p{Joining_Group=_ Swash_kaf}', "");
Expect(0, 1706, '\p{^Joining_Group=_ Swash_kaf}', "");
Expect(0, 1706, '\P{Joining_Group=_ Swash_kaf}', "");
Expect(1, 1706, '\P{^Joining_Group=_ Swash_kaf}', "");
Expect(0, 1705, '\p{Joining_Group=_ Swash_kaf}', "");
Expect(1, 1705, '\p{^Joining_Group=_ Swash_kaf}', "");
Expect(1, 1705, '\P{Joining_Group=_ Swash_kaf}', "");
Expect(0, 1705, '\P{^Joining_Group=_ Swash_kaf}', "");
Error('\p{Jg=/a/--Swash-Kaf}');
Error('\P{Jg=/a/--Swash-Kaf}');
Expect(1, 1706, '\p{Jg=swashkaf}', "");
Expect(0, 1706, '\p{^Jg=swashkaf}', "");
Expect(0, 1706, '\P{Jg=swashkaf}', "");
Expect(1, 1706, '\P{^Jg=swashkaf}', "");
Expect(0, 1705, '\p{Jg=swashkaf}', "");
Expect(1, 1705, '\p{^Jg=swashkaf}', "");
Expect(1, 1705, '\P{Jg=swashkaf}', "");
Expect(0, 1705, '\P{^Jg=swashkaf}', "");
Expect(1, 1706, '\p{Jg=- Swash	Kaf}', "");
Expect(0, 1706, '\p{^Jg=- Swash	Kaf}', "");
Expect(0, 1706, '\P{Jg=- Swash	Kaf}', "");
Expect(1, 1706, '\P{^Jg=- Swash	Kaf}', "");
Expect(0, 1705, '\p{Jg=- Swash	Kaf}', "");
Expect(1, 1705, '\p{^Jg=- Swash	Kaf}', "");
Expect(1, 1705, '\P{Jg=- Swash	Kaf}', "");
Expect(0, 1705, '\P{^Jg=- Swash	Kaf}', "");
Error('\p{Is_Joining_Group=:= swash-kaf}');
Error('\P{Is_Joining_Group=:= swash-kaf}');
Expect(1, 1706, '\p{Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\P{Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\p{Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\P{Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\p{Is_Joining_Group=Swash	Kaf}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=Swash	Kaf}', "");
Expect(0, 1706, '\P{Is_Joining_Group=Swash	Kaf}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=Swash	Kaf}', "");
Expect(0, 1705, '\p{Is_Joining_Group=Swash	Kaf}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=Swash	Kaf}', "");
Expect(1, 1705, '\P{Is_Joining_Group=Swash	Kaf}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=Swash	Kaf}', "");
Error('\p{Is_Jg=/a/-	Swash Kaf}');
Error('\P{Is_Jg=/a/-	Swash Kaf}');
Expect(1, 1706, '\p{Is_Jg=swashkaf}', "");
Expect(0, 1706, '\p{^Is_Jg=swashkaf}', "");
Expect(0, 1706, '\P{Is_Jg=swashkaf}', "");
Expect(1, 1706, '\P{^Is_Jg=swashkaf}', "");
Expect(0, 1705, '\p{Is_Jg=swashkaf}', "");
Expect(1, 1705, '\p{^Is_Jg=swashkaf}', "");
Expect(1, 1705, '\P{Is_Jg=swashkaf}', "");
Expect(0, 1705, '\P{^Is_Jg=swashkaf}', "");
Expect(1, 1706, '\p{Is_Jg=__swash_kaf}', "");
Expect(0, 1706, '\p{^Is_Jg=__swash_kaf}', "");
Expect(0, 1706, '\P{Is_Jg=__swash_kaf}', "");
Expect(1, 1706, '\P{^Is_Jg=__swash_kaf}', "");
Expect(0, 1705, '\p{Is_Jg=__swash_kaf}', "");
Expect(1, 1705, '\p{^Is_Jg=__swash_kaf}', "");
Expect(1, 1705, '\P{Is_Jg=__swash_kaf}', "");
Expect(0, 1705, '\P{^Is_Jg=__swash_kaf}', "");
Error('\p{Joining_Group=/a/		Seen}');
Error('\P{Joining_Group=/a/		Seen}');
Expect(1, 1588, '\p{Joining_Group:   seen}', "");
Expect(0, 1588, '\p{^Joining_Group:   seen}', "");
Expect(0, 1588, '\P{Joining_Group:   seen}', "");
Expect(1, 1588, '\P{^Joining_Group:   seen}', "");
Expect(0, 1586, '\p{Joining_Group:   seen}', "");
Expect(1, 1586, '\p{^Joining_Group:   seen}', "");
Expect(1, 1586, '\P{Joining_Group:   seen}', "");
Expect(0, 1586, '\P{^Joining_Group:   seen}', "");
Expect(1, 1588, '\p{Joining_Group=__SEEN}', "");
Expect(0, 1588, '\p{^Joining_Group=__SEEN}', "");
Expect(0, 1588, '\P{Joining_Group=__SEEN}', "");
Expect(1, 1588, '\P{^Joining_Group=__SEEN}', "");
Expect(0, 1586, '\p{Joining_Group=__SEEN}', "");
Expect(1, 1586, '\p{^Joining_Group=__SEEN}', "");
Expect(1, 1586, '\P{Joining_Group=__SEEN}', "");
Expect(0, 1586, '\P{^Joining_Group=__SEEN}', "");
Error('\p{Jg=_/a/seen}');
Error('\P{Jg=_/a/seen}');
Expect(1, 1588, '\p{Jg=seen}', "");
Expect(0, 1588, '\p{^Jg=seen}', "");
Expect(0, 1588, '\P{Jg=seen}', "");
Expect(1, 1588, '\P{^Jg=seen}', "");
Expect(0, 1586, '\p{Jg=seen}', "");
Expect(1, 1586, '\p{^Jg=seen}', "");
Expect(1, 1586, '\P{Jg=seen}', "");
Expect(0, 1586, '\P{^Jg=seen}', "");
Expect(1, 1588, '\p{Jg=Seen}', "");
Expect(0, 1588, '\p{^Jg=Seen}', "");
Expect(0, 1588, '\P{Jg=Seen}', "");
Expect(1, 1588, '\P{^Jg=Seen}', "");
Expect(0, 1586, '\p{Jg=Seen}', "");
Expect(1, 1586, '\p{^Jg=Seen}', "");
Expect(1, 1586, '\P{Jg=Seen}', "");
Expect(0, 1586, '\P{^Jg=Seen}', "");
Error('\p{Is_Joining_Group=	Seen/a/}');
Error('\P{Is_Joining_Group=	Seen/a/}');
Expect(1, 1588, '\p{Is_Joining_Group:   seen}', "");
Expect(0, 1588, '\p{^Is_Joining_Group:   seen}', "");
Expect(0, 1588, '\P{Is_Joining_Group:   seen}', "");
Expect(1, 1588, '\P{^Is_Joining_Group:   seen}', "");
Expect(0, 1586, '\p{Is_Joining_Group:   seen}', "");
Expect(1, 1586, '\p{^Is_Joining_Group:   seen}', "");
Expect(1, 1586, '\P{Is_Joining_Group:   seen}', "");
Expect(0, 1586, '\P{^Is_Joining_Group:   seen}', "");
Expect(1, 1588, '\p{Is_Joining_Group= Seen}', "");
Expect(0, 1588, '\p{^Is_Joining_Group= Seen}', "");
Expect(0, 1588, '\P{Is_Joining_Group= Seen}', "");
Expect(1, 1588, '\P{^Is_Joining_Group= Seen}', "");
Expect(0, 1586, '\p{Is_Joining_Group= Seen}', "");
Expect(1, 1586, '\p{^Is_Joining_Group= Seen}', "");
Expect(1, 1586, '\P{Is_Joining_Group= Seen}', "");
Expect(0, 1586, '\P{^Is_Joining_Group= Seen}', "");
Error('\p{Is_Jg=  seen/a/}');
Error('\P{Is_Jg=  seen/a/}');
Expect(1, 1588, '\p{Is_Jg:	seen}', "");
Expect(0, 1588, '\p{^Is_Jg:	seen}', "");
Expect(0, 1588, '\P{Is_Jg:	seen}', "");
Expect(1, 1588, '\P{^Is_Jg:	seen}', "");
Expect(0, 1586, '\p{Is_Jg:	seen}', "");
Expect(1, 1586, '\p{^Is_Jg:	seen}', "");
Expect(1, 1586, '\P{Is_Jg:	seen}', "");
Expect(0, 1586, '\P{^Is_Jg:	seen}', "");
Expect(1, 1588, '\p{Is_Jg=-_Seen}', "");
Expect(0, 1588, '\p{^Is_Jg=-_Seen}', "");
Expect(0, 1588, '\P{Is_Jg=-_Seen}', "");
Expect(1, 1588, '\P{^Is_Jg=-_Seen}', "");
Expect(0, 1586, '\p{Is_Jg=-_Seen}', "");
Expect(1, 1586, '\p{^Is_Jg=-_Seen}', "");
Expect(1, 1586, '\P{Is_Jg=-_Seen}', "");
Expect(0, 1586, '\P{^Is_Jg=-_Seen}', "");
Error('\p{Joining_Group=/a/-Beth}');
Error('\P{Joining_Group=/a/-Beth}');
Expect(1, 1810, '\p{Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Joining_Group=beth}', "");
Expect(0, 1810, '\P{Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Joining_Group=beth}', "");
Expect(0, 1809, '\p{Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Joining_Group=beth}', "");
Expect(1, 1809, '\P{Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Joining_Group=beth}', "");
Expect(1, 1810, '\p{Joining_Group=	_Beth}', "");
Expect(0, 1810, '\p{^Joining_Group=	_Beth}', "");
Expect(0, 1810, '\P{Joining_Group=	_Beth}', "");
Expect(1, 1810, '\P{^Joining_Group=	_Beth}', "");
Expect(0, 1809, '\p{Joining_Group=	_Beth}', "");
Expect(1, 1809, '\p{^Joining_Group=	_Beth}', "");
Expect(1, 1809, '\P{Joining_Group=	_Beth}', "");
Expect(0, 1809, '\P{^Joining_Group=	_Beth}', "");
Error('\p{Jg= /a/beth}');
Error('\P{Jg= /a/beth}');
Expect(1, 1810, '\p{Jg=beth}', "");
Expect(0, 1810, '\p{^Jg=beth}', "");
Expect(0, 1810, '\P{Jg=beth}', "");
Expect(1, 1810, '\P{^Jg=beth}', "");
Expect(0, 1809, '\p{Jg=beth}', "");
Expect(1, 1809, '\p{^Jg=beth}', "");
Expect(1, 1809, '\P{Jg=beth}', "");
Expect(0, 1809, '\P{^Jg=beth}', "");
Expect(1, 1810, '\p{Jg=	 beth}', "");
Expect(0, 1810, '\p{^Jg=	 beth}', "");
Expect(0, 1810, '\P{Jg=	 beth}', "");
Expect(1, 1810, '\P{^Jg=	 beth}', "");
Expect(0, 1809, '\p{Jg=	 beth}', "");
Expect(1, 1809, '\p{^Jg=	 beth}', "");
Expect(1, 1809, '\P{Jg=	 beth}', "");
Expect(0, 1809, '\P{^Jg=	 beth}', "");
Error('\p{Is_Joining_Group=:=-	Beth}');
Error('\P{Is_Joining_Group=:=-	Beth}');
Expect(1, 1810, '\p{Is_Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=beth}', "");
Expect(1, 1810, '\p{Is_Joining_Group=_Beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=_Beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=_Beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=_Beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=_Beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=_Beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=_Beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=_Beth}', "");
Error('\p{Is_Jg= /a/BETH}');
Error('\P{Is_Jg= /a/BETH}');
Expect(1, 1810, '\p{Is_Jg=beth}', "");
Expect(0, 1810, '\p{^Is_Jg=beth}', "");
Expect(0, 1810, '\P{Is_Jg=beth}', "");
Expect(1, 1810, '\P{^Is_Jg=beth}', "");
Expect(0, 1809, '\p{Is_Jg=beth}', "");
Expect(1, 1809, '\p{^Is_Jg=beth}', "");
Expect(1, 1809, '\P{Is_Jg=beth}', "");
Expect(0, 1809, '\P{^Is_Jg=beth}', "");
Expect(1, 1810, '\p{Is_Jg=		beth}', "");
Expect(0, 1810, '\p{^Is_Jg=		beth}', "");
Expect(0, 1810, '\P{Is_Jg=		beth}', "");
Expect(1, 1810, '\P{^Is_Jg=		beth}', "");
Expect(0, 1809, '\p{Is_Jg=		beth}', "");
Expect(1, 1809, '\p{^Is_Jg=		beth}', "");
Expect(1, 1809, '\P{Is_Jg=		beth}', "");
Expect(0, 1809, '\P{^Is_Jg=		beth}', "");
Error('\p{Joining_Group=_Semkath/a/}');
Error('\P{Joining_Group=_Semkath/a/}');
Expect(1, 1827, '\p{Joining_Group: semkath}', "");
Expect(0, 1827, '\p{^Joining_Group: semkath}', "");
Expect(0, 1827, '\P{Joining_Group: semkath}', "");
Expect(1, 1827, '\P{^Joining_Group: semkath}', "");
Expect(0, 1826, '\p{Joining_Group: semkath}', "");
Expect(1, 1826, '\p{^Joining_Group: semkath}', "");
Expect(1, 1826, '\P{Joining_Group: semkath}', "");
Expect(0, 1826, '\P{^Joining_Group: semkath}', "");
Expect(1, 1827, '\p{Joining_Group=_Semkath}', "");
Expect(0, 1827, '\p{^Joining_Group=_Semkath}', "");
Expect(0, 1827, '\P{Joining_Group=_Semkath}', "");
Expect(1, 1827, '\P{^Joining_Group=_Semkath}', "");
Expect(0, 1826, '\p{Joining_Group=_Semkath}', "");
Expect(1, 1826, '\p{^Joining_Group=_Semkath}', "");
Expect(1, 1826, '\P{Joining_Group=_Semkath}', "");
Expect(0, 1826, '\P{^Joining_Group=_Semkath}', "");
Error('\p{Jg=/a/_semkath}');
Error('\P{Jg=/a/_semkath}');
Expect(1, 1827, '\p{Jg=semkath}', "");
Expect(0, 1827, '\p{^Jg=semkath}', "");
Expect(0, 1827, '\P{Jg=semkath}', "");
Expect(1, 1827, '\P{^Jg=semkath}', "");
Expect(0, 1826, '\p{Jg=semkath}', "");
Expect(1, 1826, '\p{^Jg=semkath}', "");
Expect(1, 1826, '\P{Jg=semkath}', "");
Expect(0, 1826, '\P{^Jg=semkath}', "");
Expect(1, 1827, '\p{Jg= _semkath}', "");
Expect(0, 1827, '\p{^Jg= _semkath}', "");
Expect(0, 1827, '\P{Jg= _semkath}', "");
Expect(1, 1827, '\P{^Jg= _semkath}', "");
Expect(0, 1826, '\p{Jg= _semkath}', "");
Expect(1, 1826, '\p{^Jg= _semkath}', "");
Expect(1, 1826, '\P{Jg= _semkath}', "");
Expect(0, 1826, '\P{^Jg= _semkath}', "");
Error('\p{Is_Joining_Group=/a/_Semkath}');
Error('\P{Is_Joining_Group=/a/_Semkath}');
Expect(1, 1827, '\p{Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\p{Is_Joining_Group=-Semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group=-Semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group=-Semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group=-Semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group=-Semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group=-Semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group=-Semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group=-Semkath}', "");
Error('\p{Is_Jg=  semkath/a/}');
Error('\P{Is_Jg=  semkath/a/}');
Expect(1, 1827, '\p{Is_Jg:   semkath}', "");
Expect(0, 1827, '\p{^Is_Jg:   semkath}', "");
Expect(0, 1827, '\P{Is_Jg:   semkath}', "");
Expect(1, 1827, '\P{^Is_Jg:   semkath}', "");
Expect(0, 1826, '\p{Is_Jg:   semkath}', "");
Expect(1, 1826, '\p{^Is_Jg:   semkath}', "");
Expect(1, 1826, '\P{Is_Jg:   semkath}', "");
Expect(0, 1826, '\P{^Is_Jg:   semkath}', "");
Expect(1, 1827, '\p{Is_Jg=-semkath}', "");
Expect(0, 1827, '\p{^Is_Jg=-semkath}', "");
Expect(0, 1827, '\P{Is_Jg=-semkath}', "");
Expect(1, 1827, '\P{^Is_Jg=-semkath}', "");
Expect(0, 1826, '\p{Is_Jg=-semkath}', "");
Expect(1, 1826, '\p{^Is_Jg=-semkath}', "");
Expect(1, 1826, '\P{Is_Jg=-semkath}', "");
Expect(0, 1826, '\P{^Is_Jg=-semkath}', "");
Error('\p{Joining_Group=:=Hah}');
Error('\P{Joining_Group=:=Hah}');
Expect(1, 1582, '\p{Joining_Group=hah}', "");
Expect(0, 1582, '\p{^Joining_Group=hah}', "");
Expect(0, 1582, '\P{Joining_Group=hah}', "");
Expect(1, 1582, '\P{^Joining_Group=hah}', "");
Expect(0, 1579, '\p{Joining_Group=hah}', "");
Expect(1, 1579, '\p{^Joining_Group=hah}', "");
Expect(1, 1579, '\P{Joining_Group=hah}', "");
Expect(0, 1579, '\P{^Joining_Group=hah}', "");
Expect(1, 1582, '\p{Joining_Group=  hah}', "");
Expect(0, 1582, '\p{^Joining_Group=  hah}', "");
Expect(0, 1582, '\P{Joining_Group=  hah}', "");
Expect(1, 1582, '\P{^Joining_Group=  hah}', "");
Expect(0, 1579, '\p{Joining_Group=  hah}', "");
Expect(1, 1579, '\p{^Joining_Group=  hah}', "");
Expect(1, 1579, '\P{Joining_Group=  hah}', "");
Expect(0, 1579, '\P{^Joining_Group=  hah}', "");
Error('\p{Jg=:=	Hah}');
Error('\P{Jg=:=	Hah}');
Expect(1, 1582, '\p{Jg=hah}', "");
Expect(0, 1582, '\p{^Jg=hah}', "");
Expect(0, 1582, '\P{Jg=hah}', "");
Expect(1, 1582, '\P{^Jg=hah}', "");
Expect(0, 1579, '\p{Jg=hah}', "");
Expect(1, 1579, '\p{^Jg=hah}', "");
Expect(1, 1579, '\P{Jg=hah}', "");
Expect(0, 1579, '\P{^Jg=hah}', "");
Expect(1, 1582, '\p{Jg=__Hah}', "");
Expect(0, 1582, '\p{^Jg=__Hah}', "");
Expect(0, 1582, '\P{Jg=__Hah}', "");
Expect(1, 1582, '\P{^Jg=__Hah}', "");
Expect(0, 1579, '\p{Jg=__Hah}', "");
Expect(1, 1579, '\p{^Jg=__Hah}', "");
Expect(1, 1579, '\P{Jg=__Hah}', "");
Expect(0, 1579, '\P{^Jg=__Hah}', "");
Error('\p{Is_Joining_Group=_/a/HAH}');
Error('\P{Is_Joining_Group=_/a/HAH}');
Expect(1, 1582, '\p{Is_Joining_Group=hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group=hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group=hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group=hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group=hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group=hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group=hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group=hah}', "");
Expect(1, 1582, '\p{Is_Joining_Group:   _-Hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group:   _-Hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group:   _-Hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group:   _-Hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group:   _-Hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group:   _-Hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group:   _-Hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group:   _-Hah}', "");
Error('\p{Is_Jg= HAH/a/}');
Error('\P{Is_Jg= HAH/a/}');
Expect(1, 1582, '\p{Is_Jg=hah}', "");
Expect(0, 1582, '\p{^Is_Jg=hah}', "");
Expect(0, 1582, '\P{Is_Jg=hah}', "");
Expect(1, 1582, '\P{^Is_Jg=hah}', "");
Expect(0, 1579, '\p{Is_Jg=hah}', "");
Expect(1, 1579, '\p{^Is_Jg=hah}', "");
Expect(1, 1579, '\P{Is_Jg=hah}', "");
Expect(0, 1579, '\P{^Is_Jg=hah}', "");
Expect(1, 1582, '\p{Is_Jg=_HAH}', "");
Expect(0, 1582, '\p{^Is_Jg=_HAH}', "");
Expect(0, 1582, '\P{Is_Jg=_HAH}', "");
Expect(1, 1582, '\P{^Is_Jg=_HAH}', "");
Expect(0, 1579, '\p{Is_Jg=_HAH}', "");
Expect(1, 1579, '\p{^Is_Jg=_HAH}', "");
Expect(1, 1579, '\P{Is_Jg=_HAH}', "");
Expect(0, 1579, '\P{^Is_Jg=_HAH}', "");
Error('\p{Joining_Group=:=	_syriac	waw}');
Error('\P{Joining_Group=:=	_syriac	waw}');
Expect(1, 1816, '\p{Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\p{^Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\P{Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\P{^Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\p{Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\p{^Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\P{Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\P{^Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\p{Joining_Group=-	Syriac Waw}', "");
Expect(0, 1816, '\p{^Joining_Group=-	Syriac Waw}', "");
Expect(0, 1816, '\P{Joining_Group=-	Syriac Waw}', "");
Expect(1, 1816, '\P{^Joining_Group=-	Syriac Waw}', "");
Expect(0, 1815, '\p{Joining_Group=-	Syriac Waw}', "");
Expect(1, 1815, '\p{^Joining_Group=-	Syriac Waw}', "");
Expect(1, 1815, '\P{Joining_Group=-	Syriac Waw}', "");
Expect(0, 1815, '\P{^Joining_Group=-	Syriac Waw}', "");
Error('\p{Jg=-/a/Syriac	waw}');
Error('\P{Jg=-/a/Syriac	waw}');
Expect(1, 1816, '\p{Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Jg=_	syriac-WAW}', "");
Expect(0, 1816, '\p{^Jg=_	syriac-WAW}', "");
Expect(0, 1816, '\P{Jg=_	syriac-WAW}', "");
Expect(1, 1816, '\P{^Jg=_	syriac-WAW}', "");
Expect(0, 1815, '\p{Jg=_	syriac-WAW}', "");
Expect(1, 1815, '\p{^Jg=_	syriac-WAW}', "");
Expect(1, 1815, '\P{Jg=_	syriac-WAW}', "");
Expect(0, 1815, '\P{^Jg=_	syriac-WAW}', "");
Error('\p{Is_Joining_Group=-/a/syriac-WAW}');
Error('\P{Is_Joining_Group=-/a/syriac-WAW}');
Expect(1, 1816, '\p{Is_Joining_Group: syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Joining_Group: syriacwaw}', "");
Expect(0, 1816, '\P{Is_Joining_Group: syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Joining_Group: syriacwaw}', "");
Expect(0, 1815, '\p{Is_Joining_Group: syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Joining_Group: syriacwaw}', "");
Expect(1, 1815, '\P{Is_Joining_Group: syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Joining_Group: syriacwaw}', "");
Expect(1, 1816, '\p{Is_Joining_Group=--SYRIAC waw}', "");
Expect(0, 1816, '\p{^Is_Joining_Group=--SYRIAC waw}', "");
Expect(0, 1816, '\P{Is_Joining_Group=--SYRIAC waw}', "");
Expect(1, 1816, '\P{^Is_Joining_Group=--SYRIAC waw}', "");
Expect(0, 1815, '\p{Is_Joining_Group=--SYRIAC waw}', "");
Expect(1, 1815, '\p{^Is_Joining_Group=--SYRIAC waw}', "");
Expect(1, 1815, '\P{Is_Joining_Group=--SYRIAC waw}', "");
Expect(0, 1815, '\P{^Is_Joining_Group=--SYRIAC waw}', "");
Error('\p{Is_Jg=:=-syriacWaw}');
Error('\P{Is_Jg=:=-syriacWaw}');
Expect(1, 1816, '\p{Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Is_Jg=-syriac_waw}', "");
Expect(0, 1816, '\p{^Is_Jg=-syriac_waw}', "");
Expect(0, 1816, '\P{Is_Jg=-syriac_waw}', "");
Expect(1, 1816, '\P{^Is_Jg=-syriac_waw}', "");
Expect(0, 1815, '\p{Is_Jg=-syriac_waw}', "");
Expect(1, 1815, '\p{^Is_Jg=-syriac_waw}', "");
Expect(1, 1815, '\P{Is_Jg=-syriac_waw}', "");
Expect(0, 1815, '\P{^Is_Jg=-syriac_waw}', "");
Error('\p{Joining_Group=	:=Taw}');
Error('\P{Joining_Group=	:=Taw}');
Expect(1, 1836, '\p{Joining_Group=taw}', "");
Expect(0, 1836, '\p{^Joining_Group=taw}', "");
Expect(0, 1836, '\P{Joining_Group=taw}', "");
Expect(1, 1836, '\P{^Joining_Group=taw}', "");
Expect(0, 1835, '\p{Joining_Group=taw}', "");
Expect(1, 1835, '\p{^Joining_Group=taw}', "");
Expect(1, 1835, '\P{Joining_Group=taw}', "");
Expect(0, 1835, '\P{^Joining_Group=taw}', "");
Expect(1, 1836, '\p{Joining_Group=	_Taw}', "");
Expect(0, 1836, '\p{^Joining_Group=	_Taw}', "");
Expect(0, 1836, '\P{Joining_Group=	_Taw}', "");
Expect(1, 1836, '\P{^Joining_Group=	_Taw}', "");
Expect(0, 1835, '\p{Joining_Group=	_Taw}', "");
Expect(1, 1835, '\p{^Joining_Group=	_Taw}', "");
Expect(1, 1835, '\P{Joining_Group=	_Taw}', "");
Expect(0, 1835, '\P{^Joining_Group=	_Taw}', "");
Error('\p{Jg=_:=Taw}');
Error('\P{Jg=_:=Taw}');
Expect(1, 1836, '\p{Jg=taw}', "");
Expect(0, 1836, '\p{^Jg=taw}', "");
Expect(0, 1836, '\P{Jg=taw}', "");
Expect(1, 1836, '\P{^Jg=taw}', "");
Expect(0, 1835, '\p{Jg=taw}', "");
Expect(1, 1835, '\p{^Jg=taw}', "");
Expect(1, 1835, '\P{Jg=taw}', "");
Expect(0, 1835, '\P{^Jg=taw}', "");
Expect(1, 1836, '\p{Jg= 	taw}', "");
Expect(0, 1836, '\p{^Jg= 	taw}', "");
Expect(0, 1836, '\P{Jg= 	taw}', "");
Expect(1, 1836, '\P{^Jg= 	taw}', "");
Expect(0, 1835, '\p{Jg= 	taw}', "");
Expect(1, 1835, '\p{^Jg= 	taw}', "");
Expect(1, 1835, '\P{Jg= 	taw}', "");
Expect(0, 1835, '\P{^Jg= 	taw}', "");
Error('\p{Is_Joining_Group=	/a/Taw}');
Error('\P{Is_Joining_Group=	/a/Taw}');
Expect(1, 1836, '\p{Is_Joining_Group=taw}', "");
Expect(0, 1836, '\p{^Is_Joining_Group=taw}', "");
Expect(0, 1836, '\P{Is_Joining_Group=taw}', "");
Expect(1, 1836, '\P{^Is_Joining_Group=taw}', "");
Expect(0, 1835, '\p{Is_Joining_Group=taw}', "");
Expect(1, 1835, '\p{^Is_Joining_Group=taw}', "");
Expect(1, 1835, '\P{Is_Joining_Group=taw}', "");
Expect(0, 1835, '\P{^Is_Joining_Group=taw}', "");
Expect(1, 1836, '\p{Is_Joining_Group=  Taw}', "");
Expect(0, 1836, '\p{^Is_Joining_Group=  Taw}', "");
Expect(0, 1836, '\P{Is_Joining_Group=  Taw}', "");
Expect(1, 1836, '\P{^Is_Joining_Group=  Taw}', "");
Expect(0, 1835, '\p{Is_Joining_Group=  Taw}', "");
Expect(1, 1835, '\p{^Is_Joining_Group=  Taw}', "");
Expect(1, 1835, '\P{Is_Joining_Group=  Taw}', "");
Expect(0, 1835, '\P{^Is_Joining_Group=  Taw}', "");
Error('\p{Is_Jg=  TAW:=}');
Error('\P{Is_Jg=  TAW:=}');
Expect(1, 1836, '\p{Is_Jg=taw}', "");
Expect(0, 1836, '\p{^Is_Jg=taw}', "");
Expect(0, 1836, '\P{Is_Jg=taw}', "");
Expect(1, 1836, '\P{^Is_Jg=taw}', "");
Expect(0, 1835, '\p{Is_Jg=taw}', "");
Expect(1, 1835, '\p{^Is_Jg=taw}', "");
Expect(1, 1835, '\P{Is_Jg=taw}', "");
Expect(0, 1835, '\P{^Is_Jg=taw}', "");
Expect(1, 1836, '\p{Is_Jg=- taw}', "");
Expect(0, 1836, '\p{^Is_Jg=- taw}', "");
Expect(0, 1836, '\P{Is_Jg=- taw}', "");
Expect(1, 1836, '\P{^Is_Jg=- taw}', "");
Expect(0, 1835, '\p{Is_Jg=- taw}', "");
Expect(1, 1835, '\p{^Is_Jg=- taw}', "");
Expect(1, 1835, '\P{Is_Jg=- taw}', "");
Expect(0, 1835, '\P{^Is_Jg=- taw}', "");
Error('\p{Joining_Group=/a/Final-SEMKATH}');
Error('\P{Joining_Group=/a/Final-SEMKATH}');
Expect(1, 1828, '\p{Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\p{^Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\P{Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\P{^Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\p{Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\p{^Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\P{Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\P{^Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\p{Joining_Group=	Final-Semkath}', "");
Expect(0, 1828, '\p{^Joining_Group=	Final-Semkath}', "");
Expect(0, 1828, '\P{Joining_Group=	Final-Semkath}', "");
Expect(1, 1828, '\P{^Joining_Group=	Final-Semkath}', "");
Expect(0, 1827, '\p{Joining_Group=	Final-Semkath}', "");
Expect(1, 1827, '\p{^Joining_Group=	Final-Semkath}', "");
Expect(1, 1827, '\P{Joining_Group=	Final-Semkath}', "");
Expect(0, 1827, '\P{^Joining_Group=	Final-Semkath}', "");
Error('\p{Jg=-Final	Semkath:=}');
Error('\P{Jg=-Final	Semkath:=}');
Expect(1, 1828, '\p{Jg:   finalsemkath}', "");
Expect(0, 1828, '\p{^Jg:   finalsemkath}', "");
Expect(0, 1828, '\P{Jg:   finalsemkath}', "");
Expect(1, 1828, '\P{^Jg:   finalsemkath}', "");
Expect(0, 1827, '\p{Jg:   finalsemkath}', "");
Expect(1, 1827, '\p{^Jg:   finalsemkath}', "");
Expect(1, 1827, '\P{Jg:   finalsemkath}', "");
Expect(0, 1827, '\P{^Jg:   finalsemkath}', "");
Expect(1, 1828, '\p{Jg= 	final	semkath}', "");
Expect(0, 1828, '\p{^Jg= 	final	semkath}', "");
Expect(0, 1828, '\P{Jg= 	final	semkath}', "");
Expect(1, 1828, '\P{^Jg= 	final	semkath}', "");
Expect(0, 1827, '\p{Jg= 	final	semkath}', "");
Expect(1, 1827, '\p{^Jg= 	final	semkath}', "");
Expect(1, 1827, '\P{Jg= 	final	semkath}', "");
Expect(0, 1827, '\P{^Jg= 	final	semkath}', "");
Error('\p{Is_Joining_Group:__FINALsemkath:=}');
Error('\P{Is_Joining_Group:__FINALsemkath:=}');
Expect(1, 1828, '\p{Is_Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\P{Is_Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\p{Is_Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\P{Is_Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\p{Is_Joining_Group=-	FinalSemkath}', "");
Expect(0, 1828, '\p{^Is_Joining_Group=-	FinalSemkath}', "");
Expect(0, 1828, '\P{Is_Joining_Group=-	FinalSemkath}', "");
Expect(1, 1828, '\P{^Is_Joining_Group=-	FinalSemkath}', "");
Expect(0, 1827, '\p{Is_Joining_Group=-	FinalSemkath}', "");
Expect(1, 1827, '\p{^Is_Joining_Group=-	FinalSemkath}', "");
Expect(1, 1827, '\P{Is_Joining_Group=-	FinalSemkath}', "");
Expect(0, 1827, '\P{^Is_Joining_Group=-	FinalSemkath}', "");
Error('\p{Is_Jg=:=		final-SEMKATH}');
Error('\P{Is_Jg=:=		final-SEMKATH}');
Expect(1, 1828, '\p{Is_Jg=finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Jg=finalsemkath}', "");
Expect(0, 1828, '\P{Is_Jg=finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Jg=finalsemkath}', "");
Expect(0, 1827, '\p{Is_Jg=finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Jg=finalsemkath}', "");
Expect(1, 1827, '\P{Is_Jg=finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Jg=finalsemkath}', "");
Expect(1, 1828, '\p{Is_Jg:	_-Final-SEMKATH}', "");
Expect(0, 1828, '\p{^Is_Jg:	_-Final-SEMKATH}', "");
Expect(0, 1828, '\P{Is_Jg:	_-Final-SEMKATH}', "");
Expect(1, 1828, '\P{^Is_Jg:	_-Final-SEMKATH}', "");
Expect(0, 1827, '\p{Is_Jg:	_-Final-SEMKATH}', "");
Expect(1, 1827, '\p{^Is_Jg:	_-Final-SEMKATH}', "");
Expect(1, 1827, '\P{Is_Jg:	_-Final-SEMKATH}', "");
Expect(0, 1827, '\P{^Is_Jg:	_-Final-SEMKATH}', "");
Error('\p{Joining_Group=/a/		Knotted-HEH}');
Error('\P{Joining_Group=/a/		Knotted-HEH}');
Expect(1, 1726, '\p{Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Joining_Group=	 Knotted	Heh}', "");
Expect(0, 1726, '\p{^Joining_Group=	 Knotted	Heh}', "");
Expect(0, 1726, '\P{Joining_Group=	 Knotted	Heh}', "");
Expect(1, 1726, '\P{^Joining_Group=	 Knotted	Heh}', "");
Expect(0, 1725, '\p{Joining_Group=	 Knotted	Heh}', "");
Expect(1, 1725, '\p{^Joining_Group=	 Knotted	Heh}', "");
Expect(1, 1725, '\P{Joining_Group=	 Knotted	Heh}', "");
Expect(0, 1725, '\P{^Joining_Group=	 Knotted	Heh}', "");
Error('\p{Jg=/a/	 knotted-heh}');
Error('\P{Jg=/a/	 knotted-heh}');
Expect(1, 1726, '\p{Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Jg=knottedheh}', "");
Expect(0, 1726, '\P{Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Jg=knottedheh}', "");
Expect(0, 1725, '\p{Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Jg=knottedheh}', "");
Expect(1, 1725, '\P{Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Jg=knottedheh}', "");
Expect(1, 1726, '\p{Jg=-_Knotted-heh}', "");
Expect(0, 1726, '\p{^Jg=-_Knotted-heh}', "");
Expect(0, 1726, '\P{Jg=-_Knotted-heh}', "");
Expect(1, 1726, '\P{^Jg=-_Knotted-heh}', "");
Expect(0, 1725, '\p{Jg=-_Knotted-heh}', "");
Expect(1, 1725, '\p{^Jg=-_Knotted-heh}', "");
Expect(1, 1725, '\P{Jg=-_Knotted-heh}', "");
Expect(0, 1725, '\P{^Jg=-_Knotted-heh}', "");
Error('\p{Is_Joining_Group=KNOTTED-Heh/a/}');
Error('\P{Is_Joining_Group=KNOTTED-Heh/a/}');
Expect(1, 1726, '\p{Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Is_Joining_Group=	Knotted Heh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=	Knotted Heh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=	Knotted Heh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=	Knotted Heh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=	Knotted Heh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=	Knotted Heh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=	Knotted Heh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=	Knotted Heh}', "");
Error('\p{Is_Jg:		KNOTTED/a/Heh}');
Error('\P{Is_Jg:		KNOTTED/a/Heh}');
Expect(1, 1726, '\p{Is_Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Jg=knottedheh}', "");
Expect(0, 1726, '\P{Is_Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Jg=knottedheh}', "");
Expect(0, 1725, '\p{Is_Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Jg=knottedheh}', "");
Expect(1, 1725, '\P{Is_Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Jg=knottedheh}', "");
Expect(1, 1726, '\p{Is_Jg=-knotted	Heh}', "");
Expect(0, 1726, '\p{^Is_Jg=-knotted	Heh}', "");
Expect(0, 1726, '\P{Is_Jg=-knotted	Heh}', "");
Expect(1, 1726, '\P{^Is_Jg=-knotted	Heh}', "");
Expect(0, 1725, '\p{Is_Jg=-knotted	Heh}', "");
Expect(1, 1725, '\p{^Is_Jg=-knotted	Heh}', "");
Expect(1, 1725, '\P{Is_Jg=-knotted	Heh}', "");
Expect(0, 1725, '\P{^Is_Jg=-knotted	Heh}', "");
Error('\p{Joining_Group=	-Kaf/a/}');
Error('\P{Joining_Group=	-Kaf/a/}');
Expect(1, 1603, '\p{Joining_Group:kaf}', "");
Expect(0, 1603, '\p{^Joining_Group:kaf}', "");
Expect(0, 1603, '\P{Joining_Group:kaf}', "");
Expect(1, 1603, '\P{^Joining_Group:kaf}', "");
Expect(0, 1602, '\p{Joining_Group:kaf}', "");
Expect(1, 1602, '\p{^Joining_Group:kaf}', "");
Expect(1, 1602, '\P{Joining_Group:kaf}', "");
Expect(0, 1602, '\P{^Joining_Group:kaf}', "");
Expect(1, 1603, '\p{Joining_Group=-_KAF}', "");
Expect(0, 1603, '\p{^Joining_Group=-_KAF}', "");
Expect(0, 1603, '\P{Joining_Group=-_KAF}', "");
Expect(1, 1603, '\P{^Joining_Group=-_KAF}', "");
Expect(0, 1602, '\p{Joining_Group=-_KAF}', "");
Expect(1, 1602, '\p{^Joining_Group=-_KAF}', "");
Expect(1, 1602, '\P{Joining_Group=-_KAF}', "");
Expect(0, 1602, '\P{^Joining_Group=-_KAF}', "");
Error('\p{Jg=/a/-KAF}');
Error('\P{Jg=/a/-KAF}');
Expect(1, 1603, '\p{Jg=kaf}', "");
Expect(0, 1603, '\p{^Jg=kaf}', "");
Expect(0, 1603, '\P{Jg=kaf}', "");
Expect(1, 1603, '\P{^Jg=kaf}', "");
Expect(0, 1602, '\p{Jg=kaf}', "");
Expect(1, 1602, '\p{^Jg=kaf}', "");
Expect(1, 1602, '\P{Jg=kaf}', "");
Expect(0, 1602, '\P{^Jg=kaf}', "");
Expect(1, 1603, '\p{Jg=_Kaf}', "");
Expect(0, 1603, '\p{^Jg=_Kaf}', "");
Expect(0, 1603, '\P{Jg=_Kaf}', "");
Expect(1, 1603, '\P{^Jg=_Kaf}', "");
Expect(0, 1602, '\p{Jg=_Kaf}', "");
Expect(1, 1602, '\p{^Jg=_Kaf}', "");
Expect(1, 1602, '\P{Jg=_Kaf}', "");
Expect(0, 1602, '\P{^Jg=_Kaf}', "");
Error('\p{Is_Joining_Group:	--KAF/a/}');
Error('\P{Is_Joining_Group:	--KAF/a/}');
Expect(1, 1603, '\p{Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\p{^Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\P{Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\P{^Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\p{Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\p{^Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\P{Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\P{^Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\p{Is_Joining_Group:   	_KAF}', "");
Expect(0, 1603, '\p{^Is_Joining_Group:   	_KAF}', "");
Expect(0, 1603, '\P{Is_Joining_Group:   	_KAF}', "");
Expect(1, 1603, '\P{^Is_Joining_Group:   	_KAF}', "");
Expect(0, 1602, '\p{Is_Joining_Group:   	_KAF}', "");
Expect(1, 1602, '\p{^Is_Joining_Group:   	_KAF}', "");
Expect(1, 1602, '\P{Is_Joining_Group:   	_KAF}', "");
Expect(0, 1602, '\P{^Is_Joining_Group:   	_KAF}', "");
Error('\p{Is_Jg=/a/_	Kaf}');
Error('\P{Is_Jg=/a/_	Kaf}');
Expect(1, 1603, '\p{Is_Jg=kaf}', "");
Expect(0, 1603, '\p{^Is_Jg=kaf}', "");
Expect(0, 1603, '\P{Is_Jg=kaf}', "");
Expect(1, 1603, '\P{^Is_Jg=kaf}', "");
Expect(0, 1602, '\p{Is_Jg=kaf}', "");
Expect(1, 1602, '\p{^Is_Jg=kaf}', "");
Expect(1, 1602, '\P{Is_Jg=kaf}', "");
Expect(0, 1602, '\P{^Is_Jg=kaf}', "");
Expect(1, 1603, '\p{Is_Jg=_kaf}', "");
Expect(0, 1603, '\p{^Is_Jg=_kaf}', "");
Expect(0, 1603, '\P{Is_Jg=_kaf}', "");
Expect(1, 1603, '\P{^Is_Jg=_kaf}', "");
Expect(0, 1602, '\p{Is_Jg=_kaf}', "");
Expect(1, 1602, '\p{^Is_Jg=_kaf}', "");
Expect(1, 1602, '\P{Is_Jg=_kaf}', "");
Expect(0, 1602, '\P{^Is_Jg=_kaf}', "");
Error('\p{Joining_Group=/a/ -Fe}');
Error('\P{Joining_Group=/a/ -Fe}');
Expect(1, 1871, '\p{Joining_Group=fe}', "");
Expect(0, 1871, '\p{^Joining_Group=fe}', "");
Expect(0, 1871, '\P{Joining_Group=fe}', "");
Expect(1, 1871, '\P{^Joining_Group=fe}', "");
Expect(0, 1870, '\p{Joining_Group=fe}', "");
Expect(1, 1870, '\p{^Joining_Group=fe}', "");
Expect(1, 1870, '\P{Joining_Group=fe}', "");
Expect(0, 1870, '\P{^Joining_Group=fe}', "");
Expect(1, 1871, '\p{Joining_Group= fe}', "");
Expect(0, 1871, '\p{^Joining_Group= fe}', "");
Expect(0, 1871, '\P{Joining_Group= fe}', "");
Expect(1, 1871, '\P{^Joining_Group= fe}', "");
Expect(0, 1870, '\p{Joining_Group= fe}', "");
Expect(1, 1870, '\p{^Joining_Group= fe}', "");
Expect(1, 1870, '\P{Joining_Group= fe}', "");
Expect(0, 1870, '\P{^Joining_Group= fe}', "");
Error('\p{Jg=-fe:=}');
Error('\P{Jg=-fe:=}');
Expect(1, 1871, '\p{Jg=fe}', "");
Expect(0, 1871, '\p{^Jg=fe}', "");
Expect(0, 1871, '\P{Jg=fe}', "");
Expect(1, 1871, '\P{^Jg=fe}', "");
Expect(0, 1870, '\p{Jg=fe}', "");
Expect(1, 1870, '\p{^Jg=fe}', "");
Expect(1, 1870, '\P{Jg=fe}', "");
Expect(0, 1870, '\P{^Jg=fe}', "");
Expect(1, 1871, '\p{Jg=_-Fe}', "");
Expect(0, 1871, '\p{^Jg=_-Fe}', "");
Expect(0, 1871, '\P{Jg=_-Fe}', "");
Expect(1, 1871, '\P{^Jg=_-Fe}', "");
Expect(0, 1870, '\p{Jg=_-Fe}', "");
Expect(1, 1870, '\p{^Jg=_-Fe}', "");
Expect(1, 1870, '\P{Jg=_-Fe}', "");
Expect(0, 1870, '\P{^Jg=_-Fe}', "");
Error('\p{Is_Joining_Group=/a/-Fe}');
Error('\P{Is_Joining_Group=/a/-Fe}');
Expect(1, 1871, '\p{Is_Joining_Group: fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group: fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group: fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group: fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group: fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group: fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group: fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group: fe}', "");
Expect(1, 1871, '\p{Is_Joining_Group=--Fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group=--Fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group=--Fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group=--Fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group=--Fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group=--Fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group=--Fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group=--Fe}', "");
Error('\p{Is_Jg=__Fe/a/}');
Error('\P{Is_Jg=__Fe/a/}');
Expect(1, 1871, '\p{Is_Jg=fe}', "");
Expect(0, 1871, '\p{^Is_Jg=fe}', "");
Expect(0, 1871, '\P{Is_Jg=fe}', "");
Expect(1, 1871, '\P{^Is_Jg=fe}', "");
Expect(0, 1870, '\p{Is_Jg=fe}', "");
Expect(1, 1870, '\p{^Is_Jg=fe}', "");
Expect(1, 1870, '\P{Is_Jg=fe}', "");
Expect(0, 1870, '\P{^Is_Jg=fe}', "");
Expect(1, 1871, '\p{Is_Jg: 	 Fe}', "");
Expect(0, 1871, '\p{^Is_Jg: 	 Fe}', "");
Expect(0, 1871, '\P{Is_Jg: 	 Fe}', "");
Expect(1, 1871, '\P{^Is_Jg: 	 Fe}', "");
Expect(0, 1870, '\p{Is_Jg: 	 Fe}', "");
Expect(1, 1870, '\p{^Is_Jg: 	 Fe}', "");
Expect(1, 1870, '\P{Is_Jg: 	 Fe}', "");
Expect(0, 1870, '\P{^Is_Jg: 	 Fe}', "");
Error('\p{Joining_Group=/a/	Alaph}');
Error('\P{Joining_Group=/a/	Alaph}');
Expect(1, 1808, '\p{Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Joining_Group= alaph}', "");
Expect(0, 1808, '\p{^Joining_Group= alaph}', "");
Expect(0, 1808, '\P{Joining_Group= alaph}', "");
Expect(1, 1808, '\P{^Joining_Group= alaph}', "");
Expect(0, 1807, '\p{Joining_Group= alaph}', "");
Expect(1, 1807, '\p{^Joining_Group= alaph}', "");
Expect(1, 1807, '\P{Joining_Group= alaph}', "");
Expect(0, 1807, '\P{^Joining_Group= alaph}', "");
Error('\p{Jg=/a/Alaph}');
Error('\P{Jg=/a/Alaph}');
Expect(1, 1808, '\p{Jg=alaph}', "");
Expect(0, 1808, '\p{^Jg=alaph}', "");
Expect(0, 1808, '\P{Jg=alaph}', "");
Expect(1, 1808, '\P{^Jg=alaph}', "");
Expect(0, 1807, '\p{Jg=alaph}', "");
Expect(1, 1807, '\p{^Jg=alaph}', "");
Expect(1, 1807, '\P{Jg=alaph}', "");
Expect(0, 1807, '\P{^Jg=alaph}', "");
Expect(1, 1808, '\p{Jg=- Alaph}', "");
Expect(0, 1808, '\p{^Jg=- Alaph}', "");
Expect(0, 1808, '\P{Jg=- Alaph}', "");
Expect(1, 1808, '\P{^Jg=- Alaph}', "");
Expect(0, 1807, '\p{Jg=- Alaph}', "");
Expect(1, 1807, '\p{^Jg=- Alaph}', "");
Expect(1, 1807, '\P{Jg=- Alaph}', "");
Expect(0, 1807, '\P{^Jg=- Alaph}', "");
Error('\p{Is_Joining_Group=--ALAPH/a/}');
Error('\P{Is_Joining_Group=--ALAPH/a/}');
Expect(1, 1808, '\p{Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Is_Joining_Group=_-alaph}', "");
Expect(0, 1808, '\p{^Is_Joining_Group=_-alaph}', "");
Expect(0, 1808, '\P{Is_Joining_Group=_-alaph}', "");
Expect(1, 1808, '\P{^Is_Joining_Group=_-alaph}', "");
Expect(0, 1807, '\p{Is_Joining_Group=_-alaph}', "");
Expect(1, 1807, '\p{^Is_Joining_Group=_-alaph}', "");
Expect(1, 1807, '\P{Is_Joining_Group=_-alaph}', "");
Expect(0, 1807, '\P{^Is_Joining_Group=_-alaph}', "");
Error('\p{Is_Jg=  Alaph/a/}');
Error('\P{Is_Jg=  Alaph/a/}');
Expect(1, 1808, '\p{Is_Jg=alaph}', "");
Expect(0, 1808, '\p{^Is_Jg=alaph}', "");
Expect(0, 1808, '\P{Is_Jg=alaph}', "");
Expect(1, 1808, '\P{^Is_Jg=alaph}', "");
Expect(0, 1807, '\p{Is_Jg=alaph}', "");
Expect(1, 1807, '\p{^Is_Jg=alaph}', "");
Expect(1, 1807, '\P{Is_Jg=alaph}', "");
Expect(0, 1807, '\P{^Is_Jg=alaph}', "");
Expect(1, 1808, '\p{Is_Jg: _alaph}', "");
Expect(0, 1808, '\p{^Is_Jg: _alaph}', "");
Expect(0, 1808, '\P{Is_Jg: _alaph}', "");
Expect(1, 1808, '\P{^Is_Jg: _alaph}', "");
Expect(0, 1807, '\p{Is_Jg: _alaph}', "");
Expect(1, 1807, '\p{^Is_Jg: _alaph}', "");
Expect(1, 1807, '\P{Is_Jg: _alaph}', "");
Expect(0, 1807, '\P{^Is_Jg: _alaph}', "");
Error('\p{Joining_Group=/a/		Lamadh}');
Error('\P{Joining_Group=/a/		Lamadh}');
Expect(1, 1824, '\p{Joining_Group=lamadh}', "");
Expect(0, 1824, '\p{^Joining_Group=lamadh}', "");
Expect(0, 1824, '\P{Joining_Group=lamadh}', "");
Expect(1, 1824, '\P{^Joining_Group=lamadh}', "");
Expect(0, 1823, '\p{Joining_Group=lamadh}', "");
Expect(1, 1823, '\p{^Joining_Group=lamadh}', "");
Expect(1, 1823, '\P{Joining_Group=lamadh}', "");
Expect(0, 1823, '\P{^Joining_Group=lamadh}', "");
Expect(1, 1824, '\p{Joining_Group: 	-LAMADH}', "");
Expect(0, 1824, '\p{^Joining_Group: 	-LAMADH}', "");
Expect(0, 1824, '\P{Joining_Group: 	-LAMADH}', "");
Expect(1, 1824, '\P{^Joining_Group: 	-LAMADH}', "");
Expect(0, 1823, '\p{Joining_Group: 	-LAMADH}', "");
Expect(1, 1823, '\p{^Joining_Group: 	-LAMADH}', "");
Expect(1, 1823, '\P{Joining_Group: 	-LAMADH}', "");
Expect(0, 1823, '\P{^Joining_Group: 	-LAMADH}', "");
Error('\p{Jg=:=_lamadh}');
Error('\P{Jg=:=_lamadh}');
Expect(1, 1824, '\p{Jg=lamadh}', "");
Expect(0, 1824, '\p{^Jg=lamadh}', "");
Expect(0, 1824, '\P{Jg=lamadh}', "");
Expect(1, 1824, '\P{^Jg=lamadh}', "");
Expect(0, 1823, '\p{Jg=lamadh}', "");
Expect(1, 1823, '\p{^Jg=lamadh}', "");
Expect(1, 1823, '\P{Jg=lamadh}', "");
Expect(0, 1823, '\P{^Jg=lamadh}', "");
Expect(1, 1824, '\p{Jg=- lamadh}', "");
Expect(0, 1824, '\p{^Jg=- lamadh}', "");
Expect(0, 1824, '\P{Jg=- lamadh}', "");
Expect(1, 1824, '\P{^Jg=- lamadh}', "");
Expect(0, 1823, '\p{Jg=- lamadh}', "");
Expect(1, 1823, '\p{^Jg=- lamadh}', "");
Expect(1, 1823, '\P{Jg=- lamadh}', "");
Expect(0, 1823, '\P{^Jg=- lamadh}', "");
Error('\p{Is_Joining_Group=	_Lamadh/a/}');
Error('\P{Is_Joining_Group=	_Lamadh/a/}');
Expect(1, 1824, '\p{Is_Joining_Group=lamadh}', "");
Expect(0, 1824, '\p{^Is_Joining_Group=lamadh}', "");
Expect(0, 1824, '\P{Is_Joining_Group=lamadh}', "");
Expect(1, 1824, '\P{^Is_Joining_Group=lamadh}', "");
Expect(0, 1823, '\p{Is_Joining_Group=lamadh}', "");
Expect(1, 1823, '\p{^Is_Joining_Group=lamadh}', "");
Expect(1, 1823, '\P{Is_Joining_Group=lamadh}', "");
Expect(0, 1823, '\P{^Is_Joining_Group=lamadh}', "");
Expect(1, 1824, '\p{Is_Joining_Group=-_Lamadh}', "");
Expect(0, 1824, '\p{^Is_Joining_Group=-_Lamadh}', "");
Expect(0, 1824, '\P{Is_Joining_Group=-_Lamadh}', "");
Expect(1, 1824, '\P{^Is_Joining_Group=-_Lamadh}', "");
Expect(0, 1823, '\p{Is_Joining_Group=-_Lamadh}', "");
Expect(1, 1823, '\p{^Is_Joining_Group=-_Lamadh}', "");
Expect(1, 1823, '\P{Is_Joining_Group=-_Lamadh}', "");
Expect(0, 1823, '\P{^Is_Joining_Group=-_Lamadh}', "");
Error('\p{Is_Jg= _Lamadh:=}');
Error('\P{Is_Jg= _Lamadh:=}');
Expect(1, 1824, '\p{Is_Jg=lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=lamadh}', "");
Expect(1, 1824, '\p{Is_Jg=_lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=_lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=_lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=_lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=_lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=_lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=_lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=_lamadh}', "");
Error('\p{Joining_Group=/a/		E}');
Error('\P{Joining_Group=/a/		E}');
Expect(1, 1829, '\p{Joining_Group=e}', "");
Expect(0, 1829, '\p{^Joining_Group=e}', "");
Expect(0, 1829, '\P{Joining_Group=e}', "");
Expect(1, 1829, '\P{^Joining_Group=e}', "");
Expect(0, 1828, '\p{Joining_Group=e}', "");
Expect(1, 1828, '\p{^Joining_Group=e}', "");
Expect(1, 1828, '\P{Joining_Group=e}', "");
Expect(0, 1828, '\P{^Joining_Group=e}', "");
Expect(1, 1829, '\p{Joining_Group= E}', "");
Expect(0, 1829, '\p{^Joining_Group= E}', "");
Expect(0, 1829, '\P{Joining_Group= E}', "");
Expect(1, 1829, '\P{^Joining_Group= E}', "");
Expect(0, 1828, '\p{Joining_Group= E}', "");
Expect(1, 1828, '\p{^Joining_Group= E}', "");
Expect(1, 1828, '\P{Joining_Group= E}', "");
Expect(0, 1828, '\P{^Joining_Group= E}', "");
Error('\p{Jg=/a/ -E}');
Error('\P{Jg=/a/ -E}');
Expect(1, 1829, '\p{Jg=e}', "");
Expect(0, 1829, '\p{^Jg=e}', "");
Expect(0, 1829, '\P{Jg=e}', "");
Expect(1, 1829, '\P{^Jg=e}', "");
Expect(0, 1828, '\p{Jg=e}', "");
Expect(1, 1828, '\p{^Jg=e}', "");
Expect(1, 1828, '\P{Jg=e}', "");
Expect(0, 1828, '\P{^Jg=e}', "");
Expect(1, 1829, '\p{Jg= -E}', "");
Expect(0, 1829, '\p{^Jg= -E}', "");
Expect(0, 1829, '\P{Jg= -E}', "");
Expect(1, 1829, '\P{^Jg= -E}', "");
Expect(0, 1828, '\p{Jg= -E}', "");
Expect(1, 1828, '\p{^Jg= -E}', "");
Expect(1, 1828, '\P{Jg= -E}', "");
Expect(0, 1828, '\P{^Jg= -E}', "");
Error('\p{Is_Joining_Group:		_e:=}');
Error('\P{Is_Joining_Group:		_e:=}');
Expect(1, 1829, '\p{Is_Joining_Group=e}', "");
Expect(0, 1829, '\p{^Is_Joining_Group=e}', "");
Expect(0, 1829, '\P{Is_Joining_Group=e}', "");
Expect(1, 1829, '\P{^Is_Joining_Group=e}', "");
Expect(0, 1828, '\p{Is_Joining_Group=e}', "");
Expect(1, 1828, '\p{^Is_Joining_Group=e}', "");
Expect(1, 1828, '\P{Is_Joining_Group=e}', "");
Expect(0, 1828, '\P{^Is_Joining_Group=e}', "");
Expect(1, 1829, '\p{Is_Joining_Group=_-E}', "");
Expect(0, 1829, '\p{^Is_Joining_Group=_-E}', "");
Expect(0, 1829, '\P{Is_Joining_Group=_-E}', "");
Expect(1, 1829, '\P{^Is_Joining_Group=_-E}', "");
Expect(0, 1828, '\p{Is_Joining_Group=_-E}', "");
Expect(1, 1828, '\p{^Is_Joining_Group=_-E}', "");
Expect(1, 1828, '\P{Is_Joining_Group=_-E}', "");
Expect(0, 1828, '\P{^Is_Joining_Group=_-E}', "");
Error('\p{Is_Jg:	:=	e}');
Error('\P{Is_Jg:	:=	e}');
Expect(1, 1829, '\p{Is_Jg:e}', "");
Expect(0, 1829, '\p{^Is_Jg:e}', "");
Expect(0, 1829, '\P{Is_Jg:e}', "");
Expect(1, 1829, '\P{^Is_Jg:e}', "");
Expect(0, 1828, '\p{Is_Jg:e}', "");
Expect(1, 1828, '\p{^Is_Jg:e}', "");
Expect(1, 1828, '\P{Is_Jg:e}', "");
Expect(0, 1828, '\P{^Is_Jg:e}', "");
Expect(1, 1829, '\p{Is_Jg=-_e}', "");
Expect(0, 1829, '\p{^Is_Jg=-_e}', "");
Expect(0, 1829, '\P{Is_Jg=-_e}', "");
Expect(1, 1829, '\P{^Is_Jg=-_e}', "");
Expect(0, 1828, '\p{Is_Jg=-_e}', "");
Expect(1, 1828, '\p{^Is_Jg=-_e}', "");
Expect(1, 1828, '\P{Is_Jg=-_e}', "");
Expect(0, 1828, '\P{^Is_Jg=-_e}', "");
Error('\p{Joining_Group=  Yeh	BARREE:=}');
Error('\P{Joining_Group=  Yeh	BARREE:=}');
Expect(1, 1747, '\p{Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Joining_Group=_	Yeh barree}', "");
Expect(0, 1747, '\p{^Joining_Group=_	Yeh barree}', "");
Expect(0, 1747, '\P{Joining_Group=_	Yeh barree}', "");
Expect(1, 1747, '\P{^Joining_Group=_	Yeh barree}', "");
Expect(0, 1745, '\p{Joining_Group=_	Yeh barree}', "");
Expect(1, 1745, '\p{^Joining_Group=_	Yeh barree}', "");
Expect(1, 1745, '\P{Joining_Group=_	Yeh barree}', "");
Expect(0, 1745, '\P{^Joining_Group=_	Yeh barree}', "");
Error('\p{Jg=_/a/yeh Barree}');
Error('\P{Jg=_/a/yeh Barree}');
Expect(1, 1747, '\p{Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Jg=yehbarree}', "");
Expect(0, 1747, '\P{Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Jg=yehbarree}', "");
Expect(0, 1745, '\p{Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Jg=yehbarree}', "");
Expect(1, 1745, '\P{Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Jg=yehbarree}', "");
Expect(1, 1747, '\p{Jg=	 YEH barree}', "");
Expect(0, 1747, '\p{^Jg=	 YEH barree}', "");
Expect(0, 1747, '\P{Jg=	 YEH barree}', "");
Expect(1, 1747, '\P{^Jg=	 YEH barree}', "");
Expect(0, 1745, '\p{Jg=	 YEH barree}', "");
Expect(1, 1745, '\p{^Jg=	 YEH barree}', "");
Expect(1, 1745, '\P{Jg=	 YEH barree}', "");
Expect(0, 1745, '\P{^Jg=	 YEH barree}', "");
Error('\p{Is_Joining_Group=-	Yeh_BARREE:=}');
Error('\P{Is_Joining_Group=-	Yeh_BARREE:=}');
Expect(1, 1747, '\p{Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Is_Joining_Group=YEHBarree}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=YEHBarree}', "");
Expect(0, 1747, '\P{Is_Joining_Group=YEHBarree}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=YEHBarree}', "");
Expect(0, 1745, '\p{Is_Joining_Group=YEHBarree}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=YEHBarree}', "");
Expect(1, 1745, '\P{Is_Joining_Group=YEHBarree}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=YEHBarree}', "");
Error('\p{Is_Jg=/a/yeh	Barree}');
Error('\P{Is_Jg=/a/yeh	Barree}');
Expect(1, 1747, '\p{Is_Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Jg=yehbarree}', "");
Expect(0, 1747, '\P{Is_Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Jg=yehbarree}', "");
Expect(0, 1745, '\p{Is_Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Jg=yehbarree}', "");
Expect(1, 1745, '\P{Is_Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Jg=yehbarree}', "");
Expect(1, 1747, '\p{Is_Jg=	Yeh	Barree}', "");
Expect(0, 1747, '\p{^Is_Jg=	Yeh	Barree}', "");
Expect(0, 1747, '\P{Is_Jg=	Yeh	Barree}', "");
Expect(1, 1747, '\P{^Is_Jg=	Yeh	Barree}', "");
Expect(0, 1745, '\p{Is_Jg=	Yeh	Barree}', "");
Expect(1, 1745, '\p{^Is_Jg=	Yeh	Barree}', "");
Expect(1, 1745, '\P{Is_Jg=	Yeh	Barree}', "");
Expect(0, 1745, '\P{^Is_Jg=	Yeh	Barree}', "");
Error('\p{Joining_Group=/a/nya}');
Error('\P{Joining_Group=/a/nya}');
Expect(1, 1725, '\p{Joining_Group=nya}', "");
Expect(0, 1725, '\p{^Joining_Group=nya}', "");
Expect(0, 1725, '\P{Joining_Group=nya}', "");
Expect(1, 1725, '\P{^Joining_Group=nya}', "");
Expect(0, 1724, '\p{Joining_Group=nya}', "");
Expect(1, 1724, '\p{^Joining_Group=nya}', "");
Expect(1, 1724, '\P{Joining_Group=nya}', "");
Expect(0, 1724, '\P{^Joining_Group=nya}', "");
Expect(1, 1725, '\p{Joining_Group=	 nya}', "");
Expect(0, 1725, '\p{^Joining_Group=	 nya}', "");
Expect(0, 1725, '\P{Joining_Group=	 nya}', "");
Expect(1, 1725, '\P{^Joining_Group=	 nya}', "");
Expect(0, 1724, '\p{Joining_Group=	 nya}', "");
Expect(1, 1724, '\p{^Joining_Group=	 nya}', "");
Expect(1, 1724, '\P{Joining_Group=	 nya}', "");
Expect(0, 1724, '\P{^Joining_Group=	 nya}', "");
Error('\p{Jg=_-NYA:=}');
Error('\P{Jg=_-NYA:=}');
Expect(1, 1725, '\p{Jg=nya}', "");
Expect(0, 1725, '\p{^Jg=nya}', "");
Expect(0, 1725, '\P{Jg=nya}', "");
Expect(1, 1725, '\P{^Jg=nya}', "");
Expect(0, 1724, '\p{Jg=nya}', "");
Expect(1, 1724, '\p{^Jg=nya}', "");
Expect(1, 1724, '\P{Jg=nya}', "");
Expect(0, 1724, '\P{^Jg=nya}', "");
Expect(1, 1725, '\p{Jg= 	Nya}', "");
Expect(0, 1725, '\p{^Jg= 	Nya}', "");
Expect(0, 1725, '\P{Jg= 	Nya}', "");
Expect(1, 1725, '\P{^Jg= 	Nya}', "");
Expect(0, 1724, '\p{Jg= 	Nya}', "");
Expect(1, 1724, '\p{^Jg= 	Nya}', "");
Expect(1, 1724, '\P{Jg= 	Nya}', "");
Expect(0, 1724, '\P{^Jg= 	Nya}', "");
Error('\p{Is_Joining_Group=	/a/Nya}');
Error('\P{Is_Joining_Group=	/a/Nya}');
Expect(1, 1725, '\p{Is_Joining_Group:	nya}', "");
Expect(0, 1725, '\p{^Is_Joining_Group:	nya}', "");
Expect(0, 1725, '\P{Is_Joining_Group:	nya}', "");
Expect(1, 1725, '\P{^Is_Joining_Group:	nya}', "");
Expect(0, 1724, '\p{Is_Joining_Group:	nya}', "");
Expect(1, 1724, '\p{^Is_Joining_Group:	nya}', "");
Expect(1, 1724, '\P{Is_Joining_Group:	nya}', "");
Expect(0, 1724, '\P{^Is_Joining_Group:	nya}', "");
Expect(1, 1725, '\p{Is_Joining_Group=	Nya}', "");
Expect(0, 1725, '\p{^Is_Joining_Group=	Nya}', "");
Expect(0, 1725, '\P{Is_Joining_Group=	Nya}', "");
Expect(1, 1725, '\P{^Is_Joining_Group=	Nya}', "");
Expect(0, 1724, '\p{Is_Joining_Group=	Nya}', "");
Expect(1, 1724, '\p{^Is_Joining_Group=	Nya}', "");
Expect(1, 1724, '\P{Is_Joining_Group=	Nya}', "");
Expect(0, 1724, '\P{^Is_Joining_Group=	Nya}', "");
Error('\p{Is_Jg=/a/	nya}');
Error('\P{Is_Jg=/a/	nya}');
Expect(1, 1725, '\p{Is_Jg=nya}', "");
Expect(0, 1725, '\p{^Is_Jg=nya}', "");
Expect(0, 1725, '\P{Is_Jg=nya}', "");
Expect(1, 1725, '\P{^Is_Jg=nya}', "");
Expect(0, 1724, '\p{Is_Jg=nya}', "");
Expect(1, 1724, '\p{^Is_Jg=nya}', "");
Expect(1, 1724, '\P{Is_Jg=nya}', "");
Expect(0, 1724, '\P{^Is_Jg=nya}', "");
Expect(1, 1725, '\p{Is_Jg=	Nya}', "");
Expect(0, 1725, '\p{^Is_Jg=	Nya}', "");
Expect(0, 1725, '\P{Is_Jg=	Nya}', "");
Expect(1, 1725, '\P{^Is_Jg=	Nya}', "");
Expect(0, 1724, '\p{Is_Jg=	Nya}', "");
Expect(1, 1724, '\p{^Is_Jg=	Nya}', "");
Expect(1, 1724, '\P{Is_Jg=	Nya}', "");
Expect(0, 1724, '\P{^Is_Jg=	Nya}', "");
Error('\p{Joining_Group=-NUN/a/}');
Error('\P{Joining_Group=-NUN/a/}');
Expect(1, 1826, '\p{Joining_Group=nun}', "");
Expect(0, 1826, '\p{^Joining_Group=nun}', "");
Expect(0, 1826, '\P{Joining_Group=nun}', "");
Expect(1, 1826, '\P{^Joining_Group=nun}', "");
Expect(0, 1825, '\p{Joining_Group=nun}', "");
Expect(1, 1825, '\p{^Joining_Group=nun}', "");
Expect(1, 1825, '\P{Joining_Group=nun}', "");
Expect(0, 1825, '\P{^Joining_Group=nun}', "");
Expect(1, 1826, '\p{Joining_Group:_	Nun}', "");
Expect(0, 1826, '\p{^Joining_Group:_	Nun}', "");
Expect(0, 1826, '\P{Joining_Group:_	Nun}', "");
Expect(1, 1826, '\P{^Joining_Group:_	Nun}', "");
Expect(0, 1825, '\p{Joining_Group:_	Nun}', "");
Expect(1, 1825, '\p{^Joining_Group:_	Nun}', "");
Expect(1, 1825, '\P{Joining_Group:_	Nun}', "");
Expect(0, 1825, '\P{^Joining_Group:_	Nun}', "");
Error('\p{Jg=/a/-NUN}');
Error('\P{Jg=/a/-NUN}');
Expect(1, 1826, '\p{Jg=nun}', "");
Expect(0, 1826, '\p{^Jg=nun}', "");
Expect(0, 1826, '\P{Jg=nun}', "");
Expect(1, 1826, '\P{^Jg=nun}', "");
Expect(0, 1825, '\p{Jg=nun}', "");
Expect(1, 1825, '\p{^Jg=nun}', "");
Expect(1, 1825, '\P{Jg=nun}', "");
Expect(0, 1825, '\P{^Jg=nun}', "");
Expect(1, 1826, '\p{Jg= _NUN}', "");
Expect(0, 1826, '\p{^Jg= _NUN}', "");
Expect(0, 1826, '\P{Jg= _NUN}', "");
Expect(1, 1826, '\P{^Jg= _NUN}', "");
Expect(0, 1825, '\p{Jg= _NUN}', "");
Expect(1, 1825, '\p{^Jg= _NUN}', "");
Expect(1, 1825, '\P{Jg= _NUN}', "");
Expect(0, 1825, '\P{^Jg= _NUN}', "");
Error('\p{Is_Joining_Group=:=		nun}');
Error('\P{Is_Joining_Group=:=		nun}');
Expect(1, 1826, '\p{Is_Joining_Group: nun}', "");
Expect(0, 1826, '\p{^Is_Joining_Group: nun}', "");
Expect(0, 1826, '\P{Is_Joining_Group: nun}', "");
Expect(1, 1826, '\P{^Is_Joining_Group: nun}', "");
Expect(0, 1825, '\p{Is_Joining_Group: nun}', "");
Expect(1, 1825, '\p{^Is_Joining_Group: nun}', "");
Expect(1, 1825, '\P{Is_Joining_Group: nun}', "");
Expect(0, 1825, '\P{^Is_Joining_Group: nun}', "");
Expect(1, 1826, '\p{Is_Joining_Group=		nun}', "");
Expect(0, 1826, '\p{^Is_Joining_Group=		nun}', "");
Expect(0, 1826, '\P{Is_Joining_Group=		nun}', "");
Expect(1, 1826, '\P{^Is_Joining_Group=		nun}', "");
Expect(0, 1825, '\p{Is_Joining_Group=		nun}', "");
Expect(1, 1825, '\p{^Is_Joining_Group=		nun}', "");
Expect(1, 1825, '\P{Is_Joining_Group=		nun}', "");
Expect(0, 1825, '\P{^Is_Joining_Group=		nun}', "");
Error('\p{Is_Jg=__Nun/a/}');
Error('\P{Is_Jg=__Nun/a/}');
Expect(1, 1826, '\p{Is_Jg=nun}', "");
Expect(0, 1826, '\p{^Is_Jg=nun}', "");
Expect(0, 1826, '\P{Is_Jg=nun}', "");
Expect(1, 1826, '\P{^Is_Jg=nun}', "");
Expect(0, 1825, '\p{Is_Jg=nun}', "");
Expect(1, 1825, '\p{^Is_Jg=nun}', "");
Expect(1, 1825, '\P{Is_Jg=nun}', "");
Expect(0, 1825, '\P{^Is_Jg=nun}', "");
Expect(1, 1826, '\p{Is_Jg=-_NUN}', "");
Expect(0, 1826, '\p{^Is_Jg=-_NUN}', "");
Expect(0, 1826, '\P{Is_Jg=-_NUN}', "");
Expect(1, 1826, '\P{^Is_Jg=-_NUN}', "");
Expect(0, 1825, '\p{Is_Jg=-_NUN}', "");
Expect(1, 1825, '\p{^Is_Jg=-_NUN}', "");
Expect(1, 1825, '\P{Is_Jg=-_NUN}', "");
Expect(0, 1825, '\P{^Is_Jg=-_NUN}', "");
Error('\p{Joining_Group=-:=LAM}');
Error('\P{Joining_Group=-:=LAM}');
Expect(1, 1604, '\p{Joining_Group=lam}', "");
Expect(0, 1604, '\p{^Joining_Group=lam}', "");
Expect(0, 1604, '\P{Joining_Group=lam}', "");
Expect(1, 1604, '\P{^Joining_Group=lam}', "");
Expect(0, 1603, '\p{Joining_Group=lam}', "");
Expect(1, 1603, '\p{^Joining_Group=lam}', "");
Expect(1, 1603, '\P{Joining_Group=lam}', "");
Expect(0, 1603, '\P{^Joining_Group=lam}', "");
Expect(1, 1604, '\p{Joining_Group= LAM}', "");
Expect(0, 1604, '\p{^Joining_Group= LAM}', "");
Expect(0, 1604, '\P{Joining_Group= LAM}', "");
Expect(1, 1604, '\P{^Joining_Group= LAM}', "");
Expect(0, 1603, '\p{Joining_Group= LAM}', "");
Expect(1, 1603, '\p{^Joining_Group= LAM}', "");
Expect(1, 1603, '\P{Joining_Group= LAM}', "");
Expect(0, 1603, '\P{^Joining_Group= LAM}', "");
Error('\p{Jg=-_LAM:=}');
Error('\P{Jg=-_LAM:=}');
Expect(1, 1604, '\p{Jg=lam}', "");
Expect(0, 1604, '\p{^Jg=lam}', "");
Expect(0, 1604, '\P{Jg=lam}', "");
Expect(1, 1604, '\P{^Jg=lam}', "");
Expect(0, 1603, '\p{Jg=lam}', "");
Expect(1, 1603, '\p{^Jg=lam}', "");
Expect(1, 1603, '\P{Jg=lam}', "");
Expect(0, 1603, '\P{^Jg=lam}', "");
Expect(1, 1604, '\p{Jg=		Lam}', "");
Expect(0, 1604, '\p{^Jg=		Lam}', "");
Expect(0, 1604, '\P{Jg=		Lam}', "");
Expect(1, 1604, '\P{^Jg=		Lam}', "");
Expect(0, 1603, '\p{Jg=		Lam}', "");
Expect(1, 1603, '\p{^Jg=		Lam}', "");
Expect(1, 1603, '\P{Jg=		Lam}', "");
Expect(0, 1603, '\P{^Jg=		Lam}', "");
Error('\p{Is_Joining_Group=-	Lam/a/}');
Error('\P{Is_Joining_Group=-	Lam/a/}');
Expect(1, 1604, '\p{Is_Joining_Group=lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group=lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group=lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group=lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group=lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group=lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group=lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group=lam}', "");
Expect(1, 1604, '\p{Is_Joining_Group= Lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group= Lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group= Lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group= Lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group= Lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group= Lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group= Lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group= Lam}', "");
Error('\p{Is_Jg=_	lam/a/}');
Error('\P{Is_Jg=_	lam/a/}');
Expect(1, 1604, '\p{Is_Jg=lam}', "");
Expect(0, 1604, '\p{^Is_Jg=lam}', "");
Expect(0, 1604, '\P{Is_Jg=lam}', "");
Expect(1, 1604, '\P{^Is_Jg=lam}', "");
Expect(0, 1603, '\p{Is_Jg=lam}', "");
Expect(1, 1603, '\p{^Is_Jg=lam}', "");
Expect(1, 1603, '\P{Is_Jg=lam}', "");
Expect(0, 1603, '\P{^Is_Jg=lam}', "");
Expect(1, 1604, '\p{Is_Jg= lam}', "");
Expect(0, 1604, '\p{^Is_Jg= lam}', "");
Expect(0, 1604, '\P{Is_Jg= lam}', "");
Expect(1, 1604, '\P{^Is_Jg= lam}', "");
Expect(0, 1603, '\p{Is_Jg= lam}', "");
Expect(1, 1603, '\p{^Is_Jg= lam}', "");
Expect(1, 1603, '\P{Is_Jg= lam}', "");
Expect(0, 1603, '\P{^Is_Jg= lam}', "");
Error('\p{Joining_Group=_Ain:=}');
Error('\P{Joining_Group=_Ain:=}');
Expect(1, 1594, '\p{Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Joining_Group=ain}', "");
Expect(0, 1594, '\P{Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Joining_Group=ain}', "");
Expect(0, 1592, '\p{Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Joining_Group=ain}', "");
Expect(1, 1592, '\P{Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Joining_Group=ain}', "");
Expect(1, 1594, '\p{Joining_Group=- Ain}', "");
Expect(0, 1594, '\p{^Joining_Group=- Ain}', "");
Expect(0, 1594, '\P{Joining_Group=- Ain}', "");
Expect(1, 1594, '\P{^Joining_Group=- Ain}', "");
Expect(0, 1592, '\p{Joining_Group=- Ain}', "");
Expect(1, 1592, '\p{^Joining_Group=- Ain}', "");
Expect(1, 1592, '\P{Joining_Group=- Ain}', "");
Expect(0, 1592, '\P{^Joining_Group=- Ain}', "");
Error('\p{Jg= /a/AIN}');
Error('\P{Jg= /a/AIN}');
Expect(1, 1594, '\p{Jg:ain}', "");
Expect(0, 1594, '\p{^Jg:ain}', "");
Expect(0, 1594, '\P{Jg:ain}', "");
Expect(1, 1594, '\P{^Jg:ain}', "");
Expect(0, 1592, '\p{Jg:ain}', "");
Expect(1, 1592, '\p{^Jg:ain}', "");
Expect(1, 1592, '\P{Jg:ain}', "");
Expect(0, 1592, '\P{^Jg:ain}', "");
Expect(1, 1594, '\p{Jg=	Ain}', "");
Expect(0, 1594, '\p{^Jg=	Ain}', "");
Expect(0, 1594, '\P{Jg=	Ain}', "");
Expect(1, 1594, '\P{^Jg=	Ain}', "");
Expect(0, 1592, '\p{Jg=	Ain}', "");
Expect(1, 1592, '\p{^Jg=	Ain}', "");
Expect(1, 1592, '\P{Jg=	Ain}', "");
Expect(0, 1592, '\P{^Jg=	Ain}', "");
Error('\p{Is_Joining_Group=	Ain/a/}');
Error('\P{Is_Joining_Group=	Ain/a/}');
Expect(1, 1594, '\p{Is_Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=ain}', "");
Expect(1, 1594, '\p{Is_Joining_Group=_Ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=_Ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=_Ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=_Ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=_Ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=_Ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=_Ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=_Ain}', "");
Error('\p{Is_Jg=_Ain/a/}');
Error('\P{Is_Jg=_Ain/a/}');
Expect(1, 1594, '\p{Is_Jg=ain}', "");
Expect(0, 1594, '\p{^Is_Jg=ain}', "");
Expect(0, 1594, '\P{Is_Jg=ain}', "");
Expect(1, 1594, '\P{^Is_Jg=ain}', "");
Expect(0, 1592, '\p{Is_Jg=ain}', "");
Expect(1, 1592, '\p{^Is_Jg=ain}', "");
Expect(1, 1592, '\P{Is_Jg=ain}', "");
Expect(0, 1592, '\P{^Is_Jg=ain}', "");
Expect(1, 1594, '\p{Is_Jg=	-AIN}', "");
Expect(0, 1594, '\p{^Is_Jg=	-AIN}', "");
Expect(0, 1594, '\P{Is_Jg=	-AIN}', "");
Expect(1, 1594, '\P{^Is_Jg=	-AIN}', "");
Expect(0, 1592, '\p{Is_Jg=	-AIN}', "");
Expect(1, 1592, '\p{^Is_Jg=	-AIN}', "");
Expect(1, 1592, '\P{Is_Jg=	-AIN}', "");
Expect(0, 1592, '\P{^Is_Jg=	-AIN}', "");
Error('\p{Joining_Group=/a/	-Heh}');
Error('\P{Joining_Group=/a/	-Heh}');
Expect(1, 1607, '\p{Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Joining_Group=heh}', "");
Expect(0, 1607, '\P{Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Joining_Group=heh}', "");
Expect(0, 1606, '\p{Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Joining_Group=heh}', "");
Expect(1, 1606, '\P{Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Joining_Group=heh}', "");
Expect(1, 1607, '\p{Joining_Group=- HEH}', "");
Expect(0, 1607, '\p{^Joining_Group=- HEH}', "");
Expect(0, 1607, '\P{Joining_Group=- HEH}', "");
Expect(1, 1607, '\P{^Joining_Group=- HEH}', "");
Expect(0, 1606, '\p{Joining_Group=- HEH}', "");
Expect(1, 1606, '\p{^Joining_Group=- HEH}', "");
Expect(1, 1606, '\P{Joining_Group=- HEH}', "");
Expect(0, 1606, '\P{^Joining_Group=- HEH}', "");
Error('\p{Jg=/a/_ heh}');
Error('\P{Jg=/a/_ heh}');
Expect(1, 1607, '\p{Jg=heh}', "");
Expect(0, 1607, '\p{^Jg=heh}', "");
Expect(0, 1607, '\P{Jg=heh}', "");
Expect(1, 1607, '\P{^Jg=heh}', "");
Expect(0, 1606, '\p{Jg=heh}', "");
Expect(1, 1606, '\p{^Jg=heh}', "");
Expect(1, 1606, '\P{Jg=heh}', "");
Expect(0, 1606, '\P{^Jg=heh}', "");
Expect(1, 1607, '\p{Jg=-	heh}', "");
Expect(0, 1607, '\p{^Jg=-	heh}', "");
Expect(0, 1607, '\P{Jg=-	heh}', "");
Expect(1, 1607, '\P{^Jg=-	heh}', "");
Expect(0, 1606, '\p{Jg=-	heh}', "");
Expect(1, 1606, '\p{^Jg=-	heh}', "");
Expect(1, 1606, '\P{Jg=-	heh}', "");
Expect(0, 1606, '\P{^Jg=-	heh}', "");
Error('\p{Is_Joining_Group=	/a/Heh}');
Error('\P{Is_Joining_Group=	/a/Heh}');
Expect(1, 1607, '\p{Is_Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Is_Joining_Group=heh}', "");
Expect(0, 1607, '\P{Is_Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Is_Joining_Group=heh}', "");
Expect(0, 1606, '\p{Is_Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Is_Joining_Group=heh}', "");
Expect(1, 1606, '\P{Is_Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Is_Joining_Group=heh}', "");
Expect(1, 1607, '\p{Is_Joining_Group=-Heh}', "");
Expect(0, 1607, '\p{^Is_Joining_Group=-Heh}', "");
Expect(0, 1607, '\P{Is_Joining_Group=-Heh}', "");
Expect(1, 1607, '\P{^Is_Joining_Group=-Heh}', "");
Expect(0, 1606, '\p{Is_Joining_Group=-Heh}', "");
Expect(1, 1606, '\p{^Is_Joining_Group=-Heh}', "");
Expect(1, 1606, '\P{Is_Joining_Group=-Heh}', "");
Expect(0, 1606, '\P{^Is_Joining_Group=-Heh}', "");
Error('\p{Is_Jg=:=	heh}');
Error('\P{Is_Jg=:=	heh}');
Expect(1, 1607, '\p{Is_Jg: heh}', "");
Expect(0, 1607, '\p{^Is_Jg: heh}', "");
Expect(0, 1607, '\P{Is_Jg: heh}', "");
Expect(1, 1607, '\P{^Is_Jg: heh}', "");
Expect(0, 1606, '\p{Is_Jg: heh}', "");
Expect(1, 1606, '\p{^Is_Jg: heh}', "");
Expect(1, 1606, '\P{Is_Jg: heh}', "");
Expect(0, 1606, '\P{^Is_Jg: heh}', "");
Expect(1, 1607, '\p{Is_Jg=		Heh}', "");
Expect(0, 1607, '\p{^Is_Jg=		Heh}', "");
Expect(0, 1607, '\P{Is_Jg=		Heh}', "");
Expect(1, 1607, '\P{^Is_Jg=		Heh}', "");
Expect(0, 1606, '\p{Is_Jg=		Heh}', "");
Expect(1, 1606, '\p{^Is_Jg=		Heh}', "");
Expect(1, 1606, '\P{Is_Jg=		Heh}', "");
Expect(0, 1606, '\P{^Is_Jg=		Heh}', "");
Error('\p{Joining_Group=_:=Qaph}');
Error('\P{Joining_Group=_:=Qaph}');
Expect(1, 1833, '\p{Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Joining_Group= 	Qaph}', "");
Expect(0, 1833, '\p{^Joining_Group= 	Qaph}', "");
Expect(0, 1833, '\P{Joining_Group= 	Qaph}', "");
Expect(1, 1833, '\P{^Joining_Group= 	Qaph}', "");
Expect(0, 1832, '\p{Joining_Group= 	Qaph}', "");
Expect(1, 1832, '\p{^Joining_Group= 	Qaph}', "");
Expect(1, 1832, '\P{Joining_Group= 	Qaph}', "");
Expect(0, 1832, '\P{^Joining_Group= 	Qaph}', "");
Error('\p{Jg= :=QAPH}');
Error('\P{Jg= :=QAPH}');
Expect(1, 1833, '\p{Jg=qaph}', "");
Expect(0, 1833, '\p{^Jg=qaph}', "");
Expect(0, 1833, '\P{Jg=qaph}', "");
Expect(1, 1833, '\P{^Jg=qaph}', "");
Expect(0, 1832, '\p{Jg=qaph}', "");
Expect(1, 1832, '\p{^Jg=qaph}', "");
Expect(1, 1832, '\P{Jg=qaph}', "");
Expect(0, 1832, '\P{^Jg=qaph}', "");
Expect(1, 1833, '\p{Jg= Qaph}', "");
Expect(0, 1833, '\p{^Jg= Qaph}', "");
Expect(0, 1833, '\P{Jg= Qaph}', "");
Expect(1, 1833, '\P{^Jg= Qaph}', "");
Expect(0, 1832, '\p{Jg= Qaph}', "");
Expect(1, 1832, '\p{^Jg= Qaph}', "");
Expect(1, 1832, '\P{Jg= Qaph}', "");
Expect(0, 1832, '\P{^Jg= Qaph}', "");
Error('\p{Is_Joining_Group=_:=Qaph}');
Error('\P{Is_Joining_Group=_:=Qaph}');
Expect(1, 1833, '\p{Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Is_Joining_Group=	-qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group=	-qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group=	-qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group=	-qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group=	-qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group=	-qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group=	-qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group=	-qaph}', "");
Error('\p{Is_Jg:	/a/ qaph}');
Error('\P{Is_Jg:	/a/ qaph}');
Expect(1, 1833, '\p{Is_Jg=qaph}', "");
Expect(0, 1833, '\p{^Is_Jg=qaph}', "");
Expect(0, 1833, '\P{Is_Jg=qaph}', "");
Expect(1, 1833, '\P{^Is_Jg=qaph}', "");
Expect(0, 1832, '\p{Is_Jg=qaph}', "");
Expect(1, 1832, '\p{^Is_Jg=qaph}', "");
Expect(1, 1832, '\P{Is_Jg=qaph}', "");
Expect(0, 1832, '\P{^Is_Jg=qaph}', "");
Expect(1, 1833, '\p{Is_Jg= -Qaph}', "");
Expect(0, 1833, '\p{^Is_Jg= -Qaph}', "");
Expect(0, 1833, '\P{Is_Jg= -Qaph}', "");
Expect(1, 1833, '\P{^Is_Jg= -Qaph}', "");
Expect(0, 1832, '\p{Is_Jg= -Qaph}', "");
Expect(1, 1832, '\p{^Is_Jg= -Qaph}', "");
Expect(1, 1832, '\P{Is_Jg= -Qaph}', "");
Expect(0, 1832, '\P{^Is_Jg= -Qaph}', "");
Error('\p{Joining_Group=_/a/Heth}');
Error('\P{Joining_Group=_/a/Heth}');
Expect(1, 1818, '\p{Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Joining_Group=heth}', "");
Expect(0, 1818, '\P{Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Joining_Group=heth}', "");
Expect(0, 1817, '\p{Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Joining_Group=heth}', "");
Expect(1, 1817, '\P{Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Joining_Group=heth}', "");
Expect(1, 1818, '\p{Joining_Group=	-heth}', "");
Expect(0, 1818, '\p{^Joining_Group=	-heth}', "");
Expect(0, 1818, '\P{Joining_Group=	-heth}', "");
Expect(1, 1818, '\P{^Joining_Group=	-heth}', "");
Expect(0, 1817, '\p{Joining_Group=	-heth}', "");
Expect(1, 1817, '\p{^Joining_Group=	-heth}', "");
Expect(1, 1817, '\P{Joining_Group=	-heth}', "");
Expect(0, 1817, '\P{^Joining_Group=	-heth}', "");
Error('\p{Jg=-:=heth}');
Error('\P{Jg=-:=heth}');
Expect(1, 1818, '\p{Jg=heth}', "");
Expect(0, 1818, '\p{^Jg=heth}', "");
Expect(0, 1818, '\P{Jg=heth}', "");
Expect(1, 1818, '\P{^Jg=heth}', "");
Expect(0, 1817, '\p{Jg=heth}', "");
Expect(1, 1817, '\p{^Jg=heth}', "");
Expect(1, 1817, '\P{Jg=heth}', "");
Expect(0, 1817, '\P{^Jg=heth}', "");
Expect(1, 1818, '\p{Jg=__heth}', "");
Expect(0, 1818, '\p{^Jg=__heth}', "");
Expect(0, 1818, '\P{Jg=__heth}', "");
Expect(1, 1818, '\P{^Jg=__heth}', "");
Expect(0, 1817, '\p{Jg=__heth}', "");
Expect(1, 1817, '\p{^Jg=__heth}', "");
Expect(1, 1817, '\P{Jg=__heth}', "");
Expect(0, 1817, '\P{^Jg=__heth}', "");
Error('\p{Is_Joining_Group=		Heth/a/}');
Error('\P{Is_Joining_Group=		Heth/a/}');
Expect(1, 1818, '\p{Is_Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group=heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group=heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group=heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group=heth}', "");
Expect(1, 1818, '\p{Is_Joining_Group=_Heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group=_Heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group=_Heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group=_Heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group=_Heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group=_Heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group=_Heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group=_Heth}', "");
Error('\p{Is_Jg=-	heth:=}');
Error('\P{Is_Jg=-	heth:=}');
Expect(1, 1818, '\p{Is_Jg=heth}', "");
Expect(0, 1818, '\p{^Is_Jg=heth}', "");
Expect(0, 1818, '\P{Is_Jg=heth}', "");
Expect(1, 1818, '\P{^Is_Jg=heth}', "");
Expect(0, 1817, '\p{Is_Jg=heth}', "");
Expect(1, 1817, '\p{^Is_Jg=heth}', "");
Expect(1, 1817, '\P{Is_Jg=heth}', "");
Expect(0, 1817, '\P{^Is_Jg=heth}', "");
Expect(1, 1818, '\p{Is_Jg=__Heth}', "");
Expect(0, 1818, '\p{^Is_Jg=__Heth}', "");
Expect(0, 1818, '\P{Is_Jg=__Heth}', "");
Expect(1, 1818, '\P{^Is_Jg=__Heth}', "");
Expect(0, 1817, '\p{Is_Jg=__Heth}', "");
Expect(1, 1817, '\p{^Is_Jg=__Heth}', "");
Expect(1, 1817, '\P{Is_Jg=__Heth}', "");
Expect(0, 1817, '\P{^Is_Jg=__Heth}', "");
Error('\p{Joining_Group=- Teth/a/}');
Error('\P{Joining_Group=- Teth/a/}');
Expect(1, 1820, '\p{Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Joining_Group=teth}', "");
Expect(0, 1820, '\P{Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Joining_Group=teth}', "");
Expect(0, 1818, '\p{Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Joining_Group=teth}', "");
Expect(1, 1818, '\P{Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Joining_Group=teth}', "");
Expect(1, 1820, '\p{Joining_Group=	-Teth}', "");
Expect(0, 1820, '\p{^Joining_Group=	-Teth}', "");
Expect(0, 1820, '\P{Joining_Group=	-Teth}', "");
Expect(1, 1820, '\P{^Joining_Group=	-Teth}', "");
Expect(0, 1818, '\p{Joining_Group=	-Teth}', "");
Expect(1, 1818, '\p{^Joining_Group=	-Teth}', "");
Expect(1, 1818, '\P{Joining_Group=	-Teth}', "");
Expect(0, 1818, '\P{^Joining_Group=	-Teth}', "");
Error('\p{Jg=-TETH:=}');
Error('\P{Jg=-TETH:=}');
Expect(1, 1820, '\p{Jg=teth}', "");
Expect(0, 1820, '\p{^Jg=teth}', "");
Expect(0, 1820, '\P{Jg=teth}', "");
Expect(1, 1820, '\P{^Jg=teth}', "");
Expect(0, 1818, '\p{Jg=teth}', "");
Expect(1, 1818, '\p{^Jg=teth}', "");
Expect(1, 1818, '\P{Jg=teth}', "");
Expect(0, 1818, '\P{^Jg=teth}', "");
Expect(1, 1820, '\p{Jg=_-Teth}', "");
Expect(0, 1820, '\p{^Jg=_-Teth}', "");
Expect(0, 1820, '\P{Jg=_-Teth}', "");
Expect(1, 1820, '\P{^Jg=_-Teth}', "");
Expect(0, 1818, '\p{Jg=_-Teth}', "");
Expect(1, 1818, '\p{^Jg=_-Teth}', "");
Expect(1, 1818, '\P{Jg=_-Teth}', "");
Expect(0, 1818, '\P{^Jg=_-Teth}', "");
Error('\p{Is_Joining_Group=Teth:=}');
Error('\P{Is_Joining_Group=Teth:=}');
Expect(1, 1820, '\p{Is_Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Is_Joining_Group=teth}', "");
Expect(0, 1820, '\P{Is_Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Is_Joining_Group=teth}', "");
Expect(0, 1818, '\p{Is_Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Is_Joining_Group=teth}', "");
Expect(1, 1818, '\P{Is_Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Is_Joining_Group=teth}', "");
Expect(1, 1820, '\p{Is_Joining_Group=	_Teth}', "");
Expect(0, 1820, '\p{^Is_Joining_Group=	_Teth}', "");
Expect(0, 1820, '\P{Is_Joining_Group=	_Teth}', "");
Expect(1, 1820, '\P{^Is_Joining_Group=	_Teth}', "");
Expect(0, 1818, '\p{Is_Joining_Group=	_Teth}', "");
Expect(1, 1818, '\p{^Is_Joining_Group=	_Teth}', "");
Expect(1, 1818, '\P{Is_Joining_Group=	_Teth}', "");
Expect(0, 1818, '\P{^Is_Joining_Group=	_Teth}', "");
Error('\p{Is_Jg=/a/ _teth}');
Error('\P{Is_Jg=/a/ _teth}');
Expect(1, 1820, '\p{Is_Jg=teth}', "");
Expect(0, 1820, '\p{^Is_Jg=teth}', "");
Expect(0, 1820, '\P{Is_Jg=teth}', "");
Expect(1, 1820, '\P{^Is_Jg=teth}', "");
Expect(0, 1818, '\p{Is_Jg=teth}', "");
Expect(1, 1818, '\p{^Is_Jg=teth}', "");
Expect(1, 1818, '\P{Is_Jg=teth}', "");
Expect(0, 1818, '\P{^Is_Jg=teth}', "");
Expect(1, 1820, '\p{Is_Jg=-_TETH}', "");
Expect(0, 1820, '\p{^Is_Jg=-_TETH}', "");
Expect(0, 1820, '\P{Is_Jg=-_TETH}', "");
Expect(1, 1820, '\P{^Is_Jg=-_TETH}', "");
Expect(0, 1818, '\p{Is_Jg=-_TETH}', "");
Expect(1, 1818, '\p{^Is_Jg=-_TETH}', "");
Expect(1, 1818, '\P{Is_Jg=-_TETH}', "");
Expect(0, 1818, '\P{^Is_Jg=-_TETH}', "");
Error('\p{Joining_Group= DALATH:=Rish}');
Error('\P{Joining_Group= DALATH:=Rish}');
Expect(1, 1814, '\p{Joining_Group=dalathrish}', "");
Expect(0, 1814, '\p{^Joining_Group=dalathrish}', "");
Expect(0, 1814, '\P{Joining_Group=dalathrish}', "");
Expect(1, 1814, '\P{^Joining_Group=dalathrish}', "");
Expect(0, 1812, '\p{Joining_Group=dalathrish}', "");
Expect(1, 1812, '\p{^Joining_Group=dalathrish}', "");
Expect(1, 1812, '\P{Joining_Group=dalathrish}', "");
Expect(0, 1812, '\P{^Joining_Group=dalathrish}', "");
Expect(1, 1814, '\p{Joining_Group=	DALATH_rish}', "");
Expect(0, 1814, '\p{^Joining_Group=	DALATH_rish}', "");
Expect(0, 1814, '\P{Joining_Group=	DALATH_rish}', "");
Expect(1, 1814, '\P{^Joining_Group=	DALATH_rish}', "");
Expect(0, 1812, '\p{Joining_Group=	DALATH_rish}', "");
Expect(1, 1812, '\p{^Joining_Group=	DALATH_rish}', "");
Expect(1, 1812, '\P{Joining_Group=	DALATH_rish}', "");
Expect(0, 1812, '\P{^Joining_Group=	DALATH_rish}', "");
Error('\p{Jg=	_DALATH/a/rish}');
Error('\P{Jg=	_DALATH/a/rish}');
Expect(1, 1814, '\p{Jg=dalathrish}', "");
Expect(0, 1814, '\p{^Jg=dalathrish}', "");
Expect(0, 1814, '\P{Jg=dalathrish}', "");
Expect(1, 1814, '\P{^Jg=dalathrish}', "");
Expect(0, 1812, '\p{Jg=dalathrish}', "");
Expect(1, 1812, '\p{^Jg=dalathrish}', "");
Expect(1, 1812, '\P{Jg=dalathrish}', "");
Expect(0, 1812, '\P{^Jg=dalathrish}', "");
Expect(1, 1814, '\p{Jg=	-DalathRish}', "");
Expect(0, 1814, '\p{^Jg=	-DalathRish}', "");
Expect(0, 1814, '\P{Jg=	-DalathRish}', "");
Expect(1, 1814, '\P{^Jg=	-DalathRish}', "");
Expect(0, 1812, '\p{Jg=	-DalathRish}', "");
Expect(1, 1812, '\p{^Jg=	-DalathRish}', "");
Expect(1, 1812, '\P{Jg=	-DalathRish}', "");
Expect(0, 1812, '\P{^Jg=	-DalathRish}', "");
Error('\p{Is_Joining_Group=_Dalath/a/RISH}');
Error('\P{Is_Joining_Group=_Dalath/a/RISH}');
Expect(1, 1814, '\p{Is_Joining_Group=dalathrish}', "");
Expect(0, 1814, '\p{^Is_Joining_Group=dalathrish}', "");
Expect(0, 1814, '\P{Is_Joining_Group=dalathrish}', "");
Expect(1, 1814, '\P{^Is_Joining_Group=dalathrish}', "");
Expect(0, 1812, '\p{Is_Joining_Group=dalathrish}', "");
Expect(1, 1812, '\p{^Is_Joining_Group=dalathrish}', "");
Expect(1, 1812, '\P{Is_Joining_Group=dalathrish}', "");
Expect(0, 1812, '\P{^Is_Joining_Group=dalathrish}', "");
Expect(1, 1814, '\p{Is_Joining_Group= 	dalath	rish}', "");
Expect(0, 1814, '\p{^Is_Joining_Group= 	dalath	rish}', "");
Expect(0, 1814, '\P{Is_Joining_Group= 	dalath	rish}', "");
Expect(1, 1814, '\P{^Is_Joining_Group= 	dalath	rish}', "");
Expect(0, 1812, '\p{Is_Joining_Group= 	dalath	rish}', "");
Expect(1, 1812, '\p{^Is_Joining_Group= 	dalath	rish}', "");
Expect(1, 1812, '\P{Is_Joining_Group= 	dalath	rish}', "");
Expect(0, 1812, '\P{^Is_Joining_Group= 	dalath	rish}', "");
Error('\p{Is_Jg=/a/Dalath-Rish}');
Error('\P{Is_Jg=/a/Dalath-Rish}');
Expect(1, 1814, '\p{Is_Jg=dalathrish}', "");
Expect(0, 1814, '\p{^Is_Jg=dalathrish}', "");
Expect(0, 1814, '\P{Is_Jg=dalathrish}', "");
Expect(1, 1814, '\P{^Is_Jg=dalathrish}', "");
Expect(0, 1812, '\p{Is_Jg=dalathrish}', "");
Expect(1, 1812, '\p{^Is_Jg=dalathrish}', "");
Expect(1, 1812, '\P{Is_Jg=dalathrish}', "");
Expect(0, 1812, '\P{^Is_Jg=dalathrish}', "");
Expect(1, 1814, '\p{Is_Jg:  _DALATH RISH}', "");
Expect(0, 1814, '\p{^Is_Jg:  _DALATH RISH}', "");
Expect(0, 1814, '\P{Is_Jg:  _DALATH RISH}', "");
Expect(1, 1814, '\P{^Is_Jg:  _DALATH RISH}', "");
Expect(0, 1812, '\p{Is_Jg:  _DALATH RISH}', "");
Expect(1, 1812, '\p{^Is_Jg:  _DALATH RISH}', "");
Expect(1, 1812, '\P{Is_Jg:  _DALATH RISH}', "");
Expect(0, 1812, '\P{^Is_Jg:  _DALATH RISH}', "");
Error('\p{Joining_Group=-/a/YUDH He}');
Error('\P{Joining_Group=-/a/YUDH He}');
Expect(1, 1822, '\p{Joining_Group:   yudhhe}', "");
Expect(0, 1822, '\p{^Joining_Group:   yudhhe}', "");
Expect(0, 1822, '\P{Joining_Group:   yudhhe}', "");
Expect(1, 1822, '\P{^Joining_Group:   yudhhe}', "");
Expect(0, 1821, '\p{Joining_Group:   yudhhe}', "");
Expect(1, 1821, '\p{^Joining_Group:   yudhhe}', "");
Expect(1, 1821, '\P{Joining_Group:   yudhhe}', "");
Expect(0, 1821, '\P{^Joining_Group:   yudhhe}', "");
Expect(1, 1822, '\p{Joining_Group= _Yudh He}', "");
Expect(0, 1822, '\p{^Joining_Group= _Yudh He}', "");
Expect(0, 1822, '\P{Joining_Group= _Yudh He}', "");
Expect(1, 1822, '\P{^Joining_Group= _Yudh He}', "");
Expect(0, 1821, '\p{Joining_Group= _Yudh He}', "");
Expect(1, 1821, '\p{^Joining_Group= _Yudh He}', "");
Expect(1, 1821, '\P{Joining_Group= _Yudh He}', "");
Expect(0, 1821, '\P{^Joining_Group= _Yudh He}', "");
Error('\p{Jg= Yudh_he/a/}');
Error('\P{Jg= Yudh_he/a/}');
Expect(1, 1822, '\p{Jg=yudhhe}', "");
Expect(0, 1822, '\p{^Jg=yudhhe}', "");
Expect(0, 1822, '\P{Jg=yudhhe}', "");
Expect(1, 1822, '\P{^Jg=yudhhe}', "");
Expect(0, 1821, '\p{Jg=yudhhe}', "");
Expect(1, 1821, '\p{^Jg=yudhhe}', "");
Expect(1, 1821, '\P{Jg=yudhhe}', "");
Expect(0, 1821, '\P{^Jg=yudhhe}', "");
Expect(1, 1822, '\p{Jg= Yudh he}', "");
Expect(0, 1822, '\p{^Jg= Yudh he}', "");
Expect(0, 1822, '\P{Jg= Yudh he}', "");
Expect(1, 1822, '\P{^Jg= Yudh he}', "");
Expect(0, 1821, '\p{Jg= Yudh he}', "");
Expect(1, 1821, '\p{^Jg= Yudh he}', "");
Expect(1, 1821, '\P{Jg= Yudh he}', "");
Expect(0, 1821, '\P{^Jg= Yudh he}', "");
Error('\p{Is_Joining_Group=-_YudhHe:=}');
Error('\P{Is_Joining_Group=-_YudhHe:=}');
Expect(1, 1822, '\p{Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\P{Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\p{Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\P{Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\p{Is_Joining_Group=_ Yudh he}', "");
Expect(0, 1822, '\p{^Is_Joining_Group=_ Yudh he}', "");
Expect(0, 1822, '\P{Is_Joining_Group=_ Yudh he}', "");
Expect(1, 1822, '\P{^Is_Joining_Group=_ Yudh he}', "");
Expect(0, 1821, '\p{Is_Joining_Group=_ Yudh he}', "");
Expect(1, 1821, '\p{^Is_Joining_Group=_ Yudh he}', "");
Expect(1, 1821, '\P{Is_Joining_Group=_ Yudh he}', "");
Expect(0, 1821, '\P{^Is_Joining_Group=_ Yudh he}', "");
Error('\p{Is_Jg=-	Yudh_he:=}');
Error('\P{Is_Jg=-	Yudh_he:=}');
Expect(1, 1822, '\p{Is_Jg=yudhhe}', "");
Expect(0, 1822, '\p{^Is_Jg=yudhhe}', "");
Expect(0, 1822, '\P{Is_Jg=yudhhe}', "");
Expect(1, 1822, '\P{^Is_Jg=yudhhe}', "");
Expect(0, 1821, '\p{Is_Jg=yudhhe}', "");
Expect(1, 1821, '\p{^Is_Jg=yudhhe}', "");
Expect(1, 1821, '\P{Is_Jg=yudhhe}', "");
Expect(0, 1821, '\P{^Is_Jg=yudhhe}', "");
Expect(1, 1822, '\p{Is_Jg: Yudh-He}', "");
Expect(0, 1822, '\p{^Is_Jg: Yudh-He}', "");
Expect(0, 1822, '\P{Is_Jg: Yudh-He}', "");
Expect(1, 1822, '\P{^Is_Jg: Yudh-He}', "");
Expect(0, 1821, '\p{Is_Jg: Yudh-He}', "");
Expect(1, 1821, '\p{^Is_Jg: Yudh-He}', "");
Expect(1, 1821, '\P{Is_Jg: Yudh-He}', "");
Expect(0, 1821, '\P{^Is_Jg: Yudh-He}', "");
Error('\p{Joining_Group=/a/--Noon}');
Error('\P{Joining_Group=/a/--Noon}');
Expect(1, 1606, '\p{Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Joining_Group=noon}', "");
Expect(0, 1606, '\P{Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Joining_Group=noon}', "");
Expect(0, 1605, '\p{Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Joining_Group=noon}', "");
Expect(1, 1605, '\P{Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Joining_Group=noon}', "");
Expect(1, 1606, '\p{Joining_Group=-_NOON}', "");
Expect(0, 1606, '\p{^Joining_Group=-_NOON}', "");
Expect(0, 1606, '\P{Joining_Group=-_NOON}', "");
Expect(1, 1606, '\P{^Joining_Group=-_NOON}', "");
Expect(0, 1605, '\p{Joining_Group=-_NOON}', "");
Expect(1, 1605, '\p{^Joining_Group=-_NOON}', "");
Expect(1, 1605, '\P{Joining_Group=-_NOON}', "");
Expect(0, 1605, '\P{^Joining_Group=-_NOON}', "");
Error('\p{Jg=- Noon/a/}');
Error('\P{Jg=- Noon/a/}');
Expect(1, 1606, '\p{Jg=noon}', "");
Expect(0, 1606, '\p{^Jg=noon}', "");
Expect(0, 1606, '\P{Jg=noon}', "");
Expect(1, 1606, '\P{^Jg=noon}', "");
Expect(0, 1605, '\p{Jg=noon}', "");
Expect(1, 1605, '\p{^Jg=noon}', "");
Expect(1, 1605, '\P{Jg=noon}', "");
Expect(0, 1605, '\P{^Jg=noon}', "");
Expect(1, 1606, '\p{Jg=	_noon}', "");
Expect(0, 1606, '\p{^Jg=	_noon}', "");
Expect(0, 1606, '\P{Jg=	_noon}', "");
Expect(1, 1606, '\P{^Jg=	_noon}', "");
Expect(0, 1605, '\p{Jg=	_noon}', "");
Expect(1, 1605, '\p{^Jg=	_noon}', "");
Expect(1, 1605, '\P{Jg=	_noon}', "");
Expect(0, 1605, '\P{^Jg=	_noon}', "");
Error('\p{Is_Joining_Group=/a/	Noon}');
Error('\P{Is_Joining_Group=/a/	Noon}');
Expect(1, 1606, '\p{Is_Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=noon}', "");
Expect(0, 1606, '\P{Is_Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=noon}', "");
Expect(0, 1605, '\p{Is_Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=noon}', "");
Expect(1, 1605, '\P{Is_Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=noon}', "");
Expect(1, 1606, '\p{Is_Joining_Group=-noon}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=-noon}', "");
Expect(0, 1606, '\P{Is_Joining_Group=-noon}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=-noon}', "");
Expect(0, 1605, '\p{Is_Joining_Group=-noon}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=-noon}', "");
Expect(1, 1605, '\P{Is_Joining_Group=-noon}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=-noon}', "");
Error('\p{Is_Jg:   /a/--NOON}');
Error('\P{Is_Jg:   /a/--NOON}');
Expect(1, 1606, '\p{Is_Jg=noon}', "");
Expect(0, 1606, '\p{^Is_Jg=noon}', "");
Expect(0, 1606, '\P{Is_Jg=noon}', "");
Expect(1, 1606, '\P{^Is_Jg=noon}', "");
Expect(0, 1605, '\p{Is_Jg=noon}', "");
Expect(1, 1605, '\p{^Is_Jg=noon}', "");
Expect(1, 1605, '\P{Is_Jg=noon}', "");
Expect(0, 1605, '\P{^Is_Jg=noon}', "");
Expect(1, 1606, '\p{Is_Jg= 	NOON}', "");
Expect(0, 1606, '\p{^Is_Jg= 	NOON}', "");
Expect(0, 1606, '\P{Is_Jg= 	NOON}', "");
Expect(1, 1606, '\P{^Is_Jg= 	NOON}', "");
Expect(0, 1605, '\p{Is_Jg= 	NOON}', "");
Expect(1, 1605, '\p{^Is_Jg= 	NOON}', "");
Expect(1, 1605, '\P{Is_Jg= 	NOON}', "");
Expect(0, 1605, '\P{^Is_Jg= 	NOON}', "");
Error('\p{Joining_Group=-	Mim/a/}');
Error('\P{Joining_Group=-	Mim/a/}');
Expect(1, 1825, '\p{Joining_Group=mim}', "");
Expect(0, 1825, '\p{^Joining_Group=mim}', "");
Expect(0, 1825, '\P{Joining_Group=mim}', "");
Expect(1, 1825, '\P{^Joining_Group=mim}', "");
Expect(0, 1824, '\p{Joining_Group=mim}', "");
Expect(1, 1824, '\p{^Joining_Group=mim}', "");
Expect(1, 1824, '\P{Joining_Group=mim}', "");
Expect(0, 1824, '\P{^Joining_Group=mim}', "");
Expect(1, 1825, '\p{Joining_Group=-	MIM}', "");
Expect(0, 1825, '\p{^Joining_Group=-	MIM}', "");
Expect(0, 1825, '\P{Joining_Group=-	MIM}', "");
Expect(1, 1825, '\P{^Joining_Group=-	MIM}', "");
Expect(0, 1824, '\p{Joining_Group=-	MIM}', "");
Expect(1, 1824, '\p{^Joining_Group=-	MIM}', "");
Expect(1, 1824, '\P{Joining_Group=-	MIM}', "");
Expect(0, 1824, '\P{^Joining_Group=-	MIM}', "");
Error('\p{Jg=:= MIM}');
Error('\P{Jg=:= MIM}');
Expect(1, 1825, '\p{Jg=mim}', "");
Expect(0, 1825, '\p{^Jg=mim}', "");
Expect(0, 1825, '\P{Jg=mim}', "");
Expect(1, 1825, '\P{^Jg=mim}', "");
Expect(0, 1824, '\p{Jg=mim}', "");
Expect(1, 1824, '\p{^Jg=mim}', "");
Expect(1, 1824, '\P{Jg=mim}', "");
Expect(0, 1824, '\P{^Jg=mim}', "");
Expect(1, 1825, '\p{Jg= 	MIM}', "");
Expect(0, 1825, '\p{^Jg= 	MIM}', "");
Expect(0, 1825, '\P{Jg= 	MIM}', "");
Expect(1, 1825, '\P{^Jg= 	MIM}', "");
Expect(0, 1824, '\p{Jg= 	MIM}', "");
Expect(1, 1824, '\p{^Jg= 	MIM}', "");
Expect(1, 1824, '\P{Jg= 	MIM}', "");
Expect(0, 1824, '\P{^Jg= 	MIM}', "");
Error('\p{Is_Joining_Group=	/a/Mim}');
Error('\P{Is_Joining_Group=	/a/Mim}');
Expect(1, 1825, '\p{Is_Joining_Group=mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group=mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group=mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group=mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group=mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group=mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group=mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group=mim}', "");
Expect(1, 1825, '\p{Is_Joining_Group=_ Mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group=_ Mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group=_ Mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group=_ Mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group=_ Mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group=_ Mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group=_ Mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group=_ Mim}', "");
Error('\p{Is_Jg=/a/	_mim}');
Error('\P{Is_Jg=/a/	_mim}');
Expect(1, 1825, '\p{Is_Jg=mim}', "");
Expect(0, 1825, '\p{^Is_Jg=mim}', "");
Expect(0, 1825, '\P{Is_Jg=mim}', "");
Expect(1, 1825, '\P{^Is_Jg=mim}', "");
Expect(0, 1824, '\p{Is_Jg=mim}', "");
Expect(1, 1824, '\p{^Is_Jg=mim}', "");
Expect(1, 1824, '\P{Is_Jg=mim}', "");
Expect(0, 1824, '\P{^Is_Jg=mim}', "");
Expect(1, 1825, '\p{Is_Jg=_	Mim}', "");
Expect(0, 1825, '\p{^Is_Jg=_	Mim}', "");
Expect(0, 1825, '\P{Is_Jg=_	Mim}', "");
Expect(1, 1825, '\P{^Is_Jg=_	Mim}', "");
Expect(0, 1824, '\p{Is_Jg=_	Mim}', "");
Expect(1, 1824, '\p{^Is_Jg=_	Mim}', "");
Expect(1, 1824, '\P{Is_Jg=_	Mim}', "");
Expect(0, 1824, '\P{^Is_Jg=_	Mim}', "");
Error('\p{Joining_Group=/a/ Heh_goal}');
Error('\P{Joining_Group=/a/ Heh_goal}');
Expect(1, 1730, '\p{Joining_Group:	hehgoal}', "");
Expect(0, 1730, '\p{^Joining_Group:	hehgoal}', "");
Expect(0, 1730, '\P{Joining_Group:	hehgoal}', "");
Expect(1, 1730, '\P{^Joining_Group:	hehgoal}', "");
Expect(0, 1728, '\p{Joining_Group:	hehgoal}', "");
Expect(1, 1728, '\p{^Joining_Group:	hehgoal}', "");
Expect(1, 1728, '\P{Joining_Group:	hehgoal}', "");
Expect(0, 1728, '\P{^Joining_Group:	hehgoal}', "");
Expect(1, 1730, '\p{Joining_Group= HEH	GOAL}', "");
Expect(0, 1730, '\p{^Joining_Group= HEH	GOAL}', "");
Expect(0, 1730, '\P{Joining_Group= HEH	GOAL}', "");
Expect(1, 1730, '\P{^Joining_Group= HEH	GOAL}', "");
Expect(0, 1728, '\p{Joining_Group= HEH	GOAL}', "");
Expect(1, 1728, '\p{^Joining_Group= HEH	GOAL}', "");
Expect(1, 1728, '\P{Joining_Group= HEH	GOAL}', "");
Expect(0, 1728, '\P{^Joining_Group= HEH	GOAL}', "");
Error('\p{Jg:-_heh:=Goal}');
Error('\P{Jg:-_heh:=Goal}');
Expect(1, 1730, '\p{Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Jg=hehgoal}', "");
Expect(0, 1730, '\P{Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Jg=hehgoal}', "");
Expect(0, 1728, '\p{Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Jg=hehgoal}', "");
Expect(1, 1728, '\P{Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Jg=hehgoal}', "");
Expect(1, 1730, '\p{Jg= -HEH_goal}', "");
Expect(0, 1730, '\p{^Jg= -HEH_goal}', "");
Expect(0, 1730, '\P{Jg= -HEH_goal}', "");
Expect(1, 1730, '\P{^Jg= -HEH_goal}', "");
Expect(0, 1728, '\p{Jg= -HEH_goal}', "");
Expect(1, 1728, '\p{^Jg= -HEH_goal}', "");
Expect(1, 1728, '\P{Jg= -HEH_goal}', "");
Expect(0, 1728, '\P{^Jg= -HEH_goal}', "");
Error('\p{Is_Joining_Group=-	heh	Goal/a/}');
Error('\P{Is_Joining_Group=-	heh	Goal/a/}');
Expect(1, 1730, '\p{Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\P{Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\p{Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\P{Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\p{Is_Joining_Group:HehGoal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group:HehGoal}', "");
Expect(0, 1730, '\P{Is_Joining_Group:HehGoal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group:HehGoal}', "");
Expect(0, 1728, '\p{Is_Joining_Group:HehGoal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group:HehGoal}', "");
Expect(1, 1728, '\P{Is_Joining_Group:HehGoal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group:HehGoal}', "");
Error('\p{Is_Jg= :=HEHGOAL}');
Error('\P{Is_Jg= :=HEHGOAL}');
Expect(1, 1730, '\p{Is_Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Jg=hehgoal}', "");
Expect(0, 1730, '\P{Is_Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Jg=hehgoal}', "");
Expect(0, 1728, '\p{Is_Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Jg=hehgoal}', "");
Expect(1, 1728, '\P{Is_Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Jg=hehgoal}', "");
Expect(1, 1730, '\p{Is_Jg=	-HEH	GOAL}', "");
Expect(0, 1730, '\p{^Is_Jg=	-HEH	GOAL}', "");
Expect(0, 1730, '\P{Is_Jg=	-HEH	GOAL}', "");
Expect(1, 1730, '\P{^Is_Jg=	-HEH	GOAL}', "");
Expect(0, 1728, '\p{Is_Jg=	-HEH	GOAL}', "");
Expect(1, 1728, '\p{^Is_Jg=	-HEH	GOAL}', "");
Expect(1, 1728, '\P{Is_Jg=	-HEH	GOAL}', "");
Expect(0, 1728, '\P{^Is_Jg=	-HEH	GOAL}', "");
Error('\p{Joining_Group=	Khaph/a/}');
Error('\P{Joining_Group=	Khaph/a/}');
Expect(1, 1870, '\p{Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Joining_Group=	khaph}', "");
Expect(0, 1870, '\p{^Joining_Group=	khaph}', "");
Expect(0, 1870, '\P{Joining_Group=	khaph}', "");
Expect(1, 1870, '\P{^Joining_Group=	khaph}', "");
Expect(0, 1869, '\p{Joining_Group=	khaph}', "");
Expect(1, 1869, '\p{^Joining_Group=	khaph}', "");
Expect(1, 1869, '\P{Joining_Group=	khaph}', "");
Expect(0, 1869, '\P{^Joining_Group=	khaph}', "");
Error('\p{Jg=:=  Khaph}');
Error('\P{Jg=:=  Khaph}');
Expect(1, 1870, '\p{Jg=khaph}', "");
Expect(0, 1870, '\p{^Jg=khaph}', "");
Expect(0, 1870, '\P{Jg=khaph}', "");
Expect(1, 1870, '\P{^Jg=khaph}', "");
Expect(0, 1869, '\p{Jg=khaph}', "");
Expect(1, 1869, '\p{^Jg=khaph}', "");
Expect(1, 1869, '\P{Jg=khaph}', "");
Expect(0, 1869, '\P{^Jg=khaph}', "");
Expect(1, 1870, '\p{Jg=-	KHAPH}', "");
Expect(0, 1870, '\p{^Jg=-	KHAPH}', "");
Expect(0, 1870, '\P{Jg=-	KHAPH}', "");
Expect(1, 1870, '\P{^Jg=-	KHAPH}', "");
Expect(0, 1869, '\p{Jg=-	KHAPH}', "");
Expect(1, 1869, '\p{^Jg=-	KHAPH}', "");
Expect(1, 1869, '\P{Jg=-	KHAPH}', "");
Expect(0, 1869, '\P{^Jg=-	KHAPH}', "");
Error('\p{Is_Joining_Group=_:=Khaph}');
Error('\P{Is_Joining_Group=_:=Khaph}');
Expect(1, 1870, '\p{Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Is_Joining_Group= _KHAPH}', "");
Expect(0, 1870, '\p{^Is_Joining_Group= _KHAPH}', "");
Expect(0, 1870, '\P{Is_Joining_Group= _KHAPH}', "");
Expect(1, 1870, '\P{^Is_Joining_Group= _KHAPH}', "");
Expect(0, 1869, '\p{Is_Joining_Group= _KHAPH}', "");
Expect(1, 1869, '\p{^Is_Joining_Group= _KHAPH}', "");
Expect(1, 1869, '\P{Is_Joining_Group= _KHAPH}', "");
Expect(0, 1869, '\P{^Is_Joining_Group= _KHAPH}', "");
Error('\p{Is_Jg=	KHAPH/a/}');
Error('\P{Is_Jg=	KHAPH/a/}');
Expect(1, 1870, '\p{Is_Jg=khaph}', "");
Expect(0, 1870, '\p{^Is_Jg=khaph}', "");
Expect(0, 1870, '\P{Is_Jg=khaph}', "");
Expect(1, 1870, '\P{^Is_Jg=khaph}', "");
Expect(0, 1869, '\p{Is_Jg=khaph}', "");
Expect(1, 1869, '\p{^Is_Jg=khaph}', "");
Expect(1, 1869, '\P{Is_Jg=khaph}', "");
Expect(0, 1869, '\P{^Is_Jg=khaph}', "");
Expect(1, 1870, '\p{Is_Jg:   	khaph}', "");
Expect(0, 1870, '\p{^Is_Jg:   	khaph}', "");
Expect(0, 1870, '\P{Is_Jg:   	khaph}', "");
Expect(1, 1870, '\P{^Is_Jg:   	khaph}', "");
Expect(0, 1869, '\p{Is_Jg:   	khaph}', "");
Expect(1, 1869, '\p{^Is_Jg:   	khaph}', "");
Expect(1, 1869, '\P{Is_Jg:   	khaph}', "");
Expect(0, 1869, '\P{^Is_Jg:   	khaph}', "");
Error('\p{Joining_Group=/a/- Sad}');
Error('\P{Joining_Group=/a/- Sad}');
Expect(1, 1590, '\p{Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Joining_Group=sad}', "");
Expect(0, 1590, '\P{Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Joining_Group=sad}', "");
Expect(0, 1588, '\p{Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Joining_Group=sad}', "");
Expect(1, 1588, '\P{Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Joining_Group=sad}', "");
Expect(1, 1590, '\p{Joining_Group=-	Sad}', "");
Expect(0, 1590, '\p{^Joining_Group=-	Sad}', "");
Expect(0, 1590, '\P{Joining_Group=-	Sad}', "");
Expect(1, 1590, '\P{^Joining_Group=-	Sad}', "");
Expect(0, 1588, '\p{Joining_Group=-	Sad}', "");
Expect(1, 1588, '\p{^Joining_Group=-	Sad}', "");
Expect(1, 1588, '\P{Joining_Group=-	Sad}', "");
Expect(0, 1588, '\P{^Joining_Group=-	Sad}', "");
Error('\p{Jg=/a/  Sad}');
Error('\P{Jg=/a/  Sad}');
Expect(1, 1590, '\p{Jg=sad}', "");
Expect(0, 1590, '\p{^Jg=sad}', "");
Expect(0, 1590, '\P{Jg=sad}', "");
Expect(1, 1590, '\P{^Jg=sad}', "");
Expect(0, 1588, '\p{Jg=sad}', "");
Expect(1, 1588, '\p{^Jg=sad}', "");
Expect(1, 1588, '\P{Jg=sad}', "");
Expect(0, 1588, '\P{^Jg=sad}', "");
Expect(1, 1590, '\p{Jg=-SAD}', "");
Expect(0, 1590, '\p{^Jg=-SAD}', "");
Expect(0, 1590, '\P{Jg=-SAD}', "");
Expect(1, 1590, '\P{^Jg=-SAD}', "");
Expect(0, 1588, '\p{Jg=-SAD}', "");
Expect(1, 1588, '\p{^Jg=-SAD}', "");
Expect(1, 1588, '\P{Jg=-SAD}', "");
Expect(0, 1588, '\P{^Jg=-SAD}', "");
Error('\p{Is_Joining_Group=	 SAD:=}');
Error('\P{Is_Joining_Group=	 SAD:=}');
Expect(1, 1590, '\p{Is_Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=sad}', "");
Expect(0, 1590, '\P{Is_Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=sad}', "");
Expect(0, 1588, '\p{Is_Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=sad}', "");
Expect(1, 1588, '\P{Is_Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=sad}', "");
Expect(1, 1590, '\p{Is_Joining_Group=	Sad}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=	Sad}', "");
Expect(0, 1590, '\P{Is_Joining_Group=	Sad}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=	Sad}', "");
Expect(0, 1588, '\p{Is_Joining_Group=	Sad}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=	Sad}', "");
Expect(1, 1588, '\P{Is_Joining_Group=	Sad}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=	Sad}', "");
Error('\p{Is_Jg=	SAD:=}');
Error('\P{Is_Jg=	SAD:=}');
Expect(1, 1590, '\p{Is_Jg=sad}', "");
Expect(0, 1590, '\p{^Is_Jg=sad}', "");
Expect(0, 1590, '\P{Is_Jg=sad}', "");
Expect(1, 1590, '\P{^Is_Jg=sad}', "");
Expect(0, 1588, '\p{Is_Jg=sad}', "");
Expect(1, 1588, '\p{^Is_Jg=sad}', "");
Expect(1, 1588, '\P{Is_Jg=sad}', "");
Expect(0, 1588, '\P{^Is_Jg=sad}', "");
Expect(1, 1590, '\p{Is_Jg:    SAD}', "");
Expect(0, 1590, '\p{^Is_Jg:    SAD}', "");
Expect(0, 1590, '\P{Is_Jg:    SAD}', "");
Expect(1, 1590, '\P{^Is_Jg:    SAD}', "");
Expect(0, 1588, '\p{Is_Jg:    SAD}', "");
Expect(1, 1588, '\p{^Is_Jg:    SAD}', "");
Expect(1, 1588, '\P{Is_Jg:    SAD}', "");
Expect(0, 1588, '\P{^Is_Jg:    SAD}', "");
Error('\p{Joining_Group=/a/	 qaf}');
Error('\P{Joining_Group=/a/	 qaf}');
Expect(1, 1602, '\p{Joining_Group=qaf}', "");
Expect(0, 1602, '\p{^Joining_Group=qaf}', "");
Expect(0, 1602, '\P{Joining_Group=qaf}', "");
Expect(1, 1602, '\P{^Joining_Group=qaf}', "");
Expect(0, 1601, '\p{Joining_Group=qaf}', "");
Expect(1, 1601, '\p{^Joining_Group=qaf}', "");
Expect(1, 1601, '\P{Joining_Group=qaf}', "");
Expect(0, 1601, '\P{^Joining_Group=qaf}', "");
Expect(1, 1602, '\p{Joining_Group=  qaf}', "");
Expect(0, 1602, '\p{^Joining_Group=  qaf}', "");
Expect(0, 1602, '\P{Joining_Group=  qaf}', "");
Expect(1, 1602, '\P{^Joining_Group=  qaf}', "");
Expect(0, 1601, '\p{Joining_Group=  qaf}', "");
Expect(1, 1601, '\p{^Joining_Group=  qaf}', "");
Expect(1, 1601, '\P{Joining_Group=  qaf}', "");
Expect(0, 1601, '\P{^Joining_Group=  qaf}', "");
Error('\p{Jg=:= _Qaf}');
Error('\P{Jg=:= _Qaf}');
Expect(1, 1602, '\p{Jg=qaf}', "");
Expect(0, 1602, '\p{^Jg=qaf}', "");
Expect(0, 1602, '\P{Jg=qaf}', "");
Expect(1, 1602, '\P{^Jg=qaf}', "");
Expect(0, 1601, '\p{Jg=qaf}', "");
Expect(1, 1601, '\p{^Jg=qaf}', "");
Expect(1, 1601, '\P{Jg=qaf}', "");
Expect(0, 1601, '\P{^Jg=qaf}', "");
Expect(1, 1602, '\p{Jg=	 QAF}', "");
Expect(0, 1602, '\p{^Jg=	 QAF}', "");
Expect(0, 1602, '\P{Jg=	 QAF}', "");
Expect(1, 1602, '\P{^Jg=	 QAF}', "");
Expect(0, 1601, '\p{Jg=	 QAF}', "");
Expect(1, 1601, '\p{^Jg=	 QAF}', "");
Expect(1, 1601, '\P{Jg=	 QAF}', "");
Expect(0, 1601, '\P{^Jg=	 QAF}', "");
Error('\p{Is_Joining_Group=	:=Qaf}');
Error('\P{Is_Joining_Group=	:=Qaf}');
Expect(1, 1602, '\p{Is_Joining_Group=qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group=qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group=qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group=qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group=qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group=qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group=qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group=qaf}', "");
Expect(1, 1602, '\p{Is_Joining_Group=_Qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group=_Qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group=_Qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group=_Qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group=_Qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group=_Qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group=_Qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group=_Qaf}', "");
Error('\p{Is_Jg: 	Qaf:=}');
Error('\P{Is_Jg: 	Qaf:=}');
Expect(1, 1602, '\p{Is_Jg=qaf}', "");
Expect(0, 1602, '\p{^Is_Jg=qaf}', "");
Expect(0, 1602, '\P{Is_Jg=qaf}', "");
Expect(1, 1602, '\P{^Is_Jg=qaf}', "");
Expect(0, 1601, '\p{Is_Jg=qaf}', "");
Expect(1, 1601, '\p{^Is_Jg=qaf}', "");
Expect(1, 1601, '\P{Is_Jg=qaf}', "");
Expect(0, 1601, '\P{^Is_Jg=qaf}', "");
Expect(1, 1602, '\p{Is_Jg=QAF}', "");
Expect(0, 1602, '\p{^Is_Jg=QAF}', "");
Expect(0, 1602, '\P{Is_Jg=QAF}', "");
Expect(1, 1602, '\P{^Is_Jg=QAF}', "");
Expect(0, 1601, '\p{Is_Jg=QAF}', "");
Expect(1, 1601, '\p{^Is_Jg=QAF}', "");
Expect(1, 1601, '\P{Is_Jg=QAF}', "");
Expect(0, 1601, '\P{^Is_Jg=QAF}', "");
Error('\p{Joining_Group=/a/kaph}');
Error('\P{Joining_Group=/a/kaph}');
Expect(1, 1823, '\p{Joining_Group=kaph}', "");
Expect(0, 1823, '\p{^Joining_Group=kaph}', "");
Expect(0, 1823, '\P{Joining_Group=kaph}', "");
Expect(1, 1823, '\P{^Joining_Group=kaph}', "");
Expect(0, 1822, '\p{Joining_Group=kaph}', "");
Expect(1, 1822, '\p{^Joining_Group=kaph}', "");
Expect(1, 1822, '\P{Joining_Group=kaph}', "");
Expect(0, 1822, '\P{^Joining_Group=kaph}', "");
Expect(1, 1823, '\p{Joining_Group=	Kaph}', "");
Expect(0, 1823, '\p{^Joining_Group=	Kaph}', "");
Expect(0, 1823, '\P{Joining_Group=	Kaph}', "");
Expect(1, 1823, '\P{^Joining_Group=	Kaph}', "");
Expect(0, 1822, '\p{Joining_Group=	Kaph}', "");
Expect(1, 1822, '\p{^Joining_Group=	Kaph}', "");
Expect(1, 1822, '\P{Joining_Group=	Kaph}', "");
Expect(0, 1822, '\P{^Joining_Group=	Kaph}', "");
Error('\p{Jg:  -kaph/a/}');
Error('\P{Jg:  -kaph/a/}');
Expect(1, 1823, '\p{Jg:kaph}', "");
Expect(0, 1823, '\p{^Jg:kaph}', "");
Expect(0, 1823, '\P{Jg:kaph}', "");
Expect(1, 1823, '\P{^Jg:kaph}', "");
Expect(0, 1822, '\p{Jg:kaph}', "");
Expect(1, 1822, '\p{^Jg:kaph}', "");
Expect(1, 1822, '\P{Jg:kaph}', "");
Expect(0, 1822, '\P{^Jg:kaph}', "");
Expect(1, 1823, '\p{Jg=KAPH}', "");
Expect(0, 1823, '\p{^Jg=KAPH}', "");
Expect(0, 1823, '\P{Jg=KAPH}', "");
Expect(1, 1823, '\P{^Jg=KAPH}', "");
Expect(0, 1822, '\p{Jg=KAPH}', "");
Expect(1, 1822, '\p{^Jg=KAPH}', "");
Expect(1, 1822, '\P{Jg=KAPH}', "");
Expect(0, 1822, '\P{^Jg=KAPH}', "");
Error('\p{Is_Joining_Group= /a/Kaph}');
Error('\P{Is_Joining_Group= /a/Kaph}');
Expect(1, 1823, '\p{Is_Joining_Group: kaph}', "");
Expect(0, 1823, '\p{^Is_Joining_Group: kaph}', "");
Expect(0, 1823, '\P{Is_Joining_Group: kaph}', "");
Expect(1, 1823, '\P{^Is_Joining_Group: kaph}', "");
Expect(0, 1822, '\p{Is_Joining_Group: kaph}', "");
Expect(1, 1822, '\p{^Is_Joining_Group: kaph}', "");
Expect(1, 1822, '\P{Is_Joining_Group: kaph}', "");
Expect(0, 1822, '\P{^Is_Joining_Group: kaph}', "");
Expect(1, 1823, '\p{Is_Joining_Group:   Kaph}', "");
Expect(0, 1823, '\p{^Is_Joining_Group:   Kaph}', "");
Expect(0, 1823, '\P{Is_Joining_Group:   Kaph}', "");
Expect(1, 1823, '\P{^Is_Joining_Group:   Kaph}', "");
Expect(0, 1822, '\p{Is_Joining_Group:   Kaph}', "");
Expect(1, 1822, '\p{^Is_Joining_Group:   Kaph}', "");
Expect(1, 1822, '\P{Is_Joining_Group:   Kaph}', "");
Expect(0, 1822, '\P{^Is_Joining_Group:   Kaph}', "");
Error('\p{Is_Jg=:=__kaph}');
Error('\P{Is_Jg=:=__kaph}');
Expect(1, 1823, '\p{Is_Jg=kaph}', "");
Expect(0, 1823, '\p{^Is_Jg=kaph}', "");
Expect(0, 1823, '\P{Is_Jg=kaph}', "");
Expect(1, 1823, '\P{^Is_Jg=kaph}', "");
Expect(0, 1822, '\p{Is_Jg=kaph}', "");
Expect(1, 1822, '\p{^Is_Jg=kaph}', "");
Expect(1, 1822, '\P{Is_Jg=kaph}', "");
Expect(0, 1822, '\P{^Is_Jg=kaph}', "");
Expect(1, 1823, '\p{Is_Jg=_	KAPH}', "");
Expect(0, 1823, '\p{^Is_Jg=_	KAPH}', "");
Expect(0, 1823, '\P{Is_Jg=_	KAPH}', "");
Expect(1, 1823, '\P{^Is_Jg=_	KAPH}', "");
Expect(0, 1822, '\p{Is_Jg=_	KAPH}', "");
Expect(1, 1822, '\p{^Is_Jg=_	KAPH}', "");
Expect(1, 1822, '\P{Is_Jg=_	KAPH}', "");
Expect(0, 1822, '\P{^Is_Jg=_	KAPH}', "");
Error('\p{Joining_Group=:=__FEH}');
Error('\P{Joining_Group=:=__FEH}');
Expect(1, 1601, '\p{Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Joining_Group=feh}', "");
Expect(0, 1601, '\P{Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Joining_Group=feh}', "");
Expect(0, 1600, '\p{Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Joining_Group=feh}', "");
Expect(1, 1600, '\P{Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Joining_Group=feh}', "");
Expect(1, 1601, '\p{Joining_Group=_	FEH}', "");
Expect(0, 1601, '\p{^Joining_Group=_	FEH}', "");
Expect(0, 1601, '\P{Joining_Group=_	FEH}', "");
Expect(1, 1601, '\P{^Joining_Group=_	FEH}', "");
Expect(0, 1600, '\p{Joining_Group=_	FEH}', "");
Expect(1, 1600, '\p{^Joining_Group=_	FEH}', "");
Expect(1, 1600, '\P{Joining_Group=_	FEH}', "");
Expect(0, 1600, '\P{^Joining_Group=_	FEH}', "");
Error('\p{Jg= :=Feh}');
Error('\P{Jg= :=Feh}');
Expect(1, 1601, '\p{Jg:feh}', "");
Expect(0, 1601, '\p{^Jg:feh}', "");
Expect(0, 1601, '\P{Jg:feh}', "");
Expect(1, 1601, '\P{^Jg:feh}', "");
Expect(0, 1600, '\p{Jg:feh}', "");
Expect(1, 1600, '\p{^Jg:feh}', "");
Expect(1, 1600, '\P{Jg:feh}', "");
Expect(0, 1600, '\P{^Jg:feh}', "");
Expect(1, 1601, '\p{Jg=_	Feh}', "");
Expect(0, 1601, '\p{^Jg=_	Feh}', "");
Expect(0, 1601, '\P{Jg=_	Feh}', "");
Expect(1, 1601, '\P{^Jg=_	Feh}', "");
Expect(0, 1600, '\p{Jg=_	Feh}', "");
Expect(1, 1600, '\p{^Jg=_	Feh}', "");
Expect(1, 1600, '\P{Jg=_	Feh}', "");
Expect(0, 1600, '\P{^Jg=_	Feh}', "");
Error('\p{Is_Joining_Group=/a/	feh}');
Error('\P{Is_Joining_Group=/a/	feh}');
Expect(1, 1601, '\p{Is_Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=feh}', "");
Expect(1, 1601, '\p{Is_Joining_Group=_	Feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=_	Feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=_	Feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=_	Feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=_	Feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=_	Feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=_	Feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=_	Feh}', "");
Error('\p{Is_Jg=:=FEH}');
Error('\P{Is_Jg=:=FEH}');
Expect(1, 1601, '\p{Is_Jg:	feh}', "");
Expect(0, 1601, '\p{^Is_Jg:	feh}', "");
Expect(0, 1601, '\P{Is_Jg:	feh}', "");
Expect(1, 1601, '\P{^Is_Jg:	feh}', "");
Expect(0, 1600, '\p{Is_Jg:	feh}', "");
Expect(1, 1600, '\p{^Is_Jg:	feh}', "");
Expect(1, 1600, '\P{Is_Jg:	feh}', "");
Expect(0, 1600, '\P{^Is_Jg:	feh}', "");
Expect(1, 1601, '\p{Is_Jg=	-feh}', "");
Expect(0, 1601, '\p{^Is_Jg=	-feh}', "");
Expect(0, 1601, '\P{Is_Jg=	-feh}', "");
Expect(1, 1601, '\P{^Is_Jg=	-feh}', "");
Expect(0, 1600, '\p{Is_Jg=	-feh}', "");
Expect(1, 1600, '\p{^Is_Jg=	-feh}', "");
Expect(1, 1600, '\P{Is_Jg=	-feh}', "");
Expect(0, 1600, '\P{^Is_Jg=	-feh}', "");
Error('\p{Joining_Group=-:=Farsi_YEH}');
Error('\P{Joining_Group=-:=Farsi_YEH}');
Expect(1, 1599, '\p{Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Joining_Group= -Farsi	Yeh}', "");
Expect(0, 1599, '\p{^Joining_Group= -Farsi	Yeh}', "");
Expect(0, 1599, '\P{Joining_Group= -Farsi	Yeh}', "");
Expect(1, 1599, '\P{^Joining_Group= -Farsi	Yeh}', "");
Expect(0, 1596, '\p{Joining_Group= -Farsi	Yeh}', "");
Expect(1, 1596, '\p{^Joining_Group= -Farsi	Yeh}', "");
Expect(1, 1596, '\P{Joining_Group= -Farsi	Yeh}', "");
Expect(0, 1596, '\P{^Joining_Group= -Farsi	Yeh}', "");
Error('\p{Jg= 	Farsi_YEH:=}');
Error('\P{Jg= 	Farsi_YEH:=}');
Expect(1, 1599, '\p{Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Jg=Farsi-Yeh}', "");
Expect(0, 1599, '\p{^Jg=Farsi-Yeh}', "");
Expect(0, 1599, '\P{Jg=Farsi-Yeh}', "");
Expect(1, 1599, '\P{^Jg=Farsi-Yeh}', "");
Expect(0, 1596, '\p{Jg=Farsi-Yeh}', "");
Expect(1, 1596, '\p{^Jg=Farsi-Yeh}', "");
Expect(1, 1596, '\P{Jg=Farsi-Yeh}', "");
Expect(0, 1596, '\P{^Jg=Farsi-Yeh}', "");
Error('\p{Is_Joining_Group: 	-Farsi:=YEH}');
Error('\P{Is_Joining_Group: 	-Farsi:=YEH}');
Expect(1, 1599, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Joining_Group=	FARSI_YEH}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=	FARSI_YEH}', "");
Expect(0, 1599, '\P{Is_Joining_Group=	FARSI_YEH}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=	FARSI_YEH}', "");
Expect(0, 1596, '\p{Is_Joining_Group=	FARSI_YEH}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=	FARSI_YEH}', "");
Expect(1, 1596, '\P{Is_Joining_Group=	FARSI_YEH}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=	FARSI_YEH}', "");
Error('\p{Is_Jg= 	Farsi:=Yeh}');
Error('\P{Is_Jg= 	Farsi:=Yeh}');
Expect(1, 1599, '\p{Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Jg=_	farsi	yeh}', "");
Expect(0, 1599, '\p{^Is_Jg=_	farsi	yeh}', "");
Expect(0, 1599, '\P{Is_Jg=_	farsi	yeh}', "");
Expect(1, 1599, '\P{^Is_Jg=_	farsi	yeh}', "");
Expect(0, 1596, '\p{Is_Jg=_	farsi	yeh}', "");
Expect(1, 1596, '\p{^Is_Jg=_	farsi	yeh}', "");
Expect(1, 1596, '\P{Is_Jg=_	farsi	yeh}', "");
Expect(0, 1596, '\P{^Is_Jg=_	farsi	yeh}', "");
Error('\p{Joining_Group=:=	 REVERSED_PE}');
Error('\P{Joining_Group=:=	 REVERSED_PE}');
Expect(1, 1831, '\p{Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Joining_Group=- Reversed	pe}', "");
Expect(0, 1831, '\p{^Joining_Group=- Reversed	pe}', "");
Expect(0, 1831, '\P{Joining_Group=- Reversed	pe}', "");
Expect(1, 1831, '\P{^Joining_Group=- Reversed	pe}', "");
Expect(0, 1830, '\p{Joining_Group=- Reversed	pe}', "");
Expect(1, 1830, '\p{^Joining_Group=- Reversed	pe}', "");
Expect(1, 1830, '\P{Joining_Group=- Reversed	pe}', "");
Expect(0, 1830, '\P{^Joining_Group=- Reversed	pe}', "");
Error('\p{Jg=	:=Reversed_Pe}');
Error('\P{Jg=	:=Reversed_Pe}');
Expect(1, 1831, '\p{Jg:reversedpe}', "");
Expect(0, 1831, '\p{^Jg:reversedpe}', "");
Expect(0, 1831, '\P{Jg:reversedpe}', "");
Expect(1, 1831, '\P{^Jg:reversedpe}', "");
Expect(0, 1830, '\p{Jg:reversedpe}', "");
Expect(1, 1830, '\p{^Jg:reversedpe}', "");
Expect(1, 1830, '\P{Jg:reversedpe}', "");
Expect(0, 1830, '\P{^Jg:reversedpe}', "");
Expect(1, 1831, '\p{Jg=	_Reversed	PE}', "");
Expect(0, 1831, '\p{^Jg=	_Reversed	PE}', "");
Expect(0, 1831, '\P{Jg=	_Reversed	PE}', "");
Expect(1, 1831, '\P{^Jg=	_Reversed	PE}', "");
Expect(0, 1830, '\p{Jg=	_Reversed	PE}', "");
Expect(1, 1830, '\p{^Jg=	_Reversed	PE}', "");
Expect(1, 1830, '\P{Jg=	_Reversed	PE}', "");
Expect(0, 1830, '\P{^Jg=	_Reversed	PE}', "");
Error('\p{Is_Joining_Group=--Reversed_Pe/a/}');
Error('\P{Is_Joining_Group=--Reversed_Pe/a/}');
Expect(1, 1831, '\p{Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Is_Joining_Group=	 reversed	Pe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group=	 reversed	Pe}', "");
Expect(0, 1831, '\P{Is_Joining_Group=	 reversed	Pe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group=	 reversed	Pe}', "");
Expect(0, 1830, '\p{Is_Joining_Group=	 reversed	Pe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group=	 reversed	Pe}', "");
Expect(1, 1830, '\P{Is_Joining_Group=	 reversed	Pe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group=	 reversed	Pe}', "");
Error('\p{Is_Jg=_/a/Reversed	PE}');
Error('\P{Is_Jg=_/a/Reversed	PE}');
Expect(1, 1831, '\p{Is_Jg=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Jg=reversedpe}', "");
Expect(0, 1831, '\P{Is_Jg=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Jg=reversedpe}', "");
Expect(0, 1830, '\p{Is_Jg=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Jg=reversedpe}', "");
Expect(1, 1830, '\P{Is_Jg=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Jg=reversedpe}', "");
Expect(1, 1831, '\p{Is_Jg=_	ReversedPE}', "");
Expect(0, 1831, '\p{^Is_Jg=_	ReversedPE}', "");
Expect(0, 1831, '\P{Is_Jg=_	ReversedPE}', "");
Expect(1, 1831, '\P{^Is_Jg=_	ReversedPE}', "");
Expect(0, 1830, '\p{Is_Jg=_	ReversedPE}', "");
Expect(1, 1830, '\p{^Is_Jg=_	ReversedPE}', "");
Expect(1, 1830, '\P{Is_Jg=_	ReversedPE}', "");
Expect(0, 1830, '\P{^Is_Jg=_	ReversedPE}', "");
Error('\p{Joining_Group=--SHIN/a/}');
Error('\P{Joining_Group=--SHIN/a/}');
Expect(1, 1835, '\p{Joining_Group=shin}', "");
Expect(0, 1835, '\p{^Joining_Group=shin}', "");
Expect(0, 1835, '\P{Joining_Group=shin}', "");
Expect(1, 1835, '\P{^Joining_Group=shin}', "");
Expect(0, 1834, '\p{Joining_Group=shin}', "");
Expect(1, 1834, '\p{^Joining_Group=shin}', "");
Expect(1, 1834, '\P{Joining_Group=shin}', "");
Expect(0, 1834, '\P{^Joining_Group=shin}', "");
Expect(1, 1835, '\p{Joining_Group=--shin}', "");
Expect(0, 1835, '\p{^Joining_Group=--shin}', "");
Expect(0, 1835, '\P{Joining_Group=--shin}', "");
Expect(1, 1835, '\P{^Joining_Group=--shin}', "");
Expect(0, 1834, '\p{Joining_Group=--shin}', "");
Expect(1, 1834, '\p{^Joining_Group=--shin}', "");
Expect(1, 1834, '\P{Joining_Group=--shin}', "");
Expect(0, 1834, '\P{^Joining_Group=--shin}', "");
Error('\p{Jg=	Shin:=}');
Error('\P{Jg=	Shin:=}');
Expect(1, 1835, '\p{Jg=shin}', "");
Expect(0, 1835, '\p{^Jg=shin}', "");
Expect(0, 1835, '\P{Jg=shin}', "");
Expect(1, 1835, '\P{^Jg=shin}', "");
Expect(0, 1834, '\p{Jg=shin}', "");
Expect(1, 1834, '\p{^Jg=shin}', "");
Expect(1, 1834, '\P{Jg=shin}', "");
Expect(0, 1834, '\P{^Jg=shin}', "");
Expect(1, 1835, '\p{Jg=  Shin}', "");
Expect(0, 1835, '\p{^Jg=  Shin}', "");
Expect(0, 1835, '\P{Jg=  Shin}', "");
Expect(1, 1835, '\P{^Jg=  Shin}', "");
Expect(0, 1834, '\p{Jg=  Shin}', "");
Expect(1, 1834, '\p{^Jg=  Shin}', "");
Expect(1, 1834, '\P{Jg=  Shin}', "");
Expect(0, 1834, '\P{^Jg=  Shin}', "");
Error('\p{Is_Joining_Group=:= 	shin}');
Error('\P{Is_Joining_Group=:= 	shin}');
Expect(1, 1835, '\p{Is_Joining_Group=shin}', "");
Expect(0, 1835, '\p{^Is_Joining_Group=shin}', "");
Expect(0, 1835, '\P{Is_Joining_Group=shin}', "");
Expect(1, 1835, '\P{^Is_Joining_Group=shin}', "");
Expect(0, 1834, '\p{Is_Joining_Group=shin}', "");
Expect(1, 1834, '\p{^Is_Joining_Group=shin}', "");
Expect(1, 1834, '\P{Is_Joining_Group=shin}', "");
Expect(0, 1834, '\P{^Is_Joining_Group=shin}', "");
Expect(1, 1835, '\p{Is_Joining_Group=SHIN}', "");
Expect(0, 1835, '\p{^Is_Joining_Group=SHIN}', "");
Expect(0, 1835, '\P{Is_Joining_Group=SHIN}', "");
Expect(1, 1835, '\P{^Is_Joining_Group=SHIN}', "");
Expect(0, 1834, '\p{Is_Joining_Group=SHIN}', "");
Expect(1, 1834, '\p{^Is_Joining_Group=SHIN}', "");
Expect(1, 1834, '\P{Is_Joining_Group=SHIN}', "");
Expect(0, 1834, '\P{^Is_Joining_Group=SHIN}', "");
Error('\p{Is_Jg: 	:=Shin}');
Error('\P{Is_Jg: 	:=Shin}');
Expect(1, 1835, '\p{Is_Jg:shin}', "");
Expect(0, 1835, '\p{^Is_Jg:shin}', "");
Expect(0, 1835, '\P{Is_Jg:shin}', "");
Expect(1, 1835, '\P{^Is_Jg:shin}', "");
Expect(0, 1834, '\p{Is_Jg:shin}', "");
Expect(1, 1834, '\p{^Is_Jg:shin}', "");
Expect(1, 1834, '\P{Is_Jg:shin}', "");
Expect(0, 1834, '\P{^Is_Jg:shin}', "");
Expect(1, 1835, '\p{Is_Jg=__shin}', "");
Expect(0, 1835, '\p{^Is_Jg=__shin}', "");
Expect(0, 1835, '\P{Is_Jg=__shin}', "");
Expect(1, 1835, '\P{^Is_Jg=__shin}', "");
Expect(0, 1834, '\p{Is_Jg=__shin}', "");
Expect(1, 1834, '\p{^Is_Jg=__shin}', "");
Expect(1, 1834, '\P{Is_Jg=__shin}', "");
Expect(0, 1834, '\P{^Is_Jg=__shin}', "");
Error('\p{Joining_Group=:=Yeh}');
Error('\P{Joining_Group=:=Yeh}');
Expect(1, 1574, '\p{Joining_Group=yeh}', "");
Expect(0, 1574, '\p{^Joining_Group=yeh}', "");
Expect(0, 1574, '\P{Joining_Group=yeh}', "");
Expect(1, 1574, '\P{^Joining_Group=yeh}', "");
Expect(0, 1573, '\p{Joining_Group=yeh}', "");
Expect(1, 1573, '\p{^Joining_Group=yeh}', "");
Expect(1, 1573, '\P{Joining_Group=yeh}', "");
Expect(0, 1573, '\P{^Joining_Group=yeh}', "");
Expect(1, 1574, '\p{Joining_Group: -Yeh}', "");
Expect(0, 1574, '\p{^Joining_Group: -Yeh}', "");
Expect(0, 1574, '\P{Joining_Group: -Yeh}', "");
Expect(1, 1574, '\P{^Joining_Group: -Yeh}', "");
Expect(0, 1573, '\p{Joining_Group: -Yeh}', "");
Expect(1, 1573, '\p{^Joining_Group: -Yeh}', "");
Expect(1, 1573, '\P{Joining_Group: -Yeh}', "");
Expect(0, 1573, '\P{^Joining_Group: -Yeh}', "");
Error('\p{Jg=	/a/Yeh}');
Error('\P{Jg=	/a/Yeh}');
Expect(1, 1574, '\p{Jg=yeh}', "");
Expect(0, 1574, '\p{^Jg=yeh}', "");
Expect(0, 1574, '\P{Jg=yeh}', "");
Expect(1, 1574, '\P{^Jg=yeh}', "");
Expect(0, 1573, '\p{Jg=yeh}', "");
Expect(1, 1573, '\p{^Jg=yeh}', "");
Expect(1, 1573, '\P{Jg=yeh}', "");
Expect(0, 1573, '\P{^Jg=yeh}', "");
Expect(1, 1574, '\p{Jg=	 yeh}', "");
Expect(0, 1574, '\p{^Jg=	 yeh}', "");
Expect(0, 1574, '\P{Jg=	 yeh}', "");
Expect(1, 1574, '\P{^Jg=	 yeh}', "");
Expect(0, 1573, '\p{Jg=	 yeh}', "");
Expect(1, 1573, '\p{^Jg=	 yeh}', "");
Expect(1, 1573, '\P{Jg=	 yeh}', "");
Expect(0, 1573, '\P{^Jg=	 yeh}', "");
Error('\p{Is_Joining_Group=	 yeh:=}');
Error('\P{Is_Joining_Group=	 yeh:=}');
Expect(1, 1574, '\p{Is_Joining_Group=yeh}', "");
Expect(0, 1574, '\p{^Is_Joining_Group=yeh}', "");
Expect(0, 1574, '\P{Is_Joining_Group=yeh}', "");
Expect(1, 1574, '\P{^Is_Joining_Group=yeh}', "");
Expect(0, 1573, '\p{Is_Joining_Group=yeh}', "");
Expect(1, 1573, '\p{^Is_Joining_Group=yeh}', "");
Expect(1, 1573, '\P{Is_Joining_Group=yeh}', "");
Expect(0, 1573, '\P{^Is_Joining_Group=yeh}', "");
Expect(1, 1574, '\p{Is_Joining_Group=__YEH}', "");
Expect(0, 1574, '\p{^Is_Joining_Group=__YEH}', "");
Expect(0, 1574, '\P{Is_Joining_Group=__YEH}', "");
Expect(1, 1574, '\P{^Is_Joining_Group=__YEH}', "");
Expect(0, 1573, '\p{Is_Joining_Group=__YEH}', "");
Expect(1, 1573, '\p{^Is_Joining_Group=__YEH}', "");
Expect(1, 1573, '\P{Is_Joining_Group=__YEH}', "");
Expect(0, 1573, '\P{^Is_Joining_Group=__YEH}', "");
Error('\p{Is_Jg=/a/		Yeh}');
Error('\P{Is_Jg=/a/		Yeh}');
Expect(1, 1574, '\p{Is_Jg=yeh}', "");
Expect(0, 1574, '\p{^Is_Jg=yeh}', "");
Expect(0, 1574, '\P{Is_Jg=yeh}', "");
Expect(1, 1574, '\P{^Is_Jg=yeh}', "");
Expect(0, 1573, '\p{Is_Jg=yeh}', "");
Expect(1, 1573, '\p{^Is_Jg=yeh}', "");
Expect(1, 1573, '\P{Is_Jg=yeh}', "");
Expect(0, 1573, '\P{^Is_Jg=yeh}', "");
Expect(1, 1574, '\p{Is_Jg=Yeh}', "");
Expect(0, 1574, '\p{^Is_Jg=Yeh}', "");
Expect(0, 1574, '\P{Is_Jg=Yeh}', "");
Expect(1, 1574, '\P{^Is_Jg=Yeh}', "");
Expect(0, 1573, '\p{Is_Jg=Yeh}', "");
Expect(1, 1573, '\p{^Is_Jg=Yeh}', "");
Expect(1, 1573, '\P{Is_Jg=Yeh}', "");
Expect(0, 1573, '\P{^Is_Jg=Yeh}', "");
Error('\p{Joining_Group=	dal/a/}');
Error('\P{Joining_Group=	dal/a/}');
Expect(1, 1584, '\p{Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Joining_Group=dal}', "");
Expect(0, 1584, '\P{Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Joining_Group=dal}', "");
Expect(0, 1582, '\p{Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Joining_Group=dal}', "");
Expect(1, 1582, '\P{Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Joining_Group=dal}', "");
Expect(1, 1584, '\p{Joining_Group= -dal}', "");
Expect(0, 1584, '\p{^Joining_Group= -dal}', "");
Expect(0, 1584, '\P{Joining_Group= -dal}', "");
Expect(1, 1584, '\P{^Joining_Group= -dal}', "");
Expect(0, 1582, '\p{Joining_Group= -dal}', "");
Expect(1, 1582, '\p{^Joining_Group= -dal}', "");
Expect(1, 1582, '\P{Joining_Group= -dal}', "");
Expect(0, 1582, '\P{^Joining_Group= -dal}', "");
Error('\p{Jg: -DAL:=}');
Error('\P{Jg: -DAL:=}');
Expect(1, 1584, '\p{Jg=dal}', "");
Expect(0, 1584, '\p{^Jg=dal}', "");
Expect(0, 1584, '\P{Jg=dal}', "");
Expect(1, 1584, '\P{^Jg=dal}', "");
Expect(0, 1582, '\p{Jg=dal}', "");
Expect(1, 1582, '\p{^Jg=dal}', "");
Expect(1, 1582, '\P{Jg=dal}', "");
Expect(0, 1582, '\P{^Jg=dal}', "");
Expect(1, 1584, '\p{Jg= DAL}', "");
Expect(0, 1584, '\p{^Jg= DAL}', "");
Expect(0, 1584, '\P{Jg= DAL}', "");
Expect(1, 1584, '\P{^Jg= DAL}', "");
Expect(0, 1582, '\p{Jg= DAL}', "");
Expect(1, 1582, '\p{^Jg= DAL}', "");
Expect(1, 1582, '\P{Jg= DAL}', "");
Expect(0, 1582, '\P{^Jg= DAL}', "");
Error('\p{Is_Joining_Group=__Dal:=}');
Error('\P{Is_Joining_Group=__Dal:=}');
Expect(1, 1584, '\p{Is_Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Is_Joining_Group=dal}', "");
Expect(0, 1584, '\P{Is_Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Is_Joining_Group=dal}', "");
Expect(0, 1582, '\p{Is_Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Is_Joining_Group=dal}', "");
Expect(1, 1582, '\P{Is_Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Is_Joining_Group=dal}', "");
Expect(1, 1584, '\p{Is_Joining_Group=-_Dal}', "");
Expect(0, 1584, '\p{^Is_Joining_Group=-_Dal}', "");
Expect(0, 1584, '\P{Is_Joining_Group=-_Dal}', "");
Expect(1, 1584, '\P{^Is_Joining_Group=-_Dal}', "");
Expect(0, 1582, '\p{Is_Joining_Group=-_Dal}', "");
Expect(1, 1582, '\p{^Is_Joining_Group=-_Dal}', "");
Expect(1, 1582, '\P{Is_Joining_Group=-_Dal}', "");
Expect(0, 1582, '\P{^Is_Joining_Group=-_Dal}', "");
Error('\p{Is_Jg=_:=dal}');
Error('\P{Is_Jg=_:=dal}');
Expect(1, 1584, '\p{Is_Jg=dal}', "");
Expect(0, 1584, '\p{^Is_Jg=dal}', "");
Expect(0, 1584, '\P{Is_Jg=dal}', "");
Expect(1, 1584, '\P{^Is_Jg=dal}', "");
Expect(0, 1582, '\p{Is_Jg=dal}', "");
Expect(1, 1582, '\p{^Is_Jg=dal}', "");
Expect(1, 1582, '\P{Is_Jg=dal}', "");
Expect(0, 1582, '\P{^Is_Jg=dal}', "");
Expect(1, 1584, '\p{Is_Jg=_dal}', "");
Expect(0, 1584, '\p{^Is_Jg=_dal}', "");
Expect(0, 1584, '\P{Is_Jg=_dal}', "");
Expect(1, 1584, '\P{^Is_Jg=_dal}', "");
Expect(0, 1582, '\p{Is_Jg=_dal}', "");
Expect(1, 1582, '\p{^Is_Jg=_dal}', "");
Expect(1, 1582, '\P{Is_Jg=_dal}', "");
Expect(0, 1582, '\P{^Is_Jg=_dal}', "");
Error('\p{Joining_Group:-/a/Hamza	on-heh-Goal}');
Error('\P{Joining_Group:-/a/Hamza	on-heh-Goal}');
Expect(1, 1731, '\p{Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(0, 1731, '\p{^Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(0, 1731, '\P{Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(1, 1731, '\P{^Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(0, 1730, '\p{Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(1, 1730, '\p{^Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(1, 1730, '\P{Joining_Group=	-hamza	ON	heh_goal}', "");
Expect(0, 1730, '\P{^Joining_Group=	-hamza	ON	heh_goal}', "");
Error('\p{Jg= -Hamza-On/a/heh-GOAL}');
Error('\P{Jg= -Hamza-On/a/heh-GOAL}');
Expect(1, 1731, '\p{Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Jg=-_hamza-OnHEH	Goal}', "");
Expect(0, 1731, '\p{^Jg=-_hamza-OnHEH	Goal}', "");
Expect(0, 1731, '\P{Jg=-_hamza-OnHEH	Goal}', "");
Expect(1, 1731, '\P{^Jg=-_hamza-OnHEH	Goal}', "");
Expect(0, 1730, '\p{Jg=-_hamza-OnHEH	Goal}', "");
Expect(1, 1730, '\p{^Jg=-_hamza-OnHEH	Goal}', "");
Expect(1, 1730, '\P{Jg=-_hamza-OnHEH	Goal}', "");
Expect(0, 1730, '\P{^Jg=-_hamza-OnHEH	Goal}', "");
Error('\p{Is_Joining_Group=	 HAMZA ON-HEH	Goal:=}');
Error('\P{Is_Joining_Group=	 HAMZA ON-HEH	Goal:=}');
Expect(1, 1731, '\p{Is_Joining_Group:hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Is_Joining_Group:hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Is_Joining_Group:hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Is_Joining_Group:hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Is_Joining_Group:hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Is_Joining_Group:hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Is_Joining_Group:hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Is_Joining_Group:hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(0, 1731, '\p{^Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(0, 1731, '\P{Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(1, 1731, '\P{^Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(0, 1730, '\p{Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(1, 1730, '\p{^Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(1, 1730, '\P{Is_Joining_Group=  HAMZA OnHehGoal}', "");
Expect(0, 1730, '\P{^Is_Joining_Group=  HAMZA OnHehGoal}', "");
Error('\p{Is_Jg=_:=Hamza_On-Heh	GOAL}');
Error('\P{Is_Jg=_:=Hamza_On-Heh	GOAL}');
Expect(1, 1731, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(0, 1731, '\p{^Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(0, 1731, '\P{Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(1, 1731, '\P{^Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(0, 1730, '\p{Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(1, 1730, '\p{^Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(1, 1730, '\P{Is_Jg=  Hamza_On-Heh	goal}', "");
Expect(0, 1730, '\P{^Is_Jg=  Hamza_On-Heh	goal}', "");
Error('\p{Joining_Group= He:=}');
Error('\P{Joining_Group= He:=}');
Expect(1, 1815, '\p{Joining_Group=he}', "");
Expect(0, 1815, '\p{^Joining_Group=he}', "");
Expect(0, 1815, '\P{Joining_Group=he}', "");
Expect(1, 1815, '\P{^Joining_Group=he}', "");
Expect(0, 1814, '\p{Joining_Group=he}', "");
Expect(1, 1814, '\p{^Joining_Group=he}', "");
Expect(1, 1814, '\P{Joining_Group=he}', "");
Expect(0, 1814, '\P{^Joining_Group=he}', "");
Expect(1, 1815, '\p{Joining_Group:	 He}', "");
Expect(0, 1815, '\p{^Joining_Group:	 He}', "");
Expect(0, 1815, '\P{Joining_Group:	 He}', "");
Expect(1, 1815, '\P{^Joining_Group:	 He}', "");
Expect(0, 1814, '\p{Joining_Group:	 He}', "");
Expect(1, 1814, '\p{^Joining_Group:	 He}', "");
Expect(1, 1814, '\P{Joining_Group:	 He}', "");
Expect(0, 1814, '\P{^Joining_Group:	 He}', "");
Error('\p{Jg=--He:=}');
Error('\P{Jg=--He:=}');
Expect(1, 1815, '\p{Jg=he}', "");
Expect(0, 1815, '\p{^Jg=he}', "");
Expect(0, 1815, '\P{Jg=he}', "");
Expect(1, 1815, '\P{^Jg=he}', "");
Expect(0, 1814, '\p{Jg=he}', "");
Expect(1, 1814, '\p{^Jg=he}', "");
Expect(1, 1814, '\P{Jg=he}', "");
Expect(0, 1814, '\P{^Jg=he}', "");
Expect(1, 1815, '\p{Jg=- he}', "");
Expect(0, 1815, '\p{^Jg=- he}', "");
Expect(0, 1815, '\P{Jg=- he}', "");
Expect(1, 1815, '\P{^Jg=- he}', "");
Expect(0, 1814, '\p{Jg=- he}', "");
Expect(1, 1814, '\p{^Jg=- he}', "");
Expect(1, 1814, '\P{Jg=- he}', "");
Expect(0, 1814, '\P{^Jg=- he}', "");
Error('\p{Is_Joining_Group=-/a/he}');
Error('\P{Is_Joining_Group=-/a/he}');
Expect(1, 1815, '\p{Is_Joining_Group=he}', "");
Expect(0, 1815, '\p{^Is_Joining_Group=he}', "");
Expect(0, 1815, '\P{Is_Joining_Group=he}', "");
Expect(1, 1815, '\P{^Is_Joining_Group=he}', "");
Expect(0, 1814, '\p{Is_Joining_Group=he}', "");
Expect(1, 1814, '\p{^Is_Joining_Group=he}', "");
Expect(1, 1814, '\P{Is_Joining_Group=he}', "");
Expect(0, 1814, '\P{^Is_Joining_Group=he}', "");
Expect(1, 1815, '\p{Is_Joining_Group=__He}', "");
Expect(0, 1815, '\p{^Is_Joining_Group=__He}', "");
Expect(0, 1815, '\P{Is_Joining_Group=__He}', "");
Expect(1, 1815, '\P{^Is_Joining_Group=__He}', "");
Expect(0, 1814, '\p{Is_Joining_Group=__He}', "");
Expect(1, 1814, '\p{^Is_Joining_Group=__He}', "");
Expect(1, 1814, '\P{Is_Joining_Group=__He}', "");
Expect(0, 1814, '\P{^Is_Joining_Group=__He}', "");
Error('\p{Is_Jg::=_HE}');
Error('\P{Is_Jg::=_HE}');
Expect(1, 1815, '\p{Is_Jg=he}', "");
Expect(0, 1815, '\p{^Is_Jg=he}', "");
Expect(0, 1815, '\P{Is_Jg=he}', "");
Expect(1, 1815, '\P{^Is_Jg=he}', "");
Expect(0, 1814, '\p{Is_Jg=he}', "");
Expect(1, 1814, '\p{^Is_Jg=he}', "");
Expect(1, 1814, '\P{Is_Jg=he}', "");
Expect(0, 1814, '\P{^Is_Jg=he}', "");
Expect(1, 1815, '\p{Is_Jg=-_He}', "");
Expect(0, 1815, '\p{^Is_Jg=-_He}', "");
Expect(0, 1815, '\P{Is_Jg=-_He}', "");
Expect(1, 1815, '\P{^Is_Jg=-_He}', "");
Expect(0, 1814, '\p{Is_Jg=-_He}', "");
Expect(1, 1814, '\p{^Is_Jg=-_He}', "");
Expect(1, 1814, '\P{Is_Jg=-_He}', "");
Expect(0, 1814, '\P{^Is_Jg=-_He}', "");
Error('\p{Joining_Group=_ No/a/joining-group}');
Error('\P{Joining_Group=_ No/a/joining-group}');
Expect(1, 1569, '\p{Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\p{^Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\P{Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\P{^Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\p{Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\p{^Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\P{Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\P{^Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\p{Joining_Group=	-NoJOINING	group}', "");
Expect(0, 1569, '\p{^Joining_Group=	-NoJOINING	group}', "");
Expect(0, 1569, '\P{Joining_Group=	-NoJOINING	group}', "");
Expect(1, 1569, '\P{^Joining_Group=	-NoJOINING	group}', "");
Expect(0, 1599, '\p{Joining_Group=	-NoJOINING	group}', "");
Expect(1, 1599, '\p{^Joining_Group=	-NoJOINING	group}', "");
Expect(1, 1599, '\P{Joining_Group=	-NoJOINING	group}', "");
Expect(0, 1599, '\P{^Joining_Group=	-NoJOINING	group}', "");
Error('\p{Jg= 	no:=Joining_Group}');
Error('\P{Jg= 	no:=Joining_Group}');
Expect(1, 1569, '\p{Jg=nojoininggroup}', "");
Expect(0, 1569, '\p{^Jg=nojoininggroup}', "");
Expect(0, 1569, '\P{Jg=nojoininggroup}', "");
Expect(1, 1569, '\P{^Jg=nojoininggroup}', "");
Expect(0, 1599, '\p{Jg=nojoininggroup}', "");
Expect(1, 1599, '\p{^Jg=nojoininggroup}', "");
Expect(1, 1599, '\P{Jg=nojoininggroup}', "");
Expect(0, 1599, '\P{^Jg=nojoininggroup}', "");
Expect(1, 1569, '\p{Jg=	 No	Joining-Group}', "");
Expect(0, 1569, '\p{^Jg=	 No	Joining-Group}', "");
Expect(0, 1569, '\P{Jg=	 No	Joining-Group}', "");
Expect(1, 1569, '\P{^Jg=	 No	Joining-Group}', "");
Expect(0, 1599, '\p{Jg=	 No	Joining-Group}', "");
Expect(1, 1599, '\p{^Jg=	 No	Joining-Group}', "");
Expect(1, 1599, '\P{Jg=	 No	Joining-Group}', "");
Expect(0, 1599, '\P{^Jg=	 No	Joining-Group}', "");
Error('\p{Is_Joining_Group=:=	No-Joining_Group}');
Error('\P{Is_Joining_Group=:=	No-Joining_Group}');
Expect(1, 1569, '\p{Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\p{^Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\P{Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\P{^Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\p{Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\p{^Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\P{Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\P{^Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\p{Is_Joining_Group= NO	joining group}', "");
Expect(0, 1569, '\p{^Is_Joining_Group= NO	joining group}', "");
Expect(0, 1569, '\P{Is_Joining_Group= NO	joining group}', "");
Expect(1, 1569, '\P{^Is_Joining_Group= NO	joining group}', "");
Expect(0, 1599, '\p{Is_Joining_Group= NO	joining group}', "");
Expect(1, 1599, '\p{^Is_Joining_Group= NO	joining group}', "");
Expect(1, 1599, '\P{Is_Joining_Group= NO	joining group}', "");
Expect(0, 1599, '\P{^Is_Joining_Group= NO	joining group}', "");
Error('\p{Is_Jg=	-NO Joining:=GROUP}');
Error('\P{Is_Jg=	-NO Joining:=GROUP}');
Expect(1, 1569, '\p{Is_Jg=nojoininggroup}', "");
Expect(0, 1569, '\p{^Is_Jg=nojoininggroup}', "");
Expect(0, 1569, '\P{Is_Jg=nojoininggroup}', "");
Expect(1, 1569, '\P{^Is_Jg=nojoininggroup}', "");
Expect(0, 1599, '\p{Is_Jg=nojoininggroup}', "");
Expect(1, 1599, '\p{^Is_Jg=nojoininggroup}', "");
Expect(1, 1599, '\P{Is_Jg=nojoininggroup}', "");
Expect(0, 1599, '\P{^Is_Jg=nojoininggroup}', "");
Expect(1, 1569, '\p{Is_Jg=-_No joining	Group}', "");
Expect(0, 1569, '\p{^Is_Jg=-_No joining	Group}', "");
Expect(0, 1569, '\P{Is_Jg=-_No joining	Group}', "");
Expect(1, 1569, '\P{^Is_Jg=-_No joining	Group}', "");
Expect(0, 1599, '\p{Is_Jg=-_No joining	Group}', "");
Expect(1, 1599, '\p{^Is_Jg=-_No joining	Group}', "");
Expect(1, 1599, '\P{Is_Jg=-_No joining	Group}', "");
Expect(0, 1599, '\P{^Is_Jg=-_No joining	Group}', "");
Error('\p{Joining_Group= -Burushaski/a/Yeh	Barree}');
Error('\P{Joining_Group= -Burushaski/a/Yeh	Barree}');
Expect(1, 1915, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Joining_Group=__burushaski_YEH_Barree}', "");
Expect(0, 1915, '\p{^Joining_Group=__burushaski_YEH_Barree}', "");
Expect(0, 1915, '\P{Joining_Group=__burushaski_YEH_Barree}', "");
Expect(1, 1915, '\P{^Joining_Group=__burushaski_YEH_Barree}', "");
Expect(0, 1913, '\p{Joining_Group=__burushaski_YEH_Barree}', "");
Expect(1, 1913, '\p{^Joining_Group=__burushaski_YEH_Barree}', "");
Expect(1, 1913, '\P{Joining_Group=__burushaski_YEH_Barree}', "");
Expect(0, 1913, '\P{^Joining_Group=__burushaski_YEH_Barree}', "");
Error('\p{Jg= BURUSHASKI:=yeh BARREE}');
Error('\P{Jg= BURUSHASKI:=yeh BARREE}');
Expect(1, 1915, '\p{Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Jg=-_Burushaski_YEH barree}', "");
Expect(0, 1915, '\p{^Jg=-_Burushaski_YEH barree}', "");
Expect(0, 1915, '\P{Jg=-_Burushaski_YEH barree}', "");
Expect(1, 1915, '\P{^Jg=-_Burushaski_YEH barree}', "");
Expect(0, 1913, '\p{Jg=-_Burushaski_YEH barree}', "");
Expect(1, 1913, '\p{^Jg=-_Burushaski_YEH barree}', "");
Expect(1, 1913, '\P{Jg=-_Burushaski_YEH barree}', "");
Expect(0, 1913, '\P{^Jg=-_Burushaski_YEH barree}', "");
Error('\p{Is_Joining_Group=--BURUSHASKI/a/Yeh	BARREE}');
Error('\P{Is_Joining_Group=--BURUSHASKI/a/Yeh	BARREE}');
Expect(1, 1915, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(0, 1915, '\p{^Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(0, 1915, '\P{Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(1, 1915, '\P{^Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(0, 1913, '\p{Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(1, 1913, '\p{^Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(1, 1913, '\P{Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Expect(0, 1913, '\P{^Is_Joining_Group:--burushaski Yeh_BARREE}', "");
Error('\p{Is_Jg=- Burushaski-yeh/a/Barree}');
Error('\P{Is_Jg=- Burushaski-yeh/a/Barree}');
Expect(1, 1915, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(0, 1915, '\p{^Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(0, 1915, '\P{Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(1, 1915, '\P{^Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(0, 1913, '\p{Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(1, 1913, '\p{^Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(1, 1913, '\P{Is_Jg=  Burushaski_Yeh	barree}', "");
Expect(0, 1913, '\P{^Is_Jg=  Burushaski_Yeh	barree}', "");
Error('\p{Joining_Group= :=TEH marbuta}');
Error('\P{Joining_Group= :=TEH marbuta}');
Expect(1, 1577, '\p{Joining_Group:   tehmarbuta}', "");
Expect(0, 1577, '\p{^Joining_Group:   tehmarbuta}', "");
Expect(0, 1577, '\P{Joining_Group:   tehmarbuta}', "");
Expect(1, 1577, '\P{^Joining_Group:   tehmarbuta}', "");
Expect(0, 1576, '\p{Joining_Group:   tehmarbuta}', "");
Expect(1, 1576, '\p{^Joining_Group:   tehmarbuta}', "");
Expect(1, 1576, '\P{Joining_Group:   tehmarbuta}', "");
Expect(0, 1576, '\P{^Joining_Group:   tehmarbuta}', "");
Expect(1, 1577, '\p{Joining_Group=- Teh_marbuta}', "");
Expect(0, 1577, '\p{^Joining_Group=- Teh_marbuta}', "");
Expect(0, 1577, '\P{Joining_Group=- Teh_marbuta}', "");
Expect(1, 1577, '\P{^Joining_Group=- Teh_marbuta}', "");
Expect(0, 1576, '\p{Joining_Group=- Teh_marbuta}', "");
Expect(1, 1576, '\p{^Joining_Group=- Teh_marbuta}', "");
Expect(1, 1576, '\P{Joining_Group=- Teh_marbuta}', "");
Expect(0, 1576, '\P{^Joining_Group=- Teh_marbuta}', "");
Error('\p{Jg=-Teh/a/marbuta}');
Error('\P{Jg=-Teh/a/marbuta}');
Expect(1, 1577, '\p{Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Jg=		TEH	Marbuta}', "");
Expect(0, 1577, '\p{^Jg=		TEH	Marbuta}', "");
Expect(0, 1577, '\P{Jg=		TEH	Marbuta}', "");
Expect(1, 1577, '\P{^Jg=		TEH	Marbuta}', "");
Expect(0, 1576, '\p{Jg=		TEH	Marbuta}', "");
Expect(1, 1576, '\p{^Jg=		TEH	Marbuta}', "");
Expect(1, 1576, '\P{Jg=		TEH	Marbuta}', "");
Expect(0, 1576, '\P{^Jg=		TEH	Marbuta}', "");
Error('\p{Is_Joining_Group=-Teh-Marbuta/a/}');
Error('\P{Is_Joining_Group=-Teh-Marbuta/a/}');
Expect(1, 1577, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Joining_Group=		TEH-Marbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group=		TEH-Marbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group=		TEH-Marbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group=		TEH-Marbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group=		TEH-Marbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group=		TEH-Marbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group=		TEH-Marbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group=		TEH-Marbuta}', "");
Error('\p{Is_Jg=- Teh:=MARBUTA}');
Error('\P{Is_Jg=- Teh:=MARBUTA}');
Expect(1, 1577, '\p{Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Jg= Teh	MARBUTA}', "");
Expect(0, 1577, '\p{^Is_Jg= Teh	MARBUTA}', "");
Expect(0, 1577, '\P{Is_Jg= Teh	MARBUTA}', "");
Expect(1, 1577, '\P{^Is_Jg= Teh	MARBUTA}', "");
Expect(0, 1576, '\p{Is_Jg= Teh	MARBUTA}', "");
Expect(1, 1576, '\p{^Is_Jg= Teh	MARBUTA}', "");
Expect(1, 1576, '\P{Is_Jg= Teh	MARBUTA}', "");
Expect(0, 1576, '\P{^Is_Jg= Teh	MARBUTA}', "");
Error('\p{Joining_Group= /a/Reh}');
Error('\P{Joining_Group= /a/Reh}');
Expect(1, 1586, '\p{Joining_Group=reh}', "");
Expect(0, 1586, '\p{^Joining_Group=reh}', "");
Expect(0, 1586, '\P{Joining_Group=reh}', "");
Expect(1, 1586, '\P{^Joining_Group=reh}', "");
Expect(0, 1584, '\p{Joining_Group=reh}', "");
Expect(1, 1584, '\p{^Joining_Group=reh}', "");
Expect(1, 1584, '\P{Joining_Group=reh}', "");
Expect(0, 1584, '\P{^Joining_Group=reh}', "");
Expect(1, 1586, '\p{Joining_Group=-_Reh}', "");
Expect(0, 1586, '\p{^Joining_Group=-_Reh}', "");
Expect(0, 1586, '\P{Joining_Group=-_Reh}', "");
Expect(1, 1586, '\P{^Joining_Group=-_Reh}', "");
Expect(0, 1584, '\p{Joining_Group=-_Reh}', "");
Expect(1, 1584, '\p{^Joining_Group=-_Reh}', "");
Expect(1, 1584, '\P{Joining_Group=-_Reh}', "");
Expect(0, 1584, '\P{^Joining_Group=-_Reh}', "");
Error('\p{Jg=_/a/REH}');
Error('\P{Jg=_/a/REH}');
Expect(1, 1586, '\p{Jg=reh}', "");
Expect(0, 1586, '\p{^Jg=reh}', "");
Expect(0, 1586, '\P{Jg=reh}', "");
Expect(1, 1586, '\P{^Jg=reh}', "");
Expect(0, 1584, '\p{Jg=reh}', "");
Expect(1, 1584, '\p{^Jg=reh}', "");
Expect(1, 1584, '\P{Jg=reh}', "");
Expect(0, 1584, '\P{^Jg=reh}', "");
Expect(1, 1586, '\p{Jg=	reh}', "");
Expect(0, 1586, '\p{^Jg=	reh}', "");
Expect(0, 1586, '\P{Jg=	reh}', "");
Expect(1, 1586, '\P{^Jg=	reh}', "");
Expect(0, 1584, '\p{Jg=	reh}', "");
Expect(1, 1584, '\p{^Jg=	reh}', "");
Expect(1, 1584, '\P{Jg=	reh}', "");
Expect(0, 1584, '\P{^Jg=	reh}', "");
Error('\p{Is_Joining_Group=:=Reh}');
Error('\P{Is_Joining_Group=:=Reh}');
Expect(1, 1586, '\p{Is_Joining_Group:   reh}', "");
Expect(0, 1586, '\p{^Is_Joining_Group:   reh}', "");
Expect(0, 1586, '\P{Is_Joining_Group:   reh}', "");
Expect(1, 1586, '\P{^Is_Joining_Group:   reh}', "");
Expect(0, 1584, '\p{Is_Joining_Group:   reh}', "");
Expect(1, 1584, '\p{^Is_Joining_Group:   reh}', "");
Expect(1, 1584, '\P{Is_Joining_Group:   reh}', "");
Expect(0, 1584, '\P{^Is_Joining_Group:   reh}', "");
Expect(1, 1586, '\p{Is_Joining_Group=-	REH}', "");
Expect(0, 1586, '\p{^Is_Joining_Group=-	REH}', "");
Expect(0, 1586, '\P{Is_Joining_Group=-	REH}', "");
Expect(1, 1586, '\P{^Is_Joining_Group=-	REH}', "");
Expect(0, 1584, '\p{Is_Joining_Group=-	REH}', "");
Expect(1, 1584, '\p{^Is_Joining_Group=-	REH}', "");
Expect(1, 1584, '\P{Is_Joining_Group=-	REH}', "");
Expect(0, 1584, '\P{^Is_Joining_Group=-	REH}', "");
Error('\p{Is_Jg=:=- Reh}');
Error('\P{Is_Jg=:=- Reh}');
Expect(1, 1586, '\p{Is_Jg=reh}', "");
Expect(0, 1586, '\p{^Is_Jg=reh}', "");
Expect(0, 1586, '\P{Is_Jg=reh}', "");
Expect(1, 1586, '\P{^Is_Jg=reh}', "");
Expect(0, 1584, '\p{Is_Jg=reh}', "");
Expect(1, 1584, '\p{^Is_Jg=reh}', "");
Expect(1, 1584, '\P{Is_Jg=reh}', "");
Expect(0, 1584, '\P{^Is_Jg=reh}', "");
Expect(1, 1586, '\p{Is_Jg= _reh}', "");
Expect(0, 1586, '\p{^Is_Jg= _reh}', "");
Expect(0, 1586, '\P{Is_Jg= _reh}', "");
Expect(1, 1586, '\P{^Is_Jg= _reh}', "");
Expect(0, 1584, '\p{Is_Jg= _reh}', "");
Expect(1, 1584, '\p{^Is_Jg= _reh}', "");
Expect(1, 1584, '\P{Is_Jg= _reh}', "");
Expect(0, 1584, '\P{^Is_Jg= _reh}', "");
Error('\p{Joining_Group= 	zain:=}');
Error('\P{Joining_Group= 	zain:=}');
Expect(1, 1817, '\p{Joining_Group=zain}', "");
Expect(0, 1817, '\p{^Joining_Group=zain}', "");
Expect(0, 1817, '\P{Joining_Group=zain}', "");
Expect(1, 1817, '\P{^Joining_Group=zain}', "");
Expect(0, 1816, '\p{Joining_Group=zain}', "");
Expect(1, 1816, '\p{^Joining_Group=zain}', "");
Expect(1, 1816, '\P{Joining_Group=zain}', "");
Expect(0, 1816, '\P{^Joining_Group=zain}', "");
Expect(1, 1817, '\p{Joining_Group=__Zain}', "");
Expect(0, 1817, '\p{^Joining_Group=__Zain}', "");
Expect(0, 1817, '\P{Joining_Group=__Zain}', "");
Expect(1, 1817, '\P{^Joining_Group=__Zain}', "");
Expect(0, 1816, '\p{Joining_Group=__Zain}', "");
Expect(1, 1816, '\p{^Joining_Group=__Zain}', "");
Expect(1, 1816, '\P{Joining_Group=__Zain}', "");
Expect(0, 1816, '\P{^Joining_Group=__Zain}', "");
Error('\p{Jg=	_Zain/a/}');
Error('\P{Jg=	_Zain/a/}');
Expect(1, 1817, '\p{Jg=zain}', "");
Expect(0, 1817, '\p{^Jg=zain}', "");
Expect(0, 1817, '\P{Jg=zain}', "");
Expect(1, 1817, '\P{^Jg=zain}', "");
Expect(0, 1816, '\p{Jg=zain}', "");
Expect(1, 1816, '\p{^Jg=zain}', "");
Expect(1, 1816, '\P{Jg=zain}', "");
Expect(0, 1816, '\P{^Jg=zain}', "");
Expect(1, 1817, '\p{Jg=	zain}', "");
Expect(0, 1817, '\p{^Jg=	zain}', "");
Expect(0, 1817, '\P{Jg=	zain}', "");
Expect(1, 1817, '\P{^Jg=	zain}', "");
Expect(0, 1816, '\p{Jg=	zain}', "");
Expect(1, 1816, '\p{^Jg=	zain}', "");
Expect(1, 1816, '\P{Jg=	zain}', "");
Expect(0, 1816, '\P{^Jg=	zain}', "");
Error('\p{Is_Joining_Group= Zain/a/}');
Error('\P{Is_Joining_Group= Zain/a/}');
Expect(1, 1817, '\p{Is_Joining_Group=zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group=zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group=zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group=zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group=zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group=zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group=zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group=zain}', "");
Expect(1, 1817, '\p{Is_Joining_Group:  Zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group:  Zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group:  Zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group:  Zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group:  Zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group:  Zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group:  Zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group:  Zain}', "");
Error('\p{Is_Jg=_ ZAIN/a/}');
Error('\P{Is_Jg=_ ZAIN/a/}');
Expect(1, 1817, '\p{Is_Jg:	zain}', "");
Expect(0, 1817, '\p{^Is_Jg:	zain}', "");
Expect(0, 1817, '\P{Is_Jg:	zain}', "");
Expect(1, 1817, '\P{^Is_Jg:	zain}', "");
Expect(0, 1816, '\p{Is_Jg:	zain}', "");
Expect(1, 1816, '\p{^Is_Jg:	zain}', "");
Expect(1, 1816, '\P{Is_Jg:	zain}', "");
Expect(0, 1816, '\P{^Is_Jg:	zain}', "");
Expect(1, 1817, '\p{Is_Jg=	-ZAIN}', "");
Expect(0, 1817, '\p{^Is_Jg=	-ZAIN}', "");
Expect(0, 1817, '\P{Is_Jg=	-ZAIN}', "");
Expect(1, 1817, '\P{^Is_Jg=	-ZAIN}', "");
Expect(0, 1816, '\p{Is_Jg=	-ZAIN}', "");
Expect(1, 1816, '\p{^Is_Jg=	-ZAIN}', "");
Expect(1, 1816, '\P{Is_Jg=	-ZAIN}', "");
Expect(0, 1816, '\P{^Is_Jg=	-ZAIN}', "");
Error('\p{Joining_Group= :=ALEF}');
Error('\P{Joining_Group= :=ALEF}');
Expect(1, 1571, '\p{Joining_Group=alef}', "");
Expect(0, 1571, '\p{^Joining_Group=alef}', "");
Expect(0, 1571, '\P{Joining_Group=alef}', "");
Expect(1, 1571, '\P{^Joining_Group=alef}', "");
Expect(0, 1569, '\p{Joining_Group=alef}', "");
Expect(1, 1569, '\p{^Joining_Group=alef}', "");
Expect(1, 1569, '\P{Joining_Group=alef}', "");
Expect(0, 1569, '\P{^Joining_Group=alef}', "");
Expect(1, 1571, '\p{Joining_Group=_ alef}', "");
Expect(0, 1571, '\p{^Joining_Group=_ alef}', "");
Expect(0, 1571, '\P{Joining_Group=_ alef}', "");
Expect(1, 1571, '\P{^Joining_Group=_ alef}', "");
Expect(0, 1569, '\p{Joining_Group=_ alef}', "");
Expect(1, 1569, '\p{^Joining_Group=_ alef}', "");
Expect(1, 1569, '\P{Joining_Group=_ alef}', "");
Expect(0, 1569, '\P{^Joining_Group=_ alef}', "");
Error('\p{Jg=-:=Alef}');
Error('\P{Jg=-:=Alef}');
Expect(1, 1571, '\p{Jg=alef}', "");
Expect(0, 1571, '\p{^Jg=alef}', "");
Expect(0, 1571, '\P{Jg=alef}', "");
Expect(1, 1571, '\P{^Jg=alef}', "");
Expect(0, 1569, '\p{Jg=alef}', "");
Expect(1, 1569, '\p{^Jg=alef}', "");
Expect(1, 1569, '\P{Jg=alef}', "");
Expect(0, 1569, '\P{^Jg=alef}', "");
Expect(1, 1571, '\p{Jg=_alef}', "");
Expect(0, 1571, '\p{^Jg=_alef}', "");
Expect(0, 1571, '\P{Jg=_alef}', "");
Expect(1, 1571, '\P{^Jg=_alef}', "");
Expect(0, 1569, '\p{Jg=_alef}', "");
Expect(1, 1569, '\p{^Jg=_alef}', "");
Expect(1, 1569, '\P{Jg=_alef}', "");
Expect(0, 1569, '\P{^Jg=_alef}', "");
Error('\p{Is_Joining_Group=_:=alef}');
Error('\P{Is_Joining_Group=_:=alef}');
Expect(1, 1571, '\p{Is_Joining_Group:alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group:alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group:alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group:alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group:alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group:alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group:alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group:alef}', "");
Expect(1, 1571, '\p{Is_Joining_Group=_alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group=_alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group=_alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group=_alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group=_alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group=_alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group=_alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group=_alef}', "");
Error('\p{Is_Jg=_/a/Alef}');
Error('\P{Is_Jg=_/a/Alef}');
Expect(1, 1571, '\p{Is_Jg=alef}', "");
Expect(0, 1571, '\p{^Is_Jg=alef}', "");
Expect(0, 1571, '\P{Is_Jg=alef}', "");
Expect(1, 1571, '\P{^Is_Jg=alef}', "");
Expect(0, 1569, '\p{Is_Jg=alef}', "");
Expect(1, 1569, '\p{^Is_Jg=alef}', "");
Expect(1, 1569, '\P{Is_Jg=alef}', "");
Expect(0, 1569, '\P{^Is_Jg=alef}', "");
Expect(1, 1571, '\p{Is_Jg=	Alef}', "");
Expect(0, 1571, '\p{^Is_Jg=	Alef}', "");
Expect(0, 1571, '\P{Is_Jg=	Alef}', "");
Expect(1, 1571, '\P{^Is_Jg=	Alef}', "");
Expect(0, 1569, '\p{Is_Jg=	Alef}', "");
Expect(1, 1569, '\p{^Is_Jg=	Alef}', "");
Expect(1, 1569, '\P{Is_Jg=	Alef}', "");
Expect(0, 1569, '\P{^Is_Jg=	Alef}', "");
Error('\p{Joining_Group: 	:=GAMAL}');
Error('\P{Joining_Group: 	:=GAMAL}');
Expect(1, 1812, '\p{Joining_Group=gamal}', "");
Expect(0, 1812, '\p{^Joining_Group=gamal}', "");
Expect(0, 1812, '\P{Joining_Group=gamal}', "");
Expect(1, 1812, '\P{^Joining_Group=gamal}', "");
Expect(0, 1810, '\p{Joining_Group=gamal}', "");
Expect(1, 1810, '\p{^Joining_Group=gamal}', "");
Expect(1, 1810, '\P{Joining_Group=gamal}', "");
Expect(0, 1810, '\P{^Joining_Group=gamal}', "");
Expect(1, 1812, '\p{Joining_Group:		 Gamal}', "");
Expect(0, 1812, '\p{^Joining_Group:		 Gamal}', "");
Expect(0, 1812, '\P{Joining_Group:		 Gamal}', "");
Expect(1, 1812, '\P{^Joining_Group:		 Gamal}', "");
Expect(0, 1810, '\p{Joining_Group:		 Gamal}', "");
Expect(1, 1810, '\p{^Joining_Group:		 Gamal}', "");
Expect(1, 1810, '\P{Joining_Group:		 Gamal}', "");
Expect(0, 1810, '\P{^Joining_Group:		 Gamal}', "");
Error('\p{Jg=	/a/gamal}');
Error('\P{Jg=	/a/gamal}');
Expect(1, 1812, '\p{Jg=gamal}', "");
Expect(0, 1812, '\p{^Jg=gamal}', "");
Expect(0, 1812, '\P{Jg=gamal}', "");
Expect(1, 1812, '\P{^Jg=gamal}', "");
Expect(0, 1810, '\p{Jg=gamal}', "");
Expect(1, 1810, '\p{^Jg=gamal}', "");
Expect(1, 1810, '\P{Jg=gamal}', "");
Expect(0, 1810, '\P{^Jg=gamal}', "");
Expect(1, 1812, '\p{Jg=GAMAL}', "");
Expect(0, 1812, '\p{^Jg=GAMAL}', "");
Expect(0, 1812, '\P{Jg=GAMAL}', "");
Expect(1, 1812, '\P{^Jg=GAMAL}', "");
Expect(0, 1810, '\p{Jg=GAMAL}', "");
Expect(1, 1810, '\p{^Jg=GAMAL}', "");
Expect(1, 1810, '\P{Jg=GAMAL}', "");
Expect(0, 1810, '\P{^Jg=GAMAL}', "");
Error('\p{Is_Joining_Group=/a/gamal}');
Error('\P{Is_Joining_Group=/a/gamal}');
Expect(1, 1812, '\p{Is_Joining_Group=gamal}', "");
Expect(0, 1812, '\p{^Is_Joining_Group=gamal}', "");
Expect(0, 1812, '\P{Is_Joining_Group=gamal}', "");
Expect(1, 1812, '\P{^Is_Joining_Group=gamal}', "");
Expect(0, 1810, '\p{Is_Joining_Group=gamal}', "");
Expect(1, 1810, '\p{^Is_Joining_Group=gamal}', "");
Expect(1, 1810, '\P{Is_Joining_Group=gamal}', "");
Expect(0, 1810, '\P{^Is_Joining_Group=gamal}', "");
Expect(1, 1812, '\p{Is_Joining_Group=	Gamal}', "");
Expect(0, 1812, '\p{^Is_Joining_Group=	Gamal}', "");
Expect(0, 1812, '\P{Is_Joining_Group=	Gamal}', "");
Expect(1, 1812, '\P{^Is_Joining_Group=	Gamal}', "");
Expect(0, 1810, '\p{Is_Joining_Group=	Gamal}', "");
Expect(1, 1810, '\p{^Is_Joining_Group=	Gamal}', "");
Expect(1, 1810, '\P{Is_Joining_Group=	Gamal}', "");
Expect(0, 1810, '\P{^Is_Joining_Group=	Gamal}', "");
Error('\p{Is_Jg=:=GAMAL}');
Error('\P{Is_Jg=:=GAMAL}');
Expect(1, 1812, '\p{Is_Jg=gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=gamal}', "");
Expect(0, 1812, '\P{Is_Jg=gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=gamal}', "");
Expect(0, 1810, '\p{Is_Jg=gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=gamal}', "");
Expect(1, 1810, '\P{Is_Jg=gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=gamal}', "");
Expect(1, 1812, '\p{Is_Jg=__Gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=__Gamal}', "");
Expect(0, 1812, '\P{Is_Jg=__Gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=__Gamal}', "");
Expect(0, 1810, '\p{Is_Jg=__Gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=__Gamal}', "");
Expect(1, 1810, '\P{Is_Jg=__Gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=__Gamal}', "");
Error('\p{Joining_Group=Meem/a/}');
Error('\P{Joining_Group=Meem/a/}');
Expect(1, 1605, '\p{Joining_Group=meem}', "");
Expect(0, 1605, '\p{^Joining_Group=meem}', "");
Expect(0, 1605, '\P{Joining_Group=meem}', "");
Expect(1, 1605, '\P{^Joining_Group=meem}', "");
Expect(0, 1604, '\p{Joining_Group=meem}', "");
Expect(1, 1604, '\p{^Joining_Group=meem}', "");
Expect(1, 1604, '\P{Joining_Group=meem}', "");
Expect(0, 1604, '\P{^Joining_Group=meem}', "");
Expect(1, 1605, '\p{Joining_Group:  	MEEM}', "");
Expect(0, 1605, '\p{^Joining_Group:  	MEEM}', "");
Expect(0, 1605, '\P{Joining_Group:  	MEEM}', "");
Expect(1, 1605, '\P{^Joining_Group:  	MEEM}', "");
Expect(0, 1604, '\p{Joining_Group:  	MEEM}', "");
Expect(1, 1604, '\p{^Joining_Group:  	MEEM}', "");
Expect(1, 1604, '\P{Joining_Group:  	MEEM}', "");
Expect(0, 1604, '\P{^Joining_Group:  	MEEM}', "");
Error('\p{Jg=:= 	Meem}');
Error('\P{Jg=:= 	Meem}');
Expect(1, 1605, '\p{Jg=meem}', "");
Expect(0, 1605, '\p{^Jg=meem}', "");
Expect(0, 1605, '\P{Jg=meem}', "");
Expect(1, 1605, '\P{^Jg=meem}', "");
Expect(0, 1604, '\p{Jg=meem}', "");
Expect(1, 1604, '\p{^Jg=meem}', "");
Expect(1, 1604, '\P{Jg=meem}', "");
Expect(0, 1604, '\P{^Jg=meem}', "");
Expect(1, 1605, '\p{Jg:   -_Meem}', "");
Expect(0, 1605, '\p{^Jg:   -_Meem}', "");
Expect(0, 1605, '\P{Jg:   -_Meem}', "");
Expect(1, 1605, '\P{^Jg:   -_Meem}', "");
Expect(0, 1604, '\p{Jg:   -_Meem}', "");
Expect(1, 1604, '\p{^Jg:   -_Meem}', "");
Expect(1, 1604, '\P{Jg:   -_Meem}', "");
Expect(0, 1604, '\P{^Jg:   -_Meem}', "");
Error('\p{Is_Joining_Group=:=-	Meem}');
Error('\P{Is_Joining_Group=:=-	Meem}');
Expect(1, 1605, '\p{Is_Joining_Group=meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group=meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group=meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group=meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group=meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group=meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group=meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group=meem}', "");
Expect(1, 1605, '\p{Is_Joining_Group=	_Meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group=	_Meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group=	_Meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group=	_Meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group=	_Meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group=	_Meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group=	_Meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group=	_Meem}', "");
Error('\p{Is_Jg=	:=meem}');
Error('\P{Is_Jg=	:=meem}');
Expect(1, 1605, '\p{Is_Jg:	meem}', "");
Expect(0, 1605, '\p{^Is_Jg:	meem}', "");
Expect(0, 1605, '\P{Is_Jg:	meem}', "");
Expect(1, 1605, '\P{^Is_Jg:	meem}', "");
Expect(0, 1604, '\p{Is_Jg:	meem}', "");
Expect(1, 1604, '\p{^Is_Jg:	meem}', "");
Expect(1, 1604, '\P{Is_Jg:	meem}', "");
Expect(0, 1604, '\P{^Is_Jg:	meem}', "");
Expect(1, 1605, '\p{Is_Jg=_ Meem}', "");
Expect(0, 1605, '\p{^Is_Jg=_ Meem}', "");
Expect(0, 1605, '\P{Is_Jg=_ Meem}', "");
Expect(1, 1605, '\P{^Is_Jg=_ Meem}', "");
Expect(0, 1604, '\p{Is_Jg=_ Meem}', "");
Expect(1, 1604, '\p{^Is_Jg=_ Meem}', "");
Expect(1, 1604, '\P{Is_Jg=_ Meem}', "");
Expect(0, 1604, '\P{^Is_Jg=_ Meem}', "");
Error('\p{Joining_Group=/a/		sadhe}');
Error('\P{Joining_Group=/a/		sadhe}');
Expect(1, 1832, '\p{Joining_Group=sadhe}', "");
Expect(0, 1832, '\p{^Joining_Group=sadhe}', "");
Expect(0, 1832, '\P{Joining_Group=sadhe}', "");
Expect(1, 1832, '\P{^Joining_Group=sadhe}', "");
Expect(0, 1831, '\p{Joining_Group=sadhe}', "");
Expect(1, 1831, '\p{^Joining_Group=sadhe}', "");
Expect(1, 1831, '\P{Joining_Group=sadhe}', "");
Expect(0, 1831, '\P{^Joining_Group=sadhe}', "");
Expect(1, 1832, '\p{Joining_Group=_SADHE}', "");
Expect(0, 1832, '\p{^Joining_Group=_SADHE}', "");
Expect(0, 1832, '\P{Joining_Group=_SADHE}', "");
Expect(1, 1832, '\P{^Joining_Group=_SADHE}', "");
Expect(0, 1831, '\p{Joining_Group=_SADHE}', "");
Expect(1, 1831, '\p{^Joining_Group=_SADHE}', "");
Expect(1, 1831, '\P{Joining_Group=_SADHE}', "");
Expect(0, 1831, '\P{^Joining_Group=_SADHE}', "");
Error('\p{Jg=:=_	Sadhe}');
Error('\P{Jg=:=_	Sadhe}');
Expect(1, 1832, '\p{Jg=sadhe}', "");
Expect(0, 1832, '\p{^Jg=sadhe}', "");
Expect(0, 1832, '\P{Jg=sadhe}', "");
Expect(1, 1832, '\P{^Jg=sadhe}', "");
Expect(0, 1831, '\p{Jg=sadhe}', "");
Expect(1, 1831, '\p{^Jg=sadhe}', "");
Expect(1, 1831, '\P{Jg=sadhe}', "");
Expect(0, 1831, '\P{^Jg=sadhe}', "");
Expect(1, 1832, '\p{Jg=-Sadhe}', "");
Expect(0, 1832, '\p{^Jg=-Sadhe}', "");
Expect(0, 1832, '\P{Jg=-Sadhe}', "");
Expect(1, 1832, '\P{^Jg=-Sadhe}', "");
Expect(0, 1831, '\p{Jg=-Sadhe}', "");
Expect(1, 1831, '\p{^Jg=-Sadhe}', "");
Expect(1, 1831, '\P{Jg=-Sadhe}', "");
Expect(0, 1831, '\P{^Jg=-Sadhe}', "");
Error('\p{Is_Joining_Group=/a/SADHE}');
Error('\P{Is_Joining_Group=/a/SADHE}');
Expect(1, 1832, '\p{Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\p{Is_Joining_Group=-	Sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=-	Sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=-	Sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=-	Sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=-	Sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=-	Sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=-	Sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=-	Sadhe}', "");
Error('\p{Is_Jg= /a/Sadhe}');
Error('\P{Is_Jg= /a/Sadhe}');
Expect(1, 1832, '\p{Is_Jg=sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=sadhe}', "");
Expect(1, 1832, '\p{Is_Jg=--Sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=--Sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=--Sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=--Sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=--Sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=--Sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=--Sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=--Sadhe}', "");
Error('\p{Joining_Group=		BEH/a/}');
Error('\P{Joining_Group=		BEH/a/}');
Expect(1, 1576, '\p{Joining_Group=beh}', "");
Expect(0, 1576, '\p{^Joining_Group=beh}', "");
Expect(0, 1576, '\P{Joining_Group=beh}', "");
Expect(1, 1576, '\P{^Joining_Group=beh}', "");
Expect(0, 1575, '\p{Joining_Group=beh}', "");
Expect(1, 1575, '\p{^Joining_Group=beh}', "");
Expect(1, 1575, '\P{Joining_Group=beh}', "");
Expect(0, 1575, '\P{^Joining_Group=beh}', "");
Expect(1, 1576, '\p{Joining_Group=_-beh}', "");
Expect(0, 1576, '\p{^Joining_Group=_-beh}', "");
Expect(0, 1576, '\P{Joining_Group=_-beh}', "");
Expect(1, 1576, '\P{^Joining_Group=_-beh}', "");
Expect(0, 1575, '\p{Joining_Group=_-beh}', "");
Expect(1, 1575, '\p{^Joining_Group=_-beh}', "");
Expect(1, 1575, '\P{Joining_Group=_-beh}', "");
Expect(0, 1575, '\P{^Joining_Group=_-beh}', "");
Error('\p{Jg=/a/-	Beh}');
Error('\P{Jg=/a/-	Beh}');
Expect(1, 1576, '\p{Jg=beh}', "");
Expect(0, 1576, '\p{^Jg=beh}', "");
Expect(0, 1576, '\P{Jg=beh}', "");
Expect(1, 1576, '\P{^Jg=beh}', "");
Expect(0, 1575, '\p{Jg=beh}', "");
Expect(1, 1575, '\p{^Jg=beh}', "");
Expect(1, 1575, '\P{Jg=beh}', "");
Expect(0, 1575, '\P{^Jg=beh}', "");
Expect(1, 1576, '\p{Jg=-	BEH}', "");
Expect(0, 1576, '\p{^Jg=-	BEH}', "");
Expect(0, 1576, '\P{Jg=-	BEH}', "");
Expect(1, 1576, '\P{^Jg=-	BEH}', "");
Expect(0, 1575, '\p{Jg=-	BEH}', "");
Expect(1, 1575, '\p{^Jg=-	BEH}', "");
Expect(1, 1575, '\P{Jg=-	BEH}', "");
Expect(0, 1575, '\P{^Jg=-	BEH}', "");
Error('\p{Is_Joining_Group=_/a/BEH}');
Error('\P{Is_Joining_Group=_/a/BEH}');
Expect(1, 1576, '\p{Is_Joining_Group=beh}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=beh}', "");
Expect(0, 1576, '\P{Is_Joining_Group=beh}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=beh}', "");
Expect(0, 1575, '\p{Is_Joining_Group=beh}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=beh}', "");
Expect(1, 1575, '\P{Is_Joining_Group=beh}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=beh}', "");
Expect(1, 1576, '\p{Is_Joining_Group=		beh}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=		beh}', "");
Expect(0, 1576, '\P{Is_Joining_Group=		beh}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=		beh}', "");
Expect(0, 1575, '\p{Is_Joining_Group=		beh}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=		beh}', "");
Expect(1, 1575, '\P{Is_Joining_Group=		beh}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=		beh}', "");
Error('\p{Is_Jg=	BEH:=}');
Error('\P{Is_Jg=	BEH:=}');
Expect(1, 1576, '\p{Is_Jg=beh}', "");
Expect(0, 1576, '\p{^Is_Jg=beh}', "");
Expect(0, 1576, '\P{Is_Jg=beh}', "");
Expect(1, 1576, '\P{^Is_Jg=beh}', "");
Expect(0, 1575, '\p{Is_Jg=beh}', "");
Expect(1, 1575, '\p{^Is_Jg=beh}', "");
Expect(1, 1575, '\P{Is_Jg=beh}', "");
Expect(0, 1575, '\P{^Is_Jg=beh}', "");
Expect(1, 1576, '\p{Is_Jg=-	Beh}', "");
Expect(0, 1576, '\p{^Is_Jg=-	Beh}', "");
Expect(0, 1576, '\P{Is_Jg=-	Beh}', "");
Expect(1, 1576, '\P{^Is_Jg=-	Beh}', "");
Expect(0, 1575, '\p{Is_Jg=-	Beh}', "");
Expect(1, 1575, '\p{^Is_Jg=-	Beh}', "");
Expect(1, 1575, '\P{Is_Jg=-	Beh}', "");
Expect(0, 1575, '\P{^Is_Jg=-	Beh}', "");
Error('\p{Joining_Group=/a/-	Yeh	with_Tail}');
Error('\P{Joining_Group=/a/-	Yeh	with_Tail}');
Expect(1, 1741, '\p{Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Joining_Group= Yeh	with TAIL}', "");
Expect(0, 1741, '\p{^Joining_Group= Yeh	with TAIL}', "");
Expect(0, 1741, '\P{Joining_Group= Yeh	with TAIL}', "");
Expect(1, 1741, '\P{^Joining_Group= Yeh	with TAIL}', "");
Expect(0, 1740, '\p{Joining_Group= Yeh	with TAIL}', "");
Expect(1, 1740, '\p{^Joining_Group= Yeh	with TAIL}', "");
Expect(1, 1740, '\P{Joining_Group= Yeh	with TAIL}', "");
Expect(0, 1740, '\P{^Joining_Group= Yeh	with TAIL}', "");
Error('\p{Jg=:=--Yeh_With	Tail}');
Error('\P{Jg=:=--Yeh_With	Tail}');
Expect(1, 1741, '\p{Jg=yehwithtail}', "");
Expect(0, 1741, '\p{^Jg=yehwithtail}', "");
Expect(0, 1741, '\P{Jg=yehwithtail}', "");
Expect(1, 1741, '\P{^Jg=yehwithtail}', "");
Expect(0, 1740, '\p{Jg=yehwithtail}', "");
Expect(1, 1740, '\p{^Jg=yehwithtail}', "");
Expect(1, 1740, '\P{Jg=yehwithtail}', "");
Expect(0, 1740, '\P{^Jg=yehwithtail}', "");
Expect(1, 1741, '\p{Jg=- Yeh	With tail}', "");
Expect(0, 1741, '\p{^Jg=- Yeh	With tail}', "");
Expect(0, 1741, '\P{Jg=- Yeh	With tail}', "");
Expect(1, 1741, '\P{^Jg=- Yeh	With tail}', "");
Expect(0, 1740, '\p{Jg=- Yeh	With tail}', "");
Expect(1, 1740, '\p{^Jg=- Yeh	With tail}', "");
Expect(1, 1740, '\P{Jg=- Yeh	With tail}', "");
Expect(0, 1740, '\P{^Jg=- Yeh	With tail}', "");
Error('\p{Is_Joining_Group=/a/Yeh	with	TAIL}');
Error('\P{Is_Joining_Group=/a/Yeh	with	TAIL}');
Expect(1, 1741, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(0, 1741, '\p{^Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(0, 1741, '\P{Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(1, 1741, '\P{^Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(0, 1740, '\p{Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(1, 1740, '\p{^Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(1, 1740, '\P{Is_Joining_Group=_YEHwith_TAIL}', "");
Expect(0, 1740, '\P{^Is_Joining_Group=_YEHwith_TAIL}', "");
Error('\p{Is_Jg=/a/YEHwith	Tail}');
Error('\P{Is_Jg=/a/YEHwith	Tail}');
Expect(1, 1741, '\p{Is_Jg:yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Jg:yehwithtail}', "");
Expect(0, 1741, '\P{Is_Jg:yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Jg:yehwithtail}', "");
Expect(0, 1740, '\p{Is_Jg:yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Jg:yehwithtail}', "");
Expect(1, 1740, '\P{Is_Jg:yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Jg:yehwithtail}', "");
Expect(1, 1741, '\p{Is_Jg= -Yeh-With Tail}', "");
Expect(0, 1741, '\p{^Is_Jg= -Yeh-With Tail}', "");
Expect(0, 1741, '\P{Is_Jg= -Yeh-With Tail}', "");
Expect(1, 1741, '\P{^Is_Jg= -Yeh-With Tail}', "");
Expect(0, 1740, '\p{Is_Jg= -Yeh-With Tail}', "");
Expect(1, 1740, '\p{^Is_Jg= -Yeh-With Tail}', "");
Expect(1, 1740, '\P{Is_Jg= -Yeh-With Tail}', "");
Expect(0, 1740, '\P{^Is_Jg= -Yeh-With Tail}', "");
Error('\p{Joining_Group=/a/	 tah}');
Error('\P{Joining_Group=/a/	 tah}');
Expect(1, 1592, '\p{Joining_Group:   tah}', "");
Expect(0, 1592, '\p{^Joining_Group:   tah}', "");
Expect(0, 1592, '\P{Joining_Group:   tah}', "");
Expect(1, 1592, '\P{^Joining_Group:   tah}', "");
Expect(0, 1590, '\p{Joining_Group:   tah}', "");
Expect(1, 1590, '\p{^Joining_Group:   tah}', "");
Expect(1, 1590, '\P{Joining_Group:   tah}', "");
Expect(0, 1590, '\P{^Joining_Group:   tah}', "");
Expect(1, 1592, '\p{Joining_Group:    	Tah}', "");
Expect(0, 1592, '\p{^Joining_Group:    	Tah}', "");
Expect(0, 1592, '\P{Joining_Group:    	Tah}', "");
Expect(1, 1592, '\P{^Joining_Group:    	Tah}', "");
Expect(0, 1590, '\p{Joining_Group:    	Tah}', "");
Expect(1, 1590, '\p{^Joining_Group:    	Tah}', "");
Expect(1, 1590, '\P{Joining_Group:    	Tah}', "");
Expect(0, 1590, '\P{^Joining_Group:    	Tah}', "");
Error('\p{Jg= 	Tah/a/}');
Error('\P{Jg= 	Tah/a/}');
Expect(1, 1592, '\p{Jg=tah}', "");
Expect(0, 1592, '\p{^Jg=tah}', "");
Expect(0, 1592, '\P{Jg=tah}', "");
Expect(1, 1592, '\P{^Jg=tah}', "");
Expect(0, 1590, '\p{Jg=tah}', "");
Expect(1, 1590, '\p{^Jg=tah}', "");
Expect(1, 1590, '\P{Jg=tah}', "");
Expect(0, 1590, '\P{^Jg=tah}', "");
Expect(1, 1592, '\p{Jg=	 TAH}', "");
Expect(0, 1592, '\p{^Jg=	 TAH}', "");
Expect(0, 1592, '\P{Jg=	 TAH}', "");
Expect(1, 1592, '\P{^Jg=	 TAH}', "");
Expect(0, 1590, '\p{Jg=	 TAH}', "");
Expect(1, 1590, '\p{^Jg=	 TAH}', "");
Expect(1, 1590, '\P{Jg=	 TAH}', "");
Expect(0, 1590, '\P{^Jg=	 TAH}', "");
Error('\p{Is_Joining_Group=	:=Tah}');
Error('\P{Is_Joining_Group=	:=Tah}');
Expect(1, 1592, '\p{Is_Joining_Group=tah}', "");
Expect(0, 1592, '\p{^Is_Joining_Group=tah}', "");
Expect(0, 1592, '\P{Is_Joining_Group=tah}', "");
Expect(1, 1592, '\P{^Is_Joining_Group=tah}', "");
Expect(0, 1590, '\p{Is_Joining_Group=tah}', "");
Expect(1, 1590, '\p{^Is_Joining_Group=tah}', "");
Expect(1, 1590, '\P{Is_Joining_Group=tah}', "");
Expect(0, 1590, '\P{^Is_Joining_Group=tah}', "");
Expect(1, 1592, '\p{Is_Joining_Group= 	Tah}', "");
Expect(0, 1592, '\p{^Is_Joining_Group= 	Tah}', "");
Expect(0, 1592, '\P{Is_Joining_Group= 	Tah}', "");
Expect(1, 1592, '\P{^Is_Joining_Group= 	Tah}', "");
Expect(0, 1590, '\p{Is_Joining_Group= 	Tah}', "");
Expect(1, 1590, '\p{^Is_Joining_Group= 	Tah}', "");
Expect(1, 1590, '\P{Is_Joining_Group= 	Tah}', "");
Expect(0, 1590, '\P{^Is_Joining_Group= 	Tah}', "");
Error('\p{Is_Jg=	 tah/a/}');
Error('\P{Is_Jg=	 tah/a/}');
Expect(1, 1592, '\p{Is_Jg=tah}', "");
Expect(0, 1592, '\p{^Is_Jg=tah}', "");
Expect(0, 1592, '\P{Is_Jg=tah}', "");
Expect(1, 1592, '\P{^Is_Jg=tah}', "");
Expect(0, 1590, '\p{Is_Jg=tah}', "");
Expect(1, 1590, '\p{^Is_Jg=tah}', "");
Expect(1, 1590, '\P{Is_Jg=tah}', "");
Expect(0, 1590, '\P{^Is_Jg=tah}', "");
Expect(1, 1592, '\p{Is_Jg=__Tah}', "");
Expect(0, 1592, '\p{^Is_Jg=__Tah}', "");
Expect(0, 1592, '\P{Is_Jg=__Tah}', "");
Expect(1, 1592, '\P{^Is_Jg=__Tah}', "");
Expect(0, 1590, '\p{Is_Jg=__Tah}', "");
Expect(1, 1590, '\p{^Is_Jg=__Tah}', "");
Expect(1, 1590, '\P{Is_Jg=__Tah}', "");
Expect(0, 1590, '\P{^Is_Jg=__Tah}', "");
Error('\p{Joining_Group=:=ZHAIN}');
Error('\P{Joining_Group=:=ZHAIN}');
Expect(1, 1869, '\p{Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Joining_Group: 	 ZHAIN}', "");
Expect(0, 1869, '\p{^Joining_Group: 	 ZHAIN}', "");
Expect(0, 1869, '\P{Joining_Group: 	 ZHAIN}', "");
Expect(1, 1869, '\P{^Joining_Group: 	 ZHAIN}', "");
Expect(0, 1868, '\p{Joining_Group: 	 ZHAIN}', "");
Expect(1, 1868, '\p{^Joining_Group: 	 ZHAIN}', "");
Expect(1, 1868, '\P{Joining_Group: 	 ZHAIN}', "");
Expect(0, 1868, '\P{^Joining_Group: 	 ZHAIN}', "");
Error('\p{Jg=_:=zhain}');
Error('\P{Jg=_:=zhain}');
Expect(1, 1869, '\p{Jg=zhain}', "");
Expect(0, 1869, '\p{^Jg=zhain}', "");
Expect(0, 1869, '\P{Jg=zhain}', "");
Expect(1, 1869, '\P{^Jg=zhain}', "");
Expect(0, 1868, '\p{Jg=zhain}', "");
Expect(1, 1868, '\p{^Jg=zhain}', "");
Expect(1, 1868, '\P{Jg=zhain}', "");
Expect(0, 1868, '\P{^Jg=zhain}', "");
Expect(1, 1869, '\p{Jg= Zhain}', "");
Expect(0, 1869, '\p{^Jg= Zhain}', "");
Expect(0, 1869, '\P{Jg= Zhain}', "");
Expect(1, 1869, '\P{^Jg= Zhain}', "");
Expect(0, 1868, '\p{Jg= Zhain}', "");
Expect(1, 1868, '\p{^Jg= Zhain}', "");
Expect(1, 1868, '\P{Jg= Zhain}', "");
Expect(0, 1868, '\P{^Jg= Zhain}', "");
Error('\p{Is_Joining_Group=_:=zhain}');
Error('\P{Is_Joining_Group=_:=zhain}');
Expect(1, 1869, '\p{Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Is_Joining_Group=	Zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group=	Zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group=	Zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group=	Zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group=	Zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group=	Zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group=	Zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group=	Zhain}', "");
Error('\p{Is_Jg=_ zhain:=}');
Error('\P{Is_Jg=_ zhain:=}');
Expect(1, 1869, '\p{Is_Jg=zhain}', "");
Expect(0, 1869, '\p{^Is_Jg=zhain}', "");
Expect(0, 1869, '\P{Is_Jg=zhain}', "");
Expect(1, 1869, '\P{^Is_Jg=zhain}', "");
Expect(0, 1868, '\p{Is_Jg=zhain}', "");
Expect(1, 1868, '\p{^Is_Jg=zhain}', "");
Expect(1, 1868, '\P{Is_Jg=zhain}', "");
Expect(0, 1868, '\P{^Is_Jg=zhain}', "");
Expect(1, 1869, '\p{Is_Jg=- ZHAIN}', "");
Expect(0, 1869, '\p{^Is_Jg=- ZHAIN}', "");
Expect(0, 1869, '\P{Is_Jg=- ZHAIN}', "");
Expect(1, 1869, '\P{^Is_Jg=- ZHAIN}', "");
Expect(0, 1868, '\p{Is_Jg=- ZHAIN}', "");
Expect(1, 1868, '\p{^Is_Jg=- ZHAIN}', "");
Expect(1, 1868, '\P{Is_Jg=- ZHAIN}', "");
Expect(0, 1868, '\P{^Is_Jg=- ZHAIN}', "");
Error('\p{Joining_Group=/a/-_pe}');
Error('\P{Joining_Group=/a/-_pe}');
Expect(1, 1830, '\p{Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Joining_Group=pe}', "");
Expect(0, 1830, '\P{Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Joining_Group=pe}', "");
Expect(0, 1829, '\p{Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Joining_Group=pe}', "");
Expect(1, 1829, '\P{Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Joining_Group=pe}', "");
Expect(1, 1830, '\p{Joining_Group=		Pe}', "");
Expect(0, 1830, '\p{^Joining_Group=		Pe}', "");
Expect(0, 1830, '\P{Joining_Group=		Pe}', "");
Expect(1, 1830, '\P{^Joining_Group=		Pe}', "");
Expect(0, 1829, '\p{Joining_Group=		Pe}', "");
Expect(1, 1829, '\p{^Joining_Group=		Pe}', "");
Expect(1, 1829, '\P{Joining_Group=		Pe}', "");
Expect(0, 1829, '\P{^Joining_Group=		Pe}', "");
Error('\p{Jg=/a/  pe}');
Error('\P{Jg=/a/  pe}');
Expect(1, 1830, '\p{Jg=pe}', "");
Expect(0, 1830, '\p{^Jg=pe}', "");
Expect(0, 1830, '\P{Jg=pe}', "");
Expect(1, 1830, '\P{^Jg=pe}', "");
Expect(0, 1829, '\p{Jg=pe}', "");
Expect(1, 1829, '\p{^Jg=pe}', "");
Expect(1, 1829, '\P{Jg=pe}', "");
Expect(0, 1829, '\P{^Jg=pe}', "");
Error('\p{Is_Joining_Group=/a/	-PE}');
Error('\P{Is_Joining_Group=/a/	-PE}');
Expect(1, 1830, '\p{Is_Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=pe}', "");
Expect(0, 1830, '\P{Is_Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=pe}', "");
Expect(0, 1829, '\p{Is_Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=pe}', "");
Expect(1, 1829, '\P{Is_Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=pe}', "");
Expect(1, 1830, '\p{Is_Joining_Group=_PE}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=_PE}', "");
Expect(0, 1830, '\P{Is_Joining_Group=_PE}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=_PE}', "");
Expect(0, 1829, '\p{Is_Joining_Group=_PE}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=_PE}', "");
Expect(1, 1829, '\P{Is_Joining_Group=_PE}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=_PE}', "");
Error('\p{Is_Jg=	:=Pe}');
Error('\P{Is_Jg=	:=Pe}');
Expect(1, 1830, '\p{Is_Jg=pe}', "");
Expect(0, 1830, '\p{^Is_Jg=pe}', "");
Expect(0, 1830, '\P{Is_Jg=pe}', "");
Expect(1, 1830, '\P{^Is_Jg=pe}', "");
Expect(0, 1829, '\p{Is_Jg=pe}', "");
Expect(1, 1829, '\p{^Is_Jg=pe}', "");
Expect(1, 1829, '\P{Is_Jg=pe}', "");
Expect(0, 1829, '\P{^Is_Jg=pe}', "");
Expect(1, 1830, '\p{Is_Jg= PE}', "");
Expect(0, 1830, '\p{^Is_Jg= PE}', "");
Expect(0, 1830, '\P{Is_Jg= PE}', "");
Expect(1, 1830, '\P{^Is_Jg= PE}', "");
Expect(0, 1829, '\p{Is_Jg= PE}', "");
Expect(1, 1829, '\p{^Is_Jg= PE}', "");
Expect(1, 1829, '\P{Is_Jg= PE}', "");
Expect(0, 1829, '\P{^Is_Jg= PE}', "");
Error('\p{Joining_Group=/a/-	GAF}');
Error('\P{Joining_Group=/a/-	GAF}');
Expect(1, 1596, '\p{Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Joining_Group=-gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=-gaf}', "");
Expect(0, 1596, '\P{Joining_Group=-gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=-gaf}', "");
Expect(0, 1594, '\p{Joining_Group=-gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=-gaf}', "");
Expect(1, 1594, '\P{Joining_Group=-gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=-gaf}', "");
Error('\p{Jg=/a/_ GAF}');
Error('\P{Jg=/a/_ GAF}');
Expect(1, 1596, '\p{Jg=gaf}', "");
Expect(0, 1596, '\p{^Jg=gaf}', "");
Expect(0, 1596, '\P{Jg=gaf}', "");
Expect(1, 1596, '\P{^Jg=gaf}', "");
Expect(0, 1594, '\p{Jg=gaf}', "");
Expect(1, 1594, '\p{^Jg=gaf}', "");
Expect(1, 1594, '\P{Jg=gaf}', "");
Expect(0, 1594, '\P{^Jg=gaf}', "");
Expect(1, 1596, '\p{Jg=-Gaf}', "");
Expect(0, 1596, '\p{^Jg=-Gaf}', "");
Expect(0, 1596, '\P{Jg=-Gaf}', "");
Expect(1, 1596, '\P{^Jg=-Gaf}', "");
Expect(0, 1594, '\p{Jg=-Gaf}', "");
Expect(1, 1594, '\p{^Jg=-Gaf}', "");
Expect(1, 1594, '\P{Jg=-Gaf}', "");
Expect(0, 1594, '\P{^Jg=-Gaf}', "");
Error('\p{Is_Joining_Group=-gaf/a/}');
Error('\P{Is_Joining_Group=-gaf/a/}');
Expect(1, 1596, '\p{Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Is_Joining_Group=-_Gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group=-_Gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group=-_Gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group=-_Gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group=-_Gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group=-_Gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group=-_Gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group=-_Gaf}', "");
Error('\p{Is_Jg=/a/	gaf}');
Error('\P{Is_Jg=/a/	gaf}');
Expect(1, 1596, '\p{Is_Jg=gaf}', "");
Expect(0, 1596, '\p{^Is_Jg=gaf}', "");
Expect(0, 1596, '\P{Is_Jg=gaf}', "");
Expect(1, 1596, '\P{^Is_Jg=gaf}', "");
Expect(0, 1594, '\p{Is_Jg=gaf}', "");
Expect(1, 1594, '\p{^Is_Jg=gaf}', "");
Expect(1, 1594, '\P{Is_Jg=gaf}', "");
Expect(0, 1594, '\P{^Is_Jg=gaf}', "");
Expect(1, 1596, '\p{Is_Jg=_-Gaf}', "");
Expect(0, 1596, '\p{^Is_Jg=_-Gaf}', "");
Expect(0, 1596, '\P{Is_Jg=_-Gaf}', "");
Expect(1, 1596, '\P{^Is_Jg=_-Gaf}', "");
Expect(0, 1594, '\p{Is_Jg=_-Gaf}', "");
Expect(1, 1594, '\p{^Is_Jg=_-Gaf}', "");
Expect(1, 1594, '\P{Is_Jg=_-Gaf}', "");
Expect(0, 1594, '\P{^Is_Jg=_-Gaf}', "");
Error('\p{Joining_Group=_:=WAW}');
Error('\P{Joining_Group=_:=WAW}');
Expect(1, 1572, '\p{Joining_Group: waw}', "");
Expect(0, 1572, '\p{^Joining_Group: waw}', "");
Expect(0, 1572, '\P{Joining_Group: waw}', "");
Expect(1, 1572, '\P{^Joining_Group: waw}', "");
Expect(0, 1571, '\p{Joining_Group: waw}', "");
Expect(1, 1571, '\p{^Joining_Group: waw}', "");
Expect(1, 1571, '\P{Joining_Group: waw}', "");
Expect(0, 1571, '\P{^Joining_Group: waw}', "");
Expect(1, 1572, '\p{Joining_Group=--WAW}', "");
Expect(0, 1572, '\p{^Joining_Group=--WAW}', "");
Expect(0, 1572, '\P{Joining_Group=--WAW}', "");
Expect(1, 1572, '\P{^Joining_Group=--WAW}', "");
Expect(0, 1571, '\p{Joining_Group=--WAW}', "");
Expect(1, 1571, '\p{^Joining_Group=--WAW}', "");
Expect(1, 1571, '\P{Joining_Group=--WAW}', "");
Expect(0, 1571, '\P{^Joining_Group=--WAW}', "");
Error('\p{Jg=:= _Waw}');
Error('\P{Jg=:= _Waw}');
Expect(1, 1572, '\p{Jg=waw}', "");
Expect(0, 1572, '\p{^Jg=waw}', "");
Expect(0, 1572, '\P{Jg=waw}', "");
Expect(1, 1572, '\P{^Jg=waw}', "");
Expect(0, 1571, '\p{Jg=waw}', "");
Expect(1, 1571, '\p{^Jg=waw}', "");
Expect(1, 1571, '\P{Jg=waw}', "");
Expect(0, 1571, '\P{^Jg=waw}', "");
Expect(1, 1572, '\p{Jg=- waw}', "");
Expect(0, 1572, '\p{^Jg=- waw}', "");
Expect(0, 1572, '\P{Jg=- waw}', "");
Expect(1, 1572, '\P{^Jg=- waw}', "");
Expect(0, 1571, '\p{Jg=- waw}', "");
Expect(1, 1571, '\p{^Jg=- waw}', "");
Expect(1, 1571, '\P{Jg=- waw}', "");
Expect(0, 1571, '\P{^Jg=- waw}', "");
Error('\p{Is_Joining_Group=/a/ 	WAW}');
Error('\P{Is_Joining_Group=/a/ 	WAW}');
Expect(1, 1572, '\p{Is_Joining_Group=waw}', "");
Expect(0, 1572, '\p{^Is_Joining_Group=waw}', "");
Expect(0, 1572, '\P{Is_Joining_Group=waw}', "");
Expect(1, 1572, '\P{^Is_Joining_Group=waw}', "");
Expect(0, 1571, '\p{Is_Joining_Group=waw}', "");
Expect(1, 1571, '\p{^Is_Joining_Group=waw}', "");
Expect(1, 1571, '\P{Is_Joining_Group=waw}', "");
Expect(0, 1571, '\P{^Is_Joining_Group=waw}', "");
Expect(1, 1572, '\p{Is_Joining_Group=- Waw}', "");
Expect(0, 1572, '\p{^Is_Joining_Group=- Waw}', "");
Expect(0, 1572, '\P{Is_Joining_Group=- Waw}', "");
Expect(1, 1572, '\P{^Is_Joining_Group=- Waw}', "");
Expect(0, 1571, '\p{Is_Joining_Group=- Waw}', "");
Expect(1, 1571, '\p{^Is_Joining_Group=- Waw}', "");
Expect(1, 1571, '\P{Is_Joining_Group=- Waw}', "");
Expect(0, 1571, '\P{^Is_Joining_Group=- Waw}', "");
Error('\p{Is_Jg:- Waw/a/}');
Error('\P{Is_Jg:- Waw/a/}');
Expect(1, 1572, '\p{Is_Jg:waw}', "");
Expect(0, 1572, '\p{^Is_Jg:waw}', "");
Expect(0, 1572, '\P{Is_Jg:waw}', "");
Expect(1, 1572, '\P{^Is_Jg:waw}', "");
Expect(0, 1571, '\p{Is_Jg:waw}', "");
Expect(1, 1571, '\p{^Is_Jg:waw}', "");
Expect(1, 1571, '\P{Is_Jg:waw}', "");
Expect(0, 1571, '\P{^Is_Jg:waw}', "");
Expect(1, 1572, '\p{Is_Jg=  Waw}', "");
Expect(0, 1572, '\p{^Is_Jg=  Waw}', "");
Expect(0, 1572, '\P{Is_Jg=  Waw}', "");
Expect(1, 1572, '\P{^Is_Jg=  Waw}', "");
Expect(0, 1571, '\p{Is_Jg=  Waw}', "");
Expect(1, 1571, '\p{^Is_Jg=  Waw}', "");
Expect(1, 1571, '\P{Is_Jg=  Waw}', "");
Expect(0, 1571, '\P{^Is_Jg=  Waw}', "");
Error('\p{Joining_Group=	/a/YUDH}');
Error('\P{Joining_Group=	/a/YUDH}');
Expect(1, 1821, '\p{Joining_Group:	yudh}', "");
Expect(0, 1821, '\p{^Joining_Group:	yudh}', "");
Expect(0, 1821, '\P{Joining_Group:	yudh}', "");
Expect(1, 1821, '\P{^Joining_Group:	yudh}', "");
Expect(0, 1820, '\p{Joining_Group:	yudh}', "");
Expect(1, 1820, '\p{^Joining_Group:	yudh}', "");
Expect(1, 1820, '\P{Joining_Group:	yudh}', "");
Expect(0, 1820, '\P{^Joining_Group:	yudh}', "");
Expect(1, 1821, '\p{Joining_Group=		yudh}', "");
Expect(0, 1821, '\p{^Joining_Group=		yudh}', "");
Expect(0, 1821, '\P{Joining_Group=		yudh}', "");
Expect(1, 1821, '\P{^Joining_Group=		yudh}', "");
Expect(0, 1820, '\p{Joining_Group=		yudh}', "");
Expect(1, 1820, '\p{^Joining_Group=		yudh}', "");
Expect(1, 1820, '\P{Joining_Group=		yudh}', "");
Expect(0, 1820, '\P{^Joining_Group=		yudh}', "");
Error('\p{Jg=/a/-YUDH}');
Error('\P{Jg=/a/-YUDH}');
Expect(1, 1821, '\p{Jg=yudh}', "");
Expect(0, 1821, '\p{^Jg=yudh}', "");
Expect(0, 1821, '\P{Jg=yudh}', "");
Expect(1, 1821, '\P{^Jg=yudh}', "");
Expect(0, 1820, '\p{Jg=yudh}', "");
Expect(1, 1820, '\p{^Jg=yudh}', "");
Expect(1, 1820, '\P{Jg=yudh}', "");
Expect(0, 1820, '\P{^Jg=yudh}', "");
Expect(1, 1821, '\p{Jg=--Yudh}', "");
Expect(0, 1821, '\p{^Jg=--Yudh}', "");
Expect(0, 1821, '\P{Jg=--Yudh}', "");
Expect(1, 1821, '\P{^Jg=--Yudh}', "");
Expect(0, 1820, '\p{Jg=--Yudh}', "");
Expect(1, 1820, '\p{^Jg=--Yudh}', "");
Expect(1, 1820, '\P{Jg=--Yudh}', "");
Expect(0, 1820, '\P{^Jg=--Yudh}', "");
Error('\p{Is_Joining_Group: _/a/Yudh}');
Error('\P{Is_Joining_Group: _/a/Yudh}');
Expect(1, 1821, '\p{Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\P{Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\p{Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\P{Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\p{Is_Joining_Group=	-yudh}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=	-yudh}', "");
Expect(0, 1821, '\P{Is_Joining_Group=	-yudh}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=	-yudh}', "");
Expect(0, 1820, '\p{Is_Joining_Group=	-yudh}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=	-yudh}', "");
Expect(1, 1820, '\P{Is_Joining_Group=	-yudh}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=	-yudh}', "");
Error('\p{Is_Jg=  Yudh:=}');
Error('\P{Is_Jg=  Yudh:=}');
Expect(1, 1821, '\p{Is_Jg=yudh}', "");
Expect(0, 1821, '\p{^Is_Jg=yudh}', "");
Expect(0, 1821, '\P{Is_Jg=yudh}', "");
Expect(1, 1821, '\P{^Is_Jg=yudh}', "");
Expect(0, 1820, '\p{Is_Jg=yudh}', "");
Expect(1, 1820, '\p{^Is_Jg=yudh}', "");
Expect(1, 1820, '\P{Is_Jg=yudh}', "");
Expect(0, 1820, '\P{^Is_Jg=yudh}', "");
Expect(1, 1821, '\p{Is_Jg= Yudh}', "");
Expect(0, 1821, '\p{^Is_Jg= Yudh}', "");
Expect(0, 1821, '\P{Is_Jg= Yudh}', "");
Expect(1, 1821, '\P{^Is_Jg= Yudh}', "");
Expect(0, 1820, '\p{Is_Jg= Yudh}', "");
Expect(1, 1820, '\p{^Is_Jg= Yudh}', "");
Expect(1, 1820, '\P{Is_Jg= Yudh}', "");
Expect(0, 1820, '\P{^Is_Jg= Yudh}', "");
Error('\p{Pattern_White_Space= yes:=}');
Error('\P{Pattern_White_Space= yes:=}');
Expect(1, 13, '\p{Pattern_White_Space=yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=yes}', "");
Expect(1, 13, '\p{Pattern_White_Space=-yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=-yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=-yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=-yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=-yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=-yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=-yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=-yes}', "");
Error('\p{Pat_WS: :=	_y}');
Error('\P{Pat_WS: :=	_y}');
Expect(1, 13, '\p{Pat_WS=y}', "");
Expect(0, 13, '\p{^Pat_WS=y}', "");
Expect(0, 13, '\P{Pat_WS=y}', "");
Expect(1, 13, '\P{^Pat_WS=y}', "");
Expect(0, 8, '\p{Pat_WS=y}', "");
Expect(1, 8, '\p{^Pat_WS=y}', "");
Expect(1, 8, '\P{Pat_WS=y}', "");
Expect(0, 8, '\P{^Pat_WS=y}', "");
Expect(1, 13, '\p{Pat_WS=-_Y}', "");
Expect(0, 13, '\p{^Pat_WS=-_Y}', "");
Expect(0, 13, '\P{Pat_WS=-_Y}', "");
Expect(1, 13, '\P{^Pat_WS=-_Y}', "");
Expect(0, 8, '\p{Pat_WS=-_Y}', "");
Expect(1, 8, '\p{^Pat_WS=-_Y}', "");
Expect(1, 8, '\P{Pat_WS=-_Y}', "");
Expect(0, 8, '\P{^Pat_WS=-_Y}', "");
Error('\p{Is_Pattern_White_Space:   --T:=}');
Error('\P{Is_Pattern_White_Space:   --T:=}');
Expect(1, 13, '\p{Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\p{Is_Pattern_White_Space=__T}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=__T}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=__T}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=__T}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=__T}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=__T}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=__T}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=__T}', "");
Error('\p{Is_Pat_WS: TRUE/a/}');
Error('\P{Is_Pat_WS: TRUE/a/}');
Expect(1, 13, '\p{Is_Pat_WS=true}', "");
Expect(0, 13, '\p{^Is_Pat_WS=true}', "");
Expect(0, 13, '\P{Is_Pat_WS=true}', "");
Expect(1, 13, '\P{^Is_Pat_WS=true}', "");
Expect(0, 8, '\p{Is_Pat_WS=true}', "");
Expect(1, 8, '\p{^Is_Pat_WS=true}', "");
Expect(1, 8, '\P{Is_Pat_WS=true}', "");
Expect(0, 8, '\P{^Is_Pat_WS=true}', "");
Expect(1, 13, '\p{Is_Pat_WS= _True}', "");
Expect(0, 13, '\p{^Is_Pat_WS= _True}', "");
Expect(0, 13, '\P{Is_Pat_WS= _True}', "");
Expect(1, 13, '\P{^Is_Pat_WS= _True}', "");
Expect(0, 8, '\p{Is_Pat_WS= _True}', "");
Expect(1, 8, '\p{^Is_Pat_WS= _True}', "");
Expect(1, 8, '\P{Is_Pat_WS= _True}', "");
Expect(0, 8, '\P{^Is_Pat_WS= _True}', "");
Error('\p{Pattern_White_Space= -No/a/}');
Error('\P{Pattern_White_Space= -No/a/}');
Expect(1, 8, '\p{Pattern_White_Space=no}', "");
Expect(0, 8, '\p{^Pattern_White_Space=no}', "");
Expect(0, 8, '\P{Pattern_White_Space=no}', "");
Expect(1, 8, '\P{^Pattern_White_Space=no}', "");
Expect(0, 13, '\p{Pattern_White_Space=no}', "");
Expect(1, 13, '\p{^Pattern_White_Space=no}', "");
Expect(1, 13, '\P{Pattern_White_Space=no}', "");
Expect(0, 13, '\P{^Pattern_White_Space=no}', "");
Expect(1, 8, '\p{Pattern_White_Space=No}', "");
Expect(0, 8, '\p{^Pattern_White_Space=No}', "");
Expect(0, 8, '\P{Pattern_White_Space=No}', "");
Expect(1, 8, '\P{^Pattern_White_Space=No}', "");
Expect(0, 13, '\p{Pattern_White_Space=No}', "");
Expect(1, 13, '\p{^Pattern_White_Space=No}', "");
Expect(1, 13, '\P{Pattern_White_Space=No}', "");
Expect(0, 13, '\P{^Pattern_White_Space=No}', "");
Error('\p{Pat_WS=_ n/a/}');
Error('\P{Pat_WS=_ n/a/}');
Expect(1, 8, '\p{Pat_WS=n}', "");
Expect(0, 8, '\p{^Pat_WS=n}', "");
Expect(0, 8, '\P{Pat_WS=n}', "");
Expect(1, 8, '\P{^Pat_WS=n}', "");
Expect(0, 13, '\p{Pat_WS=n}', "");
Expect(1, 13, '\p{^Pat_WS=n}', "");
Expect(1, 13, '\P{Pat_WS=n}', "");
Expect(0, 13, '\P{^Pat_WS=n}', "");
Expect(1, 8, '\p{Pat_WS=	_n}', "");
Expect(0, 8, '\p{^Pat_WS=	_n}', "");
Expect(0, 8, '\P{Pat_WS=	_n}', "");
Expect(1, 8, '\P{^Pat_WS=	_n}', "");
Expect(0, 13, '\p{Pat_WS=	_n}', "");
Expect(1, 13, '\p{^Pat_WS=	_n}', "");
Expect(1, 13, '\P{Pat_WS=	_n}', "");
Expect(0, 13, '\P{^Pat_WS=	_n}', "");
Error('\p{Is_Pattern_White_Space=-_f:=}');
Error('\P{Is_Pattern_White_Space=-_f:=}');
Expect(1, 8, '\p{Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\p{Is_Pattern_White_Space=	-f}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space=	-f}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space=	-f}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space=	-f}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space=	-f}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space=	-f}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space=	-f}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space=	-f}', "");
Error('\p{Is_Pat_WS=- False:=}');
Error('\P{Is_Pat_WS=- False:=}');
Expect(1, 8, '\p{Is_Pat_WS=false}', "");
Expect(0, 8, '\p{^Is_Pat_WS=false}', "");
Expect(0, 8, '\P{Is_Pat_WS=false}', "");
Expect(1, 8, '\P{^Is_Pat_WS=false}', "");
Expect(0, 13, '\p{Is_Pat_WS=false}', "");
Expect(1, 13, '\p{^Is_Pat_WS=false}', "");
Expect(1, 13, '\P{Is_Pat_WS=false}', "");
Expect(0, 13, '\P{^Is_Pat_WS=false}', "");
Expect(1, 8, '\p{Is_Pat_WS=- False}', "");
Expect(0, 8, '\p{^Is_Pat_WS=- False}', "");
Expect(0, 8, '\P{Is_Pat_WS=- False}', "");
Expect(1, 8, '\P{^Is_Pat_WS=- False}', "");
Expect(0, 13, '\p{Is_Pat_WS=- False}', "");
Expect(1, 13, '\p{^Is_Pat_WS=- False}', "");
Expect(1, 13, '\P{Is_Pat_WS=- False}', "");
Expect(0, 13, '\P{^Is_Pat_WS=- False}', "");
Error('\p{Join_Control=_yes:=}');
Error('\P{Join_Control=_yes:=}');
Expect(1, 8205, '\p{Join_Control=yes}', "");
Expect(0, 8205, '\p{^Join_Control=yes}', "");
Expect(0, 8205, '\P{Join_Control=yes}', "");
Expect(1, 8205, '\P{^Join_Control=yes}', "");
Expect(0, 8203, '\p{Join_Control=yes}', "");
Expect(1, 8203, '\p{^Join_Control=yes}', "");
Expect(1, 8203, '\P{Join_Control=yes}', "");
Expect(0, 8203, '\P{^Join_Control=yes}', "");
Expect(1, 8205, '\p{Join_Control: YES}', "");
Expect(0, 8205, '\p{^Join_Control: YES}', "");
Expect(0, 8205, '\P{Join_Control: YES}', "");
Expect(1, 8205, '\P{^Join_Control: YES}', "");
Expect(0, 8203, '\p{Join_Control: YES}', "");
Expect(1, 8203, '\p{^Join_Control: YES}', "");
Expect(1, 8203, '\P{Join_Control: YES}', "");
Expect(0, 8203, '\P{^Join_Control: YES}', "");
Error('\p{Join_C= /a/Y}');
Error('\P{Join_C= /a/Y}');
Expect(1, 8205, '\p{Join_C=y}', "");
Expect(0, 8205, '\p{^Join_C=y}', "");
Expect(0, 8205, '\P{Join_C=y}', "");
Expect(1, 8205, '\P{^Join_C=y}', "");
Expect(0, 8203, '\p{Join_C=y}', "");
Expect(1, 8203, '\p{^Join_C=y}', "");
Expect(1, 8203, '\P{Join_C=y}', "");
Expect(0, 8203, '\P{^Join_C=y}', "");
Expect(1, 8205, '\p{Join_C=- Y}', "");
Expect(0, 8205, '\p{^Join_C=- Y}', "");
Expect(0, 8205, '\P{Join_C=- Y}', "");
Expect(1, 8205, '\P{^Join_C=- Y}', "");
Expect(0, 8203, '\p{Join_C=- Y}', "");
Expect(1, 8203, '\p{^Join_C=- Y}', "");
Expect(1, 8203, '\P{Join_C=- Y}', "");
Expect(0, 8203, '\P{^Join_C=- Y}', "");
Error('\p{Is_Join_Control=-:=T}');
Error('\P{Is_Join_Control=-:=T}');
Expect(1, 8205, '\p{Is_Join_Control=t}', "");
Expect(0, 8205, '\p{^Is_Join_Control=t}', "");
Expect(0, 8205, '\P{Is_Join_Control=t}', "");
Expect(1, 8205, '\P{^Is_Join_Control=t}', "");
Expect(0, 8203, '\p{Is_Join_Control=t}', "");
Expect(1, 8203, '\p{^Is_Join_Control=t}', "");
Expect(1, 8203, '\P{Is_Join_Control=t}', "");
Expect(0, 8203, '\P{^Is_Join_Control=t}', "");
Expect(1, 8205, '\p{Is_Join_Control=	 T}', "");
Expect(0, 8205, '\p{^Is_Join_Control=	 T}', "");
Expect(0, 8205, '\P{Is_Join_Control=	 T}', "");
Expect(1, 8205, '\P{^Is_Join_Control=	 T}', "");
Expect(0, 8203, '\p{Is_Join_Control=	 T}', "");
Expect(1, 8203, '\p{^Is_Join_Control=	 T}', "");
Expect(1, 8203, '\P{Is_Join_Control=	 T}', "");
Expect(0, 8203, '\P{^Is_Join_Control=	 T}', "");
Error('\p{Is_Join_C=		true:=}');
Error('\P{Is_Join_C=		true:=}');
Expect(1, 8205, '\p{Is_Join_C=true}', "");
Expect(0, 8205, '\p{^Is_Join_C=true}', "");
Expect(0, 8205, '\P{Is_Join_C=true}', "");
Expect(1, 8205, '\P{^Is_Join_C=true}', "");
Expect(0, 8203, '\p{Is_Join_C=true}', "");
Expect(1, 8203, '\p{^Is_Join_C=true}', "");
Expect(1, 8203, '\P{Is_Join_C=true}', "");
Expect(0, 8203, '\P{^Is_Join_C=true}', "");
Expect(1, 8205, '\p{Is_Join_C=_True}', "");
Expect(0, 8205, '\p{^Is_Join_C=_True}', "");
Expect(0, 8205, '\P{Is_Join_C=_True}', "");
Expect(1, 8205, '\P{^Is_Join_C=_True}', "");
Expect(0, 8203, '\p{Is_Join_C=_True}', "");
Expect(1, 8203, '\p{^Is_Join_C=_True}', "");
Expect(1, 8203, '\P{Is_Join_C=_True}', "");
Expect(0, 8203, '\P{^Is_Join_C=_True}', "");
Error('\p{Join_Control= /a/NO}');
Error('\P{Join_Control= /a/NO}');
Expect(1, 8203, '\p{Join_Control=no}', "");
Expect(0, 8203, '\p{^Join_Control=no}', "");
Expect(0, 8203, '\P{Join_Control=no}', "");
Expect(1, 8203, '\P{^Join_Control=no}', "");
Expect(0, 8205, '\p{Join_Control=no}', "");
Expect(1, 8205, '\p{^Join_Control=no}', "");
Expect(1, 8205, '\P{Join_Control=no}', "");
Expect(0, 8205, '\P{^Join_Control=no}', "");
Expect(1, 8203, '\p{Join_Control= _No}', "");
Expect(0, 8203, '\p{^Join_Control= _No}', "");
Expect(0, 8203, '\P{Join_Control= _No}', "");
Expect(1, 8203, '\P{^Join_Control= _No}', "");
Expect(0, 8205, '\p{Join_Control= _No}', "");
Expect(1, 8205, '\p{^Join_Control= _No}', "");
Expect(1, 8205, '\P{Join_Control= _No}', "");
Expect(0, 8205, '\P{^Join_Control= _No}', "");
Error('\p{Join_C= _n:=}');
Error('\P{Join_C= _n:=}');
Expect(1, 8203, '\p{Join_C=n}', "");
Expect(0, 8203, '\p{^Join_C=n}', "");
Expect(0, 8203, '\P{Join_C=n}', "");
Expect(1, 8203, '\P{^Join_C=n}', "");
Expect(0, 8205, '\p{Join_C=n}', "");
Expect(1, 8205, '\p{^Join_C=n}', "");
Expect(1, 8205, '\P{Join_C=n}', "");
Expect(0, 8205, '\P{^Join_C=n}', "");
Expect(1, 8203, '\p{Join_C=-_N}', "");
Expect(0, 8203, '\p{^Join_C=-_N}', "");
Expect(0, 8203, '\P{Join_C=-_N}', "");
Expect(1, 8203, '\P{^Join_C=-_N}', "");
Expect(0, 8205, '\p{Join_C=-_N}', "");
Expect(1, 8205, '\p{^Join_C=-_N}', "");
Expect(1, 8205, '\P{Join_C=-_N}', "");
Expect(0, 8205, '\P{^Join_C=-_N}', "");
Error('\p{Is_Join_Control:	:=	 F}');
Error('\P{Is_Join_Control:	:=	 F}');
Expect(1, 8203, '\p{Is_Join_Control=f}', "");
Expect(0, 8203, '\p{^Is_Join_Control=f}', "");
Expect(0, 8203, '\P{Is_Join_Control=f}', "");
Expect(1, 8203, '\P{^Is_Join_Control=f}', "");
Expect(0, 8205, '\p{Is_Join_Control=f}', "");
Expect(1, 8205, '\p{^Is_Join_Control=f}', "");
Expect(1, 8205, '\P{Is_Join_Control=f}', "");
Expect(0, 8205, '\P{^Is_Join_Control=f}', "");
Expect(1, 8203, '\p{Is_Join_Control=__F}', "");
Expect(0, 8203, '\p{^Is_Join_Control=__F}', "");
Expect(0, 8203, '\P{Is_Join_Control=__F}', "");
Expect(1, 8203, '\P{^Is_Join_Control=__F}', "");
Expect(0, 8205, '\p{Is_Join_Control=__F}', "");
Expect(1, 8205, '\p{^Is_Join_Control=__F}', "");
Expect(1, 8205, '\P{Is_Join_Control=__F}', "");
Expect(0, 8205, '\P{^Is_Join_Control=__F}', "");
Error('\p{Is_Join_C:	/a/-False}');
Error('\P{Is_Join_C:	/a/-False}');
Expect(1, 8203, '\p{Is_Join_C=false}', "");
Expect(0, 8203, '\p{^Is_Join_C=false}', "");
Expect(0, 8203, '\P{Is_Join_C=false}', "");
Expect(1, 8203, '\P{^Is_Join_C=false}', "");
Expect(0, 8205, '\p{Is_Join_C=false}', "");
Expect(1, 8205, '\p{^Is_Join_C=false}', "");
Expect(1, 8205, '\P{Is_Join_C=false}', "");
Expect(0, 8205, '\P{^Is_Join_C=false}', "");
Expect(1, 8203, '\p{Is_Join_C:  False}', "");
Expect(0, 8203, '\p{^Is_Join_C:  False}', "");
Expect(0, 8203, '\P{Is_Join_C:  False}', "");
Expect(1, 8203, '\P{^Is_Join_C:  False}', "");
Expect(0, 8205, '\p{Is_Join_C:  False}', "");
Expect(1, 8205, '\p{^Is_Join_C:  False}', "");
Expect(1, 8205, '\P{Is_Join_C:  False}', "");
Expect(0, 8205, '\P{^Is_Join_C:  False}', "");
Error('\p{Other_Default_Ignorable_Code_Point:	/a/_ Yes}');
Error('\P{Other_Default_Ignorable_Code_Point:	/a/_ Yes}');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point=	-Yes}', 'deprecated');
Error('\p{ODI=	/a/y}');
Error('\P{ODI=	/a/y}');
Expect(1, 847, '\p{ODI=y}', 'deprecated');
Expect(0, 847, '\p{^ODI=y}', 'deprecated');
Expect(0, 847, '\P{ODI=y}', 'deprecated');
Expect(1, 847, '\P{^ODI=y}', 'deprecated');
Expect(0, 846, '\p{ODI=y}', 'deprecated');
Expect(1, 846, '\p{^ODI=y}', 'deprecated');
Expect(1, 846, '\P{ODI=y}', 'deprecated');
Expect(0, 846, '\P{^ODI=y}', 'deprecated');
Expect(1, 847, '\p{ODI=  y}', 'deprecated');
Expect(0, 847, '\p{^ODI=  y}', 'deprecated');
Expect(0, 847, '\P{ODI=  y}', 'deprecated');
Expect(1, 847, '\P{^ODI=  y}', 'deprecated');
Expect(0, 846, '\p{ODI=  y}', 'deprecated');
Expect(1, 846, '\p{^ODI=  y}', 'deprecated');
Expect(1, 846, '\P{ODI=  y}', 'deprecated');
Expect(0, 846, '\P{^ODI=  y}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=_-T:=}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=_-T:=}');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=	-T}', 'deprecated');
Error('\p{Is_ODI=	/a/true}');
Error('\P{Is_ODI=	/a/true}');
Expect(1, 847, '\p{Is_ODI=true}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=true}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=true}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=true}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=true}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=true}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=true}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=true}', 'deprecated');
Expect(1, 847, '\p{Is_ODI=- true}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=- true}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=- true}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=- true}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=- true}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=- true}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=- true}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=- true}', 'deprecated');
Error('\p{Other_Default_Ignorable_Code_Point=-:=no}');
Error('\P{Other_Default_Ignorable_Code_Point=-:=no}');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=	 No}', 'deprecated');
Error('\p{ODI=_:=N}');
Error('\P{ODI=_:=N}');
Expect(1, 846, '\p{ODI:	n}', 'deprecated');
Expect(0, 846, '\p{^ODI:	n}', 'deprecated');
Expect(0, 846, '\P{ODI:	n}', 'deprecated');
Expect(1, 846, '\P{^ODI:	n}', 'deprecated');
Expect(0, 847, '\p{ODI:	n}', 'deprecated');
Expect(1, 847, '\p{^ODI:	n}', 'deprecated');
Expect(1, 847, '\P{ODI:	n}', 'deprecated');
Expect(0, 847, '\P{^ODI:	n}', 'deprecated');
Expect(1, 846, '\p{ODI: -_N}', 'deprecated');
Expect(0, 846, '\p{^ODI: -_N}', 'deprecated');
Expect(0, 846, '\P{ODI: -_N}', 'deprecated');
Expect(1, 846, '\P{^ODI: -_N}', 'deprecated');
Expect(0, 847, '\p{ODI: -_N}', 'deprecated');
Expect(1, 847, '\p{^ODI: -_N}', 'deprecated');
Expect(1, 847, '\P{ODI: -_N}', 'deprecated');
Expect(0, 847, '\P{^ODI: -_N}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=/a/--F}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=/a/--F}');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point:F}', 'deprecated');
Error('\p{Is_ODI=:=_FALSE}');
Error('\P{Is_ODI=:=_FALSE}');
Expect(1, 846, '\p{Is_ODI=false}', 'deprecated');
Expect(0, 846, '\p{^Is_ODI=false}', 'deprecated');
Expect(0, 846, '\P{Is_ODI=false}', 'deprecated');
Expect(1, 846, '\P{^Is_ODI=false}', 'deprecated');
Expect(0, 847, '\p{Is_ODI=false}', 'deprecated');
Expect(1, 847, '\p{^Is_ODI=false}', 'deprecated');
Expect(1, 847, '\P{Is_ODI=false}', 'deprecated');
Expect(0, 847, '\P{^Is_ODI=false}', 'deprecated');
Expect(1, 846, '\p{Is_ODI=	_false}', 'deprecated');
Expect(0, 846, '\p{^Is_ODI=	_false}', 'deprecated');
Expect(0, 846, '\P{Is_ODI=	_false}', 'deprecated');
Expect(1, 846, '\P{^Is_ODI=	_false}', 'deprecated');
Expect(0, 847, '\p{Is_ODI=	_false}', 'deprecated');
Expect(1, 847, '\p{^Is_ODI=	_false}', 'deprecated');
Expect(1, 847, '\P{Is_ODI=	_false}', 'deprecated');
Expect(0, 847, '\P{^Is_ODI=	_false}', 'deprecated');
Error('\p{Cased= :=yes}');
Error('\P{Cased= :=yes}');
Expect(1, 90, '\p{Cased=yes}', "");
Expect(0, 90, '\p{^Cased=yes}', "");
Expect(0, 90, '\P{Cased=yes}', "");
Expect(1, 90, '\P{^Cased=yes}', "");
Expect(0, 64, '\p{Cased=yes}', "");
Expect(1, 64, '\p{^Cased=yes}', "");
Expect(1, 64, '\P{Cased=yes}', "");
Expect(0, 64, '\P{^Cased=yes}', "");
Expect(1, 90, '\p{Cased=	Yes}', "");
Expect(0, 90, '\p{^Cased=	Yes}', "");
Expect(0, 90, '\P{Cased=	Yes}', "");
Expect(1, 90, '\P{^Cased=	Yes}', "");
Expect(0, 64, '\p{Cased=	Yes}', "");
Expect(1, 64, '\p{^Cased=	Yes}', "");
Expect(1, 64, '\P{Cased=	Yes}', "");
Expect(0, 64, '\P{^Cased=	Yes}', "");
Error('\p{Is_Cased=-Y/a/}');
Error('\P{Is_Cased=-Y/a/}');
Expect(1, 90, '\p{Is_Cased=y}', "");
Expect(0, 90, '\p{^Is_Cased=y}', "");
Expect(0, 90, '\P{Is_Cased=y}', "");
Expect(1, 90, '\P{^Is_Cased=y}', "");
Expect(0, 64, '\p{Is_Cased=y}', "");
Expect(1, 64, '\p{^Is_Cased=y}', "");
Expect(1, 64, '\P{Is_Cased=y}', "");
Expect(0, 64, '\P{^Is_Cased=y}', "");
Expect(1, 90, '\p{Is_Cased=__Y}', "");
Expect(0, 90, '\p{^Is_Cased=__Y}', "");
Expect(0, 90, '\P{Is_Cased=__Y}', "");
Expect(1, 90, '\P{^Is_Cased=__Y}', "");
Expect(0, 64, '\p{Is_Cased=__Y}', "");
Expect(1, 64, '\p{^Is_Cased=__Y}', "");
Expect(1, 64, '\P{Is_Cased=__Y}', "");
Expect(0, 64, '\P{^Is_Cased=__Y}', "");
Error('\p{Cased=/a/  T}');
Error('\P{Cased=/a/  T}');
Expect(1, 90, '\p{Cased=t}', "");
Expect(0, 90, '\p{^Cased=t}', "");
Expect(0, 90, '\P{Cased=t}', "");
Expect(1, 90, '\P{^Cased=t}', "");
Expect(0, 64, '\p{Cased=t}', "");
Expect(1, 64, '\p{^Cased=t}', "");
Expect(1, 64, '\P{Cased=t}', "");
Expect(0, 64, '\P{^Cased=t}', "");
Expect(1, 90, '\p{Cased=- T}', "");
Expect(0, 90, '\p{^Cased=- T}', "");
Expect(0, 90, '\P{Cased=- T}', "");
Expect(1, 90, '\P{^Cased=- T}', "");
Expect(0, 64, '\p{Cased=- T}', "");
Expect(1, 64, '\p{^Cased=- T}', "");
Expect(1, 64, '\P{Cased=- T}', "");
Expect(0, 64, '\P{^Cased=- T}', "");
Error('\p{Is_Cased= true/a/}');
Error('\P{Is_Cased= true/a/}');
Expect(1, 90, '\p{Is_Cased: true}', "");
Expect(0, 90, '\p{^Is_Cased: true}', "");
Expect(0, 90, '\P{Is_Cased: true}', "");
Expect(1, 90, '\P{^Is_Cased: true}', "");
Expect(0, 64, '\p{Is_Cased: true}', "");
Expect(1, 64, '\p{^Is_Cased: true}', "");
Expect(1, 64, '\P{Is_Cased: true}', "");
Expect(0, 64, '\P{^Is_Cased: true}', "");
Expect(1, 90, '\p{Is_Cased=-TRUE}', "");
Expect(0, 90, '\p{^Is_Cased=-TRUE}', "");
Expect(0, 90, '\P{Is_Cased=-TRUE}', "");
Expect(1, 90, '\P{^Is_Cased=-TRUE}', "");
Expect(0, 64, '\p{Is_Cased=-TRUE}', "");
Expect(1, 64, '\p{^Is_Cased=-TRUE}', "");
Expect(1, 64, '\P{Is_Cased=-TRUE}', "");
Expect(0, 64, '\P{^Is_Cased=-TRUE}', "");
Error('\p{Cased=-_No:=}');
Error('\P{Cased=-_No:=}');
Expect(1, 64, '\p{Cased=no}', "");
Expect(0, 64, '\p{^Cased=no}', "");
Expect(0, 64, '\P{Cased=no}', "");
Expect(1, 64, '\P{^Cased=no}', "");
Expect(0, 90, '\p{Cased=no}', "");
Expect(1, 90, '\p{^Cased=no}', "");
Expect(1, 90, '\P{Cased=no}', "");
Expect(0, 90, '\P{^Cased=no}', "");
Expect(1, 64, '\p{Cased=__NO}', "");
Expect(0, 64, '\p{^Cased=__NO}', "");
Expect(0, 64, '\P{Cased=__NO}', "");
Expect(1, 64, '\P{^Cased=__NO}', "");
Expect(0, 90, '\p{Cased=__NO}', "");
Expect(1, 90, '\p{^Cased=__NO}', "");
Expect(1, 90, '\P{Cased=__NO}', "");
Expect(0, 90, '\P{^Cased=__NO}', "");
Error('\p{Is_Cased=-N/a/}');
Error('\P{Is_Cased=-N/a/}');
Expect(1, 64, '\p{Is_Cased=n}', "");
Expect(0, 64, '\p{^Is_Cased=n}', "");
Expect(0, 64, '\P{Is_Cased=n}', "");
Expect(1, 64, '\P{^Is_Cased=n}', "");
Expect(0, 90, '\p{Is_Cased=n}', "");
Expect(1, 90, '\p{^Is_Cased=n}', "");
Expect(1, 90, '\P{Is_Cased=n}', "");
Expect(0, 90, '\P{^Is_Cased=n}', "");
Expect(1, 64, '\p{Is_Cased=_-N}', "");
Expect(0, 64, '\p{^Is_Cased=_-N}', "");
Expect(0, 64, '\P{Is_Cased=_-N}', "");
Expect(1, 64, '\P{^Is_Cased=_-N}', "");
Expect(0, 90, '\p{Is_Cased=_-N}', "");
Expect(1, 90, '\p{^Is_Cased=_-N}', "");
Expect(1, 90, '\P{Is_Cased=_-N}', "");
Expect(0, 90, '\P{^Is_Cased=_-N}', "");
Error('\p{Cased=/a/_-F}');
Error('\P{Cased=/a/_-F}');
Expect(1, 64, '\p{Cased: f}', "");
Expect(0, 64, '\p{^Cased: f}', "");
Expect(0, 64, '\P{Cased: f}', "");
Expect(1, 64, '\P{^Cased: f}', "");
Expect(0, 90, '\p{Cased: f}', "");
Expect(1, 90, '\p{^Cased: f}', "");
Expect(1, 90, '\P{Cased: f}', "");
Expect(0, 90, '\P{^Cased: f}', "");
Expect(1, 64, '\p{Cased=- F}', "");
Expect(0, 64, '\p{^Cased=- F}', "");
Expect(0, 64, '\P{Cased=- F}', "");
Expect(1, 64, '\P{^Cased=- F}', "");
Expect(0, 90, '\p{Cased=- F}', "");
Expect(1, 90, '\p{^Cased=- F}', "");
Expect(1, 90, '\P{Cased=- F}', "");
Expect(0, 90, '\P{^Cased=- F}', "");
Error('\p{Is_Cased=:=	FALSE}');
Error('\P{Is_Cased=:=	FALSE}');
Expect(1, 64, '\p{Is_Cased=false}', "");
Expect(0, 64, '\p{^Is_Cased=false}', "");
Expect(0, 64, '\P{Is_Cased=false}', "");
Expect(1, 64, '\P{^Is_Cased=false}', "");
Expect(0, 90, '\p{Is_Cased=false}', "");
Expect(1, 90, '\p{^Is_Cased=false}', "");
Expect(1, 90, '\P{Is_Cased=false}', "");
Expect(0, 90, '\P{^Is_Cased=false}', "");
Expect(1, 64, '\p{Is_Cased=-_False}', "");
Expect(0, 64, '\p{^Is_Cased=-_False}', "");
Expect(0, 64, '\P{Is_Cased=-_False}', "");
Expect(1, 64, '\P{^Is_Cased=-_False}', "");
Expect(0, 90, '\p{Is_Cased=-_False}', "");
Expect(1, 90, '\p{^Is_Cased=-_False}', "");
Expect(1, 90, '\P{Is_Cased=-_False}', "");
Expect(0, 90, '\P{^Is_Cased=-_False}', "");
Error('\p{Joining_Type=:=_	TRANSPARENT}');
Error('\P{Joining_Type=:=_	TRANSPARENT}');
Expect(1, 173, '\p{Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Joining_Type=transparent}', "");
Expect(0, 173, '\P{Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Joining_Type=transparent}', "");
Expect(0, 172, '\p{Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Joining_Type=transparent}', "");
Expect(1, 172, '\P{Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Joining_Type=transparent}', "");
Expect(1, 173, '\p{Joining_Type=Transparent}', "");
Expect(0, 173, '\p{^Joining_Type=Transparent}', "");
Expect(0, 173, '\P{Joining_Type=Transparent}', "");
Expect(1, 173, '\P{^Joining_Type=Transparent}', "");
Expect(0, 172, '\p{Joining_Type=Transparent}', "");
Expect(1, 172, '\p{^Joining_Type=Transparent}', "");
Expect(1, 172, '\P{Joining_Type=Transparent}', "");
Expect(0, 172, '\P{^Joining_Type=Transparent}', "");
Error('\p{Jt:	/a/ T}');
Error('\P{Jt:	/a/ T}');
Expect(1, 173, '\p{Jt=t}', "");
Expect(0, 173, '\p{^Jt=t}', "");
Expect(0, 173, '\P{Jt=t}', "");
Expect(1, 173, '\P{^Jt=t}', "");
Expect(0, 172, '\p{Jt=t}', "");
Expect(1, 172, '\p{^Jt=t}', "");
Expect(1, 172, '\P{Jt=t}', "");
Expect(0, 172, '\P{^Jt=t}', "");
Expect(1, 173, '\p{Jt=_ t}', "");
Expect(0, 173, '\p{^Jt=_ t}', "");
Expect(0, 173, '\P{Jt=_ t}', "");
Expect(1, 173, '\P{^Jt=_ t}', "");
Expect(0, 172, '\p{Jt=_ t}', "");
Expect(1, 172, '\p{^Jt=_ t}', "");
Expect(1, 172, '\P{Jt=_ t}', "");
Expect(0, 172, '\P{^Jt=_ t}', "");
Error('\p{Is_Joining_Type=/a/-	TRANSPARENT}');
Error('\P{Is_Joining_Type=/a/-	TRANSPARENT}');
Expect(1, 173, '\p{Is_Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Is_Joining_Type=transparent}', "");
Expect(0, 173, '\P{Is_Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Is_Joining_Type=transparent}', "");
Expect(0, 172, '\p{Is_Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Is_Joining_Type=transparent}', "");
Expect(1, 172, '\P{Is_Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Is_Joining_Type=transparent}', "");
Expect(1, 173, '\p{Is_Joining_Type=_Transparent}', "");
Expect(0, 173, '\p{^Is_Joining_Type=_Transparent}', "");
Expect(0, 173, '\P{Is_Joining_Type=_Transparent}', "");
Expect(1, 173, '\P{^Is_Joining_Type=_Transparent}', "");
Expect(0, 172, '\p{Is_Joining_Type=_Transparent}', "");
Expect(1, 172, '\p{^Is_Joining_Type=_Transparent}', "");
Expect(1, 172, '\P{Is_Joining_Type=_Transparent}', "");
Expect(0, 172, '\P{^Is_Joining_Type=_Transparent}', "");
Error('\p{Is_Jt=	-T:=}');
Error('\P{Is_Jt=	-T:=}');
Expect(1, 173, '\p{Is_Jt=t}', "");
Expect(0, 173, '\p{^Is_Jt=t}', "");
Expect(0, 173, '\P{Is_Jt=t}', "");
Expect(1, 173, '\P{^Is_Jt=t}', "");
Expect(0, 172, '\p{Is_Jt=t}', "");
Expect(1, 172, '\p{^Is_Jt=t}', "");
Expect(1, 172, '\P{Is_Jt=t}', "");
Expect(0, 172, '\P{^Is_Jt=t}', "");
Expect(1, 173, '\p{Is_Jt=  t}', "");
Expect(0, 173, '\p{^Is_Jt=  t}', "");
Expect(0, 173, '\P{Is_Jt=  t}', "");
Expect(1, 173, '\P{^Is_Jt=  t}', "");
Expect(0, 172, '\p{Is_Jt=  t}', "");
Expect(1, 172, '\p{^Is_Jt=  t}', "");
Expect(1, 172, '\P{Is_Jt=  t}', "");
Expect(0, 172, '\P{^Is_Jt=  t}', "");
Error('\p{Joining_Type=:=_	RightJoining}');
Error('\P{Joining_Type=:=_	RightJoining}');
Expect(1, 1573, '\p{Joining_Type=rightjoining}', "");
Expect(0, 1573, '\p{^Joining_Type=rightjoining}', "");
Expect(0, 1573, '\P{Joining_Type=rightjoining}', "");
Expect(1, 1573, '\P{^Joining_Type=rightjoining}', "");
Expect(0, 1569, '\p{Joining_Type=rightjoining}', "");
Expect(1, 1569, '\p{^Joining_Type=rightjoining}', "");
Expect(1, 1569, '\P{Joining_Type=rightjoining}', "");
Expect(0, 1569, '\P{^Joining_Type=rightjoining}', "");
Expect(1, 1573, '\p{Joining_Type:		-Right_JOINING}', "");
Expect(0, 1573, '\p{^Joining_Type:		-Right_JOINING}', "");
Expect(0, 1573, '\P{Joining_Type:		-Right_JOINING}', "");
Expect(1, 1573, '\P{^Joining_Type:		-Right_JOINING}', "");
Expect(0, 1569, '\p{Joining_Type:		-Right_JOINING}', "");
Expect(1, 1569, '\p{^Joining_Type:		-Right_JOINING}', "");
Expect(1, 1569, '\P{Joining_Type:		-Right_JOINING}', "");
Expect(0, 1569, '\P{^Joining_Type:		-Right_JOINING}', "");
Error('\p{Jt=:=_	R}');
Error('\P{Jt=:=_	R}');
Expect(1, 1573, '\p{Jt=r}', "");
Expect(0, 1573, '\p{^Jt=r}', "");
Expect(0, 1573, '\P{Jt=r}', "");
Expect(1, 1573, '\P{^Jt=r}', "");
Expect(0, 1569, '\p{Jt=r}', "");
Expect(1, 1569, '\p{^Jt=r}', "");
Expect(1, 1569, '\P{Jt=r}', "");
Expect(0, 1569, '\P{^Jt=r}', "");
Expect(1, 1573, '\p{Jt=	-r}', "");
Expect(0, 1573, '\p{^Jt=	-r}', "");
Expect(0, 1573, '\P{Jt=	-r}', "");
Expect(1, 1573, '\P{^Jt=	-r}', "");
Expect(0, 1569, '\p{Jt=	-r}', "");
Expect(1, 1569, '\p{^Jt=	-r}', "");
Expect(1, 1569, '\P{Jt=	-r}', "");
Expect(0, 1569, '\P{^Jt=	-r}', "");
Error('\p{Is_Joining_Type=_/a/RIGHT	JOINING}');
Error('\P{Is_Joining_Type=_/a/RIGHT	JOINING}');
Expect(1, 1573, '\p{Is_Joining_Type=rightjoining}', "");
Expect(0, 1573, '\p{^Is_Joining_Type=rightjoining}', "");
Expect(0, 1573, '\P{Is_Joining_Type=rightjoining}', "");
Expect(1, 1573, '\P{^Is_Joining_Type=rightjoining}', "");
Expect(0, 1569, '\p{Is_Joining_Type=rightjoining}', "");
Expect(1, 1569, '\p{^Is_Joining_Type=rightjoining}', "");
Expect(1, 1569, '\P{Is_Joining_Type=rightjoining}', "");
Expect(0, 1569, '\P{^Is_Joining_Type=rightjoining}', "");
Expect(1, 1573, '\p{Is_Joining_Type=  Right	JOINING}', "");
Expect(0, 1573, '\p{^Is_Joining_Type=  Right	JOINING}', "");
Expect(0, 1573, '\P{Is_Joining_Type=  Right	JOINING}', "");
Expect(1, 1573, '\P{^Is_Joining_Type=  Right	JOINING}', "");
Expect(0, 1569, '\p{Is_Joining_Type=  Right	JOINING}', "");
Expect(1, 1569, '\p{^Is_Joining_Type=  Right	JOINING}', "");
Expect(1, 1569, '\P{Is_Joining_Type=  Right	JOINING}', "");
Expect(0, 1569, '\P{^Is_Joining_Type=  Right	JOINING}', "");
Error('\p{Is_Jt=/a/_ R}');
Error('\P{Is_Jt=/a/_ R}');
Expect(1, 1573, '\p{Is_Jt=r}', "");
Expect(0, 1573, '\p{^Is_Jt=r}', "");
Expect(0, 1573, '\P{Is_Jt=r}', "");
Expect(1, 1573, '\P{^Is_Jt=r}', "");
Expect(0, 1569, '\p{Is_Jt=r}', "");
Expect(1, 1569, '\p{^Is_Jt=r}', "");
Expect(1, 1569, '\P{Is_Jt=r}', "");
Expect(0, 1569, '\P{^Is_Jt=r}', "");
Expect(1, 1573, '\p{Is_Jt=__R}', "");
Expect(0, 1573, '\p{^Is_Jt=__R}', "");
Expect(0, 1573, '\P{Is_Jt=__R}', "");
Expect(1, 1573, '\P{^Is_Jt=__R}', "");
Expect(0, 1569, '\p{Is_Jt=__R}', "");
Expect(1, 1569, '\p{^Is_Jt=__R}', "");
Expect(1, 1569, '\P{Is_Jt=__R}', "");
Expect(0, 1569, '\P{^Is_Jt=__R}', "");
Error('\p{Joining_Type=/a/- JOIN_Causing}');
Error('\P{Joining_Type=/a/- JOIN_Causing}');
Expect(1, 1600, '\p{Joining_Type=joincausing}', "");
Expect(0, 1600, '\p{^Joining_Type=joincausing}', "");
Expect(0, 1600, '\P{Joining_Type=joincausing}', "");
Expect(1, 1600, '\P{^Joining_Type=joincausing}', "");
Expect(0, 1599, '\p{Joining_Type=joincausing}', "");
Expect(1, 1599, '\p{^Joining_Type=joincausing}', "");
Expect(1, 1599, '\P{Joining_Type=joincausing}', "");
Expect(0, 1599, '\P{^Joining_Type=joincausing}', "");
Expect(1, 1600, '\p{Joining_Type=_Join_CAUSING}', "");
Expect(0, 1600, '\p{^Joining_Type=_Join_CAUSING}', "");
Expect(0, 1600, '\P{Joining_Type=_Join_CAUSING}', "");
Expect(1, 1600, '\P{^Joining_Type=_Join_CAUSING}', "");
Expect(0, 1599, '\p{Joining_Type=_Join_CAUSING}', "");
Expect(1, 1599, '\p{^Joining_Type=_Join_CAUSING}', "");
Expect(1, 1599, '\P{Joining_Type=_Join_CAUSING}', "");
Expect(0, 1599, '\P{^Joining_Type=_Join_CAUSING}', "");
Error('\p{Jt= C/a/}');
Error('\P{Jt= C/a/}');
Expect(1, 1600, '\p{Jt=c}', "");
Expect(0, 1600, '\p{^Jt=c}', "");
Expect(0, 1600, '\P{Jt=c}', "");
Expect(1, 1600, '\P{^Jt=c}', "");
Expect(0, 1599, '\p{Jt=c}', "");
Expect(1, 1599, '\p{^Jt=c}', "");
Expect(1, 1599, '\P{Jt=c}', "");
Expect(0, 1599, '\P{^Jt=c}', "");
Expect(1, 1600, '\p{Jt=- C}', "");
Expect(0, 1600, '\p{^Jt=- C}', "");
Expect(0, 1600, '\P{Jt=- C}', "");
Expect(1, 1600, '\P{^Jt=- C}', "");
Expect(0, 1599, '\p{Jt=- C}', "");
Expect(1, 1599, '\p{^Jt=- C}', "");
Expect(1, 1599, '\P{Jt=- C}', "");
Expect(0, 1599, '\P{^Jt=- C}', "");
Error('\p{Is_Joining_Type=-_JOIN:=Causing}');
Error('\P{Is_Joining_Type=-_JOIN:=Causing}');
Expect(1, 1600, '\p{Is_Joining_Type=joincausing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type=joincausing}', "");
Expect(0, 1600, '\P{Is_Joining_Type=joincausing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type=joincausing}', "");
Expect(0, 1599, '\p{Is_Joining_Type=joincausing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type=joincausing}', "");
Expect(1, 1599, '\P{Is_Joining_Type=joincausing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type=joincausing}', "");
Expect(1, 1600, '\p{Is_Joining_Type=	JOINcausing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type=	JOINcausing}', "");
Expect(0, 1600, '\P{Is_Joining_Type=	JOINcausing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type=	JOINcausing}', "");
Expect(0, 1599, '\p{Is_Joining_Type=	JOINcausing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type=	JOINcausing}', "");
Expect(1, 1599, '\P{Is_Joining_Type=	JOINcausing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type=	JOINcausing}', "");
Error('\p{Is_Jt:     C:=}');
Error('\P{Is_Jt:     C:=}');
Expect(1, 1600, '\p{Is_Jt=c}', "");
Expect(0, 1600, '\p{^Is_Jt=c}', "");
Expect(0, 1600, '\P{Is_Jt=c}', "");
Expect(1, 1600, '\P{^Is_Jt=c}', "");
Expect(0, 1599, '\p{Is_Jt=c}', "");
Expect(1, 1599, '\p{^Is_Jt=c}', "");
Expect(1, 1599, '\P{Is_Jt=c}', "");
Expect(0, 1599, '\P{^Is_Jt=c}', "");
Error('\p{Joining_Type: := Non	JOINING}');
Error('\P{Joining_Type: := Non	JOINING}');
Expect(1, 172, '\p{Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Joining_Type=-Non	Joining}', "");
Expect(0, 172, '\p{^Joining_Type=-Non	Joining}', "");
Expect(0, 172, '\P{Joining_Type=-Non	Joining}', "");
Expect(1, 172, '\P{^Joining_Type=-Non	Joining}', "");
Expect(0, 173, '\p{Joining_Type=-Non	Joining}', "");
Expect(1, 173, '\p{^Joining_Type=-Non	Joining}', "");
Expect(1, 173, '\P{Joining_Type=-Non	Joining}', "");
Expect(0, 173, '\P{^Joining_Type=-Non	Joining}', "");
Error('\p{Jt=  U/a/}');
Error('\P{Jt=  U/a/}');
Expect(1, 172, '\p{Jt=u}', "");
Expect(0, 172, '\p{^Jt=u}', "");
Expect(0, 172, '\P{Jt=u}', "");
Expect(1, 172, '\P{^Jt=u}', "");
Expect(0, 173, '\p{Jt=u}', "");
Expect(1, 173, '\p{^Jt=u}', "");
Expect(1, 173, '\P{Jt=u}', "");
Expect(0, 173, '\P{^Jt=u}', "");
Expect(1, 172, '\p{Jt=_	U}', "");
Expect(0, 172, '\p{^Jt=_	U}', "");
Expect(0, 172, '\P{Jt=_	U}', "");
Expect(1, 172, '\P{^Jt=_	U}', "");
Expect(0, 173, '\p{Jt=_	U}', "");
Expect(1, 173, '\p{^Jt=_	U}', "");
Expect(1, 173, '\P{Jt=_	U}', "");
Expect(0, 173, '\P{^Jt=_	U}', "");
Error('\p{Is_Joining_Type=-NON:=JOINING}');
Error('\P{Is_Joining_Type=-NON:=JOINING}');
Expect(1, 172, '\p{Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Is_Joining_Type= _Non-joining}', "");
Expect(0, 172, '\p{^Is_Joining_Type= _Non-joining}', "");
Expect(0, 172, '\P{Is_Joining_Type= _Non-joining}', "");
Expect(1, 172, '\P{^Is_Joining_Type= _Non-joining}', "");
Expect(0, 173, '\p{Is_Joining_Type= _Non-joining}', "");
Expect(1, 173, '\p{^Is_Joining_Type= _Non-joining}', "");
Expect(1, 173, '\P{Is_Joining_Type= _Non-joining}', "");
Expect(0, 173, '\P{^Is_Joining_Type= _Non-joining}', "");
Error('\p{Is_Jt=/a/	u}');
Error('\P{Is_Jt=/a/	u}');
Expect(1, 172, '\p{Is_Jt:	u}', "");
Expect(0, 172, '\p{^Is_Jt:	u}', "");
Expect(0, 172, '\P{Is_Jt:	u}', "");
Expect(1, 172, '\P{^Is_Jt:	u}', "");
Expect(0, 173, '\p{Is_Jt:	u}', "");
Expect(1, 173, '\p{^Is_Jt:	u}', "");
Expect(1, 173, '\P{Is_Jt:	u}', "");
Expect(0, 173, '\P{^Is_Jt:	u}', "");
Expect(1, 172, '\p{Is_Jt:  _U}', "");
Expect(0, 172, '\p{^Is_Jt:  _U}', "");
Expect(0, 172, '\P{Is_Jt:  _U}', "");
Expect(1, 172, '\P{^Is_Jt:  _U}', "");
Expect(0, 173, '\p{Is_Jt:  _U}', "");
Expect(1, 173, '\p{^Is_Jt:  _U}', "");
Expect(1, 173, '\P{Is_Jt:  _U}', "");
Expect(0, 173, '\P{^Is_Jt:  _U}', "");
Error('\p{Joining_Type=__DUAL Joining:=}');
Error('\P{Joining_Type=__DUAL Joining:=}');
Expect(1, 1574, '\p{Joining_Type: dualjoining}', "");
Expect(0, 1574, '\p{^Joining_Type: dualjoining}', "");
Expect(0, 1574, '\P{Joining_Type: dualjoining}', "");
Expect(1, 1574, '\P{^Joining_Type: dualjoining}', "");
Expect(0, 1573, '\p{Joining_Type: dualjoining}', "");
Expect(1, 1573, '\p{^Joining_Type: dualjoining}', "");
Expect(1, 1573, '\P{Joining_Type: dualjoining}', "");
Expect(0, 1573, '\P{^Joining_Type: dualjoining}', "");
Expect(1, 1574, '\p{Joining_Type=	DUALjoining}', "");
Expect(0, 1574, '\p{^Joining_Type=	DUALjoining}', "");
Expect(0, 1574, '\P{Joining_Type=	DUALjoining}', "");
Expect(1, 1574, '\P{^Joining_Type=	DUALjoining}', "");
Expect(0, 1573, '\p{Joining_Type=	DUALjoining}', "");
Expect(1, 1573, '\p{^Joining_Type=	DUALjoining}', "");
Expect(1, 1573, '\P{Joining_Type=	DUALjoining}', "");
Expect(0, 1573, '\P{^Joining_Type=	DUALjoining}', "");
Error('\p{Jt=	 D:=}');
Error('\P{Jt=	 D:=}');
Expect(1, 1574, '\p{Jt: d}', "");
Expect(0, 1574, '\p{^Jt: d}', "");
Expect(0, 1574, '\P{Jt: d}', "");
Expect(1, 1574, '\P{^Jt: d}', "");
Expect(0, 1573, '\p{Jt: d}', "");
Expect(1, 1573, '\p{^Jt: d}', "");
Expect(1, 1573, '\P{Jt: d}', "");
Expect(0, 1573, '\P{^Jt: d}', "");
Expect(1, 1574, '\p{Jt=	-D}', "");
Expect(0, 1574, '\p{^Jt=	-D}', "");
Expect(0, 1574, '\P{Jt=	-D}', "");
Expect(1, 1574, '\P{^Jt=	-D}', "");
Expect(0, 1573, '\p{Jt=	-D}', "");
Expect(1, 1573, '\p{^Jt=	-D}', "");
Expect(1, 1573, '\P{Jt=	-D}', "");
Expect(0, 1573, '\P{^Jt=	-D}', "");
Error('\p{Is_Joining_Type=	DualJoining:=}');
Error('\P{Is_Joining_Type=	DualJoining:=}');
Expect(1, 1574, '\p{Is_Joining_Type=dualjoining}', "");
Expect(0, 1574, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1574, '\P{Is_Joining_Type=dualjoining}', "");
Expect(1, 1574, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1573, '\p{Is_Joining_Type=dualjoining}', "");
Expect(1, 1573, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1573, '\P{Is_Joining_Type=dualjoining}', "");
Expect(0, 1573, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1574, '\p{Is_Joining_Type= dual_JOINING}', "");
Expect(0, 1574, '\p{^Is_Joining_Type= dual_JOINING}', "");
Expect(0, 1574, '\P{Is_Joining_Type= dual_JOINING}', "");
Expect(1, 1574, '\P{^Is_Joining_Type= dual_JOINING}', "");
Expect(0, 1573, '\p{Is_Joining_Type= dual_JOINING}', "");
Expect(1, 1573, '\p{^Is_Joining_Type= dual_JOINING}', "");
Expect(1, 1573, '\P{Is_Joining_Type= dual_JOINING}', "");
Expect(0, 1573, '\P{^Is_Joining_Type= dual_JOINING}', "");
Error('\p{Is_Jt:   	:=d}');
Error('\P{Is_Jt:   	:=d}');
Expect(1, 1574, '\p{Is_Jt=d}', "");
Expect(0, 1574, '\p{^Is_Jt=d}', "");
Expect(0, 1574, '\P{Is_Jt=d}', "");
Expect(1, 1574, '\P{^Is_Jt=d}', "");
Expect(0, 1573, '\p{Is_Jt=d}', "");
Expect(1, 1573, '\p{^Is_Jt=d}', "");
Expect(1, 1573, '\P{Is_Jt=d}', "");
Expect(0, 1573, '\P{^Is_Jt=d}', "");
Expect(1, 1574, '\p{Is_Jt=D}', "");
Expect(0, 1574, '\p{^Is_Jt=D}', "");
Expect(0, 1574, '\P{Is_Jt=D}', "");
Expect(1, 1574, '\P{^Is_Jt=D}', "");
Expect(0, 1573, '\p{Is_Jt=D}', "");
Expect(1, 1573, '\p{^Is_Jt=D}', "");
Expect(1, 1573, '\P{Is_Jt=D}', "");
Expect(0, 1573, '\P{^Is_Jt=D}', "");
Error('\p{Joining_Type= /a/Leftjoining}');
Error('\P{Joining_Type= /a/Leftjoining}');
Expect(0, 1, '\p{Joining_Type:   leftjoining}', "");
Expect(1, 1, '\p{^Joining_Type:   leftjoining}', "");
Expect(1, 1, '\P{Joining_Type:   leftjoining}', "");
Expect(0, 1, '\P{^Joining_Type:   leftjoining}', "");
Expect(0, 1, '\p{Joining_Type=LEFT-Joining}', "");
Expect(1, 1, '\p{^Joining_Type=LEFT-Joining}', "");
Expect(1, 1, '\P{Joining_Type=LEFT-Joining}', "");
Expect(0, 1, '\P{^Joining_Type=LEFT-Joining}', "");
Error('\p{Jt=_/a/l}');
Error('\P{Jt=_/a/l}');
Expect(0, 1, '\p{Jt=l}', "");
Expect(1, 1, '\p{^Jt=l}', "");
Expect(1, 1, '\P{Jt=l}', "");
Expect(0, 1, '\P{^Jt=l}', "");
Expect(0, 1, '\p{Jt=L}', "");
Expect(1, 1, '\p{^Jt=L}', "");
Expect(1, 1, '\P{Jt=L}', "");
Expect(0, 1, '\P{^Jt=L}', "");
Error('\p{Is_Joining_Type=_/a/LEFT	JOINING}');
Error('\P{Is_Joining_Type=_/a/LEFT	JOINING}');
Expect(0, 1, '\p{Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\p{^Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\P{Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\P{^Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\p{Is_Joining_Type=--Leftjoining}', "");
Expect(1, 1, '\p{^Is_Joining_Type=--Leftjoining}', "");
Expect(1, 1, '\P{Is_Joining_Type=--Leftjoining}', "");
Expect(0, 1, '\P{^Is_Joining_Type=--Leftjoining}', "");
Error('\p{Is_Jt=/a/-_l}');
Error('\P{Is_Jt=/a/-_l}');
Expect(0, 1, '\p{Is_Jt=l}', "");
Expect(1, 1, '\p{^Is_Jt=l}', "");
Expect(1, 1, '\P{Is_Jt=l}', "");
Expect(0, 1, '\P{^Is_Jt=l}', "");
Expect(0, 1, '\p{Is_Jt=-_l}', "");
Expect(1, 1, '\p{^Is_Jt=-_l}', "");
Expect(1, 1, '\P{Is_Jt=-_l}', "");
Expect(0, 1, '\P{^Is_Jt=-_l}', "");
Error('\p{ID_Start=/a/	Yes}');
Error('\P{ID_Start=/a/	Yes}');
Expect(1, 90, '\p{ID_Start=yes}', "");
Expect(0, 90, '\p{^ID_Start=yes}', "");
Expect(0, 90, '\P{ID_Start=yes}', "");
Expect(1, 90, '\P{^ID_Start=yes}', "");
Expect(0, 64, '\p{ID_Start=yes}', "");
Expect(1, 64, '\p{^ID_Start=yes}', "");
Expect(1, 64, '\P{ID_Start=yes}', "");
Expect(0, 64, '\P{^ID_Start=yes}', "");
Expect(1, 90, '\p{ID_Start=_	yes}', "");
Expect(0, 90, '\p{^ID_Start=_	yes}', "");
Expect(0, 90, '\P{ID_Start=_	yes}', "");
Expect(1, 90, '\P{^ID_Start=_	yes}', "");
Expect(0, 64, '\p{ID_Start=_	yes}', "");
Expect(1, 64, '\p{^ID_Start=_	yes}', "");
Expect(1, 64, '\P{ID_Start=_	yes}', "");
Expect(0, 64, '\P{^ID_Start=_	yes}', "");
Error('\p{IDS=/a/_y}');
Error('\P{IDS=/a/_y}');
Expect(1, 90, '\p{IDS=y}', "");
Expect(0, 90, '\p{^IDS=y}', "");
Expect(0, 90, '\P{IDS=y}', "");
Expect(1, 90, '\P{^IDS=y}', "");
Expect(0, 64, '\p{IDS=y}', "");
Expect(1, 64, '\p{^IDS=y}', "");
Expect(1, 64, '\P{IDS=y}', "");
Expect(0, 64, '\P{^IDS=y}', "");
Expect(1, 90, '\p{IDS= _Y}', "");
Expect(0, 90, '\p{^IDS= _Y}', "");
Expect(0, 90, '\P{IDS= _Y}', "");
Expect(1, 90, '\P{^IDS= _Y}', "");
Expect(0, 64, '\p{IDS= _Y}', "");
Expect(1, 64, '\p{^IDS= _Y}', "");
Expect(1, 64, '\P{IDS= _Y}', "");
Expect(0, 64, '\P{^IDS= _Y}', "");
Error('\p{Is_ID_Start:   _-T/a/}');
Error('\P{Is_ID_Start:   _-T/a/}');
Expect(1, 90, '\p{Is_ID_Start=t}', "");
Expect(0, 90, '\p{^Is_ID_Start=t}', "");
Expect(0, 90, '\P{Is_ID_Start=t}', "");
Expect(1, 90, '\P{^Is_ID_Start=t}', "");
Expect(0, 64, '\p{Is_ID_Start=t}', "");
Expect(1, 64, '\p{^Is_ID_Start=t}', "");
Expect(1, 64, '\P{Is_ID_Start=t}', "");
Expect(0, 64, '\P{^Is_ID_Start=t}', "");
Expect(1, 90, '\p{Is_ID_Start=	 t}', "");
Expect(0, 90, '\p{^Is_ID_Start=	 t}', "");
Expect(0, 90, '\P{Is_ID_Start=	 t}', "");
Expect(1, 90, '\P{^Is_ID_Start=	 t}', "");
Expect(0, 64, '\p{Is_ID_Start=	 t}', "");
Expect(1, 64, '\p{^Is_ID_Start=	 t}', "");
Expect(1, 64, '\P{Is_ID_Start=	 t}', "");
Expect(0, 64, '\P{^Is_ID_Start=	 t}', "");
Error('\p{Is_IDS=_-True:=}');
Error('\P{Is_IDS=_-True:=}');
Expect(1, 90, '\p{Is_IDS=true}', "");
Expect(0, 90, '\p{^Is_IDS=true}', "");
Expect(0, 90, '\P{Is_IDS=true}', "");
Expect(1, 90, '\P{^Is_IDS=true}', "");
Expect(0, 64, '\p{Is_IDS=true}', "");
Expect(1, 64, '\p{^Is_IDS=true}', "");
Expect(1, 64, '\P{Is_IDS=true}', "");
Expect(0, 64, '\P{^Is_IDS=true}', "");
Expect(1, 90, '\p{Is_IDS: --TRUE}', "");
Expect(0, 90, '\p{^Is_IDS: --TRUE}', "");
Expect(0, 90, '\P{Is_IDS: --TRUE}', "");
Expect(1, 90, '\P{^Is_IDS: --TRUE}', "");
Expect(0, 64, '\p{Is_IDS: --TRUE}', "");
Expect(1, 64, '\p{^Is_IDS: --TRUE}', "");
Expect(1, 64, '\P{Is_IDS: --TRUE}', "");
Expect(0, 64, '\P{^Is_IDS: --TRUE}', "");
Error('\p{ID_Start=  NO:=}');
Error('\P{ID_Start=  NO:=}');
Expect(1, 64, '\p{ID_Start=no}', "");
Expect(0, 64, '\p{^ID_Start=no}', "");
Expect(0, 64, '\P{ID_Start=no}', "");
Expect(1, 64, '\P{^ID_Start=no}', "");
Expect(0, 90, '\p{ID_Start=no}', "");
Expect(1, 90, '\p{^ID_Start=no}', "");
Expect(1, 90, '\P{ID_Start=no}', "");
Expect(0, 90, '\P{^ID_Start=no}', "");
Expect(1, 64, '\p{ID_Start= No}', "");
Expect(0, 64, '\p{^ID_Start= No}', "");
Expect(0, 64, '\P{ID_Start= No}', "");
Expect(1, 64, '\P{^ID_Start= No}', "");
Expect(0, 90, '\p{ID_Start= No}', "");
Expect(1, 90, '\p{^ID_Start= No}', "");
Expect(1, 90, '\P{ID_Start= No}', "");
Expect(0, 90, '\P{^ID_Start= No}', "");
Error('\p{IDS=/a/_-N}');
Error('\P{IDS=/a/_-N}');
Expect(1, 64, '\p{IDS=n}', "");
Expect(0, 64, '\p{^IDS=n}', "");
Expect(0, 64, '\P{IDS=n}', "");
Expect(1, 64, '\P{^IDS=n}', "");
Expect(0, 90, '\p{IDS=n}', "");
Expect(1, 90, '\p{^IDS=n}', "");
Expect(1, 90, '\P{IDS=n}', "");
Expect(0, 90, '\P{^IDS=n}', "");
Expect(1, 64, '\p{IDS= n}', "");
Expect(0, 64, '\p{^IDS= n}', "");
Expect(0, 64, '\P{IDS= n}', "");
Expect(1, 64, '\P{^IDS= n}', "");
Expect(0, 90, '\p{IDS= n}', "");
Expect(1, 90, '\p{^IDS= n}', "");
Expect(1, 90, '\P{IDS= n}', "");
Expect(0, 90, '\P{^IDS= n}', "");
Error('\p{Is_ID_Start:   _/a/f}');
Error('\P{Is_ID_Start:   _/a/f}');
Expect(1, 64, '\p{Is_ID_Start=f}', "");
Expect(0, 64, '\p{^Is_ID_Start=f}', "");
Expect(0, 64, '\P{Is_ID_Start=f}', "");
Expect(1, 64, '\P{^Is_ID_Start=f}', "");
Expect(0, 90, '\p{Is_ID_Start=f}', "");
Expect(1, 90, '\p{^Is_ID_Start=f}', "");
Expect(1, 90, '\P{Is_ID_Start=f}', "");
Expect(0, 90, '\P{^Is_ID_Start=f}', "");
Expect(1, 64, '\p{Is_ID_Start: 		F}', "");
Expect(0, 64, '\p{^Is_ID_Start: 		F}', "");
Expect(0, 64, '\P{Is_ID_Start: 		F}', "");
Expect(1, 64, '\P{^Is_ID_Start: 		F}', "");
Expect(0, 90, '\p{Is_ID_Start: 		F}', "");
Expect(1, 90, '\p{^Is_ID_Start: 		F}', "");
Expect(1, 90, '\P{Is_ID_Start: 		F}', "");
Expect(0, 90, '\P{^Is_ID_Start: 		F}', "");
Error('\p{Is_IDS=	/a/FALSE}');
Error('\P{Is_IDS=	/a/FALSE}');
Expect(1, 64, '\p{Is_IDS=false}', "");
Expect(0, 64, '\p{^Is_IDS=false}', "");
Expect(0, 64, '\P{Is_IDS=false}', "");
Expect(1, 64, '\P{^Is_IDS=false}', "");
Expect(0, 90, '\p{Is_IDS=false}', "");
Expect(1, 90, '\p{^Is_IDS=false}', "");
Expect(1, 90, '\P{Is_IDS=false}', "");
Expect(0, 90, '\P{^Is_IDS=false}', "");
Expect(1, 64, '\p{Is_IDS= -FALSE}', "");
Expect(0, 64, '\p{^Is_IDS= -FALSE}', "");
Expect(0, 64, '\P{Is_IDS= -FALSE}', "");
Expect(1, 64, '\P{^Is_IDS= -FALSE}', "");
Expect(0, 90, '\p{Is_IDS= -FALSE}', "");
Expect(1, 90, '\p{^Is_IDS= -FALSE}', "");
Expect(1, 90, '\P{Is_IDS= -FALSE}', "");
Expect(0, 90, '\P{^Is_IDS= -FALSE}', "");
Error('\p{NFC_Quick_Check=/a/	Yes}');
Error('\P{NFC_Quick_Check=/a/	Yes}');
Expect(1, 767, '\p{NFC_Quick_Check=yes}', "");
Expect(0, 767, '\p{^NFC_Quick_Check=yes}', "");
Expect(0, 767, '\P{NFC_Quick_Check=yes}', "");
Expect(1, 767, '\P{^NFC_Quick_Check=yes}', "");
Expect(0, 772, '\p{NFC_Quick_Check=yes}', "");
Expect(1, 772, '\p{^NFC_Quick_Check=yes}', "");
Expect(1, 772, '\P{NFC_Quick_Check=yes}', "");
Expect(0, 772, '\P{^NFC_Quick_Check=yes}', "");
Expect(1, 767, '\p{NFC_Quick_Check=- YES}', "");
Expect(0, 767, '\p{^NFC_Quick_Check=- YES}', "");
Expect(0, 767, '\P{NFC_Quick_Check=- YES}', "");
Expect(1, 767, '\P{^NFC_Quick_Check=- YES}', "");
Expect(0, 772, '\p{NFC_Quick_Check=- YES}', "");
Expect(1, 772, '\p{^NFC_Quick_Check=- YES}', "");
Expect(1, 772, '\P{NFC_Quick_Check=- YES}', "");
Expect(0, 772, '\P{^NFC_Quick_Check=- YES}', "");
Error('\p{NFC_QC=_:=Y}');
Error('\P{NFC_QC=_:=Y}');
Expect(1, 767, '\p{NFC_QC=y}', "");
Expect(0, 767, '\p{^NFC_QC=y}', "");
Expect(0, 767, '\P{NFC_QC=y}', "");
Expect(1, 767, '\P{^NFC_QC=y}', "");
Expect(0, 772, '\p{NFC_QC=y}', "");
Expect(1, 772, '\p{^NFC_QC=y}', "");
Expect(1, 772, '\P{NFC_QC=y}', "");
Expect(0, 772, '\P{^NFC_QC=y}', "");
Expect(1, 767, '\p{NFC_QC=-y}', "");
Expect(0, 767, '\p{^NFC_QC=-y}', "");
Expect(0, 767, '\P{NFC_QC=-y}', "");
Expect(1, 767, '\P{^NFC_QC=-y}', "");
Expect(0, 772, '\p{NFC_QC=-y}', "");
Expect(1, 772, '\p{^NFC_QC=-y}', "");
Expect(1, 772, '\P{NFC_QC=-y}', "");
Expect(0, 772, '\P{^NFC_QC=-y}', "");
Error('\p{Is_NFC_Quick_Check:   /a/ Yes}');
Error('\P{Is_NFC_Quick_Check:   /a/ Yes}');
Expect(1, 767, '\p{Is_NFC_Quick_Check=yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check=yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check=yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check=yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check=yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check=yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check=yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check=yes}', "");
Expect(1, 767, '\p{Is_NFC_Quick_Check=_-Yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check=_-Yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check=_-Yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check=_-Yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check=_-Yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check=_-Yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check=_-Yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check=_-Yes}', "");
Error('\p{Is_NFC_QC=- y/a/}');
Error('\P{Is_NFC_QC=- y/a/}');
Expect(1, 767, '\p{Is_NFC_QC=y}', "");
Expect(0, 767, '\p{^Is_NFC_QC=y}', "");
Expect(0, 767, '\P{Is_NFC_QC=y}', "");
Expect(1, 767, '\P{^Is_NFC_QC=y}', "");
Expect(0, 772, '\p{Is_NFC_QC=y}', "");
Expect(1, 772, '\p{^Is_NFC_QC=y}', "");
Expect(1, 772, '\P{Is_NFC_QC=y}', "");
Expect(0, 772, '\P{^Is_NFC_QC=y}', "");
Expect(1, 767, '\p{Is_NFC_QC= 	Y}', "");
Expect(0, 767, '\p{^Is_NFC_QC= 	Y}', "");
Expect(0, 767, '\P{Is_NFC_QC= 	Y}', "");
Expect(1, 767, '\P{^Is_NFC_QC= 	Y}', "");
Expect(0, 772, '\p{Is_NFC_QC= 	Y}', "");
Expect(1, 772, '\p{^Is_NFC_QC= 	Y}', "");
Expect(1, 772, '\P{Is_NFC_QC= 	Y}', "");
Expect(0, 772, '\P{^Is_NFC_QC= 	Y}', "");
Error('\p{NFC_Quick_Check=:= NO}');
Error('\P{NFC_Quick_Check=:= NO}');
Expect(1, 833, '\p{NFC_Quick_Check:	no}', "");
Expect(0, 833, '\p{^NFC_Quick_Check:	no}', "");
Expect(0, 833, '\P{NFC_Quick_Check:	no}', "");
Expect(1, 833, '\P{^NFC_Quick_Check:	no}', "");
Expect(0, 831, '\p{NFC_Quick_Check:	no}', "");
Expect(1, 831, '\p{^NFC_Quick_Check:	no}', "");
Expect(1, 831, '\P{NFC_Quick_Check:	no}', "");
Expect(0, 831, '\P{^NFC_Quick_Check:	no}', "");
Expect(1, 833, '\p{NFC_Quick_Check=_-No}', "");
Expect(0, 833, '\p{^NFC_Quick_Check=_-No}', "");
Expect(0, 833, '\P{NFC_Quick_Check=_-No}', "");
Expect(1, 833, '\P{^NFC_Quick_Check=_-No}', "");
Expect(0, 831, '\p{NFC_Quick_Check=_-No}', "");
Expect(1, 831, '\p{^NFC_Quick_Check=_-No}', "");
Expect(1, 831, '\P{NFC_Quick_Check=_-No}', "");
Expect(0, 831, '\P{^NFC_Quick_Check=_-No}', "");
Error('\p{NFC_QC=/a/ 	N}');
Error('\P{NFC_QC=/a/ 	N}');
Expect(1, 833, '\p{NFC_QC=n}', "");
Expect(0, 833, '\p{^NFC_QC=n}', "");
Expect(0, 833, '\P{NFC_QC=n}', "");
Expect(1, 833, '\P{^NFC_QC=n}', "");
Expect(0, 831, '\p{NFC_QC=n}', "");
Expect(1, 831, '\p{^NFC_QC=n}', "");
Expect(1, 831, '\P{NFC_QC=n}', "");
Expect(0, 831, '\P{^NFC_QC=n}', "");
Expect(1, 833, '\p{NFC_QC=		n}', "");
Expect(0, 833, '\p{^NFC_QC=		n}', "");
Expect(0, 833, '\P{NFC_QC=		n}', "");
Expect(1, 833, '\P{^NFC_QC=		n}', "");
Expect(0, 831, '\p{NFC_QC=		n}', "");
Expect(1, 831, '\p{^NFC_QC=		n}', "");
Expect(1, 831, '\P{NFC_QC=		n}', "");
Expect(0, 831, '\P{^NFC_QC=		n}', "");
Error('\p{Is_NFC_Quick_Check=/a/ No}');
Error('\P{Is_NFC_Quick_Check=/a/ No}');
Expect(1, 833, '\p{Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\p{Is_NFC_Quick_Check=	 no}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check=	 no}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check=	 no}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check=	 no}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check=	 no}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check=	 no}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check=	 no}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check=	 no}', "");
Error('\p{Is_NFC_QC=-:=N}');
Error('\P{Is_NFC_QC=-:=N}');
Expect(1, 833, '\p{Is_NFC_QC=n}', "");
Expect(0, 833, '\p{^Is_NFC_QC=n}', "");
Expect(0, 833, '\P{Is_NFC_QC=n}', "");
Expect(1, 833, '\P{^Is_NFC_QC=n}', "");
Expect(0, 831, '\p{Is_NFC_QC=n}', "");
Expect(1, 831, '\p{^Is_NFC_QC=n}', "");
Expect(1, 831, '\P{Is_NFC_QC=n}', "");
Expect(0, 831, '\P{^Is_NFC_QC=n}', "");
Expect(1, 833, '\p{Is_NFC_QC=-	n}', "");
Expect(0, 833, '\p{^Is_NFC_QC=-	n}', "");
Expect(0, 833, '\P{Is_NFC_QC=-	n}', "");
Expect(1, 833, '\P{^Is_NFC_QC=-	n}', "");
Expect(0, 831, '\p{Is_NFC_QC=-	n}', "");
Expect(1, 831, '\p{^Is_NFC_QC=-	n}', "");
Expect(1, 831, '\P{Is_NFC_QC=-	n}', "");
Expect(0, 831, '\P{^Is_NFC_QC=-	n}', "");
Error('\p{NFC_Quick_Check= -MAYBE:=}');
Error('\P{NFC_Quick_Check= -MAYBE:=}');
Expect(1, 772, '\p{NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{NFC_Quick_Check=  MAYBE}', "");
Expect(0, 772, '\p{^NFC_Quick_Check=  MAYBE}', "");
Expect(0, 772, '\P{NFC_Quick_Check=  MAYBE}', "");
Expect(1, 772, '\P{^NFC_Quick_Check=  MAYBE}', "");
Expect(0, 767, '\p{NFC_Quick_Check=  MAYBE}', "");
Expect(1, 767, '\p{^NFC_Quick_Check=  MAYBE}', "");
Expect(1, 767, '\P{NFC_Quick_Check=  MAYBE}', "");
Expect(0, 767, '\P{^NFC_Quick_Check=  MAYBE}', "");
Error('\p{NFC_QC=  m:=}');
Error('\P{NFC_QC=  m:=}');
Expect(1, 772, '\p{NFC_QC=m}', "");
Expect(0, 772, '\p{^NFC_QC=m}', "");
Expect(0, 772, '\P{NFC_QC=m}', "");
Expect(1, 772, '\P{^NFC_QC=m}', "");
Expect(0, 767, '\p{NFC_QC=m}', "");
Expect(1, 767, '\p{^NFC_QC=m}', "");
Expect(1, 767, '\P{NFC_QC=m}', "");
Expect(0, 767, '\P{^NFC_QC=m}', "");
Expect(1, 772, '\p{NFC_QC:   	M}', "");
Expect(0, 772, '\p{^NFC_QC:   	M}', "");
Expect(0, 772, '\P{NFC_QC:   	M}', "");
Expect(1, 772, '\P{^NFC_QC:   	M}', "");
Expect(0, 767, '\p{NFC_QC:   	M}', "");
Expect(1, 767, '\p{^NFC_QC:   	M}', "");
Expect(1, 767, '\P{NFC_QC:   	M}', "");
Expect(0, 767, '\P{^NFC_QC:   	M}', "");
Error('\p{Is_NFC_Quick_Check=_/a/MAYBE}');
Error('\P{Is_NFC_Quick_Check=_/a/MAYBE}');
Expect(1, 772, '\p{Is_NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{Is_NFC_Quick_Check=		Maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check=		Maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check=		Maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check=		Maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check=		Maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check=		Maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check=		Maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check=		Maybe}', "");
Error('\p{Is_NFC_QC=	-M:=}');
Error('\P{Is_NFC_QC=	-M:=}');
Expect(1, 772, '\p{Is_NFC_QC=m}', "");
Expect(0, 772, '\p{^Is_NFC_QC=m}', "");
Expect(0, 772, '\P{Is_NFC_QC=m}', "");
Expect(1, 772, '\P{^Is_NFC_QC=m}', "");
Expect(0, 767, '\p{Is_NFC_QC=m}', "");
Expect(1, 767, '\p{^Is_NFC_QC=m}', "");
Expect(1, 767, '\P{Is_NFC_QC=m}', "");
Expect(0, 767, '\P{^Is_NFC_QC=m}', "");
Expect(1, 772, '\p{Is_NFC_QC:	-m}', "");
Expect(0, 772, '\p{^Is_NFC_QC:	-m}', "");
Expect(0, 772, '\P{Is_NFC_QC:	-m}', "");
Expect(1, 772, '\P{^Is_NFC_QC:	-m}', "");
Expect(0, 767, '\p{Is_NFC_QC:	-m}', "");
Expect(1, 767, '\p{^Is_NFC_QC:	-m}', "");
Expect(1, 767, '\P{Is_NFC_QC:	-m}', "");
Expect(0, 767, '\P{^Is_NFC_QC:	-m}', "");
Error('\p{Word_Break=_newline/a/}');
Error('\P{Word_Break=_newline/a/}');
Expect(1, 12, '\p{Word_Break:	newline}', "");
Expect(0, 12, '\p{^Word_Break:	newline}', "");
Expect(0, 12, '\P{Word_Break:	newline}', "");
Expect(1, 12, '\P{^Word_Break:	newline}', "");
Expect(0, 10, '\p{Word_Break:	newline}', "");
Expect(1, 10, '\p{^Word_Break:	newline}', "");
Expect(1, 10, '\P{Word_Break:	newline}', "");
Expect(0, 10, '\P{^Word_Break:	newline}', "");
Expect(1, 12, '\p{Word_Break=__Newline}', "");
Expect(0, 12, '\p{^Word_Break=__Newline}', "");
Expect(0, 12, '\P{Word_Break=__Newline}', "");
Expect(1, 12, '\P{^Word_Break=__Newline}', "");
Expect(0, 10, '\p{Word_Break=__Newline}', "");
Expect(1, 10, '\p{^Word_Break=__Newline}', "");
Expect(1, 10, '\P{Word_Break=__Newline}', "");
Expect(0, 10, '\P{^Word_Break=__Newline}', "");
Error('\p{WB=_NL/a/}');
Error('\P{WB=_NL/a/}');
Expect(1, 12, '\p{WB=nl}', "");
Expect(0, 12, '\p{^WB=nl}', "");
Expect(0, 12, '\P{WB=nl}', "");
Expect(1, 12, '\P{^WB=nl}', "");
Expect(0, 10, '\p{WB=nl}', "");
Expect(1, 10, '\p{^WB=nl}', "");
Expect(1, 10, '\P{WB=nl}', "");
Expect(0, 10, '\P{^WB=nl}', "");
Expect(1, 12, '\p{WB=	NL}', "");
Expect(0, 12, '\p{^WB=	NL}', "");
Expect(0, 12, '\P{WB=	NL}', "");
Expect(1, 12, '\P{^WB=	NL}', "");
Expect(0, 10, '\p{WB=	NL}', "");
Expect(1, 10, '\p{^WB=	NL}', "");
Expect(1, 10, '\P{WB=	NL}', "");
Expect(0, 10, '\P{^WB=	NL}', "");
Error('\p{Is_Word_Break=	_NEWLINE/a/}');
Error('\P{Is_Word_Break=	_NEWLINE/a/}');
Expect(1, 12, '\p{Is_Word_Break=newline}', "");
Expect(0, 12, '\p{^Is_Word_Break=newline}', "");
Expect(0, 12, '\P{Is_Word_Break=newline}', "");
Expect(1, 12, '\P{^Is_Word_Break=newline}', "");
Expect(0, 10, '\p{Is_Word_Break=newline}', "");
Expect(1, 10, '\p{^Is_Word_Break=newline}', "");
Expect(1, 10, '\P{Is_Word_Break=newline}', "");
Expect(0, 10, '\P{^Is_Word_Break=newline}', "");
Expect(1, 12, '\p{Is_Word_Break=	 newline}', "");
Expect(0, 12, '\p{^Is_Word_Break=	 newline}', "");
Expect(0, 12, '\P{Is_Word_Break=	 newline}', "");
Expect(1, 12, '\P{^Is_Word_Break=	 newline}', "");
Expect(0, 10, '\p{Is_Word_Break=	 newline}', "");
Expect(1, 10, '\p{^Is_Word_Break=	 newline}', "");
Expect(1, 10, '\P{Is_Word_Break=	 newline}', "");
Expect(0, 10, '\P{^Is_Word_Break=	 newline}', "");
Error('\p{Is_WB=-:=NL}');
Error('\P{Is_WB=-:=NL}');
Expect(1, 12, '\p{Is_WB=nl}', "");
Expect(0, 12, '\p{^Is_WB=nl}', "");
Expect(0, 12, '\P{Is_WB=nl}', "");
Expect(1, 12, '\P{^Is_WB=nl}', "");
Expect(0, 10, '\p{Is_WB=nl}', "");
Expect(1, 10, '\p{^Is_WB=nl}', "");
Expect(1, 10, '\P{Is_WB=nl}', "");
Expect(0, 10, '\P{^Is_WB=nl}', "");
Expect(1, 12, '\p{Is_WB=_nl}', "");
Expect(0, 12, '\p{^Is_WB=_nl}', "");
Expect(0, 12, '\P{Is_WB=_nl}', "");
Expect(1, 12, '\P{^Is_WB=_nl}', "");
Expect(0, 10, '\p{Is_WB=_nl}', "");
Expect(1, 10, '\p{^Is_WB=_nl}', "");
Expect(1, 10, '\P{Is_WB=_nl}', "");
Expect(0, 10, '\P{^Is_WB=_nl}', "");
Error('\p{Word_Break=/a/	 ALetter}');
Error('\P{Word_Break=/a/	 ALetter}');
Expect(1, 90, '\p{Word_Break=aletter}', "");
Expect(0, 90, '\p{^Word_Break=aletter}', "");
Expect(0, 90, '\P{Word_Break=aletter}', "");
Expect(1, 90, '\P{^Word_Break=aletter}', "");
Expect(0, 64, '\p{Word_Break=aletter}', "");
Expect(1, 64, '\p{^Word_Break=aletter}', "");
Expect(1, 64, '\P{Word_Break=aletter}', "");
Expect(0, 64, '\P{^Word_Break=aletter}', "");
Expect(1, 90, '\p{Word_Break=__ALetter}', "");
Expect(0, 90, '\p{^Word_Break=__ALetter}', "");
Expect(0, 90, '\P{Word_Break=__ALetter}', "");
Expect(1, 90, '\P{^Word_Break=__ALetter}', "");
Expect(0, 64, '\p{Word_Break=__ALetter}', "");
Expect(1, 64, '\p{^Word_Break=__ALetter}', "");
Expect(1, 64, '\P{Word_Break=__ALetter}', "");
Expect(0, 64, '\P{^Word_Break=__ALetter}', "");
Error('\p{WB=_-LE:=}');
Error('\P{WB=_-LE:=}');
Expect(1, 90, '\p{WB=le}', "");
Expect(0, 90, '\p{^WB=le}', "");
Expect(0, 90, '\P{WB=le}', "");
Expect(1, 90, '\P{^WB=le}', "");
Expect(0, 64, '\p{WB=le}', "");
Expect(1, 64, '\p{^WB=le}', "");
Expect(1, 64, '\P{WB=le}', "");
Expect(0, 64, '\P{^WB=le}', "");
Expect(1, 90, '\p{WB= le}', "");
Expect(0, 90, '\p{^WB= le}', "");
Expect(0, 90, '\P{WB= le}', "");
Expect(1, 90, '\P{^WB= le}', "");
Expect(0, 64, '\p{WB= le}', "");
Expect(1, 64, '\p{^WB= le}', "");
Expect(1, 64, '\P{WB= le}', "");
Expect(0, 64, '\P{^WB= le}', "");
Error('\p{Is_Word_Break:_ALetter/a/}');
Error('\P{Is_Word_Break:_ALetter/a/}');
Expect(1, 90, '\p{Is_Word_Break=aletter}', "");
Expect(0, 90, '\p{^Is_Word_Break=aletter}', "");
Expect(0, 90, '\P{Is_Word_Break=aletter}', "");
Expect(1, 90, '\P{^Is_Word_Break=aletter}', "");
Expect(0, 64, '\p{Is_Word_Break=aletter}', "");
Expect(1, 64, '\p{^Is_Word_Break=aletter}', "");
Expect(1, 64, '\P{Is_Word_Break=aletter}', "");
Expect(0, 64, '\P{^Is_Word_Break=aletter}', "");
Expect(1, 90, '\p{Is_Word_Break=	ALETTER}', "");
Expect(0, 90, '\p{^Is_Word_Break=	ALETTER}', "");
Expect(0, 90, '\P{Is_Word_Break=	ALETTER}', "");
Expect(1, 90, '\P{^Is_Word_Break=	ALETTER}', "");
Expect(0, 64, '\p{Is_Word_Break=	ALETTER}', "");
Expect(1, 64, '\p{^Is_Word_Break=	ALETTER}', "");
Expect(1, 64, '\P{Is_Word_Break=	ALETTER}', "");
Expect(0, 64, '\P{^Is_Word_Break=	ALETTER}', "");
Error('\p{Is_WB=_	LE/a/}');
Error('\P{Is_WB=_	LE/a/}');
Expect(1, 90, '\p{Is_WB=le}', "");
Expect(0, 90, '\p{^Is_WB=le}', "");
Expect(0, 90, '\P{Is_WB=le}', "");
Expect(1, 90, '\P{^Is_WB=le}', "");
Expect(0, 64, '\p{Is_WB=le}', "");
Expect(1, 64, '\p{^Is_WB=le}', "");
Expect(1, 64, '\P{Is_WB=le}', "");
Expect(0, 64, '\P{^Is_WB=le}', "");
Expect(1, 90, '\p{Is_WB=-	LE}', "");
Expect(0, 90, '\p{^Is_WB=-	LE}', "");
Expect(0, 90, '\P{Is_WB=-	LE}', "");
Expect(1, 90, '\P{^Is_WB=-	LE}', "");
Expect(0, 64, '\p{Is_WB=-	LE}', "");
Expect(1, 64, '\p{^Is_WB=-	LE}', "");
Expect(1, 64, '\P{Is_WB=-	LE}', "");
Expect(0, 64, '\P{^Is_WB=-	LE}', "");
Error('\p{Word_Break:	:=cr}');
Error('\P{Word_Break:	:=cr}');
Expect(1, 13, '\p{Word_Break=cr}', "");
Expect(0, 13, '\p{^Word_Break=cr}', "");
Expect(0, 13, '\P{Word_Break=cr}', "");
Expect(1, 13, '\P{^Word_Break=cr}', "");
Expect(0, 12, '\p{Word_Break=cr}', "");
Expect(1, 12, '\p{^Word_Break=cr}', "");
Expect(1, 12, '\P{Word_Break=cr}', "");
Expect(0, 12, '\P{^Word_Break=cr}', "");
Expect(1, 13, '\p{Word_Break:-	CR}', "");
Expect(0, 13, '\p{^Word_Break:-	CR}', "");
Expect(0, 13, '\P{Word_Break:-	CR}', "");
Expect(1, 13, '\P{^Word_Break:-	CR}', "");
Expect(0, 12, '\p{Word_Break:-	CR}', "");
Expect(1, 12, '\p{^Word_Break:-	CR}', "");
Expect(1, 12, '\P{Word_Break:-	CR}', "");
Expect(0, 12, '\P{^Word_Break:-	CR}', "");
Error('\p{WB= :=CR}');
Error('\P{WB= :=CR}');
Expect(1, 13, '\p{WB=cr}', "");
Expect(0, 13, '\p{^WB=cr}', "");
Expect(0, 13, '\P{WB=cr}', "");
Expect(1, 13, '\P{^WB=cr}', "");
Expect(0, 12, '\p{WB=cr}', "");
Expect(1, 12, '\p{^WB=cr}', "");
Expect(1, 12, '\P{WB=cr}', "");
Expect(0, 12, '\P{^WB=cr}', "");
Expect(1, 13, '\p{WB= cr}', "");
Expect(0, 13, '\p{^WB= cr}', "");
Expect(0, 13, '\P{WB= cr}', "");
Expect(1, 13, '\P{^WB= cr}', "");
Expect(0, 12, '\p{WB= cr}', "");
Expect(1, 12, '\p{^WB= cr}', "");
Expect(1, 12, '\P{WB= cr}', "");
Expect(0, 12, '\P{^WB= cr}', "");
Error('\p{Is_Word_Break:   :=	_CR}');
Error('\P{Is_Word_Break:   :=	_CR}');
Expect(1, 13, '\p{Is_Word_Break=cr}', "");
Expect(0, 13, '\p{^Is_Word_Break=cr}', "");
Expect(0, 13, '\P{Is_Word_Break=cr}', "");
Expect(1, 13, '\P{^Is_Word_Break=cr}', "");
Expect(0, 12, '\p{Is_Word_Break=cr}', "");
Expect(1, 12, '\p{^Is_Word_Break=cr}', "");
Expect(1, 12, '\P{Is_Word_Break=cr}', "");
Expect(0, 12, '\P{^Is_Word_Break=cr}', "");
Expect(1, 13, '\p{Is_Word_Break:    -CR}', "");
Expect(0, 13, '\p{^Is_Word_Break:    -CR}', "");
Expect(0, 13, '\P{Is_Word_Break:    -CR}', "");
Expect(1, 13, '\P{^Is_Word_Break:    -CR}', "");
Expect(0, 12, '\p{Is_Word_Break:    -CR}', "");
Expect(1, 12, '\p{^Is_Word_Break:    -CR}', "");
Expect(1, 12, '\P{Is_Word_Break:    -CR}', "");
Expect(0, 12, '\P{^Is_Word_Break:    -CR}', "");
Error('\p{Is_WB=	 CR/a/}');
Error('\P{Is_WB=	 CR/a/}');
Expect(1, 13, '\p{Is_WB: cr}', "");
Expect(0, 13, '\p{^Is_WB: cr}', "");
Expect(0, 13, '\P{Is_WB: cr}', "");
Expect(1, 13, '\P{^Is_WB: cr}', "");
Expect(0, 12, '\p{Is_WB: cr}', "");
Expect(1, 12, '\p{^Is_WB: cr}', "");
Expect(1, 12, '\P{Is_WB: cr}', "");
Expect(0, 12, '\P{^Is_WB: cr}', "");
Expect(1, 13, '\p{Is_WB=  CR}', "");
Expect(0, 13, '\p{^Is_WB=  CR}', "");
Expect(0, 13, '\P{Is_WB=  CR}', "");
Expect(1, 13, '\P{^Is_WB=  CR}', "");
Expect(0, 12, '\p{Is_WB=  CR}', "");
Expect(1, 12, '\p{^Is_WB=  CR}', "");
Expect(1, 12, '\P{Is_WB=  CR}', "");
Expect(0, 12, '\P{^Is_WB=  CR}', "");
Error('\p{Word_Break=:=Other}');
Error('\P{Word_Break=:=Other}');
Expect(1, 9, '\p{Word_Break=other}', "");
Expect(0, 9, '\p{^Word_Break=other}', "");
Expect(0, 9, '\P{Word_Break=other}', "");
Expect(1, 9, '\P{^Word_Break=other}', "");
Expect(0, 13, '\p{Word_Break=other}', "");
Expect(1, 13, '\p{^Word_Break=other}', "");
Expect(1, 13, '\P{Word_Break=other}', "");
Expect(0, 13, '\P{^Word_Break=other}', "");
Expect(1, 9, '\p{Word_Break=	Other}', "");
Expect(0, 9, '\p{^Word_Break=	Other}', "");
Expect(0, 9, '\P{Word_Break=	Other}', "");
Expect(1, 9, '\P{^Word_Break=	Other}', "");
Expect(0, 13, '\p{Word_Break=	Other}', "");
Expect(1, 13, '\p{^Word_Break=	Other}', "");
Expect(1, 13, '\P{Word_Break=	Other}', "");
Expect(0, 13, '\P{^Word_Break=	Other}', "");
Error('\p{WB= :=xx}');
Error('\P{WB= :=xx}');
Expect(1, 9, '\p{WB=xx}', "");
Expect(0, 9, '\p{^WB=xx}', "");
Expect(0, 9, '\P{WB=xx}', "");
Expect(1, 9, '\P{^WB=xx}', "");
Expect(0, 13, '\p{WB=xx}', "");
Expect(1, 13, '\p{^WB=xx}', "");
Expect(1, 13, '\P{WB=xx}', "");
Expect(0, 13, '\P{^WB=xx}', "");
Expect(1, 9, '\p{WB= XX}', "");
Expect(0, 9, '\p{^WB= XX}', "");
Expect(0, 9, '\P{WB= XX}', "");
Expect(1, 9, '\P{^WB= XX}', "");
Expect(0, 13, '\p{WB= XX}', "");
Expect(1, 13, '\p{^WB= XX}', "");
Expect(1, 13, '\P{WB= XX}', "");
Expect(0, 13, '\P{^WB= XX}', "");
Error('\p{Is_Word_Break=-	OTHER/a/}');
Error('\P{Is_Word_Break=-	OTHER/a/}');
Expect(1, 9, '\p{Is_Word_Break=other}', "");
Expect(0, 9, '\p{^Is_Word_Break=other}', "");
Expect(0, 9, '\P{Is_Word_Break=other}', "");
Expect(1, 9, '\P{^Is_Word_Break=other}', "");
Expect(0, 13, '\p{Is_Word_Break=other}', "");
Expect(1, 13, '\p{^Is_Word_Break=other}', "");
Expect(1, 13, '\P{Is_Word_Break=other}', "");
Expect(0, 13, '\P{^Is_Word_Break=other}', "");
Expect(1, 9, '\p{Is_Word_Break= 	Other}', "");
Expect(0, 9, '\p{^Is_Word_Break= 	Other}', "");
Expect(0, 9, '\P{Is_Word_Break= 	Other}', "");
Expect(1, 9, '\P{^Is_Word_Break= 	Other}', "");
Expect(0, 13, '\p{Is_Word_Break= 	Other}', "");
Expect(1, 13, '\p{^Is_Word_Break= 	Other}', "");
Expect(1, 13, '\P{Is_Word_Break= 	Other}', "");
Expect(0, 13, '\P{^Is_Word_Break= 	Other}', "");
Error('\p{Is_WB=	/a/XX}');
Error('\P{Is_WB=	/a/XX}');
Expect(1, 9, '\p{Is_WB=xx}', "");
Expect(0, 9, '\p{^Is_WB=xx}', "");
Expect(0, 9, '\P{Is_WB=xx}', "");
Expect(1, 9, '\P{^Is_WB=xx}', "");
Expect(0, 13, '\p{Is_WB=xx}', "");
Expect(1, 13, '\p{^Is_WB=xx}', "");
Expect(1, 13, '\P{Is_WB=xx}', "");
Expect(0, 13, '\P{^Is_WB=xx}', "");
Expect(1, 9, '\p{Is_WB:	 XX}', "");
Expect(0, 9, '\p{^Is_WB:	 XX}', "");
Expect(0, 9, '\P{Is_WB:	 XX}', "");
Expect(1, 9, '\P{^Is_WB:	 XX}', "");
Expect(0, 13, '\p{Is_WB:	 XX}', "");
Expect(1, 13, '\p{^Is_WB:	 XX}', "");
Expect(1, 13, '\P{Is_WB:	 XX}', "");
Expect(0, 13, '\P{^Is_WB:	 XX}', "");
Error('\p{Word_Break=	_NUMERIC:=}');
Error('\P{Word_Break=	_NUMERIC:=}');
Expect(1, 57, '\p{Word_Break=numeric}', "");
Expect(0, 57, '\p{^Word_Break=numeric}', "");
Expect(0, 57, '\P{Word_Break=numeric}', "");
Expect(1, 57, '\P{^Word_Break=numeric}', "");
Expect(0, 47, '\p{Word_Break=numeric}', "");
Expect(1, 47, '\p{^Word_Break=numeric}', "");
Expect(1, 47, '\P{Word_Break=numeric}', "");
Expect(0, 47, '\P{^Word_Break=numeric}', "");
Expect(1, 57, '\p{Word_Break=Numeric}', "");
Expect(0, 57, '\p{^Word_Break=Numeric}', "");
Expect(0, 57, '\P{Word_Break=Numeric}', "");
Expect(1, 57, '\P{^Word_Break=Numeric}', "");
Expect(0, 47, '\p{Word_Break=Numeric}', "");
Expect(1, 47, '\p{^Word_Break=Numeric}', "");
Expect(1, 47, '\P{Word_Break=Numeric}', "");
Expect(0, 47, '\P{^Word_Break=Numeric}', "");
Error('\p{WB=:=	_NU}');
Error('\P{WB=:=	_NU}');
Expect(1, 57, '\p{WB=nu}', "");
Expect(0, 57, '\p{^WB=nu}', "");
Expect(0, 57, '\P{WB=nu}', "");
Expect(1, 57, '\P{^WB=nu}', "");
Expect(0, 47, '\p{WB=nu}', "");
Expect(1, 47, '\p{^WB=nu}', "");
Expect(1, 47, '\P{WB=nu}', "");
Expect(0, 47, '\P{^WB=nu}', "");
Expect(1, 57, '\p{WB: -	NU}', "");
Expect(0, 57, '\p{^WB: -	NU}', "");
Expect(0, 57, '\P{WB: -	NU}', "");
Expect(1, 57, '\P{^WB: -	NU}', "");
Expect(0, 47, '\p{WB: -	NU}', "");
Expect(1, 47, '\p{^WB: -	NU}', "");
Expect(1, 47, '\P{WB: -	NU}', "");
Expect(0, 47, '\P{^WB: -	NU}', "");
Error('\p{Is_Word_Break=/a/ -NUMERIC}');
Error('\P{Is_Word_Break=/a/ -NUMERIC}');
Expect(1, 57, '\p{Is_Word_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break=numeric}', "");
Expect(0, 57, '\P{Is_Word_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break=numeric}', "");
Expect(0, 47, '\p{Is_Word_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break=numeric}', "");
Expect(1, 47, '\P{Is_Word_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break=numeric}', "");
Expect(1, 57, '\p{Is_Word_Break=-numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break=-numeric}', "");
Expect(0, 57, '\P{Is_Word_Break=-numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break=-numeric}', "");
Expect(0, 47, '\p{Is_Word_Break=-numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break=-numeric}', "");
Expect(1, 47, '\P{Is_Word_Break=-numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break=-numeric}', "");
Error('\p{Is_WB= :=nu}');
Error('\P{Is_WB= :=nu}');
Expect(1, 57, '\p{Is_WB=nu}', "");
Expect(0, 57, '\p{^Is_WB=nu}', "");
Expect(0, 57, '\P{Is_WB=nu}', "");
Expect(1, 57, '\P{^Is_WB=nu}', "");
Expect(0, 47, '\p{Is_WB=nu}', "");
Expect(1, 47, '\p{^Is_WB=nu}', "");
Expect(1, 47, '\P{Is_WB=nu}', "");
Expect(0, 47, '\P{^Is_WB=nu}', "");
Expect(1, 57, '\p{Is_WB= _nu}', "");
Expect(0, 57, '\p{^Is_WB= _nu}', "");
Expect(0, 57, '\P{Is_WB= _nu}', "");
Expect(1, 57, '\P{^Is_WB= _nu}', "");
Expect(0, 47, '\p{Is_WB= _nu}', "");
Expect(1, 47, '\p{^Is_WB= _nu}', "");
Expect(1, 47, '\P{Is_WB= _nu}', "");
Expect(0, 47, '\P{^Is_WB= _nu}', "");
Error('\p{Word_Break=/a/ -format}');
Error('\P{Word_Break=/a/ -format}');
Expect(1, 173, '\p{Word_Break=format}', "");
Expect(0, 173, '\p{^Word_Break=format}', "");
Expect(0, 173, '\P{Word_Break=format}', "");
Expect(1, 173, '\P{^Word_Break=format}', "");
Expect(0, 172, '\p{Word_Break=format}', "");
Expect(1, 172, '\p{^Word_Break=format}', "");
Expect(1, 172, '\P{Word_Break=format}', "");
Expect(0, 172, '\P{^Word_Break=format}', "");
Expect(1, 173, '\p{Word_Break=	Format}', "");
Expect(0, 173, '\p{^Word_Break=	Format}', "");
Expect(0, 173, '\P{Word_Break=	Format}', "");
Expect(1, 173, '\P{^Word_Break=	Format}', "");
Expect(0, 172, '\p{Word_Break=	Format}', "");
Expect(1, 172, '\p{^Word_Break=	Format}', "");
Expect(1, 172, '\P{Word_Break=	Format}', "");
Expect(0, 172, '\P{^Word_Break=	Format}', "");
Error('\p{WB=/a/ _fo}');
Error('\P{WB=/a/ _fo}');
Expect(1, 173, '\p{WB=fo}', "");
Expect(0, 173, '\p{^WB=fo}', "");
Expect(0, 173, '\P{WB=fo}', "");
Expect(1, 173, '\P{^WB=fo}', "");
Expect(0, 172, '\p{WB=fo}', "");
Expect(1, 172, '\p{^WB=fo}', "");
Expect(1, 172, '\P{WB=fo}', "");
Expect(0, 172, '\P{^WB=fo}', "");
Expect(1, 173, '\p{WB=	_FO}', "");
Expect(0, 173, '\p{^WB=	_FO}', "");
Expect(0, 173, '\P{WB=	_FO}', "");
Expect(1, 173, '\P{^WB=	_FO}', "");
Expect(0, 172, '\p{WB=	_FO}', "");
Expect(1, 172, '\p{^WB=	_FO}', "");
Expect(1, 172, '\P{WB=	_FO}', "");
Expect(0, 172, '\P{^WB=	_FO}', "");
Error('\p{Is_Word_Break: /a/--Format}');
Error('\P{Is_Word_Break: /a/--Format}');
Expect(1, 173, '\p{Is_Word_Break=format}', "");
Expect(0, 173, '\p{^Is_Word_Break=format}', "");
Expect(0, 173, '\P{Is_Word_Break=format}', "");
Expect(1, 173, '\P{^Is_Word_Break=format}', "");
Expect(0, 172, '\p{Is_Word_Break=format}', "");
Expect(1, 172, '\p{^Is_Word_Break=format}', "");
Expect(1, 172, '\P{Is_Word_Break=format}', "");
Expect(0, 172, '\P{^Is_Word_Break=format}', "");
Expect(1, 173, '\p{Is_Word_Break=_	FORMAT}', "");
Expect(0, 173, '\p{^Is_Word_Break=_	FORMAT}', "");
Expect(0, 173, '\P{Is_Word_Break=_	FORMAT}', "");
Expect(1, 173, '\P{^Is_Word_Break=_	FORMAT}', "");
Expect(0, 172, '\p{Is_Word_Break=_	FORMAT}', "");
Expect(1, 172, '\p{^Is_Word_Break=_	FORMAT}', "");
Expect(1, 172, '\P{Is_Word_Break=_	FORMAT}', "");
Expect(0, 172, '\P{^Is_Word_Break=_	FORMAT}', "");
Error('\p{Is_WB=/a/fo}');
Error('\P{Is_WB=/a/fo}');
Expect(1, 173, '\p{Is_WB=fo}', "");
Expect(0, 173, '\p{^Is_WB=fo}', "");
Expect(0, 173, '\P{Is_WB=fo}', "");
Expect(1, 173, '\P{^Is_WB=fo}', "");
Expect(0, 172, '\p{Is_WB=fo}', "");
Expect(1, 172, '\p{^Is_WB=fo}', "");
Expect(1, 172, '\P{Is_WB=fo}', "");
Expect(0, 172, '\P{^Is_WB=fo}', "");
Expect(1, 173, '\p{Is_WB=		fo}', "");
Expect(0, 173, '\p{^Is_WB=		fo}', "");
Expect(0, 173, '\P{Is_WB=		fo}', "");
Expect(1, 173, '\P{^Is_WB=		fo}', "");
Expect(0, 172, '\p{Is_WB=		fo}', "");
Expect(1, 172, '\p{^Is_WB=		fo}', "");
Expect(1, 172, '\P{Is_WB=		fo}', "");
Expect(0, 172, '\P{^Is_WB=		fo}', "");
Error('\p{Word_Break=/a/EXTENDNUMLET}');
Error('\P{Word_Break=/a/EXTENDNUMLET}');
Expect(1, 95, '\p{Word_Break=extendnumlet}', "");
Expect(0, 95, '\p{^Word_Break=extendnumlet}', "");
Expect(0, 95, '\P{Word_Break=extendnumlet}', "");
Expect(1, 95, '\P{^Word_Break=extendnumlet}', "");
Expect(0, 94, '\p{Word_Break=extendnumlet}', "");
Expect(1, 94, '\p{^Word_Break=extendnumlet}', "");
Expect(1, 94, '\P{Word_Break=extendnumlet}', "");
Expect(0, 94, '\P{^Word_Break=extendnumlet}', "");
Expect(1, 95, '\p{Word_Break:	 _ExtendNumLet}', "");
Expect(0, 95, '\p{^Word_Break:	 _ExtendNumLet}', "");
Expect(0, 95, '\P{Word_Break:	 _ExtendNumLet}', "");
Expect(1, 95, '\P{^Word_Break:	 _ExtendNumLet}', "");
Expect(0, 94, '\p{Word_Break:	 _ExtendNumLet}', "");
Expect(1, 94, '\p{^Word_Break:	 _ExtendNumLet}', "");
Expect(1, 94, '\P{Word_Break:	 _ExtendNumLet}', "");
Expect(0, 94, '\P{^Word_Break:	 _ExtendNumLet}', "");
Error('\p{WB= :=EX}');
Error('\P{WB= :=EX}');
Expect(1, 95, '\p{WB=ex}', "");
Expect(0, 95, '\p{^WB=ex}', "");
Expect(0, 95, '\P{WB=ex}', "");
Expect(1, 95, '\P{^WB=ex}', "");
Expect(0, 94, '\p{WB=ex}', "");
Expect(1, 94, '\p{^WB=ex}', "");
Expect(1, 94, '\P{WB=ex}', "");
Expect(0, 94, '\P{^WB=ex}', "");
Expect(1, 95, '\p{WB=	ex}', "");
Expect(0, 95, '\p{^WB=	ex}', "");
Expect(0, 95, '\P{WB=	ex}', "");
Expect(1, 95, '\P{^WB=	ex}', "");
Expect(0, 94, '\p{WB=	ex}', "");
Expect(1, 94, '\p{^WB=	ex}', "");
Expect(1, 94, '\P{WB=	ex}', "");
Expect(0, 94, '\P{^WB=	ex}', "");
Error('\p{Is_Word_Break: 	:=EXTENDNUMLET}');
Error('\P{Is_Word_Break: 	:=EXTENDNUMLET}');
Expect(1, 95, '\p{Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\P{Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\p{Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\P{Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\p{Is_Word_Break=	_extendnumlet}', "");
Expect(0, 95, '\p{^Is_Word_Break=	_extendnumlet}', "");
Expect(0, 95, '\P{Is_Word_Break=	_extendnumlet}', "");
Expect(1, 95, '\P{^Is_Word_Break=	_extendnumlet}', "");
Expect(0, 94, '\p{Is_Word_Break=	_extendnumlet}', "");
Expect(1, 94, '\p{^Is_Word_Break=	_extendnumlet}', "");
Expect(1, 94, '\P{Is_Word_Break=	_extendnumlet}', "");
Expect(0, 94, '\P{^Is_Word_Break=	_extendnumlet}', "");
Error('\p{Is_WB=:=--EX}');
Error('\P{Is_WB=:=--EX}');
Expect(1, 95, '\p{Is_WB=ex}', "");
Expect(0, 95, '\p{^Is_WB=ex}', "");
Expect(0, 95, '\P{Is_WB=ex}', "");
Expect(1, 95, '\P{^Is_WB=ex}', "");
Expect(0, 94, '\p{Is_WB=ex}', "");
Expect(1, 94, '\p{^Is_WB=ex}', "");
Expect(1, 94, '\P{Is_WB=ex}', "");
Expect(0, 94, '\P{^Is_WB=ex}', "");
Expect(1, 95, '\p{Is_WB=_-ex}', "");
Expect(0, 95, '\p{^Is_WB=_-ex}', "");
Expect(0, 95, '\P{Is_WB=_-ex}', "");
Expect(1, 95, '\P{^Is_WB=_-ex}', "");
Expect(0, 94, '\p{Is_WB=_-ex}', "");
Expect(1, 94, '\p{^Is_WB=_-ex}', "");
Expect(1, 94, '\P{Is_WB=_-ex}', "");
Expect(0, 94, '\P{^Is_WB=_-ex}', "");
Error('\p{Word_Break:_extend/a/}');
Error('\P{Word_Break:_extend/a/}');
Expect(1, 879, '\p{Word_Break=extend}', "");
Expect(0, 879, '\p{^Word_Break=extend}', "");
Expect(0, 879, '\P{Word_Break=extend}', "");
Expect(1, 879, '\P{^Word_Break=extend}', "");
Expect(0, 767, '\p{Word_Break=extend}', "");
Expect(1, 767, '\p{^Word_Break=extend}', "");
Expect(1, 767, '\P{Word_Break=extend}', "");
Expect(0, 767, '\P{^Word_Break=extend}', "");
Expect(1, 879, '\p{Word_Break=-extend}', "");
Expect(0, 879, '\p{^Word_Break=-extend}', "");
Expect(0, 879, '\P{Word_Break=-extend}', "");
Expect(1, 879, '\P{^Word_Break=-extend}', "");
Expect(0, 767, '\p{Word_Break=-extend}', "");
Expect(1, 767, '\p{^Word_Break=-extend}', "");
Expect(1, 767, '\P{Word_Break=-extend}', "");
Expect(0, 767, '\P{^Word_Break=-extend}', "");
Error('\p{WB=	-Extend/a/}');
Error('\P{WB=	-Extend/a/}');
Expect(1, 879, '\p{WB=extend}', "");
Expect(0, 879, '\p{^WB=extend}', "");
Expect(0, 879, '\P{WB=extend}', "");
Expect(1, 879, '\P{^WB=extend}', "");
Expect(0, 767, '\p{WB=extend}', "");
Expect(1, 767, '\p{^WB=extend}', "");
Expect(1, 767, '\P{WB=extend}', "");
Expect(0, 767, '\P{^WB=extend}', "");
Expect(1, 879, '\p{WB= 	extend}', "");
Expect(0, 879, '\p{^WB= 	extend}', "");
Expect(0, 879, '\P{WB= 	extend}', "");
Expect(1, 879, '\P{^WB= 	extend}', "");
Expect(0, 767, '\p{WB= 	extend}', "");
Expect(1, 767, '\p{^WB= 	extend}', "");
Expect(1, 767, '\P{WB= 	extend}', "");
Expect(0, 767, '\P{^WB= 	extend}', "");
Error('\p{Is_Word_Break=	/a/Extend}');
Error('\P{Is_Word_Break=	/a/Extend}');
Expect(1, 879, '\p{Is_Word_Break=extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=extend}', "");
Expect(0, 879, '\P{Is_Word_Break=extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=extend}', "");
Expect(0, 767, '\p{Is_Word_Break=extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=extend}', "");
Expect(1, 767, '\P{Is_Word_Break=extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=extend}', "");
Expect(1, 879, '\p{Is_Word_Break=- Extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=- Extend}', "");
Expect(0, 879, '\P{Is_Word_Break=- Extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=- Extend}', "");
Expect(0, 767, '\p{Is_Word_Break=- Extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=- Extend}', "");
Expect(1, 767, '\P{Is_Word_Break=- Extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=- Extend}', "");
Error('\p{Is_WB=/a/ -EXTEND}');
Error('\P{Is_WB=/a/ -EXTEND}');
Expect(1, 879, '\p{Is_WB=extend}', "");
Expect(0, 879, '\p{^Is_WB=extend}', "");
Expect(0, 879, '\P{Is_WB=extend}', "");
Expect(1, 879, '\P{^Is_WB=extend}', "");
Expect(0, 767, '\p{Is_WB=extend}', "");
Expect(1, 767, '\p{^Is_WB=extend}', "");
Expect(1, 767, '\P{Is_WB=extend}', "");
Expect(0, 767, '\P{^Is_WB=extend}', "");
Expect(1, 879, '\p{Is_WB=-EXTEND}', "");
Expect(0, 879, '\p{^Is_WB=-EXTEND}', "");
Expect(0, 879, '\P{Is_WB=-EXTEND}', "");
Expect(1, 879, '\P{^Is_WB=-EXTEND}', "");
Expect(0, 767, '\p{Is_WB=-EXTEND}', "");
Expect(1, 767, '\p{^Is_WB=-EXTEND}', "");
Expect(1, 767, '\P{Is_WB=-EXTEND}', "");
Expect(0, 767, '\P{^Is_WB=-EXTEND}', "");
Error('\p{Word_Break=:=	-MIDLETTER}');
Error('\P{Word_Break=:=	-MIDLETTER}');
Expect(1, 58, '\p{Word_Break=midletter}', "");
Expect(0, 58, '\p{^Word_Break=midletter}', "");
Expect(0, 58, '\P{Word_Break=midletter}', "");
Expect(1, 58, '\P{^Word_Break=midletter}', "");
Expect(0, 57, '\p{Word_Break=midletter}', "");
Expect(1, 57, '\p{^Word_Break=midletter}', "");
Expect(1, 57, '\P{Word_Break=midletter}', "");
Expect(0, 57, '\P{^Word_Break=midletter}', "");
Expect(1, 58, '\p{Word_Break=_MIDLETTER}', "");
Expect(0, 58, '\p{^Word_Break=_MIDLETTER}', "");
Expect(0, 58, '\P{Word_Break=_MIDLETTER}', "");
Expect(1, 58, '\P{^Word_Break=_MIDLETTER}', "");
Expect(0, 57, '\p{Word_Break=_MIDLETTER}', "");
Expect(1, 57, '\p{^Word_Break=_MIDLETTER}', "");
Expect(1, 57, '\P{Word_Break=_MIDLETTER}', "");
Expect(0, 57, '\P{^Word_Break=_MIDLETTER}', "");
Error('\p{WB=:=_ml}');
Error('\P{WB=:=_ml}');
Expect(1, 58, '\p{WB=ml}', "");
Expect(0, 58, '\p{^WB=ml}', "");
Expect(0, 58, '\P{WB=ml}', "");
Expect(1, 58, '\P{^WB=ml}', "");
Expect(0, 57, '\p{WB=ml}', "");
Expect(1, 57, '\p{^WB=ml}', "");
Expect(1, 57, '\P{WB=ml}', "");
Expect(0, 57, '\P{^WB=ml}', "");
Expect(1, 58, '\p{WB=_ML}', "");
Expect(0, 58, '\p{^WB=_ML}', "");
Expect(0, 58, '\P{WB=_ML}', "");
Expect(1, 58, '\P{^WB=_ML}', "");
Expect(0, 57, '\p{WB=_ML}', "");
Expect(1, 57, '\p{^WB=_ML}', "");
Expect(1, 57, '\P{WB=_ML}', "");
Expect(0, 57, '\P{^WB=_ML}', "");
Error('\p{Is_Word_Break= -MIDLETTER/a/}');
Error('\P{Is_Word_Break= -MIDLETTER/a/}');
Expect(1, 58, '\p{Is_Word_Break:	midletter}', "");
Expect(0, 58, '\p{^Is_Word_Break:	midletter}', "");
Expect(0, 58, '\P{Is_Word_Break:	midletter}', "");
Expect(1, 58, '\P{^Is_Word_Break:	midletter}', "");
Expect(0, 57, '\p{Is_Word_Break:	midletter}', "");
Expect(1, 57, '\p{^Is_Word_Break:	midletter}', "");
Expect(1, 57, '\P{Is_Word_Break:	midletter}', "");
Expect(0, 57, '\P{^Is_Word_Break:	midletter}', "");
Expect(1, 58, '\p{Is_Word_Break= MidLetter}', "");
Expect(0, 58, '\p{^Is_Word_Break= MidLetter}', "");
Expect(0, 58, '\P{Is_Word_Break= MidLetter}', "");
Expect(1, 58, '\P{^Is_Word_Break= MidLetter}', "");
Expect(0, 57, '\p{Is_Word_Break= MidLetter}', "");
Expect(1, 57, '\p{^Is_Word_Break= MidLetter}', "");
Expect(1, 57, '\P{Is_Word_Break= MidLetter}', "");
Expect(0, 57, '\P{^Is_Word_Break= MidLetter}', "");
Error('\p{Is_WB=:=	_ML}');
Error('\P{Is_WB=:=	_ML}');
Expect(1, 58, '\p{Is_WB=ml}', "");
Expect(0, 58, '\p{^Is_WB=ml}', "");
Expect(0, 58, '\P{Is_WB=ml}', "");
Expect(1, 58, '\P{^Is_WB=ml}', "");
Expect(0, 57, '\p{Is_WB=ml}', "");
Expect(1, 57, '\p{^Is_WB=ml}', "");
Expect(1, 57, '\P{Is_WB=ml}', "");
Expect(0, 57, '\P{^Is_WB=ml}', "");
Expect(1, 58, '\p{Is_WB=_ ml}', "");
Expect(0, 58, '\p{^Is_WB=_ ml}', "");
Expect(0, 58, '\P{Is_WB=_ ml}', "");
Expect(1, 58, '\P{^Is_WB=_ ml}', "");
Expect(0, 57, '\p{Is_WB=_ ml}', "");
Expect(1, 57, '\p{^Is_WB=_ ml}', "");
Expect(1, 57, '\P{Is_WB=_ ml}', "");
Expect(0, 57, '\P{^Is_WB=_ ml}', "");
Error('\p{Word_Break=:=  MIDNUMLET}');
Error('\P{Word_Break=:=  MIDNUMLET}');
Expect(1, 39, '\p{Word_Break=midnumlet}', "");
Expect(0, 39, '\p{^Word_Break=midnumlet}', "");
Expect(0, 39, '\P{Word_Break=midnumlet}', "");
Expect(1, 39, '\P{^Word_Break=midnumlet}', "");
Expect(0, 38, '\p{Word_Break=midnumlet}', "");
Expect(1, 38, '\p{^Word_Break=midnumlet}', "");
Expect(1, 38, '\P{Word_Break=midnumlet}', "");
Expect(0, 38, '\P{^Word_Break=midnumlet}', "");
Expect(1, 39, '\p{Word_Break= MIDNUMLET}', "");
Expect(0, 39, '\p{^Word_Break= MIDNUMLET}', "");
Expect(0, 39, '\P{Word_Break= MIDNUMLET}', "");
Expect(1, 39, '\P{^Word_Break= MIDNUMLET}', "");
Expect(0, 38, '\p{Word_Break= MIDNUMLET}', "");
Expect(1, 38, '\p{^Word_Break= MIDNUMLET}', "");
Expect(1, 38, '\P{Word_Break= MIDNUMLET}', "");
Expect(0, 38, '\P{^Word_Break= MIDNUMLET}', "");
Error('\p{WB=- mb:=}');
Error('\P{WB=- mb:=}');
Expect(1, 39, '\p{WB=mb}', "");
Expect(0, 39, '\p{^WB=mb}', "");
Expect(0, 39, '\P{WB=mb}', "");
Expect(1, 39, '\P{^WB=mb}', "");
Expect(0, 38, '\p{WB=mb}', "");
Expect(1, 38, '\p{^WB=mb}', "");
Expect(1, 38, '\P{WB=mb}', "");
Expect(0, 38, '\P{^WB=mb}', "");
Expect(1, 39, '\p{WB=	 MB}', "");
Expect(0, 39, '\p{^WB=	 MB}', "");
Expect(0, 39, '\P{WB=	 MB}', "");
Expect(1, 39, '\P{^WB=	 MB}', "");
Expect(0, 38, '\p{WB=	 MB}', "");
Expect(1, 38, '\p{^WB=	 MB}', "");
Expect(1, 38, '\P{WB=	 MB}', "");
Expect(0, 38, '\P{^WB=	 MB}', "");
Error('\p{Is_Word_Break=:=	 MidNumLet}');
Error('\P{Is_Word_Break=:=	 MidNumLet}');
Expect(1, 39, '\p{Is_Word_Break=midnumlet}', "");
Expect(0, 39, '\p{^Is_Word_Break=midnumlet}', "");
Expect(0, 39, '\P{Is_Word_Break=midnumlet}', "");
Expect(1, 39, '\P{^Is_Word_Break=midnumlet}', "");
Expect(0, 38, '\p{Is_Word_Break=midnumlet}', "");
Expect(1, 38, '\p{^Is_Word_Break=midnumlet}', "");
Expect(1, 38, '\P{Is_Word_Break=midnumlet}', "");
Expect(0, 38, '\P{^Is_Word_Break=midnumlet}', "");
Expect(1, 39, '\p{Is_Word_Break=--midnumlet}', "");
Expect(0, 39, '\p{^Is_Word_Break=--midnumlet}', "");
Expect(0, 39, '\P{Is_Word_Break=--midnumlet}', "");
Expect(1, 39, '\P{^Is_Word_Break=--midnumlet}', "");
Expect(0, 38, '\p{Is_Word_Break=--midnumlet}', "");
Expect(1, 38, '\p{^Is_Word_Break=--midnumlet}', "");
Expect(1, 38, '\P{Is_Word_Break=--midnumlet}', "");
Expect(0, 38, '\P{^Is_Word_Break=--midnumlet}', "");
Error('\p{Is_WB=:=	MB}');
Error('\P{Is_WB=:=	MB}');
Expect(1, 39, '\p{Is_WB=mb}', "");
Expect(0, 39, '\p{^Is_WB=mb}', "");
Expect(0, 39, '\P{Is_WB=mb}', "");
Expect(1, 39, '\P{^Is_WB=mb}', "");
Expect(0, 38, '\p{Is_WB=mb}', "");
Expect(1, 38, '\p{^Is_WB=mb}', "");
Expect(1, 38, '\P{Is_WB=mb}', "");
Expect(0, 38, '\P{^Is_WB=mb}', "");
Expect(1, 39, '\p{Is_WB=-_mb}', "");
Expect(0, 39, '\p{^Is_WB=-_mb}', "");
Expect(0, 39, '\P{Is_WB=-_mb}', "");
Expect(1, 39, '\P{^Is_WB=-_mb}', "");
Expect(0, 38, '\p{Is_WB=-_mb}', "");
Expect(1, 38, '\p{^Is_WB=-_mb}', "");
Expect(1, 38, '\P{Is_WB=-_mb}', "");
Expect(0, 38, '\P{^Is_WB=-_mb}', "");
Error('\p{Word_Break=:=MIDNUM}');
Error('\P{Word_Break=:=MIDNUM}');
Expect(1, 44, '\p{Word_Break:	midnum}', "");
Expect(0, 44, '\p{^Word_Break:	midnum}', "");
Expect(0, 44, '\P{Word_Break:	midnum}', "");
Expect(1, 44, '\P{^Word_Break:	midnum}', "");
Expect(0, 43, '\p{Word_Break:	midnum}', "");
Expect(1, 43, '\p{^Word_Break:	midnum}', "");
Expect(1, 43, '\P{Word_Break:	midnum}', "");
Expect(0, 43, '\P{^Word_Break:	midnum}', "");
Expect(1, 44, '\p{Word_Break=	_MIDNUM}', "");
Expect(0, 44, '\p{^Word_Break=	_MIDNUM}', "");
Expect(0, 44, '\P{Word_Break=	_MIDNUM}', "");
Expect(1, 44, '\P{^Word_Break=	_MIDNUM}', "");
Expect(0, 43, '\p{Word_Break=	_MIDNUM}', "");
Expect(1, 43, '\p{^Word_Break=	_MIDNUM}', "");
Expect(1, 43, '\P{Word_Break=	_MIDNUM}', "");
Expect(0, 43, '\P{^Word_Break=	_MIDNUM}', "");
Error('\p{WB=/a/- MN}');
Error('\P{WB=/a/- MN}');
Expect(1, 44, '\p{WB=mn}', "");
Expect(0, 44, '\p{^WB=mn}', "");
Expect(0, 44, '\P{WB=mn}', "");
Expect(1, 44, '\P{^WB=mn}', "");
Expect(0, 43, '\p{WB=mn}', "");
Expect(1, 43, '\p{^WB=mn}', "");
Expect(1, 43, '\P{WB=mn}', "");
Expect(0, 43, '\P{^WB=mn}', "");
Expect(1, 44, '\p{WB=- MN}', "");
Expect(0, 44, '\p{^WB=- MN}', "");
Expect(0, 44, '\P{WB=- MN}', "");
Expect(1, 44, '\P{^WB=- MN}', "");
Expect(0, 43, '\p{WB=- MN}', "");
Expect(1, 43, '\p{^WB=- MN}', "");
Expect(1, 43, '\P{WB=- MN}', "");
Expect(0, 43, '\P{^WB=- MN}', "");
Error('\p{Is_Word_Break= _MIDNUM/a/}');
Error('\P{Is_Word_Break= _MIDNUM/a/}');
Expect(1, 44, '\p{Is_Word_Break=midnum}', "");
Expect(0, 44, '\p{^Is_Word_Break=midnum}', "");
Expect(0, 44, '\P{Is_Word_Break=midnum}', "");
Expect(1, 44, '\P{^Is_Word_Break=midnum}', "");
Expect(0, 43, '\p{Is_Word_Break=midnum}', "");
Expect(1, 43, '\p{^Is_Word_Break=midnum}', "");
Expect(1, 43, '\P{Is_Word_Break=midnum}', "");
Expect(0, 43, '\P{^Is_Word_Break=midnum}', "");
Expect(1, 44, '\p{Is_Word_Break:   	_MIDNUM}', "");
Expect(0, 44, '\p{^Is_Word_Break:   	_MIDNUM}', "");
Expect(0, 44, '\P{Is_Word_Break:   	_MIDNUM}', "");
Expect(1, 44, '\P{^Is_Word_Break:   	_MIDNUM}', "");
Expect(0, 43, '\p{Is_Word_Break:   	_MIDNUM}', "");
Expect(1, 43, '\p{^Is_Word_Break:   	_MIDNUM}', "");
Expect(1, 43, '\P{Is_Word_Break:   	_MIDNUM}', "");
Expect(0, 43, '\P{^Is_Word_Break:   	_MIDNUM}', "");
Error('\p{Is_WB:	/a/	MN}');
Error('\P{Is_WB:	/a/	MN}');
Expect(1, 44, '\p{Is_WB=mn}', "");
Expect(0, 44, '\p{^Is_WB=mn}', "");
Expect(0, 44, '\P{Is_WB=mn}', "");
Expect(1, 44, '\P{^Is_WB=mn}', "");
Expect(0, 43, '\p{Is_WB=mn}', "");
Expect(1, 43, '\p{^Is_WB=mn}', "");
Expect(1, 43, '\P{Is_WB=mn}', "");
Expect(0, 43, '\P{^Is_WB=mn}', "");
Expect(1, 44, '\p{Is_WB=-MN}', "");
Expect(0, 44, '\p{^Is_WB=-MN}', "");
Expect(0, 44, '\P{Is_WB=-MN}', "");
Expect(1, 44, '\P{^Is_WB=-MN}', "");
Expect(0, 43, '\p{Is_WB=-MN}', "");
Expect(1, 43, '\p{^Is_WB=-MN}', "");
Expect(1, 43, '\P{Is_WB=-MN}', "");
Expect(0, 43, '\P{^Is_WB=-MN}', "");
Error('\p{Word_Break=	_Katakana/a/}');
Error('\P{Word_Break=	_Katakana/a/}');
Expect(1, 12341, '\p{Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Word_Break=katakana}', "");
Expect(0, 12341, '\P{Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Word_Break=katakana}', "");
Expect(0, 12336, '\p{Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Word_Break=katakana}', "");
Expect(1, 12336, '\P{Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Word_Break=katakana}', "");
Expect(1, 12341, '\p{Word_Break=_Katakana}', "");
Expect(0, 12341, '\p{^Word_Break=_Katakana}', "");
Expect(0, 12341, '\P{Word_Break=_Katakana}', "");
Expect(1, 12341, '\P{^Word_Break=_Katakana}', "");
Expect(0, 12336, '\p{Word_Break=_Katakana}', "");
Expect(1, 12336, '\p{^Word_Break=_Katakana}', "");
Expect(1, 12336, '\P{Word_Break=_Katakana}', "");
Expect(0, 12336, '\P{^Word_Break=_Katakana}', "");
Error('\p{WB=	_KA:=}');
Error('\P{WB=	_KA:=}');
Expect(1, 12341, '\p{WB=ka}', "");
Expect(0, 12341, '\p{^WB=ka}', "");
Expect(0, 12341, '\P{WB=ka}', "");
Expect(1, 12341, '\P{^WB=ka}', "");
Expect(0, 12336, '\p{WB=ka}', "");
Expect(1, 12336, '\p{^WB=ka}', "");
Expect(1, 12336, '\P{WB=ka}', "");
Expect(0, 12336, '\P{^WB=ka}', "");
Expect(1, 12341, '\p{WB:	 KA}', "");
Expect(0, 12341, '\p{^WB:	 KA}', "");
Expect(0, 12341, '\P{WB:	 KA}', "");
Expect(1, 12341, '\P{^WB:	 KA}', "");
Expect(0, 12336, '\p{WB:	 KA}', "");
Expect(1, 12336, '\p{^WB:	 KA}', "");
Expect(1, 12336, '\P{WB:	 KA}', "");
Expect(0, 12336, '\P{^WB:	 KA}', "");
Error('\p{Is_Word_Break=:=__katakana}');
Error('\P{Is_Word_Break=:=__katakana}');
Expect(1, 12341, '\p{Is_Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Is_Word_Break=katakana}', "");
Expect(0, 12341, '\P{Is_Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Is_Word_Break=katakana}', "");
Expect(0, 12336, '\p{Is_Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Is_Word_Break=katakana}', "");
Expect(1, 12336, '\P{Is_Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Is_Word_Break=katakana}', "");
Expect(1, 12341, '\p{Is_Word_Break=  KATAKANA}', "");
Expect(0, 12341, '\p{^Is_Word_Break=  KATAKANA}', "");
Expect(0, 12341, '\P{Is_Word_Break=  KATAKANA}', "");
Expect(1, 12341, '\P{^Is_Word_Break=  KATAKANA}', "");
Expect(0, 12336, '\p{Is_Word_Break=  KATAKANA}', "");
Expect(1, 12336, '\p{^Is_Word_Break=  KATAKANA}', "");
Expect(1, 12336, '\P{Is_Word_Break=  KATAKANA}', "");
Expect(0, 12336, '\P{^Is_Word_Break=  KATAKANA}', "");
Error('\p{Is_WB=/a/KA}');
Error('\P{Is_WB=/a/KA}');
Expect(1, 12341, '\p{Is_WB=ka}', "");
Expect(0, 12341, '\p{^Is_WB=ka}', "");
Expect(0, 12341, '\P{Is_WB=ka}', "");
Expect(1, 12341, '\P{^Is_WB=ka}', "");
Expect(0, 12336, '\p{Is_WB=ka}', "");
Expect(1, 12336, '\p{^Is_WB=ka}', "");
Expect(1, 12336, '\P{Is_WB=ka}', "");
Expect(0, 12336, '\P{^Is_WB=ka}', "");
Expect(1, 12341, '\p{Is_WB= 	KA}', "");
Expect(0, 12341, '\p{^Is_WB= 	KA}', "");
Expect(0, 12341, '\P{Is_WB= 	KA}', "");
Expect(1, 12341, '\P{^Is_WB= 	KA}', "");
Expect(0, 12336, '\p{Is_WB= 	KA}', "");
Expect(1, 12336, '\p{^Is_WB= 	KA}', "");
Expect(1, 12336, '\P{Is_WB= 	KA}', "");
Expect(0, 12336, '\P{^Is_WB= 	KA}', "");
Error('\p{Word_Break:   :=	LF}');
Error('\P{Word_Break:   :=	LF}');
Expect(1, 10, '\p{Word_Break=lf}', "");
Expect(0, 10, '\p{^Word_Break=lf}', "");
Expect(0, 10, '\P{Word_Break=lf}', "");
Expect(1, 10, '\P{^Word_Break=lf}', "");
Expect(0, 9, '\p{Word_Break=lf}', "");
Expect(1, 9, '\p{^Word_Break=lf}', "");
Expect(1, 9, '\P{Word_Break=lf}', "");
Expect(0, 9, '\P{^Word_Break=lf}', "");
Expect(1, 10, '\p{Word_Break=-LF}', "");
Expect(0, 10, '\p{^Word_Break=-LF}', "");
Expect(0, 10, '\P{Word_Break=-LF}', "");
Expect(1, 10, '\P{^Word_Break=-LF}', "");
Expect(0, 9, '\p{Word_Break=-LF}', "");
Expect(1, 9, '\p{^Word_Break=-LF}', "");
Expect(1, 9, '\P{Word_Break=-LF}', "");
Expect(0, 9, '\P{^Word_Break=-LF}', "");
Error('\p{WB= :=LF}');
Error('\P{WB= :=LF}');
Expect(1, 10, '\p{WB=lf}', "");
Expect(0, 10, '\p{^WB=lf}', "");
Expect(0, 10, '\P{WB=lf}', "");
Expect(1, 10, '\P{^WB=lf}', "");
Expect(0, 9, '\p{WB=lf}', "");
Expect(1, 9, '\p{^WB=lf}', "");
Expect(1, 9, '\P{WB=lf}', "");
Expect(0, 9, '\P{^WB=lf}', "");
Expect(1, 10, '\p{WB=-LF}', "");
Expect(0, 10, '\p{^WB=-LF}', "");
Expect(0, 10, '\P{WB=-LF}', "");
Expect(1, 10, '\P{^WB=-LF}', "");
Expect(0, 9, '\p{WB=-LF}', "");
Expect(1, 9, '\p{^WB=-LF}', "");
Expect(1, 9, '\P{WB=-LF}', "");
Expect(0, 9, '\P{^WB=-LF}', "");
Error('\p{Is_Word_Break=:=_ LF}');
Error('\P{Is_Word_Break=:=_ LF}');
Expect(1, 10, '\p{Is_Word_Break=lf}', "");
Expect(0, 10, '\p{^Is_Word_Break=lf}', "");
Expect(0, 10, '\P{Is_Word_Break=lf}', "");
Expect(1, 10, '\P{^Is_Word_Break=lf}', "");
Expect(0, 9, '\p{Is_Word_Break=lf}', "");
Expect(1, 9, '\p{^Is_Word_Break=lf}', "");
Expect(1, 9, '\P{Is_Word_Break=lf}', "");
Expect(0, 9, '\P{^Is_Word_Break=lf}', "");
Expect(1, 10, '\p{Is_Word_Break=  lf}', "");
Expect(0, 10, '\p{^Is_Word_Break=  lf}', "");
Expect(0, 10, '\P{Is_Word_Break=  lf}', "");
Expect(1, 10, '\P{^Is_Word_Break=  lf}', "");
Expect(0, 9, '\p{Is_Word_Break=  lf}', "");
Expect(1, 9, '\p{^Is_Word_Break=  lf}', "");
Expect(1, 9, '\P{Is_Word_Break=  lf}', "");
Expect(0, 9, '\P{^Is_Word_Break=  lf}', "");
Error('\p{Is_WB=/a/-_LF}');
Error('\P{Is_WB=/a/-_LF}');
Expect(1, 10, '\p{Is_WB=lf}', "");
Expect(0, 10, '\p{^Is_WB=lf}', "");
Expect(0, 10, '\P{Is_WB=lf}', "");
Expect(1, 10, '\P{^Is_WB=lf}', "");
Expect(0, 9, '\p{Is_WB=lf}', "");
Expect(1, 9, '\p{^Is_WB=lf}', "");
Expect(1, 9, '\P{Is_WB=lf}', "");
Expect(0, 9, '\P{^Is_WB=lf}', "");
Expect(1, 10, '\p{Is_WB=-_LF}', "");
Expect(0, 10, '\p{^Is_WB=-_LF}', "");
Expect(0, 10, '\P{Is_WB=-_LF}', "");
Expect(1, 10, '\P{^Is_WB=-_LF}', "");
Expect(0, 9, '\p{Is_WB=-_LF}', "");
Expect(1, 9, '\p{^Is_WB=-_LF}', "");
Expect(1, 9, '\P{Is_WB=-_LF}', "");
Expect(0, 9, '\P{^Is_WB=-_LF}', "");
Error('\p{Changes_When_Casefolded:   -	Yes/a/}');
Error('\P{Changes_When_Casefolded:   -	Yes/a/}');
Expect(1, 90, '\p{Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_Casefolded= -YES}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded= -YES}', "");
Expect(0, 90, '\P{Changes_When_Casefolded= -YES}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded= -YES}', "");
Expect(0, 64, '\p{Changes_When_Casefolded= -YES}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded= -YES}', "");
Expect(1, 64, '\P{Changes_When_Casefolded= -YES}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded= -YES}', "");
Error('\p{CWCF:    /a/Y}');
Error('\P{CWCF:    /a/Y}');
Expect(1, 90, '\p{CWCF=y}', "");
Expect(0, 90, '\p{^CWCF=y}', "");
Expect(0, 90, '\P{CWCF=y}', "");
Expect(1, 90, '\P{^CWCF=y}', "");
Expect(0, 64, '\p{CWCF=y}', "");
Expect(1, 64, '\p{^CWCF=y}', "");
Expect(1, 64, '\P{CWCF=y}', "");
Expect(0, 64, '\P{^CWCF=y}', "");
Expect(1, 90, '\p{CWCF=-	Y}', "");
Expect(0, 90, '\p{^CWCF=-	Y}', "");
Expect(0, 90, '\P{CWCF=-	Y}', "");
Expect(1, 90, '\P{^CWCF=-	Y}', "");
Expect(0, 64, '\p{CWCF=-	Y}', "");
Expect(1, 64, '\p{^CWCF=-	Y}', "");
Expect(1, 64, '\P{CWCF=-	Y}', "");
Expect(0, 64, '\P{^CWCF=-	Y}', "");
Error('\p{Is_Changes_When_Casefolded=/a/	t}');
Error('\P{Is_Changes_When_Casefolded=/a/	t}');
Expect(1, 90, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casefolded=	T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=	T}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=	T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=	T}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=	T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=	T}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=	T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=	T}', "");
Error('\p{Is_CWCF=_true/a/}');
Error('\P{Is_CWCF=_true/a/}');
Expect(1, 90, '\p{Is_CWCF=true}', "");
Expect(0, 90, '\p{^Is_CWCF=true}', "");
Expect(0, 90, '\P{Is_CWCF=true}', "");
Expect(1, 90, '\P{^Is_CWCF=true}', "");
Expect(0, 64, '\p{Is_CWCF=true}', "");
Expect(1, 64, '\p{^Is_CWCF=true}', "");
Expect(1, 64, '\P{Is_CWCF=true}', "");
Expect(0, 64, '\P{^Is_CWCF=true}', "");
Expect(1, 90, '\p{Is_CWCF=	_True}', "");
Expect(0, 90, '\p{^Is_CWCF=	_True}', "");
Expect(0, 90, '\P{Is_CWCF=	_True}', "");
Expect(1, 90, '\P{^Is_CWCF=	_True}', "");
Expect(0, 64, '\p{Is_CWCF=	_True}', "");
Expect(1, 64, '\p{^Is_CWCF=	_True}', "");
Expect(1, 64, '\P{Is_CWCF=	_True}', "");
Expect(0, 64, '\P{^Is_CWCF=	_True}', "");
Error('\p{Changes_When_Casefolded=_No/a/}');
Error('\P{Changes_When_Casefolded=_No/a/}');
Expect(1, 64, '\p{Changes_When_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_Casefolded=_-No}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded=_-No}', "");
Expect(0, 64, '\P{Changes_When_Casefolded=_-No}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded=_-No}', "");
Expect(0, 90, '\p{Changes_When_Casefolded=_-No}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded=_-No}', "");
Expect(1, 90, '\P{Changes_When_Casefolded=_-No}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded=_-No}', "");
Error('\p{CWCF: :=N}');
Error('\P{CWCF: :=N}');
Expect(1, 64, '\p{CWCF=n}', "");
Expect(0, 64, '\p{^CWCF=n}', "");
Expect(0, 64, '\P{CWCF=n}', "");
Expect(1, 64, '\P{^CWCF=n}', "");
Expect(0, 90, '\p{CWCF=n}', "");
Expect(1, 90, '\p{^CWCF=n}', "");
Expect(1, 90, '\P{CWCF=n}', "");
Expect(0, 90, '\P{^CWCF=n}', "");
Expect(1, 64, '\p{CWCF=  n}', "");
Expect(0, 64, '\p{^CWCF=  n}', "");
Expect(0, 64, '\P{CWCF=  n}', "");
Expect(1, 64, '\P{^CWCF=  n}', "");
Expect(0, 90, '\p{CWCF=  n}', "");
Expect(1, 90, '\p{^CWCF=  n}', "");
Expect(1, 90, '\P{CWCF=  n}', "");
Expect(0, 90, '\P{^CWCF=  n}', "");
Error('\p{Is_Changes_When_Casefolded=/a/f}');
Error('\P{Is_Changes_When_Casefolded=/a/f}');
Expect(1, 64, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casefolded=_-f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=_-f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=_-f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=_-f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=_-f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=_-f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=_-f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=_-f}', "");
Error('\p{Is_CWCF=/a/_	False}');
Error('\P{Is_CWCF=/a/_	False}');
Expect(1, 64, '\p{Is_CWCF=false}', "");
Expect(0, 64, '\p{^Is_CWCF=false}', "");
Expect(0, 64, '\P{Is_CWCF=false}', "");
Expect(1, 64, '\P{^Is_CWCF=false}', "");
Expect(0, 90, '\p{Is_CWCF=false}', "");
Expect(1, 90, '\p{^Is_CWCF=false}', "");
Expect(1, 90, '\P{Is_CWCF=false}', "");
Expect(0, 90, '\P{^Is_CWCF=false}', "");
Expect(1, 64, '\p{Is_CWCF:   FALSE}', "");
Expect(0, 64, '\p{^Is_CWCF:   FALSE}', "");
Expect(0, 64, '\P{Is_CWCF:   FALSE}', "");
Expect(1, 64, '\P{^Is_CWCF:   FALSE}', "");
Expect(0, 90, '\p{Is_CWCF:   FALSE}', "");
Expect(1, 90, '\p{^Is_CWCF:   FALSE}', "");
Expect(1, 90, '\P{Is_CWCF:   FALSE}', "");
Expect(0, 90, '\P{^Is_CWCF:   FALSE}', "");
Error('\p{	:=Gothic}');
Error('\P{	:=Gothic}');
Expect(1, 66378, '\p{gothic}', "");
Expect(0, 66378, '\p{^gothic}', "");
Expect(0, 66378, '\P{gothic}', "");
Expect(1, 66378, '\P{^gothic}', "");
Expect(0, 66351, '\p{gothic}', "");
Expect(1, 66351, '\p{^gothic}', "");
Expect(1, 66351, '\P{gothic}', "");
Expect(0, 66351, '\P{^gothic}', "");
Expect(1, 66378, '\p{- Gothic}', "");
Expect(0, 66378, '\p{^- Gothic}', "");
Expect(0, 66378, '\P{- Gothic}', "");
Expect(1, 66378, '\P{^- Gothic}', "");
Expect(0, 66351, '\p{- Gothic}', "");
Expect(1, 66351, '\p{^- Gothic}', "");
Expect(1, 66351, '\P{- Gothic}', "");
Expect(0, 66351, '\P{^- Gothic}', "");
Error('\p{-:=Is-GOTHIC}');
Error('\P{-:=Is-GOTHIC}');
Expect(1, 66378, '\p{isgothic}', "");
Expect(0, 66378, '\p{^isgothic}', "");
Expect(0, 66378, '\P{isgothic}', "");
Expect(1, 66378, '\P{^isgothic}', "");
Expect(0, 66351, '\p{isgothic}', "");
Expect(1, 66351, '\p{^isgothic}', "");
Expect(1, 66351, '\P{isgothic}', "");
Expect(0, 66351, '\P{^isgothic}', "");
Expect(1, 66378, '\p{_Is Gothic}', "");
Expect(0, 66378, '\p{^_Is Gothic}', "");
Expect(0, 66378, '\P{_Is Gothic}', "");
Expect(1, 66378, '\P{^_Is Gothic}', "");
Expect(0, 66351, '\p{_Is Gothic}', "");
Expect(1, 66351, '\p{^_Is Gothic}', "");
Expect(1, 66351, '\P{_Is Gothic}', "");
Expect(0, 66351, '\P{^_Is Gothic}', "");
Error('\p{ /a/Goth}');
Error('\P{ /a/Goth}');
Expect(1, 66378, '\p{goth}', "");
Expect(0, 66378, '\p{^goth}', "");
Expect(0, 66378, '\P{goth}', "");
Expect(1, 66378, '\P{^goth}', "");
Expect(0, 66351, '\p{goth}', "");
Expect(1, 66351, '\p{^goth}', "");
Expect(1, 66351, '\P{goth}', "");
Expect(0, 66351, '\P{^goth}', "");
Expect(1, 66378, '\p{_goth}', "");
Expect(0, 66378, '\p{^_goth}', "");
Expect(0, 66378, '\P{_goth}', "");
Expect(1, 66378, '\P{^_goth}', "");
Expect(0, 66351, '\p{_goth}', "");
Expect(1, 66351, '\p{^_goth}', "");
Expect(1, 66351, '\P{_goth}', "");
Expect(0, 66351, '\P{^_goth}', "");
Error('\p{ -IS_Goth:=}');
Error('\P{ -IS_Goth:=}');
Expect(1, 66378, '\p{isgoth}', "");
Expect(0, 66378, '\p{^isgoth}', "");
Expect(0, 66378, '\P{isgoth}', "");
Expect(1, 66378, '\P{^isgoth}', "");
Expect(0, 66351, '\p{isgoth}', "");
Expect(1, 66351, '\p{^isgoth}', "");
Expect(1, 66351, '\P{isgoth}', "");
Expect(0, 66351, '\P{^isgoth}', "");
Expect(1, 66378, '\p{ _IS	GOTH}', "");
Expect(0, 66378, '\p{^ _IS	GOTH}', "");
Expect(0, 66378, '\P{ _IS	GOTH}', "");
Expect(1, 66378, '\P{^ _IS	GOTH}', "");
Expect(0, 66351, '\p{ _IS	GOTH}', "");
Expect(1, 66351, '\p{^ _IS	GOTH}', "");
Expect(1, 66351, '\P{ _IS	GOTH}', "");
Expect(0, 66351, '\P{^ _IS	GOTH}', "");
Error('\p{:= BLANK}');
Error('\P{:= BLANK}');
Expect(1, 9, '\p{blank}', "");
Expect(0, 9, '\p{^blank}', "");
Expect(0, 9, '\P{blank}', "");
Expect(1, 9, '\P{^blank}', "");
Expect(0, 8, '\p{blank}', "");
Expect(1, 8, '\p{^blank}', "");
Expect(1, 8, '\P{blank}', "");
Expect(0, 8, '\P{^blank}', "");
Expect(1, 9, '\p{ Blank}', "");
Expect(0, 9, '\p{^ Blank}', "");
Expect(0, 9, '\P{ Blank}', "");
Expect(1, 9, '\P{^ Blank}', "");
Expect(0, 8, '\p{ Blank}', "");
Expect(1, 8, '\p{^ Blank}', "");
Expect(1, 8, '\P{ Blank}', "");
Expect(0, 8, '\P{^ Blank}', "");
Error('\p{_/a/horizspace}');
Error('\P{_/a/horizspace}');
Expect(1, 9, '\p{horizspace}', "");
Expect(0, 9, '\p{^horizspace}', "");
Expect(0, 9, '\P{horizspace}', "");
Expect(1, 9, '\P{^horizspace}', "");
Expect(0, 8, '\p{horizspace}', "");
Expect(1, 8, '\p{^horizspace}', "");
Expect(1, 8, '\P{horizspace}', "");
Expect(0, 8, '\P{^horizspace}', "");
Expect(1, 9, '\p{-HorizSpace}', "");
Expect(0, 9, '\p{^-HorizSpace}', "");
Expect(0, 9, '\P{-HorizSpace}', "");
Expect(1, 9, '\P{^-HorizSpace}', "");
Expect(0, 8, '\p{-HorizSpace}', "");
Expect(1, 8, '\p{^-HorizSpace}', "");
Expect(1, 8, '\P{-HorizSpace}', "");
Expect(0, 8, '\P{^-HorizSpace}', "");
Error('\p{	/a/Is_blank}');
Error('\P{	/a/Is_blank}');
Expect(1, 9, '\p{isblank}', "");
Expect(0, 9, '\p{^isblank}', "");
Expect(0, 9, '\P{isblank}', "");
Expect(1, 9, '\P{^isblank}', "");
Expect(0, 8, '\p{isblank}', "");
Expect(1, 8, '\p{^isblank}', "");
Expect(1, 8, '\P{isblank}', "");
Expect(0, 8, '\P{^isblank}', "");
Expect(1, 9, '\p{-Is blank}', "");
Expect(0, 9, '\p{^-Is blank}', "");
Expect(0, 9, '\P{-Is blank}', "");
Expect(1, 9, '\P{^-Is blank}', "");
Expect(0, 8, '\p{-Is blank}', "");
Expect(1, 8, '\p{^-Is blank}', "");
Expect(1, 8, '\P{-Is blank}', "");
Expect(0, 8, '\P{^-Is blank}', "");
Error('\p{_IS:=HORIZSPACE}');
Error('\P{_IS:=HORIZSPACE}');
Expect(1, 9, '\p{ishorizspace}', "");
Expect(0, 9, '\p{^ishorizspace}', "");
Expect(0, 9, '\P{ishorizspace}', "");
Expect(1, 9, '\P{^ishorizspace}', "");
Expect(0, 8, '\p{ishorizspace}', "");
Expect(1, 8, '\p{^ishorizspace}', "");
Expect(1, 8, '\P{ishorizspace}', "");
Expect(0, 8, '\P{^ishorizspace}', "");
Expect(1, 9, '\p{_is HorizSpace}', "");
Expect(0, 9, '\p{^_is HorizSpace}', "");
Expect(0, 9, '\P{_is HorizSpace}', "");
Expect(1, 9, '\P{^_is HorizSpace}', "");
Expect(0, 8, '\p{_is HorizSpace}', "");
Expect(1, 8, '\p{^_is HorizSpace}', "");
Expect(1, 8, '\P{_is HorizSpace}', "");
Expect(0, 8, '\P{^_is HorizSpace}', "");
Error('\p{ combining/a/diacritical	marks}');
Error('\P{ combining/a/diacritical	marks}');
Expect(1, 879, '\p{combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{	Combining	DIACRITICAL_marks}', "");
Expect(0, 879, '\p{^	Combining	DIACRITICAL_marks}', "");
Expect(0, 879, '\P{	Combining	DIACRITICAL_marks}', "");
Expect(1, 879, '\P{^	Combining	DIACRITICAL_marks}', "");
Expect(0, 767, '\p{	Combining	DIACRITICAL_marks}', "");
Expect(1, 767, '\p{^	Combining	DIACRITICAL_marks}', "");
Expect(1, 767, '\P{	Combining	DIACRITICAL_marks}', "");
Expect(0, 767, '\P{^	Combining	DIACRITICAL_marks}', "");
Error('\p{	 IScombining	diacritical:=marks}');
Error('\P{	 IScombining	diacritical:=marks}');
Expect(1, 879, '\p{iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{	Is_combining Diacritical	Marks}', "");
Expect(0, 879, '\p{^	Is_combining Diacritical	Marks}', "");
Expect(0, 879, '\P{	Is_combining Diacritical	Marks}', "");
Expect(1, 879, '\P{^	Is_combining Diacritical	Marks}', "");
Expect(0, 767, '\p{	Is_combining Diacritical	Marks}', "");
Expect(1, 767, '\p{^	Is_combining Diacritical	Marks}', "");
Expect(1, 767, '\P{	Is_combining Diacritical	Marks}', "");
Expect(0, 767, '\P{^	Is_combining Diacritical	Marks}', "");
Error('\p{ 	in-combining	diacritical-Marks:=}');
Error('\P{ 	in-combining	diacritical-Marks:=}');
Expect(1, 879, '\p{incombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^incombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{incombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^incombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{incombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^incombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{incombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^incombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{-InCombining-DIACRITICAL-Marks}', "");
Expect(0, 879, '\p{^-InCombining-DIACRITICAL-Marks}', "");
Expect(0, 879, '\P{-InCombining-DIACRITICAL-Marks}', "");
Expect(1, 879, '\P{^-InCombining-DIACRITICAL-Marks}', "");
Expect(0, 767, '\p{-InCombining-DIACRITICAL-Marks}', "");
Expect(1, 767, '\p{^-InCombining-DIACRITICAL-Marks}', "");
Expect(1, 767, '\P{-InCombining-DIACRITICAL-Marks}', "");
Expect(0, 767, '\P{^-InCombining-DIACRITICAL-Marks}', "");
Error('\p{	/a/InscriptionalParthian}');
Error('\P{	/a/InscriptionalParthian}');
Expect(1, 68437, '\p{inscriptionalparthian}', "");
Expect(0, 68437, '\p{^inscriptionalparthian}', "");
Expect(0, 68437, '\P{inscriptionalparthian}', "");
Expect(1, 68437, '\P{^inscriptionalparthian}', "");
Expect(0, 68415, '\p{inscriptionalparthian}', "");
Expect(1, 68415, '\p{^inscriptionalparthian}', "");
Expect(1, 68415, '\P{inscriptionalparthian}', "");
Expect(0, 68415, '\P{^inscriptionalparthian}', "");
Expect(1, 68437, '\p{--inscriptional-PARTHIAN}', "");
Expect(0, 68437, '\p{^--inscriptional-PARTHIAN}', "");
Expect(0, 68437, '\P{--inscriptional-PARTHIAN}', "");
Expect(1, 68437, '\P{^--inscriptional-PARTHIAN}', "");
Expect(0, 68415, '\p{--inscriptional-PARTHIAN}', "");
Expect(1, 68415, '\p{^--inscriptional-PARTHIAN}', "");
Expect(1, 68415, '\P{--inscriptional-PARTHIAN}', "");
Expect(0, 68415, '\P{^--inscriptional-PARTHIAN}', "");
Error('\p{_-IS	Inscriptional:=Parthian}');
Error('\P{_-IS	Inscriptional:=Parthian}');
Expect(1, 68437, '\p{isinscriptionalparthian}', "");
Expect(0, 68437, '\p{^isinscriptionalparthian}', "");
Expect(0, 68437, '\P{isinscriptionalparthian}', "");
Expect(1, 68437, '\P{^isinscriptionalparthian}', "");
Expect(0, 68415, '\p{isinscriptionalparthian}', "");
Expect(1, 68415, '\p{^isinscriptionalparthian}', "");
Expect(1, 68415, '\P{isinscriptionalparthian}', "");
Expect(0, 68415, '\P{^isinscriptionalparthian}', "");
Expect(1, 68437, '\p{__IS-INSCRIPTIONAL-Parthian}', "");
Expect(0, 68437, '\p{^__IS-INSCRIPTIONAL-Parthian}', "");
Expect(0, 68437, '\P{__IS-INSCRIPTIONAL-Parthian}', "");
Expect(1, 68437, '\P{^__IS-INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\p{__IS-INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\p{^__IS-INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\P{__IS-INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\P{^__IS-INSCRIPTIONAL-Parthian}', "");
Error('\p{ prti/a/}');
Error('\P{ prti/a/}');
Expect(1, 68437, '\p{prti}', "");
Expect(0, 68437, '\p{^prti}', "");
Expect(0, 68437, '\P{prti}', "");
Expect(1, 68437, '\P{^prti}', "");
Expect(0, 68415, '\p{prti}', "");
Expect(1, 68415, '\p{^prti}', "");
Expect(1, 68415, '\P{prti}', "");
Expect(0, 68415, '\P{^prti}', "");
Expect(1, 68437, '\p{-Prti}', "");
Expect(0, 68437, '\p{^-Prti}', "");
Expect(0, 68437, '\P{-Prti}', "");
Expect(1, 68437, '\P{^-Prti}', "");
Expect(0, 68415, '\p{-Prti}', "");
Expect(1, 68415, '\p{^-Prti}', "");
Expect(1, 68415, '\P{-Prti}', "");
Expect(0, 68415, '\P{^-Prti}', "");
Error('\p{:=_Is	Prti}');
Error('\P{:=_Is	Prti}');
Expect(1, 68437, '\p{isprti}', "");
Expect(0, 68437, '\p{^isprti}', "");
Expect(0, 68437, '\P{isprti}', "");
Expect(1, 68437, '\P{^isprti}', "");
Expect(0, 68415, '\p{isprti}', "");
Expect(1, 68415, '\p{^isprti}', "");
Expect(1, 68415, '\P{isprti}', "");
Expect(0, 68415, '\P{^isprti}', "");
Expect(1, 68437, '\p{_Is_Prti}', "");
Expect(0, 68437, '\p{^_Is_Prti}', "");
Expect(0, 68437, '\P{_Is_Prti}', "");
Expect(1, 68437, '\P{^_Is_Prti}', "");
Expect(0, 68415, '\p{_Is_Prti}', "");
Expect(1, 68415, '\p{^_Is_Prti}', "");
Expect(1, 68415, '\P{_Is_Prti}', "");
Expect(0, 68415, '\P{^_Is_Prti}', "");
Error('\p{ 	Devanagari Extended/a/}');
Error('\P{ 	Devanagari Extended/a/}');
Expect(1, 43263, '\p{devanagariextended}', "");
Expect(0, 43263, '\p{^devanagariextended}', "");
Expect(0, 43263, '\P{devanagariextended}', "");
Expect(1, 43263, '\P{^devanagariextended}', "");
Expect(0, 43231, '\p{devanagariextended}', "");
Expect(1, 43231, '\p{^devanagariextended}', "");
Expect(1, 43231, '\P{devanagariextended}', "");
Expect(0, 43231, '\P{^devanagariextended}', "");
Expect(1, 43263, '\p{	-Devanagari-Extended}', "");
Expect(0, 43263, '\p{^	-Devanagari-Extended}', "");
Expect(0, 43263, '\P{	-Devanagari-Extended}', "");
Expect(1, 43263, '\P{^	-Devanagari-Extended}', "");
Expect(0, 43231, '\p{	-Devanagari-Extended}', "");
Expect(1, 43231, '\p{^	-Devanagari-Extended}', "");
Expect(1, 43231, '\P{	-Devanagari-Extended}', "");
Expect(0, 43231, '\P{^	-Devanagari-Extended}', "");
Error('\p{:=Is devanagari Extended}');
Error('\P{:=Is devanagari Extended}');
Expect(1, 43263, '\p{isdevanagariextended}', "");
Expect(0, 43263, '\p{^isdevanagariextended}', "");
Expect(0, 43263, '\P{isdevanagariextended}', "");
Expect(1, 43263, '\P{^isdevanagariextended}', "");
Expect(0, 43231, '\p{isdevanagariextended}', "");
Expect(1, 43231, '\p{^isdevanagariextended}', "");
Expect(1, 43231, '\P{isdevanagariextended}', "");
Expect(0, 43231, '\P{^isdevanagariextended}', "");
Expect(1, 43263, '\p{	IS	Devanagari	EXTENDED}', "");
Expect(0, 43263, '\p{^	IS	Devanagari	EXTENDED}', "");
Expect(0, 43263, '\P{	IS	Devanagari	EXTENDED}', "");
Expect(1, 43263, '\P{^	IS	Devanagari	EXTENDED}', "");
Expect(0, 43231, '\p{	IS	Devanagari	EXTENDED}', "");
Expect(1, 43231, '\p{^	IS	Devanagari	EXTENDED}', "");
Expect(1, 43231, '\P{	IS	Devanagari	EXTENDED}', "");
Expect(0, 43231, '\P{^	IS	Devanagari	EXTENDED}', "");
Error('\p{ 	IN/a/Devanagari EXTENDED}');
Error('\P{ 	IN/a/Devanagari EXTENDED}');
Expect(1, 43263, '\p{indevanagariextended}', "");
Expect(0, 43263, '\p{^indevanagariextended}', "");
Expect(0, 43263, '\P{indevanagariextended}', "");
Expect(1, 43263, '\P{^indevanagariextended}', "");
Expect(0, 43231, '\p{indevanagariextended}', "");
Expect(1, 43231, '\p{^indevanagariextended}', "");
Expect(1, 43231, '\P{indevanagariextended}', "");
Expect(0, 43231, '\P{^indevanagariextended}', "");
Expect(1, 43263, '\p{_In DEVANAGARIextended}', "");
Expect(0, 43263, '\p{^_In DEVANAGARIextended}', "");
Expect(0, 43263, '\P{_In DEVANAGARIextended}', "");
Expect(1, 43263, '\P{^_In DEVANAGARIextended}', "");
Expect(0, 43231, '\p{_In DEVANAGARIextended}', "");
Expect(1, 43231, '\p{^_In DEVANAGARIextended}', "");
Expect(1, 43231, '\P{_In DEVANAGARIextended}', "");
Expect(0, 43231, '\P{^_In DEVANAGARIextended}', "");
Error('\p{-ethiopicSupplement:=}');
Error('\P{-ethiopicSupplement:=}');
Expect(1, 5023, '\p{ethiopicsupplement}', "");
Expect(0, 5023, '\p{^ethiopicsupplement}', "");
Expect(0, 5023, '\P{ethiopicsupplement}', "");
Expect(1, 5023, '\P{^ethiopicsupplement}', "");
Expect(0, 4991, '\p{ethiopicsupplement}', "");
Expect(1, 4991, '\p{^ethiopicsupplement}', "");
Expect(1, 4991, '\P{ethiopicsupplement}', "");
Expect(0, 4991, '\P{^ethiopicsupplement}', "");
Expect(1, 5023, '\p{ETHIOPICSUPPLEMENT}', "");
Expect(0, 5023, '\p{^ETHIOPICSUPPLEMENT}', "");
Expect(0, 5023, '\P{ETHIOPICSUPPLEMENT}', "");
Expect(1, 5023, '\P{^ETHIOPICSUPPLEMENT}', "");
Expect(0, 4991, '\p{ETHIOPICSUPPLEMENT}', "");
Expect(1, 4991, '\p{^ETHIOPICSUPPLEMENT}', "");
Expect(1, 4991, '\P{ETHIOPICSUPPLEMENT}', "");
Expect(0, 4991, '\P{^ETHIOPICSUPPLEMENT}', "");
Error('\p{-/a/Is-Ethiopic-SUPPLEMENT}');
Error('\P{-/a/Is-Ethiopic-SUPPLEMENT}');
Expect(1, 5023, '\p{isethiopicsupplement}', "");
Expect(0, 5023, '\p{^isethiopicsupplement}', "");
Expect(0, 5023, '\P{isethiopicsupplement}', "");
Expect(1, 5023, '\P{^isethiopicsupplement}', "");
Expect(0, 4991, '\p{isethiopicsupplement}', "");
Expect(1, 4991, '\p{^isethiopicsupplement}', "");
Expect(1, 4991, '\P{isethiopicsupplement}', "");
Expect(0, 4991, '\P{^isethiopicsupplement}', "");
Expect(1, 5023, '\p{		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(0, 5023, '\p{^		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(0, 5023, '\P{		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(1, 5023, '\P{^		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(0, 4991, '\p{		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(1, 4991, '\p{^		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(1, 4991, '\P{		is_ETHIOPIC-SUPPLEMENT}', "");
Expect(0, 4991, '\P{^		is_ETHIOPIC-SUPPLEMENT}', "");
Error('\p{_in ethiopic:=Supplement}');
Error('\P{_in ethiopic:=Supplement}');
Expect(1, 5023, '\p{inethiopicsupplement}', "");
Expect(0, 5023, '\p{^inethiopicsupplement}', "");
Expect(0, 5023, '\P{inethiopicsupplement}', "");
Expect(1, 5023, '\P{^inethiopicsupplement}', "");
Expect(0, 4991, '\p{inethiopicsupplement}', "");
Expect(1, 4991, '\p{^inethiopicsupplement}', "");
Expect(1, 4991, '\P{inethiopicsupplement}', "");
Expect(0, 4991, '\P{^inethiopicsupplement}', "");
Expect(1, 5023, '\p{__In ethiopicSupplement}', "");
Expect(0, 5023, '\p{^__In ethiopicSupplement}', "");
Expect(0, 5023, '\P{__In ethiopicSupplement}', "");
Expect(1, 5023, '\P{^__In ethiopicSupplement}', "");
Expect(0, 4991, '\p{__In ethiopicSupplement}', "");
Expect(1, 4991, '\p{^__In ethiopicSupplement}', "");
Expect(1, 4991, '\P{__In ethiopicSupplement}', "");
Expect(0, 4991, '\P{^__In ethiopicSupplement}', "");
Error('\p{	-dingbats/a/}');
Error('\P{	-dingbats/a/}');
Expect(1, 10175, '\p{dingbats}', "");
Expect(0, 10175, '\p{^dingbats}', "");
Expect(0, 10175, '\P{dingbats}', "");
Expect(1, 10175, '\P{^dingbats}', "");
Expect(0, 9983, '\p{dingbats}', "");
Expect(1, 9983, '\p{^dingbats}', "");
Expect(1, 9983, '\P{dingbats}', "");
Expect(0, 9983, '\P{^dingbats}', "");
Expect(1, 10175, '\p{	-Dingbats}', "");
Expect(0, 10175, '\p{^	-Dingbats}', "");
Expect(0, 10175, '\P{	-Dingbats}', "");
Expect(1, 10175, '\P{^	-Dingbats}', "");
Expect(0, 9983, '\p{	-Dingbats}', "");
Expect(1, 9983, '\p{^	-Dingbats}', "");
Expect(1, 9983, '\P{	-Dingbats}', "");
Expect(0, 9983, '\P{^	-Dingbats}', "");
Error('\p{/a/is	Dingbats}');
Error('\P{/a/is	Dingbats}');
Expect(1, 10175, '\p{isdingbats}', "");
Expect(0, 10175, '\p{^isdingbats}', "");
Expect(0, 10175, '\P{isdingbats}', "");
Expect(1, 10175, '\P{^isdingbats}', "");
Expect(0, 9983, '\p{isdingbats}', "");
Expect(1, 9983, '\p{^isdingbats}', "");
Expect(1, 9983, '\P{isdingbats}', "");
Expect(0, 9983, '\P{^isdingbats}', "");
Expect(1, 10175, '\p{-_is_dingbats}', "");
Expect(0, 10175, '\p{^-_is_dingbats}', "");
Expect(0, 10175, '\P{-_is_dingbats}', "");
Expect(1, 10175, '\P{^-_is_dingbats}', "");
Expect(0, 9983, '\p{-_is_dingbats}', "");
Expect(1, 9983, '\p{^-_is_dingbats}', "");
Expect(1, 9983, '\P{-_is_dingbats}', "");
Expect(0, 9983, '\P{^-_is_dingbats}', "");
Error('\p{	:=In-dingbats}');
Error('\P{	:=In-dingbats}');
Expect(1, 10175, '\p{indingbats}', "");
Expect(0, 10175, '\p{^indingbats}', "");
Expect(0, 10175, '\P{indingbats}', "");
Expect(1, 10175, '\P{^indingbats}', "");
Expect(0, 9983, '\p{indingbats}', "");
Expect(1, 9983, '\p{^indingbats}', "");
Expect(1, 9983, '\P{indingbats}', "");
Expect(0, 9983, '\P{^indingbats}', "");
Expect(1, 10175, '\p{-In_DINGBATS}', "");
Expect(0, 10175, '\p{^-In_DINGBATS}', "");
Expect(0, 10175, '\P{-In_DINGBATS}', "");
Expect(1, 10175, '\P{^-In_DINGBATS}', "");
Expect(0, 9983, '\p{-In_DINGBATS}', "");
Expect(1, 9983, '\p{^-In_DINGBATS}', "");
Expect(1, 9983, '\P{-In_DINGBATS}', "");
Expect(0, 9983, '\P{^-In_DINGBATS}', "");
Error('\p{ /a/Logical	Order exception}');
Error('\P{ /a/Logical	Order exception}');
Expect(1, 3652, '\p{logicalorderexception}', "");
Expect(0, 3652, '\p{^logicalorderexception}', "");
Expect(0, 3652, '\P{logicalorderexception}', "");
Expect(1, 3652, '\P{^logicalorderexception}', "");
Expect(0, 3647, '\p{logicalorderexception}', "");
Expect(1, 3647, '\p{^logicalorderexception}', "");
Expect(1, 3647, '\P{logicalorderexception}', "");
Expect(0, 3647, '\P{^logicalorderexception}', "");
Expect(1, 3652, '\p{ LOGICAL Order Exception}', "");
Expect(0, 3652, '\p{^ LOGICAL Order Exception}', "");
Expect(0, 3652, '\P{ LOGICAL Order Exception}', "");
Expect(1, 3652, '\P{^ LOGICAL Order Exception}', "");
Expect(0, 3647, '\p{ LOGICAL Order Exception}', "");
Expect(1, 3647, '\p{^ LOGICAL Order Exception}', "");
Expect(1, 3647, '\P{ LOGICAL Order Exception}', "");
Expect(0, 3647, '\P{^ LOGICAL Order Exception}', "");
Error('\p{_:=Is_Logical_order	Exception}');
Error('\P{_:=Is_Logical_order	Exception}');
Expect(1, 3652, '\p{islogicalorderexception}', "");
Expect(0, 3652, '\p{^islogicalorderexception}', "");
Expect(0, 3652, '\P{islogicalorderexception}', "");
Expect(1, 3652, '\P{^islogicalorderexception}', "");
Expect(0, 3647, '\p{islogicalorderexception}', "");
Expect(1, 3647, '\p{^islogicalorderexception}', "");
Expect(1, 3647, '\P{islogicalorderexception}', "");
Expect(0, 3647, '\P{^islogicalorderexception}', "");
Expect(1, 3652, '\p{_ISlogicalORDER-Exception}', "");
Expect(0, 3652, '\p{^_ISlogicalORDER-Exception}', "");
Expect(0, 3652, '\P{_ISlogicalORDER-Exception}', "");
Expect(1, 3652, '\P{^_ISlogicalORDER-Exception}', "");
Expect(0, 3647, '\p{_ISlogicalORDER-Exception}', "");
Expect(1, 3647, '\p{^_ISlogicalORDER-Exception}', "");
Expect(1, 3647, '\P{_ISlogicalORDER-Exception}', "");
Expect(0, 3647, '\P{^_ISlogicalORDER-Exception}', "");
Error('\p{:=__LOE}');
Error('\P{:=__LOE}');
Expect(1, 3652, '\p{loe}', "");
Expect(0, 3652, '\p{^loe}', "");
Expect(0, 3652, '\P{loe}', "");
Expect(1, 3652, '\P{^loe}', "");
Expect(0, 3647, '\p{loe}', "");
Expect(1, 3647, '\p{^loe}', "");
Expect(1, 3647, '\P{loe}', "");
Expect(0, 3647, '\P{^loe}', "");
Expect(1, 3652, '\p{	LOE}', "");
Expect(0, 3652, '\p{^	LOE}', "");
Expect(0, 3652, '\P{	LOE}', "");
Expect(1, 3652, '\P{^	LOE}', "");
Expect(0, 3647, '\p{	LOE}', "");
Expect(1, 3647, '\p{^	LOE}', "");
Expect(1, 3647, '\P{	LOE}', "");
Expect(0, 3647, '\P{^	LOE}', "");
Error('\p{Is LOE/a/}');
Error('\P{Is LOE/a/}');
Expect(1, 3652, '\p{isloe}', "");
Expect(0, 3652, '\p{^isloe}', "");
Expect(0, 3652, '\P{isloe}', "");
Expect(1, 3652, '\P{^isloe}', "");
Expect(0, 3647, '\p{isloe}', "");
Expect(1, 3647, '\p{^isloe}', "");
Expect(1, 3647, '\P{isloe}', "");
Expect(0, 3647, '\P{^isloe}', "");
Expect(1, 3652, '\p{_-is_loe}', "");
Expect(0, 3652, '\p{^_-is_loe}', "");
Expect(0, 3652, '\P{_-is_loe}', "");
Expect(1, 3652, '\P{^_-is_loe}', "");
Expect(0, 3647, '\p{_-is_loe}', "");
Expect(1, 3647, '\p{^_-is_loe}', "");
Expect(1, 3647, '\P{_-is_loe}', "");
Expect(0, 3647, '\P{^_-is_loe}', "");
Error('\p{_-In-LYCIAN:=}');
Error('\P{_-In-LYCIAN:=}');
Expect(1, 66207, '\p{inlycian}', "");
Expect(0, 66207, '\p{^inlycian}', "");
Expect(0, 66207, '\P{inlycian}', "");
Expect(1, 66207, '\P{^inlycian}', "");
Expect(0, 66175, '\p{inlycian}', "");
Expect(1, 66175, '\p{^inlycian}', "");
Expect(1, 66175, '\P{inlycian}', "");
Expect(0, 66175, '\P{^inlycian}', "");
Expect(1, 66207, '\p{	IN_LYCIAN}', "");
Expect(0, 66207, '\p{^	IN_LYCIAN}', "");
Expect(0, 66207, '\P{	IN_LYCIAN}', "");
Expect(1, 66207, '\P{^	IN_LYCIAN}', "");
Expect(0, 66175, '\p{	IN_LYCIAN}', "");
Expect(1, 66175, '\p{^	IN_LYCIAN}', "");
Expect(1, 66175, '\P{	IN_LYCIAN}', "");
Expect(0, 66175, '\P{^	IN_LYCIAN}', "");
Error('\p{ Vai/a/}');
Error('\P{ Vai/a/}');
Expect(1, 42539, '\p{vai}', "");
Expect(0, 42539, '\p{^vai}', "");
Expect(0, 42539, '\P{vai}', "");
Expect(1, 42539, '\P{^vai}', "");
Expect(0, 42239, '\p{vai}', "");
Expect(1, 42239, '\p{^vai}', "");
Expect(1, 42239, '\P{vai}', "");
Expect(0, 42239, '\P{^vai}', "");
Expect(1, 42539, '\p{		vai}', "");
Expect(0, 42539, '\p{^		vai}', "");
Expect(0, 42539, '\P{		vai}', "");
Expect(1, 42539, '\P{^		vai}', "");
Expect(0, 42239, '\p{		vai}', "");
Expect(1, 42239, '\p{^		vai}', "");
Expect(1, 42239, '\P{		vai}', "");
Expect(0, 42239, '\P{^		vai}', "");
Error('\p{-IS:=Vai}');
Error('\P{-IS:=Vai}');
Expect(1, 42539, '\p{isvai}', "");
Expect(0, 42539, '\p{^isvai}', "");
Expect(0, 42539, '\P{isvai}', "");
Expect(1, 42539, '\P{^isvai}', "");
Expect(0, 42239, '\p{isvai}', "");
Expect(1, 42239, '\p{^isvai}', "");
Expect(1, 42239, '\P{isvai}', "");
Expect(0, 42239, '\P{^isvai}', "");
Expect(1, 42539, '\p{-IS_VAI}', "");
Expect(0, 42539, '\p{^-IS_VAI}', "");
Expect(0, 42539, '\P{-IS_VAI}', "");
Expect(1, 42539, '\P{^-IS_VAI}', "");
Expect(0, 42239, '\p{-IS_VAI}', "");
Expect(1, 42239, '\p{^-IS_VAI}', "");
Expect(1, 42239, '\P{-IS_VAI}', "");
Expect(0, 42239, '\P{^-IS_VAI}', "");
Error('\p{ -Vaii/a/}');
Error('\P{ -Vaii/a/}');
Expect(1, 42539, '\p{vaii}', "");
Expect(0, 42539, '\p{^vaii}', "");
Expect(0, 42539, '\P{vaii}', "");
Expect(1, 42539, '\P{^vaii}', "");
Expect(0, 42239, '\p{vaii}', "");
Expect(1, 42239, '\p{^vaii}', "");
Expect(1, 42239, '\P{vaii}', "");
Expect(0, 42239, '\P{^vaii}', "");
Expect(1, 42539, '\p{__vaii}', "");
Expect(0, 42539, '\p{^__vaii}', "");
Expect(0, 42539, '\P{__vaii}', "");
Expect(1, 42539, '\P{^__vaii}', "");
Expect(0, 42239, '\p{__vaii}', "");
Expect(1, 42239, '\p{^__vaii}', "");
Expect(1, 42239, '\P{__vaii}', "");
Expect(0, 42239, '\P{^__vaii}', "");
Error('\p{/a/_-IS Vaii}');
Error('\P{/a/_-IS Vaii}');
Expect(1, 42539, '\p{isvaii}', "");
Expect(0, 42539, '\p{^isvaii}', "");
Expect(0, 42539, '\P{isvaii}', "");
Expect(1, 42539, '\P{^isvaii}', "");
Expect(0, 42239, '\p{isvaii}', "");
Expect(1, 42239, '\p{^isvaii}', "");
Expect(1, 42239, '\P{isvaii}', "");
Expect(0, 42239, '\P{^isvaii}', "");
Expect(1, 42539, '\p{  Is	Vaii}', "");
Expect(0, 42539, '\p{^  Is	Vaii}', "");
Expect(0, 42539, '\P{  Is	Vaii}', "");
Expect(1, 42539, '\P{^  Is	Vaii}', "");
Expect(0, 42239, '\p{  Is	Vaii}', "");
Expect(1, 42239, '\p{^  Is	Vaii}', "");
Expect(1, 42239, '\P{  Is	Vaii}', "");
Expect(0, 42239, '\P{^  Is	Vaii}', "");
Error('\p{  SPACINGMark:=}');
Error('\P{  SPACINGMark:=}');
Expect(1, 2307, '\p{spacingmark}', "");
Expect(0, 2307, '\p{^spacingmark}', "");
Expect(0, 2307, '\P{spacingmark}', "");
Expect(1, 2307, '\P{^spacingmark}', "");
Expect(0, 2306, '\p{spacingmark}', "");
Expect(1, 2306, '\p{^spacingmark}', "");
Expect(1, 2306, '\P{spacingmark}', "");
Expect(0, 2306, '\P{^spacingmark}', "");
Expect(1, 2307, '\p{	-SPACING-mark}', "");
Expect(0, 2307, '\p{^	-SPACING-mark}', "");
Expect(0, 2307, '\P{	-SPACING-mark}', "");
Expect(1, 2307, '\P{^	-SPACING-mark}', "");
Expect(0, 2306, '\p{	-SPACING-mark}', "");
Expect(1, 2306, '\p{^	-SPACING-mark}', "");
Expect(1, 2306, '\P{	-SPACING-mark}', "");
Expect(0, 2306, '\P{^	-SPACING-mark}', "");
Error('\p{ Is:=Spacing	Mark}');
Error('\P{ Is:=Spacing	Mark}');
Expect(1, 2307, '\p{isspacingmark}', "");
Expect(0, 2307, '\p{^isspacingmark}', "");
Expect(0, 2307, '\P{isspacingmark}', "");
Expect(1, 2307, '\P{^isspacingmark}', "");
Expect(0, 2306, '\p{isspacingmark}', "");
Expect(1, 2306, '\p{^isspacingmark}', "");
Expect(1, 2306, '\P{isspacingmark}', "");
Expect(0, 2306, '\P{^isspacingmark}', "");
Expect(1, 2307, '\p{ 	Is_spacing_mark}', "");
Expect(0, 2307, '\p{^ 	Is_spacing_mark}', "");
Expect(0, 2307, '\P{ 	Is_spacing_mark}', "");
Expect(1, 2307, '\P{^ 	Is_spacing_mark}', "");
Expect(0, 2306, '\p{ 	Is_spacing_mark}', "");
Expect(1, 2306, '\p{^ 	Is_spacing_mark}', "");
Expect(1, 2306, '\P{ 	Is_spacing_mark}', "");
Expect(0, 2306, '\P{^ 	Is_spacing_mark}', "");
Error('\p{:=	-MC}');
Error('\P{:=	-MC}');
Expect(1, 2307, '\p{mc}', "");
Expect(0, 2307, '\p{^mc}', "");
Expect(0, 2307, '\P{mc}', "");
Expect(1, 2307, '\P{^mc}', "");
Expect(0, 2306, '\p{mc}', "");
Expect(1, 2306, '\p{^mc}', "");
Expect(1, 2306, '\P{mc}', "");
Expect(0, 2306, '\P{^mc}', "");
Expect(1, 2307, '\p{_Mc}', "");
Expect(0, 2307, '\p{^_Mc}', "");
Expect(0, 2307, '\P{_Mc}', "");
Expect(1, 2307, '\P{^_Mc}', "");
Expect(0, 2306, '\p{_Mc}', "");
Expect(1, 2306, '\p{^_Mc}', "");
Expect(1, 2306, '\P{_Mc}', "");
Expect(0, 2306, '\P{^_Mc}', "");
Error('\p{-is:=MC}');
Error('\P{-is:=MC}');
Expect(1, 2307, '\p{ismc}', "");
Expect(0, 2307, '\p{^ismc}', "");
Expect(0, 2307, '\P{ismc}', "");
Expect(1, 2307, '\P{^ismc}', "");
Expect(0, 2306, '\p{ismc}', "");
Expect(1, 2306, '\p{^ismc}', "");
Expect(1, 2306, '\P{ismc}', "");
Expect(0, 2306, '\P{^ismc}', "");
Expect(1, 2307, '\p{IS_mc}', "");
Expect(0, 2307, '\p{^IS_mc}', "");
Expect(0, 2307, '\P{IS_mc}', "");
Expect(1, 2307, '\P{^IS_mc}', "");
Expect(0, 2306, '\p{IS_mc}', "");
Expect(1, 2306, '\p{^IS_mc}', "");
Expect(1, 2306, '\P{IS_mc}', "");
Expect(0, 2306, '\P{^IS_mc}', "");
Error('\p{ Lower/a/}');
Error('\P{ Lower/a/}');
Expect(1, 122, '\p{lower}', "");
Expect(0, 122, '\p{^lower}', "");
Expect(0, 122, '\P{lower}', "");
Expect(1, 122, '\P{^lower}', "");
Expect(0, 96, '\p{lower}', "");
Expect(1, 96, '\p{^lower}', "");
Expect(1, 96, '\P{lower}', "");
Expect(0, 96, '\P{^lower}', "");
Expect(1, 122, '\p{ -Lower}', "");
Expect(0, 122, '\p{^ -Lower}', "");
Expect(0, 122, '\P{ -Lower}', "");
Expect(1, 122, '\P{^ -Lower}', "");
Expect(0, 96, '\p{ -Lower}', "");
Expect(1, 96, '\p{^ -Lower}', "");
Expect(1, 96, '\P{ -Lower}', "");
Expect(0, 96, '\P{^ -Lower}', "");
Error('\p{:=-is Lower}');
Error('\P{:=-is Lower}');
Expect(1, 122, '\p{islower}', "");
Expect(0, 122, '\p{^islower}', "");
Expect(0, 122, '\P{islower}', "");
Expect(1, 122, '\P{^islower}', "");
Expect(0, 96, '\p{islower}', "");
Expect(1, 96, '\p{^islower}', "");
Expect(1, 96, '\P{islower}', "");
Expect(0, 96, '\P{^islower}', "");
Expect(1, 122, '\p{  is Lower}', "");
Expect(0, 122, '\p{^  is Lower}', "");
Expect(0, 122, '\P{  is Lower}', "");
Expect(1, 122, '\P{^  is Lower}', "");
Expect(0, 96, '\p{  is Lower}', "");
Expect(1, 96, '\p{^  is Lower}', "");
Expect(1, 96, '\P{  is Lower}', "");
Expect(0, 96, '\P{^  is Lower}', "");
Error('\p{:=- LOWERCASE}');
Error('\P{:=- LOWERCASE}');
Expect(1, 122, '\p{lowercase}', "");
Expect(0, 122, '\p{^lowercase}', "");
Expect(0, 122, '\P{lowercase}', "");
Expect(1, 122, '\P{^lowercase}', "");
Expect(0, 96, '\p{lowercase}', "");
Expect(1, 96, '\p{^lowercase}', "");
Expect(1, 96, '\P{lowercase}', "");
Expect(0, 96, '\P{^lowercase}', "");
Expect(1, 122, '\p{ 	Lowercase}', "");
Expect(0, 122, '\p{^ 	Lowercase}', "");
Expect(0, 122, '\P{ 	Lowercase}', "");
Expect(1, 122, '\P{^ 	Lowercase}', "");
Expect(0, 96, '\p{ 	Lowercase}', "");
Expect(1, 96, '\p{^ 	Lowercase}', "");
Expect(1, 96, '\P{ 	Lowercase}', "");
Expect(0, 96, '\P{^ 	Lowercase}', "");
Error('\p{-/a/IS_Lowercase}');
Error('\P{-/a/IS_Lowercase}');
Expect(1, 122, '\p{islowercase}', "");
Expect(0, 122, '\p{^islowercase}', "");
Expect(0, 122, '\P{islowercase}', "");
Expect(1, 122, '\P{^islowercase}', "");
Expect(0, 96, '\p{islowercase}', "");
Expect(1, 96, '\p{^islowercase}', "");
Expect(1, 96, '\P{islowercase}', "");
Expect(0, 96, '\P{^islowercase}', "");
Expect(1, 122, '\p{ isLowercase}', "");
Expect(0, 122, '\p{^ isLowercase}', "");
Expect(0, 122, '\P{ isLowercase}', "");
Expect(1, 122, '\P{^ isLowercase}', "");
Expect(0, 96, '\p{ isLowercase}', "");
Expect(1, 96, '\p{^ isLowercase}', "");
Expect(1, 96, '\P{ isLowercase}', "");
Expect(0, 96, '\P{^ isLowercase}', "");
Error('\p{Expands_On_NFKD}');
Error('\P{Expands_On_NFKD}');
Error('\p{Is_Expands_On_NFKD}');
Error('\P{Is_Expands_On_NFKD}');
Error('\p{XO_NFKD}');
Error('\P{XO_NFKD}');
Error('\p{Is_XO_NFKD}');
Error('\P{Is_XO_NFKD}');
Error('\p{_/a/CLOSE	PUNCTUATION}');
Error('\P{_/a/CLOSE	PUNCTUATION}');
Expect(1, 41, '\p{closepunctuation}', "");
Expect(0, 41, '\p{^closepunctuation}', "");
Expect(0, 41, '\P{closepunctuation}', "");
Expect(1, 41, '\P{^closepunctuation}', "");
Expect(0, 40, '\p{closepunctuation}', "");
Expect(1, 40, '\p{^closepunctuation}', "");
Expect(1, 40, '\P{closepunctuation}', "");
Expect(0, 40, '\P{^closepunctuation}', "");
Expect(1, 41, '\p{--close	punctuation}', "");
Expect(0, 41, '\p{^--close	punctuation}', "");
Expect(0, 41, '\P{--close	punctuation}', "");
Expect(1, 41, '\P{^--close	punctuation}', "");
Expect(0, 40, '\p{--close	punctuation}', "");
Expect(1, 40, '\p{^--close	punctuation}', "");
Expect(1, 40, '\P{--close	punctuation}', "");
Expect(0, 40, '\P{^--close	punctuation}', "");
Error('\p{_ Is:=Close punctuation}');
Error('\P{_ Is:=Close punctuation}');
Expect(1, 41, '\p{isclosepunctuation}', "");
Expect(0, 41, '\p{^isclosepunctuation}', "");
Expect(0, 41, '\P{isclosepunctuation}', "");
Expect(1, 41, '\P{^isclosepunctuation}', "");
Expect(0, 40, '\p{isclosepunctuation}', "");
Expect(1, 40, '\p{^isclosepunctuation}', "");
Expect(1, 40, '\P{isclosepunctuation}', "");
Expect(0, 40, '\P{^isclosepunctuation}', "");
Expect(1, 41, '\p{_	Is-Close punctuation}', "");
Expect(0, 41, '\p{^_	Is-Close punctuation}', "");
Expect(0, 41, '\P{_	Is-Close punctuation}', "");
Expect(1, 41, '\P{^_	Is-Close punctuation}', "");
Expect(0, 40, '\p{_	Is-Close punctuation}', "");
Expect(1, 40, '\p{^_	Is-Close punctuation}', "");
Expect(1, 40, '\P{_	Is-Close punctuation}', "");
Expect(0, 40, '\P{^_	Is-Close punctuation}', "");
Error('\p{-Pe:=}');
Error('\P{-Pe:=}');
Expect(1, 41, '\p{pe}', "");
Expect(0, 41, '\p{^pe}', "");
Expect(0, 41, '\P{pe}', "");
Expect(1, 41, '\P{^pe}', "");
Expect(0, 40, '\p{pe}', "");
Expect(1, 40, '\p{^pe}', "");
Expect(1, 40, '\P{pe}', "");
Expect(0, 40, '\P{^pe}', "");
Expect(1, 41, '\p{ 	Pe}', "");
Expect(0, 41, '\p{^ 	Pe}', "");
Expect(0, 41, '\P{ 	Pe}', "");
Expect(1, 41, '\P{^ 	Pe}', "");
Expect(0, 40, '\p{ 	Pe}', "");
Expect(1, 40, '\p{^ 	Pe}', "");
Expect(1, 40, '\P{ 	Pe}', "");
Expect(0, 40, '\P{^ 	Pe}', "");
Error('\p{/a/_is Pe}');
Error('\P{/a/_is Pe}');
Expect(1, 41, '\p{ispe}', "");
Expect(0, 41, '\p{^ispe}', "");
Expect(0, 41, '\P{ispe}', "");
Expect(1, 41, '\P{^ispe}', "");
Expect(0, 40, '\p{ispe}', "");
Expect(1, 40, '\p{^ispe}', "");
Expect(1, 40, '\P{ispe}', "");
Expect(0, 40, '\P{^ispe}', "");
Expect(1, 41, '\p{ isPe}', "");
Expect(0, 41, '\p{^ isPe}', "");
Expect(0, 41, '\P{ isPe}', "");
Expect(1, 41, '\P{^ isPe}', "");
Expect(0, 40, '\p{ isPe}', "");
Expect(1, 40, '\p{^ isPe}', "");
Expect(1, 40, '\P{ isPe}', "");
Expect(0, 40, '\P{^ isPe}', "");
Error('\p{Expands_On_NFKC}');
Error('\P{Expands_On_NFKC}');
Error('\p{Is_Expands_On_NFKC}');
Error('\P{Is_Expands_On_NFKC}');
Error('\p{XO_NFKC}');
Error('\P{XO_NFKC}');
Error('\p{Is_XO_NFKC}');
Error('\P{Is_XO_NFKC}');
Error('\p{_UNKNOWN/a/}');
Error('\P{_UNKNOWN/a/}');
Expect(1, 889, '\p{unknown}', "");
Expect(0, 889, '\p{^unknown}', "");
Expect(0, 889, '\P{unknown}', "");
Expect(1, 889, '\P{^unknown}', "");
Expect(0, 887, '\p{unknown}', "");
Expect(1, 887, '\p{^unknown}', "");
Expect(1, 887, '\P{unknown}', "");
Expect(0, 887, '\P{^unknown}', "");
Expect(1, 889, '\p{--Unknown}', "");
Expect(0, 889, '\p{^--Unknown}', "");
Expect(0, 889, '\P{--Unknown}', "");
Expect(1, 889, '\P{^--Unknown}', "");
Expect(0, 887, '\p{--Unknown}', "");
Expect(1, 887, '\p{^--Unknown}', "");
Expect(1, 887, '\P{--Unknown}', "");
Expect(0, 887, '\P{^--Unknown}', "");
Error('\p{	/a/is-Unknown}');
Error('\P{	/a/is-Unknown}');
Expect(1, 889, '\p{isunknown}', "");
Expect(0, 889, '\p{^isunknown}', "");
Expect(0, 889, '\P{isunknown}', "");
Expect(1, 889, '\P{^isunknown}', "");
Expect(0, 887, '\p{isunknown}', "");
Expect(1, 887, '\p{^isunknown}', "");
Expect(1, 887, '\P{isunknown}', "");
Expect(0, 887, '\P{^isunknown}', "");
Expect(1, 889, '\p{ Is Unknown}', "");
Expect(0, 889, '\p{^ Is Unknown}', "");
Expect(0, 889, '\P{ Is Unknown}', "");
Expect(1, 889, '\P{^ Is Unknown}', "");
Expect(0, 887, '\p{ Is Unknown}', "");
Expect(1, 887, '\p{^ Is Unknown}', "");
Expect(1, 887, '\P{ Is Unknown}', "");
Expect(0, 887, '\P{^ Is Unknown}', "");
Error('\p{:=-ZZZZ}');
Error('\P{:=-ZZZZ}');
Expect(1, 889, '\p{zzzz}', "");
Expect(0, 889, '\p{^zzzz}', "");
Expect(0, 889, '\P{zzzz}', "");
Expect(1, 889, '\P{^zzzz}', "");
Expect(0, 887, '\p{zzzz}', "");
Expect(1, 887, '\p{^zzzz}', "");
Expect(1, 887, '\P{zzzz}', "");
Expect(0, 887, '\P{^zzzz}', "");
Expect(1, 889, '\p{-_Zzzz}', "");
Expect(0, 889, '\p{^-_Zzzz}', "");
Expect(0, 889, '\P{-_Zzzz}', "");
Expect(1, 889, '\P{^-_Zzzz}', "");
Expect(0, 887, '\p{-_Zzzz}', "");
Expect(1, 887, '\p{^-_Zzzz}', "");
Expect(1, 887, '\P{-_Zzzz}', "");
Expect(0, 887, '\P{^-_Zzzz}', "");
Error('\p{_-IS zzzz:=}');
Error('\P{_-IS zzzz:=}');
Expect(1, 889, '\p{iszzzz}', "");
Expect(0, 889, '\p{^iszzzz}', "");
Expect(0, 889, '\P{iszzzz}', "");
Expect(1, 889, '\P{^iszzzz}', "");
Expect(0, 887, '\p{iszzzz}', "");
Expect(1, 887, '\p{^iszzzz}', "");
Expect(1, 887, '\P{iszzzz}', "");
Expect(0, 887, '\P{^iszzzz}', "");
Expect(1, 889, '\p{- is zzzz}', "");
Expect(0, 889, '\p{^- is zzzz}', "");
Expect(0, 889, '\P{- is zzzz}', "");
Expect(1, 889, '\P{^- is zzzz}', "");
Expect(0, 887, '\p{- is zzzz}', "");
Expect(1, 887, '\p{^- is zzzz}', "");
Expect(1, 887, '\P{- is zzzz}', "");
Expect(0, 887, '\P{^- is zzzz}', "");
Error('\p{/a/- Linear B-Ideograms}');
Error('\P{/a/- Linear B-Ideograms}');
Expect(1, 65791, '\p{linearbideograms}', "");
Expect(0, 65791, '\p{^linearbideograms}', "");
Expect(0, 65791, '\P{linearbideograms}', "");
Expect(1, 65791, '\P{^linearbideograms}', "");
Expect(0, 65663, '\p{linearbideograms}', "");
Expect(1, 65663, '\p{^linearbideograms}', "");
Expect(1, 65663, '\P{linearbideograms}', "");
Expect(0, 65663, '\P{^linearbideograms}', "");
Expect(1, 65791, '\p{_LINEARB	Ideograms}', "");
Expect(0, 65791, '\p{^_LINEARB	Ideograms}', "");
Expect(0, 65791, '\P{_LINEARB	Ideograms}', "");
Expect(1, 65791, '\P{^_LINEARB	Ideograms}', "");
Expect(0, 65663, '\p{_LINEARB	Ideograms}', "");
Expect(1, 65663, '\p{^_LINEARB	Ideograms}', "");
Expect(1, 65663, '\P{_LINEARB	Ideograms}', "");
Expect(0, 65663, '\P{^_LINEARB	Ideograms}', "");
Error('\p{	 islinear b-Ideograms:=}');
Error('\P{	 islinear b-Ideograms:=}');
Expect(1, 65791, '\p{islinearbideograms}', "");
Expect(0, 65791, '\p{^islinearbideograms}', "");
Expect(0, 65791, '\P{islinearbideograms}', "");
Expect(1, 65791, '\P{^islinearbideograms}', "");
Expect(0, 65663, '\p{islinearbideograms}', "");
Expect(1, 65663, '\p{^islinearbideograms}', "");
Expect(1, 65663, '\P{islinearbideograms}', "");
Expect(0, 65663, '\P{^islinearbideograms}', "");
Expect(1, 65791, '\p{--Is	linear_B	ideograms}', "");
Expect(0, 65791, '\p{^--Is	linear_B	ideograms}', "");
Expect(0, 65791, '\P{--Is	linear_B	ideograms}', "");
Expect(1, 65791, '\P{^--Is	linear_B	ideograms}', "");
Expect(0, 65663, '\p{--Is	linear_B	ideograms}', "");
Expect(1, 65663, '\p{^--Is	linear_B	ideograms}', "");
Expect(1, 65663, '\P{--Is	linear_B	ideograms}', "");
Expect(0, 65663, '\P{^--Is	linear_B	ideograms}', "");
Error('\p{:=in_Linear-b IDEOGRAMS}');
Error('\P{:=in_Linear-b IDEOGRAMS}');
Expect(1, 65791, '\p{inlinearbideograms}', "");
Expect(0, 65791, '\p{^inlinearbideograms}', "");
Expect(0, 65791, '\P{inlinearbideograms}', "");
Expect(1, 65791, '\P{^inlinearbideograms}', "");
Expect(0, 65663, '\p{inlinearbideograms}', "");
Expect(1, 65663, '\p{^inlinearbideograms}', "");
Expect(1, 65663, '\P{inlinearbideograms}', "");
Expect(0, 65663, '\P{^inlinearbideograms}', "");
Expect(1, 65791, '\p{__IN	Linear-B_Ideograms}', "");
Expect(0, 65791, '\p{^__IN	Linear-B_Ideograms}', "");
Expect(0, 65791, '\P{__IN	Linear-B_Ideograms}', "");
Expect(1, 65791, '\P{^__IN	Linear-B_Ideograms}', "");
Expect(0, 65663, '\p{__IN	Linear-B_Ideograms}', "");
Expect(1, 65663, '\p{^__IN	Linear-B_Ideograms}', "");
Expect(1, 65663, '\P{__IN	Linear-B_Ideograms}', "");
Expect(0, 65663, '\P{^__IN	Linear-B_Ideograms}', "");
Error('\p{/a/ ENCLOSED	ALPHANUMERICS}');
Error('\P{/a/ ENCLOSED	ALPHANUMERICS}');
Expect(1, 9471, '\p{enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^enclosedalphanumerics}', "");
Expect(0, 9471, '\P{enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^enclosedalphanumerics}', "");
Expect(0, 9311, '\p{enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^enclosedalphanumerics}', "");
Expect(1, 9311, '\P{enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^enclosedalphanumerics}', "");
Expect(1, 9471, '\p{_ENCLOSED_ALPHANUMERICS}', "");
Expect(0, 9471, '\p{^_ENCLOSED_ALPHANUMERICS}', "");
Expect(0, 9471, '\P{_ENCLOSED_ALPHANUMERICS}', "");
Expect(1, 9471, '\P{^_ENCLOSED_ALPHANUMERICS}', "");
Expect(0, 9311, '\p{_ENCLOSED_ALPHANUMERICS}', "");
Expect(1, 9311, '\p{^_ENCLOSED_ALPHANUMERICS}', "");
Expect(1, 9311, '\P{_ENCLOSED_ALPHANUMERICS}', "");
Expect(0, 9311, '\P{^_ENCLOSED_ALPHANUMERICS}', "");
Error('\p{/a/ _ISENCLOSED Alphanumerics}');
Error('\P{/a/ _ISENCLOSED Alphanumerics}');
Expect(1, 9471, '\p{isenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^isenclosedalphanumerics}', "");
Expect(0, 9471, '\P{isenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^isenclosedalphanumerics}', "");
Expect(0, 9311, '\p{isenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^isenclosedalphanumerics}', "");
Expect(1, 9311, '\P{isenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^isenclosedalphanumerics}', "");
Expect(1, 9471, '\p{ 	Is ENCLOSED	Alphanumerics}', "");
Expect(0, 9471, '\p{^ 	Is ENCLOSED	Alphanumerics}', "");
Expect(0, 9471, '\P{ 	Is ENCLOSED	Alphanumerics}', "");
Expect(1, 9471, '\P{^ 	Is ENCLOSED	Alphanumerics}', "");
Expect(0, 9311, '\p{ 	Is ENCLOSED	Alphanumerics}', "");
Expect(1, 9311, '\p{^ 	Is ENCLOSED	Alphanumerics}', "");
Expect(1, 9311, '\P{ 	Is ENCLOSED	Alphanumerics}', "");
Expect(0, 9311, '\P{^ 	Is ENCLOSED	Alphanumerics}', "");
Error('\p{ /a/INEnclosed_Alphanumerics}');
Error('\P{ /a/INEnclosed_Alphanumerics}');
Expect(1, 9471, '\p{inenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^inenclosedalphanumerics}', "");
Expect(0, 9471, '\P{inenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^inenclosedalphanumerics}', "");
Expect(0, 9311, '\p{inenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^inenclosedalphanumerics}', "");
Expect(1, 9311, '\P{inenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^inenclosedalphanumerics}', "");
Expect(1, 9471, '\p{	in-Enclosed_Alphanumerics}', "");
Expect(0, 9471, '\p{^	in-Enclosed_Alphanumerics}', "");
Expect(0, 9471, '\P{	in-Enclosed_Alphanumerics}', "");
Expect(1, 9471, '\P{^	in-Enclosed_Alphanumerics}', "");
Expect(0, 9311, '\p{	in-Enclosed_Alphanumerics}', "");
Expect(1, 9311, '\p{^	in-Enclosed_Alphanumerics}', "");
Expect(1, 9311, '\P{	in-Enclosed_Alphanumerics}', "");
Expect(0, 9311, '\P{^	in-Enclosed_Alphanumerics}', "");
Error('\p{:= -MEETEI	mayek}');
Error('\P{:= -MEETEI	mayek}');
Expect(1, 44013, '\p{meeteimayek}', "");
Expect(0, 44013, '\p{^meeteimayek}', "");
Expect(0, 44013, '\P{meeteimayek}', "");
Expect(1, 44013, '\P{^meeteimayek}', "");
Expect(0, 43967, '\p{meeteimayek}', "");
Expect(1, 43967, '\p{^meeteimayek}', "");
Expect(1, 43967, '\P{meeteimayek}', "");
Expect(0, 43967, '\P{^meeteimayek}', "");
Expect(1, 44013, '\p{-Meetei mayek}', "");
Expect(0, 44013, '\p{^-Meetei mayek}', "");
Expect(0, 44013, '\P{-Meetei mayek}', "");
Expect(1, 44013, '\P{^-Meetei mayek}', "");
Expect(0, 43967, '\p{-Meetei mayek}', "");
Expect(1, 43967, '\p{^-Meetei mayek}', "");
Expect(1, 43967, '\P{-Meetei mayek}', "");
Expect(0, 43967, '\P{^-Meetei mayek}', "");
Error('\p{	Is	MEETEI:=Mayek}');
Error('\P{	Is	MEETEI:=Mayek}');
Expect(1, 44013, '\p{ismeeteimayek}', "");
Expect(0, 44013, '\p{^ismeeteimayek}', "");
Expect(0, 44013, '\P{ismeeteimayek}', "");
Expect(1, 44013, '\P{^ismeeteimayek}', "");
Expect(0, 43967, '\p{ismeeteimayek}', "");
Expect(1, 43967, '\p{^ismeeteimayek}', "");
Expect(1, 43967, '\P{ismeeteimayek}', "");
Expect(0, 43967, '\P{^ismeeteimayek}', "");
Expect(1, 44013, '\p{-	IS Meetei-Mayek}', "");
Expect(0, 44013, '\p{^-	IS Meetei-Mayek}', "");
Expect(0, 44013, '\P{-	IS Meetei-Mayek}', "");
Expect(1, 44013, '\P{^-	IS Meetei-Mayek}', "");
Expect(0, 43967, '\p{-	IS Meetei-Mayek}', "");
Expect(1, 43967, '\p{^-	IS Meetei-Mayek}', "");
Expect(1, 43967, '\P{-	IS Meetei-Mayek}', "");
Expect(0, 43967, '\P{^-	IS Meetei-Mayek}', "");
Error('\p{- MTEI/a/}');
Error('\P{- MTEI/a/}');
Expect(1, 44013, '\p{mtei}', "");
Expect(0, 44013, '\p{^mtei}', "");
Expect(0, 44013, '\P{mtei}', "");
Expect(1, 44013, '\P{^mtei}', "");
Expect(0, 43967, '\p{mtei}', "");
Expect(1, 43967, '\p{^mtei}', "");
Expect(1, 43967, '\P{mtei}', "");
Expect(0, 43967, '\P{^mtei}', "");
Expect(1, 44013, '\p{Mtei}', "");
Expect(0, 44013, '\p{^Mtei}', "");
Expect(0, 44013, '\P{Mtei}', "");
Expect(1, 44013, '\P{^Mtei}', "");
Expect(0, 43967, '\p{Mtei}', "");
Expect(1, 43967, '\p{^Mtei}', "");
Expect(1, 43967, '\P{Mtei}', "");
Expect(0, 43967, '\P{^Mtei}', "");
Error('\p{		Is/a/Mtei}');
Error('\P{		Is/a/Mtei}');
Expect(1, 44013, '\p{ismtei}', "");
Expect(0, 44013, '\p{^ismtei}', "");
Expect(0, 44013, '\P{ismtei}', "");
Expect(1, 44013, '\P{^ismtei}', "");
Expect(0, 43967, '\p{ismtei}', "");
Expect(1, 43967, '\p{^ismtei}', "");
Expect(1, 43967, '\P{ismtei}', "");
Expect(0, 43967, '\P{^ismtei}', "");
Expect(1, 44013, '\p{-IS_Mtei}', "");
Expect(0, 44013, '\p{^-IS_Mtei}', "");
Expect(0, 44013, '\P{-IS_Mtei}', "");
Expect(1, 44013, '\P{^-IS_Mtei}', "");
Expect(0, 43967, '\p{-IS_Mtei}', "");
Expect(1, 43967, '\p{^-IS_Mtei}', "");
Expect(1, 43967, '\P{-IS_Mtei}', "");
Expect(0, 43967, '\P{^-IS_Mtei}', "");
Error('\p{ 	Extender:=}');
Error('\P{ 	Extender:=}');
Expect(1, 183, '\p{extender}', "");
Expect(0, 183, '\p{^extender}', "");
Expect(0, 183, '\P{extender}', "");
Expect(1, 183, '\P{^extender}', "");
Expect(0, 182, '\p{extender}', "");
Expect(1, 182, '\p{^extender}', "");
Expect(1, 182, '\P{extender}', "");
Expect(0, 182, '\P{^extender}', "");
Expect(1, 183, '\p{	Extender}', "");
Expect(0, 183, '\p{^	Extender}', "");
Expect(0, 183, '\P{	Extender}', "");
Expect(1, 183, '\P{^	Extender}', "");
Expect(0, 182, '\p{	Extender}', "");
Expect(1, 182, '\p{^	Extender}', "");
Expect(1, 182, '\P{	Extender}', "");
Expect(0, 182, '\P{^	Extender}', "");
Error('\p{/a/__Is_Extender}');
Error('\P{/a/__Is_Extender}');
Expect(1, 183, '\p{isextender}', "");
Expect(0, 183, '\p{^isextender}', "");
Expect(0, 183, '\P{isextender}', "");
Expect(1, 183, '\P{^isextender}', "");
Expect(0, 182, '\p{isextender}', "");
Expect(1, 182, '\p{^isextender}', "");
Expect(1, 182, '\P{isextender}', "");
Expect(0, 182, '\P{^isextender}', "");
Expect(1, 183, '\p{	-is_Extender}', "");
Expect(0, 183, '\p{^	-is_Extender}', "");
Expect(0, 183, '\P{	-is_Extender}', "");
Expect(1, 183, '\P{^	-is_Extender}', "");
Expect(0, 182, '\p{	-is_Extender}', "");
Expect(1, 182, '\p{^	-is_Extender}', "");
Expect(1, 182, '\P{	-is_Extender}', "");
Expect(0, 182, '\P{^	-is_Extender}', "");
Error('\p{_Ext/a/}');
Error('\P{_Ext/a/}');
Expect(1, 183, '\p{ext}', "");
Expect(0, 183, '\p{^ext}', "");
Expect(0, 183, '\P{ext}', "");
Expect(1, 183, '\P{^ext}', "");
Expect(0, 182, '\p{ext}', "");
Expect(1, 182, '\p{^ext}', "");
Expect(1, 182, '\P{ext}', "");
Expect(0, 182, '\P{^ext}', "");
Expect(1, 183, '\p{_	Ext}', "");
Expect(0, 183, '\p{^_	Ext}', "");
Expect(0, 183, '\P{_	Ext}', "");
Expect(1, 183, '\P{^_	Ext}', "");
Expect(0, 182, '\p{_	Ext}', "");
Expect(1, 182, '\p{^_	Ext}', "");
Expect(1, 182, '\P{_	Ext}', "");
Expect(0, 182, '\P{^_	Ext}', "");
Error('\p{	_Is:=ext}');
Error('\P{	_Is:=ext}');
Expect(1, 183, '\p{isext}', "");
Expect(0, 183, '\p{^isext}', "");
Expect(0, 183, '\P{isext}', "");
Expect(1, 183, '\P{^isext}', "");
Expect(0, 182, '\p{isext}', "");
Expect(1, 182, '\p{^isext}', "");
Expect(1, 182, '\P{isext}', "");
Expect(0, 182, '\P{^isext}', "");
Expect(1, 183, '\p{- Is ext}', "");
Expect(0, 183, '\p{^- Is ext}', "");
Expect(0, 183, '\P{- Is ext}', "");
Expect(1, 183, '\P{^- Is ext}', "");
Expect(0, 182, '\p{- Is ext}', "");
Expect(1, 182, '\p{^- Is ext}', "");
Expect(1, 182, '\P{- Is ext}', "");
Expect(0, 182, '\P{^- Is ext}', "");
Error('\p{	-Composition:=Exclusion}');
Error('\P{	-Composition:=Exclusion}');
Expect(1, 2399, '\p{compositionexclusion}', "");
Expect(0, 2399, '\p{^compositionexclusion}', "");
Expect(0, 2399, '\P{compositionexclusion}', "");
Expect(1, 2399, '\P{^compositionexclusion}', "");
Expect(0, 2391, '\p{compositionexclusion}', "");
Expect(1, 2391, '\p{^compositionexclusion}', "");
Expect(1, 2391, '\P{compositionexclusion}', "");
Expect(0, 2391, '\P{^compositionexclusion}', "");
Expect(1, 2399, '\p{		COMPOSITION-EXCLUSION}', "");
Expect(0, 2399, '\p{^		COMPOSITION-EXCLUSION}', "");
Expect(0, 2399, '\P{		COMPOSITION-EXCLUSION}', "");
Expect(1, 2399, '\P{^		COMPOSITION-EXCLUSION}', "");
Expect(0, 2391, '\p{		COMPOSITION-EXCLUSION}', "");
Expect(1, 2391, '\p{^		COMPOSITION-EXCLUSION}', "");
Expect(1, 2391, '\P{		COMPOSITION-EXCLUSION}', "");
Expect(0, 2391, '\P{^		COMPOSITION-EXCLUSION}', "");
Error('\p{-:=IsCOMPOSITION exclusion}');
Error('\P{-:=IsCOMPOSITION exclusion}');
Expect(1, 2399, '\p{iscompositionexclusion}', "");
Expect(0, 2399, '\p{^iscompositionexclusion}', "");
Expect(0, 2399, '\P{iscompositionexclusion}', "");
Expect(1, 2399, '\P{^iscompositionexclusion}', "");
Expect(0, 2391, '\p{iscompositionexclusion}', "");
Expect(1, 2391, '\p{^iscompositionexclusion}', "");
Expect(1, 2391, '\P{iscompositionexclusion}', "");
Expect(0, 2391, '\P{^iscompositionexclusion}', "");
Expect(1, 2399, '\p{-ISComposition Exclusion}', "");
Expect(0, 2399, '\p{^-ISComposition Exclusion}', "");
Expect(0, 2399, '\P{-ISComposition Exclusion}', "");
Expect(1, 2399, '\P{^-ISComposition Exclusion}', "");
Expect(0, 2391, '\p{-ISComposition Exclusion}', "");
Expect(1, 2391, '\p{^-ISComposition Exclusion}', "");
Expect(1, 2391, '\P{-ISComposition Exclusion}', "");
Expect(0, 2391, '\P{^-ISComposition Exclusion}', "");
Error('\p{  ce/a/}');
Error('\P{  ce/a/}');
Expect(1, 2399, '\p{ce}', "");
Expect(0, 2399, '\p{^ce}', "");
Expect(0, 2399, '\P{ce}', "");
Expect(1, 2399, '\P{^ce}', "");
Expect(0, 2391, '\p{ce}', "");
Expect(1, 2391, '\p{^ce}', "");
Expect(1, 2391, '\P{ce}', "");
Expect(0, 2391, '\P{^ce}', "");
Expect(1, 2399, '\p{ _ce}', "");
Expect(0, 2399, '\p{^ _ce}', "");
Expect(0, 2399, '\P{ _ce}', "");
Expect(1, 2399, '\P{^ _ce}', "");
Expect(0, 2391, '\p{ _ce}', "");
Expect(1, 2391, '\p{^ _ce}', "");
Expect(1, 2391, '\P{ _ce}', "");
Expect(0, 2391, '\P{^ _ce}', "");
Error('\p{		is_CE/a/}');
Error('\P{		is_CE/a/}');
Expect(1, 2399, '\p{isce}', "");
Expect(0, 2399, '\p{^isce}', "");
Expect(0, 2399, '\P{isce}', "");
Expect(1, 2399, '\P{^isce}', "");
Expect(0, 2391, '\p{isce}', "");
Expect(1, 2391, '\p{^isce}', "");
Expect(1, 2391, '\P{isce}', "");
Expect(0, 2391, '\P{^isce}', "");
Expect(1, 2399, '\p{_	is-CE}', "");
Expect(0, 2399, '\p{^_	is-CE}', "");
Expect(0, 2399, '\P{_	is-CE}', "");
Expect(1, 2399, '\P{^_	is-CE}', "");
Expect(0, 2391, '\p{_	is-CE}', "");
Expect(1, 2391, '\p{^_	is-CE}', "");
Expect(1, 2391, '\P{_	is-CE}', "");
Expect(0, 2391, '\P{^_	is-CE}', "");
Error('\p{ _Enclosed/a/CJK LettersAND_Months}');
Error('\P{ _Enclosed/a/CJK LettersAND_Months}');
Expect(1, 13055, '\p{enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{	 enclosed-cjk_Letters	And	Months}', "");
Expect(0, 13055, '\p{^	 enclosed-cjk_Letters	And	Months}', "");
Expect(0, 13055, '\P{	 enclosed-cjk_Letters	And	Months}', "");
Expect(1, 13055, '\P{^	 enclosed-cjk_Letters	And	Months}', "");
Expect(0, 12799, '\p{	 enclosed-cjk_Letters	And	Months}', "");
Expect(1, 12799, '\p{^	 enclosed-cjk_Letters	And	Months}', "");
Expect(1, 12799, '\P{	 enclosed-cjk_Letters	And	Months}', "");
Expect(0, 12799, '\P{^	 enclosed-cjk_Letters	And	Months}', "");
Error('\p{_is_Enclosed_CJK_LETTERS-And months/a/}');
Error('\P{_is_Enclosed_CJK_LETTERS-And months/a/}');
Expect(1, 13055, '\p{isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{ isENCLOSED-CJK Letters-AND Months}', "");
Expect(0, 13055, '\p{^ isENCLOSED-CJK Letters-AND Months}', "");
Expect(0, 13055, '\P{ isENCLOSED-CJK Letters-AND Months}', "");
Expect(1, 13055, '\P{^ isENCLOSED-CJK Letters-AND Months}', "");
Expect(0, 12799, '\p{ isENCLOSED-CJK Letters-AND Months}', "");
Expect(1, 12799, '\p{^ isENCLOSED-CJK Letters-AND Months}', "");
Expect(1, 12799, '\P{ isENCLOSED-CJK Letters-AND Months}', "");
Expect(0, 12799, '\P{^ isENCLOSED-CJK Letters-AND Months}', "");
Error('\p{In_Enclosed/a/cjk letters	and	MONTHS}');
Error('\P{In_Enclosed/a/cjk letters	and	MONTHS}');
Expect(1, 13055, '\p{inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(0, 13055, '\p{^_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(0, 13055, '\P{_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(1, 13055, '\P{^_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(0, 12799, '\p{_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(1, 12799, '\p{^_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(1, 12799, '\P{_	Inenclosed cjk-LETTERSand_Months}', "");
Expect(0, 12799, '\P{^_	Inenclosed cjk-LETTERSand_Months}', "");
Error('\p{-_Space/a/SEPARATOR}');
Error('\P{-_Space/a/SEPARATOR}');
Expect(1, 32, '\p{spaceseparator}', "");
Expect(0, 32, '\p{^spaceseparator}', "");
Expect(0, 32, '\P{spaceseparator}', "");
Expect(1, 32, '\P{^spaceseparator}', "");
Expect(0, 31, '\p{spaceseparator}', "");
Expect(1, 31, '\p{^spaceseparator}', "");
Expect(1, 31, '\P{spaceseparator}', "");
Expect(0, 31, '\P{^spaceseparator}', "");
Expect(1, 32, '\p{_	space_Separator}', "");
Expect(0, 32, '\p{^_	space_Separator}', "");
Expect(0, 32, '\P{_	space_Separator}', "");
Expect(1, 32, '\P{^_	space_Separator}', "");
Expect(0, 31, '\p{_	space_Separator}', "");
Expect(1, 31, '\p{^_	space_Separator}', "");
Expect(1, 31, '\P{_	space_Separator}', "");
Expect(0, 31, '\P{^_	space_Separator}', "");
Error('\p{  IS/a/Space	SEPARATOR}');
Error('\P{  IS/a/Space	SEPARATOR}');
Expect(1, 32, '\p{isspaceseparator}', "");
Expect(0, 32, '\p{^isspaceseparator}', "");
Expect(0, 32, '\P{isspaceseparator}', "");
Expect(1, 32, '\P{^isspaceseparator}', "");
Expect(0, 31, '\p{isspaceseparator}', "");
Expect(1, 31, '\p{^isspaceseparator}', "");
Expect(1, 31, '\P{isspaceseparator}', "");
Expect(0, 31, '\P{^isspaceseparator}', "");
Expect(1, 32, '\p{-is space Separator}', "");
Expect(0, 32, '\p{^-is space Separator}', "");
Expect(0, 32, '\P{-is space Separator}', "");
Expect(1, 32, '\P{^-is space Separator}', "");
Expect(0, 31, '\p{-is space Separator}', "");
Expect(1, 31, '\p{^-is space Separator}', "");
Expect(1, 31, '\P{-is space Separator}', "");
Expect(0, 31, '\P{^-is space Separator}', "");
Error('\p{:=-_Zs}');
Error('\P{:=-_Zs}');
Expect(1, 32, '\p{zs}', "");
Expect(0, 32, '\p{^zs}', "");
Expect(0, 32, '\P{zs}', "");
Expect(1, 32, '\P{^zs}', "");
Expect(0, 31, '\p{zs}', "");
Expect(1, 31, '\p{^zs}', "");
Expect(1, 31, '\P{zs}', "");
Expect(0, 31, '\P{^zs}', "");
Expect(1, 32, '\p{		ZS}', "");
Expect(0, 32, '\p{^		ZS}', "");
Expect(0, 32, '\P{		ZS}', "");
Expect(1, 32, '\P{^		ZS}', "");
Expect(0, 31, '\p{		ZS}', "");
Expect(1, 31, '\p{^		ZS}', "");
Expect(1, 31, '\P{		ZS}', "");
Expect(0, 31, '\P{^		ZS}', "");
Error('\p{ 	is/a/Zs}');
Error('\P{ 	is/a/Zs}');
Expect(1, 32, '\p{iszs}', "");
Expect(0, 32, '\p{^iszs}', "");
Expect(0, 32, '\P{iszs}', "");
Expect(1, 32, '\P{^iszs}', "");
Expect(0, 31, '\p{iszs}', "");
Expect(1, 31, '\p{^iszs}', "");
Expect(1, 31, '\P{iszs}', "");
Expect(0, 31, '\P{^iszs}', "");
Expect(1, 32, '\p{_is-ZS}', "");
Expect(0, 32, '\p{^_is-ZS}', "");
Expect(0, 32, '\P{_is-ZS}', "");
Expect(1, 32, '\P{^_is-ZS}', "");
Expect(0, 31, '\p{_is-ZS}', "");
Expect(1, 31, '\p{^_is-ZS}', "");
Expect(1, 31, '\P{_is-ZS}', "");
Expect(0, 31, '\P{^_is-ZS}', "");
Error('\p{-	Supplemental_Punctuation:=}');
Error('\P{-	Supplemental_Punctuation:=}');
Expect(1, 11903, '\p{supplementalpunctuation}', "");
Expect(0, 11903, '\p{^supplementalpunctuation}', "");
Expect(0, 11903, '\P{supplementalpunctuation}', "");
Expect(1, 11903, '\P{^supplementalpunctuation}', "");
Expect(0, 11775, '\p{supplementalpunctuation}', "");
Expect(1, 11775, '\p{^supplementalpunctuation}', "");
Expect(1, 11775, '\P{supplementalpunctuation}', "");
Expect(0, 11775, '\P{^supplementalpunctuation}', "");
Expect(1, 11903, '\p{-	Supplemental PUNCTUATION}', "");
Expect(0, 11903, '\p{^-	Supplemental PUNCTUATION}', "");
Expect(0, 11903, '\P{-	Supplemental PUNCTUATION}', "");
Expect(1, 11903, '\P{^-	Supplemental PUNCTUATION}', "");
Expect(0, 11775, '\p{-	Supplemental PUNCTUATION}', "");
Expect(1, 11775, '\p{^-	Supplemental PUNCTUATION}', "");
Expect(1, 11775, '\P{-	Supplemental PUNCTUATION}', "");
Expect(0, 11775, '\P{^-	Supplemental PUNCTUATION}', "");
Error('\p{-	is:=Supplemental_Punctuation}');
Error('\P{-	is:=Supplemental_Punctuation}');
Expect(1, 11903, '\p{issupplementalpunctuation}', "");
Expect(0, 11903, '\p{^issupplementalpunctuation}', "");
Expect(0, 11903, '\P{issupplementalpunctuation}', "");
Expect(1, 11903, '\P{^issupplementalpunctuation}', "");
Expect(0, 11775, '\p{issupplementalpunctuation}', "");
Expect(1, 11775, '\p{^issupplementalpunctuation}', "");
Expect(1, 11775, '\P{issupplementalpunctuation}', "");
Expect(0, 11775, '\P{^issupplementalpunctuation}', "");
Expect(1, 11903, '\p{- IS_Supplemental_punctuation}', "");
Expect(0, 11903, '\p{^- IS_Supplemental_punctuation}', "");
Expect(0, 11903, '\P{- IS_Supplemental_punctuation}', "");
Expect(1, 11903, '\P{^- IS_Supplemental_punctuation}', "");
Expect(0, 11775, '\p{- IS_Supplemental_punctuation}', "");
Expect(1, 11775, '\p{^- IS_Supplemental_punctuation}', "");
Expect(1, 11775, '\P{- IS_Supplemental_punctuation}', "");
Expect(0, 11775, '\P{^- IS_Supplemental_punctuation}', "");
Error('\p{:=_ IN	SUPPLEMENTALPUNCTUATION}');
Error('\P{:=_ IN	SUPPLEMENTALPUNCTUATION}');
Expect(1, 11903, '\p{insupplementalpunctuation}', "");
Expect(0, 11903, '\p{^insupplementalpunctuation}', "");
Expect(0, 11903, '\P{insupplementalpunctuation}', "");
Expect(1, 11903, '\P{^insupplementalpunctuation}', "");
Expect(0, 11775, '\p{insupplementalpunctuation}', "");
Expect(1, 11775, '\p{^insupplementalpunctuation}', "");
Expect(1, 11775, '\P{insupplementalpunctuation}', "");
Expect(0, 11775, '\P{^insupplementalpunctuation}', "");
Expect(1, 11903, '\p{ InSUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11903, '\p{^ InSUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11903, '\P{ InSUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11903, '\P{^ InSUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11775, '\p{ InSUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11775, '\p{^ InSUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11775, '\P{ InSUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11775, '\P{^ InSUPPLEMENTALPUNCTUATION}', "");
Error('\p{  Katakana_Phonetic_extensions:=}');
Error('\P{  Katakana_Phonetic_extensions:=}');
Expect(1, 12799, '\p{katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{_	KATAKANA	Phonetic	Extensions}', "");
Expect(0, 12799, '\p{^_	KATAKANA	Phonetic	Extensions}', "");
Expect(0, 12799, '\P{_	KATAKANA	Phonetic	Extensions}', "");
Expect(1, 12799, '\P{^_	KATAKANA	Phonetic	Extensions}', "");
Expect(0, 12783, '\p{_	KATAKANA	Phonetic	Extensions}', "");
Expect(1, 12783, '\p{^_	KATAKANA	Phonetic	Extensions}', "");
Expect(1, 12783, '\P{_	KATAKANA	Phonetic	Extensions}', "");
Expect(0, 12783, '\P{^_	KATAKANA	Phonetic	Extensions}', "");
Error('\p{_/a/IsKATAKANA	PHONETICExtensions}');
Error('\P{_/a/IsKATAKANA	PHONETICExtensions}');
Expect(1, 12799, '\p{iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{ _Is_katakana Phoneticextensions}', "");
Expect(0, 12799, '\p{^ _Is_katakana Phoneticextensions}', "");
Expect(0, 12799, '\P{ _Is_katakana Phoneticextensions}', "");
Expect(1, 12799, '\P{^ _Is_katakana Phoneticextensions}', "");
Expect(0, 12783, '\p{ _Is_katakana Phoneticextensions}', "");
Expect(1, 12783, '\p{^ _Is_katakana Phoneticextensions}', "");
Expect(1, 12783, '\P{ _Is_katakana Phoneticextensions}', "");
Expect(0, 12783, '\P{^ _Is_katakana Phoneticextensions}', "");
Error('\p{__in Katakana:=PHONETIC	Extensions}');
Error('\P{__in Katakana:=PHONETIC	Extensions}');
Expect(1, 12799, '\p{inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{	 InKATAKANA-PHONETIC Extensions}', "");
Expect(0, 12799, '\p{^	 InKATAKANA-PHONETIC Extensions}', "");
Expect(0, 12799, '\P{	 InKATAKANA-PHONETIC Extensions}', "");
Expect(1, 12799, '\P{^	 InKATAKANA-PHONETIC Extensions}', "");
Expect(0, 12783, '\p{	 InKATAKANA-PHONETIC Extensions}', "");
Expect(1, 12783, '\p{^	 InKATAKANA-PHONETIC Extensions}', "");
Expect(1, 12783, '\P{	 InKATAKANA-PHONETIC Extensions}', "");
Expect(0, 12783, '\P{^	 InKATAKANA-PHONETIC Extensions}', "");
Error('\p{	-Modifier:=Symbol}');
Error('\P{	-Modifier:=Symbol}');
Expect(1, 94, '\p{modifiersymbol}', "");
Expect(0, 94, '\p{^modifiersymbol}', "");
Expect(0, 94, '\P{modifiersymbol}', "");
Expect(1, 94, '\P{^modifiersymbol}', "");
Expect(0, 93, '\p{modifiersymbol}', "");
Expect(1, 93, '\p{^modifiersymbol}', "");
Expect(1, 93, '\P{modifiersymbol}', "");
Expect(0, 93, '\P{^modifiersymbol}', "");
Expect(1, 94, '\p{	-modifier_Symbol}', "");
Expect(0, 94, '\p{^	-modifier_Symbol}', "");
Expect(0, 94, '\P{	-modifier_Symbol}', "");
Expect(1, 94, '\P{^	-modifier_Symbol}', "");
Expect(0, 93, '\p{	-modifier_Symbol}', "");
Expect(1, 93, '\p{^	-modifier_Symbol}', "");
Expect(1, 93, '\P{	-modifier_Symbol}', "");
Expect(0, 93, '\P{^	-modifier_Symbol}', "");
Error('\p{	 Is modifier:=SYMBOL}');
Error('\P{	 Is modifier:=SYMBOL}');
Expect(1, 94, '\p{ismodifiersymbol}', "");
Expect(0, 94, '\p{^ismodifiersymbol}', "");
Expect(0, 94, '\P{ismodifiersymbol}', "");
Expect(1, 94, '\P{^ismodifiersymbol}', "");
Expect(0, 93, '\p{ismodifiersymbol}', "");
Expect(1, 93, '\p{^ismodifiersymbol}', "");
Expect(1, 93, '\P{ismodifiersymbol}', "");
Expect(0, 93, '\P{^ismodifiersymbol}', "");
Expect(1, 94, '\p{	Is-Modifier	Symbol}', "");
Expect(0, 94, '\p{^	Is-Modifier	Symbol}', "");
Expect(0, 94, '\P{	Is-Modifier	Symbol}', "");
Expect(1, 94, '\P{^	Is-Modifier	Symbol}', "");
Expect(0, 93, '\p{	Is-Modifier	Symbol}', "");
Expect(1, 93, '\p{^	Is-Modifier	Symbol}', "");
Expect(1, 93, '\P{	Is-Modifier	Symbol}', "");
Expect(0, 93, '\P{^	Is-Modifier	Symbol}', "");
Error('\p{_	Sk:=}');
Error('\P{_	Sk:=}');
Expect(1, 94, '\p{sk}', "");
Expect(0, 94, '\p{^sk}', "");
Expect(0, 94, '\P{sk}', "");
Expect(1, 94, '\P{^sk}', "");
Expect(0, 93, '\p{sk}', "");
Expect(1, 93, '\p{^sk}', "");
Expect(1, 93, '\P{sk}', "");
Expect(0, 93, '\P{^sk}', "");
Expect(1, 94, '\p{	_Sk}', "");
Expect(0, 94, '\p{^	_Sk}', "");
Expect(0, 94, '\P{	_Sk}', "");
Expect(1, 94, '\P{^	_Sk}', "");
Expect(0, 93, '\p{	_Sk}', "");
Expect(1, 93, '\p{^	_Sk}', "");
Expect(1, 93, '\P{	_Sk}', "");
Expect(0, 93, '\P{^	_Sk}', "");
Error('\p{:=__is-SK}');
Error('\P{:=__is-SK}');
Expect(1, 94, '\p{issk}', "");
Expect(0, 94, '\p{^issk}', "");
Expect(0, 94, '\P{issk}', "");
Expect(1, 94, '\P{^issk}', "");
Expect(0, 93, '\p{issk}', "");
Expect(1, 93, '\p{^issk}', "");
Expect(1, 93, '\P{issk}', "");
Expect(0, 93, '\P{^issk}', "");
Expect(1, 94, '\p{	 is-Sk}', "");
Expect(0, 94, '\p{^	 is-Sk}', "");
Expect(0, 94, '\P{	 is-Sk}', "");
Expect(1, 94, '\P{^	 is-Sk}', "");
Expect(0, 93, '\p{	 is-Sk}', "");
Expect(1, 93, '\p{^	 is-Sk}', "");
Expect(1, 93, '\P{	 is-Sk}', "");
Expect(0, 93, '\P{^	 is-Sk}', "");
Error('\p{/a/ Armenian}');
Error('\P{/a/ Armenian}');
Expect(1, 1366, '\p{armenian}', "");
Expect(0, 1366, '\p{^armenian}', "");
Expect(0, 1366, '\P{armenian}', "");
Expect(1, 1366, '\P{^armenian}', "");
Expect(0, 1328, '\p{armenian}', "");
Expect(1, 1328, '\p{^armenian}', "");
Expect(1, 1328, '\P{armenian}', "");
Expect(0, 1328, '\P{^armenian}', "");
Expect(1, 1366, '\p{	Armenian}', "");
Expect(0, 1366, '\p{^	Armenian}', "");
Expect(0, 1366, '\P{	Armenian}', "");
Expect(1, 1366, '\P{^	Armenian}', "");
Expect(0, 1328, '\p{	Armenian}', "");
Expect(1, 1328, '\p{^	Armenian}', "");
Expect(1, 1328, '\P{	Armenian}', "");
Expect(0, 1328, '\P{^	Armenian}', "");
Error('\p{_/a/Is_Armenian}');
Error('\P{_/a/Is_Armenian}');
Expect(1, 1366, '\p{isarmenian}', "");
Expect(0, 1366, '\p{^isarmenian}', "");
Expect(0, 1366, '\P{isarmenian}', "");
Expect(1, 1366, '\P{^isarmenian}', "");
Expect(0, 1328, '\p{isarmenian}', "");
Expect(1, 1328, '\p{^isarmenian}', "");
Expect(1, 1328, '\P{isarmenian}', "");
Expect(0, 1328, '\P{^isarmenian}', "");
Expect(1, 1366, '\p{	ISARMENIAN}', "");
Expect(0, 1366, '\p{^	ISARMENIAN}', "");
Expect(0, 1366, '\P{	ISARMENIAN}', "");
Expect(1, 1366, '\P{^	ISARMENIAN}', "");
Expect(0, 1328, '\p{	ISARMENIAN}', "");
Expect(1, 1328, '\p{^	ISARMENIAN}', "");
Expect(1, 1328, '\P{	ISARMENIAN}', "");
Expect(0, 1328, '\P{^	ISARMENIAN}', "");
Error('\p{_/a/Armn}');
Error('\P{_/a/Armn}');
Expect(1, 1366, '\p{armn}', "");
Expect(0, 1366, '\p{^armn}', "");
Expect(0, 1366, '\P{armn}', "");
Expect(1, 1366, '\P{^armn}', "");
Expect(0, 1328, '\p{armn}', "");
Expect(1, 1328, '\p{^armn}', "");
Expect(1, 1328, '\P{armn}', "");
Expect(0, 1328, '\P{^armn}', "");
Expect(1, 1366, '\p{--armn}', "");
Expect(0, 1366, '\p{^--armn}', "");
Expect(0, 1366, '\P{--armn}', "");
Expect(1, 1366, '\P{^--armn}', "");
Expect(0, 1328, '\p{--armn}', "");
Expect(1, 1328, '\p{^--armn}', "");
Expect(1, 1328, '\P{--armn}', "");
Expect(0, 1328, '\P{^--armn}', "");
Error('\p{	/a/IS_Armn}');
Error('\P{	/a/IS_Armn}');
Expect(1, 1366, '\p{isarmn}', "");
Expect(0, 1366, '\p{^isarmn}', "");
Expect(0, 1366, '\P{isarmn}', "");
Expect(1, 1366, '\P{^isarmn}', "");
Expect(0, 1328, '\p{isarmn}', "");
Expect(1, 1328, '\p{^isarmn}', "");
Expect(1, 1328, '\P{isarmn}', "");
Expect(0, 1328, '\P{^isarmn}', "");
Expect(1, 1366, '\p{-_Is Armn}', "");
Expect(0, 1366, '\p{^-_Is Armn}', "");
Expect(0, 1366, '\P{-_Is Armn}', "");
Expect(1, 1366, '\P{^-_Is Armn}', "");
Expect(0, 1328, '\p{-_Is Armn}', "");
Expect(1, 1328, '\p{^-_Is Armn}', "");
Expect(1, 1328, '\P{-_Is Armn}', "");
Expect(0, 1328, '\P{^-_Is Armn}', "");
Error('\p{ -XID	CONTINUE/a/}');
Error('\P{ -XID	CONTINUE/a/}');
Expect(1, 57, '\p{xidcontinue}', "");
Expect(0, 57, '\p{^xidcontinue}', "");
Expect(0, 57, '\P{xidcontinue}', "");
Expect(1, 57, '\P{^xidcontinue}', "");
Expect(0, 47, '\p{xidcontinue}', "");
Expect(1, 47, '\p{^xidcontinue}', "");
Expect(1, 47, '\P{xidcontinue}', "");
Expect(0, 47, '\P{^xidcontinue}', "");
Expect(1, 57, '\p{	xid Continue}', "");
Expect(0, 57, '\p{^	xid Continue}', "");
Expect(0, 57, '\P{	xid Continue}', "");
Expect(1, 57, '\P{^	xid Continue}', "");
Expect(0, 47, '\p{	xid Continue}', "");
Expect(1, 47, '\p{^	xid Continue}', "");
Expect(1, 47, '\P{	xid Continue}', "");
Expect(0, 47, '\P{^	xid Continue}', "");
Error('\p{_:=Isxid Continue}');
Error('\P{_:=Isxid Continue}');
Expect(1, 57, '\p{isxidcontinue}', "");
Expect(0, 57, '\p{^isxidcontinue}', "");
Expect(0, 57, '\P{isxidcontinue}', "");
Expect(1, 57, '\P{^isxidcontinue}', "");
Expect(0, 47, '\p{isxidcontinue}', "");
Expect(1, 47, '\p{^isxidcontinue}', "");
Expect(1, 47, '\P{isxidcontinue}', "");
Expect(0, 47, '\P{^isxidcontinue}', "");
Expect(1, 57, '\p{- Is XIDcontinue}', "");
Expect(0, 57, '\p{^- Is XIDcontinue}', "");
Expect(0, 57, '\P{- Is XIDcontinue}', "");
Expect(1, 57, '\P{^- Is XIDcontinue}', "");
Expect(0, 47, '\p{- Is XIDcontinue}', "");
Expect(1, 47, '\p{^- Is XIDcontinue}', "");
Expect(1, 47, '\P{- Is XIDcontinue}', "");
Expect(0, 47, '\P{^- Is XIDcontinue}', "");
Error('\p{ /a/xidc}');
Error('\P{ /a/xidc}');
Expect(1, 57, '\p{xidc}', "");
Expect(0, 57, '\p{^xidc}', "");
Expect(0, 57, '\P{xidc}', "");
Expect(1, 57, '\P{^xidc}', "");
Expect(0, 47, '\p{xidc}', "");
Expect(1, 47, '\p{^xidc}', "");
Expect(1, 47, '\P{xidc}', "");
Expect(0, 47, '\P{^xidc}', "");
Expect(1, 57, '\p{ _XIDC}', "");
Expect(0, 57, '\p{^ _XIDC}', "");
Expect(0, 57, '\P{ _XIDC}', "");
Expect(1, 57, '\P{^ _XIDC}', "");
Expect(0, 47, '\p{ _XIDC}', "");
Expect(1, 47, '\p{^ _XIDC}', "");
Expect(1, 47, '\P{ _XIDC}', "");
Expect(0, 47, '\P{^ _XIDC}', "");
Error('\p{/a/_Is	XIDC}');
Error('\P{/a/_Is	XIDC}');
Expect(1, 57, '\p{isxidc}', "");
Expect(0, 57, '\p{^isxidc}', "");
Expect(0, 57, '\P{isxidc}', "");
Expect(1, 57, '\P{^isxidc}', "");
Expect(0, 47, '\p{isxidc}', "");
Expect(1, 47, '\p{^isxidc}', "");
Expect(1, 47, '\P{isxidc}', "");
Expect(0, 47, '\P{^isxidc}', "");
Expect(1, 57, '\p{--Is_XIDC}', "");
Expect(0, 57, '\p{^--Is_XIDC}', "");
Expect(0, 57, '\P{--Is_XIDC}', "");
Expect(1, 57, '\P{^--Is_XIDC}', "");
Expect(0, 47, '\p{--Is_XIDC}', "");
Expect(1, 47, '\p{^--Is_XIDC}', "");
Expect(1, 47, '\P{--Is_XIDC}', "");
Expect(0, 47, '\P{^--Is_XIDC}', "");
Error('\p{	:=hyphen}');
Error('\P{	:=hyphen}');
Expect(1, 45, '\p{hyphen}', "");
Expect(0, 45, '\p{^hyphen}', "");
Expect(0, 45, '\P{hyphen}', "");
Expect(1, 45, '\P{^hyphen}', "");
Expect(0, 44, '\p{hyphen}', "");
Expect(1, 44, '\p{^hyphen}', "");
Expect(1, 44, '\P{hyphen}', "");
Expect(0, 44, '\P{^hyphen}', "");
Expect(1, 45, '\p{--hyphen}', "");
Expect(0, 45, '\p{^--hyphen}', "");
Expect(0, 45, '\P{--hyphen}', "");
Expect(1, 45, '\P{^--hyphen}', "");
Expect(0, 44, '\p{--hyphen}', "");
Expect(1, 44, '\p{^--hyphen}', "");
Expect(1, 44, '\P{--hyphen}', "");
Expect(0, 44, '\P{^--hyphen}', "");
Error('\p{ Is_HYPHEN:=}');
Error('\P{ Is_HYPHEN:=}');
Expect(1, 45, '\p{ishyphen}', "");
Expect(0, 45, '\p{^ishyphen}', "");
Expect(0, 45, '\P{ishyphen}', "");
Expect(1, 45, '\P{^ishyphen}', "");
Expect(0, 44, '\p{ishyphen}', "");
Expect(1, 44, '\p{^ishyphen}', "");
Expect(1, 44, '\P{ishyphen}', "");
Expect(0, 44, '\P{^ishyphen}', "");
Expect(1, 45, '\p{Is_HYPHEN}', "");
Expect(0, 45, '\p{^Is_HYPHEN}', "");
Expect(0, 45, '\P{Is_HYPHEN}', "");
Expect(1, 45, '\P{^Is_HYPHEN}', "");
Expect(0, 44, '\p{Is_HYPHEN}', "");
Expect(1, 44, '\p{^Is_HYPHEN}', "");
Expect(1, 44, '\P{Is_HYPHEN}', "");
Expect(0, 44, '\P{^Is_HYPHEN}', "");
Error('\p{	unified/a/canadian_aboriginal_syllabics}');
Error('\P{	unified/a/canadian_aboriginal_syllabics}');
Expect(1, 5759, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(0, 5759, '\p{^Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(0, 5759, '\P{Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(1, 5759, '\P{^Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(0, 5119, '\p{Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(1, 5119, '\p{^Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(1, 5119, '\P{Unified CANADIAN-Aboriginal_Syllabics}', "");
Expect(0, 5119, '\P{^Unified CANADIAN-Aboriginal_Syllabics}', "");
Error('\p{_:=is UNIFIED_CANADIANaboriginal-SYLLABICS}');
Error('\P{_:=is UNIFIED_CANADIANaboriginal-SYLLABICS}');
Expect(1, 5759, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5759, '\p{^_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5759, '\P{_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5759, '\P{^_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5119, '\p{_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5119, '\p{^_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5119, '\P{_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5119, '\P{^_is Unified	CANADIAN	ABORIGINAL_syllabics}', "");
Error('\p{	-IN	UNIFIED canadianAboriginal/a/Syllabics}');
Error('\P{	-IN	UNIFIED canadianAboriginal/a/Syllabics}');
Expect(1, 5759, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(0, 5759, '\p{^_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(0, 5759, '\P{_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(1, 5759, '\P{^_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(0, 5119, '\p{_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(1, 5119, '\p{^_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(1, 5119, '\P{_In	Unified-Canadian_aboriginalsyllabics}', "");
Expect(0, 5119, '\P{^_In	Unified-Canadian_aboriginalsyllabics}', "");
Error('\p{_Canadian Syllabics:=}');
Error('\P{_Canadian Syllabics:=}');
Expect(1, 5759, '\p{canadiansyllabics}', "");
Expect(0, 5759, '\p{^canadiansyllabics}', "");
Expect(0, 5759, '\P{canadiansyllabics}', "");
Expect(1, 5759, '\P{^canadiansyllabics}', "");
Expect(0, 5119, '\p{canadiansyllabics}', "");
Expect(1, 5119, '\p{^canadiansyllabics}', "");
Expect(1, 5119, '\P{canadiansyllabics}', "");
Expect(0, 5119, '\P{^canadiansyllabics}', "");
Expect(1, 5759, '\p{	-Canadian-syllabics}', "");
Expect(0, 5759, '\p{^	-Canadian-syllabics}', "");
Expect(0, 5759, '\P{	-Canadian-syllabics}', "");
Expect(1, 5759, '\P{^	-Canadian-syllabics}', "");
Expect(0, 5119, '\p{	-Canadian-syllabics}', "");
Expect(1, 5119, '\p{^	-Canadian-syllabics}', "");
Expect(1, 5119, '\P{	-Canadian-syllabics}', "");
Expect(0, 5119, '\P{^	-Canadian-syllabics}', "");
Error('\p{:=	Is Canadian_syllabics}');
Error('\P{:=	Is Canadian_syllabics}');
Expect(1, 5759, '\p{iscanadiansyllabics}', "");
Expect(0, 5759, '\p{^iscanadiansyllabics}', "");
Expect(0, 5759, '\P{iscanadiansyllabics}', "");
Expect(1, 5759, '\P{^iscanadiansyllabics}', "");
Expect(0, 5119, '\p{iscanadiansyllabics}', "");
Expect(1, 5119, '\p{^iscanadiansyllabics}', "");
Expect(1, 5119, '\P{iscanadiansyllabics}', "");
Expect(0, 5119, '\P{^iscanadiansyllabics}', "");
Expect(1, 5759, '\p{	is Canadiansyllabics}', "");
Expect(0, 5759, '\p{^	is Canadiansyllabics}', "");
Expect(0, 5759, '\P{	is Canadiansyllabics}', "");
Expect(1, 5759, '\P{^	is Canadiansyllabics}', "");
Expect(0, 5119, '\p{	is Canadiansyllabics}', "");
Expect(1, 5119, '\p{^	is Canadiansyllabics}', "");
Expect(1, 5119, '\P{	is Canadiansyllabics}', "");
Expect(0, 5119, '\P{^	is Canadiansyllabics}', "");
Error('\p{		IN Canadian/a/syllabics}');
Error('\P{		IN Canadian/a/syllabics}');
Expect(1, 5759, '\p{incanadiansyllabics}', "");
Expect(0, 5759, '\p{^incanadiansyllabics}', "");
Expect(0, 5759, '\P{incanadiansyllabics}', "");
Expect(1, 5759, '\P{^incanadiansyllabics}', "");
Expect(0, 5119, '\p{incanadiansyllabics}', "");
Expect(1, 5119, '\p{^incanadiansyllabics}', "");
Expect(1, 5119, '\P{incanadiansyllabics}', "");
Expect(0, 5119, '\P{^incanadiansyllabics}', "");
Expect(1, 5759, '\p{	_InCANADIAN_SYLLABICS}', "");
Expect(0, 5759, '\p{^	_InCANADIAN_SYLLABICS}', "");
Expect(0, 5759, '\P{	_InCANADIAN_SYLLABICS}', "");
Expect(1, 5759, '\P{^	_InCANADIAN_SYLLABICS}', "");
Expect(0, 5119, '\p{	_InCANADIAN_SYLLABICS}', "");
Expect(1, 5119, '\p{^	_InCANADIAN_SYLLABICS}', "");
Expect(1, 5119, '\P{	_InCANADIAN_SYLLABICS}', "");
Expect(0, 5119, '\P{^	_InCANADIAN_SYLLABICS}', "");
Error('\p{ -egyptian_Hieroglyphs/a/}');
Error('\P{ -egyptian_Hieroglyphs/a/}');
Expect(1, 78894, '\p{egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{ EgyptianHIEROGLYPHS}', "");
Expect(0, 78894, '\p{^ EgyptianHIEROGLYPHS}', "");
Expect(0, 78894, '\P{ EgyptianHIEROGLYPHS}', "");
Expect(1, 78894, '\P{^ EgyptianHIEROGLYPHS}', "");
Expect(0, 77823, '\p{ EgyptianHIEROGLYPHS}', "");
Expect(1, 77823, '\p{^ EgyptianHIEROGLYPHS}', "");
Expect(1, 77823, '\P{ EgyptianHIEROGLYPHS}', "");
Expect(0, 77823, '\P{^ EgyptianHIEROGLYPHS}', "");
Error('\p{	 is/a/EGYPTIANHieroglyphs}');
Error('\P{	 is/a/EGYPTIANHieroglyphs}');
Expect(1, 78894, '\p{isegyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^isegyptianhieroglyphs}', "");
Expect(0, 78894, '\P{isegyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^isegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{isegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^isegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{isegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^isegyptianhieroglyphs}', "");
Expect(1, 78894, '\p{ Is	egyptian_Hieroglyphs}', "");
Expect(0, 78894, '\p{^ Is	egyptian_Hieroglyphs}', "");
Expect(0, 78894, '\P{ Is	egyptian_Hieroglyphs}', "");
Expect(1, 78894, '\P{^ Is	egyptian_Hieroglyphs}', "");
Expect(0, 77823, '\p{ Is	egyptian_Hieroglyphs}', "");
Expect(1, 77823, '\p{^ Is	egyptian_Hieroglyphs}', "");
Expect(1, 77823, '\P{ Is	egyptian_Hieroglyphs}', "");
Expect(0, 77823, '\P{^ Is	egyptian_Hieroglyphs}', "");
Error('\p{/a/	_egyp}');
Error('\P{/a/	_egyp}');
Expect(1, 78894, '\p{egyp}', "");
Expect(0, 78894, '\p{^egyp}', "");
Expect(0, 78894, '\P{egyp}', "");
Expect(1, 78894, '\P{^egyp}', "");
Expect(0, 77823, '\p{egyp}', "");
Expect(1, 77823, '\p{^egyp}', "");
Expect(1, 77823, '\P{egyp}', "");
Expect(0, 77823, '\P{^egyp}', "");
Expect(1, 78894, '\p{-	Egyp}', "");
Expect(0, 78894, '\p{^-	Egyp}', "");
Expect(0, 78894, '\P{-	Egyp}', "");
Expect(1, 78894, '\P{^-	Egyp}', "");
Expect(0, 77823, '\p{-	Egyp}', "");
Expect(1, 77823, '\p{^-	Egyp}', "");
Expect(1, 77823, '\P{-	Egyp}', "");
Expect(0, 77823, '\P{^-	Egyp}', "");
Error('\p{-Is:=EGYP}');
Error('\P{-Is:=EGYP}');
Expect(1, 78894, '\p{isegyp}', "");
Expect(0, 78894, '\p{^isegyp}', "");
Expect(0, 78894, '\P{isegyp}', "");
Expect(1, 78894, '\P{^isegyp}', "");
Expect(0, 77823, '\p{isegyp}', "");
Expect(1, 77823, '\p{^isegyp}', "");
Expect(1, 77823, '\P{isegyp}', "");
Expect(0, 77823, '\P{^isegyp}', "");
Expect(1, 78894, '\p{__ISEgyp}', "");
Expect(0, 78894, '\p{^__ISEgyp}', "");
Expect(0, 78894, '\P{__ISEgyp}', "");
Expect(1, 78894, '\P{^__ISEgyp}', "");
Expect(0, 77823, '\p{__ISEgyp}', "");
Expect(1, 77823, '\p{^__ISEgyp}', "");
Expect(1, 77823, '\P{__ISEgyp}', "");
Expect(0, 77823, '\P{^__ISEgyp}', "");
Error('\p{-/a/Aegean-Numbers}');
Error('\P{-/a/Aegean-Numbers}');
Expect(1, 65855, '\p{aegeannumbers}', "");
Expect(0, 65855, '\p{^aegeannumbers}', "");
Expect(0, 65855, '\P{aegeannumbers}', "");
Expect(1, 65855, '\P{^aegeannumbers}', "");
Expect(0, 65791, '\p{aegeannumbers}', "");
Expect(1, 65791, '\p{^aegeannumbers}', "");
Expect(1, 65791, '\P{aegeannumbers}', "");
Expect(0, 65791, '\P{^aegeannumbers}', "");
Expect(1, 65855, '\p{_ AEGEAN-Numbers}', "");
Expect(0, 65855, '\p{^_ AEGEAN-Numbers}', "");
Expect(0, 65855, '\P{_ AEGEAN-Numbers}', "");
Expect(1, 65855, '\P{^_ AEGEAN-Numbers}', "");
Expect(0, 65791, '\p{_ AEGEAN-Numbers}', "");
Expect(1, 65791, '\p{^_ AEGEAN-Numbers}', "");
Expect(1, 65791, '\P{_ AEGEAN-Numbers}', "");
Expect(0, 65791, '\P{^_ AEGEAN-Numbers}', "");
Error('\p{	:=Is-aegeannumbers}');
Error('\P{	:=Is-aegeannumbers}');
Expect(1, 65855, '\p{isaegeannumbers}', "");
Expect(0, 65855, '\p{^isaegeannumbers}', "");
Expect(0, 65855, '\P{isaegeannumbers}', "");
Expect(1, 65855, '\P{^isaegeannumbers}', "");
Expect(0, 65791, '\p{isaegeannumbers}', "");
Expect(1, 65791, '\p{^isaegeannumbers}', "");
Expect(1, 65791, '\P{isaegeannumbers}', "");
Expect(0, 65791, '\P{^isaegeannumbers}', "");
Expect(1, 65855, '\p{	 isaegean Numbers}', "");
Expect(0, 65855, '\p{^	 isaegean Numbers}', "");
Expect(0, 65855, '\P{	 isaegean Numbers}', "");
Expect(1, 65855, '\P{^	 isaegean Numbers}', "");
Expect(0, 65791, '\p{	 isaegean Numbers}', "");
Expect(1, 65791, '\p{^	 isaegean Numbers}', "");
Expect(1, 65791, '\P{	 isaegean Numbers}', "");
Expect(0, 65791, '\P{^	 isaegean Numbers}', "");
Error('\p{_-In_Aegean:=Numbers}');
Error('\P{_-In_Aegean:=Numbers}');
Expect(1, 65855, '\p{inaegeannumbers}', "");
Expect(0, 65855, '\p{^inaegeannumbers}', "");
Expect(0, 65855, '\P{inaegeannumbers}', "");
Expect(1, 65855, '\P{^inaegeannumbers}', "");
Expect(0, 65791, '\p{inaegeannumbers}', "");
Expect(1, 65791, '\p{^inaegeannumbers}', "");
Expect(1, 65791, '\P{inaegeannumbers}', "");
Expect(0, 65791, '\P{^inaegeannumbers}', "");
Expect(1, 65855, '\p{ in_Aegean	numbers}', "");
Expect(0, 65855, '\p{^ in_Aegean	numbers}', "");
Expect(0, 65855, '\P{ in_Aegean	numbers}', "");
Expect(1, 65855, '\P{^ in_Aegean	numbers}', "");
Expect(0, 65791, '\p{ in_Aegean	numbers}', "");
Expect(1, 65791, '\p{^ in_Aegean	numbers}', "");
Expect(1, 65791, '\P{ in_Aegean	numbers}', "");
Expect(0, 65791, '\P{^ in_Aegean	numbers}', "");
Error('\p{:=--BIDICONTROL}');
Error('\P{:=--BIDICONTROL}');
Expect(1, 8207, '\p{bidicontrol}', "");
Expect(0, 8207, '\p{^bidicontrol}', "");
Expect(0, 8207, '\P{bidicontrol}', "");
Expect(1, 8207, '\P{^bidicontrol}', "");
Expect(0, 8205, '\p{bidicontrol}', "");
Expect(1, 8205, '\p{^bidicontrol}', "");
Expect(1, 8205, '\P{bidicontrol}', "");
Expect(0, 8205, '\P{^bidicontrol}', "");
Expect(1, 8207, '\p{ _Bidi_control}', "");
Expect(0, 8207, '\p{^ _Bidi_control}', "");
Expect(0, 8207, '\P{ _Bidi_control}', "");
Expect(1, 8207, '\P{^ _Bidi_control}', "");
Expect(0, 8205, '\p{ _Bidi_control}', "");
Expect(1, 8205, '\p{^ _Bidi_control}', "");
Expect(1, 8205, '\P{ _Bidi_control}', "");
Expect(0, 8205, '\P{^ _Bidi_control}', "");
Error('\p{_	IS_BIDI-CONTROL:=}');
Error('\P{_	IS_BIDI-CONTROL:=}');
Expect(1, 8207, '\p{isbidicontrol}', "");
Expect(0, 8207, '\p{^isbidicontrol}', "");
Expect(0, 8207, '\P{isbidicontrol}', "");
Expect(1, 8207, '\P{^isbidicontrol}', "");
Expect(0, 8205, '\p{isbidicontrol}', "");
Expect(1, 8205, '\p{^isbidicontrol}', "");
Expect(1, 8205, '\P{isbidicontrol}', "");
Expect(0, 8205, '\P{^isbidicontrol}', "");
Expect(1, 8207, '\p{_	Is_BIDIControl}', "");
Expect(0, 8207, '\p{^_	Is_BIDIControl}', "");
Expect(0, 8207, '\P{_	Is_BIDIControl}', "");
Expect(1, 8207, '\P{^_	Is_BIDIControl}', "");
Expect(0, 8205, '\p{_	Is_BIDIControl}', "");
Expect(1, 8205, '\p{^_	Is_BIDIControl}', "");
Expect(1, 8205, '\P{_	Is_BIDIControl}', "");
Expect(0, 8205, '\P{^_	Is_BIDIControl}', "");
Error('\p{/a/	_Bidi C}');
Error('\P{/a/	_Bidi C}');
Expect(1, 8207, '\p{bidic}', "");
Expect(0, 8207, '\p{^bidic}', "");
Expect(0, 8207, '\P{bidic}', "");
Expect(1, 8207, '\P{^bidic}', "");
Expect(0, 8205, '\p{bidic}', "");
Expect(1, 8205, '\p{^bidic}', "");
Expect(1, 8205, '\P{bidic}', "");
Expect(0, 8205, '\P{^bidic}', "");
Expect(1, 8207, '\p{-bidi_C}', "");
Expect(0, 8207, '\p{^-bidi_C}', "");
Expect(0, 8207, '\P{-bidi_C}', "");
Expect(1, 8207, '\P{^-bidi_C}', "");
Expect(0, 8205, '\p{-bidi_C}', "");
Expect(1, 8205, '\p{^-bidi_C}', "");
Expect(1, 8205, '\P{-bidi_C}', "");
Expect(0, 8205, '\P{^-bidi_C}', "");
Error('\p{  IS/a/Bidi C}');
Error('\P{  IS/a/Bidi C}');
Expect(1, 8207, '\p{isbidic}', "");
Expect(0, 8207, '\p{^isbidic}', "");
Expect(0, 8207, '\P{isbidic}', "");
Expect(1, 8207, '\P{^isbidic}', "");
Expect(0, 8205, '\p{isbidic}', "");
Expect(1, 8205, '\p{^isbidic}', "");
Expect(1, 8205, '\P{isbidic}', "");
Expect(0, 8205, '\P{^isbidic}', "");
Expect(1, 8207, '\p{_ Is BIDI-c}', "");
Expect(0, 8207, '\p{^_ Is BIDI-c}', "");
Expect(0, 8207, '\P{_ Is BIDI-c}', "");
Expect(1, 8207, '\P{^_ Is BIDI-c}', "");
Expect(0, 8205, '\p{_ Is BIDI-c}', "");
Expect(1, 8205, '\p{^_ Is BIDI-c}', "");
Expect(1, 8205, '\P{_ Is BIDI-c}', "");
Expect(0, 8205, '\P{^_ Is BIDI-c}', "");
Error('\p{-/a/COMBINING	Diacritical MARKS-for_symbols}');
Error('\P{-/a/COMBINING	Diacritical MARKS-for_symbols}');
Expect(1, 8447, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(0, 8447, '\p{^	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(0, 8447, '\P{	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(1, 8447, '\P{^	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(0, 8399, '\p{	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(1, 8399, '\p{^	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(1, 8399, '\P{	 Combining Diacritical_Marks	For-Symbols}', "");
Expect(0, 8399, '\P{^	 Combining Diacritical_Marks	For-Symbols}', "");
Error('\p{ :=Is CombiningDIACRITICAL-Marks_for	symbols}');
Error('\P{ :=Is CombiningDIACRITICAL-Marks_for	symbols}');
Expect(1, 8447, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(0, 8447, '\p{^_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(0, 8447, '\P{_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(1, 8447, '\P{^_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(0, 8399, '\p{_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(1, 8399, '\p{^_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(1, 8399, '\P{_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Expect(0, 8399, '\P{^_IS_Combining-DIACRITICAL-MarksForSymbols}', "");
Error('\p{_:=In	COMBININGdiacritical	marks	For Symbols}');
Error('\P{_:=In	COMBININGdiacritical	marks	For Symbols}');
Expect(1, 8447, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(0, 8447, '\p{^-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(0, 8447, '\P{-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(1, 8447, '\P{^-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(0, 8399, '\p{-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(1, 8399, '\p{^-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(1, 8399, '\P{-in	combiningDiacritical MARKS-ForSymbols}', "");
Expect(0, 8399, '\P{^-in	combiningDiacritical MARKS-ForSymbols}', "");
Error('\p{ Combining-MARKS_For_SYMBOLS:=}');
Error('\P{ Combining-MARKS_For_SYMBOLS:=}');
Expect(1, 8447, '\p{combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{	COMBINING marksFor-Symbols}', "");
Expect(0, 8447, '\p{^	COMBINING marksFor-Symbols}', "");
Expect(0, 8447, '\P{	COMBINING marksFor-Symbols}', "");
Expect(1, 8447, '\P{^	COMBINING marksFor-Symbols}', "");
Expect(0, 8399, '\p{	COMBINING marksFor-Symbols}', "");
Expect(1, 8399, '\p{^	COMBINING marksFor-Symbols}', "");
Expect(1, 8399, '\P{	COMBINING marksFor-Symbols}', "");
Expect(0, 8399, '\P{^	COMBINING marksFor-Symbols}', "");
Error('\p{_:=Is_Combining-Marks	for	SYMBOLS}');
Error('\P{_:=Is_Combining-Marks	for	SYMBOLS}');
Expect(1, 8447, '\p{iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{__IS_Combining	Marks FORsymbols}', "");
Expect(0, 8447, '\p{^__IS_Combining	Marks FORsymbols}', "");
Expect(0, 8447, '\P{__IS_Combining	Marks FORsymbols}', "");
Expect(1, 8447, '\P{^__IS_Combining	Marks FORsymbols}', "");
Expect(0, 8399, '\p{__IS_Combining	Marks FORsymbols}', "");
Expect(1, 8399, '\p{^__IS_Combining	Marks FORsymbols}', "");
Expect(1, 8399, '\P{__IS_Combining	Marks FORsymbols}', "");
Expect(0, 8399, '\P{^__IS_Combining	Marks FORsymbols}', "");
Error('\p{--in COMBINING:=marks FOR_symbols}');
Error('\P{--in COMBINING:=marks FOR_symbols}');
Expect(1, 8447, '\p{incombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{_IN-combining	Marks_For_Symbols}', "");
Expect(0, 8447, '\p{^_IN-combining	Marks_For_Symbols}', "");
Expect(0, 8447, '\P{_IN-combining	Marks_For_Symbols}', "");
Expect(1, 8447, '\P{^_IN-combining	Marks_For_Symbols}', "");
Expect(0, 8399, '\p{_IN-combining	Marks_For_Symbols}', "");
Expect(1, 8399, '\p{^_IN-combining	Marks_For_Symbols}', "");
Expect(1, 8399, '\P{_IN-combining	Marks_For_Symbols}', "");
Expect(0, 8399, '\P{^_IN-combining	Marks_For_Symbols}', "");
Error('\p{_	SmallForm	Variants:=}');
Error('\P{_	SmallForm	Variants:=}');
Expect(1, 65135, '\p{smallformvariants}', "");
Expect(0, 65135, '\p{^smallformvariants}', "");
Expect(0, 65135, '\P{smallformvariants}', "");
Expect(1, 65135, '\P{^smallformvariants}', "");
Expect(0, 65103, '\p{smallformvariants}', "");
Expect(1, 65103, '\p{^smallformvariants}', "");
Expect(1, 65103, '\P{smallformvariants}', "");
Expect(0, 65103, '\P{^smallformvariants}', "");
Expect(1, 65135, '\p{_	SmallForm variants}', "");
Expect(0, 65135, '\p{^_	SmallForm variants}', "");
Expect(0, 65135, '\P{_	SmallForm variants}', "");
Expect(1, 65135, '\P{^_	SmallForm variants}', "");
Expect(0, 65103, '\p{_	SmallForm variants}', "");
Expect(1, 65103, '\p{^_	SmallForm variants}', "");
Expect(1, 65103, '\P{_	SmallForm variants}', "");
Expect(0, 65103, '\P{^_	SmallForm variants}', "");
Error('\p{ :=IS	Small_formVariants}');
Error('\P{ :=IS	Small_formVariants}');
Expect(1, 65135, '\p{issmallformvariants}', "");
Expect(0, 65135, '\p{^issmallformvariants}', "");
Expect(0, 65135, '\P{issmallformvariants}', "");
Expect(1, 65135, '\P{^issmallformvariants}', "");
Expect(0, 65103, '\p{issmallformvariants}', "");
Expect(1, 65103, '\p{^issmallformvariants}', "");
Expect(1, 65103, '\P{issmallformvariants}', "");
Expect(0, 65103, '\P{^issmallformvariants}', "");
Expect(1, 65135, '\p{	 isSMALL_Form-VARIANTS}', "");
Expect(0, 65135, '\p{^	 isSMALL_Form-VARIANTS}', "");
Expect(0, 65135, '\P{	 isSMALL_Form-VARIANTS}', "");
Expect(1, 65135, '\P{^	 isSMALL_Form-VARIANTS}', "");
Expect(0, 65103, '\p{	 isSMALL_Form-VARIANTS}', "");
Expect(1, 65103, '\p{^	 isSMALL_Form-VARIANTS}', "");
Expect(1, 65103, '\P{	 isSMALL_Form-VARIANTS}', "");
Expect(0, 65103, '\P{^	 isSMALL_Form-VARIANTS}', "");
Error('\p{--In/a/Small Form	Variants}');
Error('\P{--In/a/Small Form	Variants}');
Expect(1, 65135, '\p{insmallformvariants}', "");
Expect(0, 65135, '\p{^insmallformvariants}', "");
Expect(0, 65135, '\P{insmallformvariants}', "");
Expect(1, 65135, '\P{^insmallformvariants}', "");
Expect(0, 65103, '\p{insmallformvariants}', "");
Expect(1, 65103, '\p{^insmallformvariants}', "");
Expect(1, 65103, '\P{insmallformvariants}', "");
Expect(0, 65103, '\P{^insmallformvariants}', "");
Expect(1, 65135, '\p{	-IN small_Form	variants}', "");
Expect(0, 65135, '\p{^	-IN small_Form	variants}', "");
Expect(0, 65135, '\P{	-IN small_Form	variants}', "");
Expect(1, 65135, '\P{^	-IN small_Form	variants}', "");
Expect(0, 65103, '\p{	-IN small_Form	variants}', "");
Expect(1, 65103, '\p{^	-IN small_Form	variants}', "");
Expect(1, 65103, '\P{	-IN small_Form	variants}', "");
Expect(0, 65103, '\P{^	-IN small_Form	variants}', "");
Error('\p{_ TAITham/a/}');
Error('\P{_ TAITham/a/}');
Expect(1, 6750, '\p{taitham}', "");
Expect(0, 6750, '\p{^taitham}', "");
Expect(0, 6750, '\P{taitham}', "");
Expect(1, 6750, '\P{^taitham}', "");
Expect(0, 6687, '\p{taitham}', "");
Expect(1, 6687, '\p{^taitham}', "");
Expect(1, 6687, '\P{taitham}', "");
Expect(0, 6687, '\P{^taitham}', "");
Expect(1, 6750, '\p{_	Tai Tham}', "");
Expect(0, 6750, '\p{^_	Tai Tham}', "");
Expect(0, 6750, '\P{_	Tai Tham}', "");
Expect(1, 6750, '\P{^_	Tai Tham}', "");
Expect(0, 6687, '\p{_	Tai Tham}', "");
Expect(1, 6687, '\p{^_	Tai Tham}', "");
Expect(1, 6687, '\P{_	Tai Tham}', "");
Expect(0, 6687, '\P{^_	Tai Tham}', "");
Error('\p{ 	Is_tai tham/a/}');
Error('\P{ 	Is_tai tham/a/}');
Expect(1, 6750, '\p{istaitham}', "");
Expect(0, 6750, '\p{^istaitham}', "");
Expect(0, 6750, '\P{istaitham}', "");
Expect(1, 6750, '\P{^istaitham}', "");
Expect(0, 6687, '\p{istaitham}', "");
Expect(1, 6687, '\p{^istaitham}', "");
Expect(1, 6687, '\P{istaitham}', "");
Expect(0, 6687, '\P{^istaitham}', "");
Expect(1, 6750, '\p{	-is TAI	Tham}', "");
Expect(0, 6750, '\p{^	-is TAI	Tham}', "");
Expect(0, 6750, '\P{	-is TAI	Tham}', "");
Expect(1, 6750, '\P{^	-is TAI	Tham}', "");
Expect(0, 6687, '\p{	-is TAI	Tham}', "");
Expect(1, 6687, '\p{^	-is TAI	Tham}', "");
Expect(1, 6687, '\P{	-is TAI	Tham}', "");
Expect(0, 6687, '\P{^	-is TAI	Tham}', "");
Error('\p{	:=LANA}');
Error('\P{	:=LANA}');
Expect(1, 6750, '\p{lana}', "");
Expect(0, 6750, '\p{^lana}', "");
Expect(0, 6750, '\P{lana}', "");
Expect(1, 6750, '\P{^lana}', "");
Expect(0, 6687, '\p{lana}', "");
Expect(1, 6687, '\p{^lana}', "");
Expect(1, 6687, '\P{lana}', "");
Expect(0, 6687, '\P{^lana}', "");
Expect(1, 6750, '\p{	 Lana}', "");
Expect(0, 6750, '\p{^	 Lana}', "");
Expect(0, 6750, '\P{	 Lana}', "");
Expect(1, 6750, '\P{^	 Lana}', "");
Expect(0, 6687, '\p{	 Lana}', "");
Expect(1, 6687, '\p{^	 Lana}', "");
Expect(1, 6687, '\P{	 Lana}', "");
Expect(0, 6687, '\P{^	 Lana}', "");
Error('\p{/a/- is	Lana}');
Error('\P{/a/- is	Lana}');
Expect(1, 6750, '\p{islana}', "");
Expect(0, 6750, '\p{^islana}', "");
Expect(0, 6750, '\P{islana}', "");
Expect(1, 6750, '\P{^islana}', "");
Expect(0, 6687, '\p{islana}', "");
Expect(1, 6687, '\p{^islana}', "");
Expect(1, 6687, '\P{islana}', "");
Expect(0, 6687, '\P{^islana}', "");
Expect(1, 6750, '\p{		is	Lana}', "");
Expect(0, 6750, '\p{^		is	Lana}', "");
Expect(0, 6750, '\P{		is	Lana}', "");
Expect(1, 6750, '\P{^		is	Lana}', "");
Expect(0, 6687, '\p{		is	Lana}', "");
Expect(1, 6687, '\p{^		is	Lana}', "");
Expect(1, 6687, '\P{		is	Lana}', "");
Expect(0, 6687, '\P{^		is	Lana}', "");
Error('\p{:=__nko}');
Error('\P{:=__nko}');
Expect(1, 2042, '\p{nko}', "");
Expect(0, 2042, '\p{^nko}', "");
Expect(0, 2042, '\P{nko}', "");
Expect(1, 2042, '\P{^nko}', "");
Expect(0, 1983, '\p{nko}', "");
Expect(1, 1983, '\p{^nko}', "");
Expect(1, 1983, '\P{nko}', "");
Expect(0, 1983, '\P{^nko}', "");
Expect(1, 2042, '\p{ _Nko}', "");
Expect(0, 2042, '\p{^ _Nko}', "");
Expect(0, 2042, '\P{ _Nko}', "");
Expect(1, 2042, '\P{^ _Nko}', "");
Expect(0, 1983, '\p{ _Nko}', "");
Expect(1, 1983, '\p{^ _Nko}', "");
Expect(1, 1983, '\P{ _Nko}', "");
Expect(0, 1983, '\P{^ _Nko}', "");
Error('\p{-/a/Is_nko}');
Error('\P{-/a/Is_nko}');
Expect(1, 2042, '\p{isnko}', "");
Expect(0, 2042, '\p{^isnko}', "");
Expect(0, 2042, '\P{isnko}', "");
Expect(1, 2042, '\P{^isnko}', "");
Expect(0, 1983, '\p{isnko}', "");
Expect(1, 1983, '\p{^isnko}', "");
Expect(1, 1983, '\P{isnko}', "");
Expect(0, 1983, '\P{^isnko}', "");
Expect(1, 2042, '\p{-is-nko}', "");
Expect(0, 2042, '\p{^-is-nko}', "");
Expect(0, 2042, '\P{-is-nko}', "");
Expect(1, 2042, '\P{^-is-nko}', "");
Expect(0, 1983, '\p{-is-nko}', "");
Expect(1, 1983, '\p{^-is-nko}', "");
Expect(1, 1983, '\P{-is-nko}', "");
Expect(0, 1983, '\P{^-is-nko}', "");
Error('\p{/a/_Nkoo}');
Error('\P{/a/_Nkoo}');
Expect(1, 2042, '\p{nkoo}', "");
Expect(0, 2042, '\p{^nkoo}', "");
Expect(0, 2042, '\P{nkoo}', "");
Expect(1, 2042, '\P{^nkoo}', "");
Expect(0, 1983, '\p{nkoo}', "");
Expect(1, 1983, '\p{^nkoo}', "");
Expect(1, 1983, '\P{nkoo}', "");
Expect(0, 1983, '\P{^nkoo}', "");
Expect(1, 2042, '\p{_-nkoo}', "");
Expect(0, 2042, '\p{^_-nkoo}', "");
Expect(0, 2042, '\P{_-nkoo}', "");
Expect(1, 2042, '\P{^_-nkoo}', "");
Expect(0, 1983, '\p{_-nkoo}', "");
Expect(1, 1983, '\p{^_-nkoo}', "");
Expect(1, 1983, '\P{_-nkoo}', "");
Expect(0, 1983, '\P{^_-nkoo}', "");
Error('\p{-	IS_nkoo/a/}');
Error('\P{-	IS_nkoo/a/}');
Expect(1, 2042, '\p{isnkoo}', "");
Expect(0, 2042, '\p{^isnkoo}', "");
Expect(0, 2042, '\P{isnkoo}', "");
Expect(1, 2042, '\P{^isnkoo}', "");
Expect(0, 1983, '\p{isnkoo}', "");
Expect(1, 1983, '\p{^isnkoo}', "");
Expect(1, 1983, '\P{isnkoo}', "");
Expect(0, 1983, '\P{^isnkoo}', "");
Expect(1, 2042, '\p{-Is Nkoo}', "");
Expect(0, 2042, '\p{^-Is Nkoo}', "");
Expect(0, 2042, '\P{-Is Nkoo}', "");
Expect(1, 2042, '\P{^-Is Nkoo}', "");
Expect(0, 1983, '\p{-Is Nkoo}', "");
Expect(1, 1983, '\p{^-Is Nkoo}', "");
Expect(1, 1983, '\P{-Is Nkoo}', "");
Expect(0, 1983, '\P{^-Is Nkoo}', "");
Error('\p{-:=mathematical Alphanumeric_symbols}');
Error('\P{-:=mathematical Alphanumeric_symbols}');
Expect(1, 120831, '\p{mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(0, 120831, '\p{^_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(0, 120831, '\P{_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(1, 120831, '\P{^_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(0, 119807, '\p{_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(1, 119807, '\p{^_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(1, 119807, '\P{_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Expect(0, 119807, '\P{^_ mathematical	ALPHANUMERIC SYMBOLS}', "");
Error('\p{-Is/a/MATHEMATICAL Alphanumeric-Symbols}');
Error('\P{-Is/a/MATHEMATICAL Alphanumeric-Symbols}');
Expect(1, 120831, '\p{ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(0, 120831, '\p{^Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(0, 120831, '\P{Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(1, 120831, '\P{^Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(0, 119807, '\p{Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(1, 119807, '\p{^Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(1, 119807, '\P{Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Expect(0, 119807, '\P{^Is-MATHEMATICAL	ALPHANUMERIC-Symbols}', "");
Error('\p{:=_	In MATHEMATICAL_Alphanumeric	symbols}');
Error('\P{:=_	In MATHEMATICAL_Alphanumeric	symbols}');
Expect(1, 120831, '\p{inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(0, 120831, '\p{^_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(0, 120831, '\P{_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(1, 120831, '\P{^_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(0, 119807, '\p{_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(1, 119807, '\p{^_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(1, 119807, '\P{_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Expect(0, 119807, '\P{^_-in-MATHEMATICAL_Alphanumeric	Symbols}', "");
Error('\p{ lydian:=}');
Error('\P{ lydian:=}');
Expect(1, 67897, '\p{lydian}', "");
Expect(0, 67897, '\p{^lydian}', "");
Expect(0, 67897, '\P{lydian}', "");
Expect(1, 67897, '\P{^lydian}', "");
Expect(0, 67871, '\p{lydian}', "");
Expect(1, 67871, '\p{^lydian}', "");
Expect(1, 67871, '\P{lydian}', "");
Expect(0, 67871, '\P{^lydian}', "");
Expect(1, 67897, '\p{-_LYDIAN}', "");
Expect(0, 67897, '\p{^-_LYDIAN}', "");
Expect(0, 67897, '\P{-_LYDIAN}', "");
Expect(1, 67897, '\P{^-_LYDIAN}', "");
Expect(0, 67871, '\p{-_LYDIAN}', "");
Expect(1, 67871, '\p{^-_LYDIAN}', "");
Expect(1, 67871, '\P{-_LYDIAN}', "");
Expect(0, 67871, '\P{^-_LYDIAN}', "");
Error('\p{_:=IS_lydian}');
Error('\P{_:=IS_lydian}');
Expect(1, 67897, '\p{islydian}', "");
Expect(0, 67897, '\p{^islydian}', "");
Expect(0, 67897, '\P{islydian}', "");
Expect(1, 67897, '\P{^islydian}', "");
Expect(0, 67871, '\p{islydian}', "");
Expect(1, 67871, '\p{^islydian}', "");
Expect(1, 67871, '\P{islydian}', "");
Expect(0, 67871, '\P{^islydian}', "");
Expect(1, 67897, '\p{__IS	lydian}', "");
Expect(0, 67897, '\p{^__IS	lydian}', "");
Expect(0, 67897, '\P{__IS	lydian}', "");
Expect(1, 67897, '\P{^__IS	lydian}', "");
Expect(0, 67871, '\p{__IS	lydian}', "");
Expect(1, 67871, '\p{^__IS	lydian}', "");
Expect(1, 67871, '\P{__IS	lydian}', "");
Expect(0, 67871, '\P{^__IS	lydian}', "");
Error('\p{__LYDI/a/}');
Error('\P{__LYDI/a/}');
Expect(1, 67897, '\p{lydi}', "");
Expect(0, 67897, '\p{^lydi}', "");
Expect(0, 67897, '\P{lydi}', "");
Expect(1, 67897, '\P{^lydi}', "");
Expect(0, 67871, '\p{lydi}', "");
Expect(1, 67871, '\p{^lydi}', "");
Expect(1, 67871, '\P{lydi}', "");
Expect(0, 67871, '\P{^lydi}', "");
Expect(1, 67897, '\p{	LYDI}', "");
Expect(0, 67897, '\p{^	LYDI}', "");
Expect(0, 67897, '\P{	LYDI}', "");
Expect(1, 67897, '\P{^	LYDI}', "");
Expect(0, 67871, '\p{	LYDI}', "");
Expect(1, 67871, '\p{^	LYDI}', "");
Expect(1, 67871, '\P{	LYDI}', "");
Expect(0, 67871, '\P{^	LYDI}', "");
Error('\p{:=_ Is Lydi}');
Error('\P{:=_ Is Lydi}');
Expect(1, 67897, '\p{islydi}', "");
Expect(0, 67897, '\p{^islydi}', "");
Expect(0, 67897, '\P{islydi}', "");
Expect(1, 67897, '\P{^islydi}', "");
Expect(0, 67871, '\p{islydi}', "");
Expect(1, 67871, '\p{^islydi}', "");
Expect(1, 67871, '\P{islydi}', "");
Expect(0, 67871, '\P{^islydi}', "");
Expect(1, 67897, '\p{is-lydi}', "");
Expect(0, 67897, '\p{^is-lydi}', "");
Expect(0, 67897, '\P{is-lydi}', "");
Expect(1, 67897, '\P{^is-lydi}', "");
Expect(0, 67871, '\p{is-lydi}', "");
Expect(1, 67871, '\p{^is-lydi}', "");
Expect(1, 67871, '\P{is-lydi}', "");
Expect(0, 67871, '\P{^is-lydi}', "");
Error('\p{-	GeorgianSupplement:=}');
Error('\P{-	GeorgianSupplement:=}');
Expect(1, 11567, '\p{georgiansupplement}', "");
Expect(0, 11567, '\p{^georgiansupplement}', "");
Expect(0, 11567, '\P{georgiansupplement}', "");
Expect(1, 11567, '\P{^georgiansupplement}', "");
Expect(0, 11519, '\p{georgiansupplement}', "");
Expect(1, 11519, '\p{^georgiansupplement}', "");
Expect(1, 11519, '\P{georgiansupplement}', "");
Expect(0, 11519, '\P{^georgiansupplement}', "");
Expect(1, 11567, '\p{- GeorgianSupplement}', "");
Expect(0, 11567, '\p{^- GeorgianSupplement}', "");
Expect(0, 11567, '\P{- GeorgianSupplement}', "");
Expect(1, 11567, '\P{^- GeorgianSupplement}', "");
Expect(0, 11519, '\p{- GeorgianSupplement}', "");
Expect(1, 11519, '\p{^- GeorgianSupplement}', "");
Expect(1, 11519, '\P{- GeorgianSupplement}', "");
Expect(0, 11519, '\P{^- GeorgianSupplement}', "");
Error('\p{_:=IS_GEORGIAN	Supplement}');
Error('\P{_:=IS_GEORGIAN	Supplement}');
Expect(1, 11567, '\p{isgeorgiansupplement}', "");
Expect(0, 11567, '\p{^isgeorgiansupplement}', "");
Expect(0, 11567, '\P{isgeorgiansupplement}', "");
Expect(1, 11567, '\P{^isgeorgiansupplement}', "");
Expect(0, 11519, '\p{isgeorgiansupplement}', "");
Expect(1, 11519, '\p{^isgeorgiansupplement}', "");
Expect(1, 11519, '\P{isgeorgiansupplement}', "");
Expect(0, 11519, '\P{^isgeorgiansupplement}', "");
Expect(1, 11567, '\p{		IS	GeorgianSUPPLEMENT}', "");
Expect(0, 11567, '\p{^		IS	GeorgianSUPPLEMENT}', "");
Expect(0, 11567, '\P{		IS	GeorgianSUPPLEMENT}', "");
Expect(1, 11567, '\P{^		IS	GeorgianSUPPLEMENT}', "");
Expect(0, 11519, '\p{		IS	GeorgianSUPPLEMENT}', "");
Expect(1, 11519, '\p{^		IS	GeorgianSUPPLEMENT}', "");
Expect(1, 11519, '\P{		IS	GeorgianSUPPLEMENT}', "");
Expect(0, 11519, '\P{^		IS	GeorgianSUPPLEMENT}', "");
Error('\p{-	In/a/georgianSupplement}');
Error('\P{-	In/a/georgianSupplement}');
Expect(1, 11567, '\p{ingeorgiansupplement}', "");
Expect(0, 11567, '\p{^ingeorgiansupplement}', "");
Expect(0, 11567, '\P{ingeorgiansupplement}', "");
Expect(1, 11567, '\P{^ingeorgiansupplement}', "");
Expect(0, 11519, '\p{ingeorgiansupplement}', "");
Expect(1, 11519, '\p{^ingeorgiansupplement}', "");
Expect(1, 11519, '\P{ingeorgiansupplement}', "");
Expect(0, 11519, '\P{^ingeorgiansupplement}', "");
Expect(1, 11567, '\p{- IN GEORGIANSupplement}', "");
Expect(0, 11567, '\p{^- IN GEORGIANSupplement}', "");
Expect(0, 11567, '\P{- IN GEORGIANSupplement}', "");
Expect(1, 11567, '\P{^- IN GEORGIANSupplement}', "");
Expect(0, 11519, '\p{- IN GEORGIANSupplement}', "");
Expect(1, 11519, '\p{^- IN GEORGIANSupplement}', "");
Expect(1, 11519, '\P{- IN GEORGIANSupplement}', "");
Expect(0, 11519, '\P{^- IN GEORGIANSupplement}', "");
Error('\p{ :=Letter}');
Error('\P{ :=Letter}');
Expect(1, 90, '\p{letter}', "");
Expect(0, 90, '\p{^letter}', "");
Expect(0, 90, '\P{letter}', "");
Expect(1, 90, '\P{^letter}', "");
Expect(0, 64, '\p{letter}', "");
Expect(1, 64, '\p{^letter}', "");
Expect(1, 64, '\P{letter}', "");
Expect(0, 64, '\P{^letter}', "");
Expect(1, 90, '\p{__Letter}', "");
Expect(0, 90, '\p{^__Letter}', "");
Expect(0, 90, '\P{__Letter}', "");
Expect(1, 90, '\P{^__Letter}', "");
Expect(0, 64, '\p{__Letter}', "");
Expect(1, 64, '\p{^__Letter}', "");
Expect(1, 64, '\P{__Letter}', "");
Expect(0, 64, '\P{^__Letter}', "");
Error('\p{_Is Letter:=}');
Error('\P{_Is Letter:=}');
Expect(1, 90, '\p{isletter}', "");
Expect(0, 90, '\p{^isletter}', "");
Expect(0, 90, '\P{isletter}', "");
Expect(1, 90, '\P{^isletter}', "");
Expect(0, 64, '\p{isletter}', "");
Expect(1, 64, '\p{^isletter}', "");
Expect(1, 64, '\P{isletter}', "");
Expect(0, 64, '\P{^isletter}', "");
Expect(1, 90, '\p{	isLETTER}', "");
Expect(0, 90, '\p{^	isLETTER}', "");
Expect(0, 90, '\P{	isLETTER}', "");
Expect(1, 90, '\P{^	isLETTER}', "");
Expect(0, 64, '\p{	isLETTER}', "");
Expect(1, 64, '\p{^	isLETTER}', "");
Expect(1, 64, '\P{	isLETTER}', "");
Expect(0, 64, '\P{^	isLETTER}', "");
Error('\p{_-l/a/}');
Error('\P{_-l/a/}');
Expect(1, 90, '\p{l}', "");
Expect(0, 90, '\p{^l}', "");
Expect(0, 90, '\P{l}', "");
Expect(1, 90, '\P{^l}', "");
Expect(0, 64, '\p{l}', "");
Expect(1, 64, '\p{^l}', "");
Expect(1, 64, '\P{l}', "");
Expect(0, 64, '\P{^l}', "");
Expect(1, 90, '\p{L}', "");
Expect(0, 90, '\p{^L}', "");
Expect(0, 90, '\P{L}', "");
Expect(1, 90, '\P{^L}', "");
Expect(0, 64, '\p{L}', "");
Expect(1, 64, '\p{^L}', "");
Expect(1, 64, '\P{L}', "");
Expect(0, 64, '\P{^L}', "");
Error('\p{-_Is	L:=}');
Error('\P{-_Is	L:=}');
Expect(1, 90, '\p{isl}', "");
Expect(0, 90, '\p{^isl}', "");
Expect(0, 90, '\P{isl}', "");
Expect(1, 90, '\P{^isl}', "");
Expect(0, 64, '\p{isl}', "");
Expect(1, 64, '\p{^isl}', "");
Expect(1, 64, '\P{isl}', "");
Expect(0, 64, '\P{^isl}', "");
Expect(1, 90, '\p{_is L}', "");
Expect(0, 90, '\p{^_is L}', "");
Expect(0, 90, '\P{_is L}', "");
Expect(1, 90, '\P{^_is L}', "");
Expect(0, 64, '\p{_is L}', "");
Expect(1, 64, '\p{^_is L}', "");
Expect(1, 64, '\P{_is L}', "");
Expect(0, 64, '\P{^_is L}', "");
Error('\p{_	cyrillic-Extended/a/b}');
Error('\P{_	cyrillic-Extended/a/b}');
Expect(1, 42655, '\p{cyrillicextendedb}', "");
Expect(0, 42655, '\p{^cyrillicextendedb}', "");
Expect(0, 42655, '\P{cyrillicextendedb}', "");
Expect(1, 42655, '\P{^cyrillicextendedb}', "");
Expect(0, 42559, '\p{cyrillicextendedb}', "");
Expect(1, 42559, '\p{^cyrillicextendedb}', "");
Expect(1, 42559, '\P{cyrillicextendedb}', "");
Expect(0, 42559, '\P{^cyrillicextendedb}', "");
Expect(1, 42655, '\p{ _Cyrillic	extended	B}', "");
Expect(0, 42655, '\p{^ _Cyrillic	extended	B}', "");
Expect(0, 42655, '\P{ _Cyrillic	extended	B}', "");
Expect(1, 42655, '\P{^ _Cyrillic	extended	B}', "");
Expect(0, 42559, '\p{ _Cyrillic	extended	B}', "");
Expect(1, 42559, '\p{^ _Cyrillic	extended	B}', "");
Expect(1, 42559, '\P{ _Cyrillic	extended	B}', "");
Expect(0, 42559, '\P{^ _Cyrillic	extended	B}', "");
Error('\p{_:=Is_CYRILLIC extended_B}');
Error('\P{_:=Is_CYRILLIC extended_B}');
Expect(1, 42655, '\p{iscyrillicextendedb}', "");
Expect(0, 42655, '\p{^iscyrillicextendedb}', "");
Expect(0, 42655, '\P{iscyrillicextendedb}', "");
Expect(1, 42655, '\P{^iscyrillicextendedb}', "");
Expect(0, 42559, '\p{iscyrillicextendedb}', "");
Expect(1, 42559, '\p{^iscyrillicextendedb}', "");
Expect(1, 42559, '\P{iscyrillicextendedb}', "");
Expect(0, 42559, '\P{^iscyrillicextendedb}', "");
Expect(1, 42655, '\p{	-Is-Cyrillic Extended-B}', "");
Expect(0, 42655, '\p{^	-Is-Cyrillic Extended-B}', "");
Expect(0, 42655, '\P{	-Is-Cyrillic Extended-B}', "");
Expect(1, 42655, '\P{^	-Is-Cyrillic Extended-B}', "");
Expect(0, 42559, '\p{	-Is-Cyrillic Extended-B}', "");
Expect(1, 42559, '\p{^	-Is-Cyrillic Extended-B}', "");
Expect(1, 42559, '\P{	-Is-Cyrillic Extended-B}', "");
Expect(0, 42559, '\P{^	-Is-Cyrillic Extended-B}', "");
Error('\p{ :=inCYRILLIC	extended-B}');
Error('\P{ :=inCYRILLIC	extended-B}');
Expect(1, 42655, '\p{incyrillicextendedb}', "");
Expect(0, 42655, '\p{^incyrillicextendedb}', "");
Expect(0, 42655, '\P{incyrillicextendedb}', "");
Expect(1, 42655, '\P{^incyrillicextendedb}', "");
Expect(0, 42559, '\p{incyrillicextendedb}', "");
Expect(1, 42559, '\p{^incyrillicextendedb}', "");
Expect(1, 42559, '\P{incyrillicextendedb}', "");
Expect(0, 42559, '\P{^incyrillicextendedb}', "");
Expect(1, 42655, '\p{-	InCyrillic_EXTENDED	B}', "");
Expect(0, 42655, '\p{^-	InCyrillic_EXTENDED	B}', "");
Expect(0, 42655, '\P{-	InCyrillic_EXTENDED	B}', "");
Expect(1, 42655, '\P{^-	InCyrillic_EXTENDED	B}', "");
Expect(0, 42559, '\p{-	InCyrillic_EXTENDED	B}', "");
Expect(1, 42559, '\p{^-	InCyrillic_EXTENDED	B}', "");
Expect(1, 42559, '\P{-	InCyrillic_EXTENDED	B}', "");
Expect(0, 42559, '\P{^-	InCyrillic_EXTENDED	B}', "");
Error('\p{_:=Hebrew}');
Error('\P{_:=Hebrew}');
Expect(1, 1479, '\p{hebrew}', "");
Expect(0, 1479, '\p{^hebrew}', "");
Expect(0, 1479, '\P{hebrew}', "");
Expect(1, 1479, '\P{^hebrew}', "");
Expect(0, 1424, '\p{hebrew}', "");
Expect(1, 1424, '\p{^hebrew}', "");
Expect(1, 1424, '\P{hebrew}', "");
Expect(0, 1424, '\P{^hebrew}', "");
Expect(1, 1479, '\p{ -hebrew}', "");
Expect(0, 1479, '\p{^ -hebrew}', "");
Expect(0, 1479, '\P{ -hebrew}', "");
Expect(1, 1479, '\P{^ -hebrew}', "");
Expect(0, 1424, '\p{ -hebrew}', "");
Expect(1, 1424, '\p{^ -hebrew}', "");
Expect(1, 1424, '\P{ -hebrew}', "");
Expect(0, 1424, '\P{^ -hebrew}', "");
Error('\p{/a/-IS Hebrew}');
Error('\P{/a/-IS Hebrew}');
Expect(1, 1479, '\p{ishebrew}', "");
Expect(0, 1479, '\p{^ishebrew}', "");
Expect(0, 1479, '\P{ishebrew}', "");
Expect(1, 1479, '\P{^ishebrew}', "");
Expect(0, 1424, '\p{ishebrew}', "");
Expect(1, 1424, '\p{^ishebrew}', "");
Expect(1, 1424, '\P{ishebrew}', "");
Expect(0, 1424, '\P{^ishebrew}', "");
Expect(1, 1479, '\p{_Is hebrew}', "");
Expect(0, 1479, '\p{^_Is hebrew}', "");
Expect(0, 1479, '\P{_Is hebrew}', "");
Expect(1, 1479, '\P{^_Is hebrew}', "");
Expect(0, 1424, '\p{_Is hebrew}', "");
Expect(1, 1424, '\p{^_Is hebrew}', "");
Expect(1, 1424, '\P{_Is hebrew}', "");
Expect(0, 1424, '\P{^_Is hebrew}', "");
Error('\p{	_Hebr/a/}');
Error('\P{	_Hebr/a/}');
Expect(1, 1479, '\p{hebr}', "");
Expect(0, 1479, '\p{^hebr}', "");
Expect(0, 1479, '\P{hebr}', "");
Expect(1, 1479, '\P{^hebr}', "");
Expect(0, 1424, '\p{hebr}', "");
Expect(1, 1424, '\p{^hebr}', "");
Expect(1, 1424, '\P{hebr}', "");
Expect(0, 1424, '\P{^hebr}', "");
Expect(1, 1479, '\p{	-HEBR}', "");
Expect(0, 1479, '\p{^	-HEBR}', "");
Expect(0, 1479, '\P{	-HEBR}', "");
Expect(1, 1479, '\P{^	-HEBR}', "");
Expect(0, 1424, '\p{	-HEBR}', "");
Expect(1, 1424, '\p{^	-HEBR}', "");
Expect(1, 1424, '\P{	-HEBR}', "");
Expect(0, 1424, '\P{^	-HEBR}', "");
Error('\p{:=__IShebr}');
Error('\P{:=__IShebr}');
Expect(1, 1479, '\p{ishebr}', "");
Expect(0, 1479, '\p{^ishebr}', "");
Expect(0, 1479, '\P{ishebr}', "");
Expect(1, 1479, '\P{^ishebr}', "");
Expect(0, 1424, '\p{ishebr}', "");
Expect(1, 1424, '\p{^ishebr}', "");
Expect(1, 1424, '\P{ishebr}', "");
Expect(0, 1424, '\P{^ishebr}', "");
Expect(1, 1479, '\p{_isHEBR}', "");
Expect(0, 1479, '\p{^_isHEBR}', "");
Expect(0, 1479, '\P{_isHEBR}', "");
Expect(1, 1479, '\P{^_isHEBR}', "");
Expect(0, 1424, '\p{_isHEBR}', "");
Expect(1, 1424, '\p{^_isHEBR}', "");
Expect(1, 1424, '\P{_isHEBR}', "");
Expect(0, 1424, '\P{^_isHEBR}', "");
Error('\p{-_In	Hiragana:=}');
Error('\P{-_In	Hiragana:=}');
Expect(1, 12447, '\p{inhiragana}', "");
Expect(0, 12447, '\p{^inhiragana}', "");
Expect(0, 12447, '\P{inhiragana}', "");
Expect(1, 12447, '\P{^inhiragana}', "");
Expect(0, 12351, '\p{inhiragana}', "");
Expect(1, 12351, '\p{^inhiragana}', "");
Expect(1, 12351, '\P{inhiragana}', "");
Expect(0, 12351, '\P{^inhiragana}', "");
Expect(1, 12447, '\p{_	In hiragana}', "");
Expect(0, 12447, '\p{^_	In hiragana}', "");
Expect(0, 12447, '\P{_	In hiragana}', "");
Expect(1, 12447, '\P{^_	In hiragana}', "");
Expect(0, 12351, '\p{_	In hiragana}', "");
Expect(1, 12351, '\p{^_	In hiragana}', "");
Expect(1, 12351, '\P{_	In hiragana}', "");
Expect(0, 12351, '\P{^_	In hiragana}', "");
Error('\p{_-Latin:=}');
Error('\P{_-Latin:=}');
Expect(1, 90, '\p{latin}', "");
Expect(0, 90, '\p{^latin}', "");
Expect(0, 90, '\P{latin}', "");
Expect(1, 90, '\P{^latin}', "");
Expect(0, 64, '\p{latin}', "");
Expect(1, 64, '\p{^latin}', "");
Expect(1, 64, '\P{latin}', "");
Expect(0, 64, '\P{^latin}', "");
Expect(1, 90, '\p{_latin}', "");
Expect(0, 90, '\p{^_latin}', "");
Expect(0, 90, '\P{_latin}', "");
Expect(1, 90, '\P{^_latin}', "");
Expect(0, 64, '\p{_latin}', "");
Expect(1, 64, '\p{^_latin}', "");
Expect(1, 64, '\P{_latin}', "");
Expect(0, 64, '\P{^_latin}', "");
Error('\p{	-IS:=Latin}');
Error('\P{	-IS:=Latin}');
Expect(1, 90, '\p{islatin}', "");
Expect(0, 90, '\p{^islatin}', "");
Expect(0, 90, '\P{islatin}', "");
Expect(1, 90, '\P{^islatin}', "");
Expect(0, 64, '\p{islatin}', "");
Expect(1, 64, '\p{^islatin}', "");
Expect(1, 64, '\P{islatin}', "");
Expect(0, 64, '\P{^islatin}', "");
Expect(1, 90, '\p{ Is-latin}', "");
Expect(0, 90, '\p{^ Is-latin}', "");
Expect(0, 90, '\P{ Is-latin}', "");
Expect(1, 90, '\P{^ Is-latin}', "");
Expect(0, 64, '\p{ Is-latin}', "");
Expect(1, 64, '\p{^ Is-latin}', "");
Expect(1, 64, '\P{ Is-latin}', "");
Expect(0, 64, '\P{^ Is-latin}', "");
Error('\p{	:=Latn}');
Error('\P{	:=Latn}');
Expect(1, 90, '\p{latn}', "");
Expect(0, 90, '\p{^latn}', "");
Expect(0, 90, '\P{latn}', "");
Expect(1, 90, '\P{^latn}', "");
Expect(0, 64, '\p{latn}', "");
Expect(1, 64, '\p{^latn}', "");
Expect(1, 64, '\P{latn}', "");
Expect(0, 64, '\P{^latn}', "");
Expect(1, 90, '\p{ -latn}', "");
Expect(0, 90, '\p{^ -latn}', "");
Expect(0, 90, '\P{ -latn}', "");
Expect(1, 90, '\P{^ -latn}', "");
Expect(0, 64, '\p{ -latn}', "");
Expect(1, 64, '\p{^ -latn}', "");
Expect(1, 64, '\P{ -latn}', "");
Expect(0, 64, '\P{^ -latn}', "");
Error('\p{	-Is-LATN/a/}');
Error('\P{	-Is-LATN/a/}');
Expect(1, 90, '\p{islatn}', "");
Expect(0, 90, '\p{^islatn}', "");
Expect(0, 90, '\P{islatn}', "");
Expect(1, 90, '\P{^islatn}', "");
Expect(0, 64, '\p{islatn}', "");
Expect(1, 64, '\p{^islatn}', "");
Expect(1, 64, '\P{islatn}', "");
Expect(0, 64, '\P{^islatn}', "");
Expect(1, 90, '\p{Is	LATN}', "");
Expect(0, 90, '\p{^Is	LATN}', "");
Expect(0, 90, '\P{Is	LATN}', "");
Expect(1, 90, '\P{^Is	LATN}', "");
Expect(0, 64, '\p{Is	LATN}', "");
Expect(1, 64, '\p{^Is	LATN}', "");
Expect(1, 64, '\P{Is	LATN}', "");
Expect(0, 64, '\P{^Is	LATN}', "");
Error('\p{-_enclosing:=MARK}');
Error('\P{-_enclosing:=MARK}');
Expect(1, 1161, '\p{enclosingmark}', "");
Expect(0, 1161, '\p{^enclosingmark}', "");
Expect(0, 1161, '\P{enclosingmark}', "");
Expect(1, 1161, '\P{^enclosingmark}', "");
Expect(0, 1159, '\p{enclosingmark}', "");
Expect(1, 1159, '\p{^enclosingmark}', "");
Expect(1, 1159, '\P{enclosingmark}', "");
Expect(0, 1159, '\P{^enclosingmark}', "");
Expect(1, 1161, '\p{__ENCLOSINGMark}', "");
Expect(0, 1161, '\p{^__ENCLOSINGMark}', "");
Expect(0, 1161, '\P{__ENCLOSINGMark}', "");
Expect(1, 1161, '\P{^__ENCLOSINGMark}', "");
Expect(0, 1159, '\p{__ENCLOSINGMark}', "");
Expect(1, 1159, '\p{^__ENCLOSINGMark}', "");
Expect(1, 1159, '\P{__ENCLOSINGMark}', "");
Expect(0, 1159, '\P{^__ENCLOSINGMark}', "");
Error('\p{__IsEnclosing MARK/a/}');
Error('\P{__IsEnclosing MARK/a/}');
Expect(1, 1161, '\p{isenclosingmark}', "");
Expect(0, 1161, '\p{^isenclosingmark}', "");
Expect(0, 1161, '\P{isenclosingmark}', "");
Expect(1, 1161, '\P{^isenclosingmark}', "");
Expect(0, 1159, '\p{isenclosingmark}', "");
Expect(1, 1159, '\p{^isenclosingmark}', "");
Expect(1, 1159, '\P{isenclosingmark}', "");
Expect(0, 1159, '\P{^isenclosingmark}', "");
Expect(1, 1161, '\p{	_Isenclosing-Mark}', "");
Expect(0, 1161, '\p{^	_Isenclosing-Mark}', "");
Expect(0, 1161, '\P{	_Isenclosing-Mark}', "");
Expect(1, 1161, '\P{^	_Isenclosing-Mark}', "");
Expect(0, 1159, '\p{	_Isenclosing-Mark}', "");
Expect(1, 1159, '\p{^	_Isenclosing-Mark}', "");
Expect(1, 1159, '\P{	_Isenclosing-Mark}', "");
Expect(0, 1159, '\P{^	_Isenclosing-Mark}', "");
Error('\p{:=	-me}');
Error('\P{:=	-me}');
Expect(1, 1161, '\p{me}', "");
Expect(0, 1161, '\p{^me}', "");
Expect(0, 1161, '\P{me}', "");
Expect(1, 1161, '\P{^me}', "");
Expect(0, 1159, '\p{me}', "");
Expect(1, 1159, '\p{^me}', "");
Expect(1, 1159, '\P{me}', "");
Expect(0, 1159, '\P{^me}', "");
Expect(1, 1161, '\p{	Me}', "");
Expect(0, 1161, '\p{^	Me}', "");
Expect(0, 1161, '\P{	Me}', "");
Expect(1, 1161, '\P{^	Me}', "");
Expect(0, 1159, '\p{	Me}', "");
Expect(1, 1159, '\p{^	Me}', "");
Expect(1, 1159, '\P{	Me}', "");
Expect(0, 1159, '\P{^	Me}', "");
Error('\p{	/a/ISme}');
Error('\P{	/a/ISme}');
Expect(1, 1161, '\p{isme}', "");
Expect(0, 1161, '\p{^isme}', "");
Expect(0, 1161, '\P{isme}', "");
Expect(1, 1161, '\P{^isme}', "");
Expect(0, 1159, '\p{isme}', "");
Expect(1, 1159, '\p{^isme}', "");
Expect(1, 1159, '\P{isme}', "");
Expect(0, 1159, '\P{^isme}', "");
Expect(1, 1161, '\p{ IsMe}', "");
Expect(0, 1161, '\p{^ IsMe}', "");
Expect(0, 1161, '\P{ IsMe}', "");
Expect(1, 1161, '\P{^ IsMe}', "");
Expect(0, 1159, '\p{ IsMe}', "");
Expect(1, 1159, '\p{^ IsMe}', "");
Expect(1, 1159, '\P{ IsMe}', "");
Expect(0, 1159, '\P{^ IsMe}', "");
Error('\p{/a/	_Format}');
Error('\P{/a/	_Format}');
Expect(1, 173, '\p{format}', "");
Expect(0, 173, '\p{^format}', "");
Expect(0, 173, '\P{format}', "");
Expect(1, 173, '\P{^format}', "");
Expect(0, 172, '\p{format}', "");
Expect(1, 172, '\p{^format}', "");
Expect(1, 172, '\P{format}', "");
Expect(0, 172, '\P{^format}', "");
Expect(1, 173, '\p{ -format}', "");
Expect(0, 173, '\p{^ -format}', "");
Expect(0, 173, '\P{ -format}', "");
Expect(1, 173, '\P{^ -format}', "");
Expect(0, 172, '\p{ -format}', "");
Expect(1, 172, '\p{^ -format}', "");
Expect(1, 172, '\P{ -format}', "");
Expect(0, 172, '\P{^ -format}', "");
Error('\p{_/a/Is_FORMAT}');
Error('\P{_/a/Is_FORMAT}');
Expect(1, 173, '\p{isformat}', "");
Expect(0, 173, '\p{^isformat}', "");
Expect(0, 173, '\P{isformat}', "");
Expect(1, 173, '\P{^isformat}', "");
Expect(0, 172, '\p{isformat}', "");
Expect(1, 172, '\p{^isformat}', "");
Expect(1, 172, '\P{isformat}', "");
Expect(0, 172, '\P{^isformat}', "");
Expect(1, 173, '\p{ _Is_FORMAT}', "");
Expect(0, 173, '\p{^ _Is_FORMAT}', "");
Expect(0, 173, '\P{ _Is_FORMAT}', "");
Expect(1, 173, '\P{^ _Is_FORMAT}', "");
Expect(0, 172, '\p{ _Is_FORMAT}', "");
Expect(1, 172, '\p{^ _Is_FORMAT}', "");
Expect(1, 172, '\P{ _Is_FORMAT}', "");
Expect(0, 172, '\P{^ _Is_FORMAT}', "");
Error('\p{:=	 cf}');
Error('\P{:=	 cf}');
Expect(1, 173, '\p{cf}', "");
Expect(0, 173, '\p{^cf}', "");
Expect(0, 173, '\P{cf}', "");
Expect(1, 173, '\P{^cf}', "");
Expect(0, 172, '\p{cf}', "");
Expect(1, 172, '\p{^cf}', "");
Expect(1, 172, '\P{cf}', "");
Expect(0, 172, '\P{^cf}', "");
Expect(1, 173, '\p{_Cf}', "");
Expect(0, 173, '\p{^_Cf}', "");
Expect(0, 173, '\P{_Cf}', "");
Expect(1, 173, '\P{^_Cf}', "");
Expect(0, 172, '\p{_Cf}', "");
Expect(1, 172, '\p{^_Cf}', "");
Expect(1, 172, '\P{_Cf}', "");
Expect(0, 172, '\P{^_Cf}', "");
Error('\p{	IS-Cf/a/}');
Error('\P{	IS-Cf/a/}');
Expect(1, 173, '\p{iscf}', "");
Expect(0, 173, '\p{^iscf}', "");
Expect(0, 173, '\P{iscf}', "");
Expect(1, 173, '\P{^iscf}', "");
Expect(0, 172, '\p{iscf}', "");
Expect(1, 172, '\p{^iscf}', "");
Expect(1, 172, '\P{iscf}', "");
Expect(0, 172, '\P{^iscf}', "");
Expect(1, 173, '\p{_isCf}', "");
Expect(0, 173, '\p{^_isCf}', "");
Expect(0, 173, '\P{_isCf}', "");
Expect(1, 173, '\P{^_isCf}', "");
Expect(0, 172, '\p{_isCf}', "");
Expect(1, 172, '\p{^_isCf}', "");
Expect(1, 172, '\P{_isCf}', "");
Expect(0, 172, '\P{^_isCf}', "");
Error('\p{--OTHER/a/Number}');
Error('\P{--OTHER/a/Number}');
Expect(1, 179, '\p{othernumber}', "");
Expect(0, 179, '\p{^othernumber}', "");
Expect(0, 179, '\P{othernumber}', "");
Expect(1, 179, '\P{^othernumber}', "");
Expect(0, 177, '\p{othernumber}', "");
Expect(1, 177, '\p{^othernumber}', "");
Expect(1, 177, '\P{othernumber}', "");
Expect(0, 177, '\P{^othernumber}', "");
Expect(1, 179, '\p{-	other-Number}', "");
Expect(0, 179, '\p{^-	other-Number}', "");
Expect(0, 179, '\P{-	other-Number}', "");
Expect(1, 179, '\P{^-	other-Number}', "");
Expect(0, 177, '\p{-	other-Number}', "");
Expect(1, 177, '\p{^-	other-Number}', "");
Expect(1, 177, '\P{-	other-Number}', "");
Expect(0, 177, '\P{^-	other-Number}', "");
Error('\p{:=_IS_other	NUMBER}');
Error('\P{:=_IS_other	NUMBER}');
Expect(1, 179, '\p{isothernumber}', "");
Expect(0, 179, '\p{^isothernumber}', "");
Expect(0, 179, '\P{isothernumber}', "");
Expect(1, 179, '\P{^isothernumber}', "");
Expect(0, 177, '\p{isothernumber}', "");
Expect(1, 177, '\p{^isothernumber}', "");
Expect(1, 177, '\P{isothernumber}', "");
Expect(0, 177, '\P{^isothernumber}', "");
Expect(1, 179, '\p{ 	IS_Other-Number}', "");
Expect(0, 179, '\p{^ 	IS_Other-Number}', "");
Expect(0, 179, '\P{ 	IS_Other-Number}', "");
Expect(1, 179, '\P{^ 	IS_Other-Number}', "");
Expect(0, 177, '\p{ 	IS_Other-Number}', "");
Expect(1, 177, '\p{^ 	IS_Other-Number}', "");
Expect(1, 177, '\P{ 	IS_Other-Number}', "");
Expect(0, 177, '\P{^ 	IS_Other-Number}', "");
Error('\p{_ No/a/}');
Error('\P{_ No/a/}');
Expect(1, 179, '\p{no}', "");
Expect(0, 179, '\p{^no}', "");
Expect(0, 179, '\P{no}', "");
Expect(1, 179, '\P{^no}', "");
Expect(0, 177, '\p{no}', "");
Expect(1, 177, '\p{^no}', "");
Expect(1, 177, '\P{no}', "");
Expect(0, 177, '\P{^no}', "");
Expect(1, 179, '\p{--no}', "");
Expect(0, 179, '\p{^--no}', "");
Expect(0, 179, '\P{--no}', "");
Expect(1, 179, '\P{^--no}', "");
Expect(0, 177, '\p{--no}', "");
Expect(1, 177, '\p{^--no}', "");
Expect(1, 177, '\P{--no}', "");
Expect(0, 177, '\P{^--no}', "");
Error('\p{ Is_No/a/}');
Error('\P{ Is_No/a/}');
Expect(1, 179, '\p{isno}', "");
Expect(0, 179, '\p{^isno}', "");
Expect(0, 179, '\P{isno}', "");
Expect(1, 179, '\P{^isno}', "");
Expect(0, 177, '\p{isno}', "");
Expect(1, 177, '\p{^isno}', "");
Expect(1, 177, '\P{isno}', "");
Expect(0, 177, '\P{^isno}', "");
Expect(1, 179, '\p{- Isno}', "");
Expect(0, 179, '\p{^- Isno}', "");
Expect(0, 179, '\P{- Isno}', "");
Expect(1, 179, '\P{^- Isno}', "");
Expect(0, 177, '\p{- Isno}', "");
Expect(1, 177, '\p{^- Isno}', "");
Expect(1, 177, '\P{- Isno}', "");
Expect(0, 177, '\P{^- Isno}', "");
Error('\p{_:=Latin	1_supplement}');
Error('\P{_:=Latin	1_supplement}');
Expect(1, 255, '\p{latin1supplement}', "");
Expect(0, 255, '\p{^latin1supplement}', "");
Expect(0, 255, '\P{latin1supplement}', "");
Expect(1, 255, '\P{^latin1supplement}', "");
Expect(0, 127, '\p{latin1supplement}', "");
Expect(1, 127, '\p{^latin1supplement}', "");
Expect(1, 127, '\P{latin1supplement}', "");
Expect(0, 127, '\P{^latin1supplement}', "");
Expect(1, 255, '\p{__Latin	1 supplement}', "");
Expect(0, 255, '\p{^__Latin	1 supplement}', "");
Expect(0, 255, '\P{__Latin	1 supplement}', "");
Expect(1, 255, '\P{^__Latin	1 supplement}', "");
Expect(0, 127, '\p{__Latin	1 supplement}', "");
Expect(1, 127, '\p{^__Latin	1 supplement}', "");
Expect(1, 127, '\P{__Latin	1 supplement}', "");
Expect(0, 127, '\P{^__Latin	1 supplement}', "");
Error('\p{:=Is	latin 1	Supplement}');
Error('\P{:=Is	latin 1	Supplement}');
Expect(1, 255, '\p{islatin1supplement}', "");
Expect(0, 255, '\p{^islatin1supplement}', "");
Expect(0, 255, '\P{islatin1supplement}', "");
Expect(1, 255, '\P{^islatin1supplement}', "");
Expect(0, 127, '\p{islatin1supplement}', "");
Expect(1, 127, '\p{^islatin1supplement}', "");
Expect(1, 127, '\P{islatin1supplement}', "");
Expect(0, 127, '\P{^islatin1supplement}', "");
Expect(1, 255, '\p{ 	is-LATIN 1_Supplement}', "");
Expect(0, 255, '\p{^ 	is-LATIN 1_Supplement}', "");
Expect(0, 255, '\P{ 	is-LATIN 1_Supplement}', "");
Expect(1, 255, '\P{^ 	is-LATIN 1_Supplement}', "");
Expect(0, 127, '\p{ 	is-LATIN 1_Supplement}', "");
Expect(1, 127, '\p{^ 	is-LATIN 1_Supplement}', "");
Expect(1, 127, '\P{ 	is-LATIN 1_Supplement}', "");
Expect(0, 127, '\P{^ 	is-LATIN 1_Supplement}', "");
Error('\p{_In LATIN/a/1_SUPPLEMENT}');
Error('\P{_In LATIN/a/1_SUPPLEMENT}');
Expect(1, 255, '\p{inlatin1supplement}', "");
Expect(0, 255, '\p{^inlatin1supplement}', "");
Expect(0, 255, '\P{inlatin1supplement}', "");
Expect(1, 255, '\P{^inlatin1supplement}', "");
Expect(0, 127, '\p{inlatin1supplement}', "");
Expect(1, 127, '\p{^inlatin1supplement}', "");
Expect(1, 127, '\P{inlatin1supplement}', "");
Expect(0, 127, '\P{^inlatin1supplement}', "");
Expect(1, 255, '\p{_	In-latin_1supplement}', "");
Expect(0, 255, '\p{^_	In-latin_1supplement}', "");
Expect(0, 255, '\P{_	In-latin_1supplement}', "");
Expect(1, 255, '\P{^_	In-latin_1supplement}', "");
Expect(0, 127, '\p{_	In-latin_1supplement}', "");
Expect(1, 127, '\p{^_	In-latin_1supplement}', "");
Expect(1, 127, '\P{_	In-latin_1supplement}', "");
Expect(0, 127, '\P{^_	In-latin_1supplement}', "");
Error('\p{/a/Latin	1}');
Error('\P{/a/Latin	1}');
Expect(1, 255, '\p{latin1}', "");
Expect(0, 255, '\p{^latin1}', "");
Expect(0, 255, '\P{latin1}', "");
Expect(1, 255, '\P{^latin1}', "");
Expect(0, 127, '\p{latin1}', "");
Expect(1, 127, '\p{^latin1}', "");
Expect(1, 127, '\P{latin1}', "");
Expect(0, 127, '\P{^latin1}', "");
Expect(1, 255, '\p{ latin-1}', "");
Expect(0, 255, '\p{^ latin-1}', "");
Expect(0, 255, '\P{ latin-1}', "");
Expect(1, 255, '\P{^ latin-1}', "");
Expect(0, 127, '\p{ latin-1}', "");
Expect(1, 127, '\p{^ latin-1}', "");
Expect(1, 127, '\P{ latin-1}', "");
Expect(0, 127, '\P{^ latin-1}', "");
Error('\p{	/a/is-Latin1}');
Error('\P{	/a/is-Latin1}');
Expect(1, 255, '\p{islatin1}', "");
Expect(0, 255, '\p{^islatin1}', "");
Expect(0, 255, '\P{islatin1}', "");
Expect(1, 255, '\P{^islatin1}', "");
Expect(0, 127, '\p{islatin1}', "");
Expect(1, 127, '\p{^islatin1}', "");
Expect(1, 127, '\P{islatin1}', "");
Expect(0, 127, '\P{^islatin1}', "");
Expect(1, 255, '\p{	_is-Latin_1}', "");
Expect(0, 255, '\p{^	_is-Latin_1}', "");
Expect(0, 255, '\P{	_is-Latin_1}', "");
Expect(1, 255, '\P{^	_is-Latin_1}', "");
Expect(0, 127, '\p{	_is-Latin_1}', "");
Expect(1, 127, '\p{^	_is-Latin_1}', "");
Expect(1, 127, '\P{	_is-Latin_1}', "");
Expect(0, 127, '\P{^	_is-Latin_1}', "");
Error('\p{/a/	In_latin 1}');
Error('\P{/a/	In_latin 1}');
Expect(1, 255, '\p{inlatin1}', "");
Expect(0, 255, '\p{^inlatin1}', "");
Expect(0, 255, '\P{inlatin1}', "");
Expect(1, 255, '\P{^inlatin1}', "");
Expect(0, 127, '\p{inlatin1}', "");
Expect(1, 127, '\p{^inlatin1}', "");
Expect(1, 127, '\P{inlatin1}', "");
Expect(0, 127, '\P{^inlatin1}', "");
Expect(1, 255, '\p{_ in_LATIN 1}', "");
Expect(0, 255, '\p{^_ in_LATIN 1}', "");
Expect(0, 255, '\P{_ in_LATIN 1}', "");
Expect(1, 255, '\P{^_ in_LATIN 1}', "");
Expect(0, 127, '\p{_ in_LATIN 1}', "");
Expect(1, 127, '\p{^_ in_LATIN 1}', "");
Expect(1, 127, '\P{_ in_LATIN 1}', "");
Expect(0, 127, '\P{^_ in_LATIN 1}', "");
Error('\p{_Tamil/a/}');
Error('\P{_Tamil/a/}');
Expect(1, 2947, '\p{tamil}', "");
Expect(0, 2947, '\p{^tamil}', "");
Expect(0, 2947, '\P{tamil}', "");
Expect(1, 2947, '\P{^tamil}', "");
Expect(0, 2945, '\p{tamil}', "");
Expect(1, 2945, '\p{^tamil}', "");
Expect(1, 2945, '\P{tamil}', "");
Expect(0, 2945, '\P{^tamil}', "");
Expect(1, 2947, '\p{_	Tamil}', "");
Expect(0, 2947, '\p{^_	Tamil}', "");
Expect(0, 2947, '\P{_	Tamil}', "");
Expect(1, 2947, '\P{^_	Tamil}', "");
Expect(0, 2945, '\p{_	Tamil}', "");
Expect(1, 2945, '\p{^_	Tamil}', "");
Expect(1, 2945, '\P{_	Tamil}', "");
Expect(0, 2945, '\P{^_	Tamil}', "");
Error('\p{		is_TAMIL:=}');
Error('\P{		is_TAMIL:=}');
Expect(1, 2947, '\p{istamil}', "");
Expect(0, 2947, '\p{^istamil}', "");
Expect(0, 2947, '\P{istamil}', "");
Expect(1, 2947, '\P{^istamil}', "");
Expect(0, 2945, '\p{istamil}', "");
Expect(1, 2945, '\p{^istamil}', "");
Expect(1, 2945, '\P{istamil}', "");
Expect(0, 2945, '\P{^istamil}', "");
Expect(1, 2947, '\p{	ISTAMIL}', "");
Expect(0, 2947, '\p{^	ISTAMIL}', "");
Expect(0, 2947, '\P{	ISTAMIL}', "");
Expect(1, 2947, '\P{^	ISTAMIL}', "");
Expect(0, 2945, '\p{	ISTAMIL}', "");
Expect(1, 2945, '\p{^	ISTAMIL}', "");
Expect(1, 2945, '\P{	ISTAMIL}', "");
Expect(0, 2945, '\P{^	ISTAMIL}', "");
Error('\p{/a/ taml}');
Error('\P{/a/ taml}');
Expect(1, 2947, '\p{taml}', "");
Expect(0, 2947, '\p{^taml}', "");
Expect(0, 2947, '\P{taml}', "");
Expect(1, 2947, '\P{^taml}', "");
Expect(0, 2945, '\p{taml}', "");
Expect(1, 2945, '\p{^taml}', "");
Expect(1, 2945, '\P{taml}', "");
Expect(0, 2945, '\P{^taml}', "");
Expect(1, 2947, '\p{  TAML}', "");
Expect(0, 2947, '\p{^  TAML}', "");
Expect(0, 2947, '\P{  TAML}', "");
Expect(1, 2947, '\P{^  TAML}', "");
Expect(0, 2945, '\p{  TAML}', "");
Expect(1, 2945, '\p{^  TAML}', "");
Expect(1, 2945, '\P{  TAML}', "");
Expect(0, 2945, '\P{^  TAML}', "");
Error('\p{-IsTAML/a/}');
Error('\P{-IsTAML/a/}');
Expect(1, 2947, '\p{istaml}', "");
Expect(0, 2947, '\p{^istaml}', "");
Expect(0, 2947, '\P{istaml}', "");
Expect(1, 2947, '\P{^istaml}', "");
Expect(0, 2945, '\p{istaml}', "");
Expect(1, 2945, '\p{^istaml}', "");
Expect(1, 2945, '\P{istaml}', "");
Expect(0, 2945, '\P{^istaml}', "");
Expect(1, 2947, '\p{ IS-Taml}', "");
Expect(0, 2947, '\p{^ IS-Taml}', "");
Expect(0, 2947, '\P{ IS-Taml}', "");
Expect(1, 2947, '\P{^ IS-Taml}', "");
Expect(0, 2945, '\p{ IS-Taml}', "");
Expect(1, 2945, '\p{^ IS-Taml}', "");
Expect(1, 2945, '\P{ IS-Taml}', "");
Expect(0, 2945, '\P{^ IS-Taml}', "");
Error('\p{ _SHAVIAN:=}');
Error('\P{ _SHAVIAN:=}');
Expect(1, 66687, '\p{shavian}', "");
Expect(0, 66687, '\p{^shavian}', "");
Expect(0, 66687, '\P{shavian}', "");
Expect(1, 66687, '\P{^shavian}', "");
Expect(0, 66639, '\p{shavian}', "");
Expect(1, 66639, '\p{^shavian}', "");
Expect(1, 66639, '\P{shavian}', "");
Expect(0, 66639, '\P{^shavian}', "");
Expect(1, 66687, '\p{-Shavian}', "");
Expect(0, 66687, '\p{^-Shavian}', "");
Expect(0, 66687, '\P{-Shavian}', "");
Expect(1, 66687, '\P{^-Shavian}', "");
Expect(0, 66639, '\p{-Shavian}', "");
Expect(1, 66639, '\p{^-Shavian}', "");
Expect(1, 66639, '\P{-Shavian}', "");
Expect(0, 66639, '\P{^-Shavian}', "");
Error('\p{_ Isshavian:=}');
Error('\P{_ Isshavian:=}');
Expect(1, 66687, '\p{isshavian}', "");
Expect(0, 66687, '\p{^isshavian}', "");
Expect(0, 66687, '\P{isshavian}', "");
Expect(1, 66687, '\P{^isshavian}', "");
Expect(0, 66639, '\p{isshavian}', "");
Expect(1, 66639, '\p{^isshavian}', "");
Expect(1, 66639, '\P{isshavian}', "");
Expect(0, 66639, '\P{^isshavian}', "");
Expect(1, 66687, '\p{ _Is	Shavian}', "");
Expect(0, 66687, '\p{^ _Is	Shavian}', "");
Expect(0, 66687, '\P{ _Is	Shavian}', "");
Expect(1, 66687, '\P{^ _Is	Shavian}', "");
Expect(0, 66639, '\p{ _Is	Shavian}', "");
Expect(1, 66639, '\p{^ _Is	Shavian}', "");
Expect(1, 66639, '\P{ _Is	Shavian}', "");
Expect(0, 66639, '\P{^ _Is	Shavian}', "");
Error('\p{ Shaw:=}');
Error('\P{ Shaw:=}');
Expect(1, 66687, '\p{shaw}', "");
Expect(0, 66687, '\p{^shaw}', "");
Expect(0, 66687, '\P{shaw}', "");
Expect(1, 66687, '\P{^shaw}', "");
Expect(0, 66639, '\p{shaw}', "");
Expect(1, 66639, '\p{^shaw}', "");
Expect(1, 66639, '\P{shaw}', "");
Expect(0, 66639, '\P{^shaw}', "");
Expect(1, 66687, '\p{	 shaw}', "");
Expect(0, 66687, '\p{^	 shaw}', "");
Expect(0, 66687, '\P{	 shaw}', "");
Expect(1, 66687, '\P{^	 shaw}', "");
Expect(0, 66639, '\p{	 shaw}', "");
Expect(1, 66639, '\p{^	 shaw}', "");
Expect(1, 66639, '\P{	 shaw}', "");
Expect(0, 66639, '\P{^	 shaw}', "");
Error('\p{	:=IsSHAW}');
Error('\P{	:=IsSHAW}');
Expect(1, 66687, '\p{isshaw}', "");
Expect(0, 66687, '\p{^isshaw}', "");
Expect(0, 66687, '\P{isshaw}', "");
Expect(1, 66687, '\P{^isshaw}', "");
Expect(0, 66639, '\p{isshaw}', "");
Expect(1, 66639, '\p{^isshaw}', "");
Expect(1, 66639, '\P{isshaw}', "");
Expect(0, 66639, '\P{^isshaw}', "");
Expect(1, 66687, '\p{--Is Shaw}', "");
Expect(0, 66687, '\p{^--Is Shaw}', "");
Expect(0, 66687, '\P{--Is Shaw}', "");
Expect(1, 66687, '\P{^--Is Shaw}', "");
Expect(0, 66639, '\p{--Is Shaw}', "");
Expect(1, 66639, '\p{^--Is Shaw}', "");
Expect(1, 66639, '\P{--Is Shaw}', "");
Expect(0, 66639, '\P{^--Is Shaw}', "");
Error('\p{ 	ipaExtensions:=}');
Error('\P{ 	ipaExtensions:=}');
Expect(1, 687, '\p{ipaextensions}', "");
Expect(0, 687, '\p{^ipaextensions}', "");
Expect(0, 687, '\P{ipaextensions}', "");
Expect(1, 687, '\P{^ipaextensions}', "");
Expect(0, 591, '\p{ipaextensions}', "");
Expect(1, 591, '\p{^ipaextensions}', "");
Expect(1, 591, '\P{ipaextensions}', "");
Expect(0, 591, '\P{^ipaextensions}', "");
Expect(1, 687, '\p{-	IPA-Extensions}', "");
Expect(0, 687, '\p{^-	IPA-Extensions}', "");
Expect(0, 687, '\P{-	IPA-Extensions}', "");
Expect(1, 687, '\P{^-	IPA-Extensions}', "");
Expect(0, 591, '\p{-	IPA-Extensions}', "");
Expect(1, 591, '\p{^-	IPA-Extensions}', "");
Expect(1, 591, '\P{-	IPA-Extensions}', "");
Expect(0, 591, '\P{^-	IPA-Extensions}', "");
Error('\p{  is IPA:=Extensions}');
Error('\P{  is IPA:=Extensions}');
Expect(1, 687, '\p{isipaextensions}', "");
Expect(0, 687, '\p{^isipaextensions}', "");
Expect(0, 687, '\P{isipaextensions}', "");
Expect(1, 687, '\P{^isipaextensions}', "");
Expect(0, 591, '\p{isipaextensions}', "");
Expect(1, 591, '\p{^isipaextensions}', "");
Expect(1, 591, '\P{isipaextensions}', "");
Expect(0, 591, '\P{^isipaextensions}', "");
Expect(1, 687, '\p{ 	is_ipa Extensions}', "");
Expect(0, 687, '\p{^ 	is_ipa Extensions}', "");
Expect(0, 687, '\P{ 	is_ipa Extensions}', "");
Expect(1, 687, '\P{^ 	is_ipa Extensions}', "");
Expect(0, 591, '\p{ 	is_ipa Extensions}', "");
Expect(1, 591, '\p{^ 	is_ipa Extensions}', "");
Expect(1, 591, '\P{ 	is_ipa Extensions}', "");
Expect(0, 591, '\P{^ 	is_ipa Extensions}', "");
Error('\p{- inIPA/a/Extensions}');
Error('\P{- inIPA/a/Extensions}');
Expect(1, 687, '\p{inipaextensions}', "");
Expect(0, 687, '\p{^inipaextensions}', "");
Expect(0, 687, '\P{inipaextensions}', "");
Expect(1, 687, '\P{^inipaextensions}', "");
Expect(0, 591, '\p{inipaextensions}', "");
Expect(1, 591, '\p{^inipaextensions}', "");
Expect(1, 591, '\P{inipaextensions}', "");
Expect(0, 591, '\P{^inipaextensions}', "");
Expect(1, 687, '\p{		In ipa	EXTENSIONS}', "");
Expect(0, 687, '\p{^		In ipa	EXTENSIONS}', "");
Expect(0, 687, '\P{		In ipa	EXTENSIONS}', "");
Expect(1, 687, '\P{^		In ipa	EXTENSIONS}', "");
Expect(0, 591, '\p{		In ipa	EXTENSIONS}', "");
Expect(1, 591, '\p{^		In ipa	EXTENSIONS}', "");
Expect(1, 591, '\P{		In ipa	EXTENSIONS}', "");
Expect(0, 591, '\P{^		In ipa	EXTENSIONS}', "");
Error('\p{/a/HIRAGANA}');
Error('\P{/a/HIRAGANA}');
Expect(1, 12438, '\p{hiragana}', "");
Expect(0, 12438, '\p{^hiragana}', "");
Expect(0, 12438, '\P{hiragana}', "");
Expect(1, 12438, '\P{^hiragana}', "");
Expect(0, 12352, '\p{hiragana}', "");
Expect(1, 12352, '\p{^hiragana}', "");
Expect(1, 12352, '\P{hiragana}', "");
Expect(0, 12352, '\P{^hiragana}', "");
Expect(1, 12438, '\p{-HIRAGANA}', "");
Expect(0, 12438, '\p{^-HIRAGANA}', "");
Expect(0, 12438, '\P{-HIRAGANA}', "");
Expect(1, 12438, '\P{^-HIRAGANA}', "");
Expect(0, 12352, '\p{-HIRAGANA}', "");
Expect(1, 12352, '\p{^-HIRAGANA}', "");
Expect(1, 12352, '\P{-HIRAGANA}', "");
Expect(0, 12352, '\P{^-HIRAGANA}', "");
Error('\p{/a/_-IsHiragana}');
Error('\P{/a/_-IsHiragana}');
Expect(1, 12438, '\p{ishiragana}', "");
Expect(0, 12438, '\p{^ishiragana}', "");
Expect(0, 12438, '\P{ishiragana}', "");
Expect(1, 12438, '\P{^ishiragana}', "");
Expect(0, 12352, '\p{ishiragana}', "");
Expect(1, 12352, '\p{^ishiragana}', "");
Expect(1, 12352, '\P{ishiragana}', "");
Expect(0, 12352, '\P{^ishiragana}', "");
Expect(1, 12438, '\p{	is_Hiragana}', "");
Expect(0, 12438, '\p{^	is_Hiragana}', "");
Expect(0, 12438, '\P{	is_Hiragana}', "");
Expect(1, 12438, '\P{^	is_Hiragana}', "");
Expect(0, 12352, '\p{	is_Hiragana}', "");
Expect(1, 12352, '\p{^	is_Hiragana}', "");
Expect(1, 12352, '\P{	is_Hiragana}', "");
Expect(0, 12352, '\P{^	is_Hiragana}', "");
Error('\p{- Hira/a/}');
Error('\P{- Hira/a/}');
Expect(1, 12438, '\p{hira}', "");
Expect(0, 12438, '\p{^hira}', "");
Expect(0, 12438, '\P{hira}', "");
Expect(1, 12438, '\P{^hira}', "");
Expect(0, 12352, '\p{hira}', "");
Expect(1, 12352, '\p{^hira}', "");
Expect(1, 12352, '\P{hira}', "");
Expect(0, 12352, '\P{^hira}', "");
Expect(1, 12438, '\p{Hira}', "");
Expect(0, 12438, '\p{^Hira}', "");
Expect(0, 12438, '\P{Hira}', "");
Expect(1, 12438, '\P{^Hira}', "");
Expect(0, 12352, '\p{Hira}', "");
Expect(1, 12352, '\p{^Hira}', "");
Expect(1, 12352, '\P{Hira}', "");
Expect(0, 12352, '\P{^Hira}', "");
Error('\p{:=Is Hira}');
Error('\P{:=Is Hira}');
Expect(1, 12438, '\p{ishira}', "");
Expect(0, 12438, '\p{^ishira}', "");
Expect(0, 12438, '\P{ishira}', "");
Expect(1, 12438, '\P{^ishira}', "");
Expect(0, 12352, '\p{ishira}', "");
Expect(1, 12352, '\p{^ishira}', "");
Expect(1, 12352, '\P{ishira}', "");
Expect(0, 12352, '\P{^ishira}', "");
Expect(1, 12438, '\p{- Is Hira}', "");
Expect(0, 12438, '\p{^- Is Hira}', "");
Expect(0, 12438, '\P{- Is Hira}', "");
Expect(1, 12438, '\P{^- Is Hira}', "");
Expect(0, 12352, '\p{- Is Hira}', "");
Expect(1, 12352, '\p{^- Is Hira}', "");
Expect(1, 12352, '\P{- Is Hira}', "");
Expect(0, 12352, '\P{^- Is Hira}', "");
Error('\p{ 	greek/a/}');
Error('\P{ 	greek/a/}');
Expect(1, 883, '\p{greek}', "");
Expect(0, 883, '\p{^greek}', "");
Expect(0, 883, '\P{greek}', "");
Expect(1, 883, '\P{^greek}', "");
Expect(0, 879, '\p{greek}', "");
Expect(1, 879, '\p{^greek}', "");
Expect(1, 879, '\P{greek}', "");
Expect(0, 879, '\P{^greek}', "");
Expect(1, 883, '\p{_GREEK}', "");
Expect(0, 883, '\p{^_GREEK}', "");
Expect(0, 883, '\P{_GREEK}', "");
Expect(1, 883, '\P{^_GREEK}', "");
Expect(0, 879, '\p{_GREEK}', "");
Expect(1, 879, '\p{^_GREEK}', "");
Expect(1, 879, '\P{_GREEK}', "");
Expect(0, 879, '\P{^_GREEK}', "");
Error('\p{IS_GREEK:=}');
Error('\P{IS_GREEK:=}');
Expect(1, 883, '\p{isgreek}', "");
Expect(0, 883, '\p{^isgreek}', "");
Expect(0, 883, '\P{isgreek}', "");
Expect(1, 883, '\P{^isgreek}', "");
Expect(0, 879, '\p{isgreek}', "");
Expect(1, 879, '\p{^isgreek}', "");
Expect(1, 879, '\P{isgreek}', "");
Expect(0, 879, '\P{^isgreek}', "");
Expect(1, 883, '\p{		is-greek}', "");
Expect(0, 883, '\p{^		is-greek}', "");
Expect(0, 883, '\P{		is-greek}', "");
Expect(1, 883, '\P{^		is-greek}', "");
Expect(0, 879, '\p{		is-greek}', "");
Expect(1, 879, '\p{^		is-greek}', "");
Expect(1, 879, '\P{		is-greek}', "");
Expect(0, 879, '\P{^		is-greek}', "");
Error('\p{/a/_	grek}');
Error('\P{/a/_	grek}');
Expect(1, 883, '\p{grek}', "");
Expect(0, 883, '\p{^grek}', "");
Expect(0, 883, '\P{grek}', "");
Expect(1, 883, '\P{^grek}', "");
Expect(0, 879, '\p{grek}', "");
Expect(1, 879, '\p{^grek}', "");
Expect(1, 879, '\P{grek}', "");
Expect(0, 879, '\P{^grek}', "");
Expect(1, 883, '\p{	Grek}', "");
Expect(0, 883, '\p{^	Grek}', "");
Expect(0, 883, '\P{	Grek}', "");
Expect(1, 883, '\P{^	Grek}', "");
Expect(0, 879, '\p{	Grek}', "");
Expect(1, 879, '\p{^	Grek}', "");
Expect(1, 879, '\P{	Grek}', "");
Expect(0, 879, '\P{^	Grek}', "");
Error('\p{	Is/a/Grek}');
Error('\P{	Is/a/Grek}');
Expect(1, 883, '\p{isgrek}', "");
Expect(0, 883, '\p{^isgrek}', "");
Expect(0, 883, '\P{isgrek}', "");
Expect(1, 883, '\P{^isgrek}', "");
Expect(0, 879, '\p{isgrek}', "");
Expect(1, 879, '\p{^isgrek}', "");
Expect(1, 879, '\P{isgrek}', "");
Expect(0, 879, '\P{^isgrek}', "");
Expect(1, 883, '\p{	 is_Grek}', "");
Expect(0, 883, '\p{^	 is_Grek}', "");
Expect(0, 883, '\P{	 is_Grek}', "");
Expect(1, 883, '\P{^	 is_Grek}', "");
Expect(0, 879, '\p{	 is_Grek}', "");
Expect(1, 879, '\p{^	 is_Grek}', "");
Expect(1, 879, '\P{	 is_Grek}', "");
Expect(0, 879, '\P{^	 is_Grek}', "");
Error('\p{-	IN_Thai/a/}');
Error('\P{-	IN_Thai/a/}');
Expect(1, 3711, '\p{inthai}', "");
Expect(0, 3711, '\p{^inthai}', "");
Expect(0, 3711, '\P{inthai}', "");
Expect(1, 3711, '\P{^inthai}', "");
Expect(0, 3583, '\p{inthai}', "");
Expect(1, 3583, '\p{^inthai}', "");
Expect(1, 3583, '\P{inthai}', "");
Expect(0, 3583, '\P{^inthai}', "");
Expect(1, 3711, '\p{-In Thai}', "");
Expect(0, 3711, '\p{^-In Thai}', "");
Expect(0, 3711, '\P{-In Thai}', "");
Expect(1, 3711, '\P{^-In Thai}', "");
Expect(0, 3583, '\p{-In Thai}', "");
Expect(1, 3583, '\p{^-In Thai}', "");
Expect(1, 3583, '\P{-In Thai}', "");
Expect(0, 3583, '\P{^-In Thai}', "");
Error('\p{	_Line Separator:=}');
Error('\P{	_Line Separator:=}');
Expect(1, 8232, '\p{lineseparator}', "");
Expect(0, 8232, '\p{^lineseparator}', "");
Expect(0, 8232, '\P{lineseparator}', "");
Expect(1, 8232, '\P{^lineseparator}', "");
Expect(0, 8231, '\p{lineseparator}', "");
Expect(1, 8231, '\p{^lineseparator}', "");
Expect(1, 8231, '\P{lineseparator}', "");
Expect(0, 8231, '\P{^lineseparator}', "");
Expect(1, 8232, '\p{ _line separator}', "");
Expect(0, 8232, '\p{^ _line separator}', "");
Expect(0, 8232, '\P{ _line separator}', "");
Expect(1, 8232, '\P{^ _line separator}', "");
Expect(0, 8231, '\p{ _line separator}', "");
Expect(1, 8231, '\p{^ _line separator}', "");
Expect(1, 8231, '\P{ _line separator}', "");
Expect(0, 8231, '\P{^ _line separator}', "");
Error('\p{	IS/a/Line-Separator}');
Error('\P{	IS/a/Line-Separator}');
Expect(1, 8232, '\p{islineseparator}', "");
Expect(0, 8232, '\p{^islineseparator}', "");
Expect(0, 8232, '\P{islineseparator}', "");
Expect(1, 8232, '\P{^islineseparator}', "");
Expect(0, 8231, '\p{islineseparator}', "");
Expect(1, 8231, '\p{^islineseparator}', "");
Expect(1, 8231, '\P{islineseparator}', "");
Expect(0, 8231, '\P{^islineseparator}', "");
Expect(1, 8232, '\p{__IS-Line-Separator}', "");
Expect(0, 8232, '\p{^__IS-Line-Separator}', "");
Expect(0, 8232, '\P{__IS-Line-Separator}', "");
Expect(1, 8232, '\P{^__IS-Line-Separator}', "");
Expect(0, 8231, '\p{__IS-Line-Separator}', "");
Expect(1, 8231, '\p{^__IS-Line-Separator}', "");
Expect(1, 8231, '\P{__IS-Line-Separator}', "");
Expect(0, 8231, '\P{^__IS-Line-Separator}', "");
Error('\p{	 Zl/a/}');
Error('\P{	 Zl/a/}');
Expect(1, 8232, '\p{zl}', "");
Expect(0, 8232, '\p{^zl}', "");
Expect(0, 8232, '\P{zl}', "");
Expect(1, 8232, '\P{^zl}', "");
Expect(0, 8231, '\p{zl}', "");
Expect(1, 8231, '\p{^zl}', "");
Expect(1, 8231, '\P{zl}', "");
Expect(0, 8231, '\P{^zl}', "");
Expect(1, 8232, '\p{- Zl}', "");
Expect(0, 8232, '\p{^- Zl}', "");
Expect(0, 8232, '\P{- Zl}', "");
Expect(1, 8232, '\P{^- Zl}', "");
Expect(0, 8231, '\p{- Zl}', "");
Expect(1, 8231, '\p{^- Zl}', "");
Expect(1, 8231, '\P{- Zl}', "");
Expect(0, 8231, '\P{^- Zl}', "");
Error('\p{/a/Is	ZL}');
Error('\P{/a/Is	ZL}');
Expect(1, 8232, '\p{iszl}', "");
Expect(0, 8232, '\p{^iszl}', "");
Expect(0, 8232, '\P{iszl}', "");
Expect(1, 8232, '\P{^iszl}', "");
Expect(0, 8231, '\p{iszl}', "");
Expect(1, 8231, '\p{^iszl}', "");
Expect(1, 8231, '\P{iszl}', "");
Expect(0, 8231, '\P{^iszl}', "");
Expect(1, 8232, '\p{	ISZl}', "");
Expect(0, 8232, '\p{^	ISZl}', "");
Expect(0, 8232, '\P{	ISZl}', "");
Expect(1, 8232, '\P{^	ISZl}', "");
Expect(0, 8231, '\p{	ISZl}', "");
Expect(1, 8231, '\p{^	ISZl}', "");
Expect(1, 8231, '\P{	ISZl}', "");
Expect(0, 8231, '\P{^	ISZl}', "");
Error('\p{	/a/Ol-chiki}');
Error('\P{	/a/Ol-chiki}');
Expect(1, 7295, '\p{olchiki}', "");
Expect(0, 7295, '\p{^olchiki}', "");
Expect(0, 7295, '\P{olchiki}', "");
Expect(1, 7295, '\P{^olchiki}', "");
Expect(0, 7247, '\p{olchiki}', "");
Expect(1, 7247, '\p{^olchiki}', "");
Expect(1, 7247, '\P{olchiki}', "");
Expect(0, 7247, '\P{^olchiki}', "");
Expect(1, 7295, '\p{_Ol	Chiki}', "");
Expect(0, 7295, '\p{^_Ol	Chiki}', "");
Expect(0, 7295, '\P{_Ol	Chiki}', "");
Expect(1, 7295, '\P{^_Ol	Chiki}', "");
Expect(0, 7247, '\p{_Ol	Chiki}', "");
Expect(1, 7247, '\p{^_Ol	Chiki}', "");
Expect(1, 7247, '\P{_Ol	Chiki}', "");
Expect(0, 7247, '\P{^_Ol	Chiki}', "");
Error('\p{		IS	olCHIKI/a/}');
Error('\P{		IS	olCHIKI/a/}');
Expect(1, 7295, '\p{isolchiki}', "");
Expect(0, 7295, '\p{^isolchiki}', "");
Expect(0, 7295, '\P{isolchiki}', "");
Expect(1, 7295, '\P{^isolchiki}', "");
Expect(0, 7247, '\p{isolchiki}', "");
Expect(1, 7247, '\p{^isolchiki}', "");
Expect(1, 7247, '\P{isolchiki}', "");
Expect(0, 7247, '\P{^isolchiki}', "");
Expect(1, 7295, '\p{Is	Ol	CHIKI}', "");
Expect(0, 7295, '\p{^Is	Ol	CHIKI}', "");
Expect(0, 7295, '\P{Is	Ol	CHIKI}', "");
Expect(1, 7295, '\P{^Is	Ol	CHIKI}', "");
Expect(0, 7247, '\p{Is	Ol	CHIKI}', "");
Expect(1, 7247, '\p{^Is	Ol	CHIKI}', "");
Expect(1, 7247, '\P{Is	Ol	CHIKI}', "");
Expect(0, 7247, '\P{^Is	Ol	CHIKI}', "");
Error('\p{:=		olck}');
Error('\P{:=		olck}');
Expect(1, 7295, '\p{olck}', "");
Expect(0, 7295, '\p{^olck}', "");
Expect(0, 7295, '\P{olck}', "");
Expect(1, 7295, '\P{^olck}', "");
Expect(0, 7247, '\p{olck}', "");
Expect(1, 7247, '\p{^olck}', "");
Expect(1, 7247, '\P{olck}', "");
Expect(0, 7247, '\P{^olck}', "");
Expect(1, 7295, '\p{_ olck}', "");
Expect(0, 7295, '\p{^_ olck}', "");
Expect(0, 7295, '\P{_ olck}', "");
Expect(1, 7295, '\P{^_ olck}', "");
Expect(0, 7247, '\p{_ olck}', "");
Expect(1, 7247, '\p{^_ olck}', "");
Expect(1, 7247, '\P{_ olck}', "");
Expect(0, 7247, '\P{^_ olck}', "");
Error('\p{ /a/IsOLCK}');
Error('\P{ /a/IsOLCK}');
Expect(1, 7295, '\p{isolck}', "");
Expect(0, 7295, '\p{^isolck}', "");
Expect(0, 7295, '\P{isolck}', "");
Expect(1, 7295, '\P{^isolck}', "");
Expect(0, 7247, '\p{isolck}', "");
Expect(1, 7247, '\p{^isolck}', "");
Expect(1, 7247, '\P{isolck}', "");
Expect(0, 7247, '\P{^isolck}', "");
Expect(1, 7295, '\p{_Is-olck}', "");
Expect(0, 7295, '\p{^_Is-olck}', "");
Expect(0, 7295, '\P{_Is-olck}', "");
Expect(1, 7295, '\P{^_Is-olck}', "");
Expect(0, 7247, '\p{_Is-olck}', "");
Expect(1, 7247, '\p{^_Is-olck}', "");
Expect(1, 7247, '\P{_Is-olck}', "");
Expect(0, 7247, '\P{^_Is-olck}', "");
Error('\p{-/a/tai	VIET}');
Error('\P{-/a/tai	VIET}');
Expect(1, 43714, '\p{taiviet}', "");
Expect(0, 43714, '\p{^taiviet}', "");
Expect(0, 43714, '\P{taiviet}', "");
Expect(1, 43714, '\P{^taiviet}', "");
Expect(0, 43647, '\p{taiviet}', "");
Expect(1, 43647, '\p{^taiviet}', "");
Expect(1, 43647, '\P{taiviet}', "");
Expect(0, 43647, '\P{^taiviet}', "");
Expect(1, 43714, '\p{_ Taiviet}', "");
Expect(0, 43714, '\p{^_ Taiviet}', "");
Expect(0, 43714, '\P{_ Taiviet}', "");
Expect(1, 43714, '\P{^_ Taiviet}', "");
Expect(0, 43647, '\p{_ Taiviet}', "");
Expect(1, 43647, '\p{^_ Taiviet}', "");
Expect(1, 43647, '\P{_ Taiviet}', "");
Expect(0, 43647, '\P{^_ Taiviet}', "");
Error('\p{	:=is_Tai_VIET}');
Error('\P{	:=is_Tai_VIET}');
Expect(1, 43714, '\p{istaiviet}', "");
Expect(0, 43714, '\p{^istaiviet}', "");
Expect(0, 43714, '\P{istaiviet}', "");
Expect(1, 43714, '\P{^istaiviet}', "");
Expect(0, 43647, '\p{istaiviet}', "");
Expect(1, 43647, '\p{^istaiviet}', "");
Expect(1, 43647, '\P{istaiviet}', "");
Expect(0, 43647, '\P{^istaiviet}', "");
Expect(1, 43714, '\p{-IS-TAI Viet}', "");
Expect(0, 43714, '\p{^-IS-TAI Viet}', "");
Expect(0, 43714, '\P{-IS-TAI Viet}', "");
Expect(1, 43714, '\P{^-IS-TAI Viet}', "");
Expect(0, 43647, '\p{-IS-TAI Viet}', "");
Expect(1, 43647, '\p{^-IS-TAI Viet}', "");
Expect(1, 43647, '\P{-IS-TAI Viet}', "");
Expect(0, 43647, '\P{^-IS-TAI Viet}', "");
Error('\p{_TAVT:=}');
Error('\P{_TAVT:=}');
Expect(1, 43714, '\p{tavt}', "");
Expect(0, 43714, '\p{^tavt}', "");
Expect(0, 43714, '\P{tavt}', "");
Expect(1, 43714, '\P{^tavt}', "");
Expect(0, 43647, '\p{tavt}', "");
Expect(1, 43647, '\p{^tavt}', "");
Expect(1, 43647, '\P{tavt}', "");
Expect(0, 43647, '\P{^tavt}', "");
Expect(1, 43714, '\p{-Tavt}', "");
Expect(0, 43714, '\p{^-Tavt}', "");
Expect(0, 43714, '\P{-Tavt}', "");
Expect(1, 43714, '\P{^-Tavt}', "");
Expect(0, 43647, '\p{-Tavt}', "");
Expect(1, 43647, '\p{^-Tavt}', "");
Expect(1, 43647, '\P{-Tavt}', "");
Expect(0, 43647, '\P{^-Tavt}', "");
Error('\p{ _is:=Tavt}');
Error('\P{ _is:=Tavt}');
Expect(1, 43714, '\p{istavt}', "");
Expect(0, 43714, '\p{^istavt}', "");
Expect(0, 43714, '\P{istavt}', "");
Expect(1, 43714, '\P{^istavt}', "");
Expect(0, 43647, '\p{istavt}', "");
Expect(1, 43647, '\p{^istavt}', "");
Expect(1, 43647, '\P{istavt}', "");
Expect(0, 43647, '\P{^istavt}', "");
Expect(1, 43714, '\p{	Is TAVT}', "");
Expect(0, 43714, '\p{^	Is TAVT}', "");
Expect(0, 43714, '\P{	Is TAVT}', "");
Expect(1, 43714, '\P{^	Is TAVT}', "");
Expect(0, 43647, '\p{	Is TAVT}', "");
Expect(1, 43647, '\p{^	Is TAVT}', "");
Expect(1, 43647, '\P{	Is TAVT}', "");
Expect(0, 43647, '\P{^	Is TAVT}', "");
Error('\p{:=		Thai}');
Error('\P{:=		Thai}');
Expect(1, 3642, '\p{thai}', "");
Expect(0, 3642, '\p{^thai}', "");
Expect(0, 3642, '\P{thai}', "");
Expect(1, 3642, '\P{^thai}', "");
Expect(0, 3584, '\p{thai}', "");
Expect(1, 3584, '\p{^thai}', "");
Expect(1, 3584, '\P{thai}', "");
Expect(0, 3584, '\P{^thai}', "");
Expect(1, 3642, '\p{_Thai}', "");
Expect(0, 3642, '\p{^_Thai}', "");
Expect(0, 3642, '\P{_Thai}', "");
Expect(1, 3642, '\P{^_Thai}', "");
Expect(0, 3584, '\p{_Thai}', "");
Expect(1, 3584, '\p{^_Thai}', "");
Expect(1, 3584, '\P{_Thai}', "");
Expect(0, 3584, '\P{^_Thai}', "");
Error('\p{ IS/a/THAI}');
Error('\P{ IS/a/THAI}');
Expect(1, 3642, '\p{isthai}', "");
Expect(0, 3642, '\p{^isthai}', "");
Expect(0, 3642, '\P{isthai}', "");
Expect(1, 3642, '\P{^isthai}', "");
Expect(0, 3584, '\p{isthai}', "");
Expect(1, 3584, '\p{^isthai}', "");
Expect(1, 3584, '\P{isthai}', "");
Expect(0, 3584, '\P{^isthai}', "");
Expect(1, 3642, '\p{__Is	Thai}', "");
Expect(0, 3642, '\p{^__Is	Thai}', "");
Expect(0, 3642, '\P{__Is	Thai}', "");
Expect(1, 3642, '\P{^__Is	Thai}', "");
Expect(0, 3584, '\p{__Is	Thai}', "");
Expect(1, 3584, '\p{^__Is	Thai}', "");
Expect(1, 3584, '\P{__Is	Thai}', "");
Expect(0, 3584, '\P{^__Is	Thai}', "");
Error('\p{:=_ ASCII}');
Error('\P{:=_ ASCII}');
Expect(1, 127, '\p{ascii}', "");
Expect(0, 127, '\p{^ascii}', "");
Expect(0, 127, '\P{ascii}', "");
Expect(1, 127, '\P{^ascii}', "");
Expect(0, 128, '\p{ascii}', "");
Expect(1, 128, '\p{^ascii}', "");
Expect(1, 128, '\P{ascii}', "");
Expect(0, 128, '\P{^ascii}', "");
Expect(1, 127, '\p{--ascii}', "");
Expect(0, 127, '\p{^--ascii}', "");
Expect(0, 127, '\P{--ascii}', "");
Expect(1, 127, '\P{^--ascii}', "");
Expect(0, 128, '\p{--ascii}', "");
Expect(1, 128, '\p{^--ascii}', "");
Expect(1, 128, '\P{--ascii}', "");
Expect(0, 128, '\P{^--ascii}', "");
Error('\p{is:=ASCII}');
Error('\P{is:=ASCII}');
Expect(1, 127, '\p{isascii}', "");
Expect(0, 127, '\p{^isascii}', "");
Expect(0, 127, '\P{isascii}', "");
Expect(1, 127, '\P{^isascii}', "");
Expect(0, 128, '\p{isascii}', "");
Expect(1, 128, '\p{^isascii}', "");
Expect(1, 128, '\P{isascii}', "");
Expect(0, 128, '\P{^isascii}', "");
Expect(1, 127, '\p{ -IS_ascii}', "");
Expect(0, 127, '\p{^ -IS_ascii}', "");
Expect(0, 127, '\P{ -IS_ascii}', "");
Expect(1, 127, '\P{^ -IS_ascii}', "");
Expect(0, 128, '\p{ -IS_ascii}', "");
Expect(1, 128, '\p{^ -IS_ascii}', "");
Expect(1, 128, '\P{ -IS_ascii}', "");
Expect(0, 128, '\P{^ -IS_ascii}', "");
Error('\p{BasicLatin/a/}');
Error('\P{BasicLatin/a/}');
Expect(1, 127, '\p{basiclatin}', "");
Expect(0, 127, '\p{^basiclatin}', "");
Expect(0, 127, '\P{basiclatin}', "");
Expect(1, 127, '\P{^basiclatin}', "");
Expect(0, 128, '\p{basiclatin}', "");
Expect(1, 128, '\p{^basiclatin}', "");
Expect(1, 128, '\P{basiclatin}', "");
Expect(0, 128, '\P{^basiclatin}', "");
Expect(1, 127, '\p{	BASIC_LATIN}', "");
Expect(0, 127, '\p{^	BASIC_LATIN}', "");
Expect(0, 127, '\P{	BASIC_LATIN}', "");
Expect(1, 127, '\P{^	BASIC_LATIN}', "");
Expect(0, 128, '\p{	BASIC_LATIN}', "");
Expect(1, 128, '\p{^	BASIC_LATIN}', "");
Expect(1, 128, '\P{	BASIC_LATIN}', "");
Expect(0, 128, '\P{^	BASIC_LATIN}', "");
Error('\p{	 Is	Basic/a/Latin}');
Error('\P{	 Is	Basic/a/Latin}');
Expect(1, 127, '\p{isbasiclatin}', "");
Expect(0, 127, '\p{^isbasiclatin}', "");
Expect(0, 127, '\P{isbasiclatin}', "");
Expect(1, 127, '\P{^isbasiclatin}', "");
Expect(0, 128, '\p{isbasiclatin}', "");
Expect(1, 128, '\p{^isbasiclatin}', "");
Expect(1, 128, '\P{isbasiclatin}', "");
Expect(0, 128, '\P{^isbasiclatin}', "");
Expect(1, 127, '\p{ is_Basiclatin}', "");
Expect(0, 127, '\p{^ is_Basiclatin}', "");
Expect(0, 127, '\P{ is_Basiclatin}', "");
Expect(1, 127, '\P{^ is_Basiclatin}', "");
Expect(0, 128, '\p{ is_Basiclatin}', "");
Expect(1, 128, '\p{^ is_Basiclatin}', "");
Expect(1, 128, '\P{ is_Basiclatin}', "");
Expect(0, 128, '\P{^ is_Basiclatin}', "");
Error('\p{	/a/IN_Basic-Latin}');
Error('\P{	/a/IN_Basic-Latin}');
Expect(1, 127, '\p{inbasiclatin}', "");
Expect(0, 127, '\p{^inbasiclatin}', "");
Expect(0, 127, '\P{inbasiclatin}', "");
Expect(1, 127, '\P{^inbasiclatin}', "");
Expect(0, 128, '\p{inbasiclatin}', "");
Expect(1, 128, '\p{^inbasiclatin}', "");
Expect(1, 128, '\P{inbasiclatin}', "");
Expect(0, 128, '\P{^inbasiclatin}', "");
Expect(1, 127, '\p{-	InBasic_Latin}', "");
Expect(0, 127, '\p{^-	InBasic_Latin}', "");
Expect(0, 127, '\P{-	InBasic_Latin}', "");
Expect(1, 127, '\P{^-	InBasic_Latin}', "");
Expect(0, 128, '\p{-	InBasic_Latin}', "");
Expect(1, 128, '\p{^-	InBasic_Latin}', "");
Expect(1, 128, '\P{-	InBasic_Latin}', "");
Expect(0, 128, '\P{^-	InBasic_Latin}', "");
Error('\p{_/a/In-ascii}');
Error('\P{_/a/In-ascii}');
Expect(1, 127, '\p{inascii}', "");
Expect(0, 127, '\p{^inascii}', "");
Expect(0, 127, '\P{inascii}', "");
Expect(1, 127, '\P{^inascii}', "");
Expect(0, 128, '\p{inascii}', "");
Expect(1, 128, '\p{^inascii}', "");
Expect(1, 128, '\P{inascii}', "");
Expect(0, 128, '\P{^inascii}', "");
Expect(1, 127, '\p{ -InASCII}', "");
Expect(0, 127, '\p{^ -InASCII}', "");
Expect(0, 127, '\P{ -InASCII}', "");
Expect(1, 127, '\P{^ -InASCII}', "");
Expect(0, 128, '\p{ -InASCII}', "");
Expect(1, 128, '\p{^ -InASCII}', "");
Expect(1, 128, '\P{ -InASCII}', "");
Expect(0, 128, '\P{^ -InASCII}', "");
Error('\p{ YI_SYLLABLES:=}');
Error('\P{ YI_SYLLABLES:=}');
Expect(1, 42127, '\p{yisyllables}', "");
Expect(0, 42127, '\p{^yisyllables}', "");
Expect(0, 42127, '\P{yisyllables}', "");
Expect(1, 42127, '\P{^yisyllables}', "");
Expect(0, 40959, '\p{yisyllables}', "");
Expect(1, 40959, '\p{^yisyllables}', "");
Expect(1, 40959, '\P{yisyllables}', "");
Expect(0, 40959, '\P{^yisyllables}', "");
Expect(1, 42127, '\p{_Yi	SYLLABLES}', "");
Expect(0, 42127, '\p{^_Yi	SYLLABLES}', "");
Expect(0, 42127, '\P{_Yi	SYLLABLES}', "");
Expect(1, 42127, '\P{^_Yi	SYLLABLES}', "");
Expect(0, 40959, '\p{_Yi	SYLLABLES}', "");
Expect(1, 40959, '\p{^_Yi	SYLLABLES}', "");
Expect(1, 40959, '\P{_Yi	SYLLABLES}', "");
Expect(0, 40959, '\P{^_Yi	SYLLABLES}', "");
Error('\p{  IS:=YiSyllables}');
Error('\P{  IS:=YiSyllables}');
Expect(1, 42127, '\p{isyisyllables}', "");
Expect(0, 42127, '\p{^isyisyllables}', "");
Expect(0, 42127, '\P{isyisyllables}', "");
Expect(1, 42127, '\P{^isyisyllables}', "");
Expect(0, 40959, '\p{isyisyllables}', "");
Expect(1, 40959, '\p{^isyisyllables}', "");
Expect(1, 40959, '\P{isyisyllables}', "");
Expect(0, 40959, '\P{^isyisyllables}', "");
Expect(1, 42127, '\p{_	Isyi_Syllables}', "");
Expect(0, 42127, '\p{^_	Isyi_Syllables}', "");
Expect(0, 42127, '\P{_	Isyi_Syllables}', "");
Expect(1, 42127, '\P{^_	Isyi_Syllables}', "");
Expect(0, 40959, '\p{_	Isyi_Syllables}', "");
Expect(1, 40959, '\p{^_	Isyi_Syllables}', "");
Expect(1, 40959, '\P{_	Isyi_Syllables}', "");
Expect(0, 40959, '\P{^_	Isyi_Syllables}', "");
Error('\p{_:=in-YI Syllables}');
Error('\P{_:=in-YI Syllables}');
Expect(1, 42127, '\p{inyisyllables}', "");
Expect(0, 42127, '\p{^inyisyllables}', "");
Expect(0, 42127, '\P{inyisyllables}', "");
Expect(1, 42127, '\P{^inyisyllables}', "");
Expect(0, 40959, '\p{inyisyllables}', "");
Expect(1, 40959, '\p{^inyisyllables}', "");
Expect(1, 40959, '\P{inyisyllables}', "");
Expect(0, 40959, '\P{^inyisyllables}', "");
Expect(1, 42127, '\p{-	In_Yi	Syllables}', "");
Expect(0, 42127, '\p{^-	In_Yi	Syllables}', "");
Expect(0, 42127, '\P{-	In_Yi	Syllables}', "");
Expect(1, 42127, '\P{^-	In_Yi	Syllables}', "");
Expect(0, 40959, '\p{-	In_Yi	Syllables}', "");
Expect(1, 40959, '\p{^-	In_Yi	Syllables}', "");
Expect(1, 40959, '\P{-	In_Yi	Syllables}', "");
Expect(0, 40959, '\P{^-	In_Yi	Syllables}', "");
Error('\p{-:=Punct}');
Error('\P{-:=Punct}');
Expect(1, 35, '\p{punct}', "");
Expect(0, 35, '\p{^punct}', "");
Expect(0, 35, '\P{punct}', "");
Expect(1, 35, '\P{^punct}', "");
Expect(0, 32, '\p{punct}', "");
Expect(1, 32, '\p{^punct}', "");
Expect(1, 32, '\P{punct}', "");
Expect(0, 32, '\P{^punct}', "");
Expect(1, 35, '\p{_	punct}', "");
Expect(0, 35, '\p{^_	punct}', "");
Expect(0, 35, '\P{_	punct}', "");
Expect(1, 35, '\P{^_	punct}', "");
Expect(0, 32, '\p{_	punct}', "");
Expect(1, 32, '\p{^_	punct}', "");
Expect(1, 32, '\P{_	punct}', "");
Expect(0, 32, '\P{^_	punct}', "");
Error('\p{ Is:=Punct}');
Error('\P{ Is:=Punct}');
Expect(1, 35, '\p{ispunct}', "");
Expect(0, 35, '\p{^ispunct}', "");
Expect(0, 35, '\P{ispunct}', "");
Expect(1, 35, '\P{^ispunct}', "");
Expect(0, 32, '\p{ispunct}', "");
Expect(1, 32, '\p{^ispunct}', "");
Expect(1, 32, '\P{ispunct}', "");
Expect(0, 32, '\P{^ispunct}', "");
Expect(1, 35, '\p{-	IsPunct}', "");
Expect(0, 35, '\p{^-	IsPunct}', "");
Expect(0, 35, '\P{-	IsPunct}', "");
Expect(1, 35, '\P{^-	IsPunct}', "");
Expect(0, 32, '\p{-	IsPunct}', "");
Expect(1, 32, '\p{^-	IsPunct}', "");
Expect(1, 32, '\P{-	IsPunct}', "");
Expect(0, 32, '\P{^-	IsPunct}', "");
Error('\p{ :=Punctuation}');
Error('\P{ :=Punctuation}');
Expect(1, 35, '\p{punctuation}', "");
Expect(0, 35, '\p{^punctuation}', "");
Expect(0, 35, '\P{punctuation}', "");
Expect(1, 35, '\P{^punctuation}', "");
Expect(0, 32, '\p{punctuation}', "");
Expect(1, 32, '\p{^punctuation}', "");
Expect(1, 32, '\P{punctuation}', "");
Expect(0, 32, '\P{^punctuation}', "");
Expect(1, 35, '\p{-Punctuation}', "");
Expect(0, 35, '\p{^-Punctuation}', "");
Expect(0, 35, '\P{-Punctuation}', "");
Expect(1, 35, '\P{^-Punctuation}', "");
Expect(0, 32, '\p{-Punctuation}', "");
Expect(1, 32, '\p{^-Punctuation}', "");
Expect(1, 32, '\P{-Punctuation}', "");
Expect(0, 32, '\P{^-Punctuation}', "");
Error('\p{	_Is:=PUNCTUATION}');
Error('\P{	_Is:=PUNCTUATION}');
Expect(1, 35, '\p{ispunctuation}', "");
Expect(0, 35, '\p{^ispunctuation}', "");
Expect(0, 35, '\P{ispunctuation}', "");
Expect(1, 35, '\P{^ispunctuation}', "");
Expect(0, 32, '\p{ispunctuation}', "");
Expect(1, 32, '\p{^ispunctuation}', "");
Expect(1, 32, '\P{ispunctuation}', "");
Expect(0, 32, '\P{^ispunctuation}', "");
Expect(1, 35, '\p{-	is-punctuation}', "");
Expect(0, 35, '\p{^-	is-punctuation}', "");
Expect(0, 35, '\P{-	is-punctuation}', "");
Expect(1, 35, '\P{^-	is-punctuation}', "");
Expect(0, 32, '\p{-	is-punctuation}', "");
Expect(1, 32, '\p{^-	is-punctuation}', "");
Expect(1, 32, '\P{-	is-punctuation}', "");
Expect(0, 32, '\P{^-	is-punctuation}', "");
Error('\p{:= _P}');
Error('\P{:= _P}');
Expect(1, 35, '\p{p}', "");
Expect(0, 35, '\p{^p}', "");
Expect(0, 35, '\P{p}', "");
Expect(1, 35, '\P{^p}', "");
Expect(0, 32, '\p{p}', "");
Expect(1, 32, '\p{^p}', "");
Expect(1, 32, '\P{p}', "");
Expect(0, 32, '\P{^p}', "");
Expect(1, 35, '\p{_-P}', "");
Expect(0, 35, '\p{^_-P}', "");
Expect(0, 35, '\P{_-P}', "");
Expect(1, 35, '\P{^_-P}', "");
Expect(0, 32, '\p{_-P}', "");
Expect(1, 32, '\p{^_-P}', "");
Expect(1, 32, '\P{_-P}', "");
Expect(0, 32, '\P{^_-P}', "");
Error('\p{ Is-P/a/}');
Error('\P{ Is-P/a/}');
Expect(1, 35, '\p{isp}', "");
Expect(0, 35, '\p{^isp}', "");
Expect(0, 35, '\P{isp}', "");
Expect(1, 35, '\P{^isp}', "");
Expect(0, 32, '\p{isp}', "");
Expect(1, 32, '\p{^isp}', "");
Expect(1, 32, '\P{isp}', "");
Expect(0, 32, '\P{^isp}', "");
Expect(1, 35, '\p{_	IS P}', "");
Expect(0, 35, '\p{^_	IS P}', "");
Expect(0, 35, '\P{_	IS P}', "");
Expect(1, 35, '\P{^_	IS P}', "");
Expect(0, 32, '\p{_	IS P}', "");
Expect(1, 32, '\p{^_	IS P}', "");
Expect(1, 32, '\P{_	IS P}', "");
Expect(0, 32, '\P{^_	IS P}', "");
Error('\p{Expands_On_NFD}');
Error('\P{Expands_On_NFD}');
Error('\p{Is_Expands_On_NFD}');
Error('\P{Is_Expands_On_NFD}');
Error('\p{XO_NFD}');
Error('\P{XO_NFD}');
Error('\p{Is_XO_NFD}');
Error('\P{Is_XO_NFD}');
Error('\p{/a/		Superscripts_And SUBSCRIPTS}');
Error('\P{/a/		Superscripts_And SUBSCRIPTS}');
Expect(1, 8351, '\p{superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{ superscripts AND_SUBSCRIPTS}', "");
Expect(0, 8351, '\p{^ superscripts AND_SUBSCRIPTS}', "");
Expect(0, 8351, '\P{ superscripts AND_SUBSCRIPTS}', "");
Expect(1, 8351, '\P{^ superscripts AND_SUBSCRIPTS}', "");
Expect(0, 8303, '\p{ superscripts AND_SUBSCRIPTS}', "");
Expect(1, 8303, '\p{^ superscripts AND_SUBSCRIPTS}', "");
Expect(1, 8303, '\P{ superscripts AND_SUBSCRIPTS}', "");
Expect(0, 8303, '\P{^ superscripts AND_SUBSCRIPTS}', "");
Error('\p{	_Is-SuperscriptsAND Subscripts/a/}');
Error('\P{	_Is-SuperscriptsAND Subscripts/a/}');
Expect(1, 8351, '\p{issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{	-Is	Superscripts_And subscripts}', "");
Expect(0, 8351, '\p{^	-Is	Superscripts_And subscripts}', "");
Expect(0, 8351, '\P{	-Is	Superscripts_And subscripts}', "");
Expect(1, 8351, '\P{^	-Is	Superscripts_And subscripts}', "");
Expect(0, 8303, '\p{	-Is	Superscripts_And subscripts}', "");
Expect(1, 8303, '\p{^	-Is	Superscripts_And subscripts}', "");
Expect(1, 8303, '\P{	-Is	Superscripts_And subscripts}', "");
Expect(0, 8303, '\P{^	-Is	Superscripts_And subscripts}', "");
Error('\p{:=_ in Superscripts_And	Subscripts}');
Error('\P{:=_ in Superscripts_And	Subscripts}');
Expect(1, 8351, '\p{insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{-insuperscripts	Andsubscripts}', "");
Expect(0, 8351, '\p{^-insuperscripts	Andsubscripts}', "");
Expect(0, 8351, '\P{-insuperscripts	Andsubscripts}', "");
Expect(1, 8351, '\P{^-insuperscripts	Andsubscripts}', "");
Expect(0, 8303, '\p{-insuperscripts	Andsubscripts}', "");
Expect(1, 8303, '\p{^-insuperscripts	Andsubscripts}', "");
Expect(1, 8303, '\P{-insuperscripts	Andsubscripts}', "");
Expect(0, 8303, '\P{^-insuperscripts	Andsubscripts}', "");
Error('\p{_ In/a/balinese}');
Error('\P{_ In/a/balinese}');
Expect(1, 7039, '\p{inbalinese}', "");
Expect(0, 7039, '\p{^inbalinese}', "");
Expect(0, 7039, '\P{inbalinese}', "");
Expect(1, 7039, '\P{^inbalinese}', "");
Expect(0, 6911, '\p{inbalinese}', "");
Expect(1, 6911, '\p{^inbalinese}', "");
Expect(1, 6911, '\P{inbalinese}', "");
Expect(0, 6911, '\P{^inbalinese}', "");
Expect(1, 7039, '\p{		In	balinese}', "");
Expect(0, 7039, '\p{^		In	balinese}', "");
Expect(0, 7039, '\P{		In	balinese}', "");
Expect(1, 7039, '\P{^		In	balinese}', "");
Expect(0, 6911, '\p{		In	balinese}', "");
Expect(1, 6911, '\p{^		In	balinese}', "");
Expect(1, 6911, '\P{		In	balinese}', "");
Expect(0, 6911, '\P{^		In	balinese}', "");
Error('\p{:=  DEPRECATED}');
Error('\P{:=  DEPRECATED}');
Expect(1, 329, '\p{deprecated}', "");
Expect(0, 329, '\p{^deprecated}', "");
Expect(0, 329, '\P{deprecated}', "");
Expect(1, 329, '\P{^deprecated}', "");
Expect(0, 328, '\p{deprecated}', "");
Expect(1, 328, '\p{^deprecated}', "");
Expect(1, 328, '\P{deprecated}', "");
Expect(0, 328, '\P{^deprecated}', "");
Expect(1, 329, '\p{--deprecated}', "");
Expect(0, 329, '\p{^--deprecated}', "");
Expect(0, 329, '\P{--deprecated}', "");
Expect(1, 329, '\P{^--deprecated}', "");
Expect(0, 328, '\p{--deprecated}', "");
Expect(1, 328, '\p{^--deprecated}', "");
Expect(1, 328, '\P{--deprecated}', "");
Expect(0, 328, '\P{^--deprecated}', "");
Error('\p{/a/ -Is	Deprecated}');
Error('\P{/a/ -Is	Deprecated}');
Expect(1, 329, '\p{isdeprecated}', "");
Expect(0, 329, '\p{^isdeprecated}', "");
Expect(0, 329, '\P{isdeprecated}', "");
Expect(1, 329, '\P{^isdeprecated}', "");
Expect(0, 328, '\p{isdeprecated}', "");
Expect(1, 328, '\p{^isdeprecated}', "");
Expect(1, 328, '\P{isdeprecated}', "");
Expect(0, 328, '\P{^isdeprecated}', "");
Expect(1, 329, '\p{IS deprecated}', "");
Expect(0, 329, '\p{^IS deprecated}', "");
Expect(0, 329, '\P{IS deprecated}', "");
Expect(1, 329, '\P{^IS deprecated}', "");
Expect(0, 328, '\p{IS deprecated}', "");
Expect(1, 328, '\p{^IS deprecated}', "");
Expect(1, 328, '\P{IS deprecated}', "");
Expect(0, 328, '\P{^IS deprecated}', "");
Error('\p{/a/  Dep}');
Error('\P{/a/  Dep}');
Expect(1, 329, '\p{dep}', "");
Expect(0, 329, '\p{^dep}', "");
Expect(0, 329, '\P{dep}', "");
Expect(1, 329, '\P{^dep}', "");
Expect(0, 328, '\p{dep}', "");
Expect(1, 328, '\p{^dep}', "");
Expect(1, 328, '\P{dep}', "");
Expect(0, 328, '\P{^dep}', "");
Expect(1, 329, '\p{_ dep}', "");
Expect(0, 329, '\p{^_ dep}', "");
Expect(0, 329, '\P{_ dep}', "");
Expect(1, 329, '\P{^_ dep}', "");
Expect(0, 328, '\p{_ dep}', "");
Expect(1, 328, '\p{^_ dep}', "");
Expect(1, 328, '\P{_ dep}', "");
Expect(0, 328, '\P{^_ dep}', "");
Error('\p{--is Dep/a/}');
Error('\P{--is Dep/a/}');
Expect(1, 329, '\p{isdep}', "");
Expect(0, 329, '\p{^isdep}', "");
Expect(0, 329, '\P{isdep}', "");
Expect(1, 329, '\P{^isdep}', "");
Expect(0, 328, '\p{isdep}', "");
Expect(1, 328, '\p{^isdep}', "");
Expect(1, 328, '\P{isdep}', "");
Expect(0, 328, '\P{^isdep}', "");
Expect(1, 329, '\p{_is	dep}', "");
Expect(0, 329, '\p{^_is	dep}', "");
Expect(0, 329, '\P{_is	dep}', "");
Expect(1, 329, '\P{^_is	dep}', "");
Expect(0, 328, '\p{_is	dep}', "");
Expect(1, 328, '\p{^_is	dep}', "");
Expect(1, 328, '\P{_is	dep}', "");
Expect(0, 328, '\P{^_is	dep}', "");
Error('\p{ 	myanmar/a/}');
Error('\P{ 	myanmar/a/}');
Expect(1, 4255, '\p{myanmar}', "");
Expect(0, 4255, '\p{^myanmar}', "");
Expect(0, 4255, '\P{myanmar}', "");
Expect(1, 4255, '\P{^myanmar}', "");
Expect(0, 4095, '\p{myanmar}', "");
Expect(1, 4095, '\p{^myanmar}', "");
Expect(1, 4095, '\P{myanmar}', "");
Expect(0, 4095, '\P{^myanmar}', "");
Expect(1, 4255, '\p{	_Myanmar}', "");
Expect(0, 4255, '\p{^	_Myanmar}', "");
Expect(0, 4255, '\P{	_Myanmar}', "");
Expect(1, 4255, '\P{^	_Myanmar}', "");
Expect(0, 4095, '\p{	_Myanmar}', "");
Expect(1, 4095, '\p{^	_Myanmar}', "");
Expect(1, 4095, '\P{	_Myanmar}', "");
Expect(0, 4095, '\P{^	_Myanmar}', "");
Error('\p{		Is myanmar/a/}');
Error('\P{		Is myanmar/a/}');
Expect(1, 4255, '\p{ismyanmar}', "");
Expect(0, 4255, '\p{^ismyanmar}', "");
Expect(0, 4255, '\P{ismyanmar}', "");
Expect(1, 4255, '\P{^ismyanmar}', "");
Expect(0, 4095, '\p{ismyanmar}', "");
Expect(1, 4095, '\p{^ismyanmar}', "");
Expect(1, 4095, '\P{ismyanmar}', "");
Expect(0, 4095, '\P{^ismyanmar}', "");
Expect(1, 4255, '\p{-Is	MYANMAR}', "");
Expect(0, 4255, '\p{^-Is	MYANMAR}', "");
Expect(0, 4255, '\P{-Is	MYANMAR}', "");
Expect(1, 4255, '\P{^-Is	MYANMAR}', "");
Expect(0, 4095, '\p{-Is	MYANMAR}', "");
Expect(1, 4095, '\p{^-Is	MYANMAR}', "");
Expect(1, 4095, '\P{-Is	MYANMAR}', "");
Expect(0, 4095, '\P{^-Is	MYANMAR}', "");
Error('\p{_ mymr:=}');
Error('\P{_ mymr:=}');
Expect(1, 4255, '\p{mymr}', "");
Expect(0, 4255, '\p{^mymr}', "");
Expect(0, 4255, '\P{mymr}', "");
Expect(1, 4255, '\P{^mymr}', "");
Expect(0, 4095, '\p{mymr}', "");
Expect(1, 4095, '\p{^mymr}', "");
Expect(1, 4095, '\P{mymr}', "");
Expect(0, 4095, '\P{^mymr}', "");
Expect(1, 4255, '\p{Mymr}', "");
Expect(0, 4255, '\p{^Mymr}', "");
Expect(0, 4255, '\P{Mymr}', "");
Expect(1, 4255, '\P{^Mymr}', "");
Expect(0, 4095, '\p{Mymr}', "");
Expect(1, 4095, '\p{^Mymr}', "");
Expect(1, 4095, '\P{Mymr}', "");
Expect(0, 4095, '\P{^Mymr}', "");
Error('\p{	is_Mymr:=}');
Error('\P{	is_Mymr:=}');
Expect(1, 4255, '\p{ismymr}', "");
Expect(0, 4255, '\p{^ismymr}', "");
Expect(0, 4255, '\P{ismymr}', "");
Expect(1, 4255, '\P{^ismymr}', "");
Expect(0, 4095, '\p{ismymr}', "");
Expect(1, 4095, '\p{^ismymr}', "");
Expect(1, 4095, '\P{ismymr}', "");
Expect(0, 4095, '\P{^ismymr}', "");
Expect(1, 4255, '\p{- ISMymr}', "");
Expect(0, 4255, '\p{^- ISMymr}', "");
Expect(0, 4255, '\P{- ISMymr}', "");
Expect(1, 4255, '\P{^- ISMymr}', "");
Expect(0, 4095, '\p{- ISMymr}', "");
Expect(1, 4095, '\p{^- ISMymr}', "");
Expect(1, 4095, '\P{- ISMymr}', "");
Expect(0, 4095, '\P{^- ISMymr}', "");
Error('\p{	:=initial_Punctuation}');
Error('\P{	:=initial_Punctuation}');
Expect(1, 171, '\p{initialpunctuation}', "");
Expect(0, 171, '\p{^initialpunctuation}', "");
Expect(0, 171, '\P{initialpunctuation}', "");
Expect(1, 171, '\P{^initialpunctuation}', "");
Expect(0, 170, '\p{initialpunctuation}', "");
Expect(1, 170, '\p{^initialpunctuation}', "");
Expect(1, 170, '\P{initialpunctuation}', "");
Expect(0, 170, '\P{^initialpunctuation}', "");
Expect(1, 171, '\p{	 Initial punctuation}', "");
Expect(0, 171, '\p{^	 Initial punctuation}', "");
Expect(0, 171, '\P{	 Initial punctuation}', "");
Expect(1, 171, '\P{^	 Initial punctuation}', "");
Expect(0, 170, '\p{	 Initial punctuation}', "");
Expect(1, 170, '\p{^	 Initial punctuation}', "");
Expect(1, 170, '\P{	 Initial punctuation}', "");
Expect(0, 170, '\P{^	 Initial punctuation}', "");
Error('\p{ -is_INITIAL/a/punctuation}');
Error('\P{ -is_INITIAL/a/punctuation}');
Expect(1, 171, '\p{isinitialpunctuation}', "");
Expect(0, 171, '\p{^isinitialpunctuation}', "");
Expect(0, 171, '\P{isinitialpunctuation}', "");
Expect(1, 171, '\P{^isinitialpunctuation}', "");
Expect(0, 170, '\p{isinitialpunctuation}', "");
Expect(1, 170, '\p{^isinitialpunctuation}', "");
Expect(1, 170, '\P{isinitialpunctuation}', "");
Expect(0, 170, '\P{^isinitialpunctuation}', "");
Expect(1, 171, '\p{	-Is	Initial Punctuation}', "");
Expect(0, 171, '\p{^	-Is	Initial Punctuation}', "");
Expect(0, 171, '\P{	-Is	Initial Punctuation}', "");
Expect(1, 171, '\P{^	-Is	Initial Punctuation}', "");
Expect(0, 170, '\p{	-Is	Initial Punctuation}', "");
Expect(1, 170, '\p{^	-Is	Initial Punctuation}', "");
Expect(1, 170, '\P{	-Is	Initial Punctuation}', "");
Expect(0, 170, '\P{^	-Is	Initial Punctuation}', "");
Error('\p{Pi/a/}');
Error('\P{Pi/a/}');
Expect(1, 171, '\p{pi}', "");
Expect(0, 171, '\p{^pi}', "");
Expect(0, 171, '\P{pi}', "");
Expect(1, 171, '\P{^pi}', "");
Expect(0, 170, '\p{pi}', "");
Expect(1, 170, '\p{^pi}', "");
Expect(1, 170, '\P{pi}', "");
Expect(0, 170, '\P{^pi}', "");
Expect(1, 171, '\p{	-Pi}', "");
Expect(0, 171, '\p{^	-Pi}', "");
Expect(0, 171, '\P{	-Pi}', "");
Expect(1, 171, '\P{^	-Pi}', "");
Expect(0, 170, '\p{	-Pi}', "");
Expect(1, 170, '\p{^	-Pi}', "");
Expect(1, 170, '\P{	-Pi}', "");
Expect(0, 170, '\P{^	-Pi}', "");
Error('\p{:=-IS pi}');
Error('\P{:=-IS pi}');
Expect(1, 171, '\p{ispi}', "");
Expect(0, 171, '\p{^ispi}', "");
Expect(0, 171, '\P{ispi}', "");
Expect(1, 171, '\P{^ispi}', "");
Expect(0, 170, '\p{ispi}', "");
Expect(1, 170, '\p{^ispi}', "");
Expect(1, 170, '\P{ispi}', "");
Expect(0, 170, '\P{^ispi}', "");
Expect(1, 171, '\p{ Is PI}', "");
Expect(0, 171, '\p{^ Is PI}', "");
Expect(0, 171, '\P{ Is PI}', "");
Expect(1, 171, '\P{^ Is PI}', "");
Expect(0, 170, '\p{ Is PI}', "");
Expect(1, 170, '\p{^ Is PI}', "");
Expect(1, 170, '\P{ Is PI}', "");
Expect(0, 170, '\P{^ Is PI}', "");
Error('\p{_:=Common}');
Error('\P{_:=Common}');
Expect(1, 64, '\p{common}', "");
Expect(0, 64, '\p{^common}', "");
Expect(0, 64, '\P{common}', "");
Expect(1, 64, '\P{^common}', "");
Expect(0, 90, '\p{common}', "");
Expect(1, 90, '\p{^common}', "");
Expect(1, 90, '\P{common}', "");
Expect(0, 90, '\P{^common}', "");
Expect(1, 64, '\p{_common}', "");
Expect(0, 64, '\p{^_common}', "");
Expect(0, 64, '\P{_common}', "");
Expect(1, 64, '\P{^_common}', "");
Expect(0, 90, '\p{_common}', "");
Expect(1, 90, '\p{^_common}', "");
Expect(1, 90, '\P{_common}', "");
Expect(0, 90, '\P{^_common}', "");
Error('\p{/a/IsCOMMON}');
Error('\P{/a/IsCOMMON}');
Expect(1, 64, '\p{iscommon}', "");
Expect(0, 64, '\p{^iscommon}', "");
Expect(0, 64, '\P{iscommon}', "");
Expect(1, 64, '\P{^iscommon}', "");
Expect(0, 90, '\p{iscommon}', "");
Expect(1, 90, '\p{^iscommon}', "");
Expect(1, 90, '\P{iscommon}', "");
Expect(0, 90, '\P{^iscommon}', "");
Expect(1, 64, '\p{  is	Common}', "");
Expect(0, 64, '\p{^  is	Common}', "");
Expect(0, 64, '\P{  is	Common}', "");
Expect(1, 64, '\P{^  is	Common}', "");
Expect(0, 90, '\p{  is	Common}', "");
Expect(1, 90, '\p{^  is	Common}', "");
Expect(1, 90, '\P{  is	Common}', "");
Expect(0, 90, '\P{^  is	Common}', "");
Error('\p{--Zyyy/a/}');
Error('\P{--Zyyy/a/}');
Expect(1, 64, '\p{zyyy}', "");
Expect(0, 64, '\p{^zyyy}', "");
Expect(0, 64, '\P{zyyy}', "");
Expect(1, 64, '\P{^zyyy}', "");
Expect(0, 90, '\p{zyyy}', "");
Expect(1, 90, '\p{^zyyy}', "");
Expect(1, 90, '\P{zyyy}', "");
Expect(0, 90, '\P{^zyyy}', "");
Expect(1, 64, '\p{ -Zyyy}', "");
Expect(0, 64, '\p{^ -Zyyy}', "");
Expect(0, 64, '\P{ -Zyyy}', "");
Expect(1, 64, '\P{^ -Zyyy}', "");
Expect(0, 90, '\p{ -Zyyy}', "");
Expect(1, 90, '\p{^ -Zyyy}', "");
Expect(1, 90, '\P{ -Zyyy}', "");
Expect(0, 90, '\P{^ -Zyyy}', "");
Error('\p{	_is	Zyyy:=}');
Error('\P{	_is	Zyyy:=}');
Expect(1, 64, '\p{iszyyy}', "");
Expect(0, 64, '\p{^iszyyy}', "");
Expect(0, 64, '\P{iszyyy}', "");
Expect(1, 64, '\P{^iszyyy}', "");
Expect(0, 90, '\p{iszyyy}', "");
Expect(1, 90, '\p{^iszyyy}', "");
Expect(1, 90, '\P{iszyyy}', "");
Expect(0, 90, '\P{^iszyyy}', "");
Expect(1, 64, '\p{	_Is-ZYYY}', "");
Expect(0, 64, '\p{^	_Is-ZYYY}', "");
Expect(0, 64, '\P{	_Is-ZYYY}', "");
Expect(1, 64, '\P{^	_Is-ZYYY}', "");
Expect(0, 90, '\p{	_Is-ZYYY}', "");
Expect(1, 90, '\p{^	_Is-ZYYY}', "");
Expect(1, 90, '\P{	_Is-ZYYY}', "");
Expect(0, 90, '\P{^	_Is-ZYYY}', "");
Error('\p{ hangul/a/Jamo}');
Error('\P{ hangul/a/Jamo}');
Expect(1, 4607, '\p{hanguljamo}', "");
Expect(0, 4607, '\p{^hanguljamo}', "");
Expect(0, 4607, '\P{hanguljamo}', "");
Expect(1, 4607, '\P{^hanguljamo}', "");
Expect(0, 4351, '\p{hanguljamo}', "");
Expect(1, 4351, '\p{^hanguljamo}', "");
Expect(1, 4351, '\P{hanguljamo}', "");
Expect(0, 4351, '\P{^hanguljamo}', "");
Expect(1, 4607, '\p{	-Hangul-Jamo}', "");
Expect(0, 4607, '\p{^	-Hangul-Jamo}', "");
Expect(0, 4607, '\P{	-Hangul-Jamo}', "");
Expect(1, 4607, '\P{^	-Hangul-Jamo}', "");
Expect(0, 4351, '\p{	-Hangul-Jamo}', "");
Expect(1, 4351, '\p{^	-Hangul-Jamo}', "");
Expect(1, 4351, '\P{	-Hangul-Jamo}', "");
Expect(0, 4351, '\P{^	-Hangul-Jamo}', "");
Error('\p{--IsHANGUL:=Jamo}');
Error('\P{--IsHANGUL:=Jamo}');
Expect(1, 4607, '\p{ishanguljamo}', "");
Expect(0, 4607, '\p{^ishanguljamo}', "");
Expect(0, 4607, '\P{ishanguljamo}', "");
Expect(1, 4607, '\P{^ishanguljamo}', "");
Expect(0, 4351, '\p{ishanguljamo}', "");
Expect(1, 4351, '\p{^ishanguljamo}', "");
Expect(1, 4351, '\P{ishanguljamo}', "");
Expect(0, 4351, '\P{^ishanguljamo}', "");
Expect(1, 4607, '\p{	Is Hangul-Jamo}', "");
Expect(0, 4607, '\p{^	Is Hangul-Jamo}', "");
Expect(0, 4607, '\P{	Is Hangul-Jamo}', "");
Expect(1, 4607, '\P{^	Is Hangul-Jamo}', "");
Expect(0, 4351, '\p{	Is Hangul-Jamo}', "");
Expect(1, 4351, '\p{^	Is Hangul-Jamo}', "");
Expect(1, 4351, '\P{	Is Hangul-Jamo}', "");
Expect(0, 4351, '\P{^	Is Hangul-Jamo}', "");
Error('\p{:=__in_Hangul-Jamo}');
Error('\P{:=__in_Hangul-Jamo}');
Expect(1, 4607, '\p{inhanguljamo}', "");
Expect(0, 4607, '\p{^inhanguljamo}', "");
Expect(0, 4607, '\P{inhanguljamo}', "");
Expect(1, 4607, '\P{^inhanguljamo}', "");
Expect(0, 4351, '\p{inhanguljamo}', "");
Expect(1, 4351, '\p{^inhanguljamo}', "");
Expect(1, 4351, '\P{inhanguljamo}', "");
Expect(0, 4351, '\P{^inhanguljamo}', "");
Expect(1, 4607, '\p{_	INhangul	JAMO}', "");
Expect(0, 4607, '\p{^_	INhangul	JAMO}', "");
Expect(0, 4607, '\P{_	INhangul	JAMO}', "");
Expect(1, 4607, '\P{^_	INhangul	JAMO}', "");
Expect(0, 4351, '\p{_	INhangul	JAMO}', "");
Expect(1, 4351, '\p{^_	INhangul	JAMO}', "");
Expect(1, 4351, '\P{_	INhangul	JAMO}', "");
Expect(0, 4351, '\P{^_	INhangul	JAMO}', "");
Error('\p{	:=changesWhen	lowercased}');
Error('\P{	:=changesWhen	lowercased}');
Expect(1, 90, '\p{changeswhenlowercased}', "");
Expect(0, 90, '\p{^changeswhenlowercased}', "");
Expect(0, 90, '\P{changeswhenlowercased}', "");
Expect(1, 90, '\P{^changeswhenlowercased}', "");
Expect(0, 64, '\p{changeswhenlowercased}', "");
Expect(1, 64, '\p{^changeswhenlowercased}', "");
Expect(1, 64, '\P{changeswhenlowercased}', "");
Expect(0, 64, '\P{^changeswhenlowercased}', "");
Expect(1, 90, '\p{_	CHANGES	WHENLowercased}', "");
Expect(0, 90, '\p{^_	CHANGES	WHENLowercased}', "");
Expect(0, 90, '\P{_	CHANGES	WHENLowercased}', "");
Expect(1, 90, '\P{^_	CHANGES	WHENLowercased}', "");
Expect(0, 64, '\p{_	CHANGES	WHENLowercased}', "");
Expect(1, 64, '\p{^_	CHANGES	WHENLowercased}', "");
Expect(1, 64, '\P{_	CHANGES	WHENLowercased}', "");
Expect(0, 64, '\P{^_	CHANGES	WHENLowercased}', "");
Error('\p{_Is/a/CHANGES WHENLowercased}');
Error('\P{_Is/a/CHANGES WHENLowercased}');
Expect(1, 90, '\p{ischangeswhenlowercased}', "");
Expect(0, 90, '\p{^ischangeswhenlowercased}', "");
Expect(0, 90, '\P{ischangeswhenlowercased}', "");
Expect(1, 90, '\P{^ischangeswhenlowercased}', "");
Expect(0, 64, '\p{ischangeswhenlowercased}', "");
Expect(1, 64, '\p{^ischangeswhenlowercased}', "");
Expect(1, 64, '\P{ischangeswhenlowercased}', "");
Expect(0, 64, '\P{^ischangeswhenlowercased}', "");
Expect(1, 90, '\p{_ ISCHANGES-When Lowercased}', "");
Expect(0, 90, '\p{^_ ISCHANGES-When Lowercased}', "");
Expect(0, 90, '\P{_ ISCHANGES-When Lowercased}', "");
Expect(1, 90, '\P{^_ ISCHANGES-When Lowercased}', "");
Expect(0, 64, '\p{_ ISCHANGES-When Lowercased}', "");
Expect(1, 64, '\p{^_ ISCHANGES-When Lowercased}', "");
Expect(1, 64, '\P{_ ISCHANGES-When Lowercased}', "");
Expect(0, 64, '\P{^_ ISCHANGES-When Lowercased}', "");
Error('\p{/a/_cwl}');
Error('\P{/a/_cwl}');
Expect(1, 90, '\p{cwl}', "");
Expect(0, 90, '\p{^cwl}', "");
Expect(0, 90, '\P{cwl}', "");
Expect(1, 90, '\P{^cwl}', "");
Expect(0, 64, '\p{cwl}', "");
Expect(1, 64, '\p{^cwl}', "");
Expect(1, 64, '\P{cwl}', "");
Expect(0, 64, '\P{^cwl}', "");
Expect(1, 90, '\p{	CWL}', "");
Expect(0, 90, '\p{^	CWL}', "");
Expect(0, 90, '\P{	CWL}', "");
Expect(1, 90, '\P{^	CWL}', "");
Expect(0, 64, '\p{	CWL}', "");
Expect(1, 64, '\p{^	CWL}', "");
Expect(1, 64, '\P{	CWL}', "");
Expect(0, 64, '\P{^	CWL}', "");
Error('\p{/a/ 	Is	CWL}');
Error('\P{/a/ 	Is	CWL}');
Expect(1, 90, '\p{iscwl}', "");
Expect(0, 90, '\p{^iscwl}', "");
Expect(0, 90, '\P{iscwl}', "");
Expect(1, 90, '\P{^iscwl}', "");
Expect(0, 64, '\p{iscwl}', "");
Expect(1, 64, '\p{^iscwl}', "");
Expect(1, 64, '\P{iscwl}', "");
Expect(0, 64, '\P{^iscwl}', "");
Expect(1, 90, '\p{_-IsCWL}', "");
Expect(0, 90, '\p{^_-IsCWL}', "");
Expect(0, 90, '\P{_-IsCWL}', "");
Expect(1, 90, '\P{^_-IsCWL}', "");
Expect(0, 64, '\p{_-IsCWL}', "");
Expect(1, 64, '\p{^_-IsCWL}', "");
Expect(1, 64, '\P{_-IsCWL}', "");
Expect(0, 64, '\P{^_-IsCWL}', "");
Error('\p{:= Canadian-ABORIGINAL}');
Error('\P{:= Canadian-ABORIGINAL}');
Expect(1, 5759, '\p{canadianaboriginal}', "");
Expect(0, 5759, '\p{^canadianaboriginal}', "");
Expect(0, 5759, '\P{canadianaboriginal}', "");
Expect(1, 5759, '\P{^canadianaboriginal}', "");
Expect(0, 5119, '\p{canadianaboriginal}', "");
Expect(1, 5119, '\p{^canadianaboriginal}', "");
Expect(1, 5119, '\P{canadianaboriginal}', "");
Expect(0, 5119, '\P{^canadianaboriginal}', "");
Expect(1, 5759, '\p{-_CANADIAN Aboriginal}', "");
Expect(0, 5759, '\p{^-_CANADIAN Aboriginal}', "");
Expect(0, 5759, '\P{-_CANADIAN Aboriginal}', "");
Expect(1, 5759, '\P{^-_CANADIAN Aboriginal}', "");
Expect(0, 5119, '\p{-_CANADIAN Aboriginal}', "");
Expect(1, 5119, '\p{^-_CANADIAN Aboriginal}', "");
Expect(1, 5119, '\P{-_CANADIAN Aboriginal}', "");
Expect(0, 5119, '\P{^-_CANADIAN Aboriginal}', "");
Error('\p{--isCanadian-Aboriginal:=}');
Error('\P{--isCanadian-Aboriginal:=}');
Expect(1, 5759, '\p{iscanadianaboriginal}', "");
Expect(0, 5759, '\p{^iscanadianaboriginal}', "");
Expect(0, 5759, '\P{iscanadianaboriginal}', "");
Expect(1, 5759, '\P{^iscanadianaboriginal}', "");
Expect(0, 5119, '\p{iscanadianaboriginal}', "");
Expect(1, 5119, '\p{^iscanadianaboriginal}', "");
Expect(1, 5119, '\P{iscanadianaboriginal}', "");
Expect(0, 5119, '\P{^iscanadianaboriginal}', "");
Expect(1, 5759, '\p{ 	IsCanadian aboriginal}', "");
Expect(0, 5759, '\p{^ 	IsCanadian aboriginal}', "");
Expect(0, 5759, '\P{ 	IsCanadian aboriginal}', "");
Expect(1, 5759, '\P{^ 	IsCanadian aboriginal}', "");
Expect(0, 5119, '\p{ 	IsCanadian aboriginal}', "");
Expect(1, 5119, '\p{^ 	IsCanadian aboriginal}', "");
Expect(1, 5119, '\P{ 	IsCanadian aboriginal}', "");
Expect(0, 5119, '\P{^ 	IsCanadian aboriginal}', "");
Error('\p{/a/CANS}');
Error('\P{/a/CANS}');
Expect(1, 5759, '\p{cans}', "");
Expect(0, 5759, '\p{^cans}', "");
Expect(0, 5759, '\P{cans}', "");
Expect(1, 5759, '\P{^cans}', "");
Expect(0, 5119, '\p{cans}', "");
Expect(1, 5119, '\p{^cans}', "");
Expect(1, 5119, '\P{cans}', "");
Expect(0, 5119, '\P{^cans}', "");
Expect(1, 5759, '\p{CANS}', "");
Expect(0, 5759, '\p{^CANS}', "");
Expect(0, 5759, '\P{CANS}', "");
Expect(1, 5759, '\P{^CANS}', "");
Expect(0, 5119, '\p{CANS}', "");
Expect(1, 5119, '\p{^CANS}', "");
Expect(1, 5119, '\P{CANS}', "");
Expect(0, 5119, '\P{^CANS}', "");
Error('\p{_:=is_CANS}');
Error('\P{_:=is_CANS}');
Expect(1, 5759, '\p{iscans}', "");
Expect(0, 5759, '\p{^iscans}', "");
Expect(0, 5759, '\P{iscans}', "");
Expect(1, 5759, '\P{^iscans}', "");
Expect(0, 5119, '\p{iscans}', "");
Expect(1, 5119, '\p{^iscans}', "");
Expect(1, 5119, '\P{iscans}', "");
Expect(0, 5119, '\P{^iscans}', "");
Expect(1, 5759, '\p{	_IS Cans}', "");
Expect(0, 5759, '\p{^	_IS Cans}', "");
Expect(0, 5759, '\P{	_IS Cans}', "");
Expect(1, 5759, '\P{^	_IS Cans}', "");
Expect(0, 5119, '\p{	_IS Cans}', "");
Expect(1, 5119, '\p{^	_IS Cans}', "");
Expect(1, 5119, '\P{	_IS Cans}', "");
Expect(0, 5119, '\P{^	_IS Cans}', "");
Error('\p{/a/__PATTERN-Syntax}');
Error('\P{/a/__PATTERN-Syntax}');
Expect(1, 47, '\p{patternsyntax}', "");
Expect(0, 47, '\p{^patternsyntax}', "");
Expect(0, 47, '\P{patternsyntax}', "");
Expect(1, 47, '\P{^patternsyntax}', "");
Expect(0, 32, '\p{patternsyntax}', "");
Expect(1, 32, '\p{^patternsyntax}', "");
Expect(1, 32, '\P{patternsyntax}', "");
Expect(0, 32, '\P{^patternsyntax}', "");
Expect(1, 47, '\p{	Pattern-Syntax}', "");
Expect(0, 47, '\p{^	Pattern-Syntax}', "");
Expect(0, 47, '\P{	Pattern-Syntax}', "");
Expect(1, 47, '\P{^	Pattern-Syntax}', "");
Expect(0, 32, '\p{	Pattern-Syntax}', "");
Expect(1, 32, '\p{^	Pattern-Syntax}', "");
Expect(1, 32, '\P{	Pattern-Syntax}', "");
Expect(0, 32, '\P{^	Pattern-Syntax}', "");
Error('\p{:=Is	PATTERN-syntax}');
Error('\P{:=Is	PATTERN-syntax}');
Expect(1, 47, '\p{ispatternsyntax}', "");
Expect(0, 47, '\p{^ispatternsyntax}', "");
Expect(0, 47, '\P{ispatternsyntax}', "");
Expect(1, 47, '\P{^ispatternsyntax}', "");
Expect(0, 32, '\p{ispatternsyntax}', "");
Expect(1, 32, '\p{^ispatternsyntax}', "");
Expect(1, 32, '\P{ispatternsyntax}', "");
Expect(0, 32, '\P{^ispatternsyntax}', "");
Expect(1, 47, '\p{--is-Pattern Syntax}', "");
Expect(0, 47, '\p{^--is-Pattern Syntax}', "");
Expect(0, 47, '\P{--is-Pattern Syntax}', "");
Expect(1, 47, '\P{^--is-Pattern Syntax}', "");
Expect(0, 32, '\p{--is-Pattern Syntax}', "");
Expect(1, 32, '\p{^--is-Pattern Syntax}', "");
Expect(1, 32, '\P{--is-Pattern Syntax}', "");
Expect(0, 32, '\P{^--is-Pattern Syntax}', "");
Error('\p{:= _Pat	Syn}');
Error('\P{:= _Pat	Syn}');
Expect(1, 47, '\p{patsyn}', "");
Expect(0, 47, '\p{^patsyn}', "");
Expect(0, 47, '\P{patsyn}', "");
Expect(1, 47, '\P{^patsyn}', "");
Expect(0, 32, '\p{patsyn}', "");
Expect(1, 32, '\p{^patsyn}', "");
Expect(1, 32, '\P{patsyn}', "");
Expect(0, 32, '\P{^patsyn}', "");
Expect(1, 47, '\p{pat	Syn}', "");
Expect(0, 47, '\p{^pat	Syn}', "");
Expect(0, 47, '\P{pat	Syn}', "");
Expect(1, 47, '\P{^pat	Syn}', "");
Expect(0, 32, '\p{pat	Syn}', "");
Expect(1, 32, '\p{^pat	Syn}', "");
Expect(1, 32, '\P{pat	Syn}', "");
Expect(0, 32, '\P{^pat	Syn}', "");
Error('\p{-_Is/a/pat	syn}');
Error('\P{-_Is/a/pat	syn}');
Expect(1, 47, '\p{ispatsyn}', "");
Expect(0, 47, '\p{^ispatsyn}', "");
Expect(0, 47, '\P{ispatsyn}', "");
Expect(1, 47, '\P{^ispatsyn}', "");
Expect(0, 32, '\p{ispatsyn}', "");
Expect(1, 32, '\p{^ispatsyn}', "");
Expect(1, 32, '\P{ispatsyn}', "");
Expect(0, 32, '\P{^ispatsyn}', "");
Expect(1, 47, '\p{-_Is-Pat	Syn}', "");
Expect(0, 47, '\p{^-_Is-Pat	Syn}', "");
Expect(0, 47, '\P{-_Is-Pat	Syn}', "");
Expect(1, 47, '\P{^-_Is-Pat	Syn}', "");
Expect(0, 32, '\p{-_Is-Pat	Syn}', "");
Expect(1, 32, '\p{^-_Is-Pat	Syn}', "");
Expect(1, 32, '\P{-_Is-Pat	Syn}', "");
Expect(0, 32, '\P{^-_Is-Pat	Syn}', "");
Error('\p{_:=OTHER}');
Error('\P{_:=OTHER}');
Expect(1, 31, '\p{other}', "");
Expect(0, 31, '\p{^other}', "");
Expect(0, 31, '\P{other}', "");
Expect(1, 31, '\P{^other}', "");
Expect(0, 126, '\p{other}', "");
Expect(1, 126, '\p{^other}', "");
Expect(1, 126, '\P{other}', "");
Expect(0, 126, '\P{^other}', "");
Expect(1, 31, '\p{-_Other}', "");
Expect(0, 31, '\p{^-_Other}', "");
Expect(0, 31, '\P{-_Other}', "");
Expect(1, 31, '\P{^-_Other}', "");
Expect(0, 126, '\p{-_Other}', "");
Expect(1, 126, '\p{^-_Other}', "");
Expect(1, 126, '\P{-_Other}', "");
Expect(0, 126, '\P{^-_Other}', "");
Error('\p{is OTHER/a/}');
Error('\P{is OTHER/a/}');
Expect(1, 31, '\p{isother}', "");
Expect(0, 31, '\p{^isother}', "");
Expect(0, 31, '\P{isother}', "");
Expect(1, 31, '\P{^isother}', "");
Expect(0, 126, '\p{isother}', "");
Expect(1, 126, '\p{^isother}', "");
Expect(1, 126, '\P{isother}', "");
Expect(0, 126, '\P{^isother}', "");
Expect(1, 31, '\p{		IS other}', "");
Expect(0, 31, '\p{^		IS other}', "");
Expect(0, 31, '\P{		IS other}', "");
Expect(1, 31, '\P{^		IS other}', "");
Expect(0, 126, '\p{		IS other}', "");
Expect(1, 126, '\p{^		IS other}', "");
Expect(1, 126, '\P{		IS other}', "");
Expect(0, 126, '\P{^		IS other}', "");
Error('\p{_-C:=}');
Error('\P{_-C:=}');
Expect(1, 31, '\p{c}', "");
Expect(0, 31, '\p{^c}', "");
Expect(0, 31, '\P{c}', "");
Expect(1, 31, '\P{^c}', "");
Expect(0, 126, '\p{c}', "");
Expect(1, 126, '\p{^c}', "");
Expect(1, 126, '\P{c}', "");
Expect(0, 126, '\P{^c}', "");
Expect(1, 31, '\p{	-C}', "");
Expect(0, 31, '\p{^	-C}', "");
Expect(0, 31, '\P{	-C}', "");
Expect(1, 31, '\P{^	-C}', "");
Expect(0, 126, '\p{	-C}', "");
Expect(1, 126, '\p{^	-C}', "");
Expect(1, 126, '\P{	-C}', "");
Expect(0, 126, '\P{^	-C}', "");
Error('\p{_ Is/a/C}');
Error('\P{_ Is/a/C}');
Expect(1, 31, '\p{isc}', "");
Expect(0, 31, '\p{^isc}', "");
Expect(0, 31, '\P{isc}', "");
Expect(1, 31, '\P{^isc}', "");
Expect(0, 126, '\p{isc}', "");
Expect(1, 126, '\p{^isc}', "");
Expect(1, 126, '\P{isc}', "");
Expect(0, 126, '\P{^isc}', "");
Expect(1, 31, '\p{	-Isc}', "");
Expect(0, 31, '\p{^	-Isc}', "");
Expect(0, 31, '\P{	-Isc}', "");
Expect(1, 31, '\P{^	-Isc}', "");
Expect(0, 126, '\p{	-Isc}', "");
Expect(1, 126, '\p{^	-Isc}', "");
Expect(1, 126, '\P{	-Isc}', "");
Expect(0, 126, '\P{^	-Isc}', "");
Error('\p{/a/_Variationselector}');
Error('\P{/a/_Variationselector}');
Expect(1, 6157, '\p{variationselector}', "");
Expect(0, 6157, '\p{^variationselector}', "");
Expect(0, 6157, '\P{variationselector}', "");
Expect(1, 6157, '\P{^variationselector}', "");
Expect(0, 6154, '\p{variationselector}', "");
Expect(1, 6154, '\p{^variationselector}', "");
Expect(1, 6154, '\P{variationselector}', "");
Expect(0, 6154, '\P{^variationselector}', "");
Expect(1, 6157, '\p{_ Variation-selector}', "");
Expect(0, 6157, '\p{^_ Variation-selector}', "");
Expect(0, 6157, '\P{_ Variation-selector}', "");
Expect(1, 6157, '\P{^_ Variation-selector}', "");
Expect(0, 6154, '\p{_ Variation-selector}', "");
Expect(1, 6154, '\p{^_ Variation-selector}', "");
Expect(1, 6154, '\P{_ Variation-selector}', "");
Expect(0, 6154, '\P{^_ Variation-selector}', "");
Error('\p{- isvariationSelector/a/}');
Error('\P{- isvariationSelector/a/}');
Expect(1, 6157, '\p{isvariationselector}', "");
Expect(0, 6157, '\p{^isvariationselector}', "");
Expect(0, 6157, '\P{isvariationselector}', "");
Expect(1, 6157, '\P{^isvariationselector}', "");
Expect(0, 6154, '\p{isvariationselector}', "");
Expect(1, 6154, '\p{^isvariationselector}', "");
Expect(1, 6154, '\P{isvariationselector}', "");
Expect(0, 6154, '\P{^isvariationselector}', "");
Expect(1, 6157, '\p{_IS-Variation_Selector}', "");
Expect(0, 6157, '\p{^_IS-Variation_Selector}', "");
Expect(0, 6157, '\P{_IS-Variation_Selector}', "");
Expect(1, 6157, '\P{^_IS-Variation_Selector}', "");
Expect(0, 6154, '\p{_IS-Variation_Selector}', "");
Expect(1, 6154, '\p{^_IS-Variation_Selector}', "");
Expect(1, 6154, '\P{_IS-Variation_Selector}', "");
Expect(0, 6154, '\P{^_IS-Variation_Selector}', "");
Error('\p{:= VS}');
Error('\P{:= VS}');
Expect(1, 6157, '\p{vs}', "");
Expect(0, 6157, '\p{^vs}', "");
Expect(0, 6157, '\P{vs}', "");
Expect(1, 6157, '\P{^vs}', "");
Expect(0, 6154, '\p{vs}', "");
Expect(1, 6154, '\p{^vs}', "");
Expect(1, 6154, '\P{vs}', "");
Expect(0, 6154, '\P{^vs}', "");
Expect(1, 6157, '\p{-vs}', "");
Expect(0, 6157, '\p{^-vs}', "");
Expect(0, 6157, '\P{-vs}', "");
Expect(1, 6157, '\P{^-vs}', "");
Expect(0, 6154, '\p{-vs}', "");
Expect(1, 6154, '\p{^-vs}', "");
Expect(1, 6154, '\P{-vs}', "");
Expect(0, 6154, '\P{^-vs}', "");
Error('\p{-:=IS VS}');
Error('\P{-:=IS VS}');
Expect(1, 6157, '\p{isvs}', "");
Expect(0, 6157, '\p{^isvs}', "");
Expect(0, 6157, '\P{isvs}', "");
Expect(1, 6157, '\P{^isvs}', "");
Expect(0, 6154, '\p{isvs}', "");
Expect(1, 6154, '\p{^isvs}', "");
Expect(1, 6154, '\P{isvs}', "");
Expect(0, 6154, '\P{^isvs}', "");
Expect(1, 6157, '\p{-	Is-VS}', "");
Expect(0, 6157, '\p{^-	Is-VS}', "");
Expect(0, 6157, '\P{-	Is-VS}', "");
Expect(1, 6157, '\P{^-	Is-VS}', "");
Expect(0, 6154, '\p{-	Is-VS}', "");
Expect(1, 6154, '\p{^-	Is-VS}', "");
Expect(1, 6154, '\P{-	Is-VS}', "");
Expect(0, 6154, '\P{^-	Is-VS}', "");
Error('\p{:=-	Cypriot SYLLABARY}');
Error('\P{:=-	Cypriot SYLLABARY}');
Expect(1, 67647, '\p{cypriotsyllabary}', "");
Expect(0, 67647, '\p{^cypriotsyllabary}', "");
Expect(0, 67647, '\P{cypriotsyllabary}', "");
Expect(1, 67647, '\P{^cypriotsyllabary}', "");
Expect(0, 67583, '\p{cypriotsyllabary}', "");
Expect(1, 67583, '\p{^cypriotsyllabary}', "");
Expect(1, 67583, '\P{cypriotsyllabary}', "");
Expect(0, 67583, '\P{^cypriotsyllabary}', "");
Expect(1, 67647, '\p{__Cypriot syllabary}', "");
Expect(0, 67647, '\p{^__Cypriot syllabary}', "");
Expect(0, 67647, '\P{__Cypriot syllabary}', "");
Expect(1, 67647, '\P{^__Cypriot syllabary}', "");
Expect(0, 67583, '\p{__Cypriot syllabary}', "");
Expect(1, 67583, '\p{^__Cypriot syllabary}', "");
Expect(1, 67583, '\P{__Cypriot syllabary}', "");
Expect(0, 67583, '\P{^__Cypriot syllabary}', "");
Error('\p{	_IS:=CYPRIOT	Syllabary}');
Error('\P{	_IS:=CYPRIOT	Syllabary}');
Expect(1, 67647, '\p{iscypriotsyllabary}', "");
Expect(0, 67647, '\p{^iscypriotsyllabary}', "");
Expect(0, 67647, '\P{iscypriotsyllabary}', "");
Expect(1, 67647, '\P{^iscypriotsyllabary}', "");
Expect(0, 67583, '\p{iscypriotsyllabary}', "");
Expect(1, 67583, '\p{^iscypriotsyllabary}', "");
Expect(1, 67583, '\P{iscypriotsyllabary}', "");
Expect(0, 67583, '\P{^iscypriotsyllabary}', "");
Expect(1, 67647, '\p{- isCYPRIOT	SYLLABARY}', "");
Expect(0, 67647, '\p{^- isCYPRIOT	SYLLABARY}', "");
Expect(0, 67647, '\P{- isCYPRIOT	SYLLABARY}', "");
Expect(1, 67647, '\P{^- isCYPRIOT	SYLLABARY}', "");
Expect(0, 67583, '\p{- isCYPRIOT	SYLLABARY}', "");
Expect(1, 67583, '\p{^- isCYPRIOT	SYLLABARY}', "");
Expect(1, 67583, '\P{- isCYPRIOT	SYLLABARY}', "");
Expect(0, 67583, '\P{^- isCYPRIOT	SYLLABARY}', "");
Error('\p{	:=In cypriot	Syllabary}');
Error('\P{	:=In cypriot	Syllabary}');
Expect(1, 67647, '\p{incypriotsyllabary}', "");
Expect(0, 67647, '\p{^incypriotsyllabary}', "");
Expect(0, 67647, '\P{incypriotsyllabary}', "");
Expect(1, 67647, '\P{^incypriotsyllabary}', "");
Expect(0, 67583, '\p{incypriotsyllabary}', "");
Expect(1, 67583, '\p{^incypriotsyllabary}', "");
Expect(1, 67583, '\P{incypriotsyllabary}', "");
Expect(0, 67583, '\P{^incypriotsyllabary}', "");
Expect(1, 67647, '\p{ in Cypriot-Syllabary}', "");
Expect(0, 67647, '\p{^ in Cypriot-Syllabary}', "");
Expect(0, 67647, '\P{ in Cypriot-Syllabary}', "");
Expect(1, 67647, '\P{^ in Cypriot-Syllabary}', "");
Expect(0, 67583, '\p{ in Cypriot-Syllabary}', "");
Expect(1, 67583, '\p{^ in Cypriot-Syllabary}', "");
Expect(1, 67583, '\P{ in Cypriot-Syllabary}', "");
Expect(0, 67583, '\P{^ in Cypriot-Syllabary}', "");
Error('\p{:=	Coptic}');
Error('\P{:=	Coptic}');
Expect(1, 1007, '\p{coptic}', "");
Expect(0, 1007, '\p{^coptic}', "");
Expect(0, 1007, '\P{coptic}', "");
Expect(1, 1007, '\P{^coptic}', "");
Expect(0, 993, '\p{coptic}', "");
Expect(1, 993, '\p{^coptic}', "");
Expect(1, 993, '\P{coptic}', "");
Expect(0, 993, '\P{^coptic}', "");
Expect(1, 1007, '\p{-Coptic}', "");
Expect(0, 1007, '\p{^-Coptic}', "");
Expect(0, 1007, '\P{-Coptic}', "");
Expect(1, 1007, '\P{^-Coptic}', "");
Expect(0, 993, '\p{-Coptic}', "");
Expect(1, 993, '\p{^-Coptic}', "");
Expect(1, 993, '\P{-Coptic}', "");
Expect(0, 993, '\P{^-Coptic}', "");
Error('\p{_	IsCoptic/a/}');
Error('\P{_	IsCoptic/a/}');
Expect(1, 1007, '\p{iscoptic}', "");
Expect(0, 1007, '\p{^iscoptic}', "");
Expect(0, 1007, '\P{iscoptic}', "");
Expect(1, 1007, '\P{^iscoptic}', "");
Expect(0, 993, '\p{iscoptic}', "");
Expect(1, 993, '\p{^iscoptic}', "");
Expect(1, 993, '\P{iscoptic}', "");
Expect(0, 993, '\P{^iscoptic}', "");
Expect(1, 1007, '\p{--IS_coptic}', "");
Expect(0, 1007, '\p{^--IS_coptic}', "");
Expect(0, 1007, '\P{--IS_coptic}', "");
Expect(1, 1007, '\P{^--IS_coptic}', "");
Expect(0, 993, '\p{--IS_coptic}', "");
Expect(1, 993, '\p{^--IS_coptic}', "");
Expect(1, 993, '\P{--IS_coptic}', "");
Expect(0, 993, '\P{^--IS_coptic}', "");
Error('\p{_	copt/a/}');
Error('\P{_	copt/a/}');
Expect(1, 1007, '\p{copt}', "");
Expect(0, 1007, '\p{^copt}', "");
Expect(0, 1007, '\P{copt}', "");
Expect(1, 1007, '\P{^copt}', "");
Expect(0, 993, '\p{copt}', "");
Expect(1, 993, '\p{^copt}', "");
Expect(1, 993, '\P{copt}', "");
Expect(0, 993, '\P{^copt}', "");
Expect(1, 1007, '\p{	_copt}', "");
Expect(0, 1007, '\p{^	_copt}', "");
Expect(0, 1007, '\P{	_copt}', "");
Expect(1, 1007, '\P{^	_copt}', "");
Expect(0, 993, '\p{	_copt}', "");
Expect(1, 993, '\p{^	_copt}', "");
Expect(1, 993, '\P{	_copt}', "");
Expect(0, 993, '\P{^	_copt}', "");
Error('\p{-:=IsCopt}');
Error('\P{-:=IsCopt}');
Expect(1, 1007, '\p{iscopt}', "");
Expect(0, 1007, '\p{^iscopt}', "");
Expect(0, 1007, '\P{iscopt}', "");
Expect(1, 1007, '\P{^iscopt}', "");
Expect(0, 993, '\p{iscopt}', "");
Expect(1, 993, '\p{^iscopt}', "");
Expect(1, 993, '\P{iscopt}', "");
Expect(0, 993, '\P{^iscopt}', "");
Expect(1, 1007, '\p{ is Copt}', "");
Expect(0, 1007, '\p{^ is Copt}', "");
Expect(0, 1007, '\P{ is Copt}', "");
Expect(1, 1007, '\P{^ is Copt}', "");
Expect(0, 993, '\p{ is Copt}', "");
Expect(1, 993, '\p{^ is Copt}', "");
Expect(1, 993, '\P{ is Copt}', "");
Expect(0, 993, '\P{^ is Copt}', "");
Error('\p{ 	QAAC/a/}');
Error('\P{ 	QAAC/a/}');
Expect(1, 1007, '\p{qaac}', "");
Expect(0, 1007, '\p{^qaac}', "");
Expect(0, 1007, '\P{qaac}', "");
Expect(1, 1007, '\P{^qaac}', "");
Expect(0, 993, '\p{qaac}', "");
Expect(1, 993, '\p{^qaac}', "");
Expect(1, 993, '\P{qaac}', "");
Expect(0, 993, '\P{^qaac}', "");
Expect(1, 1007, '\p{	qaac}', "");
Expect(0, 1007, '\p{^	qaac}', "");
Expect(0, 1007, '\P{	qaac}', "");
Expect(1, 1007, '\P{^	qaac}', "");
Expect(0, 993, '\p{	qaac}', "");
Expect(1, 993, '\p{^	qaac}', "");
Expect(1, 993, '\P{	qaac}', "");
Expect(0, 993, '\P{^	qaac}', "");
Error('\p{:=- Is-Qaac}');
Error('\P{:=- Is-Qaac}');
Expect(1, 1007, '\p{isqaac}', "");
Expect(0, 1007, '\p{^isqaac}', "");
Expect(0, 1007, '\P{isqaac}', "");
Expect(1, 1007, '\P{^isqaac}', "");
Expect(0, 993, '\p{isqaac}', "");
Expect(1, 993, '\p{^isqaac}', "");
Expect(1, 993, '\P{isqaac}', "");
Expect(0, 993, '\P{^isqaac}', "");
Expect(1, 1007, '\p{-isQaac}', "");
Expect(0, 1007, '\p{^-isQaac}', "");
Expect(0, 1007, '\P{-isQaac}', "");
Expect(1, 1007, '\P{^-isQaac}', "");
Expect(0, 993, '\p{-isQaac}', "");
Expect(1, 993, '\p{^-isQaac}', "");
Expect(1, 993, '\P{-isQaac}', "");
Expect(0, 993, '\P{^-isQaac}', "");
Error('\p{:=_SUPPLEMENTALARROWSB}');
Error('\P{:=_SUPPLEMENTALARROWSB}');
Expect(1, 10623, '\p{supplementalarrowsb}', "");
Expect(0, 10623, '\p{^supplementalarrowsb}', "");
Expect(0, 10623, '\P{supplementalarrowsb}', "");
Expect(1, 10623, '\P{^supplementalarrowsb}', "");
Expect(0, 10495, '\p{supplementalarrowsb}', "");
Expect(1, 10495, '\p{^supplementalarrowsb}', "");
Expect(1, 10495, '\P{supplementalarrowsb}', "");
Expect(0, 10495, '\P{^supplementalarrowsb}', "");
Expect(1, 10623, '\p{SupplementalARROWS b}', "");
Expect(0, 10623, '\p{^SupplementalARROWS b}', "");
Expect(0, 10623, '\P{SupplementalARROWS b}', "");
Expect(1, 10623, '\P{^SupplementalARROWS b}', "");
Expect(0, 10495, '\p{SupplementalARROWS b}', "");
Expect(1, 10495, '\p{^SupplementalARROWS b}', "");
Expect(1, 10495, '\P{SupplementalARROWS b}', "");
Expect(0, 10495, '\P{^SupplementalARROWS b}', "");
Error('\p{	Is Supplemental-ARROWS:=B}');
Error('\P{	Is Supplemental-ARROWS:=B}');
Expect(1, 10623, '\p{issupplementalarrowsb}', "");
Expect(0, 10623, '\p{^issupplementalarrowsb}', "");
Expect(0, 10623, '\P{issupplementalarrowsb}', "");
Expect(1, 10623, '\P{^issupplementalarrowsb}', "");
Expect(0, 10495, '\p{issupplementalarrowsb}', "");
Expect(1, 10495, '\p{^issupplementalarrowsb}', "");
Expect(1, 10495, '\P{issupplementalarrowsb}', "");
Expect(0, 10495, '\P{^issupplementalarrowsb}', "");
Expect(1, 10623, '\p{_ is_supplementalARROWS b}', "");
Expect(0, 10623, '\p{^_ is_supplementalARROWS b}', "");
Expect(0, 10623, '\P{_ is_supplementalARROWS b}', "");
Expect(1, 10623, '\P{^_ is_supplementalARROWS b}', "");
Expect(0, 10495, '\p{_ is_supplementalARROWS b}', "");
Expect(1, 10495, '\p{^_ is_supplementalARROWS b}', "");
Expect(1, 10495, '\P{_ is_supplementalARROWS b}', "");
Expect(0, 10495, '\P{^_ is_supplementalARROWS b}', "");
Error('\p{/a/inSupplementalArrows	b}');
Error('\P{/a/inSupplementalArrows	b}');
Expect(1, 10623, '\p{insupplementalarrowsb}', "");
Expect(0, 10623, '\p{^insupplementalarrowsb}', "");
Expect(0, 10623, '\P{insupplementalarrowsb}', "");
Expect(1, 10623, '\P{^insupplementalarrowsb}', "");
Expect(0, 10495, '\p{insupplementalarrowsb}', "");
Expect(1, 10495, '\p{^insupplementalarrowsb}', "");
Expect(1, 10495, '\P{insupplementalarrowsb}', "");
Expect(0, 10495, '\P{^insupplementalarrowsb}', "");
Expect(1, 10623, '\p{_ In SUPPLEMENTALARROWS b}', "");
Expect(0, 10623, '\p{^_ In SUPPLEMENTALARROWS b}', "");
Expect(0, 10623, '\P{_ In SUPPLEMENTALARROWS b}', "");
Expect(1, 10623, '\P{^_ In SUPPLEMENTALARROWS b}', "");
Expect(0, 10495, '\p{_ In SUPPLEMENTALARROWS b}', "");
Expect(1, 10495, '\p{^_ In SUPPLEMENTALARROWS b}', "");
Expect(1, 10495, '\P{_ In SUPPLEMENTALARROWS b}', "");
Expect(0, 10495, '\P{^_ In SUPPLEMENTALARROWS b}', "");
Error('\p{Expands_On_NFC}');
Error('\P{Expands_On_NFC}');
Error('\p{Is_Expands_On_NFC}');
Error('\P{Is_Expands_On_NFC}');
Error('\p{XO_NFC}');
Error('\P{XO_NFC}');
Error('\p{Is_XO_NFC}');
Error('\P{Is_XO_NFC}');
Error('\p{:=inherited}');
Error('\P{:=inherited}');
Expect(1, 879, '\p{inherited}', "");
Expect(0, 879, '\p{^inherited}', "");
Expect(0, 879, '\P{inherited}', "");
Expect(1, 879, '\P{^inherited}', "");
Expect(0, 767, '\p{inherited}', "");
Expect(1, 767, '\p{^inherited}', "");
Expect(1, 767, '\P{inherited}', "");
Expect(0, 767, '\P{^inherited}', "");
Expect(1, 879, '\p{_ Inherited}', "");
Expect(0, 879, '\p{^_ Inherited}', "");
Expect(0, 879, '\P{_ Inherited}', "");
Expect(1, 879, '\P{^_ Inherited}', "");
Expect(0, 767, '\p{_ Inherited}', "");
Expect(1, 767, '\p{^_ Inherited}', "");
Expect(1, 767, '\P{_ Inherited}', "");
Expect(0, 767, '\P{^_ Inherited}', "");
Error('\p{_IS/a/inherited}');
Error('\P{_IS/a/inherited}');
Expect(1, 879, '\p{isinherited}', "");
Expect(0, 879, '\p{^isinherited}', "");
Expect(0, 879, '\P{isinherited}', "");
Expect(1, 879, '\P{^isinherited}', "");
Expect(0, 767, '\p{isinherited}', "");
Expect(1, 767, '\p{^isinherited}', "");
Expect(1, 767, '\P{isinherited}', "");
Expect(0, 767, '\P{^isinherited}', "");
Expect(1, 879, '\p{	-ISInherited}', "");
Expect(0, 879, '\p{^	-ISInherited}', "");
Expect(0, 879, '\P{	-ISInherited}', "");
Expect(1, 879, '\P{^	-ISInherited}', "");
Expect(0, 767, '\p{	-ISInherited}', "");
Expect(1, 767, '\p{^	-ISInherited}', "");
Expect(1, 767, '\P{	-ISInherited}', "");
Expect(0, 767, '\P{^	-ISInherited}', "");
Error('\p{:= Zinh}');
Error('\P{:= Zinh}');
Expect(1, 879, '\p{zinh}', "");
Expect(0, 879, '\p{^zinh}', "");
Expect(0, 879, '\P{zinh}', "");
Expect(1, 879, '\P{^zinh}', "");
Expect(0, 767, '\p{zinh}', "");
Expect(1, 767, '\p{^zinh}', "");
Expect(1, 767, '\P{zinh}', "");
Expect(0, 767, '\P{^zinh}', "");
Expect(1, 879, '\p{_	ZINH}', "");
Expect(0, 879, '\p{^_	ZINH}', "");
Expect(0, 879, '\P{_	ZINH}', "");
Expect(1, 879, '\P{^_	ZINH}', "");
Expect(0, 767, '\p{_	ZINH}', "");
Expect(1, 767, '\p{^_	ZINH}', "");
Expect(1, 767, '\P{_	ZINH}', "");
Expect(0, 767, '\P{^_	ZINH}', "");
Error('\p{:= is Zinh}');
Error('\P{:= is Zinh}');
Expect(1, 879, '\p{iszinh}', "");
Expect(0, 879, '\p{^iszinh}', "");
Expect(0, 879, '\P{iszinh}', "");
Expect(1, 879, '\P{^iszinh}', "");
Expect(0, 767, '\p{iszinh}', "");
Expect(1, 767, '\p{^iszinh}', "");
Expect(1, 767, '\P{iszinh}', "");
Expect(0, 767, '\P{^iszinh}', "");
Expect(1, 879, '\p{__Iszinh}', "");
Expect(0, 879, '\p{^__Iszinh}', "");
Expect(0, 879, '\P{__Iszinh}', "");
Expect(1, 879, '\P{^__Iszinh}', "");
Expect(0, 767, '\p{__Iszinh}', "");
Expect(1, 767, '\p{^__Iszinh}', "");
Expect(1, 767, '\P{__Iszinh}', "");
Expect(0, 767, '\P{^__Iszinh}', "");
Error('\p{_:=Qaai}');
Error('\P{_:=Qaai}');
Expect(1, 879, '\p{qaai}', "");
Expect(0, 879, '\p{^qaai}', "");
Expect(0, 879, '\P{qaai}', "");
Expect(1, 879, '\P{^qaai}', "");
Expect(0, 767, '\p{qaai}', "");
Expect(1, 767, '\p{^qaai}', "");
Expect(1, 767, '\P{qaai}', "");
Expect(0, 767, '\P{^qaai}', "");
Expect(1, 879, '\p{_Qaai}', "");
Expect(0, 879, '\p{^_Qaai}', "");
Expect(0, 879, '\P{_Qaai}', "");
Expect(1, 879, '\P{^_Qaai}', "");
Expect(0, 767, '\p{_Qaai}', "");
Expect(1, 767, '\p{^_Qaai}', "");
Expect(1, 767, '\P{_Qaai}', "");
Expect(0, 767, '\P{^_Qaai}', "");
Error('\p{ IS/a/qaai}');
Error('\P{ IS/a/qaai}');
Expect(1, 879, '\p{isqaai}', "");
Expect(0, 879, '\p{^isqaai}', "");
Expect(0, 879, '\P{isqaai}', "");
Expect(1, 879, '\P{^isqaai}', "");
Expect(0, 767, '\p{isqaai}', "");
Expect(1, 767, '\p{^isqaai}', "");
Expect(1, 767, '\P{isqaai}', "");
Expect(0, 767, '\P{^isqaai}', "");
Expect(1, 879, '\p{ Is QAAI}', "");
Expect(0, 879, '\p{^ Is QAAI}', "");
Expect(0, 879, '\P{ Is QAAI}', "");
Expect(1, 879, '\P{^ Is QAAI}', "");
Expect(0, 767, '\p{ Is QAAI}', "");
Expect(1, 767, '\p{^ Is QAAI}', "");
Expect(1, 767, '\P{ Is QAAI}', "");
Expect(0, 767, '\P{^ Is QAAI}', "");
Error('\p{/a/_Other_math}');
Error('\P{/a/_Other_math}');
Expect(1, 94, '\p{othermath}', 'deprecated');
Expect(0, 94, '\p{^othermath}', 'deprecated');
Expect(0, 94, '\P{othermath}', 'deprecated');
Expect(1, 94, '\P{^othermath}', 'deprecated');
Expect(0, 93, '\p{othermath}', 'deprecated');
Expect(1, 93, '\p{^othermath}', 'deprecated');
Expect(1, 93, '\P{othermath}', 'deprecated');
Expect(0, 93, '\P{^othermath}', 'deprecated');
Expect(1, 94, '\p{-	Other	MATH}', 'deprecated');
Expect(0, 94, '\p{^-	Other	MATH}', 'deprecated');
Expect(0, 94, '\P{-	Other	MATH}', 'deprecated');
Expect(1, 94, '\P{^-	Other	MATH}', 'deprecated');
Expect(0, 93, '\p{-	Other	MATH}', 'deprecated');
Expect(1, 93, '\p{^-	Other	MATH}', 'deprecated');
Expect(1, 93, '\P{-	Other	MATH}', 'deprecated');
Expect(0, 93, '\P{^-	Other	MATH}', 'deprecated');
Error('\p{ Is	other	MATH/a/}');
Error('\P{ Is	other	MATH/a/}');
Expect(1, 94, '\p{isothermath}', 'deprecated');
Expect(0, 94, '\p{^isothermath}', 'deprecated');
Expect(0, 94, '\P{isothermath}', 'deprecated');
Expect(1, 94, '\P{^isothermath}', 'deprecated');
Expect(0, 93, '\p{isothermath}', 'deprecated');
Expect(1, 93, '\p{^isothermath}', 'deprecated');
Expect(1, 93, '\P{isothermath}', 'deprecated');
Expect(0, 93, '\P{^isothermath}', 'deprecated');
Expect(1, 94, '\p{	is-Other Math}', 'deprecated');
Expect(0, 94, '\p{^	is-Other Math}', 'deprecated');
Expect(0, 94, '\P{	is-Other Math}', 'deprecated');
Expect(1, 94, '\P{^	is-Other Math}', 'deprecated');
Expect(0, 93, '\p{	is-Other Math}', 'deprecated');
Expect(1, 93, '\p{^	is-Other Math}', 'deprecated');
Expect(1, 93, '\P{	is-Other Math}', 'deprecated');
Expect(0, 93, '\P{^	is-Other Math}', 'deprecated');
Error('\p{ /a/OMath}');
Error('\P{ /a/OMath}');
Expect(1, 94, '\p{omath}', 'deprecated');
Expect(0, 94, '\p{^omath}', 'deprecated');
Expect(0, 94, '\P{omath}', 'deprecated');
Expect(1, 94, '\P{^omath}', 'deprecated');
Expect(0, 93, '\p{omath}', 'deprecated');
Expect(1, 93, '\p{^omath}', 'deprecated');
Expect(1, 93, '\P{omath}', 'deprecated');
Expect(0, 93, '\P{^omath}', 'deprecated');
Expect(1, 94, '\p{-OMath}', 'deprecated');
Expect(0, 94, '\p{^-OMath}', 'deprecated');
Expect(0, 94, '\P{-OMath}', 'deprecated');
Expect(1, 94, '\P{^-OMath}', 'deprecated');
Expect(0, 93, '\p{-OMath}', 'deprecated');
Expect(1, 93, '\p{^-OMath}', 'deprecated');
Expect(1, 93, '\P{-OMath}', 'deprecated');
Expect(0, 93, '\P{^-OMath}', 'deprecated');
Error('\p{_:=Is	OMath}');
Error('\P{_:=Is	OMath}');
Expect(1, 94, '\p{isomath}', 'deprecated');
Expect(0, 94, '\p{^isomath}', 'deprecated');
Expect(0, 94, '\P{isomath}', 'deprecated');
Expect(1, 94, '\P{^isomath}', 'deprecated');
Expect(0, 93, '\p{isomath}', 'deprecated');
Expect(1, 93, '\p{^isomath}', 'deprecated');
Expect(1, 93, '\P{isomath}', 'deprecated');
Expect(0, 93, '\P{^isomath}', 'deprecated');
Expect(1, 94, '\p{-_IsOMath}', 'deprecated');
Expect(0, 94, '\p{^-_IsOMath}', 'deprecated');
Expect(0, 94, '\P{-_IsOMath}', 'deprecated');
Expect(1, 94, '\P{^-_IsOMath}', 'deprecated');
Expect(0, 93, '\p{-_IsOMath}', 'deprecated');
Expect(1, 93, '\p{^-_IsOMath}', 'deprecated');
Expect(1, 93, '\P{-_IsOMath}', 'deprecated');
Expect(0, 93, '\P{^-_IsOMath}', 'deprecated');
Error('\p{-CJK:=UNIFIED_Ideographs	extension C}');
Error('\P{-CJK:=UNIFIED_Ideographs	extension C}');
Expect(1, 177983, '\p{cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(0, 177983, '\p{^  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(0, 177983, '\P{  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(1, 177983, '\P{^  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(0, 173823, '\p{  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(1, 173823, '\p{^  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(1, 173823, '\P{  CJK	UNIFIEDIdeographsExtension-c}', "");
Expect(0, 173823, '\P{^  CJK	UNIFIEDIdeographsExtension-c}', "");
Error('\p{ 	Is/a/CJK_Unified Ideographs_Extension C}');
Error('\P{ 	Is/a/CJK_Unified Ideographs_Extension C}');
Expect(1, 177983, '\p{iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(0, 177983, '\p{^ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(0, 177983, '\P{ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(1, 177983, '\P{^ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(0, 173823, '\p{ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(1, 173823, '\p{^ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(1, 173823, '\P{ _Iscjk	unified	IdeographsExtension-C}', "");
Expect(0, 173823, '\P{^ _Iscjk	unified	IdeographsExtension-C}', "");
Error('\p{ in_CJKUnified/a/ideographs_EXTENSIONC}');
Error('\P{ in_CJKUnified/a/ideographs_EXTENSIONC}');
Expect(1, 177983, '\p{incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(0, 177983, '\p{^	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(0, 177983, '\P{	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(1, 177983, '\P{^	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(0, 173823, '\p{	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(1, 173823, '\p{^	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(1, 173823, '\P{	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Expect(0, 173823, '\P{^	 In_CJK	unified-IDEOGRAPHSExtensionc}', "");
Error('\p{ 	Latin:=Extended	Additional}');
Error('\P{ 	Latin:=Extended	Additional}');
Expect(1, 7935, '\p{latinextendedadditional}', "");
Expect(0, 7935, '\p{^latinextendedadditional}', "");
Expect(0, 7935, '\P{latinextendedadditional}', "");
Expect(1, 7935, '\P{^latinextendedadditional}', "");
Expect(0, 7679, '\p{latinextendedadditional}', "");
Expect(1, 7679, '\p{^latinextendedadditional}', "");
Expect(1, 7679, '\P{latinextendedadditional}', "");
Expect(0, 7679, '\P{^latinextendedadditional}', "");
Expect(1, 7935, '\p{- latin_EXTENDED	Additional}', "");
Expect(0, 7935, '\p{^- latin_EXTENDED	Additional}', "");
Expect(0, 7935, '\P{- latin_EXTENDED	Additional}', "");
Expect(1, 7935, '\P{^- latin_EXTENDED	Additional}', "");
Expect(0, 7679, '\p{- latin_EXTENDED	Additional}', "");
Expect(1, 7679, '\p{^- latin_EXTENDED	Additional}', "");
Expect(1, 7679, '\P{- latin_EXTENDED	Additional}', "");
Expect(0, 7679, '\P{^- latin_EXTENDED	Additional}', "");
Error('\p{--IsLatin/a/Extendedadditional}');
Error('\P{--IsLatin/a/Extendedadditional}');
Expect(1, 7935, '\p{islatinextendedadditional}', "");
Expect(0, 7935, '\p{^islatinextendedadditional}', "");
Expect(0, 7935, '\P{islatinextendedadditional}', "");
Expect(1, 7935, '\P{^islatinextendedadditional}', "");
Expect(0, 7679, '\p{islatinextendedadditional}', "");
Expect(1, 7679, '\p{^islatinextendedadditional}', "");
Expect(1, 7679, '\P{islatinextendedadditional}', "");
Expect(0, 7679, '\P{^islatinextendedadditional}', "");
Expect(1, 7935, '\p{__isLATIN_extended_Additional}', "");
Expect(0, 7935, '\p{^__isLATIN_extended_Additional}', "");
Expect(0, 7935, '\P{__isLATIN_extended_Additional}', "");
Expect(1, 7935, '\P{^__isLATIN_extended_Additional}', "");
Expect(0, 7679, '\p{__isLATIN_extended_Additional}', "");
Expect(1, 7679, '\p{^__isLATIN_extended_Additional}', "");
Expect(1, 7679, '\P{__isLATIN_extended_Additional}', "");
Expect(0, 7679, '\P{^__isLATIN_extended_Additional}', "");
Error('\p{ -In/a/Latin Extended_Additional}');
Error('\P{ -In/a/Latin Extended_Additional}');
Expect(1, 7935, '\p{inlatinextendedadditional}', "");
Expect(0, 7935, '\p{^inlatinextendedadditional}', "");
Expect(0, 7935, '\P{inlatinextendedadditional}', "");
Expect(1, 7935, '\P{^inlatinextendedadditional}', "");
Expect(0, 7679, '\p{inlatinextendedadditional}', "");
Expect(1, 7679, '\p{^inlatinextendedadditional}', "");
Expect(1, 7679, '\P{inlatinextendedadditional}', "");
Expect(0, 7679, '\P{^inlatinextendedadditional}', "");
Expect(1, 7935, '\p{	IN Latinextended additional}', "");
Expect(0, 7935, '\p{^	IN Latinextended additional}', "");
Expect(0, 7935, '\P{	IN Latinextended additional}', "");
Expect(1, 7935, '\P{^	IN Latinextended additional}', "");
Expect(0, 7679, '\p{	IN Latinextended additional}', "");
Expect(1, 7679, '\p{^	IN Latinextended additional}', "");
Expect(1, 7679, '\P{	IN Latinextended additional}', "");
Expect(0, 7679, '\P{^	IN Latinextended additional}', "");
Error('\p{--Kannada/a/}');
Error('\P{--Kannada/a/}');
Expect(1, 3203, '\p{kannada}', "");
Expect(0, 3203, '\p{^kannada}', "");
Expect(0, 3203, '\P{kannada}', "");
Expect(1, 3203, '\P{^kannada}', "");
Expect(0, 3201, '\p{kannada}', "");
Expect(1, 3201, '\p{^kannada}', "");
Expect(1, 3201, '\P{kannada}', "");
Expect(0, 3201, '\P{^kannada}', "");
Expect(1, 3203, '\p{		kannada}', "");
Expect(0, 3203, '\p{^		kannada}', "");
Expect(0, 3203, '\P{		kannada}', "");
Expect(1, 3203, '\P{^		kannada}', "");
Expect(0, 3201, '\p{		kannada}', "");
Expect(1, 3201, '\p{^		kannada}', "");
Expect(1, 3201, '\P{		kannada}', "");
Expect(0, 3201, '\P{^		kannada}', "");
Error('\p{-:=Is kannada}');
Error('\P{-:=Is kannada}');
Expect(1, 3203, '\p{iskannada}', "");
Expect(0, 3203, '\p{^iskannada}', "");
Expect(0, 3203, '\P{iskannada}', "");
Expect(1, 3203, '\P{^iskannada}', "");
Expect(0, 3201, '\p{iskannada}', "");
Expect(1, 3201, '\p{^iskannada}', "");
Expect(1, 3201, '\P{iskannada}', "");
Expect(0, 3201, '\P{^iskannada}', "");
Expect(1, 3203, '\p{ _Is-Kannada}', "");
Expect(0, 3203, '\p{^ _Is-Kannada}', "");
Expect(0, 3203, '\P{ _Is-Kannada}', "");
Expect(1, 3203, '\P{^ _Is-Kannada}', "");
Expect(0, 3201, '\p{ _Is-Kannada}', "");
Expect(1, 3201, '\p{^ _Is-Kannada}', "");
Expect(1, 3201, '\P{ _Is-Kannada}', "");
Expect(0, 3201, '\P{^ _Is-Kannada}', "");
Error('\p{:=-_Knda}');
Error('\P{:=-_Knda}');
Expect(1, 3203, '\p{knda}', "");
Expect(0, 3203, '\p{^knda}', "");
Expect(0, 3203, '\P{knda}', "");
Expect(1, 3203, '\P{^knda}', "");
Expect(0, 3201, '\p{knda}', "");
Expect(1, 3201, '\p{^knda}', "");
Expect(1, 3201, '\P{knda}', "");
Expect(0, 3201, '\P{^knda}', "");
Expect(1, 3203, '\p{	Knda}', "");
Expect(0, 3203, '\p{^	Knda}', "");
Expect(0, 3203, '\P{	Knda}', "");
Expect(1, 3203, '\P{^	Knda}', "");
Expect(0, 3201, '\p{	Knda}', "");
Expect(1, 3201, '\p{^	Knda}', "");
Expect(1, 3201, '\P{	Knda}', "");
Expect(0, 3201, '\P{^	Knda}', "");
Error('\p{:=  is_KNDA}');
Error('\P{:=  is_KNDA}');
Expect(1, 3203, '\p{isknda}', "");
Expect(0, 3203, '\p{^isknda}', "");
Expect(0, 3203, '\P{isknda}', "");
Expect(1, 3203, '\P{^isknda}', "");
Expect(0, 3201, '\p{isknda}', "");
Expect(1, 3201, '\p{^isknda}', "");
Expect(1, 3201, '\P{isknda}', "");
Expect(0, 3201, '\P{^isknda}', "");
Expect(1, 3203, '\p{ _IsKNDA}', "");
Expect(0, 3203, '\p{^ _IsKNDA}', "");
Expect(0, 3203, '\P{ _IsKNDA}', "");
Expect(1, 3203, '\P{^ _IsKNDA}', "");
Expect(0, 3201, '\p{ _IsKNDA}', "");
Expect(1, 3201, '\p{^ _IsKNDA}', "");
Expect(1, 3201, '\P{ _IsKNDA}', "");
Expect(0, 3201, '\P{^ _IsKNDA}', "");
Error('\p{:=	 Lao}');
Error('\P{:=	 Lao}');
Expect(1, 3714, '\p{lao}', "");
Expect(0, 3714, '\p{^lao}', "");
Expect(0, 3714, '\P{lao}', "");
Expect(1, 3714, '\P{^lao}', "");
Expect(0, 3712, '\p{lao}', "");
Expect(1, 3712, '\p{^lao}', "");
Expect(1, 3712, '\P{lao}', "");
Expect(0, 3712, '\P{^lao}', "");
Expect(1, 3714, '\p{-	Lao}', "");
Expect(0, 3714, '\p{^-	Lao}', "");
Expect(0, 3714, '\P{-	Lao}', "");
Expect(1, 3714, '\P{^-	Lao}', "");
Expect(0, 3712, '\p{-	Lao}', "");
Expect(1, 3712, '\p{^-	Lao}', "");
Expect(1, 3712, '\P{-	Lao}', "");
Expect(0, 3712, '\P{^-	Lao}', "");
Error('\p{/a/-is Lao}');
Error('\P{/a/-is Lao}');
Expect(1, 3714, '\p{islao}', "");
Expect(0, 3714, '\p{^islao}', "");
Expect(0, 3714, '\P{islao}', "");
Expect(1, 3714, '\P{^islao}', "");
Expect(0, 3712, '\p{islao}', "");
Expect(1, 3712, '\p{^islao}', "");
Expect(1, 3712, '\P{islao}', "");
Expect(0, 3712, '\P{^islao}', "");
Expect(1, 3714, '\p{_ IsLAO}', "");
Expect(0, 3714, '\p{^_ IsLAO}', "");
Expect(0, 3714, '\P{_ IsLAO}', "");
Expect(1, 3714, '\P{^_ IsLAO}', "");
Expect(0, 3712, '\p{_ IsLAO}', "");
Expect(1, 3712, '\p{^_ IsLAO}', "");
Expect(1, 3712, '\P{_ IsLAO}', "");
Expect(0, 3712, '\P{^_ IsLAO}', "");
Error('\p{/a/--laoo}');
Error('\P{/a/--laoo}');
Expect(1, 3714, '\p{laoo}', "");
Expect(0, 3714, '\p{^laoo}', "");
Expect(0, 3714, '\P{laoo}', "");
Expect(1, 3714, '\P{^laoo}', "");
Expect(0, 3712, '\p{laoo}', "");
Expect(1, 3712, '\p{^laoo}', "");
Expect(1, 3712, '\P{laoo}', "");
Expect(0, 3712, '\P{^laoo}', "");
Expect(1, 3714, '\p{	 laoo}', "");
Expect(0, 3714, '\p{^	 laoo}', "");
Expect(0, 3714, '\P{	 laoo}', "");
Expect(1, 3714, '\P{^	 laoo}', "");
Expect(0, 3712, '\p{	 laoo}', "");
Expect(1, 3712, '\p{^	 laoo}', "");
Expect(1, 3712, '\P{	 laoo}', "");
Expect(0, 3712, '\P{^	 laoo}', "");
Error('\p{/a/	IS-laoo}');
Error('\P{/a/	IS-laoo}');
Expect(1, 3714, '\p{islaoo}', "");
Expect(0, 3714, '\p{^islaoo}', "");
Expect(0, 3714, '\P{islaoo}', "");
Expect(1, 3714, '\P{^islaoo}', "");
Expect(0, 3712, '\p{islaoo}', "");
Expect(1, 3712, '\p{^islaoo}', "");
Expect(1, 3712, '\P{islaoo}', "");
Expect(0, 3712, '\P{^islaoo}', "");
Expect(1, 3714, '\p{		Is	LAOO}', "");
Expect(0, 3714, '\p{^		Is	LAOO}', "");
Expect(0, 3714, '\P{		Is	LAOO}', "");
Expect(1, 3714, '\P{^		Is	LAOO}', "");
Expect(0, 3712, '\p{		Is	LAOO}', "");
Expect(1, 3712, '\p{^		Is	LAOO}', "");
Expect(1, 3712, '\P{		Is	LAOO}', "");
Expect(0, 3712, '\P{^		Is	LAOO}', "");
Error('\p{:=--Digit}');
Error('\P{:=--Digit}');
Expect(1, 57, '\p{digit}', "");
Expect(0, 57, '\p{^digit}', "");
Expect(0, 57, '\P{digit}', "");
Expect(1, 57, '\P{^digit}', "");
Expect(0, 47, '\p{digit}', "");
Expect(1, 47, '\p{^digit}', "");
Expect(1, 47, '\P{digit}', "");
Expect(0, 47, '\P{^digit}', "");
Expect(1, 57, '\p{-DIGIT}', "");
Expect(0, 57, '\p{^-DIGIT}', "");
Expect(0, 57, '\P{-DIGIT}', "");
Expect(1, 57, '\P{^-DIGIT}', "");
Expect(0, 47, '\p{-DIGIT}', "");
Expect(1, 47, '\p{^-DIGIT}', "");
Expect(1, 47, '\P{-DIGIT}', "");
Expect(0, 47, '\P{^-DIGIT}', "");
Error('\p{-Is/a/Digit}');
Error('\P{-Is/a/Digit}');
Expect(1, 57, '\p{isdigit}', "");
Expect(0, 57, '\p{^isdigit}', "");
Expect(0, 57, '\P{isdigit}', "");
Expect(1, 57, '\P{^isdigit}', "");
Expect(0, 47, '\p{isdigit}', "");
Expect(1, 47, '\p{^isdigit}', "");
Expect(1, 47, '\P{isdigit}', "");
Expect(0, 47, '\P{^isdigit}', "");
Expect(1, 57, '\p{ Is_Digit}', "");
Expect(0, 57, '\p{^ Is_Digit}', "");
Expect(0, 57, '\P{ Is_Digit}', "");
Expect(1, 57, '\P{^ Is_Digit}', "");
Expect(0, 47, '\p{ Is_Digit}', "");
Expect(1, 47, '\p{^ Is_Digit}', "");
Expect(1, 47, '\P{ Is_Digit}', "");
Expect(0, 47, '\P{^ Is_Digit}', "");
Error('\p{:=-Decimal_Number}');
Error('\P{:=-Decimal_Number}');
Expect(1, 57, '\p{decimalnumber}', "");
Expect(0, 57, '\p{^decimalnumber}', "");
Expect(0, 57, '\P{decimalnumber}', "");
Expect(1, 57, '\P{^decimalnumber}', "");
Expect(0, 47, '\p{decimalnumber}', "");
Expect(1, 47, '\p{^decimalnumber}', "");
Expect(1, 47, '\P{decimalnumber}', "");
Expect(0, 47, '\P{^decimalnumber}', "");
Expect(1, 57, '\p{		DecimalNumber}', "");
Expect(0, 57, '\p{^		DecimalNumber}', "");
Expect(0, 57, '\P{		DecimalNumber}', "");
Expect(1, 57, '\P{^		DecimalNumber}', "");
Expect(0, 47, '\p{		DecimalNumber}', "");
Expect(1, 47, '\p{^		DecimalNumber}', "");
Expect(1, 47, '\P{		DecimalNumber}', "");
Expect(0, 47, '\P{^		DecimalNumber}', "");
Error('\p{ :=Is-decimal Number}');
Error('\P{ :=Is-decimal Number}');
Expect(1, 57, '\p{isdecimalnumber}', "");
Expect(0, 57, '\p{^isdecimalnumber}', "");
Expect(0, 57, '\P{isdecimalnumber}', "");
Expect(1, 57, '\P{^isdecimalnumber}', "");
Expect(0, 47, '\p{isdecimalnumber}', "");
Expect(1, 47, '\p{^isdecimalnumber}', "");
Expect(1, 47, '\P{isdecimalnumber}', "");
Expect(0, 47, '\P{^isdecimalnumber}', "");
Expect(1, 57, '\p{ 	isDecimal-Number}', "");
Expect(0, 57, '\p{^ 	isDecimal-Number}', "");
Expect(0, 57, '\P{ 	isDecimal-Number}', "");
Expect(1, 57, '\P{^ 	isDecimal-Number}', "");
Expect(0, 47, '\p{ 	isDecimal-Number}', "");
Expect(1, 47, '\p{^ 	isDecimal-Number}', "");
Expect(1, 47, '\P{ 	isDecimal-Number}', "");
Expect(0, 47, '\P{^ 	isDecimal-Number}', "");
Error('\p{-nd/a/}');
Error('\P{-nd/a/}');
Expect(1, 57, '\p{nd}', "");
Expect(0, 57, '\p{^nd}', "");
Expect(0, 57, '\P{nd}', "");
Expect(1, 57, '\P{^nd}', "");
Expect(0, 47, '\p{nd}', "");
Expect(1, 47, '\p{^nd}', "");
Expect(1, 47, '\P{nd}', "");
Expect(0, 47, '\P{^nd}', "");
Expect(1, 57, '\p{ ND}', "");
Expect(0, 57, '\p{^ ND}', "");
Expect(0, 57, '\P{ ND}', "");
Expect(1, 57, '\P{^ ND}', "");
Expect(0, 47, '\p{ ND}', "");
Expect(1, 47, '\p{^ ND}', "");
Expect(1, 47, '\P{ ND}', "");
Expect(0, 47, '\P{^ ND}', "");
Error('\p{_	Is/a/nd}');
Error('\P{_	Is/a/nd}');
Expect(1, 57, '\p{isnd}', "");
Expect(0, 57, '\p{^isnd}', "");
Expect(0, 57, '\P{isnd}', "");
Expect(1, 57, '\P{^isnd}', "");
Expect(0, 47, '\p{isnd}', "");
Expect(1, 47, '\p{^isnd}', "");
Expect(1, 47, '\P{isnd}', "");
Expect(0, 47, '\P{^isnd}', "");
Expect(1, 57, '\p{_Is	nd}', "");
Expect(0, 57, '\p{^_Is	nd}', "");
Expect(0, 57, '\P{_Is	nd}', "");
Expect(1, 57, '\P{^_Is	nd}', "");
Expect(0, 47, '\p{_Is	nd}', "");
Expect(1, 47, '\p{^_Is	nd}', "");
Expect(1, 47, '\P{_Is	nd}', "");
Expect(0, 47, '\P{^_Is	nd}', "");
Error('\p{_/a/OSMANYA}');
Error('\P{_/a/OSMANYA}');
Expect(1, 66717, '\p{osmanya}', "");
Expect(0, 66717, '\p{^osmanya}', "");
Expect(0, 66717, '\P{osmanya}', "");
Expect(1, 66717, '\P{^osmanya}', "");
Expect(0, 66687, '\p{osmanya}', "");
Expect(1, 66687, '\p{^osmanya}', "");
Expect(1, 66687, '\P{osmanya}', "");
Expect(0, 66687, '\P{^osmanya}', "");
Expect(1, 66717, '\p{	OSMANYA}', "");
Expect(0, 66717, '\p{^	OSMANYA}', "");
Expect(0, 66717, '\P{	OSMANYA}', "");
Expect(1, 66717, '\P{^	OSMANYA}', "");
Expect(0, 66687, '\p{	OSMANYA}', "");
Expect(1, 66687, '\p{^	OSMANYA}', "");
Expect(1, 66687, '\P{	OSMANYA}', "");
Expect(0, 66687, '\P{^	OSMANYA}', "");
Error('\p{-:=IsOsmanya}');
Error('\P{-:=IsOsmanya}');
Expect(1, 66717, '\p{isosmanya}', "");
Expect(0, 66717, '\p{^isosmanya}', "");
Expect(0, 66717, '\P{isosmanya}', "");
Expect(1, 66717, '\P{^isosmanya}', "");
Expect(0, 66687, '\p{isosmanya}', "");
Expect(1, 66687, '\p{^isosmanya}', "");
Expect(1, 66687, '\P{isosmanya}', "");
Expect(0, 66687, '\P{^isosmanya}', "");
Expect(1, 66717, '\p{-_IS Osmanya}', "");
Expect(0, 66717, '\p{^-_IS Osmanya}', "");
Expect(0, 66717, '\P{-_IS Osmanya}', "");
Expect(1, 66717, '\P{^-_IS Osmanya}', "");
Expect(0, 66687, '\p{-_IS Osmanya}', "");
Expect(1, 66687, '\p{^-_IS Osmanya}', "");
Expect(1, 66687, '\P{-_IS Osmanya}', "");
Expect(0, 66687, '\P{^-_IS Osmanya}', "");
Error('\p{-	osma:=}');
Error('\P{-	osma:=}');
Expect(1, 66717, '\p{osma}', "");
Expect(0, 66717, '\p{^osma}', "");
Expect(0, 66717, '\P{osma}', "");
Expect(1, 66717, '\P{^osma}', "");
Expect(0, 66687, '\p{osma}', "");
Expect(1, 66687, '\p{^osma}', "");
Expect(1, 66687, '\P{osma}', "");
Expect(0, 66687, '\P{^osma}', "");
Error('\p{/a/is_OSMA}');
Error('\P{/a/is_OSMA}');
Expect(1, 66717, '\p{isosma}', "");
Expect(0, 66717, '\p{^isosma}', "");
Expect(0, 66717, '\P{isosma}', "");
Expect(1, 66717, '\P{^isosma}', "");
Expect(0, 66687, '\p{isosma}', "");
Expect(1, 66687, '\p{^isosma}', "");
Expect(1, 66687, '\P{isosma}', "");
Expect(0, 66687, '\P{^isosma}', "");
Expect(1, 66717, '\p{_	is osma}', "");
Expect(0, 66717, '\p{^_	is osma}', "");
Expect(0, 66717, '\P{_	is osma}', "");
Expect(1, 66717, '\P{^_	is osma}', "");
Expect(0, 66687, '\p{_	is osma}', "");
Expect(1, 66687, '\p{^_	is osma}', "");
Expect(1, 66687, '\P{_	is osma}', "");
Expect(0, 66687, '\P{^_	is osma}', "");
Error('\p{/a/ UNIFIED Ideograph}');
Error('\P{/a/ UNIFIED Ideograph}');
Expect(1, 19893, '\p{unifiedideograph}', "");
Expect(0, 19893, '\p{^unifiedideograph}', "");
Expect(0, 19893, '\P{unifiedideograph}', "");
Expect(1, 19893, '\P{^unifiedideograph}', "");
Expect(0, 13311, '\p{unifiedideograph}', "");
Expect(1, 13311, '\p{^unifiedideograph}', "");
Expect(1, 13311, '\P{unifiedideograph}', "");
Expect(0, 13311, '\P{^unifiedideograph}', "");
Expect(1, 19893, '\p{	 UNIFIED-Ideograph}', "");
Expect(0, 19893, '\p{^	 UNIFIED-Ideograph}', "");
Expect(0, 19893, '\P{	 UNIFIED-Ideograph}', "");
Expect(1, 19893, '\P{^	 UNIFIED-Ideograph}', "");
Expect(0, 13311, '\p{	 UNIFIED-Ideograph}', "");
Expect(1, 13311, '\p{^	 UNIFIED-Ideograph}', "");
Expect(1, 13311, '\P{	 UNIFIED-Ideograph}', "");
Expect(0, 13311, '\P{^	 UNIFIED-Ideograph}', "");
Error('\p{:=-Is-unified	Ideograph}');
Error('\P{:=-Is-unified	Ideograph}');
Expect(1, 19893, '\p{isunifiedideograph}', "");
Expect(0, 19893, '\p{^isunifiedideograph}', "");
Expect(0, 19893, '\P{isunifiedideograph}', "");
Expect(1, 19893, '\P{^isunifiedideograph}', "");
Expect(0, 13311, '\p{isunifiedideograph}', "");
Expect(1, 13311, '\p{^isunifiedideograph}', "");
Expect(1, 13311, '\P{isunifiedideograph}', "");
Expect(0, 13311, '\P{^isunifiedideograph}', "");
Expect(1, 19893, '\p{ _is	Unified Ideograph}', "");
Expect(0, 19893, '\p{^ _is	Unified Ideograph}', "");
Expect(0, 19893, '\P{ _is	Unified Ideograph}', "");
Expect(1, 19893, '\P{^ _is	Unified Ideograph}', "");
Expect(0, 13311, '\p{ _is	Unified Ideograph}', "");
Expect(1, 13311, '\p{^ _is	Unified Ideograph}', "");
Expect(1, 13311, '\P{ _is	Unified Ideograph}', "");
Expect(0, 13311, '\P{^ _is	Unified Ideograph}', "");
Error('\p{:=__UIDEO}');
Error('\P{:=__UIDEO}');
Expect(1, 19893, '\p{uideo}', "");
Expect(0, 19893, '\p{^uideo}', "");
Expect(0, 19893, '\P{uideo}', "");
Expect(1, 19893, '\P{^uideo}', "");
Expect(0, 13311, '\p{uideo}', "");
Expect(1, 13311, '\p{^uideo}', "");
Expect(1, 13311, '\P{uideo}', "");
Expect(0, 13311, '\P{^uideo}', "");
Expect(1, 19893, '\p{-	uideo}', "");
Expect(0, 19893, '\p{^-	uideo}', "");
Expect(0, 19893, '\P{-	uideo}', "");
Expect(1, 19893, '\P{^-	uideo}', "");
Expect(0, 13311, '\p{-	uideo}', "");
Expect(1, 13311, '\p{^-	uideo}', "");
Expect(1, 13311, '\P{-	uideo}', "");
Expect(0, 13311, '\P{^-	uideo}', "");
Error('\p{:=IS_UIDEO}');
Error('\P{:=IS_UIDEO}');
Expect(1, 19893, '\p{isuideo}', "");
Expect(0, 19893, '\p{^isuideo}', "");
Expect(0, 19893, '\P{isuideo}', "");
Expect(1, 19893, '\P{^isuideo}', "");
Expect(0, 13311, '\p{isuideo}', "");
Expect(1, 13311, '\p{^isuideo}', "");
Expect(1, 13311, '\P{isuideo}', "");
Expect(0, 13311, '\P{^isuideo}', "");
Expect(1, 19893, '\p{	_is UIdeo}', "");
Expect(0, 19893, '\p{^	_is UIdeo}', "");
Expect(0, 19893, '\P{	_is UIdeo}', "");
Expect(1, 19893, '\P{^	_is UIdeo}', "");
Expect(0, 13311, '\p{	_is UIdeo}', "");
Expect(1, 13311, '\p{^	_is UIdeo}', "");
Expect(1, 13311, '\P{	_is UIdeo}', "");
Expect(0, 13311, '\P{^	_is UIdeo}', "");
Error('\p{-_Bopomofo/a/}');
Error('\P{-_Bopomofo/a/}');
Expect(1, 12589, '\p{bopomofo}', "");
Expect(0, 12589, '\p{^bopomofo}', "");
Expect(0, 12589, '\P{bopomofo}', "");
Expect(1, 12589, '\P{^bopomofo}', "");
Expect(0, 12548, '\p{bopomofo}', "");
Expect(1, 12548, '\p{^bopomofo}', "");
Expect(1, 12548, '\P{bopomofo}', "");
Expect(0, 12548, '\P{^bopomofo}', "");
Expect(1, 12589, '\p{BOPOMOFO}', "");
Expect(0, 12589, '\p{^BOPOMOFO}', "");
Expect(0, 12589, '\P{BOPOMOFO}', "");
Expect(1, 12589, '\P{^BOPOMOFO}', "");
Expect(0, 12548, '\p{BOPOMOFO}', "");
Expect(1, 12548, '\p{^BOPOMOFO}', "");
Expect(1, 12548, '\P{BOPOMOFO}', "");
Expect(0, 12548, '\P{^BOPOMOFO}', "");
Error('\p{_	Is/a/Bopomofo}');
Error('\P{_	Is/a/Bopomofo}');
Expect(1, 12589, '\p{isbopomofo}', "");
Expect(0, 12589, '\p{^isbopomofo}', "");
Expect(0, 12589, '\P{isbopomofo}', "");
Expect(1, 12589, '\P{^isbopomofo}', "");
Expect(0, 12548, '\p{isbopomofo}', "");
Expect(1, 12548, '\p{^isbopomofo}', "");
Expect(1, 12548, '\P{isbopomofo}', "");
Expect(0, 12548, '\P{^isbopomofo}', "");
Expect(1, 12589, '\p{-Isbopomofo}', "");
Expect(0, 12589, '\p{^-Isbopomofo}', "");
Expect(0, 12589, '\P{-Isbopomofo}', "");
Expect(1, 12589, '\P{^-Isbopomofo}', "");
Expect(0, 12548, '\p{-Isbopomofo}', "");
Expect(1, 12548, '\p{^-Isbopomofo}', "");
Expect(1, 12548, '\P{-Isbopomofo}', "");
Expect(0, 12548, '\P{^-Isbopomofo}', "");
Error('\p{-bopo/a/}');
Error('\P{-bopo/a/}');
Expect(1, 12589, '\p{bopo}', "");
Expect(0, 12589, '\p{^bopo}', "");
Expect(0, 12589, '\P{bopo}', "");
Expect(1, 12589, '\P{^bopo}', "");
Expect(0, 12548, '\p{bopo}', "");
Expect(1, 12548, '\p{^bopo}', "");
Expect(1, 12548, '\P{bopo}', "");
Expect(0, 12548, '\P{^bopo}', "");
Expect(1, 12589, '\p{_bopo}', "");
Expect(0, 12589, '\p{^_bopo}', "");
Expect(0, 12589, '\P{_bopo}', "");
Expect(1, 12589, '\P{^_bopo}', "");
Expect(0, 12548, '\p{_bopo}', "");
Expect(1, 12548, '\p{^_bopo}', "");
Expect(1, 12548, '\P{_bopo}', "");
Expect(0, 12548, '\P{^_bopo}', "");
Error('\p{	Is	Bopo/a/}');
Error('\P{	Is	Bopo/a/}');
Expect(1, 12589, '\p{isbopo}', "");
Expect(0, 12589, '\p{^isbopo}', "");
Expect(0, 12589, '\P{isbopo}', "");
Expect(1, 12589, '\P{^isbopo}', "");
Expect(0, 12548, '\p{isbopo}', "");
Expect(1, 12548, '\p{^isbopo}', "");
Expect(1, 12548, '\P{isbopo}', "");
Expect(0, 12548, '\P{^isbopo}', "");
Expect(1, 12589, '\p{ ISBopo}', "");
Expect(0, 12589, '\p{^ ISBopo}', "");
Expect(0, 12589, '\P{ ISBopo}', "");
Expect(1, 12589, '\P{^ ISBopo}', "");
Expect(0, 12548, '\p{ ISBopo}', "");
Expect(1, 12548, '\p{^ ISBopo}', "");
Expect(1, 12548, '\P{ ISBopo}', "");
Expect(0, 12548, '\P{^ ISBopo}', "");
Error('\p{/a/	_Miscellaneous_Technical}');
Error('\P{/a/	_Miscellaneous_Technical}');
Expect(1, 9215, '\p{miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^miscellaneoustechnical}', "");
Expect(0, 9215, '\P{miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^miscellaneoustechnical}', "");
Expect(0, 8959, '\p{miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^miscellaneoustechnical}', "");
Expect(1, 8959, '\P{miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^miscellaneoustechnical}', "");
Expect(1, 9215, '\p{_ miscellaneousTechnical}', "");
Expect(0, 9215, '\p{^_ miscellaneousTechnical}', "");
Expect(0, 9215, '\P{_ miscellaneousTechnical}', "");
Expect(1, 9215, '\P{^_ miscellaneousTechnical}', "");
Expect(0, 8959, '\p{_ miscellaneousTechnical}', "");
Expect(1, 8959, '\p{^_ miscellaneousTechnical}', "");
Expect(1, 8959, '\P{_ miscellaneousTechnical}', "");
Expect(0, 8959, '\P{^_ miscellaneousTechnical}', "");
Error('\p{	-isMISCELLANEOUSTechnical/a/}');
Error('\P{	-isMISCELLANEOUSTechnical/a/}');
Expect(1, 9215, '\p{ismiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^ismiscellaneoustechnical}', "");
Expect(0, 9215, '\P{ismiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^ismiscellaneoustechnical}', "");
Expect(0, 8959, '\p{ismiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^ismiscellaneoustechnical}', "");
Expect(1, 8959, '\P{ismiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^ismiscellaneoustechnical}', "");
Expect(1, 9215, '\p{	IS Miscellaneous-Technical}', "");
Expect(0, 9215, '\p{^	IS Miscellaneous-Technical}', "");
Expect(0, 9215, '\P{	IS Miscellaneous-Technical}', "");
Expect(1, 9215, '\P{^	IS Miscellaneous-Technical}', "");
Expect(0, 8959, '\p{	IS Miscellaneous-Technical}', "");
Expect(1, 8959, '\p{^	IS Miscellaneous-Technical}', "");
Expect(1, 8959, '\P{	IS Miscellaneous-Technical}', "");
Expect(0, 8959, '\P{^	IS Miscellaneous-Technical}', "");
Error('\p{-:=In-MISCELLANEOUS_Technical}');
Error('\P{-:=In-MISCELLANEOUS_Technical}');
Expect(1, 9215, '\p{inmiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^inmiscellaneoustechnical}', "");
Expect(0, 9215, '\P{inmiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^inmiscellaneoustechnical}', "");
Expect(0, 8959, '\p{inmiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^inmiscellaneoustechnical}', "");
Expect(1, 8959, '\P{inmiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^inmiscellaneoustechnical}', "");
Expect(1, 9215, '\p{ -In-miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\p{^ -In-miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\P{ -In-miscellaneous-TECHNICAL}', "");
Expect(1, 9215, '\P{^ -In-miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\p{ -In-miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\p{^ -In-miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\P{ -In-miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\P{^ -In-miscellaneous-TECHNICAL}', "");
Error('\p{_Mahjong-tiles:=}');
Error('\P{_Mahjong-tiles:=}');
Expect(1, 127023, '\p{mahjongtiles}', "");
Expect(0, 127023, '\p{^mahjongtiles}', "");
Expect(0, 127023, '\P{mahjongtiles}', "");
Expect(1, 127023, '\P{^mahjongtiles}', "");
Expect(0, 126975, '\p{mahjongtiles}', "");
Expect(1, 126975, '\p{^mahjongtiles}', "");
Expect(1, 126975, '\P{mahjongtiles}', "");
Expect(0, 126975, '\P{^mahjongtiles}', "");
Expect(1, 127023, '\p{ -Mahjong	tiles}', "");
Expect(0, 127023, '\p{^ -Mahjong	tiles}', "");
Expect(0, 127023, '\P{ -Mahjong	tiles}', "");
Expect(1, 127023, '\P{^ -Mahjong	tiles}', "");
Expect(0, 126975, '\p{ -Mahjong	tiles}', "");
Expect(1, 126975, '\p{^ -Mahjong	tiles}', "");
Expect(1, 126975, '\P{ -Mahjong	tiles}', "");
Expect(0, 126975, '\P{^ -Mahjong	tiles}', "");
Error('\p{ :=ISmahjong	Tiles}');
Error('\P{ :=ISmahjong	Tiles}');
Expect(1, 127023, '\p{ismahjongtiles}', "");
Expect(0, 127023, '\p{^ismahjongtiles}', "");
Expect(0, 127023, '\P{ismahjongtiles}', "");
Expect(1, 127023, '\P{^ismahjongtiles}', "");
Expect(0, 126975, '\p{ismahjongtiles}', "");
Expect(1, 126975, '\p{^ismahjongtiles}', "");
Expect(1, 126975, '\P{ismahjongtiles}', "");
Expect(0, 126975, '\P{^ismahjongtiles}', "");
Expect(1, 127023, '\p{-Is mahjong_Tiles}', "");
Expect(0, 127023, '\p{^-Is mahjong_Tiles}', "");
Expect(0, 127023, '\P{-Is mahjong_Tiles}', "");
Expect(1, 127023, '\P{^-Is mahjong_Tiles}', "");
Expect(0, 126975, '\p{-Is mahjong_Tiles}', "");
Expect(1, 126975, '\p{^-Is mahjong_Tiles}', "");
Expect(1, 126975, '\P{-Is mahjong_Tiles}', "");
Expect(0, 126975, '\P{^-Is mahjong_Tiles}', "");
Error('\p{  InMAHJONG/a/Tiles}');
Error('\P{  InMAHJONG/a/Tiles}');
Expect(1, 127023, '\p{inmahjongtiles}', "");
Expect(0, 127023, '\p{^inmahjongtiles}', "");
Expect(0, 127023, '\P{inmahjongtiles}', "");
Expect(1, 127023, '\P{^inmahjongtiles}', "");
Expect(0, 126975, '\p{inmahjongtiles}', "");
Expect(1, 126975, '\p{^inmahjongtiles}', "");
Expect(1, 126975, '\P{inmahjongtiles}', "");
Expect(0, 126975, '\P{^inmahjongtiles}', "");
Expect(1, 127023, '\p{-in_MAHJONGTiles}', "");
Expect(0, 127023, '\p{^-in_MAHJONGTiles}', "");
Expect(0, 127023, '\P{-in_MAHJONGTiles}', "");
Expect(1, 127023, '\P{^-in_MAHJONGTiles}', "");
Expect(0, 126975, '\p{-in_MAHJONGTiles}', "");
Expect(1, 126975, '\p{^-in_MAHJONGTiles}', "");
Expect(1, 126975, '\P{-in_MAHJONGTiles}', "");
Expect(0, 126975, '\P{^-in_MAHJONGTiles}', "");
Error('\p{/a/ MISCELLANEOUS	Mathematical_SYMBOLS-b}');
Error('\P{/a/ MISCELLANEOUS	Mathematical_SYMBOLS-b}');
Expect(1, 10751, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(0, 10751, '\p{^ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(0, 10751, '\P{ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(1, 10751, '\P{^ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(0, 10623, '\p{ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(1, 10623, '\p{^ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(1, 10623, '\P{ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Expect(0, 10623, '\P{^ _MISCELLANEOUS-Mathematicalsymbols	B}', "");
Error('\p{	-isMiscellaneous-Mathematical	symbols b/a/}');
Error('\P{	-isMiscellaneous-Mathematical	symbols b/a/}');
Expect(1, 10751, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(0, 10751, '\p{^	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(0, 10751, '\P{	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(1, 10751, '\P{^	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(0, 10623, '\p{	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(1, 10623, '\p{^	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(1, 10623, '\P{	Is_miscellaneous_mathematical	Symbols_B}', "");
Expect(0, 10623, '\P{^	Is_miscellaneous_mathematical	Symbols_B}', "");
Error('\p{	_In_MISCELLANEOUS-mathematical_Symbols/a/B}');
Error('\P{	_In_MISCELLANEOUS-mathematical_Symbols/a/B}');
Expect(1, 10751, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(0, 10751, '\p{^	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(0, 10751, '\P{	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(1, 10751, '\P{^	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(0, 10623, '\p{	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(1, 10623, '\p{^	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(1, 10623, '\P{	in-MISCELLANEOUS mathematical-symbols	B}', "");
Expect(0, 10623, '\P{^	in-MISCELLANEOUS mathematical-symbols	B}', "");
Error('\p{- Enclosed	Ideographic_Supplement:=}');
Error('\P{- Enclosed	Ideographic_Supplement:=}');
Expect(1, 127743, '\p{enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{_-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127743, '\p{^_-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127743, '\P{_-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127743, '\P{^_-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127487, '\p{_-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127487, '\p{^_-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127487, '\P{_-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127487, '\P{^_-ENCLOSED	Ideographic_Supplement}', "");
Error('\p{_:=Is-ENCLOSED-ideographicsupplement}');
Error('\P{_:=Is-ENCLOSED-ideographicsupplement}');
Expect(1, 127743, '\p{isenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^isenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{isenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^isenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{isenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^isenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{isenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^isenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{	IsEnclosed	ideographic	supplement}', "");
Expect(0, 127743, '\p{^	IsEnclosed	ideographic	supplement}', "");
Expect(0, 127743, '\P{	IsEnclosed	ideographic	supplement}', "");
Expect(1, 127743, '\P{^	IsEnclosed	ideographic	supplement}', "");
Expect(0, 127487, '\p{	IsEnclosed	ideographic	supplement}', "");
Expect(1, 127487, '\p{^	IsEnclosed	ideographic	supplement}', "");
Expect(1, 127487, '\P{	IsEnclosed	ideographic	supplement}', "");
Expect(0, 127487, '\P{^	IsEnclosed	ideographic	supplement}', "");
Error('\p{_/a/In_Enclosed	Ideographic-Supplement}');
Error('\P{_/a/In_Enclosed	Ideographic-Supplement}');
Expect(1, 127743, '\p{inenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^inenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{inenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^inenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{inenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^inenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{inenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^inenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{--In enclosed-Ideographic	supplement}', "");
Expect(0, 127743, '\p{^--In enclosed-Ideographic	supplement}', "");
Expect(0, 127743, '\P{--In enclosed-Ideographic	supplement}', "");
Expect(1, 127743, '\P{^--In enclosed-Ideographic	supplement}', "");
Expect(0, 127487, '\p{--In enclosed-Ideographic	supplement}', "");
Expect(1, 127487, '\p{^--In enclosed-Ideographic	supplement}', "");
Expect(1, 127487, '\P{--In enclosed-Ideographic	supplement}', "");
Expect(0, 127487, '\P{^--In enclosed-Ideographic	supplement}', "");
Error('\p{ MALAYALAM/a/}');
Error('\P{ MALAYALAM/a/}');
Expect(1, 3331, '\p{malayalam}', "");
Expect(0, 3331, '\p{^malayalam}', "");
Expect(0, 3331, '\P{malayalam}', "");
Expect(1, 3331, '\P{^malayalam}', "");
Expect(0, 3329, '\p{malayalam}', "");
Expect(1, 3329, '\p{^malayalam}', "");
Expect(1, 3329, '\P{malayalam}', "");
Expect(0, 3329, '\P{^malayalam}', "");
Expect(1, 3331, '\p{_ Malayalam}', "");
Expect(0, 3331, '\p{^_ Malayalam}', "");
Expect(0, 3331, '\P{_ Malayalam}', "");
Expect(1, 3331, '\P{^_ Malayalam}', "");
Expect(0, 3329, '\p{_ Malayalam}', "");
Expect(1, 3329, '\p{^_ Malayalam}', "");
Expect(1, 3329, '\P{_ Malayalam}', "");
Expect(0, 3329, '\P{^_ Malayalam}', "");
Error('\p{ :=is malayalam}');
Error('\P{ :=is malayalam}');
Expect(1, 3331, '\p{ismalayalam}', "");
Expect(0, 3331, '\p{^ismalayalam}', "");
Expect(0, 3331, '\P{ismalayalam}', "");
Expect(1, 3331, '\P{^ismalayalam}', "");
Expect(0, 3329, '\p{ismalayalam}', "");
Expect(1, 3329, '\p{^ismalayalam}', "");
Expect(1, 3329, '\P{ismalayalam}', "");
Expect(0, 3329, '\P{^ismalayalam}', "");
Expect(1, 3331, '\p{ _IS Malayalam}', "");
Expect(0, 3331, '\p{^ _IS Malayalam}', "");
Expect(0, 3331, '\P{ _IS Malayalam}', "");
Expect(1, 3331, '\P{^ _IS Malayalam}', "");
Expect(0, 3329, '\p{ _IS Malayalam}', "");
Expect(1, 3329, '\p{^ _IS Malayalam}', "");
Expect(1, 3329, '\P{ _IS Malayalam}', "");
Expect(0, 3329, '\P{^ _IS Malayalam}', "");
Error('\p{-	mlym/a/}');
Error('\P{-	mlym/a/}');
Expect(1, 3331, '\p{mlym}', "");
Expect(0, 3331, '\p{^mlym}', "");
Expect(0, 3331, '\P{mlym}', "");
Expect(1, 3331, '\P{^mlym}', "");
Expect(0, 3329, '\p{mlym}', "");
Expect(1, 3329, '\p{^mlym}', "");
Expect(1, 3329, '\P{mlym}', "");
Expect(0, 3329, '\P{^mlym}', "");
Expect(1, 3331, '\p{-_MLYM}', "");
Expect(0, 3331, '\p{^-_MLYM}', "");
Expect(0, 3331, '\P{-_MLYM}', "");
Expect(1, 3331, '\P{^-_MLYM}', "");
Expect(0, 3329, '\p{-_MLYM}', "");
Expect(1, 3329, '\p{^-_MLYM}', "");
Expect(1, 3329, '\P{-_MLYM}', "");
Expect(0, 3329, '\P{^-_MLYM}', "");
Error('\p{-/a/Is-MLYM}');
Error('\P{-/a/Is-MLYM}');
Expect(1, 3331, '\p{ismlym}', "");
Expect(0, 3331, '\p{^ismlym}', "");
Expect(0, 3331, '\P{ismlym}', "");
Expect(1, 3331, '\P{^ismlym}', "");
Expect(0, 3329, '\p{ismlym}', "");
Expect(1, 3329, '\p{^ismlym}', "");
Expect(1, 3329, '\P{ismlym}', "");
Expect(0, 3329, '\P{^ismlym}', "");
Expect(1, 3331, '\p{-Is_Mlym}', "");
Expect(0, 3331, '\p{^-Is_Mlym}', "");
Expect(0, 3331, '\P{-Is_Mlym}', "");
Expect(1, 3331, '\P{^-Is_Mlym}', "");
Expect(0, 3329, '\p{-Is_Mlym}', "");
Expect(1, 3329, '\p{^-Is_Mlym}', "");
Expect(1, 3329, '\P{-Is_Mlym}', "");
Expect(0, 3329, '\P{^-Is_Mlym}', "");
Error('\p{-/a/VEDIC Extensions}');
Error('\P{-/a/VEDIC Extensions}');
Expect(1, 7423, '\p{vedicextensions}', "");
Expect(0, 7423, '\p{^vedicextensions}', "");
Expect(0, 7423, '\P{vedicextensions}', "");
Expect(1, 7423, '\P{^vedicextensions}', "");
Expect(0, 7375, '\p{vedicextensions}', "");
Expect(1, 7375, '\p{^vedicextensions}', "");
Expect(1, 7375, '\P{vedicextensions}', "");
Expect(0, 7375, '\P{^vedicextensions}', "");
Expect(1, 7423, '\p{	 VEDIC	Extensions}', "");
Expect(0, 7423, '\p{^	 VEDIC	Extensions}', "");
Expect(0, 7423, '\P{	 VEDIC	Extensions}', "");
Expect(1, 7423, '\P{^	 VEDIC	Extensions}', "");
Expect(0, 7375, '\p{	 VEDIC	Extensions}', "");
Expect(1, 7375, '\p{^	 VEDIC	Extensions}', "");
Expect(1, 7375, '\P{	 VEDIC	Extensions}', "");
Expect(0, 7375, '\P{^	 VEDIC	Extensions}', "");
Error('\p{_/a/Is VedicExtensions}');
Error('\P{_/a/Is VedicExtensions}');
Expect(1, 7423, '\p{isvedicextensions}', "");
Expect(0, 7423, '\p{^isvedicextensions}', "");
Expect(0, 7423, '\P{isvedicextensions}', "");
Expect(1, 7423, '\P{^isvedicextensions}', "");
Expect(0, 7375, '\p{isvedicextensions}', "");
Expect(1, 7375, '\p{^isvedicextensions}', "");
Expect(1, 7375, '\P{isvedicextensions}', "");
Expect(0, 7375, '\P{^isvedicextensions}', "");
Expect(1, 7423, '\p{-	IS vedic_Extensions}', "");
Expect(0, 7423, '\p{^-	IS vedic_Extensions}', "");
Expect(0, 7423, '\P{-	IS vedic_Extensions}', "");
Expect(1, 7423, '\P{^-	IS vedic_Extensions}', "");
Expect(0, 7375, '\p{-	IS vedic_Extensions}', "");
Expect(1, 7375, '\p{^-	IS vedic_Extensions}', "");
Expect(1, 7375, '\P{-	IS vedic_Extensions}', "");
Expect(0, 7375, '\P{^-	IS vedic_Extensions}', "");
Error('\p{:=_-Invedic-extensions}');
Error('\P{:=_-Invedic-extensions}');
Expect(1, 7423, '\p{invedicextensions}', "");
Expect(0, 7423, '\p{^invedicextensions}', "");
Expect(0, 7423, '\P{invedicextensions}', "");
Expect(1, 7423, '\P{^invedicextensions}', "");
Expect(0, 7375, '\p{invedicextensions}', "");
Expect(1, 7375, '\p{^invedicextensions}', "");
Expect(1, 7375, '\P{invedicextensions}', "");
Expect(0, 7375, '\P{^invedicextensions}', "");
Expect(1, 7423, '\p{	 In_VEDIC_Extensions}', "");
Expect(0, 7423, '\p{^	 In_VEDIC_Extensions}', "");
Expect(0, 7423, '\P{	 In_VEDIC_Extensions}', "");
Expect(1, 7423, '\P{^	 In_VEDIC_Extensions}', "");
Expect(0, 7375, '\p{	 In_VEDIC_Extensions}', "");
Expect(1, 7375, '\p{^	 In_VEDIC_Extensions}', "");
Expect(1, 7375, '\P{	 In_VEDIC_Extensions}', "");
Expect(0, 7375, '\P{^	 In_VEDIC_Extensions}', "");
Error('\p{ oldturkic:=}');
Error('\P{ oldturkic:=}');
Expect(1, 68680, '\p{oldturkic}', "");
Expect(0, 68680, '\p{^oldturkic}', "");
Expect(0, 68680, '\P{oldturkic}', "");
Expect(1, 68680, '\P{^oldturkic}', "");
Expect(0, 68607, '\p{oldturkic}', "");
Expect(1, 68607, '\p{^oldturkic}', "");
Expect(1, 68607, '\P{oldturkic}', "");
Expect(0, 68607, '\P{^oldturkic}', "");
Expect(1, 68680, '\p{__Oldturkic}', "");
Expect(0, 68680, '\p{^__Oldturkic}', "");
Expect(0, 68680, '\P{__Oldturkic}', "");
Expect(1, 68680, '\P{^__Oldturkic}', "");
Expect(0, 68607, '\p{__Oldturkic}', "");
Expect(1, 68607, '\p{^__Oldturkic}', "");
Expect(1, 68607, '\P{__Oldturkic}', "");
Expect(0, 68607, '\P{^__Oldturkic}', "");
Error('\p{ -Is/a/Old-TURKIC}');
Error('\P{ -Is/a/Old-TURKIC}');
Expect(1, 68680, '\p{isoldturkic}', "");
Expect(0, 68680, '\p{^isoldturkic}', "");
Expect(0, 68680, '\P{isoldturkic}', "");
Expect(1, 68680, '\P{^isoldturkic}', "");
Expect(0, 68607, '\p{isoldturkic}', "");
Expect(1, 68607, '\p{^isoldturkic}', "");
Expect(1, 68607, '\P{isoldturkic}', "");
Expect(0, 68607, '\P{^isoldturkic}', "");
Expect(1, 68680, '\p{	IS	Old	TURKIC}', "");
Expect(0, 68680, '\p{^	IS	Old	TURKIC}', "");
Expect(0, 68680, '\P{	IS	Old	TURKIC}', "");
Expect(1, 68680, '\P{^	IS	Old	TURKIC}', "");
Expect(0, 68607, '\p{	IS	Old	TURKIC}', "");
Expect(1, 68607, '\p{^	IS	Old	TURKIC}', "");
Expect(1, 68607, '\P{	IS	Old	TURKIC}', "");
Expect(0, 68607, '\P{^	IS	Old	TURKIC}', "");
Error('\p{Orkh/a/}');
Error('\P{Orkh/a/}');
Expect(1, 68680, '\p{orkh}', "");
Expect(0, 68680, '\p{^orkh}', "");
Expect(0, 68680, '\P{orkh}', "");
Expect(1, 68680, '\P{^orkh}', "");
Expect(0, 68607, '\p{orkh}', "");
Expect(1, 68607, '\p{^orkh}', "");
Expect(1, 68607, '\P{orkh}', "");
Expect(0, 68607, '\P{^orkh}', "");
Expect(1, 68680, '\p{ 	Orkh}', "");
Expect(0, 68680, '\p{^ 	Orkh}', "");
Expect(0, 68680, '\P{ 	Orkh}', "");
Expect(1, 68680, '\P{^ 	Orkh}', "");
Expect(0, 68607, '\p{ 	Orkh}', "");
Expect(1, 68607, '\p{^ 	Orkh}', "");
Expect(1, 68607, '\P{ 	Orkh}', "");
Expect(0, 68607, '\P{^ 	Orkh}', "");
Error('\p{__Is:=ORKH}');
Error('\P{__Is:=ORKH}');
Expect(1, 68680, '\p{isorkh}', "");
Expect(0, 68680, '\p{^isorkh}', "");
Expect(0, 68680, '\P{isorkh}', "");
Expect(1, 68680, '\P{^isorkh}', "");
Expect(0, 68607, '\p{isorkh}', "");
Expect(1, 68607, '\p{^isorkh}', "");
Expect(1, 68607, '\P{isorkh}', "");
Expect(0, 68607, '\P{^isorkh}', "");
Expect(1, 68680, '\p{	_Is Orkh}', "");
Expect(0, 68680, '\p{^	_Is Orkh}', "");
Expect(0, 68680, '\P{	_Is Orkh}', "");
Expect(1, 68680, '\P{^	_Is Orkh}', "");
Expect(0, 68607, '\p{	_Is Orkh}', "");
Expect(1, 68607, '\p{^	_Is Orkh}', "");
Expect(1, 68607, '\P{	_Is Orkh}', "");
Expect(0, 68607, '\P{^	_Is Orkh}', "");
Error('\p{:=-nonspacing Mark}');
Error('\P{:=-nonspacing Mark}');
Expect(1, 879, '\p{nonspacingmark}', "");
Expect(0, 879, '\p{^nonspacingmark}', "");
Expect(0, 879, '\P{nonspacingmark}', "");
Expect(1, 879, '\P{^nonspacingmark}', "");
Expect(0, 767, '\p{nonspacingmark}', "");
Expect(1, 767, '\p{^nonspacingmark}', "");
Expect(1, 767, '\P{nonspacingmark}', "");
Expect(0, 767, '\P{^nonspacingmark}', "");
Expect(1, 879, '\p{-	Nonspacing Mark}', "");
Expect(0, 879, '\p{^-	Nonspacing Mark}', "");
Expect(0, 879, '\P{-	Nonspacing Mark}', "");
Expect(1, 879, '\P{^-	Nonspacing Mark}', "");
Expect(0, 767, '\p{-	Nonspacing Mark}', "");
Expect(1, 767, '\p{^-	Nonspacing Mark}', "");
Expect(1, 767, '\P{-	Nonspacing Mark}', "");
Expect(0, 767, '\P{^-	Nonspacing Mark}', "");
Error('\p{	Is/a/NONSPACING-mark}');
Error('\P{	Is/a/NONSPACING-mark}');
Expect(1, 879, '\p{isnonspacingmark}', "");
Expect(0, 879, '\p{^isnonspacingmark}', "");
Expect(0, 879, '\P{isnonspacingmark}', "");
Expect(1, 879, '\P{^isnonspacingmark}', "");
Expect(0, 767, '\p{isnonspacingmark}', "");
Expect(1, 767, '\p{^isnonspacingmark}', "");
Expect(1, 767, '\P{isnonspacingmark}', "");
Expect(0, 767, '\P{^isnonspacingmark}', "");
Expect(1, 879, '\p{ IS-NONSPACING-Mark}', "");
Expect(0, 879, '\p{^ IS-NONSPACING-Mark}', "");
Expect(0, 879, '\P{ IS-NONSPACING-Mark}', "");
Expect(1, 879, '\P{^ IS-NONSPACING-Mark}', "");
Expect(0, 767, '\p{ IS-NONSPACING-Mark}', "");
Expect(1, 767, '\p{^ IS-NONSPACING-Mark}', "");
Expect(1, 767, '\P{ IS-NONSPACING-Mark}', "");
Expect(0, 767, '\P{^ IS-NONSPACING-Mark}', "");
Error('\p{-:=Mn}');
Error('\P{-:=Mn}');
Expect(1, 879, '\p{mn}', "");
Expect(0, 879, '\p{^mn}', "");
Expect(0, 879, '\P{mn}', "");
Expect(1, 879, '\P{^mn}', "");
Expect(0, 767, '\p{mn}', "");
Expect(1, 767, '\p{^mn}', "");
Expect(1, 767, '\P{mn}', "");
Expect(0, 767, '\P{^mn}', "");
Expect(1, 879, '\p{ -Mn}', "");
Expect(0, 879, '\p{^ -Mn}', "");
Expect(0, 879, '\P{ -Mn}', "");
Expect(1, 879, '\P{^ -Mn}', "");
Expect(0, 767, '\p{ -Mn}', "");
Expect(1, 767, '\p{^ -Mn}', "");
Expect(1, 767, '\P{ -Mn}', "");
Expect(0, 767, '\P{^ -Mn}', "");
Error('\p{	 Is/a/MN}');
Error('\P{	 Is/a/MN}');
Expect(1, 879, '\p{ismn}', "");
Expect(0, 879, '\p{^ismn}', "");
Expect(0, 879, '\P{ismn}', "");
Expect(1, 879, '\P{^ismn}', "");
Expect(0, 767, '\p{ismn}', "");
Expect(1, 767, '\p{^ismn}', "");
Expect(1, 767, '\P{ismn}', "");
Expect(0, 767, '\P{^ismn}', "");
Expect(1, 879, '\p{__IsMn}', "");
Expect(0, 879, '\p{^__IsMn}', "");
Expect(0, 879, '\P{__IsMn}', "");
Expect(1, 879, '\P{^__IsMn}', "");
Expect(0, 767, '\p{__IsMn}', "");
Expect(1, 767, '\p{^__IsMn}', "");
Expect(1, 767, '\P{__IsMn}', "");
Expect(0, 767, '\P{^__IsMn}', "");
Error('\p{ /a/lisu}');
Error('\P{ /a/lisu}');
Expect(1, 42239, '\p{lisu}', "");
Expect(0, 42239, '\p{^lisu}', "");
Expect(0, 42239, '\P{lisu}', "");
Expect(1, 42239, '\P{^lisu}', "");
Expect(0, 42191, '\p{lisu}', "");
Expect(1, 42191, '\p{^lisu}', "");
Expect(1, 42191, '\P{lisu}', "");
Expect(0, 42191, '\P{^lisu}', "");
Expect(1, 42239, '\p{ lisu}', "");
Expect(0, 42239, '\p{^ lisu}', "");
Expect(0, 42239, '\P{ lisu}', "");
Expect(1, 42239, '\P{^ lisu}', "");
Expect(0, 42191, '\p{ lisu}', "");
Expect(1, 42191, '\p{^ lisu}', "");
Expect(1, 42191, '\P{ lisu}', "");
Expect(0, 42191, '\P{^ lisu}', "");
Error('\p{	-isLISU/a/}');
Error('\P{	-isLISU/a/}');
Expect(1, 42239, '\p{islisu}', "");
Expect(0, 42239, '\p{^islisu}', "");
Expect(0, 42239, '\P{islisu}', "");
Expect(1, 42239, '\P{^islisu}', "");
Expect(0, 42191, '\p{islisu}', "");
Expect(1, 42191, '\p{^islisu}', "");
Expect(1, 42191, '\P{islisu}', "");
Expect(0, 42191, '\P{^islisu}', "");
Expect(1, 42239, '\p{_IS	LISU}', "");
Expect(0, 42239, '\p{^_IS	LISU}', "");
Expect(0, 42239, '\P{_IS	LISU}', "");
Expect(1, 42239, '\P{^_IS	LISU}', "");
Expect(0, 42191, '\p{_IS	LISU}', "");
Expect(1, 42191, '\p{^_IS	LISU}', "");
Expect(1, 42191, '\P{_IS	LISU}', "");
Expect(0, 42191, '\P{^_IS	LISU}', "");
Error('\p{-FULL/a/Composition exclusion}');
Error('\P{-FULL/a/Composition exclusion}');
Expect(1, 833, '\p{fullcompositionexclusion}', "");
Expect(0, 833, '\p{^fullcompositionexclusion}', "");
Expect(0, 833, '\P{fullcompositionexclusion}', "");
Expect(1, 833, '\P{^fullcompositionexclusion}', "");
Expect(0, 831, '\p{fullcompositionexclusion}', "");
Expect(1, 831, '\p{^fullcompositionexclusion}', "");
Expect(1, 831, '\P{fullcompositionexclusion}', "");
Expect(0, 831, '\P{^fullcompositionexclusion}', "");
Expect(1, 833, '\p{	Full	Composition_EXCLUSION}', "");
Expect(0, 833, '\p{^	Full	Composition_EXCLUSION}', "");
Expect(0, 833, '\P{	Full	Composition_EXCLUSION}', "");
Expect(1, 833, '\P{^	Full	Composition_EXCLUSION}', "");
Expect(0, 831, '\p{	Full	Composition_EXCLUSION}', "");
Expect(1, 831, '\p{^	Full	Composition_EXCLUSION}', "");
Expect(1, 831, '\P{	Full	Composition_EXCLUSION}', "");
Expect(0, 831, '\P{^	Full	Composition_EXCLUSION}', "");
Error('\p{:= IS	Full composition-Exclusion}');
Error('\P{:= IS	Full composition-Exclusion}');
Expect(1, 833, '\p{isfullcompositionexclusion}', "");
Expect(0, 833, '\p{^isfullcompositionexclusion}', "");
Expect(0, 833, '\P{isfullcompositionexclusion}', "");
Expect(1, 833, '\P{^isfullcompositionexclusion}', "");
Expect(0, 831, '\p{isfullcompositionexclusion}', "");
Expect(1, 831, '\p{^isfullcompositionexclusion}', "");
Expect(1, 831, '\P{isfullcompositionexclusion}', "");
Expect(0, 831, '\P{^isfullcompositionexclusion}', "");
Expect(1, 833, '\p{  IsfullComposition	EXCLUSION}', "");
Expect(0, 833, '\p{^  IsfullComposition	EXCLUSION}', "");
Expect(0, 833, '\P{  IsfullComposition	EXCLUSION}', "");
Expect(1, 833, '\P{^  IsfullComposition	EXCLUSION}', "");
Expect(0, 831, '\p{  IsfullComposition	EXCLUSION}', "");
Expect(1, 831, '\p{^  IsfullComposition	EXCLUSION}', "");
Expect(1, 831, '\P{  IsfullComposition	EXCLUSION}', "");
Expect(0, 831, '\P{^  IsfullComposition	EXCLUSION}', "");
Error('\p{-:=comp ex}');
Error('\P{-:=comp ex}');
Expect(1, 833, '\p{compex}', "");
Expect(0, 833, '\p{^compex}', "");
Expect(0, 833, '\P{compex}', "");
Expect(1, 833, '\P{^compex}', "");
Expect(0, 831, '\p{compex}', "");
Expect(1, 831, '\p{^compex}', "");
Expect(1, 831, '\P{compex}', "");
Expect(0, 831, '\P{^compex}', "");
Expect(1, 833, '\p{	_Comp EX}', "");
Expect(0, 833, '\p{^	_Comp EX}', "");
Expect(0, 833, '\P{	_Comp EX}', "");
Expect(1, 833, '\P{^	_Comp EX}', "");
Expect(0, 831, '\p{	_Comp EX}', "");
Expect(1, 831, '\p{^	_Comp EX}', "");
Expect(1, 831, '\P{	_Comp EX}', "");
Expect(0, 831, '\P{^	_Comp EX}', "");
Error('\p{	 is:=Comp	ex}');
Error('\P{	 is:=Comp	ex}');
Expect(1, 833, '\p{iscompex}', "");
Expect(0, 833, '\p{^iscompex}', "");
Expect(0, 833, '\P{iscompex}', "");
Expect(1, 833, '\P{^iscompex}', "");
Expect(0, 831, '\p{iscompex}', "");
Expect(1, 831, '\p{^iscompex}', "");
Expect(1, 831, '\P{iscompex}', "");
Expect(0, 831, '\P{^iscompex}', "");
Expect(1, 833, '\p{	 Is Compex}', "");
Expect(0, 833, '\p{^	 Is Compex}', "");
Expect(0, 833, '\P{	 Is Compex}', "");
Expect(1, 833, '\P{^	 Is Compex}', "");
Expect(0, 831, '\p{	 Is Compex}', "");
Expect(1, 831, '\p{^	 Is Compex}', "");
Expect(1, 831, '\P{	 Is Compex}', "");
Expect(0, 831, '\P{^	 Is Compex}', "");
Error('\p{__JOIN/a/Control}');
Error('\P{__JOIN/a/Control}');
Expect(1, 8205, '\p{joincontrol}', "");
Expect(0, 8205, '\p{^joincontrol}', "");
Expect(0, 8205, '\P{joincontrol}', "");
Expect(1, 8205, '\P{^joincontrol}', "");
Expect(0, 8203, '\p{joincontrol}', "");
Expect(1, 8203, '\p{^joincontrol}', "");
Expect(1, 8203, '\P{joincontrol}', "");
Expect(0, 8203, '\P{^joincontrol}', "");
Expect(1, 8205, '\p{	-Join	control}', "");
Expect(0, 8205, '\p{^	-Join	control}', "");
Expect(0, 8205, '\P{	-Join	control}', "");
Expect(1, 8205, '\P{^	-Join	control}', "");
Expect(0, 8203, '\p{	-Join	control}', "");
Expect(1, 8203, '\p{^	-Join	control}', "");
Expect(1, 8203, '\P{	-Join	control}', "");
Expect(0, 8203, '\P{^	-Join	control}', "");
Error('\p{- Is/a/JOIN_control}');
Error('\P{- Is/a/JOIN_control}');
Expect(1, 8205, '\p{isjoincontrol}', "");
Expect(0, 8205, '\p{^isjoincontrol}', "");
Expect(0, 8205, '\P{isjoincontrol}', "");
Expect(1, 8205, '\P{^isjoincontrol}', "");
Expect(0, 8203, '\p{isjoincontrol}', "");
Expect(1, 8203, '\p{^isjoincontrol}', "");
Expect(1, 8203, '\P{isjoincontrol}', "");
Expect(0, 8203, '\P{^isjoincontrol}', "");
Expect(1, 8205, '\p{ isjoin_CONTROL}', "");
Expect(0, 8205, '\p{^ isjoin_CONTROL}', "");
Expect(0, 8205, '\P{ isjoin_CONTROL}', "");
Expect(1, 8205, '\P{^ isjoin_CONTROL}', "");
Expect(0, 8203, '\p{ isjoin_CONTROL}', "");
Expect(1, 8203, '\p{^ isjoin_CONTROL}', "");
Expect(1, 8203, '\P{ isjoin_CONTROL}', "");
Expect(0, 8203, '\P{^ isjoin_CONTROL}', "");
Error('\p{_/a/Join C}');
Error('\P{_/a/Join C}');
Expect(1, 8205, '\p{joinc}', "");
Expect(0, 8205, '\p{^joinc}', "");
Expect(0, 8205, '\P{joinc}', "");
Expect(1, 8205, '\P{^joinc}', "");
Expect(0, 8203, '\p{joinc}', "");
Expect(1, 8203, '\p{^joinc}', "");
Expect(1, 8203, '\P{joinc}', "");
Expect(0, 8203, '\P{^joinc}', "");
Expect(1, 8205, '\p{  JOINC}', "");
Expect(0, 8205, '\p{^  JOINC}', "");
Expect(0, 8205, '\P{  JOINC}', "");
Expect(1, 8205, '\P{^  JOINC}', "");
Expect(0, 8203, '\p{  JOINC}', "");
Expect(1, 8203, '\p{^  JOINC}', "");
Expect(1, 8203, '\P{  JOINC}', "");
Expect(0, 8203, '\P{^  JOINC}', "");
Error('\p{ /a/IsJoin_C}');
Error('\P{ /a/IsJoin_C}');
Expect(1, 8205, '\p{isjoinc}', "");
Expect(0, 8205, '\p{^isjoinc}', "");
Expect(0, 8205, '\P{isjoinc}', "");
Expect(1, 8205, '\P{^isjoinc}', "");
Expect(0, 8203, '\p{isjoinc}', "");
Expect(1, 8203, '\p{^isjoinc}', "");
Expect(1, 8203, '\P{isjoinc}', "");
Expect(0, 8203, '\P{^isjoinc}', "");
Expect(1, 8205, '\p{-_IsJoin C}', "");
Expect(0, 8205, '\p{^-_IsJoin C}', "");
Expect(0, 8205, '\P{-_IsJoin C}', "");
Expect(1, 8205, '\P{^-_IsJoin C}', "");
Expect(0, 8203, '\p{-_IsJoin C}', "");
Expect(1, 8203, '\p{^-_IsJoin C}', "");
Expect(1, 8203, '\P{-_IsJoin C}', "");
Expect(0, 8203, '\P{^-_IsJoin C}', "");
Error('\p{:=	UPPER}');
Error('\P{:=	UPPER}');
Expect(1, 90, '\p{upper}', "");
Expect(0, 90, '\p{^upper}', "");
Expect(0, 90, '\P{upper}', "");
Expect(1, 90, '\P{^upper}', "");
Expect(0, 64, '\p{upper}', "");
Expect(1, 64, '\p{^upper}', "");
Expect(1, 64, '\P{upper}', "");
Expect(0, 64, '\P{^upper}', "");
Expect(1, 90, '\p{-_UPPER}', "");
Expect(0, 90, '\p{^-_UPPER}', "");
Expect(0, 90, '\P{-_UPPER}', "");
Expect(1, 90, '\P{^-_UPPER}', "");
Expect(0, 64, '\p{-_UPPER}', "");
Expect(1, 64, '\p{^-_UPPER}', "");
Expect(1, 64, '\P{-_UPPER}', "");
Expect(0, 64, '\P{^-_UPPER}', "");
Error('\p{:=IsUpper}');
Error('\P{:=IsUpper}');
Expect(1, 90, '\p{isupper}', "");
Expect(0, 90, '\p{^isupper}', "");
Expect(0, 90, '\P{isupper}', "");
Expect(1, 90, '\P{^isupper}', "");
Expect(0, 64, '\p{isupper}', "");
Expect(1, 64, '\p{^isupper}', "");
Expect(1, 64, '\P{isupper}', "");
Expect(0, 64, '\P{^isupper}', "");
Expect(1, 90, '\p{ -ISUpper}', "");
Expect(0, 90, '\p{^ -ISUpper}', "");
Expect(0, 90, '\P{ -ISUpper}', "");
Expect(1, 90, '\P{^ -ISUpper}', "");
Expect(0, 64, '\p{ -ISUpper}', "");
Expect(1, 64, '\p{^ -ISUpper}', "");
Expect(1, 64, '\P{ -ISUpper}', "");
Expect(0, 64, '\P{^ -ISUpper}', "");
Error('\p{/a/Uppercase}');
Error('\P{/a/Uppercase}');
Expect(1, 90, '\p{uppercase}', "");
Expect(0, 90, '\p{^uppercase}', "");
Expect(0, 90, '\P{uppercase}', "");
Expect(1, 90, '\P{^uppercase}', "");
Expect(0, 64, '\p{uppercase}', "");
Expect(1, 64, '\p{^uppercase}', "");
Expect(1, 64, '\P{uppercase}', "");
Expect(0, 64, '\P{^uppercase}', "");
Expect(1, 90, '\p{	-Uppercase}', "");
Expect(0, 90, '\p{^	-Uppercase}', "");
Expect(0, 90, '\P{	-Uppercase}', "");
Expect(1, 90, '\P{^	-Uppercase}', "");
Expect(0, 64, '\p{	-Uppercase}', "");
Expect(1, 64, '\p{^	-Uppercase}', "");
Expect(1, 64, '\P{	-Uppercase}', "");
Expect(0, 64, '\P{^	-Uppercase}', "");
Error('\p{_ IS/a/UPPERCASE}');
Error('\P{_ IS/a/UPPERCASE}');
Expect(1, 90, '\p{isuppercase}', "");
Expect(0, 90, '\p{^isuppercase}', "");
Expect(0, 90, '\P{isuppercase}', "");
Expect(1, 90, '\P{^isuppercase}', "");
Expect(0, 64, '\p{isuppercase}', "");
Expect(1, 64, '\p{^isuppercase}', "");
Expect(1, 64, '\P{isuppercase}', "");
Expect(0, 64, '\P{^isuppercase}', "");
Expect(1, 90, '\p{  IS_UPPERCASE}', "");
Expect(0, 90, '\p{^  IS_UPPERCASE}', "");
Expect(0, 90, '\P{  IS_UPPERCASE}', "");
Expect(1, 90, '\P{^  IS_UPPERCASE}', "");
Expect(0, 64, '\p{  IS_UPPERCASE}', "");
Expect(1, 64, '\p{^  IS_UPPERCASE}', "");
Expect(1, 64, '\P{  IS_UPPERCASE}', "");
Expect(0, 64, '\P{^  IS_UPPERCASE}', "");
Error('\p{	BRAILLE-Patterns:=}');
Error('\P{	BRAILLE-Patterns:=}');
Expect(1, 10495, '\p{braillepatterns}', "");
Expect(0, 10495, '\p{^braillepatterns}', "");
Expect(0, 10495, '\P{braillepatterns}', "");
Expect(1, 10495, '\P{^braillepatterns}', "");
Expect(0, 10239, '\p{braillepatterns}', "");
Expect(1, 10239, '\p{^braillepatterns}', "");
Expect(1, 10239, '\P{braillepatterns}', "");
Expect(0, 10239, '\P{^braillepatterns}', "");
Expect(1, 10495, '\p{_BRAILLE-Patterns}', "");
Expect(0, 10495, '\p{^_BRAILLE-Patterns}', "");
Expect(0, 10495, '\P{_BRAILLE-Patterns}', "");
Expect(1, 10495, '\P{^_BRAILLE-Patterns}', "");
Expect(0, 10239, '\p{_BRAILLE-Patterns}', "");
Expect(1, 10239, '\p{^_BRAILLE-Patterns}', "");
Expect(1, 10239, '\P{_BRAILLE-Patterns}', "");
Expect(0, 10239, '\P{^_BRAILLE-Patterns}', "");
Error('\p{-	isBRAILLE patterns/a/}');
Error('\P{-	isBRAILLE patterns/a/}');
Expect(1, 10495, '\p{isbraillepatterns}', "");
Expect(0, 10495, '\p{^isbraillepatterns}', "");
Expect(0, 10495, '\P{isbraillepatterns}', "");
Expect(1, 10495, '\P{^isbraillepatterns}', "");
Expect(0, 10239, '\p{isbraillepatterns}', "");
Expect(1, 10239, '\p{^isbraillepatterns}', "");
Expect(1, 10239, '\P{isbraillepatterns}', "");
Expect(0, 10239, '\P{^isbraillepatterns}', "");
Expect(1, 10495, '\p{		IS braille_Patterns}', "");
Expect(0, 10495, '\p{^		IS braille_Patterns}', "");
Expect(0, 10495, '\P{		IS braille_Patterns}', "");
Expect(1, 10495, '\P{^		IS braille_Patterns}', "");
Expect(0, 10239, '\p{		IS braille_Patterns}', "");
Expect(1, 10239, '\p{^		IS braille_Patterns}', "");
Expect(1, 10239, '\P{		IS braille_Patterns}', "");
Expect(0, 10239, '\P{^		IS braille_Patterns}', "");
Error('\p{:=	INBraille-Patterns}');
Error('\P{:=	INBraille-Patterns}');
Expect(1, 10495, '\p{inbraillepatterns}', "");
Expect(0, 10495, '\p{^inbraillepatterns}', "");
Expect(0, 10495, '\P{inbraillepatterns}', "");
Expect(1, 10495, '\P{^inbraillepatterns}', "");
Expect(0, 10239, '\p{inbraillepatterns}', "");
Expect(1, 10239, '\p{^inbraillepatterns}', "");
Expect(1, 10239, '\P{inbraillepatterns}', "");
Expect(0, 10239, '\P{^inbraillepatterns}', "");
Expect(1, 10495, '\p{-In	BRAILLEPatterns}', "");
Expect(0, 10495, '\p{^-In	BRAILLEPatterns}', "");
Expect(0, 10495, '\P{-In	BRAILLEPatterns}', "");
Expect(1, 10495, '\P{^-In	BRAILLEPatterns}', "");
Expect(0, 10239, '\p{-In	BRAILLEPatterns}', "");
Expect(1, 10239, '\p{^-In	BRAILLEPatterns}', "");
Expect(1, 10239, '\P{-In	BRAILLEPatterns}', "");
Expect(0, 10239, '\P{^-In	BRAILLEPatterns}', "");
Error('\p{-	Katakana/a/}');
Error('\P{-	Katakana/a/}');
Expect(1, 12538, '\p{katakana}', "");
Expect(0, 12538, '\p{^katakana}', "");
Expect(0, 12538, '\P{katakana}', "");
Expect(1, 12538, '\P{^katakana}', "");
Expect(0, 12448, '\p{katakana}', "");
Expect(1, 12448, '\p{^katakana}', "");
Expect(1, 12448, '\P{katakana}', "");
Expect(0, 12448, '\P{^katakana}', "");
Expect(1, 12538, '\p{	 katakana}', "");
Expect(0, 12538, '\p{^	 katakana}', "");
Expect(0, 12538, '\P{	 katakana}', "");
Expect(1, 12538, '\P{^	 katakana}', "");
Expect(0, 12448, '\p{	 katakana}', "");
Expect(1, 12448, '\p{^	 katakana}', "");
Expect(1, 12448, '\P{	 katakana}', "");
Expect(0, 12448, '\P{^	 katakana}', "");
Error('\p{ 	is/a/KATAKANA}');
Error('\P{ 	is/a/KATAKANA}');
Expect(1, 12538, '\p{iskatakana}', "");
Expect(0, 12538, '\p{^iskatakana}', "");
Expect(0, 12538, '\P{iskatakana}', "");
Expect(1, 12538, '\P{^iskatakana}', "");
Expect(0, 12448, '\p{iskatakana}', "");
Expect(1, 12448, '\p{^iskatakana}', "");
Expect(1, 12448, '\P{iskatakana}', "");
Expect(0, 12448, '\P{^iskatakana}', "");
Expect(1, 12538, '\p{	-Is_katakana}', "");
Expect(0, 12538, '\p{^	-Is_katakana}', "");
Expect(0, 12538, '\P{	-Is_katakana}', "");
Expect(1, 12538, '\P{^	-Is_katakana}', "");
Expect(0, 12448, '\p{	-Is_katakana}', "");
Expect(1, 12448, '\p{^	-Is_katakana}', "");
Expect(1, 12448, '\P{	-Is_katakana}', "");
Expect(0, 12448, '\P{^	-Is_katakana}', "");
Error('\p{:=__KANA}');
Error('\P{:=__KANA}');
Expect(1, 12538, '\p{kana}', "");
Expect(0, 12538, '\p{^kana}', "");
Expect(0, 12538, '\P{kana}', "");
Expect(1, 12538, '\P{^kana}', "");
Expect(0, 12448, '\p{kana}', "");
Expect(1, 12448, '\p{^kana}', "");
Expect(1, 12448, '\P{kana}', "");
Expect(0, 12448, '\P{^kana}', "");
Expect(1, 12538, '\p{_Kana}', "");
Expect(0, 12538, '\p{^_Kana}', "");
Expect(0, 12538, '\P{_Kana}', "");
Expect(1, 12538, '\P{^_Kana}', "");
Expect(0, 12448, '\p{_Kana}', "");
Expect(1, 12448, '\p{^_Kana}', "");
Expect(1, 12448, '\P{_Kana}', "");
Expect(0, 12448, '\P{^_Kana}', "");
Error('\p{	_Is kana/a/}');
Error('\P{	_Is kana/a/}');
Expect(1, 12538, '\p{iskana}', "");
Expect(0, 12538, '\p{^iskana}', "");
Expect(0, 12538, '\P{iskana}', "");
Expect(1, 12538, '\P{^iskana}', "");
Expect(0, 12448, '\p{iskana}', "");
Expect(1, 12448, '\p{^iskana}', "");
Expect(1, 12448, '\P{iskana}', "");
Expect(0, 12448, '\P{^iskana}', "");
Expect(1, 12538, '\p{-_iskana}', "");
Expect(0, 12538, '\p{^-_iskana}', "");
Expect(0, 12538, '\P{-_iskana}', "");
Expect(1, 12538, '\P{^-_iskana}', "");
Expect(0, 12448, '\p{-_iskana}', "");
Expect(1, 12448, '\p{^-_iskana}', "");
Expect(1, 12448, '\P{-_iskana}', "");
Expect(0, 12448, '\P{^-_iskana}', "");
Error('\p{/a/	_pattern_white_space}');
Error('\P{/a/	_pattern_white_space}');
Expect(1, 13, '\p{patternwhitespace}', "");
Expect(0, 13, '\p{^patternwhitespace}', "");
Expect(0, 13, '\P{patternwhitespace}', "");
Expect(1, 13, '\P{^patternwhitespace}', "");
Expect(0, 8, '\p{patternwhitespace}', "");
Expect(1, 8, '\p{^patternwhitespace}', "");
Expect(1, 8, '\P{patternwhitespace}', "");
Expect(0, 8, '\P{^patternwhitespace}', "");
Expect(1, 13, '\p{	Pattern WHITESPACE}', "");
Expect(0, 13, '\p{^	Pattern WHITESPACE}', "");
Expect(0, 13, '\P{	Pattern WHITESPACE}', "");
Expect(1, 13, '\P{^	Pattern WHITESPACE}', "");
Expect(0, 8, '\p{	Pattern WHITESPACE}', "");
Expect(1, 8, '\p{^	Pattern WHITESPACE}', "");
Expect(1, 8, '\P{	Pattern WHITESPACE}', "");
Expect(0, 8, '\P{^	Pattern WHITESPACE}', "");
Error('\p{	:=Is-Pattern	White space}');
Error('\P{	:=Is-Pattern	White space}');
Expect(1, 13, '\p{ispatternwhitespace}', "");
Expect(0, 13, '\p{^ispatternwhitespace}', "");
Expect(0, 13, '\P{ispatternwhitespace}', "");
Expect(1, 13, '\P{^ispatternwhitespace}', "");
Expect(0, 8, '\p{ispatternwhitespace}', "");
Expect(1, 8, '\p{^ispatternwhitespace}', "");
Expect(1, 8, '\P{ispatternwhitespace}', "");
Expect(0, 8, '\P{^ispatternwhitespace}', "");
Expect(1, 13, '\p{ ISPATTERN WHITE_Space}', "");
Expect(0, 13, '\p{^ ISPATTERN WHITE_Space}', "");
Expect(0, 13, '\P{ ISPATTERN WHITE_Space}', "");
Expect(1, 13, '\P{^ ISPATTERN WHITE_Space}', "");
Expect(0, 8, '\p{ ISPATTERN WHITE_Space}', "");
Expect(1, 8, '\p{^ ISPATTERN WHITE_Space}', "");
Expect(1, 8, '\P{ ISPATTERN WHITE_Space}', "");
Expect(0, 8, '\P{^ ISPATTERN WHITE_Space}', "");
Error('\p{-_PAT/a/WS}');
Error('\P{-_PAT/a/WS}');
Expect(1, 13, '\p{patws}', "");
Expect(0, 13, '\p{^patws}', "");
Expect(0, 13, '\P{patws}', "");
Expect(1, 13, '\P{^patws}', "");
Expect(0, 8, '\p{patws}', "");
Expect(1, 8, '\p{^patws}', "");
Expect(1, 8, '\P{patws}', "");
Expect(0, 8, '\P{^patws}', "");
Expect(1, 13, '\p{_Pat	WS}', "");
Expect(0, 13, '\p{^_Pat	WS}', "");
Expect(0, 13, '\P{_Pat	WS}', "");
Expect(1, 13, '\P{^_Pat	WS}', "");
Expect(0, 8, '\p{_Pat	WS}', "");
Expect(1, 8, '\p{^_Pat	WS}', "");
Expect(1, 8, '\P{_Pat	WS}', "");
Expect(0, 8, '\P{^_Pat	WS}', "");
Error('\p{ _is/a/Pat	ws}');
Error('\P{ _is/a/Pat	ws}');
Expect(1, 13, '\p{ispatws}', "");
Expect(0, 13, '\p{^ispatws}', "");
Expect(0, 13, '\P{ispatws}', "");
Expect(1, 13, '\P{^ispatws}', "");
Expect(0, 8, '\p{ispatws}', "");
Expect(1, 8, '\p{^ispatws}', "");
Expect(1, 8, '\P{ispatws}', "");
Expect(0, 8, '\P{^ispatws}', "");
Expect(1, 13, '\p{-Is_Pat-ws}', "");
Expect(0, 13, '\p{^-Is_Pat-ws}', "");
Expect(0, 13, '\P{-Is_Pat-ws}', "");
Expect(1, 13, '\P{^-Is_Pat-ws}', "");
Expect(0, 8, '\p{-Is_Pat-ws}', "");
Expect(1, 8, '\p{^-Is_Pat-ws}', "");
Expect(1, 8, '\P{-Is_Pat-ws}', "");
Expect(0, 8, '\P{^-Is_Pat-ws}', "");
Error('\p{/a/Noncharacter_CODE-Point}');
Error('\P{/a/Noncharacter_CODE-Point}');
Expect(0, 64975, '\p{noncharactercodepoint}', "");
Expect(1, 64975, '\p{^noncharactercodepoint}', "");
Expect(1, 64975, '\P{noncharactercodepoint}', "");
Expect(0, 64975, '\P{^noncharactercodepoint}', "");
Expect(0, 64975, '\p{	 Noncharacter Code_POINT}', "");
Expect(1, 64975, '\p{^	 Noncharacter Code_POINT}', "");
Expect(1, 64975, '\P{	 Noncharacter Code_POINT}', "");
Expect(0, 64975, '\P{^	 Noncharacter Code_POINT}', "");
Error('\p{-:=is Noncharacter_Code	Point}');
Error('\P{-:=is Noncharacter_Code	Point}');
Expect(0, 64975, '\p{isnoncharactercodepoint}', "");
Expect(1, 64975, '\p{^isnoncharactercodepoint}', "");
Expect(1, 64975, '\P{isnoncharactercodepoint}', "");
Expect(0, 64975, '\P{^isnoncharactercodepoint}', "");
Expect(0, 64975, '\p{_ Is-Noncharacter_Code	Point}', "");
Expect(1, 64975, '\p{^_ Is-Noncharacter_Code	Point}', "");
Expect(1, 64975, '\P{_ Is-Noncharacter_Code	Point}', "");
Expect(0, 64975, '\P{^_ Is-Noncharacter_Code	Point}', "");
Error('\p{	NChar:=}');
Error('\P{	NChar:=}');
Expect(0, 64975, '\p{nchar}', "");
Expect(1, 64975, '\p{^nchar}', "");
Expect(1, 64975, '\P{nchar}', "");
Expect(0, 64975, '\P{^nchar}', "");
Expect(0, 64975, '\p{-nchar}', "");
Expect(1, 64975, '\p{^-nchar}', "");
Expect(1, 64975, '\P{-nchar}', "");
Expect(0, 64975, '\P{^-nchar}', "");
Error('\p{ -Is nchar/a/}');
Error('\P{ -Is nchar/a/}');
Expect(0, 64975, '\p{isnchar}', "");
Expect(1, 64975, '\p{^isnchar}', "");
Expect(1, 64975, '\P{isnchar}', "");
Expect(0, 64975, '\P{^isnchar}', "");
Expect(0, 64975, '\p{-	IS-NChar}', "");
Expect(1, 64975, '\p{^-	IS-NChar}', "");
Expect(1, 64975, '\P{-	IS-NChar}', "");
Expect(0, 64975, '\P{^-	IS-NChar}', "");
Error('\p{  In:=Ogham}');
Error('\P{  In:=Ogham}');
Expect(1, 5791, '\p{inogham}', "");
Expect(0, 5791, '\p{^inogham}', "");
Expect(0, 5791, '\P{inogham}', "");
Expect(1, 5791, '\P{^inogham}', "");
Expect(0, 5759, '\p{inogham}', "");
Expect(1, 5759, '\p{^inogham}', "");
Expect(1, 5759, '\P{inogham}', "");
Expect(0, 5759, '\P{^inogham}', "");
Expect(1, 5791, '\p{-_in	ogham}', "");
Expect(0, 5791, '\p{^-_in	ogham}', "");
Expect(0, 5791, '\P{-_in	ogham}', "");
Expect(1, 5791, '\P{^-_in	ogham}', "");
Expect(0, 5759, '\p{-_in	ogham}', "");
Expect(1, 5759, '\p{^-_in	ogham}', "");
Expect(1, 5759, '\P{-_in	ogham}', "");
Expect(0, 5759, '\P{^-_in	ogham}', "");
Error('\p{-_Old-SOUTH/a/ARABIAN}');
Error('\P{-_Old-SOUTH/a/ARABIAN}');
Expect(1, 68223, '\p{oldsoutharabian}', "");
Expect(0, 68223, '\p{^oldsoutharabian}', "");
Expect(0, 68223, '\P{oldsoutharabian}', "");
Expect(1, 68223, '\P{^oldsoutharabian}', "");
Expect(0, 68191, '\p{oldsoutharabian}', "");
Expect(1, 68191, '\p{^oldsoutharabian}', "");
Expect(1, 68191, '\P{oldsoutharabian}', "");
Expect(0, 68191, '\P{^oldsoutharabian}', "");
Expect(1, 68223, '\p{	old_SouthArabian}', "");
Expect(0, 68223, '\p{^	old_SouthArabian}', "");
Expect(0, 68223, '\P{	old_SouthArabian}', "");
Expect(1, 68223, '\P{^	old_SouthArabian}', "");
Expect(0, 68191, '\p{	old_SouthArabian}', "");
Expect(1, 68191, '\p{^	old_SouthArabian}', "");
Expect(1, 68191, '\P{	old_SouthArabian}', "");
Expect(0, 68191, '\P{^	old_SouthArabian}', "");
Error('\p{		is	Old-South/a/ARABIAN}');
Error('\P{		is	Old-South/a/ARABIAN}');
Expect(1, 68223, '\p{isoldsoutharabian}', "");
Expect(0, 68223, '\p{^isoldsoutharabian}', "");
Expect(0, 68223, '\P{isoldsoutharabian}', "");
Expect(1, 68223, '\P{^isoldsoutharabian}', "");
Expect(0, 68191, '\p{isoldsoutharabian}', "");
Expect(1, 68191, '\p{^isoldsoutharabian}', "");
Expect(1, 68191, '\P{isoldsoutharabian}', "");
Expect(0, 68191, '\P{^isoldsoutharabian}', "");
Expect(1, 68223, '\p{_ Is	old-South arabian}', "");
Expect(0, 68223, '\p{^_ Is	old-South arabian}', "");
Expect(0, 68223, '\P{_ Is	old-South arabian}', "");
Expect(1, 68223, '\P{^_ Is	old-South arabian}', "");
Expect(0, 68191, '\p{_ Is	old-South arabian}', "");
Expect(1, 68191, '\p{^_ Is	old-South arabian}', "");
Expect(1, 68191, '\P{_ Is	old-South arabian}', "");
Expect(0, 68191, '\P{^_ Is	old-South arabian}', "");
Error('\p{/a/	 Sarb}');
Error('\P{/a/	 Sarb}');
Expect(1, 68223, '\p{sarb}', "");
Expect(0, 68223, '\p{^sarb}', "");
Expect(0, 68223, '\P{sarb}', "");
Expect(1, 68223, '\P{^sarb}', "");
Expect(0, 68191, '\p{sarb}', "");
Expect(1, 68191, '\p{^sarb}', "");
Expect(1, 68191, '\P{sarb}', "");
Expect(0, 68191, '\P{^sarb}', "");
Expect(1, 68223, '\p{-Sarb}', "");
Expect(0, 68223, '\p{^-Sarb}', "");
Expect(0, 68223, '\P{-Sarb}', "");
Expect(1, 68223, '\P{^-Sarb}', "");
Expect(0, 68191, '\p{-Sarb}', "");
Expect(1, 68191, '\p{^-Sarb}', "");
Expect(1, 68191, '\P{-Sarb}', "");
Expect(0, 68191, '\P{^-Sarb}', "");
Error('\p{	IsSarb/a/}');
Error('\P{	IsSarb/a/}');
Expect(1, 68223, '\p{issarb}', "");
Expect(0, 68223, '\p{^issarb}', "");
Expect(0, 68223, '\P{issarb}', "");
Expect(1, 68223, '\P{^issarb}', "");
Expect(0, 68191, '\p{issarb}', "");
Expect(1, 68191, '\p{^issarb}', "");
Expect(1, 68191, '\P{issarb}', "");
Expect(0, 68191, '\P{^issarb}', "");
Expect(1, 68223, '\p{	IS_sarb}', "");
Expect(0, 68223, '\p{^	IS_sarb}', "");
Expect(0, 68223, '\P{	IS_sarb}', "");
Expect(1, 68223, '\P{^	IS_sarb}', "");
Expect(0, 68191, '\p{	IS_sarb}', "");
Expect(1, 68191, '\p{^	IS_sarb}', "");
Expect(1, 68191, '\P{	IS_sarb}', "");
Expect(0, 68191, '\P{^	IS_sarb}', "");
Error('\p{_-Alphabetic:=Presentation-FORMS}');
Error('\P{_-Alphabetic:=Presentation-FORMS}');
Expect(1, 64335, '\p{alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{		Alphabetic	Presentation Forms}', "");
Expect(0, 64335, '\p{^		Alphabetic	Presentation Forms}', "");
Expect(0, 64335, '\P{		Alphabetic	Presentation Forms}', "");
Expect(1, 64335, '\P{^		Alphabetic	Presentation Forms}', "");
Expect(0, 64255, '\p{		Alphabetic	Presentation Forms}', "");
Expect(1, 64255, '\p{^		Alphabetic	Presentation Forms}', "");
Expect(1, 64255, '\P{		Alphabetic	Presentation Forms}', "");
Expect(0, 64255, '\P{^		Alphabetic	Presentation Forms}', "");
Error('\p{ is:=Alphabetic-PresentationFORMS}');
Error('\P{ is:=Alphabetic-PresentationFORMS}');
Expect(1, 64335, '\p{isalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^isalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{isalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^isalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{isalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^isalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{isalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^isalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{		IS-Alphabetic_presentation	forms}', "");
Expect(0, 64335, '\p{^		IS-Alphabetic_presentation	forms}', "");
Expect(0, 64335, '\P{		IS-Alphabetic_presentation	forms}', "");
Expect(1, 64335, '\P{^		IS-Alphabetic_presentation	forms}', "");
Expect(0, 64255, '\p{		IS-Alphabetic_presentation	forms}', "");
Expect(1, 64255, '\p{^		IS-Alphabetic_presentation	forms}', "");
Expect(1, 64255, '\P{		IS-Alphabetic_presentation	forms}', "");
Expect(0, 64255, '\P{^		IS-Alphabetic_presentation	forms}', "");
Error('\p{		In-alphabetic	PRESENTATION	Forms:=}');
Error('\P{		In-alphabetic	PRESENTATION	Forms:=}');
Expect(1, 64335, '\p{inalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^inalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{inalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^inalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{inalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^inalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{inalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^inalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{  In_ALPHABETIC	presentation	Forms}', "");
Expect(0, 64335, '\p{^  In_ALPHABETIC	presentation	Forms}', "");
Expect(0, 64335, '\P{  In_ALPHABETIC	presentation	Forms}', "");
Expect(1, 64335, '\P{^  In_ALPHABETIC	presentation	Forms}', "");
Expect(0, 64255, '\p{  In_ALPHABETIC	presentation	Forms}', "");
Expect(1, 64255, '\p{^  In_ALPHABETIC	presentation	Forms}', "");
Expect(1, 64255, '\P{  In_ALPHABETIC	presentation	Forms}', "");
Expect(0, 64255, '\P{^  In_ALPHABETIC	presentation	Forms}', "");
Error('\p{	 DOMINO_TILES:=}');
Error('\P{	 DOMINO_TILES:=}');
Expect(1, 127135, '\p{dominotiles}', "");
Expect(0, 127135, '\p{^dominotiles}', "");
Expect(0, 127135, '\P{dominotiles}', "");
Expect(1, 127135, '\P{^dominotiles}', "");
Expect(0, 127023, '\p{dominotiles}', "");
Expect(1, 127023, '\p{^dominotiles}', "");
Expect(1, 127023, '\P{dominotiles}', "");
Expect(0, 127023, '\P{^dominotiles}', "");
Expect(1, 127135, '\p{-_domino-Tiles}', "");
Expect(0, 127135, '\p{^-_domino-Tiles}', "");
Expect(0, 127135, '\P{-_domino-Tiles}', "");
Expect(1, 127135, '\P{^-_domino-Tiles}', "");
Expect(0, 127023, '\p{-_domino-Tiles}', "");
Expect(1, 127023, '\p{^-_domino-Tiles}', "");
Expect(1, 127023, '\P{-_domino-Tiles}', "");
Expect(0, 127023, '\P{^-_domino-Tiles}', "");
Error('\p{__is Domino_Tiles/a/}');
Error('\P{__is Domino_Tiles/a/}');
Expect(1, 127135, '\p{isdominotiles}', "");
Expect(0, 127135, '\p{^isdominotiles}', "");
Expect(0, 127135, '\P{isdominotiles}', "");
Expect(1, 127135, '\P{^isdominotiles}', "");
Expect(0, 127023, '\p{isdominotiles}', "");
Expect(1, 127023, '\p{^isdominotiles}', "");
Expect(1, 127023, '\P{isdominotiles}', "");
Expect(0, 127023, '\P{^isdominotiles}', "");
Expect(1, 127135, '\p{-_Is-Domino	Tiles}', "");
Expect(0, 127135, '\p{^-_Is-Domino	Tiles}', "");
Expect(0, 127135, '\P{-_Is-Domino	Tiles}', "");
Expect(1, 127135, '\P{^-_Is-Domino	Tiles}', "");
Expect(0, 127023, '\p{-_Is-Domino	Tiles}', "");
Expect(1, 127023, '\p{^-_Is-Domino	Tiles}', "");
Expect(1, 127023, '\P{-_Is-Domino	Tiles}', "");
Expect(0, 127023, '\P{^-_Is-Domino	Tiles}', "");
Error('\p{_in	Domino	TILES/a/}');
Error('\P{_in	Domino	TILES/a/}');
Expect(1, 127135, '\p{indominotiles}', "");
Expect(0, 127135, '\p{^indominotiles}', "");
Expect(0, 127135, '\P{indominotiles}', "");
Expect(1, 127135, '\P{^indominotiles}', "");
Expect(0, 127023, '\p{indominotiles}', "");
Expect(1, 127023, '\p{^indominotiles}', "");
Expect(1, 127023, '\P{indominotiles}', "");
Expect(0, 127023, '\P{^indominotiles}', "");
Expect(1, 127135, '\p{_ in-Domino_tiles}', "");
Expect(0, 127135, '\p{^_ in-Domino_tiles}', "");
Expect(0, 127135, '\P{_ in-Domino_tiles}', "");
Expect(1, 127135, '\P{^_ in-Domino_tiles}', "");
Expect(0, 127023, '\p{_ in-Domino_tiles}', "");
Expect(1, 127023, '\p{^_ in-Domino_tiles}', "");
Expect(1, 127023, '\P{_ in-Domino_tiles}', "");
Expect(0, 127023, '\P{^_ in-Domino_tiles}', "");
Error('\p{in-kayah:=Li}');
Error('\P{in-kayah:=Li}');
Expect(1, 43311, '\p{inkayahli}', "");
Expect(0, 43311, '\p{^inkayahli}', "");
Expect(0, 43311, '\P{inkayahli}', "");
Expect(1, 43311, '\P{^inkayahli}', "");
Expect(0, 43263, '\p{inkayahli}', "");
Expect(1, 43263, '\p{^inkayahli}', "");
Expect(1, 43263, '\P{inkayahli}', "");
Expect(0, 43263, '\P{^inkayahli}', "");
Expect(1, 43311, '\p{_in KayahLI}', "");
Expect(0, 43311, '\p{^_in KayahLI}', "");
Expect(0, 43311, '\P{_in KayahLI}', "");
Expect(1, 43311, '\P{^_in KayahLI}', "");
Expect(0, 43263, '\p{_in KayahLI}', "");
Expect(1, 43263, '\p{^_in KayahLI}', "");
Expect(1, 43263, '\P{_in KayahLI}', "");
Expect(0, 43263, '\P{^_in KayahLI}', "");
Error('\p{_uppercase letter:=}');
Error('\P{_uppercase letter:=}');
Expect(1, 90, '\p{uppercaseletter}', "");
Expect(0, 90, '\p{^uppercaseletter}', "");
Expect(0, 90, '\P{uppercaseletter}', "");
Expect(1, 90, '\P{^uppercaseletter}', "");
Expect(0, 64, '\p{uppercaseletter}', "");
Expect(1, 64, '\p{^uppercaseletter}', "");
Expect(1, 64, '\P{uppercaseletter}', "");
Expect(0, 64, '\P{^uppercaseletter}', "");
Expect(1, 90, '\p{--Uppercase-Letter}', "");
Expect(0, 90, '\p{^--Uppercase-Letter}', "");
Expect(0, 90, '\P{--Uppercase-Letter}', "");
Expect(1, 90, '\P{^--Uppercase-Letter}', "");
Expect(0, 64, '\p{--Uppercase-Letter}', "");
Expect(1, 64, '\p{^--Uppercase-Letter}', "");
Expect(1, 64, '\P{--Uppercase-Letter}', "");
Expect(0, 64, '\P{^--Uppercase-Letter}', "");
Error('\p{_/a/IsUppercase_LETTER}');
Error('\P{_/a/IsUppercase_LETTER}');
Expect(1, 90, '\p{isuppercaseletter}', "");
Expect(0, 90, '\p{^isuppercaseletter}', "");
Expect(0, 90, '\P{isuppercaseletter}', "");
Expect(1, 90, '\P{^isuppercaseletter}', "");
Expect(0, 64, '\p{isuppercaseletter}', "");
Expect(1, 64, '\p{^isuppercaseletter}', "");
Expect(1, 64, '\P{isuppercaseletter}', "");
Expect(0, 64, '\P{^isuppercaseletter}', "");
Expect(1, 90, '\p{-is_UppercaseLetter}', "");
Expect(0, 90, '\p{^-is_UppercaseLetter}', "");
Expect(0, 90, '\P{-is_UppercaseLetter}', "");
Expect(1, 90, '\P{^-is_UppercaseLetter}', "");
Expect(0, 64, '\p{-is_UppercaseLetter}', "");
Expect(1, 64, '\p{^-is_UppercaseLetter}', "");
Expect(1, 64, '\P{-is_UppercaseLetter}', "");
Expect(0, 64, '\P{^-is_UppercaseLetter}', "");
Error('\p{_LU/a/}');
Error('\P{_LU/a/}');
Expect(1, 90, '\p{lu}', "");
Expect(0, 90, '\p{^lu}', "");
Expect(0, 90, '\P{lu}', "");
Expect(1, 90, '\P{^lu}', "");
Expect(0, 64, '\p{lu}', "");
Expect(1, 64, '\p{^lu}', "");
Expect(1, 64, '\P{lu}', "");
Expect(0, 64, '\P{^lu}', "");
Expect(1, 90, '\p{-	Lu}', "");
Expect(0, 90, '\p{^-	Lu}', "");
Expect(0, 90, '\P{-	Lu}', "");
Expect(1, 90, '\P{^-	Lu}', "");
Expect(0, 64, '\p{-	Lu}', "");
Expect(1, 64, '\p{^-	Lu}', "");
Expect(1, 64, '\P{-	Lu}', "");
Expect(0, 64, '\P{^-	Lu}', "");
Error('\p{-Is/a/Lu}');
Error('\P{-Is/a/Lu}');
Expect(1, 90, '\p{islu}', "");
Expect(0, 90, '\p{^islu}', "");
Expect(0, 90, '\P{islu}', "");
Expect(1, 90, '\P{^islu}', "");
Expect(0, 64, '\p{islu}', "");
Expect(1, 64, '\p{^islu}', "");
Expect(1, 64, '\P{islu}', "");
Expect(0, 64, '\P{^islu}', "");
Expect(1, 90, '\p{	 Is	lu}', "");
Expect(0, 90, '\p{^	 Is	lu}', "");
Expect(0, 90, '\P{	 Is	lu}', "");
Expect(1, 90, '\P{^	 Is	lu}', "");
Expect(0, 64, '\p{	 Is	lu}', "");
Expect(1, 64, '\p{^	 Is	lu}', "");
Expect(1, 64, '\P{	 Is	lu}', "");
Expect(0, 64, '\P{^	 Is	lu}', "");
Error('\p{/a/-	tai le}');
Error('\P{/a/-	tai le}');
Expect(1, 6509, '\p{taile}', "");
Expect(0, 6509, '\p{^taile}', "");
Expect(0, 6509, '\P{taile}', "");
Expect(1, 6509, '\P{^taile}', "");
Expect(0, 6479, '\p{taile}', "");
Expect(1, 6479, '\p{^taile}', "");
Expect(1, 6479, '\P{taile}', "");
Expect(0, 6479, '\P{^taile}', "");
Expect(1, 6509, '\p{_tai_le}', "");
Expect(0, 6509, '\p{^_tai_le}', "");
Expect(0, 6509, '\P{_tai_le}', "");
Expect(1, 6509, '\P{^_tai_le}', "");
Expect(0, 6479, '\p{_tai_le}', "");
Expect(1, 6479, '\p{^_tai_le}', "");
Expect(1, 6479, '\P{_tai_le}', "");
Expect(0, 6479, '\P{^_tai_le}', "");
Error('\p{	-is/a/Tai_Le}');
Error('\P{	-is/a/Tai_Le}');
Expect(1, 6509, '\p{istaile}', "");
Expect(0, 6509, '\p{^istaile}', "");
Expect(0, 6509, '\P{istaile}', "");
Expect(1, 6509, '\P{^istaile}', "");
Expect(0, 6479, '\p{istaile}', "");
Expect(1, 6479, '\p{^istaile}', "");
Expect(1, 6479, '\P{istaile}', "");
Expect(0, 6479, '\P{^istaile}', "");
Expect(1, 6509, '\p{_	is tai LE}', "");
Expect(0, 6509, '\p{^_	is tai LE}', "");
Expect(0, 6509, '\P{_	is tai LE}', "");
Expect(1, 6509, '\P{^_	is tai LE}', "");
Expect(0, 6479, '\p{_	is tai LE}', "");
Expect(1, 6479, '\p{^_	is tai LE}', "");
Expect(1, 6479, '\P{_	is tai LE}', "");
Expect(0, 6479, '\P{^_	is tai LE}', "");
Error('\p{:=-_Tale}');
Error('\P{:=-_Tale}');
Expect(1, 6509, '\p{tale}', "");
Expect(0, 6509, '\p{^tale}', "");
Expect(0, 6509, '\P{tale}', "");
Expect(1, 6509, '\P{^tale}', "");
Expect(0, 6479, '\p{tale}', "");
Expect(1, 6479, '\p{^tale}', "");
Expect(1, 6479, '\P{tale}', "");
Expect(0, 6479, '\P{^tale}', "");
Expect(1, 6509, '\p{	_Tale}', "");
Expect(0, 6509, '\p{^	_Tale}', "");
Expect(0, 6509, '\P{	_Tale}', "");
Expect(1, 6509, '\P{^	_Tale}', "");
Expect(0, 6479, '\p{	_Tale}', "");
Expect(1, 6479, '\p{^	_Tale}', "");
Expect(1, 6479, '\P{	_Tale}', "");
Expect(0, 6479, '\P{^	_Tale}', "");
Error('\p{/a/  IS-Tale}');
Error('\P{/a/  IS-Tale}');
Expect(1, 6509, '\p{istale}', "");
Expect(0, 6509, '\p{^istale}', "");
Expect(0, 6509, '\P{istale}', "");
Expect(1, 6509, '\P{^istale}', "");
Expect(0, 6479, '\p{istale}', "");
Expect(1, 6479, '\p{^istale}', "");
Expect(1, 6479, '\P{istale}', "");
Expect(0, 6479, '\P{^istale}', "");
Expect(1, 6509, '\p{_-is-TALE}', "");
Expect(0, 6509, '\p{^_-is-TALE}', "");
Expect(0, 6509, '\P{_-is-TALE}', "");
Expect(1, 6509, '\P{^_-is-TALE}', "");
Expect(0, 6479, '\p{_-is-TALE}', "");
Expect(1, 6479, '\p{^_-is-TALE}', "");
Expect(1, 6479, '\P{_-is-TALE}', "");
Expect(0, 6479, '\P{^_-is-TALE}', "");
Error('\p{		ASCII_Hex:=digit}');
Error('\P{		ASCII_Hex:=digit}');
Expect(1, 57, '\p{asciihexdigit}', "");
Expect(0, 57, '\p{^asciihexdigit}', "");
Expect(0, 57, '\P{asciihexdigit}', "");
Expect(1, 57, '\P{^asciihexdigit}', "");
Expect(0, 47, '\p{asciihexdigit}', "");
Expect(1, 47, '\p{^asciihexdigit}', "");
Expect(1, 47, '\P{asciihexdigit}', "");
Expect(0, 47, '\P{^asciihexdigit}', "");
Expect(1, 57, '\p{  ASCII_HexDigit}', "");
Expect(0, 57, '\p{^  ASCII_HexDigit}', "");
Expect(0, 57, '\P{  ASCII_HexDigit}', "");
Expect(1, 57, '\P{^  ASCII_HexDigit}', "");
Expect(0, 47, '\p{  ASCII_HexDigit}', "");
Expect(1, 47, '\p{^  ASCII_HexDigit}', "");
Expect(1, 47, '\P{  ASCII_HexDigit}', "");
Expect(0, 47, '\P{^  ASCII_HexDigit}', "");
Error('\p{:=IS-ASCII Hex_digit}');
Error('\P{:=IS-ASCII Hex_digit}');
Expect(1, 57, '\p{isasciihexdigit}', "");
Expect(0, 57, '\p{^isasciihexdigit}', "");
Expect(0, 57, '\P{isasciihexdigit}', "");
Expect(1, 57, '\P{^isasciihexdigit}', "");
Expect(0, 47, '\p{isasciihexdigit}', "");
Expect(1, 47, '\p{^isasciihexdigit}', "");
Expect(1, 47, '\P{isasciihexdigit}', "");
Expect(0, 47, '\P{^isasciihexdigit}', "");
Expect(1, 57, '\p{_Is ASCII	hexDigit}', "");
Expect(0, 57, '\p{^_Is ASCII	hexDigit}', "");
Expect(0, 57, '\P{_Is ASCII	hexDigit}', "");
Expect(1, 57, '\P{^_Is ASCII	hexDigit}', "");
Expect(0, 47, '\p{_Is ASCII	hexDigit}', "");
Expect(1, 47, '\p{^_Is ASCII	hexDigit}', "");
Expect(1, 47, '\P{_Is ASCII	hexDigit}', "");
Expect(0, 47, '\P{^_Is ASCII	hexDigit}', "");
Error('\p{:=	AHEX}');
Error('\P{:=	AHEX}');
Expect(1, 57, '\p{ahex}', "");
Expect(0, 57, '\p{^ahex}', "");
Expect(0, 57, '\P{ahex}', "");
Expect(1, 57, '\P{^ahex}', "");
Expect(0, 47, '\p{ahex}', "");
Expect(1, 47, '\p{^ahex}', "");
Expect(1, 47, '\P{ahex}', "");
Expect(0, 47, '\P{^ahex}', "");
Expect(1, 57, '\p{ 	ahex}', "");
Expect(0, 57, '\p{^ 	ahex}', "");
Expect(0, 57, '\P{ 	ahex}', "");
Expect(1, 57, '\P{^ 	ahex}', "");
Expect(0, 47, '\p{ 	ahex}', "");
Expect(1, 47, '\p{^ 	ahex}', "");
Expect(1, 47, '\P{ 	ahex}', "");
Expect(0, 47, '\P{^ 	ahex}', "");
Error('\p{	_Is:=AHex}');
Error('\P{	_Is:=AHex}');
Expect(1, 57, '\p{isahex}', "");
Expect(0, 57, '\p{^isahex}', "");
Expect(0, 57, '\P{isahex}', "");
Expect(1, 57, '\P{^isahex}', "");
Expect(0, 47, '\p{isahex}', "");
Expect(1, 47, '\p{^isahex}', "");
Expect(1, 47, '\P{isahex}', "");
Expect(0, 47, '\P{^isahex}', "");
Expect(1, 57, '\p{_IS	AHEX}', "");
Expect(0, 57, '\p{^_IS	AHEX}', "");
Expect(0, 57, '\P{_IS	AHEX}', "");
Expect(1, 57, '\P{^_IS	AHEX}', "");
Expect(0, 47, '\p{_IS	AHEX}', "");
Expect(1, 47, '\p{^_IS	AHEX}', "");
Expect(1, 47, '\P{_IS	AHEX}', "");
Expect(0, 47, '\P{^_IS	AHEX}', "");
Error('\p{/a/--rejang}');
Error('\P{/a/--rejang}');
Expect(1, 43347, '\p{rejang}', "");
Expect(0, 43347, '\p{^rejang}', "");
Expect(0, 43347, '\P{rejang}', "");
Expect(1, 43347, '\P{^rejang}', "");
Expect(0, 43311, '\p{rejang}', "");
Expect(1, 43311, '\p{^rejang}', "");
Expect(1, 43311, '\P{rejang}', "");
Expect(0, 43311, '\P{^rejang}', "");
Expect(1, 43347, '\p{ Rejang}', "");
Expect(0, 43347, '\p{^ Rejang}', "");
Expect(0, 43347, '\P{ Rejang}', "");
Expect(1, 43347, '\P{^ Rejang}', "");
Expect(0, 43311, '\p{ Rejang}', "");
Expect(1, 43311, '\p{^ Rejang}', "");
Expect(1, 43311, '\P{ Rejang}', "");
Expect(0, 43311, '\P{^ Rejang}', "");
Error('\p{	Is	rejang:=}');
Error('\P{	Is	rejang:=}');
Expect(1, 43347, '\p{isrejang}', "");
Expect(0, 43347, '\p{^isrejang}', "");
Expect(0, 43347, '\P{isrejang}', "");
Expect(1, 43347, '\P{^isrejang}', "");
Expect(0, 43311, '\p{isrejang}', "");
Expect(1, 43311, '\p{^isrejang}', "");
Expect(1, 43311, '\P{isrejang}', "");
Expect(0, 43311, '\P{^isrejang}', "");
Expect(1, 43347, '\p{	is_rejang}', "");
Expect(0, 43347, '\p{^	is_rejang}', "");
Expect(0, 43347, '\P{	is_rejang}', "");
Expect(1, 43347, '\P{^	is_rejang}', "");
Expect(0, 43311, '\p{	is_rejang}', "");
Expect(1, 43311, '\p{^	is_rejang}', "");
Expect(1, 43311, '\P{	is_rejang}', "");
Expect(0, 43311, '\P{^	is_rejang}', "");
Error('\p{/a/  Rjng}');
Error('\P{/a/  Rjng}');
Expect(1, 43347, '\p{rjng}', "");
Expect(0, 43347, '\p{^rjng}', "");
Expect(0, 43347, '\P{rjng}', "");
Expect(1, 43347, '\P{^rjng}', "");
Expect(0, 43311, '\p{rjng}', "");
Expect(1, 43311, '\p{^rjng}', "");
Expect(1, 43311, '\P{rjng}', "");
Expect(0, 43311, '\P{^rjng}', "");
Expect(1, 43347, '\p{	-RJNG}', "");
Expect(0, 43347, '\p{^	-RJNG}', "");
Expect(0, 43347, '\P{	-RJNG}', "");
Expect(1, 43347, '\P{^	-RJNG}', "");
Expect(0, 43311, '\p{	-RJNG}', "");
Expect(1, 43311, '\p{^	-RJNG}', "");
Expect(1, 43311, '\P{	-RJNG}', "");
Expect(0, 43311, '\P{^	-RJNG}', "");
Error('\p{ -IsRjng:=}');
Error('\P{ -IsRjng:=}');
Expect(1, 43347, '\p{isrjng}', "");
Expect(0, 43347, '\p{^isrjng}', "");
Expect(0, 43347, '\P{isrjng}', "");
Expect(1, 43347, '\P{^isrjng}', "");
Expect(0, 43311, '\p{isrjng}', "");
Expect(1, 43311, '\p{^isrjng}', "");
Expect(1, 43311, '\P{isrjng}', "");
Expect(0, 43311, '\P{^isrjng}', "");
Expect(1, 43347, '\p{__is	Rjng}', "");
Expect(0, 43347, '\p{^__is	Rjng}', "");
Expect(0, 43347, '\P{__is	Rjng}', "");
Expect(1, 43347, '\P{^__is	Rjng}', "");
Expect(0, 43311, '\p{__is	Rjng}', "");
Expect(1, 43311, '\p{^__is	Rjng}', "");
Expect(1, 43311, '\P{__is	Rjng}', "");
Expect(0, 43311, '\P{^__is	Rjng}', "");
Error('\p{ UNIFIED Canadian/a/ABORIGINALSyllabics extended}');
Error('\P{ UNIFIED Canadian/a/ABORIGINALSyllabics extended}');
Expect(1, 6399, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(0, 6399, '\p{^_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(0, 6399, '\P{_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(1, 6399, '\P{^_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(0, 6319, '\p{_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(1, 6319, '\p{^_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(1, 6319, '\P{_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Expect(0, 6319, '\P{^_-unifiedCanadian-Aboriginalsyllabics_Extended}', "");
Error('\p{		is:=UNIFIED	canadian-ABORIGINAL Syllabics Extended}');
Error('\P{		is:=UNIFIED	canadian-ABORIGINAL Syllabics Extended}');
Expect(1, 6399, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(0, 6399, '\p{^_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(0, 6399, '\P{_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(1, 6399, '\P{^_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(0, 6319, '\p{_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(1, 6319, '\p{^_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(1, 6319, '\P{_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Expect(0, 6319, '\P{^_is Unified-Canadian Aboriginal	SyllabicsExtended}', "");
Error('\p{_-in:=Unified-Canadian	aboriginal_Syllabics Extended}');
Error('\P{_-in:=Unified-Canadian	aboriginal_Syllabics Extended}');
Expect(1, 6399, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(0, 6399, '\p{^-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(0, 6399, '\P{-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(1, 6399, '\P{^-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(0, 6319, '\p{-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(1, 6319, '\p{^-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(1, 6319, '\P{-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Expect(0, 6319, '\P{^-	INUnifiedCanadian_Aboriginal Syllabics Extended}', "");
Error('\p{-Glagolitic/a/}');
Error('\P{-Glagolitic/a/}');
Expect(1, 11310, '\p{glagolitic}', "");
Expect(0, 11310, '\p{^glagolitic}', "");
Expect(0, 11310, '\P{glagolitic}', "");
Expect(1, 11310, '\P{^glagolitic}', "");
Expect(0, 11263, '\p{glagolitic}', "");
Expect(1, 11263, '\p{^glagolitic}', "");
Expect(1, 11263, '\P{glagolitic}', "");
Expect(0, 11263, '\P{^glagolitic}', "");
Expect(1, 11310, '\p{_glagolitic}', "");
Expect(0, 11310, '\p{^_glagolitic}', "");
Expect(0, 11310, '\P{_glagolitic}', "");
Expect(1, 11310, '\P{^_glagolitic}', "");
Expect(0, 11263, '\p{_glagolitic}', "");
Expect(1, 11263, '\p{^_glagolitic}', "");
Expect(1, 11263, '\P{_glagolitic}', "");
Expect(0, 11263, '\P{^_glagolitic}', "");
Error('\p{	 isGlagolitic/a/}');
Error('\P{	 isGlagolitic/a/}');
Expect(1, 11310, '\p{isglagolitic}', "");
Expect(0, 11310, '\p{^isglagolitic}', "");
Expect(0, 11310, '\P{isglagolitic}', "");
Expect(1, 11310, '\P{^isglagolitic}', "");
Expect(0, 11263, '\p{isglagolitic}', "");
Expect(1, 11263, '\p{^isglagolitic}', "");
Expect(1, 11263, '\P{isglagolitic}', "");
Expect(0, 11263, '\P{^isglagolitic}', "");
Expect(1, 11310, '\p{ _is GLAGOLITIC}', "");
Expect(0, 11310, '\p{^ _is GLAGOLITIC}', "");
Expect(0, 11310, '\P{ _is GLAGOLITIC}', "");
Expect(1, 11310, '\P{^ _is GLAGOLITIC}', "");
Expect(0, 11263, '\p{ _is GLAGOLITIC}', "");
Expect(1, 11263, '\p{^ _is GLAGOLITIC}', "");
Expect(1, 11263, '\P{ _is GLAGOLITIC}', "");
Expect(0, 11263, '\P{^ _is GLAGOLITIC}', "");
Error('\p{	:=Glag}');
Error('\P{	:=Glag}');
Expect(1, 11310, '\p{glag}', "");
Expect(0, 11310, '\p{^glag}', "");
Expect(0, 11310, '\P{glag}', "");
Expect(1, 11310, '\P{^glag}', "");
Expect(0, 11263, '\p{glag}', "");
Expect(1, 11263, '\p{^glag}', "");
Expect(1, 11263, '\P{glag}', "");
Expect(0, 11263, '\P{^glag}', "");
Expect(1, 11310, '\p{	_Glag}', "");
Expect(0, 11310, '\p{^	_Glag}', "");
Expect(0, 11310, '\P{	_Glag}', "");
Expect(1, 11310, '\P{^	_Glag}', "");
Expect(0, 11263, '\p{	_Glag}', "");
Expect(1, 11263, '\p{^	_Glag}', "");
Expect(1, 11263, '\P{	_Glag}', "");
Expect(0, 11263, '\P{^	_Glag}', "");
Error('\p{ 	ISGlag:=}');
Error('\P{ 	ISGlag:=}');
Expect(1, 11310, '\p{isglag}', "");
Expect(0, 11310, '\p{^isglag}', "");
Expect(0, 11310, '\P{isglag}', "");
Expect(1, 11310, '\P{^isglag}', "");
Expect(0, 11263, '\p{isglag}', "");
Expect(1, 11263, '\p{^isglag}', "");
Expect(1, 11263, '\P{isglag}', "");
Expect(0, 11263, '\P{^isglag}', "");
Expect(1, 11310, '\p{	Is	GLAG}', "");
Expect(0, 11310, '\p{^	Is	GLAG}', "");
Expect(0, 11310, '\P{	Is	GLAG}', "");
Expect(1, 11310, '\P{^	Is	GLAG}', "");
Expect(0, 11263, '\p{	Is	GLAG}', "");
Expect(1, 11263, '\p{^	Is	GLAG}', "");
Expect(1, 11263, '\P{	Is	GLAG}', "");
Expect(0, 11263, '\P{^	Is	GLAG}', "");
Error('\p{	In	OL/a/Chiki}');
Error('\P{	In	OL/a/Chiki}');
Expect(1, 7295, '\p{inolchiki}', "");
Expect(0, 7295, '\p{^inolchiki}', "");
Expect(0, 7295, '\P{inolchiki}', "");
Expect(1, 7295, '\P{^inolchiki}', "");
Expect(0, 7247, '\p{inolchiki}', "");
Expect(1, 7247, '\p{^inolchiki}', "");
Expect(1, 7247, '\P{inolchiki}', "");
Expect(0, 7247, '\P{^inolchiki}', "");
Expect(1, 7295, '\p{-	in-ol-CHIKI}', "");
Expect(0, 7295, '\p{^-	in-ol-CHIKI}', "");
Expect(0, 7295, '\P{-	in-ol-CHIKI}', "");
Expect(1, 7295, '\P{^-	in-ol-CHIKI}', "");
Expect(0, 7247, '\p{-	in-ol-CHIKI}', "");
Expect(1, 7247, '\p{^-	in-ol-CHIKI}', "");
Expect(1, 7247, '\P{-	in-ol-CHIKI}', "");
Expect(0, 7247, '\P{^-	in-ol-CHIKI}', "");
Error('\p{:=CJK_Strokes}');
Error('\P{:=CJK_Strokes}');
Expect(1, 12783, '\p{cjkstrokes}', "");
Expect(0, 12783, '\p{^cjkstrokes}', "");
Expect(0, 12783, '\P{cjkstrokes}', "");
Expect(1, 12783, '\P{^cjkstrokes}', "");
Expect(0, 12735, '\p{cjkstrokes}', "");
Expect(1, 12735, '\p{^cjkstrokes}', "");
Expect(1, 12735, '\P{cjkstrokes}', "");
Expect(0, 12735, '\P{^cjkstrokes}', "");
Expect(1, 12783, '\p{	CJK-Strokes}', "");
Expect(0, 12783, '\p{^	CJK-Strokes}', "");
Expect(0, 12783, '\P{	CJK-Strokes}', "");
Expect(1, 12783, '\P{^	CJK-Strokes}', "");
Expect(0, 12735, '\p{	CJK-Strokes}', "");
Expect(1, 12735, '\p{^	CJK-Strokes}', "");
Expect(1, 12735, '\P{	CJK-Strokes}', "");
Expect(0, 12735, '\P{^	CJK-Strokes}', "");
Error('\p{ IsCJKstrokes:=}');
Error('\P{ IsCJKstrokes:=}');
Expect(1, 12783, '\p{iscjkstrokes}', "");
Expect(0, 12783, '\p{^iscjkstrokes}', "");
Expect(0, 12783, '\P{iscjkstrokes}', "");
Expect(1, 12783, '\P{^iscjkstrokes}', "");
Expect(0, 12735, '\p{iscjkstrokes}', "");
Expect(1, 12735, '\p{^iscjkstrokes}', "");
Expect(1, 12735, '\P{iscjkstrokes}', "");
Expect(0, 12735, '\P{^iscjkstrokes}', "");
Expect(1, 12783, '\p{ Is_cjk_STROKES}', "");
Expect(0, 12783, '\p{^ Is_cjk_STROKES}', "");
Expect(0, 12783, '\P{ Is_cjk_STROKES}', "");
Expect(1, 12783, '\P{^ Is_cjk_STROKES}', "");
Expect(0, 12735, '\p{ Is_cjk_STROKES}', "");
Expect(1, 12735, '\p{^ Is_cjk_STROKES}', "");
Expect(1, 12735, '\P{ Is_cjk_STROKES}', "");
Expect(0, 12735, '\P{^ Is_cjk_STROKES}', "");
Error('\p{ 	in_CJK/a/Strokes}');
Error('\P{ 	in_CJK/a/Strokes}');
Expect(1, 12783, '\p{incjkstrokes}', "");
Expect(0, 12783, '\p{^incjkstrokes}', "");
Expect(0, 12783, '\P{incjkstrokes}', "");
Expect(1, 12783, '\P{^incjkstrokes}', "");
Expect(0, 12735, '\p{incjkstrokes}', "");
Expect(1, 12735, '\p{^incjkstrokes}', "");
Expect(1, 12735, '\P{incjkstrokes}', "");
Expect(0, 12735, '\P{^incjkstrokes}', "");
Expect(1, 12783, '\p{		In cjk_Strokes}', "");
Expect(0, 12783, '\p{^		In cjk_Strokes}', "");
Expect(0, 12783, '\P{		In cjk_Strokes}', "");
Expect(1, 12783, '\P{^		In cjk_Strokes}', "");
Expect(0, 12735, '\p{		In cjk_Strokes}', "");
Expect(1, 12735, '\p{^		In cjk_Strokes}', "");
Expect(1, 12735, '\P{		In cjk_Strokes}', "");
Expect(0, 12735, '\P{^		In cjk_Strokes}', "");
Error('\p{_ SINHALA:=}');
Error('\P{_ SINHALA:=}');
Expect(1, 3459, '\p{sinhala}', "");
Expect(0, 3459, '\p{^sinhala}', "");
Expect(0, 3459, '\P{sinhala}', "");
Expect(1, 3459, '\P{^sinhala}', "");
Expect(0, 3457, '\p{sinhala}', "");
Expect(1, 3457, '\p{^sinhala}', "");
Expect(1, 3457, '\P{sinhala}', "");
Expect(0, 3457, '\P{^sinhala}', "");
Expect(1, 3459, '\p{-_Sinhala}', "");
Expect(0, 3459, '\p{^-_Sinhala}', "");
Expect(0, 3459, '\P{-_Sinhala}', "");
Expect(1, 3459, '\P{^-_Sinhala}', "");
Expect(0, 3457, '\p{-_Sinhala}', "");
Expect(1, 3457, '\p{^-_Sinhala}', "");
Expect(1, 3457, '\P{-_Sinhala}', "");
Expect(0, 3457, '\P{^-_Sinhala}', "");
Error('\p{/a/_	IsSinhala}');
Error('\P{/a/_	IsSinhala}');
Expect(1, 3459, '\p{issinhala}', "");
Expect(0, 3459, '\p{^issinhala}', "");
Expect(0, 3459, '\P{issinhala}', "");
Expect(1, 3459, '\P{^issinhala}', "");
Expect(0, 3457, '\p{issinhala}', "");
Expect(1, 3457, '\p{^issinhala}', "");
Expect(1, 3457, '\P{issinhala}', "");
Expect(0, 3457, '\P{^issinhala}', "");
Expect(1, 3459, '\p{ _IS sinhala}', "");
Expect(0, 3459, '\p{^ _IS sinhala}', "");
Expect(0, 3459, '\P{ _IS sinhala}', "");
Expect(1, 3459, '\P{^ _IS sinhala}', "");
Expect(0, 3457, '\p{ _IS sinhala}', "");
Expect(1, 3457, '\p{^ _IS sinhala}', "");
Expect(1, 3457, '\P{ _IS sinhala}', "");
Expect(0, 3457, '\P{^ _IS sinhala}', "");
Error('\p{:= _Sinh}');
Error('\P{:= _Sinh}');
Expect(1, 3459, '\p{sinh}', "");
Expect(0, 3459, '\p{^sinh}', "");
Expect(0, 3459, '\P{sinh}', "");
Expect(1, 3459, '\P{^sinh}', "");
Expect(0, 3457, '\p{sinh}', "");
Expect(1, 3457, '\p{^sinh}', "");
Expect(1, 3457, '\P{sinh}', "");
Expect(0, 3457, '\P{^sinh}', "");
Expect(1, 3459, '\p{- Sinh}', "");
Expect(0, 3459, '\p{^- Sinh}', "");
Expect(0, 3459, '\P{- Sinh}', "");
Expect(1, 3459, '\P{^- Sinh}', "");
Expect(0, 3457, '\p{- Sinh}', "");
Expect(1, 3457, '\p{^- Sinh}', "");
Expect(1, 3457, '\P{- Sinh}', "");
Expect(0, 3457, '\P{^- Sinh}', "");
Error('\p{-_Is:=SINH}');
Error('\P{-_Is:=SINH}');
Expect(1, 3459, '\p{issinh}', "");
Expect(0, 3459, '\p{^issinh}', "");
Expect(0, 3459, '\P{issinh}', "");
Expect(1, 3459, '\P{^issinh}', "");
Expect(0, 3457, '\p{issinh}', "");
Expect(1, 3457, '\p{^issinh}', "");
Expect(1, 3457, '\P{issinh}', "");
Expect(0, 3457, '\P{^issinh}', "");
Expect(1, 3459, '\p{	_IS-Sinh}', "");
Expect(0, 3459, '\p{^	_IS-Sinh}', "");
Expect(0, 3459, '\P{	_IS-Sinh}', "");
Expect(1, 3459, '\P{^	_IS-Sinh}', "");
Expect(0, 3457, '\p{	_IS-Sinh}', "");
Expect(1, 3457, '\p{^	_IS-Sinh}', "");
Expect(1, 3457, '\P{	_IS-Sinh}', "");
Expect(0, 3457, '\P{^	_IS-Sinh}', "");
Error('\p{	/a/ugaritic}');
Error('\P{	/a/ugaritic}');
Expect(1, 66461, '\p{ugaritic}', "");
Expect(0, 66461, '\p{^ugaritic}', "");
Expect(0, 66461, '\P{ugaritic}', "");
Expect(1, 66461, '\P{^ugaritic}', "");
Expect(0, 66431, '\p{ugaritic}', "");
Expect(1, 66431, '\p{^ugaritic}', "");
Expect(1, 66431, '\P{ugaritic}', "");
Expect(0, 66431, '\P{^ugaritic}', "");
Expect(1, 66461, '\p{__Ugaritic}', "");
Expect(0, 66461, '\p{^__Ugaritic}', "");
Expect(0, 66461, '\P{__Ugaritic}', "");
Expect(1, 66461, '\P{^__Ugaritic}', "");
Expect(0, 66431, '\p{__Ugaritic}', "");
Expect(1, 66431, '\p{^__Ugaritic}', "");
Expect(1, 66431, '\P{__Ugaritic}', "");
Expect(0, 66431, '\P{^__Ugaritic}', "");
Error('\p{/a/Is-ugaritic}');
Error('\P{/a/Is-ugaritic}');
Expect(1, 66461, '\p{isugaritic}', "");
Expect(0, 66461, '\p{^isugaritic}', "");
Expect(0, 66461, '\P{isugaritic}', "");
Expect(1, 66461, '\P{^isugaritic}', "");
Expect(0, 66431, '\p{isugaritic}', "");
Expect(1, 66431, '\p{^isugaritic}', "");
Expect(1, 66431, '\P{isugaritic}', "");
Expect(0, 66431, '\P{^isugaritic}', "");
Expect(1, 66461, '\p{Is	ugaritic}', "");
Expect(0, 66461, '\p{^Is	ugaritic}', "");
Expect(0, 66461, '\P{Is	ugaritic}', "");
Expect(1, 66461, '\P{^Is	ugaritic}', "");
Expect(0, 66431, '\p{Is	ugaritic}', "");
Expect(1, 66431, '\p{^Is	ugaritic}', "");
Expect(1, 66431, '\P{Is	ugaritic}', "");
Expect(0, 66431, '\P{^Is	ugaritic}', "");
Error('\p{_:=ugar}');
Error('\P{_:=ugar}');
Expect(1, 66461, '\p{ugar}', "");
Expect(0, 66461, '\p{^ugar}', "");
Expect(0, 66461, '\P{ugar}', "");
Expect(1, 66461, '\P{^ugar}', "");
Expect(0, 66431, '\p{ugar}', "");
Expect(1, 66431, '\p{^ugar}', "");
Expect(1, 66431, '\P{ugar}', "");
Expect(0, 66431, '\P{^ugar}', "");
Expect(1, 66461, '\p{_	UGAR}', "");
Expect(0, 66461, '\p{^_	UGAR}', "");
Expect(0, 66461, '\P{_	UGAR}', "");
Expect(1, 66461, '\P{^_	UGAR}', "");
Expect(0, 66431, '\p{_	UGAR}', "");
Expect(1, 66431, '\p{^_	UGAR}', "");
Expect(1, 66431, '\P{_	UGAR}', "");
Expect(0, 66431, '\P{^_	UGAR}', "");
Error('\p{ :=Is	UGAR}');
Error('\P{ :=Is	UGAR}');
Expect(1, 66461, '\p{isugar}', "");
Expect(0, 66461, '\p{^isugar}', "");
Expect(0, 66461, '\P{isugar}', "");
Expect(1, 66461, '\P{^isugar}', "");
Expect(0, 66431, '\p{isugar}', "");
Expect(1, 66431, '\p{^isugar}', "");
Expect(1, 66431, '\P{isugar}', "");
Expect(0, 66431, '\P{^isugar}', "");
Expect(1, 66461, '\p{ _is	UGAR}', "");
Expect(0, 66461, '\p{^ _is	UGAR}', "");
Expect(0, 66461, '\P{ _is	UGAR}', "");
Expect(1, 66461, '\P{^ _is	UGAR}', "");
Expect(0, 66431, '\p{ _is	UGAR}', "");
Expect(1, 66431, '\p{^ _is	UGAR}', "");
Expect(1, 66431, '\P{ _is	UGAR}', "");
Expect(0, 66431, '\P{^ _is	UGAR}', "");
Error('\p{	-ogham:=}');
Error('\P{	-ogham:=}');
Expect(1, 5788, '\p{ogham}', "");
Expect(0, 5788, '\p{^ogham}', "");
Expect(0, 5788, '\P{ogham}', "");
Expect(1, 5788, '\P{^ogham}', "");
Expect(0, 5759, '\p{ogham}', "");
Expect(1, 5759, '\p{^ogham}', "");
Expect(1, 5759, '\P{ogham}', "");
Expect(0, 5759, '\P{^ogham}', "");
Expect(1, 5788, '\p{		Ogham}', "");
Expect(0, 5788, '\p{^		Ogham}', "");
Expect(0, 5788, '\P{		Ogham}', "");
Expect(1, 5788, '\P{^		Ogham}', "");
Expect(0, 5759, '\p{		Ogham}', "");
Expect(1, 5759, '\p{^		Ogham}', "");
Expect(1, 5759, '\P{		Ogham}', "");
Expect(0, 5759, '\P{^		Ogham}', "");
Error('\p{/a/ _IsOgham}');
Error('\P{/a/ _IsOgham}');
Expect(1, 5788, '\p{isogham}', "");
Expect(0, 5788, '\p{^isogham}', "");
Expect(0, 5788, '\P{isogham}', "");
Expect(1, 5788, '\P{^isogham}', "");
Expect(0, 5759, '\p{isogham}', "");
Expect(1, 5759, '\p{^isogham}', "");
Expect(1, 5759, '\P{isogham}', "");
Expect(0, 5759, '\P{^isogham}', "");
Expect(1, 5788, '\p{-_isOgham}', "");
Expect(0, 5788, '\p{^-_isOgham}', "");
Expect(0, 5788, '\P{-_isOgham}', "");
Expect(1, 5788, '\P{^-_isOgham}', "");
Expect(0, 5759, '\p{-_isOgham}', "");
Expect(1, 5759, '\p{^-_isOgham}', "");
Expect(1, 5759, '\P{-_isOgham}', "");
Expect(0, 5759, '\P{^-_isOgham}', "");
Error('\p{/a/	ogam}');
Error('\P{/a/	ogam}');
Expect(1, 5788, '\p{ogam}', "");
Expect(0, 5788, '\p{^ogam}', "");
Expect(0, 5788, '\P{ogam}', "");
Expect(1, 5788, '\P{^ogam}', "");
Expect(0, 5759, '\p{ogam}', "");
Expect(1, 5759, '\p{^ogam}', "");
Expect(1, 5759, '\P{ogam}', "");
Expect(0, 5759, '\P{^ogam}', "");
Expect(1, 5788, '\p{- Ogam}', "");
Expect(0, 5788, '\p{^- Ogam}', "");
Expect(0, 5788, '\P{- Ogam}', "");
Expect(1, 5788, '\P{^- Ogam}', "");
Expect(0, 5759, '\p{- Ogam}', "");
Expect(1, 5759, '\p{^- Ogam}', "");
Expect(1, 5759, '\P{- Ogam}', "");
Expect(0, 5759, '\P{^- Ogam}', "");
Error('\p{	/a/Is_Ogam}');
Error('\P{	/a/Is_Ogam}');
Expect(1, 5788, '\p{isogam}', "");
Expect(0, 5788, '\p{^isogam}', "");
Expect(0, 5788, '\P{isogam}', "");
Expect(1, 5788, '\P{^isogam}', "");
Expect(0, 5759, '\p{isogam}', "");
Expect(1, 5759, '\p{^isogam}', "");
Expect(1, 5759, '\P{isogam}', "");
Expect(0, 5759, '\P{^isogam}', "");
Expect(1, 5788, '\p{  Is	OGAM}', "");
Expect(0, 5788, '\p{^  Is	OGAM}', "");
Expect(0, 5788, '\P{  Is	OGAM}', "");
Expect(1, 5788, '\P{^  Is	OGAM}', "");
Expect(0, 5759, '\p{  Is	OGAM}', "");
Expect(1, 5759, '\p{^  Is	OGAM}', "");
Expect(1, 5759, '\P{  Is	OGAM}', "");
Expect(0, 5759, '\P{^  Is	OGAM}', "");
Error('\p{	-bengali/a/}');
Error('\P{	-bengali/a/}');
Expect(1, 2435, '\p{bengali}', "");
Expect(0, 2435, '\p{^bengali}', "");
Expect(0, 2435, '\P{bengali}', "");
Expect(1, 2435, '\P{^bengali}', "");
Expect(0, 2432, '\p{bengali}', "");
Expect(1, 2432, '\p{^bengali}', "");
Expect(1, 2432, '\P{bengali}', "");
Expect(0, 2432, '\P{^bengali}', "");
Expect(1, 2435, '\p{Bengali}', "");
Expect(0, 2435, '\p{^Bengali}', "");
Expect(0, 2435, '\P{Bengali}', "");
Expect(1, 2435, '\P{^Bengali}', "");
Expect(0, 2432, '\p{Bengali}', "");
Expect(1, 2432, '\p{^Bengali}', "");
Expect(1, 2432, '\P{Bengali}', "");
Expect(0, 2432, '\P{^Bengali}', "");
Error('\p{	_Is:=Bengali}');
Error('\P{	_Is:=Bengali}');
Expect(1, 2435, '\p{isbengali}', "");
Expect(0, 2435, '\p{^isbengali}', "");
Expect(0, 2435, '\P{isbengali}', "");
Expect(1, 2435, '\P{^isbengali}', "");
Expect(0, 2432, '\p{isbengali}', "");
Expect(1, 2432, '\p{^isbengali}', "");
Expect(1, 2432, '\P{isbengali}', "");
Expect(0, 2432, '\P{^isbengali}', "");
Expect(1, 2435, '\p{ -Is	BENGALI}', "");
Expect(0, 2435, '\p{^ -Is	BENGALI}', "");
Expect(0, 2435, '\P{ -Is	BENGALI}', "");
Expect(1, 2435, '\P{^ -Is	BENGALI}', "");
Expect(0, 2432, '\p{ -Is	BENGALI}', "");
Expect(1, 2432, '\p{^ -Is	BENGALI}', "");
Expect(1, 2432, '\P{ -Is	BENGALI}', "");
Expect(0, 2432, '\P{^ -Is	BENGALI}', "");
Error('\p{-	BENG:=}');
Error('\P{-	BENG:=}');
Expect(1, 2435, '\p{beng}', "");
Expect(0, 2435, '\p{^beng}', "");
Expect(0, 2435, '\P{beng}', "");
Expect(1, 2435, '\P{^beng}', "");
Expect(0, 2432, '\p{beng}', "");
Expect(1, 2432, '\p{^beng}', "");
Expect(1, 2432, '\P{beng}', "");
Expect(0, 2432, '\P{^beng}', "");
Expect(1, 2435, '\p{	BENG}', "");
Expect(0, 2435, '\p{^	BENG}', "");
Expect(0, 2435, '\P{	BENG}', "");
Expect(1, 2435, '\P{^	BENG}', "");
Expect(0, 2432, '\p{	BENG}', "");
Expect(1, 2432, '\p{^	BENG}', "");
Expect(1, 2432, '\P{	BENG}', "");
Expect(0, 2432, '\P{^	BENG}', "");
Error('\p{:=IS	BENG}');
Error('\P{:=IS	BENG}');
Expect(1, 2435, '\p{isbeng}', "");
Expect(0, 2435, '\p{^isbeng}', "");
Expect(0, 2435, '\P{isbeng}', "");
Expect(1, 2435, '\P{^isbeng}', "");
Expect(0, 2432, '\p{isbeng}', "");
Expect(1, 2432, '\p{^isbeng}', "");
Expect(1, 2432, '\P{isbeng}', "");
Expect(0, 2432, '\P{^isbeng}', "");
Expect(1, 2435, '\p{	is_BENG}', "");
Expect(0, 2435, '\p{^	is_BENG}', "");
Expect(0, 2435, '\P{	is_BENG}', "");
Expect(1, 2435, '\P{^	is_BENG}', "");
Expect(0, 2432, '\p{	is_BENG}', "");
Expect(1, 2432, '\p{^	is_BENG}', "");
Expect(1, 2432, '\P{	is_BENG}', "");
Expect(0, 2432, '\P{^	is_BENG}', "");
Error('\p{/a/_-DIACRITIC}');
Error('\P{/a/_-DIACRITIC}');
Expect(1, 94, '\p{diacritic}', "");
Expect(0, 94, '\p{^diacritic}', "");
Expect(0, 94, '\P{diacritic}', "");
Expect(1, 94, '\P{^diacritic}', "");
Expect(0, 93, '\p{diacritic}', "");
Expect(1, 93, '\p{^diacritic}', "");
Expect(1, 93, '\P{diacritic}', "");
Expect(0, 93, '\P{^diacritic}', "");
Expect(1, 94, '\p{_ diacritic}', "");
Expect(0, 94, '\p{^_ diacritic}', "");
Expect(0, 94, '\P{_ diacritic}', "");
Expect(1, 94, '\P{^_ diacritic}', "");
Expect(0, 93, '\p{_ diacritic}', "");
Expect(1, 93, '\p{^_ diacritic}', "");
Expect(1, 93, '\P{_ diacritic}', "");
Expect(0, 93, '\P{^_ diacritic}', "");
Error('\p{/a/is Diacritic}');
Error('\P{/a/is Diacritic}');
Expect(1, 94, '\p{isdiacritic}', "");
Expect(0, 94, '\p{^isdiacritic}', "");
Expect(0, 94, '\P{isdiacritic}', "");
Expect(1, 94, '\P{^isdiacritic}', "");
Expect(0, 93, '\p{isdiacritic}', "");
Expect(1, 93, '\p{^isdiacritic}', "");
Expect(1, 93, '\P{isdiacritic}', "");
Expect(0, 93, '\P{^isdiacritic}', "");
Expect(1, 94, '\p{-_is_Diacritic}', "");
Expect(0, 94, '\p{^-_is_Diacritic}', "");
Expect(0, 94, '\P{-_is_Diacritic}', "");
Expect(1, 94, '\P{^-_is_Diacritic}', "");
Expect(0, 93, '\p{-_is_Diacritic}', "");
Expect(1, 93, '\p{^-_is_Diacritic}', "");
Expect(1, 93, '\P{-_is_Diacritic}', "");
Expect(0, 93, '\P{^-_is_Diacritic}', "");
Error('\p{	:=Dia}');
Error('\P{	:=Dia}');
Expect(1, 94, '\p{dia}', "");
Expect(0, 94, '\p{^dia}', "");
Expect(0, 94, '\P{dia}', "");
Expect(1, 94, '\P{^dia}', "");
Expect(0, 93, '\p{dia}', "");
Expect(1, 93, '\p{^dia}', "");
Expect(1, 93, '\P{dia}', "");
Expect(0, 93, '\P{^dia}', "");
Expect(1, 94, '\p{-	Dia}', "");
Expect(0, 94, '\p{^-	Dia}', "");
Expect(0, 94, '\P{-	Dia}', "");
Expect(1, 94, '\P{^-	Dia}', "");
Expect(0, 93, '\p{-	Dia}', "");
Expect(1, 93, '\p{^-	Dia}', "");
Expect(1, 93, '\P{-	Dia}', "");
Expect(0, 93, '\P{^-	Dia}', "");
Error('\p{_/a/IS	DIA}');
Error('\P{_/a/IS	DIA}');
Expect(1, 94, '\p{isdia}', "");
Expect(0, 94, '\p{^isdia}', "");
Expect(0, 94, '\P{isdia}', "");
Expect(1, 94, '\P{^isdia}', "");
Expect(0, 93, '\p{isdia}', "");
Expect(1, 93, '\p{^isdia}', "");
Expect(1, 93, '\P{isdia}', "");
Expect(0, 93, '\P{^isdia}', "");
Expect(1, 94, '\p{__is Dia}', "");
Expect(0, 94, '\p{^__is Dia}', "");
Expect(0, 94, '\P{__is Dia}', "");
Expect(1, 94, '\P{^__is Dia}', "");
Expect(0, 93, '\p{__is Dia}', "");
Expect(1, 93, '\p{^__is Dia}', "");
Expect(1, 93, '\P{__is Dia}', "");
Expect(0, 93, '\P{^__is Dia}', "");
Error('\p{	_lowercase letter:=}');
Error('\P{	_lowercase letter:=}');
Expect(1, 122, '\p{lowercaseletter}', "");
Expect(0, 122, '\p{^lowercaseletter}', "");
Expect(0, 122, '\P{lowercaseletter}', "");
Expect(1, 122, '\P{^lowercaseletter}', "");
Expect(0, 96, '\p{lowercaseletter}', "");
Expect(1, 96, '\p{^lowercaseletter}', "");
Expect(1, 96, '\P{lowercaseletter}', "");
Expect(0, 96, '\P{^lowercaseletter}', "");
Expect(1, 122, '\p{ -LOWERCASE LETTER}', "");
Expect(0, 122, '\p{^ -LOWERCASE LETTER}', "");
Expect(0, 122, '\P{ -LOWERCASE LETTER}', "");
Expect(1, 122, '\P{^ -LOWERCASE LETTER}', "");
Expect(0, 96, '\p{ -LOWERCASE LETTER}', "");
Expect(1, 96, '\p{^ -LOWERCASE LETTER}', "");
Expect(1, 96, '\P{ -LOWERCASE LETTER}', "");
Expect(0, 96, '\P{^ -LOWERCASE LETTER}', "");
Error('\p{ -Is	LowercaseLETTER:=}');
Error('\P{ -Is	LowercaseLETTER:=}');
Expect(1, 122, '\p{islowercaseletter}', "");
Expect(0, 122, '\p{^islowercaseletter}', "");
Expect(0, 122, '\P{islowercaseletter}', "");
Expect(1, 122, '\P{^islowercaseletter}', "");
Expect(0, 96, '\p{islowercaseletter}', "");
Expect(1, 96, '\p{^islowercaseletter}', "");
Expect(1, 96, '\P{islowercaseletter}', "");
Expect(0, 96, '\P{^islowercaseletter}', "");
Expect(1, 122, '\p{-_isLowercase-letter}', "");
Expect(0, 122, '\p{^-_isLowercase-letter}', "");
Expect(0, 122, '\P{-_isLowercase-letter}', "");
Expect(1, 122, '\P{^-_isLowercase-letter}', "");
Expect(0, 96, '\p{-_isLowercase-letter}', "");
Expect(1, 96, '\p{^-_isLowercase-letter}', "");
Expect(1, 96, '\P{-_isLowercase-letter}', "");
Expect(0, 96, '\P{^-_isLowercase-letter}', "");
Error('\p{/a/--LL}');
Error('\P{/a/--LL}');
Expect(1, 122, '\p{ll}', "");
Expect(0, 122, '\p{^ll}', "");
Expect(0, 122, '\P{ll}', "");
Expect(1, 122, '\P{^ll}', "");
Expect(0, 96, '\p{ll}', "");
Expect(1, 96, '\p{^ll}', "");
Expect(1, 96, '\P{ll}', "");
Expect(0, 96, '\P{^ll}', "");
Expect(1, 122, '\p{	Ll}', "");
Expect(0, 122, '\p{^	Ll}', "");
Expect(0, 122, '\P{	Ll}', "");
Expect(1, 122, '\P{^	Ll}', "");
Expect(0, 96, '\p{	Ll}', "");
Expect(1, 96, '\p{^	Ll}', "");
Expect(1, 96, '\P{	Ll}', "");
Expect(0, 96, '\P{^	Ll}', "");
Error('\p{	is/a/Ll}');
Error('\P{	is/a/Ll}');
Expect(1, 122, '\p{isll}', "");
Expect(0, 122, '\p{^isll}', "");
Expect(0, 122, '\P{isll}', "");
Expect(1, 122, '\P{^isll}', "");
Expect(0, 96, '\p{isll}', "");
Expect(1, 96, '\p{^isll}', "");
Expect(1, 96, '\P{isll}', "");
Expect(0, 96, '\P{^isll}', "");
Expect(1, 122, '\p{	 IS_LL}', "");
Expect(0, 122, '\p{^	 IS_LL}', "");
Expect(0, 122, '\P{	 IS_LL}', "");
Expect(1, 122, '\P{^	 IS_LL}', "");
Expect(0, 96, '\p{	 IS_LL}', "");
Expect(1, 96, '\p{^	 IS_LL}', "");
Expect(1, 96, '\P{	 IS_LL}', "");
Expect(0, 96, '\P{^	 IS_LL}', "");
Error('\p{_ hangul_Compatibility-jamo/a/}');
Error('\P{_ hangul_Compatibility-jamo/a/}');
Expect(1, 12687, '\p{hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{  hangul	Compatibility	JAMO}', "");
Expect(0, 12687, '\p{^  hangul	Compatibility	JAMO}', "");
Expect(0, 12687, '\P{  hangul	Compatibility	JAMO}', "");
Expect(1, 12687, '\P{^  hangul	Compatibility	JAMO}', "");
Expect(0, 12591, '\p{  hangul	Compatibility	JAMO}', "");
Expect(1, 12591, '\p{^  hangul	Compatibility	JAMO}', "");
Expect(1, 12591, '\P{  hangul	Compatibility	JAMO}', "");
Expect(0, 12591, '\P{^  hangul	Compatibility	JAMO}', "");
Error('\p{- IS:=hangul-COMPATIBILITY-Jamo}');
Error('\P{- IS:=hangul-COMPATIBILITY-Jamo}');
Expect(1, 12687, '\p{ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{__is-HangulCompatibility-jamo}', "");
Expect(0, 12687, '\p{^__is-HangulCompatibility-jamo}', "");
Expect(0, 12687, '\P{__is-HangulCompatibility-jamo}', "");
Expect(1, 12687, '\P{^__is-HangulCompatibility-jamo}', "");
Expect(0, 12591, '\p{__is-HangulCompatibility-jamo}', "");
Expect(1, 12591, '\p{^__is-HangulCompatibility-jamo}', "");
Expect(1, 12591, '\P{__is-HangulCompatibility-jamo}', "");
Expect(0, 12591, '\P{^__is-HangulCompatibility-jamo}', "");
Error('\p{ /a/In-HANGUL_Compatibility-jamo}');
Error('\P{ /a/In-HANGUL_Compatibility-jamo}');
Expect(1, 12687, '\p{inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(0, 12687, '\p{^_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(0, 12687, '\P{_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(1, 12687, '\P{^_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(0, 12591, '\p{_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(1, 12591, '\p{^_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(1, 12591, '\P{_ In_Hangul COMPATIBILITY	Jamo}', "");
Expect(0, 12591, '\P{^_ In_Hangul COMPATIBILITY	Jamo}', "");
Error('\p{-Musical/a/Symbols}');
Error('\P{-Musical/a/Symbols}');
Expect(1, 119295, '\p{musicalsymbols}', "");
Expect(0, 119295, '\p{^musicalsymbols}', "");
Expect(0, 119295, '\P{musicalsymbols}', "");
Expect(1, 119295, '\P{^musicalsymbols}', "");
Expect(0, 119039, '\p{musicalsymbols}', "");
Expect(1, 119039, '\p{^musicalsymbols}', "");
Expect(1, 119039, '\P{musicalsymbols}', "");
Expect(0, 119039, '\P{^musicalsymbols}', "");
Expect(1, 119295, '\p{ 	Musical_SYMBOLS}', "");
Expect(0, 119295, '\p{^ 	Musical_SYMBOLS}', "");
Expect(0, 119295, '\P{ 	Musical_SYMBOLS}', "");
Expect(1, 119295, '\P{^ 	Musical_SYMBOLS}', "");
Expect(0, 119039, '\p{ 	Musical_SYMBOLS}', "");
Expect(1, 119039, '\p{^ 	Musical_SYMBOLS}', "");
Expect(1, 119039, '\P{ 	Musical_SYMBOLS}', "");
Expect(0, 119039, '\P{^ 	Musical_SYMBOLS}', "");
Error('\p{_/a/IS	musical-Symbols}');
Error('\P{_/a/IS	musical-Symbols}');
Expect(1, 119295, '\p{ismusicalsymbols}', "");
Expect(0, 119295, '\p{^ismusicalsymbols}', "");
Expect(0, 119295, '\P{ismusicalsymbols}', "");
Expect(1, 119295, '\P{^ismusicalsymbols}', "");
Expect(0, 119039, '\p{ismusicalsymbols}', "");
Expect(1, 119039, '\p{^ismusicalsymbols}', "");
Expect(1, 119039, '\P{ismusicalsymbols}', "");
Expect(0, 119039, '\P{^ismusicalsymbols}', "");
Expect(1, 119295, '\p{-_IS-Musical Symbols}', "");
Expect(0, 119295, '\p{^-_IS-Musical Symbols}', "");
Expect(0, 119295, '\P{-_IS-Musical Symbols}', "");
Expect(1, 119295, '\P{^-_IS-Musical Symbols}', "");
Expect(0, 119039, '\p{-_IS-Musical Symbols}', "");
Expect(1, 119039, '\p{^-_IS-Musical Symbols}', "");
Expect(1, 119039, '\P{-_IS-Musical Symbols}', "");
Expect(0, 119039, '\P{^-_IS-Musical Symbols}', "");
Error('\p{:=In-musical Symbols}');
Error('\P{:=In-musical Symbols}');
Expect(1, 119295, '\p{inmusicalsymbols}', "");
Expect(0, 119295, '\p{^inmusicalsymbols}', "");
Expect(0, 119295, '\P{inmusicalsymbols}', "");
Expect(1, 119295, '\P{^inmusicalsymbols}', "");
Expect(0, 119039, '\p{inmusicalsymbols}', "");
Expect(1, 119039, '\p{^inmusicalsymbols}', "");
Expect(1, 119039, '\P{inmusicalsymbols}', "");
Expect(0, 119039, '\P{^inmusicalsymbols}', "");
Expect(1, 119295, '\p{-In musical	SYMBOLS}', "");
Expect(0, 119295, '\p{^-In musical	SYMBOLS}', "");
Expect(0, 119295, '\P{-In musical	SYMBOLS}', "");
Expect(1, 119295, '\P{^-In musical	SYMBOLS}', "");
Expect(0, 119039, '\p{-In musical	SYMBOLS}', "");
Expect(1, 119039, '\p{^-In musical	SYMBOLS}', "");
Expect(1, 119039, '\P{-In musical	SYMBOLS}', "");
Expect(0, 119039, '\P{^-In musical	SYMBOLS}', "");
Error('\p{_Tags:=}');
Error('\P{_Tags:=}');
Expect(1, 917631, '\p{tags}', "");
Expect(0, 917631, '\p{^tags}', "");
Expect(0, 917631, '\P{tags}', "");
Expect(1, 917631, '\P{^tags}', "");
Expect(0, 1, '\p{tags}', "");
Expect(1, 1, '\p{^tags}', "");
Expect(1, 1, '\P{tags}', "");
Expect(0, 1, '\P{^tags}', "");
Expect(1, 917631, '\p{-tags}', "");
Expect(0, 917631, '\p{^-tags}', "");
Expect(0, 917631, '\P{-tags}', "");
Expect(1, 917631, '\P{^-tags}', "");
Expect(0, 1, '\p{-tags}', "");
Expect(1, 1, '\p{^-tags}', "");
Expect(1, 1, '\P{-tags}', "");
Expect(0, 1, '\P{^-tags}', "");
Error('\p{_Is-tags/a/}');
Error('\P{_Is-tags/a/}');
Expect(1, 917631, '\p{istags}', "");
Expect(0, 917631, '\p{^istags}', "");
Expect(0, 917631, '\P{istags}', "");
Expect(1, 917631, '\P{^istags}', "");
Expect(0, 1, '\p{istags}', "");
Expect(1, 1, '\p{^istags}', "");
Expect(1, 1, '\P{istags}', "");
Expect(0, 1, '\P{^istags}', "");
Expect(1, 917631, '\p{	_istags}', "");
Expect(0, 917631, '\p{^	_istags}', "");
Expect(0, 917631, '\P{	_istags}', "");
Expect(1, 917631, '\P{^	_istags}', "");
Expect(0, 1, '\p{	_istags}', "");
Expect(1, 1, '\p{^	_istags}', "");
Expect(1, 1, '\P{	_istags}', "");
Expect(0, 1, '\P{^	_istags}', "");
Error('\p{/a/		INTAGS}');
Error('\P{/a/		INTAGS}');
Expect(1, 917631, '\p{intags}', "");
Expect(0, 917631, '\p{^intags}', "");
Expect(0, 917631, '\P{intags}', "");
Expect(1, 917631, '\P{^intags}', "");
Expect(0, 1, '\p{intags}', "");
Expect(1, 1, '\p{^intags}', "");
Expect(1, 1, '\P{intags}', "");
Expect(0, 1, '\P{^intags}', "");
Expect(1, 917631, '\p{ -In TAGS}', "");
Expect(0, 917631, '\p{^ -In TAGS}', "");
Expect(0, 917631, '\P{ -In TAGS}', "");
Expect(1, 917631, '\P{^ -In TAGS}', "");
Expect(0, 1, '\p{ -In TAGS}', "");
Expect(1, 1, '\p{^ -In TAGS}', "");
Expect(1, 1, '\P{ -In TAGS}', "");
Expect(0, 1, '\P{^ -In TAGS}', "");
Error('\p{/a/		separator}');
Error('\P{/a/		separator}');
Expect(1, 32, '\p{separator}', "");
Expect(0, 32, '\p{^separator}', "");
Expect(0, 32, '\P{separator}', "");
Expect(1, 32, '\P{^separator}', "");
Expect(0, 31, '\p{separator}', "");
Expect(1, 31, '\p{^separator}', "");
Expect(1, 31, '\P{separator}', "");
Expect(0, 31, '\P{^separator}', "");
Expect(1, 32, '\p{--Separator}', "");
Expect(0, 32, '\p{^--Separator}', "");
Expect(0, 32, '\P{--Separator}', "");
Expect(1, 32, '\P{^--Separator}', "");
Expect(0, 31, '\p{--Separator}', "");
Expect(1, 31, '\p{^--Separator}', "");
Expect(1, 31, '\P{--Separator}', "");
Expect(0, 31, '\P{^--Separator}', "");
Error('\p{	/a/is	SEPARATOR}');
Error('\P{	/a/is	SEPARATOR}');
Expect(1, 32, '\p{isseparator}', "");
Expect(0, 32, '\p{^isseparator}', "");
Expect(0, 32, '\P{isseparator}', "");
Expect(1, 32, '\P{^isseparator}', "");
Expect(0, 31, '\p{isseparator}', "");
Expect(1, 31, '\p{^isseparator}', "");
Expect(1, 31, '\P{isseparator}', "");
Expect(0, 31, '\P{^isseparator}', "");
Expect(1, 32, '\p{_	Is	SEPARATOR}', "");
Expect(0, 32, '\p{^_	Is	SEPARATOR}', "");
Expect(0, 32, '\P{_	Is	SEPARATOR}', "");
Expect(1, 32, '\P{^_	Is	SEPARATOR}', "");
Expect(0, 31, '\p{_	Is	SEPARATOR}', "");
Expect(1, 31, '\p{^_	Is	SEPARATOR}', "");
Expect(1, 31, '\P{_	Is	SEPARATOR}', "");
Expect(0, 31, '\P{^_	Is	SEPARATOR}', "");
Error('\p{z:=}');
Error('\P{z:=}');
Expect(1, 32, '\p{z}', "");
Expect(0, 32, '\p{^z}', "");
Expect(0, 32, '\P{z}', "");
Expect(1, 32, '\P{^z}', "");
Expect(0, 31, '\p{z}', "");
Expect(1, 31, '\p{^z}', "");
Expect(1, 31, '\P{z}', "");
Expect(0, 31, '\P{^z}', "");
Expect(1, 32, '\p{_-Z}', "");
Expect(0, 32, '\p{^_-Z}', "");
Expect(0, 32, '\P{_-Z}', "");
Expect(1, 32, '\P{^_-Z}', "");
Expect(0, 31, '\p{_-Z}', "");
Expect(1, 31, '\p{^_-Z}', "");
Expect(1, 31, '\P{_-Z}', "");
Expect(0, 31, '\P{^_-Z}', "");
Error('\p{_Is/a/Z}');
Error('\P{_Is/a/Z}');
Expect(1, 32, '\p{isz}', "");
Expect(0, 32, '\p{^isz}', "");
Expect(0, 32, '\P{isz}', "");
Expect(1, 32, '\P{^isz}', "");
Expect(0, 31, '\p{isz}', "");
Expect(1, 31, '\p{^isz}', "");
Expect(1, 31, '\P{isz}', "");
Expect(0, 31, '\P{^isz}', "");
Expect(1, 32, '\p{_ is Z}', "");
Expect(0, 32, '\p{^_ is Z}', "");
Expect(0, 32, '\P{_ is Z}', "");
Expect(1, 32, '\P{^_ is Z}', "");
Expect(0, 31, '\p{_ is Z}', "");
Expect(1, 31, '\p{^_ is Z}', "");
Expect(1, 31, '\P{_ is Z}', "");
Expect(0, 31, '\P{^_ is Z}', "");
Error('\p{-	Ancient:=GREEKmusical_Notation}');
Error('\P{-	Ancient:=GREEKmusical_Notation}');
Expect(1, 119375, '\p{ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{_ANCIENT Greek musical	Notation}', "");
Expect(0, 119375, '\p{^_ANCIENT Greek musical	Notation}', "");
Expect(0, 119375, '\P{_ANCIENT Greek musical	Notation}', "");
Expect(1, 119375, '\P{^_ANCIENT Greek musical	Notation}', "");
Expect(0, 119295, '\p{_ANCIENT Greek musical	Notation}', "");
Expect(1, 119295, '\p{^_ANCIENT Greek musical	Notation}', "");
Expect(1, 119295, '\P{_ANCIENT Greek musical	Notation}', "");
Expect(0, 119295, '\P{^_ANCIENT Greek musical	Notation}', "");
Error('\p{:=is_ancient	Greek	Musical-NOTATION}');
Error('\P{:=is_ancient	Greek	Musical-NOTATION}');
Expect(1, 119375, '\p{isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{ISANCIENTGreekmusical	Notation}', "");
Expect(0, 119375, '\p{^ISANCIENTGreekmusical	Notation}', "");
Expect(0, 119375, '\P{ISANCIENTGreekmusical	Notation}', "");
Expect(1, 119375, '\P{^ISANCIENTGreekmusical	Notation}', "");
Expect(0, 119295, '\p{ISANCIENTGreekmusical	Notation}', "");
Expect(1, 119295, '\p{^ISANCIENTGreekmusical	Notation}', "");
Expect(1, 119295, '\P{ISANCIENTGreekmusical	Notation}', "");
Expect(0, 119295, '\P{^ISANCIENTGreekmusical	Notation}', "");
Error('\p{-/a/In	Ancient_Greek Musical_Notation}');
Error('\P{-/a/In	Ancient_Greek Musical_Notation}');
Expect(1, 119375, '\p{inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(0, 119375, '\p{^ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(0, 119375, '\P{ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(1, 119375, '\P{^ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(0, 119295, '\p{ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(1, 119295, '\p{^ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(1, 119295, '\P{ 	IN-Ancient greek	Musical	NOTATION}', "");
Expect(0, 119295, '\P{^ 	IN-Ancient greek	Musical	NOTATION}', "");
Error('\p{	:=PosixBlank}');
Error('\P{	:=PosixBlank}');
Expect(1, 9, '\p{posixblank}', "");
Expect(0, 9, '\p{^posixblank}', "");
Expect(0, 9, '\P{posixblank}', "");
Expect(1, 9, '\P{^posixblank}', "");
Expect(0, 8, '\p{posixblank}', "");
Expect(1, 8, '\p{^posixblank}', "");
Expect(1, 8, '\P{posixblank}', "");
Expect(0, 8, '\P{^posixblank}', "");
Expect(1, 9, '\p{ PosixBlank}', "");
Expect(0, 9, '\p{^ PosixBlank}', "");
Expect(0, 9, '\P{ PosixBlank}', "");
Expect(1, 9, '\P{^ PosixBlank}', "");
Expect(0, 8, '\p{ PosixBlank}', "");
Expect(1, 8, '\p{^ PosixBlank}', "");
Expect(1, 8, '\P{ PosixBlank}', "");
Expect(0, 8, '\P{^ PosixBlank}', "");
Error('\p{ :=Is-PosixBlank}');
Error('\P{ :=Is-PosixBlank}');
Expect(1, 9, '\p{isposixblank}', "");
Expect(0, 9, '\p{^isposixblank}', "");
Expect(0, 9, '\P{isposixblank}', "");
Expect(1, 9, '\P{^isposixblank}', "");
Expect(0, 8, '\p{isposixblank}', "");
Expect(1, 8, '\p{^isposixblank}', "");
Expect(1, 8, '\P{isposixblank}', "");
Expect(0, 8, '\P{^isposixblank}', "");
Expect(1, 9, '\p{	_IS PosixBlank}', "");
Expect(0, 9, '\p{^	_IS PosixBlank}', "");
Expect(0, 9, '\P{	_IS PosixBlank}', "");
Expect(1, 9, '\P{^	_IS PosixBlank}', "");
Expect(0, 8, '\p{	_IS PosixBlank}', "");
Expect(1, 8, '\p{^	_IS PosixBlank}', "");
Expect(1, 8, '\P{	_IS PosixBlank}', "");
Expect(0, 8, '\P{^	_IS PosixBlank}', "");
Error('\p{-In:=Sinhala}');
Error('\P{-In:=Sinhala}');
Expect(1, 3583, '\p{insinhala}', "");
Expect(0, 3583, '\p{^insinhala}', "");
Expect(0, 3583, '\P{insinhala}', "");
Expect(1, 3583, '\P{^insinhala}', "");
Expect(0, 3455, '\p{insinhala}', "");
Expect(1, 3455, '\p{^insinhala}', "");
Expect(1, 3455, '\P{insinhala}', "");
Expect(0, 3455, '\P{^insinhala}', "");
Expect(1, 3583, '\p{		In	Sinhala}', "");
Expect(0, 3583, '\p{^		In	Sinhala}', "");
Expect(0, 3583, '\P{		In	Sinhala}', "");
Expect(1, 3583, '\P{^		In	Sinhala}', "");
Expect(0, 3455, '\p{		In	Sinhala}', "");
Expect(1, 3455, '\p{^		In	Sinhala}', "");
Expect(1, 3455, '\P{		In	Sinhala}', "");
Expect(0, 3455, '\P{^		In	Sinhala}', "");
Error('\p{-:=Mongolian}');
Error('\P{-:=Mongolian}');
Expect(1, 6145, '\p{mongolian}', "");
Expect(0, 6145, '\p{^mongolian}', "");
Expect(0, 6145, '\P{mongolian}', "");
Expect(1, 6145, '\P{^mongolian}', "");
Expect(0, 6143, '\p{mongolian}', "");
Expect(1, 6143, '\p{^mongolian}', "");
Expect(1, 6143, '\P{mongolian}', "");
Expect(0, 6143, '\P{^mongolian}', "");
Expect(1, 6145, '\p{ -mongolian}', "");
Expect(0, 6145, '\p{^ -mongolian}', "");
Expect(0, 6145, '\P{ -mongolian}', "");
Expect(1, 6145, '\P{^ -mongolian}', "");
Expect(0, 6143, '\p{ -mongolian}', "");
Expect(1, 6143, '\p{^ -mongolian}', "");
Expect(1, 6143, '\P{ -mongolian}', "");
Expect(0, 6143, '\P{^ -mongolian}', "");
Error('\p{:=__IS-Mongolian}');
Error('\P{:=__IS-Mongolian}');
Expect(1, 6145, '\p{ismongolian}', "");
Expect(0, 6145, '\p{^ismongolian}', "");
Expect(0, 6145, '\P{ismongolian}', "");
Expect(1, 6145, '\P{^ismongolian}', "");
Expect(0, 6143, '\p{ismongolian}', "");
Expect(1, 6143, '\p{^ismongolian}', "");
Expect(1, 6143, '\P{ismongolian}', "");
Expect(0, 6143, '\P{^ismongolian}', "");
Expect(1, 6145, '\p{__Is-MONGOLIAN}', "");
Expect(0, 6145, '\p{^__Is-MONGOLIAN}', "");
Expect(0, 6145, '\P{__Is-MONGOLIAN}', "");
Expect(1, 6145, '\P{^__Is-MONGOLIAN}', "");
Expect(0, 6143, '\p{__Is-MONGOLIAN}', "");
Expect(1, 6143, '\p{^__Is-MONGOLIAN}', "");
Expect(1, 6143, '\P{__Is-MONGOLIAN}', "");
Expect(0, 6143, '\P{^__Is-MONGOLIAN}', "");
Error('\p{ -MONG/a/}');
Error('\P{ -MONG/a/}');
Expect(1, 6145, '\p{mong}', "");
Expect(0, 6145, '\p{^mong}', "");
Expect(0, 6145, '\P{mong}', "");
Expect(1, 6145, '\P{^mong}', "");
Expect(0, 6143, '\p{mong}', "");
Expect(1, 6143, '\p{^mong}', "");
Expect(1, 6143, '\P{mong}', "");
Expect(0, 6143, '\P{^mong}', "");
Expect(1, 6145, '\p{__Mong}', "");
Expect(0, 6145, '\p{^__Mong}', "");
Expect(0, 6145, '\P{__Mong}', "");
Expect(1, 6145, '\P{^__Mong}', "");
Expect(0, 6143, '\p{__Mong}', "");
Expect(1, 6143, '\p{^__Mong}', "");
Expect(1, 6143, '\P{__Mong}', "");
Expect(0, 6143, '\P{^__Mong}', "");
Error('\p{	-is/a/MONG}');
Error('\P{	-is/a/MONG}');
Expect(1, 6145, '\p{ismong}', "");
Expect(0, 6145, '\p{^ismong}', "");
Expect(0, 6145, '\P{ismong}', "");
Expect(1, 6145, '\P{^ismong}', "");
Expect(0, 6143, '\p{ismong}', "");
Expect(1, 6143, '\p{^ismong}', "");
Expect(1, 6143, '\P{ismong}', "");
Expect(0, 6143, '\P{^ismong}', "");
Expect(1, 6145, '\p{-	Is MONG}', "");
Expect(0, 6145, '\p{^-	Is MONG}', "");
Expect(0, 6145, '\P{-	Is MONG}', "");
Expect(1, 6145, '\P{^-	Is MONG}', "");
Expect(0, 6143, '\p{-	Is MONG}', "");
Expect(1, 6143, '\p{^-	Is MONG}', "");
Expect(1, 6143, '\P{-	Is MONG}', "");
Expect(0, 6143, '\P{^-	Is MONG}', "");
Error('\p{	:=cherokee}');
Error('\P{	:=cherokee}');
Expect(1, 5108, '\p{cherokee}', "");
Expect(0, 5108, '\p{^cherokee}', "");
Expect(0, 5108, '\P{cherokee}', "");
Expect(1, 5108, '\P{^cherokee}', "");
Expect(0, 5023, '\p{cherokee}', "");
Expect(1, 5023, '\p{^cherokee}', "");
Expect(1, 5023, '\P{cherokee}', "");
Expect(0, 5023, '\P{^cherokee}', "");
Expect(1, 5108, '\p{ CHEROKEE}', "");
Expect(0, 5108, '\p{^ CHEROKEE}', "");
Expect(0, 5108, '\P{ CHEROKEE}', "");
Expect(1, 5108, '\P{^ CHEROKEE}', "");
Expect(0, 5023, '\p{ CHEROKEE}', "");
Expect(1, 5023, '\p{^ CHEROKEE}', "");
Expect(1, 5023, '\P{ CHEROKEE}', "");
Expect(0, 5023, '\P{^ CHEROKEE}', "");
Error('\p{  is_Cherokee/a/}');
Error('\P{  is_Cherokee/a/}');
Expect(1, 5108, '\p{ischerokee}', "");
Expect(0, 5108, '\p{^ischerokee}', "");
Expect(0, 5108, '\P{ischerokee}', "");
Expect(1, 5108, '\P{^ischerokee}', "");
Expect(0, 5023, '\p{ischerokee}', "");
Expect(1, 5023, '\p{^ischerokee}', "");
Expect(1, 5023, '\P{ischerokee}', "");
Expect(0, 5023, '\P{^ischerokee}', "");
Expect(1, 5108, '\p{ 	is-Cherokee}', "");
Expect(0, 5108, '\p{^ 	is-Cherokee}', "");
Expect(0, 5108, '\P{ 	is-Cherokee}', "");
Expect(1, 5108, '\P{^ 	is-Cherokee}', "");
Expect(0, 5023, '\p{ 	is-Cherokee}', "");
Expect(1, 5023, '\p{^ 	is-Cherokee}', "");
Expect(1, 5023, '\P{ 	is-Cherokee}', "");
Expect(0, 5023, '\P{^ 	is-Cherokee}', "");
Error('\p{-	Cher:=}');
Error('\P{-	Cher:=}');
Expect(1, 5108, '\p{cher}', "");
Expect(0, 5108, '\p{^cher}', "");
Expect(0, 5108, '\P{cher}', "");
Expect(1, 5108, '\P{^cher}', "");
Expect(0, 5023, '\p{cher}', "");
Expect(1, 5023, '\p{^cher}', "");
Expect(1, 5023, '\P{cher}', "");
Expect(0, 5023, '\P{^cher}', "");
Expect(1, 5108, '\p{ 	Cher}', "");
Expect(0, 5108, '\p{^ 	Cher}', "");
Expect(0, 5108, '\P{ 	Cher}', "");
Expect(1, 5108, '\P{^ 	Cher}', "");
Expect(0, 5023, '\p{ 	Cher}', "");
Expect(1, 5023, '\p{^ 	Cher}', "");
Expect(1, 5023, '\P{ 	Cher}', "");
Expect(0, 5023, '\P{^ 	Cher}', "");
Error('\p{/a/--isCher}');
Error('\P{/a/--isCher}');
Expect(1, 5108, '\p{ischer}', "");
Expect(0, 5108, '\p{^ischer}', "");
Expect(0, 5108, '\P{ischer}', "");
Expect(1, 5108, '\P{^ischer}', "");
Expect(0, 5023, '\p{ischer}', "");
Expect(1, 5023, '\p{^ischer}', "");
Expect(1, 5023, '\P{ischer}', "");
Expect(0, 5023, '\P{^ischer}', "");
Expect(1, 5108, '\p{-IS	Cher}', "");
Expect(0, 5108, '\p{^-IS	Cher}', "");
Expect(0, 5108, '\P{-IS	Cher}', "");
Expect(1, 5108, '\P{^-IS	Cher}', "");
Expect(0, 5023, '\p{-IS	Cher}', "");
Expect(1, 5023, '\p{^-IS	Cher}', "");
Expect(1, 5023, '\P{-IS	Cher}', "");
Expect(0, 5023, '\P{^-IS	Cher}', "");
Error('\p{ /a/Samaritan}');
Error('\P{ /a/Samaritan}');
Expect(1, 2093, '\p{samaritan}', "");
Expect(0, 2093, '\p{^samaritan}', "");
Expect(0, 2093, '\P{samaritan}', "");
Expect(1, 2093, '\P{^samaritan}', "");
Expect(0, 2047, '\p{samaritan}', "");
Expect(1, 2047, '\p{^samaritan}', "");
Expect(1, 2047, '\P{samaritan}', "");
Expect(0, 2047, '\P{^samaritan}', "");
Expect(1, 2093, '\p{  Samaritan}', "");
Expect(0, 2093, '\p{^  Samaritan}', "");
Expect(0, 2093, '\P{  Samaritan}', "");
Expect(1, 2093, '\P{^  Samaritan}', "");
Expect(0, 2047, '\p{  Samaritan}', "");
Expect(1, 2047, '\p{^  Samaritan}', "");
Expect(1, 2047, '\P{  Samaritan}', "");
Expect(0, 2047, '\P{^  Samaritan}', "");
Error('\p{- is/a/Samaritan}');
Error('\P{- is/a/Samaritan}');
Expect(1, 2093, '\p{issamaritan}', "");
Expect(0, 2093, '\p{^issamaritan}', "");
Expect(0, 2093, '\P{issamaritan}', "");
Expect(1, 2093, '\P{^issamaritan}', "");
Expect(0, 2047, '\p{issamaritan}', "");
Expect(1, 2047, '\p{^issamaritan}', "");
Expect(1, 2047, '\P{issamaritan}', "");
Expect(0, 2047, '\P{^issamaritan}', "");
Expect(1, 2093, '\p{-IS samaritan}', "");
Expect(0, 2093, '\p{^-IS samaritan}', "");
Expect(0, 2093, '\P{-IS samaritan}', "");
Expect(1, 2093, '\P{^-IS samaritan}', "");
Expect(0, 2047, '\p{-IS samaritan}', "");
Expect(1, 2047, '\p{^-IS samaritan}', "");
Expect(1, 2047, '\P{-IS samaritan}', "");
Expect(0, 2047, '\P{^-IS samaritan}', "");
Error('\p{/a/  samr}');
Error('\P{/a/  samr}');
Expect(1, 2093, '\p{samr}', "");
Expect(0, 2093, '\p{^samr}', "");
Expect(0, 2093, '\P{samr}', "");
Expect(1, 2093, '\P{^samr}', "");
Expect(0, 2047, '\p{samr}', "");
Expect(1, 2047, '\p{^samr}', "");
Expect(1, 2047, '\P{samr}', "");
Expect(0, 2047, '\P{^samr}', "");
Expect(1, 2093, '\p{  SAMR}', "");
Expect(0, 2093, '\p{^  SAMR}', "");
Expect(0, 2093, '\P{  SAMR}', "");
Expect(1, 2093, '\P{^  SAMR}', "");
Expect(0, 2047, '\p{  SAMR}', "");
Expect(1, 2047, '\p{^  SAMR}', "");
Expect(1, 2047, '\P{  SAMR}', "");
Expect(0, 2047, '\P{^  SAMR}', "");
Error('\p{:= Is	Samr}');
Error('\P{:= Is	Samr}');
Expect(1, 2093, '\p{issamr}', "");
Expect(0, 2093, '\p{^issamr}', "");
Expect(0, 2093, '\P{issamr}', "");
Expect(1, 2093, '\P{^issamr}', "");
Expect(0, 2047, '\p{issamr}', "");
Expect(1, 2047, '\p{^issamr}', "");
Expect(1, 2047, '\P{issamr}', "");
Expect(0, 2047, '\P{^issamr}', "");
Expect(1, 2093, '\p{ _Is SAMR}', "");
Expect(0, 2093, '\p{^ _Is SAMR}', "");
Expect(0, 2093, '\P{ _Is SAMR}', "");
Expect(1, 2093, '\P{^ _Is SAMR}', "");
Expect(0, 2047, '\p{ _Is SAMR}', "");
Expect(1, 2047, '\p{^ _Is SAMR}', "");
Expect(1, 2047, '\P{ _Is SAMR}', "");
Expect(0, 2047, '\P{^ _Is SAMR}', "");
Error('\p{ :=Other-punctuation}');
Error('\P{ :=Other-punctuation}');
Expect(1, 35, '\p{otherpunctuation}', "");
Expect(0, 35, '\p{^otherpunctuation}', "");
Expect(0, 35, '\P{otherpunctuation}', "");
Expect(1, 35, '\P{^otherpunctuation}', "");
Expect(0, 32, '\p{otherpunctuation}', "");
Expect(1, 32, '\p{^otherpunctuation}', "");
Expect(1, 32, '\P{otherpunctuation}', "");
Expect(0, 32, '\P{^otherpunctuation}', "");
Expect(1, 35, '\p{_Other Punctuation}', "");
Expect(0, 35, '\p{^_Other Punctuation}', "");
Expect(0, 35, '\P{_Other Punctuation}', "");
Expect(1, 35, '\P{^_Other Punctuation}', "");
Expect(0, 32, '\p{_Other Punctuation}', "");
Expect(1, 32, '\p{^_Other Punctuation}', "");
Expect(1, 32, '\P{_Other Punctuation}', "");
Expect(0, 32, '\P{^_Other Punctuation}', "");
Error('\p{_:=Is-Other_Punctuation}');
Error('\P{_:=Is-Other_Punctuation}');
Expect(1, 35, '\p{isotherpunctuation}', "");
Expect(0, 35, '\p{^isotherpunctuation}', "");
Expect(0, 35, '\P{isotherpunctuation}', "");
Expect(1, 35, '\P{^isotherpunctuation}', "");
Expect(0, 32, '\p{isotherpunctuation}', "");
Expect(1, 32, '\p{^isotherpunctuation}', "");
Expect(1, 32, '\P{isotherpunctuation}', "");
Expect(0, 32, '\P{^isotherpunctuation}', "");
Expect(1, 35, '\p{  IS	Other Punctuation}', "");
Expect(0, 35, '\p{^  IS	Other Punctuation}', "");
Expect(0, 35, '\P{  IS	Other Punctuation}', "");
Expect(1, 35, '\P{^  IS	Other Punctuation}', "");
Expect(0, 32, '\p{  IS	Other Punctuation}', "");
Expect(1, 32, '\p{^  IS	Other Punctuation}', "");
Expect(1, 32, '\P{  IS	Other Punctuation}', "");
Expect(0, 32, '\P{^  IS	Other Punctuation}', "");
Error('\p{ PO:=}');
Error('\P{ PO:=}');
Expect(1, 35, '\p{po}', "");
Expect(0, 35, '\p{^po}', "");
Expect(0, 35, '\P{po}', "");
Expect(1, 35, '\P{^po}', "");
Expect(0, 32, '\p{po}', "");
Expect(1, 32, '\p{^po}', "");
Expect(1, 32, '\P{po}', "");
Expect(0, 32, '\P{^po}', "");
Expect(1, 35, '\p{		Po}', "");
Expect(0, 35, '\p{^		Po}', "");
Expect(0, 35, '\P{		Po}', "");
Expect(1, 35, '\P{^		Po}', "");
Expect(0, 32, '\p{		Po}', "");
Expect(1, 32, '\p{^		Po}', "");
Expect(1, 32, '\P{		Po}', "");
Expect(0, 32, '\P{^		Po}', "");
Error('\p{:=	Is PO}');
Error('\P{:=	Is PO}');
Expect(1, 35, '\p{ispo}', "");
Expect(0, 35, '\p{^ispo}', "");
Expect(0, 35, '\P{ispo}', "");
Expect(1, 35, '\P{^ispo}', "");
Expect(0, 32, '\p{ispo}', "");
Expect(1, 32, '\p{^ispo}', "");
Expect(1, 32, '\P{ispo}', "");
Expect(0, 32, '\P{^ispo}', "");
Expect(1, 35, '\p{-is_Po}', "");
Expect(0, 35, '\p{^-is_Po}', "");
Expect(0, 35, '\P{-is_Po}', "");
Expect(1, 35, '\P{^-is_Po}', "");
Expect(0, 32, '\p{-is_Po}', "");
Expect(1, 32, '\p{^-is_Po}', "");
Expect(1, 32, '\P{-is_Po}', "");
Expect(0, 32, '\P{^-is_Po}', "");
Error('\p{-:=Case	Ignorable}');
Error('\P{-:=Case	Ignorable}');
Expect(1, 39, '\p{caseignorable}', "");
Expect(0, 39, '\p{^caseignorable}', "");
Expect(0, 39, '\P{caseignorable}', "");
Expect(1, 39, '\P{^caseignorable}', "");
Expect(0, 38, '\p{caseignorable}', "");
Expect(1, 38, '\p{^caseignorable}', "");
Expect(1, 38, '\P{caseignorable}', "");
Expect(0, 38, '\P{^caseignorable}', "");
Expect(1, 39, '\p{	 case ignorable}', "");
Expect(0, 39, '\p{^	 case ignorable}', "");
Expect(0, 39, '\P{	 case ignorable}', "");
Expect(1, 39, '\P{^	 case ignorable}', "");
Expect(0, 38, '\p{	 case ignorable}', "");
Expect(1, 38, '\p{^	 case ignorable}', "");
Expect(1, 38, '\P{	 case ignorable}', "");
Expect(0, 38, '\P{^	 case ignorable}', "");
Error('\p{	_IS/a/Caseignorable}');
Error('\P{	_IS/a/Caseignorable}');
Expect(1, 39, '\p{iscaseignorable}', "");
Expect(0, 39, '\p{^iscaseignorable}', "");
Expect(0, 39, '\P{iscaseignorable}', "");
Expect(1, 39, '\P{^iscaseignorable}', "");
Expect(0, 38, '\p{iscaseignorable}', "");
Expect(1, 38, '\p{^iscaseignorable}', "");
Expect(1, 38, '\P{iscaseignorable}', "");
Expect(0, 38, '\P{^iscaseignorable}', "");
Expect(1, 39, '\p{_IS-CaseIgnorable}', "");
Expect(0, 39, '\p{^_IS-CaseIgnorable}', "");
Expect(0, 39, '\P{_IS-CaseIgnorable}', "");
Expect(1, 39, '\P{^_IS-CaseIgnorable}', "");
Expect(0, 38, '\p{_IS-CaseIgnorable}', "");
Expect(1, 38, '\p{^_IS-CaseIgnorable}', "");
Expect(1, 38, '\P{_IS-CaseIgnorable}', "");
Expect(0, 38, '\P{^_IS-CaseIgnorable}', "");
Error('\p{	/a/ci}');
Error('\P{	/a/ci}');
Expect(1, 39, '\p{ci}', "");
Expect(0, 39, '\p{^ci}', "");
Expect(0, 39, '\P{ci}', "");
Expect(1, 39, '\P{^ci}', "");
Expect(0, 38, '\p{ci}', "");
Expect(1, 38, '\p{^ci}', "");
Expect(1, 38, '\P{ci}', "");
Expect(0, 38, '\P{^ci}', "");
Expect(1, 39, '\p{ CI}', "");
Expect(0, 39, '\p{^ CI}', "");
Expect(0, 39, '\P{ CI}', "");
Expect(1, 39, '\P{^ CI}', "");
Expect(0, 38, '\p{ CI}', "");
Expect(1, 38, '\p{^ CI}', "");
Expect(1, 38, '\P{ CI}', "");
Expect(0, 38, '\P{^ CI}', "");
Error('\p{__Is_CI:=}');
Error('\P{__Is_CI:=}');
Expect(1, 39, '\p{isci}', "");
Expect(0, 39, '\p{^isci}', "");
Expect(0, 39, '\P{isci}', "");
Expect(1, 39, '\P{^isci}', "");
Expect(0, 38, '\p{isci}', "");
Expect(1, 38, '\p{^isci}', "");
Expect(1, 38, '\P{isci}', "");
Expect(0, 38, '\P{^isci}', "");
Expect(1, 39, '\p{-_IsCI}', "");
Expect(0, 39, '\p{^-_IsCI}', "");
Expect(0, 39, '\P{-_IsCI}', "");
Expect(1, 39, '\P{^-_IsCI}', "");
Expect(0, 38, '\p{-_IsCI}', "");
Expect(1, 38, '\p{^-_IsCI}', "");
Expect(1, 38, '\P{-_IsCI}', "");
Expect(0, 38, '\P{^-_IsCI}', "");
Error('\p{/a/_ 	caseIgnorable}');
Error('\P{/a/_ 	caseIgnorable}');
Expect(1, 39, '\p{_case_ignorable}', "");
Expect(0, 39, '\p{^_case_ignorable}', "");
Expect(0, 39, '\P{_case_ignorable}', "");
Expect(1, 39, '\P{^_case_ignorable}', "");
Expect(0, 38, '\p{_case_ignorable}', "");
Expect(1, 38, '\p{^_case_ignorable}', "");
Expect(1, 38, '\P{_case_ignorable}', "");
Expect(0, 38, '\P{^_case_ignorable}', "");
Error('\p{	:=CHANGESWhennfkcCasefolded}');
Error('\P{	:=CHANGESWhennfkcCasefolded}');
Expect(1, 90, '\p{changeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^changeswhennfkccasefolded}', "");
Expect(0, 90, '\P{changeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^changeswhennfkccasefolded}', "");
Expect(0, 64, '\p{changeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^changeswhennfkccasefolded}', "");
Expect(1, 64, '\P{changeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^changeswhennfkccasefolded}', "");
Expect(1, 90, '\p{	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(0, 90, '\p{^	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(0, 90, '\P{	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(1, 90, '\P{^	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(0, 64, '\p{	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(1, 64, '\p{^	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(1, 64, '\P{	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Expect(0, 64, '\P{^	-CHANGES-WHEN NFKC_CASEFOLDED}', "");
Error('\p{--Is:=changes	whennfkc-Casefolded}');
Error('\P{--Is:=changes	whennfkc-Casefolded}');
Expect(1, 90, '\p{ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\P{ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\p{ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\P{ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\p{_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(0, 90, '\p{^_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(0, 90, '\P{_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(1, 90, '\P{^_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(0, 64, '\p{_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(1, 64, '\p{^_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(1, 64, '\P{_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Expect(0, 64, '\P{^_ Is_CHANGES	WhenNFKC_CASEFOLDED}', "");
Error('\p{/a/		cwkcf}');
Error('\P{/a/		cwkcf}');
Expect(1, 90, '\p{cwkcf}', "");
Expect(0, 90, '\p{^cwkcf}', "");
Expect(0, 90, '\P{cwkcf}', "");
Expect(1, 90, '\P{^cwkcf}', "");
Expect(0, 64, '\p{cwkcf}', "");
Expect(1, 64, '\p{^cwkcf}', "");
Expect(1, 64, '\P{cwkcf}', "");
Expect(0, 64, '\P{^cwkcf}', "");
Expect(1, 90, '\p{-	CWKCF}', "");
Expect(0, 90, '\p{^-	CWKCF}', "");
Expect(0, 90, '\P{-	CWKCF}', "");
Expect(1, 90, '\P{^-	CWKCF}', "");
Expect(0, 64, '\p{-	CWKCF}', "");
Expect(1, 64, '\p{^-	CWKCF}', "");
Expect(1, 64, '\P{-	CWKCF}', "");
Expect(0, 64, '\P{^-	CWKCF}', "");
Error('\p{/a/- IsCWKCF}');
Error('\P{/a/- IsCWKCF}');
Expect(1, 90, '\p{iscwkcf}', "");
Expect(0, 90, '\p{^iscwkcf}', "");
Expect(0, 90, '\P{iscwkcf}', "");
Expect(1, 90, '\P{^iscwkcf}', "");
Expect(0, 64, '\p{iscwkcf}', "");
Expect(1, 64, '\p{^iscwkcf}', "");
Expect(1, 64, '\P{iscwkcf}', "");
Expect(0, 64, '\P{^iscwkcf}', "");
Expect(1, 90, '\p{	-Is CWKCF}', "");
Expect(0, 90, '\p{^	-Is CWKCF}', "");
Expect(0, 90, '\P{	-Is CWKCF}', "");
Expect(1, 90, '\P{^	-Is CWKCF}', "");
Expect(0, 64, '\p{	-Is CWKCF}', "");
Expect(1, 64, '\p{^	-Is CWKCF}', "");
Expect(1, 64, '\P{	-Is CWKCF}', "");
Expect(0, 64, '\P{^	-Is CWKCF}', "");
Error('\p{_in_CHEROKEE:=}');
Error('\P{_in_CHEROKEE:=}');
Expect(1, 5119, '\p{incherokee}', "");
Expect(0, 5119, '\p{^incherokee}', "");
Expect(0, 5119, '\P{incherokee}', "");
Expect(1, 5119, '\P{^incherokee}', "");
Expect(0, 5023, '\p{incherokee}', "");
Expect(1, 5023, '\p{^incherokee}', "");
Expect(1, 5023, '\P{incherokee}', "");
Expect(0, 5023, '\P{^incherokee}', "");
Expect(1, 5119, '\p{	_In cherokee}', "");
Expect(0, 5119, '\p{^	_In cherokee}', "");
Expect(0, 5119, '\P{	_In cherokee}', "");
Expect(1, 5119, '\P{^	_In cherokee}', "");
Expect(0, 5023, '\p{	_In cherokee}', "");
Expect(1, 5023, '\p{^	_In cherokee}', "");
Expect(1, 5023, '\P{	_In cherokee}', "");
Expect(0, 5023, '\P{^	_In cherokee}', "");
Error('\p{_/a/ethiopic}');
Error('\P{_/a/ethiopic}');
Expect(1, 4680, '\p{ethiopic}', "");
Expect(0, 4680, '\p{^ethiopic}', "");
Expect(0, 4680, '\P{ethiopic}', "");
Expect(1, 4680, '\P{^ethiopic}', "");
Expect(0, 4607, '\p{ethiopic}', "");
Expect(1, 4607, '\p{^ethiopic}', "");
Expect(1, 4607, '\P{ethiopic}', "");
Expect(0, 4607, '\P{^ethiopic}', "");
Expect(1, 4680, '\p{  Ethiopic}', "");
Expect(0, 4680, '\p{^  Ethiopic}', "");
Expect(0, 4680, '\P{  Ethiopic}', "");
Expect(1, 4680, '\P{^  Ethiopic}', "");
Expect(0, 4607, '\p{  Ethiopic}', "");
Expect(1, 4607, '\p{^  Ethiopic}', "");
Expect(1, 4607, '\P{  Ethiopic}', "");
Expect(0, 4607, '\P{^  Ethiopic}', "");
Error('\p{/a/isETHIOPIC}');
Error('\P{/a/isETHIOPIC}');
Expect(1, 4680, '\p{isethiopic}', "");
Expect(0, 4680, '\p{^isethiopic}', "");
Expect(0, 4680, '\P{isethiopic}', "");
Expect(1, 4680, '\P{^isethiopic}', "");
Expect(0, 4607, '\p{isethiopic}', "");
Expect(1, 4607, '\p{^isethiopic}', "");
Expect(1, 4607, '\P{isethiopic}', "");
Expect(0, 4607, '\P{^isethiopic}', "");
Expect(1, 4680, '\p{-	Is	Ethiopic}', "");
Expect(0, 4680, '\p{^-	Is	Ethiopic}', "");
Expect(0, 4680, '\P{-	Is	Ethiopic}', "");
Expect(1, 4680, '\P{^-	Is	Ethiopic}', "");
Expect(0, 4607, '\p{-	Is	Ethiopic}', "");
Expect(1, 4607, '\p{^-	Is	Ethiopic}', "");
Expect(1, 4607, '\P{-	Is	Ethiopic}', "");
Expect(0, 4607, '\P{^-	Is	Ethiopic}', "");
Error('\p{	-Ethi/a/}');
Error('\P{	-Ethi/a/}');
Expect(1, 4680, '\p{ethi}', "");
Expect(0, 4680, '\p{^ethi}', "");
Expect(0, 4680, '\P{ethi}', "");
Expect(1, 4680, '\P{^ethi}', "");
Expect(0, 4607, '\p{ethi}', "");
Expect(1, 4607, '\p{^ethi}', "");
Expect(1, 4607, '\P{ethi}', "");
Expect(0, 4607, '\P{^ethi}', "");
Expect(1, 4680, '\p{__Ethi}', "");
Expect(0, 4680, '\p{^__Ethi}', "");
Expect(0, 4680, '\P{__Ethi}', "");
Expect(1, 4680, '\P{^__Ethi}', "");
Expect(0, 4607, '\p{__Ethi}', "");
Expect(1, 4607, '\p{^__Ethi}', "");
Expect(1, 4607, '\P{__Ethi}', "");
Expect(0, 4607, '\P{^__Ethi}', "");
Error('\p{_Is:=Ethi}');
Error('\P{_Is:=Ethi}');
Expect(1, 4680, '\p{isethi}', "");
Expect(0, 4680, '\p{^isethi}', "");
Expect(0, 4680, '\P{isethi}', "");
Expect(1, 4680, '\P{^isethi}', "");
Expect(0, 4607, '\p{isethi}', "");
Expect(1, 4607, '\p{^isethi}', "");
Expect(1, 4607, '\P{isethi}', "");
Expect(0, 4607, '\P{^isethi}', "");
Expect(1, 4680, '\p{_-IS ethi}', "");
Expect(0, 4680, '\p{^_-IS ethi}', "");
Expect(0, 4680, '\P{_-IS ethi}', "");
Expect(1, 4680, '\P{^_-IS ethi}', "");
Expect(0, 4607, '\p{_-IS ethi}', "");
Expect(1, 4607, '\p{^_-IS ethi}', "");
Expect(1, 4607, '\P{_-IS ethi}', "");
Expect(0, 4607, '\P{^_-IS ethi}', "");
Error('\p{_-_x/a/BEGIN}');
Error('\P{_-_x/a/BEGIN}');
Expect(1, 126, '\p{_X_begin}', "");
Expect(0, 126, '\p{^_X_begin}', "");
Expect(0, 126, '\P{_X_begin}', "");
Expect(1, 126, '\P{^_X_begin}', "");
Expect(0, 31, '\p{_X_begin}', "");
Expect(1, 31, '\p{^_X_begin}', "");
Expect(1, 31, '\P{_X_begin}', "");
Expect(0, 31, '\P{^_X_begin}', "");
Error('\p{		Yi:=}');
Error('\P{		Yi:=}');
Expect(1, 42124, '\p{yi}', "");
Expect(0, 42124, '\p{^yi}', "");
Expect(0, 42124, '\P{yi}', "");
Expect(1, 42124, '\P{^yi}', "");
Expect(0, 40959, '\p{yi}', "");
Expect(1, 40959, '\p{^yi}', "");
Expect(1, 40959, '\P{yi}', "");
Expect(0, 40959, '\P{^yi}', "");
Expect(1, 42124, '\p{-yi}', "");
Expect(0, 42124, '\p{^-yi}', "");
Expect(0, 42124, '\P{-yi}', "");
Expect(1, 42124, '\P{^-yi}', "");
Expect(0, 40959, '\p{-yi}', "");
Expect(1, 40959, '\p{^-yi}', "");
Expect(1, 40959, '\P{-yi}', "");
Expect(0, 40959, '\P{^-yi}', "");
Error('\p{_Is	yi:=}');
Error('\P{_Is	yi:=}');
Expect(1, 42124, '\p{isyi}', "");
Expect(0, 42124, '\p{^isyi}', "");
Expect(0, 42124, '\P{isyi}', "");
Expect(1, 42124, '\P{^isyi}', "");
Expect(0, 40959, '\p{isyi}', "");
Expect(1, 40959, '\p{^isyi}', "");
Expect(1, 40959, '\P{isyi}', "");
Expect(0, 40959, '\P{^isyi}', "");
Expect(1, 42124, '\p{	 is-yi}', "");
Expect(0, 42124, '\p{^	 is-yi}', "");
Expect(0, 42124, '\P{	 is-yi}', "");
Expect(1, 42124, '\P{^	 is-yi}', "");
Expect(0, 40959, '\p{	 is-yi}', "");
Expect(1, 40959, '\p{^	 is-yi}', "");
Expect(1, 40959, '\P{	 is-yi}', "");
Expect(0, 40959, '\P{^	 is-yi}', "");
Error('\p{/a/_ yiii}');
Error('\P{/a/_ yiii}');
Expect(1, 42124, '\p{yiii}', "");
Expect(0, 42124, '\p{^yiii}', "");
Expect(0, 42124, '\P{yiii}', "");
Expect(1, 42124, '\P{^yiii}', "");
Expect(0, 40959, '\p{yiii}', "");
Expect(1, 40959, '\p{^yiii}', "");
Expect(1, 40959, '\P{yiii}', "");
Expect(0, 40959, '\P{^yiii}', "");
Expect(1, 42124, '\p{_ Yiii}', "");
Expect(0, 42124, '\p{^_ Yiii}', "");
Expect(0, 42124, '\P{_ Yiii}', "");
Expect(1, 42124, '\P{^_ Yiii}', "");
Expect(0, 40959, '\p{_ Yiii}', "");
Expect(1, 40959, '\p{^_ Yiii}', "");
Expect(1, 40959, '\P{_ Yiii}', "");
Expect(0, 40959, '\P{^_ Yiii}', "");
Error('\p{:=_ is-Yiii}');
Error('\P{:=_ is-Yiii}');
Expect(1, 42124, '\p{isyiii}', "");
Expect(0, 42124, '\p{^isyiii}', "");
Expect(0, 42124, '\P{isyiii}', "");
Expect(1, 42124, '\P{^isyiii}', "");
Expect(0, 40959, '\p{isyiii}', "");
Expect(1, 40959, '\p{^isyiii}', "");
Expect(1, 40959, '\P{isyiii}', "");
Expect(0, 40959, '\P{^isyiii}', "");
Expect(1, 42124, '\p{	_IS	Yiii}', "");
Expect(0, 42124, '\p{^	_IS	Yiii}', "");
Expect(0, 42124, '\P{	_IS	Yiii}', "");
Expect(1, 42124, '\P{^	_IS	Yiii}', "");
Expect(0, 40959, '\p{	_IS	Yiii}', "");
Expect(1, 40959, '\p{^	_IS	Yiii}', "");
Expect(1, 40959, '\P{	_IS	Yiii}', "");
Expect(0, 40959, '\P{^	_IS	Yiii}', "");
Error('\p{_/a/Gurmukhi}');
Error('\P{_/a/Gurmukhi}');
Expect(1, 2563, '\p{gurmukhi}', "");
Expect(0, 2563, '\p{^gurmukhi}', "");
Expect(0, 2563, '\P{gurmukhi}', "");
Expect(1, 2563, '\P{^gurmukhi}', "");
Expect(0, 2560, '\p{gurmukhi}', "");
Expect(1, 2560, '\p{^gurmukhi}', "");
Expect(1, 2560, '\P{gurmukhi}', "");
Expect(0, 2560, '\P{^gurmukhi}', "");
Expect(1, 2563, '\p{_-gurmukhi}', "");
Expect(0, 2563, '\p{^_-gurmukhi}', "");
Expect(0, 2563, '\P{_-gurmukhi}', "");
Expect(1, 2563, '\P{^_-gurmukhi}', "");
Expect(0, 2560, '\p{_-gurmukhi}', "");
Expect(1, 2560, '\p{^_-gurmukhi}', "");
Expect(1, 2560, '\P{_-gurmukhi}', "");
Expect(0, 2560, '\P{^_-gurmukhi}', "");
Error('\p{	:=Is GURMUKHI}');
Error('\P{	:=Is GURMUKHI}');
Expect(1, 2563, '\p{isgurmukhi}', "");
Expect(0, 2563, '\p{^isgurmukhi}', "");
Expect(0, 2563, '\P{isgurmukhi}', "");
Expect(1, 2563, '\P{^isgurmukhi}', "");
Expect(0, 2560, '\p{isgurmukhi}', "");
Expect(1, 2560, '\p{^isgurmukhi}', "");
Expect(1, 2560, '\P{isgurmukhi}', "");
Expect(0, 2560, '\P{^isgurmukhi}', "");
Expect(1, 2563, '\p{	 IS gurmukhi}', "");
Expect(0, 2563, '\p{^	 IS gurmukhi}', "");
Expect(0, 2563, '\P{	 IS gurmukhi}', "");
Expect(1, 2563, '\P{^	 IS gurmukhi}', "");
Expect(0, 2560, '\p{	 IS gurmukhi}', "");
Expect(1, 2560, '\p{^	 IS gurmukhi}', "");
Expect(1, 2560, '\P{	 IS gurmukhi}', "");
Expect(0, 2560, '\P{^	 IS gurmukhi}', "");
Error('\p{ _Guru/a/}');
Error('\P{ _Guru/a/}');
Expect(1, 2563, '\p{guru}', "");
Expect(0, 2563, '\p{^guru}', "");
Expect(0, 2563, '\P{guru}', "");
Expect(1, 2563, '\P{^guru}', "");
Expect(0, 2560, '\p{guru}', "");
Expect(1, 2560, '\p{^guru}', "");
Expect(1, 2560, '\P{guru}', "");
Expect(0, 2560, '\P{^guru}', "");
Expect(1, 2563, '\p{-Guru}', "");
Expect(0, 2563, '\p{^-Guru}', "");
Expect(0, 2563, '\P{-Guru}', "");
Expect(1, 2563, '\P{^-Guru}', "");
Expect(0, 2560, '\p{-Guru}', "");
Expect(1, 2560, '\p{^-Guru}', "");
Expect(1, 2560, '\P{-Guru}', "");
Expect(0, 2560, '\P{^-Guru}', "");
Error('\p{:=	-ISGuru}');
Error('\P{:=	-ISGuru}');
Expect(1, 2563, '\p{isguru}', "");
Expect(0, 2563, '\p{^isguru}', "");
Expect(0, 2563, '\P{isguru}', "");
Expect(1, 2563, '\P{^isguru}', "");
Expect(0, 2560, '\p{isguru}', "");
Expect(1, 2560, '\p{^isguru}', "");
Expect(1, 2560, '\P{isguru}', "");
Expect(0, 2560, '\P{^isguru}', "");
Expect(1, 2563, '\p{	Is	GURU}', "");
Expect(0, 2563, '\p{^	Is	GURU}', "");
Expect(0, 2563, '\P{	Is	GURU}', "");
Expect(1, 2563, '\P{^	Is	GURU}', "");
Expect(0, 2560, '\p{	Is	GURU}', "");
Expect(1, 2560, '\p{^	Is	GURU}', "");
Expect(1, 2560, '\P{	Is	GURU}', "");
Expect(0, 2560, '\P{^	Is	GURU}', "");
Error('\p{/a/_latinextended_B}');
Error('\P{/a/_latinextended_B}');
Expect(1, 591, '\p{latinextendedb}', "");
Expect(0, 591, '\p{^latinextendedb}', "");
Expect(0, 591, '\P{latinextendedb}', "");
Expect(1, 591, '\P{^latinextendedb}', "");
Expect(0, 383, '\p{latinextendedb}', "");
Expect(1, 383, '\p{^latinextendedb}', "");
Expect(1, 383, '\P{latinextendedb}', "");
Expect(0, 383, '\P{^latinextendedb}', "");
Expect(1, 591, '\p{	_LATIN	extended	b}', "");
Expect(0, 591, '\p{^	_LATIN	extended	b}', "");
Expect(0, 591, '\P{	_LATIN	extended	b}', "");
Expect(1, 591, '\P{^	_LATIN	extended	b}', "");
Expect(0, 383, '\p{	_LATIN	extended	b}', "");
Expect(1, 383, '\p{^	_LATIN	extended	b}', "");
Expect(1, 383, '\P{	_LATIN	extended	b}', "");
Expect(0, 383, '\P{^	_LATIN	extended	b}', "");
Error('\p{	IS	latin Extended_B:=}');
Error('\P{	IS	latin Extended_B:=}');
Expect(1, 591, '\p{islatinextendedb}', "");
Expect(0, 591, '\p{^islatinextendedb}', "");
Expect(0, 591, '\P{islatinextendedb}', "");
Expect(1, 591, '\P{^islatinextendedb}', "");
Expect(0, 383, '\p{islatinextendedb}', "");
Expect(1, 383, '\p{^islatinextendedb}', "");
Expect(1, 383, '\P{islatinextendedb}', "");
Expect(0, 383, '\P{^islatinextendedb}', "");
Expect(1, 591, '\p{-_is	Latin_Extended B}', "");
Expect(0, 591, '\p{^-_is	Latin_Extended B}', "");
Expect(0, 591, '\P{-_is	Latin_Extended B}', "");
Expect(1, 591, '\P{^-_is	Latin_Extended B}', "");
Expect(0, 383, '\p{-_is	Latin_Extended B}', "");
Expect(1, 383, '\p{^-_is	Latin_Extended B}', "");
Expect(1, 383, '\P{-_is	Latin_Extended B}', "");
Expect(0, 383, '\P{^-_is	Latin_Extended B}', "");
Error('\p{_/a/in latin-extended-B}');
Error('\P{_/a/in latin-extended-B}');
Expect(1, 591, '\p{inlatinextendedb}', "");
Expect(0, 591, '\p{^inlatinextendedb}', "");
Expect(0, 591, '\P{inlatinextendedb}', "");
Expect(1, 591, '\P{^inlatinextendedb}', "");
Expect(0, 383, '\p{inlatinextendedb}', "");
Expect(1, 383, '\p{^inlatinextendedb}', "");
Expect(1, 383, '\P{inlatinextendedb}', "");
Expect(0, 383, '\P{^inlatinextendedb}', "");
Expect(1, 591, '\p{ -IN LATIN_extended	B}', "");
Expect(0, 591, '\p{^ -IN LATIN_extended	B}', "");
Expect(0, 591, '\P{ -IN LATIN_extended	B}', "");
Expect(1, 591, '\P{^ -IN LATIN_extended	B}', "");
Expect(0, 383, '\p{ -IN LATIN_extended	B}', "");
Expect(1, 383, '\p{^ -IN LATIN_extended	B}', "");
Expect(1, 383, '\P{ -IN LATIN_extended	B}', "");
Expect(0, 383, '\P{^ -IN LATIN_extended	B}', "");
Error('\p{/a/_ Cyrillic}');
Error('\P{/a/_ Cyrillic}');
Expect(1, 1156, '\p{cyrillic}', "");
Expect(0, 1156, '\p{^cyrillic}', "");
Expect(0, 1156, '\P{cyrillic}', "");
Expect(1, 1156, '\P{^cyrillic}', "");
Expect(0, 1023, '\p{cyrillic}', "");
Expect(1, 1023, '\p{^cyrillic}', "");
Expect(1, 1023, '\P{cyrillic}', "");
Expect(0, 1023, '\P{^cyrillic}', "");
Expect(1, 1156, '\p{	_cyrillic}', "");
Expect(0, 1156, '\p{^	_cyrillic}', "");
Expect(0, 1156, '\P{	_cyrillic}', "");
Expect(1, 1156, '\P{^	_cyrillic}', "");
Expect(0, 1023, '\p{	_cyrillic}', "");
Expect(1, 1023, '\p{^	_cyrillic}', "");
Expect(1, 1023, '\P{	_cyrillic}', "");
Expect(0, 1023, '\P{^	_cyrillic}', "");
Error('\p{-:=Is cyrillic}');
Error('\P{-:=Is cyrillic}');
Expect(1, 1156, '\p{iscyrillic}', "");
Expect(0, 1156, '\p{^iscyrillic}', "");
Expect(0, 1156, '\P{iscyrillic}', "");
Expect(1, 1156, '\P{^iscyrillic}', "");
Expect(0, 1023, '\p{iscyrillic}', "");
Expect(1, 1023, '\p{^iscyrillic}', "");
Expect(1, 1023, '\P{iscyrillic}', "");
Expect(0, 1023, '\P{^iscyrillic}', "");
Expect(1, 1156, '\p{	 Is	cyrillic}', "");
Expect(0, 1156, '\p{^	 Is	cyrillic}', "");
Expect(0, 1156, '\P{	 Is	cyrillic}', "");
Expect(1, 1156, '\P{^	 Is	cyrillic}', "");
Expect(0, 1023, '\p{	 Is	cyrillic}', "");
Expect(1, 1023, '\p{^	 Is	cyrillic}', "");
Expect(1, 1023, '\P{	 Is	cyrillic}', "");
Expect(0, 1023, '\P{^	 Is	cyrillic}', "");
Error('\p{/a/	cyrl}');
Error('\P{/a/	cyrl}');
Expect(1, 1156, '\p{cyrl}', "");
Expect(0, 1156, '\p{^cyrl}', "");
Expect(0, 1156, '\P{cyrl}', "");
Expect(1, 1156, '\P{^cyrl}', "");
Expect(0, 1023, '\p{cyrl}', "");
Expect(1, 1023, '\p{^cyrl}', "");
Expect(1, 1023, '\P{cyrl}', "");
Expect(0, 1023, '\P{^cyrl}', "");
Expect(1, 1156, '\p{-_cyrl}', "");
Expect(0, 1156, '\p{^-_cyrl}', "");
Expect(0, 1156, '\P{-_cyrl}', "");
Expect(1, 1156, '\P{^-_cyrl}', "");
Expect(0, 1023, '\p{-_cyrl}', "");
Expect(1, 1023, '\p{^-_cyrl}', "");
Expect(1, 1023, '\P{-_cyrl}', "");
Expect(0, 1023, '\P{^-_cyrl}', "");
Error('\p{ IsCyrl/a/}');
Error('\P{ IsCyrl/a/}');
Expect(1, 1156, '\p{iscyrl}', "");
Expect(0, 1156, '\p{^iscyrl}', "");
Expect(0, 1156, '\P{iscyrl}', "");
Expect(1, 1156, '\P{^iscyrl}', "");
Expect(0, 1023, '\p{iscyrl}', "");
Expect(1, 1023, '\p{^iscyrl}', "");
Expect(1, 1023, '\P{iscyrl}', "");
Expect(0, 1023, '\P{^iscyrl}', "");
Expect(1, 1156, '\p{_	IS CYRL}', "");
Expect(0, 1156, '\p{^_	IS CYRL}', "");
Expect(0, 1156, '\P{_	IS CYRL}', "");
Expect(1, 1156, '\P{^_	IS CYRL}', "");
Expect(0, 1023, '\p{_	IS CYRL}', "");
Expect(1, 1023, '\p{^_	IS CYRL}', "");
Expect(1, 1023, '\P{_	IS CYRL}', "");
Expect(0, 1023, '\P{^_	IS CYRL}', "");
Error('\p{  latin-Extended:=c}');
Error('\P{  latin-Extended:=c}');
Expect(1, 11391, '\p{latinextendedc}', "");
Expect(0, 11391, '\p{^latinextendedc}', "");
Expect(0, 11391, '\P{latinextendedc}', "");
Expect(1, 11391, '\P{^latinextendedc}', "");
Expect(0, 11359, '\p{latinextendedc}', "");
Expect(1, 11359, '\p{^latinextendedc}', "");
Expect(1, 11359, '\P{latinextendedc}', "");
Expect(0, 11359, '\P{^latinextendedc}', "");
Expect(1, 11391, '\p{_-LATIN-Extendedc}', "");
Expect(0, 11391, '\p{^_-LATIN-Extendedc}', "");
Expect(0, 11391, '\P{_-LATIN-Extendedc}', "");
Expect(1, 11391, '\P{^_-LATIN-Extendedc}', "");
Expect(0, 11359, '\p{_-LATIN-Extendedc}', "");
Expect(1, 11359, '\p{^_-LATIN-Extendedc}', "");
Expect(1, 11359, '\P{_-LATIN-Extendedc}', "");
Expect(0, 11359, '\P{^_-LATIN-Extendedc}', "");
Error('\p{-IS-LATIN:=Extended	c}');
Error('\P{-IS-LATIN:=Extended	c}');
Expect(1, 11391, '\p{islatinextendedc}', "");
Expect(0, 11391, '\p{^islatinextendedc}', "");
Expect(0, 11391, '\P{islatinextendedc}', "");
Expect(1, 11391, '\P{^islatinextendedc}', "");
Expect(0, 11359, '\p{islatinextendedc}', "");
Expect(1, 11359, '\p{^islatinextendedc}', "");
Expect(1, 11359, '\P{islatinextendedc}', "");
Expect(0, 11359, '\P{^islatinextendedc}', "");
Expect(1, 11391, '\p{-	is Latin Extended	c}', "");
Expect(0, 11391, '\p{^-	is Latin Extended	c}', "");
Expect(0, 11391, '\P{-	is Latin Extended	c}', "");
Expect(1, 11391, '\P{^-	is Latin Extended	c}', "");
Expect(0, 11359, '\p{-	is Latin Extended	c}', "");
Expect(1, 11359, '\p{^-	is Latin Extended	c}', "");
Expect(1, 11359, '\P{-	is Latin Extended	c}', "");
Expect(0, 11359, '\P{^-	is Latin Extended	c}', "");
Error('\p{  In-latin	Extended:=C}');
Error('\P{  In-latin	Extended:=C}');
Expect(1, 11391, '\p{inlatinextendedc}', "");
Expect(0, 11391, '\p{^inlatinextendedc}', "");
Expect(0, 11391, '\P{inlatinextendedc}', "");
Expect(1, 11391, '\P{^inlatinextendedc}', "");
Expect(0, 11359, '\p{inlatinextendedc}', "");
Expect(1, 11359, '\p{^inlatinextendedc}', "");
Expect(1, 11359, '\P{inlatinextendedc}', "");
Expect(0, 11359, '\P{^inlatinextendedc}', "");
Expect(1, 11391, '\p{-inlatin-Extended C}', "");
Expect(0, 11391, '\p{^-inlatin-Extended C}', "");
Expect(0, 11391, '\P{-inlatin-Extended C}', "");
Expect(1, 11391, '\P{^-inlatin-Extended C}', "");
Expect(0, 11359, '\p{-inlatin-Extended C}', "");
Expect(1, 11359, '\p{^-inlatin-Extended C}', "");
Expect(1, 11359, '\P{-inlatin-Extended C}', "");
Expect(0, 11359, '\P{^-inlatin-Extended C}', "");
Error('\p{_IN:=Rejang}');
Error('\P{_IN:=Rejang}');
Expect(1, 43359, '\p{inrejang}', "");
Expect(0, 43359, '\p{^inrejang}', "");
Expect(0, 43359, '\P{inrejang}', "");
Expect(1, 43359, '\P{^inrejang}', "");
Expect(0, 43311, '\p{inrejang}', "");
Expect(1, 43311, '\p{^inrejang}', "");
Expect(1, 43311, '\P{inrejang}', "");
Expect(0, 43311, '\P{^inrejang}', "");
Expect(1, 43359, '\p{_INREJANG}', "");
Expect(0, 43359, '\p{^_INREJANG}', "");
Expect(0, 43359, '\P{_INREJANG}', "");
Expect(1, 43359, '\P{^_INREJANG}', "");
Expect(0, 43311, '\p{_INREJANG}', "");
Expect(1, 43311, '\p{^_INREJANG}', "");
Expect(1, 43311, '\P{_INREJANG}', "");
Expect(0, 43311, '\P{^_INREJANG}', "");
Error('\p{ :=combining DIACRITICAL_MARKS	SUPPLEMENT}');
Error('\P{ :=combining DIACRITICAL_MARKS	SUPPLEMENT}');
Expect(1, 7679, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(0, 7679, '\p{^_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(0, 7679, '\P{_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(1, 7679, '\P{^_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(0, 7615, '\p{_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(1, 7615, '\p{^_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(1, 7615, '\P{_ Combining DIACRITICAL Marks-Supplement}', "");
Expect(0, 7615, '\P{^_ Combining DIACRITICAL Marks-Supplement}', "");
Error('\p{-	is_Combining_DiacriticalMARKSSUPPLEMENT:=}');
Error('\P{-	is_Combining_DiacriticalMARKSSUPPLEMENT:=}');
Expect(1, 7679, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(0, 7679, '\p{^-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(0, 7679, '\P{-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(1, 7679, '\P{^-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(0, 7615, '\p{-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(1, 7615, '\p{^-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(1, 7615, '\P{-	IS-combining_DIACRITICAL marks-Supplement}', "");
Expect(0, 7615, '\P{^-	IS-combining_DIACRITICAL marks-Supplement}', "");
Error('\p{:=In	combining	DiacriticalMARKSSupplement}');
Error('\P{:=In	combining	DiacriticalMARKSSupplement}');
Expect(1, 7679, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(0, 7679, '\p{^	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(0, 7679, '\P{	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(1, 7679, '\P{^	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(0, 7615, '\p{	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(1, 7615, '\p{^	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(1, 7615, '\P{	_IN	CombiningDiacritical-MARKS	supplement}', "");
Expect(0, 7615, '\P{^	_IN	CombiningDiacritical-MARKS	supplement}', "");
Error('\p{:=_	STERM}');
Error('\P{:=_	STERM}');
Expect(1, 33, '\p{sterm}', "");
Expect(0, 33, '\p{^sterm}', "");
Expect(0, 33, '\P{sterm}', "");
Expect(1, 33, '\P{^sterm}', "");
Expect(0, 32, '\p{sterm}', "");
Expect(1, 32, '\p{^sterm}', "");
Expect(1, 32, '\P{sterm}', "");
Expect(0, 32, '\P{^sterm}', "");
Expect(1, 33, '\p{ -STerm}', "");
Expect(0, 33, '\p{^ -STerm}', "");
Expect(0, 33, '\P{ -STerm}', "");
Expect(1, 33, '\P{^ -STerm}', "");
Expect(0, 32, '\p{ -STerm}', "");
Expect(1, 32, '\p{^ -STerm}', "");
Expect(1, 32, '\P{ -STerm}', "");
Expect(0, 32, '\P{^ -STerm}', "");
Error('\p{_	isSTerm/a/}');
Error('\P{_	isSTerm/a/}');
Expect(1, 33, '\p{issterm}', "");
Expect(0, 33, '\p{^issterm}', "");
Expect(0, 33, '\P{issterm}', "");
Expect(1, 33, '\P{^issterm}', "");
Expect(0, 32, '\p{issterm}', "");
Expect(1, 32, '\p{^issterm}', "");
Expect(1, 32, '\P{issterm}', "");
Expect(0, 32, '\P{^issterm}', "");
Expect(1, 33, '\p{-IS STERM}', "");
Expect(0, 33, '\p{^-IS STERM}', "");
Expect(0, 33, '\P{-IS STERM}', "");
Expect(1, 33, '\P{^-IS STERM}', "");
Expect(0, 32, '\p{-IS STERM}', "");
Expect(1, 32, '\p{^-IS STERM}', "");
Expect(1, 32, '\P{-IS STERM}', "");
Expect(0, 32, '\P{^-IS STERM}', "");
Error('\p{:=  inkannada}');
Error('\P{:=  inkannada}');
Expect(1, 3327, '\p{inkannada}', "");
Expect(0, 3327, '\p{^inkannada}', "");
Expect(0, 3327, '\P{inkannada}', "");
Expect(1, 3327, '\P{^inkannada}', "");
Expect(0, 3199, '\p{inkannada}', "");
Expect(1, 3199, '\p{^inkannada}', "");
Expect(1, 3199, '\P{inkannada}', "");
Expect(0, 3199, '\P{^inkannada}', "");
Expect(1, 3327, '\p{ _IN_Kannada}', "");
Expect(0, 3327, '\p{^ _IN_Kannada}', "");
Expect(0, 3327, '\P{ _IN_Kannada}', "");
Expect(1, 3327, '\P{^ _IN_Kannada}', "");
Expect(0, 3199, '\p{ _IN_Kannada}', "");
Expect(1, 3199, '\p{^ _IN_Kannada}', "");
Expect(1, 3199, '\P{ _IN_Kannada}', "");
Expect(0, 3199, '\P{^ _IN_Kannada}', "");
Error('\p{/a/ -Word}');
Error('\P{/a/ -Word}');
Expect(1, 57, '\p{word}', "");
Expect(0, 57, '\p{^word}', "");
Expect(0, 57, '\P{word}', "");
Expect(1, 57, '\P{^word}', "");
Expect(0, 47, '\p{word}', "");
Expect(1, 47, '\p{^word}', "");
Expect(1, 47, '\P{word}', "");
Expect(0, 47, '\P{^word}', "");
Expect(1, 57, '\p{ _word}', "");
Expect(0, 57, '\p{^ _word}', "");
Expect(0, 57, '\P{ _word}', "");
Expect(1, 57, '\P{^ _word}', "");
Expect(0, 47, '\p{ _word}', "");
Expect(1, 47, '\p{^ _word}', "");
Expect(1, 47, '\P{ _word}', "");
Expect(0, 47, '\P{^ _word}', "");
Error('\p{-:=ISWORD}');
Error('\P{-:=ISWORD}');
Expect(1, 57, '\p{isword}', "");
Expect(0, 57, '\p{^isword}', "");
Expect(0, 57, '\P{isword}', "");
Expect(1, 57, '\P{^isword}', "");
Expect(0, 47, '\p{isword}', "");
Expect(1, 47, '\p{^isword}', "");
Expect(1, 47, '\P{isword}', "");
Expect(0, 47, '\P{^isword}', "");
Expect(1, 57, '\p{	-IS	Word}', "");
Expect(0, 57, '\p{^	-IS	Word}', "");
Expect(0, 57, '\P{	-IS	Word}', "");
Expect(1, 57, '\P{^	-IS	Word}', "");
Expect(0, 47, '\p{	-IS	Word}', "");
Expect(1, 47, '\p{^	-IS	Word}', "");
Expect(1, 47, '\P{	-IS	Word}', "");
Expect(0, 47, '\P{^	-IS	Word}', "");
Error('\p{	/a/softdotted}');
Error('\P{	/a/softdotted}');
Expect(1, 106, '\p{softdotted}', "");
Expect(0, 106, '\p{^softdotted}', "");
Expect(0, 106, '\P{softdotted}', "");
Expect(1, 106, '\P{^softdotted}', "");
Expect(0, 104, '\p{softdotted}', "");
Expect(1, 104, '\p{^softdotted}', "");
Expect(1, 104, '\P{softdotted}', "");
Expect(0, 104, '\P{^softdotted}', "");
Expect(1, 106, '\p{__soft dotted}', "");
Expect(0, 106, '\p{^__soft dotted}', "");
Expect(0, 106, '\P{__soft dotted}', "");
Expect(1, 106, '\P{^__soft dotted}', "");
Expect(0, 104, '\p{__soft dotted}', "");
Expect(1, 104, '\p{^__soft dotted}', "");
Expect(1, 104, '\P{__soft dotted}', "");
Expect(0, 104, '\P{^__soft dotted}', "");
Error('\p{ IsSoft	dotted:=}');
Error('\P{ IsSoft	dotted:=}');
Expect(1, 106, '\p{issoftdotted}', "");
Expect(0, 106, '\p{^issoftdotted}', "");
Expect(0, 106, '\P{issoftdotted}', "");
Expect(1, 106, '\P{^issoftdotted}', "");
Expect(0, 104, '\p{issoftdotted}', "");
Expect(1, 104, '\p{^issoftdotted}', "");
Expect(1, 104, '\P{issoftdotted}', "");
Expect(0, 104, '\P{^issoftdotted}', "");
Expect(1, 106, '\p{		Is-soft Dotted}', "");
Expect(0, 106, '\p{^		Is-soft Dotted}', "");
Expect(0, 106, '\P{		Is-soft Dotted}', "");
Expect(1, 106, '\P{^		Is-soft Dotted}', "");
Expect(0, 104, '\p{		Is-soft Dotted}', "");
Expect(1, 104, '\p{^		Is-soft Dotted}', "");
Expect(1, 104, '\P{		Is-soft Dotted}', "");
Expect(0, 104, '\P{^		Is-soft Dotted}', "");
Error('\p{__SD/a/}');
Error('\P{__SD/a/}');
Expect(1, 106, '\p{sd}', "");
Expect(0, 106, '\p{^sd}', "");
Expect(0, 106, '\P{sd}', "");
Expect(1, 106, '\P{^sd}', "");
Expect(0, 104, '\p{sd}', "");
Expect(1, 104, '\p{^sd}', "");
Expect(1, 104, '\P{sd}', "");
Expect(0, 104, '\P{^sd}', "");
Expect(1, 106, '\p{ 	SD}', "");
Expect(0, 106, '\p{^ 	SD}', "");
Expect(0, 106, '\P{ 	SD}', "");
Expect(1, 106, '\P{^ 	SD}', "");
Expect(0, 104, '\p{ 	SD}', "");
Expect(1, 104, '\p{^ 	SD}', "");
Expect(1, 104, '\P{ 	SD}', "");
Expect(0, 104, '\P{^ 	SD}', "");
Error('\p{:=Is	SD}');
Error('\P{:=Is	SD}');
Expect(1, 106, '\p{issd}', "");
Expect(0, 106, '\p{^issd}', "");
Expect(0, 106, '\P{issd}', "");
Expect(1, 106, '\P{^issd}', "");
Expect(0, 104, '\p{issd}', "");
Expect(1, 104, '\p{^issd}', "");
Expect(1, 104, '\P{issd}', "");
Expect(0, 104, '\P{^issd}', "");
Expect(1, 106, '\p{- IS-SD}', "");
Expect(0, 106, '\p{^- IS-SD}', "");
Expect(0, 106, '\P{- IS-SD}', "");
Expect(1, 106, '\P{^- IS-SD}', "");
Expect(0, 104, '\p{- IS-SD}', "");
Expect(1, 104, '\p{^- IS-SD}', "");
Expect(1, 104, '\P{- IS-SD}', "");
Expect(0, 104, '\P{^- IS-SD}', "");
Error('\p{:=-	_CanonDCIJ}');
Error('\P{:=-	_CanonDCIJ}');
Expect(1, 106, '\p{_CanonDCIJ}', "");
Expect(0, 106, '\p{^_CanonDCIJ}', "");
Expect(0, 106, '\P{_CanonDCIJ}', "");
Expect(1, 106, '\P{^_CanonDCIJ}', "");
Expect(0, 104, '\p{_CanonDCIJ}', "");
Expect(1, 104, '\p{^_CanonDCIJ}', "");
Expect(1, 104, '\P{_CanonDCIJ}', "");
Expect(0, 104, '\P{^_CanonDCIJ}', "");
Error('\p{  Avestan:=}');
Error('\P{  Avestan:=}');
Expect(1, 68405, '\p{avestan}', "");
Expect(0, 68405, '\p{^avestan}', "");
Expect(0, 68405, '\P{avestan}', "");
Expect(1, 68405, '\P{^avestan}', "");
Expect(0, 68351, '\p{avestan}', "");
Expect(1, 68351, '\p{^avestan}', "");
Expect(1, 68351, '\P{avestan}', "");
Expect(0, 68351, '\P{^avestan}', "");
Expect(1, 68405, '\p{-_Avestan}', "");
Expect(0, 68405, '\p{^-_Avestan}', "");
Expect(0, 68405, '\P{-_Avestan}', "");
Expect(1, 68405, '\P{^-_Avestan}', "");
Expect(0, 68351, '\p{-_Avestan}', "");
Expect(1, 68351, '\p{^-_Avestan}', "");
Expect(1, 68351, '\P{-_Avestan}', "");
Expect(0, 68351, '\P{^-_Avestan}', "");
Error('\p{-	ISAvestan:=}');
Error('\P{-	ISAvestan:=}');
Expect(1, 68405, '\p{isavestan}', "");
Expect(0, 68405, '\p{^isavestan}', "");
Expect(0, 68405, '\P{isavestan}', "");
Expect(1, 68405, '\P{^isavestan}', "");
Expect(0, 68351, '\p{isavestan}', "");
Expect(1, 68351, '\p{^isavestan}', "");
Expect(1, 68351, '\P{isavestan}', "");
Expect(0, 68351, '\P{^isavestan}', "");
Expect(1, 68405, '\p{ -IsAvestan}', "");
Expect(0, 68405, '\p{^ -IsAvestan}', "");
Expect(0, 68405, '\P{ -IsAvestan}', "");
Expect(1, 68405, '\P{^ -IsAvestan}', "");
Expect(0, 68351, '\p{ -IsAvestan}', "");
Expect(1, 68351, '\p{^ -IsAvestan}', "");
Expect(1, 68351, '\P{ -IsAvestan}', "");
Expect(0, 68351, '\P{^ -IsAvestan}', "");
Error('\p{:= avst}');
Error('\P{:= avst}');
Expect(1, 68405, '\p{avst}', "");
Expect(0, 68405, '\p{^avst}', "");
Expect(0, 68405, '\P{avst}', "");
Expect(1, 68405, '\P{^avst}', "");
Expect(0, 68351, '\p{avst}', "");
Expect(1, 68351, '\p{^avst}', "");
Expect(1, 68351, '\P{avst}', "");
Expect(0, 68351, '\P{^avst}', "");
Expect(1, 68405, '\p{	 Avst}', "");
Expect(0, 68405, '\p{^	 Avst}', "");
Expect(0, 68405, '\P{	 Avst}', "");
Expect(1, 68405, '\P{^	 Avst}', "");
Expect(0, 68351, '\p{	 Avst}', "");
Expect(1, 68351, '\p{^	 Avst}', "");
Expect(1, 68351, '\P{	 Avst}', "");
Expect(0, 68351, '\P{^	 Avst}', "");
Error('\p{-:=Is	Avst}');
Error('\P{-:=Is	Avst}');
Expect(1, 68405, '\p{isavst}', "");
Expect(0, 68405, '\p{^isavst}', "");
Expect(0, 68405, '\P{isavst}', "");
Expect(1, 68405, '\P{^isavst}', "");
Expect(0, 68351, '\p{isavst}', "");
Expect(1, 68351, '\p{^isavst}', "");
Expect(1, 68351, '\P{isavst}', "");
Expect(0, 68351, '\P{^isavst}', "");
Expect(1, 68405, '\p{_ is avst}', "");
Expect(0, 68405, '\p{^_ is avst}', "");
Expect(0, 68405, '\P{_ is avst}', "");
Expect(1, 68405, '\P{^_ is avst}', "");
Expect(0, 68351, '\p{_ is avst}', "");
Expect(1, 68351, '\p{^_ is avst}', "");
Expect(1, 68351, '\P{_ is avst}', "");
Expect(0, 68351, '\P{^_ is avst}', "");
Error('\p{ -Control:=Pictures}');
Error('\P{ -Control:=Pictures}');
Expect(1, 9279, '\p{controlpictures}', "");
Expect(0, 9279, '\p{^controlpictures}', "");
Expect(0, 9279, '\P{controlpictures}', "");
Expect(1, 9279, '\P{^controlpictures}', "");
Expect(0, 9215, '\p{controlpictures}', "");
Expect(1, 9215, '\p{^controlpictures}', "");
Expect(1, 9215, '\P{controlpictures}', "");
Expect(0, 9215, '\P{^controlpictures}', "");
Expect(1, 9279, '\p{- ControlPictures}', "");
Expect(0, 9279, '\p{^- ControlPictures}', "");
Expect(0, 9279, '\P{- ControlPictures}', "");
Expect(1, 9279, '\P{^- ControlPictures}', "");
Expect(0, 9215, '\p{- ControlPictures}', "");
Expect(1, 9215, '\p{^- ControlPictures}', "");
Expect(1, 9215, '\P{- ControlPictures}', "");
Expect(0, 9215, '\P{^- ControlPictures}', "");
Error('\p{		Is:=CONTROL_Pictures}');
Error('\P{		Is:=CONTROL_Pictures}');
Expect(1, 9279, '\p{iscontrolpictures}', "");
Expect(0, 9279, '\p{^iscontrolpictures}', "");
Expect(0, 9279, '\P{iscontrolpictures}', "");
Expect(1, 9279, '\P{^iscontrolpictures}', "");
Expect(0, 9215, '\p{iscontrolpictures}', "");
Expect(1, 9215, '\p{^iscontrolpictures}', "");
Expect(1, 9215, '\P{iscontrolpictures}', "");
Expect(0, 9215, '\P{^iscontrolpictures}', "");
Expect(1, 9279, '\p{Is control	Pictures}', "");
Expect(0, 9279, '\p{^Is control	Pictures}', "");
Expect(0, 9279, '\P{Is control	Pictures}', "");
Expect(1, 9279, '\P{^Is control	Pictures}', "");
Expect(0, 9215, '\p{Is control	Pictures}', "");
Expect(1, 9215, '\p{^Is control	Pictures}', "");
Expect(1, 9215, '\P{Is control	Pictures}', "");
Expect(0, 9215, '\P{^Is control	Pictures}', "");
Error('\p{		In Control/a/Pictures}');
Error('\P{		In Control/a/Pictures}');
Expect(1, 9279, '\p{incontrolpictures}', "");
Expect(0, 9279, '\p{^incontrolpictures}', "");
Expect(0, 9279, '\P{incontrolpictures}', "");
Expect(1, 9279, '\P{^incontrolpictures}', "");
Expect(0, 9215, '\p{incontrolpictures}', "");
Expect(1, 9215, '\p{^incontrolpictures}', "");
Expect(1, 9215, '\P{incontrolpictures}', "");
Expect(0, 9215, '\P{^incontrolpictures}', "");
Expect(1, 9279, '\p{_In-CONTROL_Pictures}', "");
Expect(0, 9279, '\p{^_In-CONTROL_Pictures}', "");
Expect(0, 9279, '\P{_In-CONTROL_Pictures}', "");
Expect(1, 9279, '\P{^_In-CONTROL_Pictures}', "");
Expect(0, 9215, '\p{_In-CONTROL_Pictures}', "");
Expect(1, 9215, '\p{^_In-CONTROL_Pictures}', "");
Expect(1, 9215, '\P{_In-CONTROL_Pictures}', "");
Expect(0, 9215, '\P{^_In-CONTROL_Pictures}', "");
Error('\p{_/a/LatinEXTENDED	A}');
Error('\P{_/a/LatinEXTENDED	A}');
Expect(1, 383, '\p{latinextendeda}', "");
Expect(0, 383, '\p{^latinextendeda}', "");
Expect(0, 383, '\P{latinextendeda}', "");
Expect(1, 383, '\P{^latinextendeda}', "");
Expect(0, 255, '\p{latinextendeda}', "");
Expect(1, 255, '\p{^latinextendeda}', "");
Expect(1, 255, '\P{latinextendeda}', "");
Expect(0, 255, '\P{^latinextendeda}', "");
Expect(1, 383, '\p{_ Latin	extended_a}', "");
Expect(0, 383, '\p{^_ Latin	extended_a}', "");
Expect(0, 383, '\P{_ Latin	extended_a}', "");
Expect(1, 383, '\P{^_ Latin	extended_a}', "");
Expect(0, 255, '\p{_ Latin	extended_a}', "");
Expect(1, 255, '\p{^_ Latin	extended_a}', "");
Expect(1, 255, '\P{_ Latin	extended_a}', "");
Expect(0, 255, '\P{^_ Latin	extended_a}', "");
Error('\p{ IsLatinextendedA:=}');
Error('\P{ IsLatinextendedA:=}');
Expect(1, 383, '\p{islatinextendeda}', "");
Expect(0, 383, '\p{^islatinextendeda}', "");
Expect(0, 383, '\P{islatinextendeda}', "");
Expect(1, 383, '\P{^islatinextendeda}', "");
Expect(0, 255, '\p{islatinextendeda}', "");
Expect(1, 255, '\p{^islatinextendeda}', "");
Expect(1, 255, '\P{islatinextendeda}', "");
Expect(0, 255, '\P{^islatinextendeda}', "");
Expect(1, 383, '\p{-_Is	LATIN	extended_A}', "");
Expect(0, 383, '\p{^-_Is	LATIN	extended_A}', "");
Expect(0, 383, '\P{-_Is	LATIN	extended_A}', "");
Expect(1, 383, '\P{^-_Is	LATIN	extended_A}', "");
Expect(0, 255, '\p{-_Is	LATIN	extended_A}', "");
Expect(1, 255, '\p{^-_Is	LATIN	extended_A}', "");
Expect(1, 255, '\P{-_Is	LATIN	extended_A}', "");
Expect(0, 255, '\P{^-_Is	LATIN	extended_A}', "");
Error('\p{	 IN-Latin:=extended_A}');
Error('\P{	 IN-Latin:=extended_A}');
Expect(1, 383, '\p{inlatinextendeda}', "");
Expect(0, 383, '\p{^inlatinextendeda}', "");
Expect(0, 383, '\P{inlatinextendeda}', "");
Expect(1, 383, '\P{^inlatinextendeda}', "");
Expect(0, 255, '\p{inlatinextendeda}', "");
Expect(1, 255, '\p{^inlatinextendeda}', "");
Expect(1, 255, '\P{inlatinextendeda}', "");
Expect(0, 255, '\P{^inlatinextendeda}', "");
Expect(1, 383, '\p{		in	Latin	EXTENDED	A}', "");
Expect(0, 383, '\p{^		in	Latin	EXTENDED	A}', "");
Expect(0, 383, '\P{		in	Latin	EXTENDED	A}', "");
Expect(1, 383, '\P{^		in	Latin	EXTENDED	A}', "");
Expect(0, 255, '\p{		in	Latin	EXTENDED	A}', "");
Expect(1, 255, '\p{^		in	Latin	EXTENDED	A}', "");
Expect(1, 255, '\P{		in	Latin	EXTENDED	A}', "");
Expect(0, 255, '\P{^		in	Latin	EXTENDED	A}', "");
Error('\p{ /a/Gujarati}');
Error('\P{ /a/Gujarati}');
Expect(1, 2691, '\p{gujarati}', "");
Expect(0, 2691, '\p{^gujarati}', "");
Expect(0, 2691, '\P{gujarati}', "");
Expect(1, 2691, '\P{^gujarati}', "");
Expect(0, 2688, '\p{gujarati}', "");
Expect(1, 2688, '\p{^gujarati}', "");
Expect(1, 2688, '\P{gujarati}', "");
Expect(0, 2688, '\P{^gujarati}', "");
Expect(1, 2691, '\p{_-GUJARATI}', "");
Expect(0, 2691, '\p{^_-GUJARATI}', "");
Expect(0, 2691, '\P{_-GUJARATI}', "");
Expect(1, 2691, '\P{^_-GUJARATI}', "");
Expect(0, 2688, '\p{_-GUJARATI}', "");
Expect(1, 2688, '\p{^_-GUJARATI}', "");
Expect(1, 2688, '\P{_-GUJARATI}', "");
Expect(0, 2688, '\P{^_-GUJARATI}', "");
Error('\p{:=- IS-Gujarati}');
Error('\P{:=- IS-Gujarati}');
Expect(1, 2691, '\p{isgujarati}', "");
Expect(0, 2691, '\p{^isgujarati}', "");
Expect(0, 2691, '\P{isgujarati}', "");
Expect(1, 2691, '\P{^isgujarati}', "");
Expect(0, 2688, '\p{isgujarati}', "");
Expect(1, 2688, '\p{^isgujarati}', "");
Expect(1, 2688, '\P{isgujarati}', "");
Expect(0, 2688, '\P{^isgujarati}', "");
Expect(1, 2691, '\p{-Is-Gujarati}', "");
Expect(0, 2691, '\p{^-Is-Gujarati}', "");
Expect(0, 2691, '\P{-Is-Gujarati}', "");
Expect(1, 2691, '\P{^-Is-Gujarati}', "");
Expect(0, 2688, '\p{-Is-Gujarati}', "");
Expect(1, 2688, '\p{^-Is-Gujarati}', "");
Expect(1, 2688, '\P{-Is-Gujarati}', "");
Expect(0, 2688, '\P{^-Is-Gujarati}', "");
Error('\p{ _Gujr/a/}');
Error('\P{ _Gujr/a/}');
Expect(1, 2691, '\p{gujr}', "");
Expect(0, 2691, '\p{^gujr}', "");
Expect(0, 2691, '\P{gujr}', "");
Expect(1, 2691, '\P{^gujr}', "");
Expect(0, 2688, '\p{gujr}', "");
Expect(1, 2688, '\p{^gujr}', "");
Expect(1, 2688, '\P{gujr}', "");
Expect(0, 2688, '\P{^gujr}', "");
Expect(1, 2691, '\p{_-Gujr}', "");
Expect(0, 2691, '\p{^_-Gujr}', "");
Expect(0, 2691, '\P{_-Gujr}', "");
Expect(1, 2691, '\P{^_-Gujr}', "");
Expect(0, 2688, '\p{_-Gujr}', "");
Expect(1, 2688, '\p{^_-Gujr}', "");
Expect(1, 2688, '\P{_-Gujr}', "");
Expect(0, 2688, '\P{^_-Gujr}', "");
Error('\p{/a/ Is Gujr}');
Error('\P{/a/ Is Gujr}');
Expect(1, 2691, '\p{isgujr}', "");
Expect(0, 2691, '\p{^isgujr}', "");
Expect(0, 2691, '\P{isgujr}', "");
Expect(1, 2691, '\P{^isgujr}', "");
Expect(0, 2688, '\p{isgujr}', "");
Expect(1, 2688, '\p{^isgujr}', "");
Expect(1, 2688, '\P{isgujr}', "");
Expect(0, 2688, '\P{^isgujr}', "");
Expect(1, 2691, '\p{	-Is Gujr}', "");
Expect(0, 2691, '\p{^	-Is Gujr}', "");
Expect(0, 2691, '\P{	-Is Gujr}', "");
Expect(1, 2691, '\P{^	-Is Gujr}', "");
Expect(0, 2688, '\p{	-Is Gujr}', "");
Expect(1, 2688, '\p{^	-Is Gujr}', "");
Expect(1, 2688, '\P{	-Is Gujr}', "");
Expect(0, 2688, '\P{^	-Is Gujr}', "");
Error('\p{	 SpacePerl/a/}');
Error('\P{	 SpacePerl/a/}');
Expect(1, 10, '\p{spaceperl}', "");
Expect(0, 10, '\p{^spaceperl}', "");
Expect(0, 10, '\P{spaceperl}', "");
Expect(1, 10, '\P{^spaceperl}', "");
Expect(0, 8, '\p{spaceperl}', "");
Expect(1, 8, '\p{^spaceperl}', "");
Expect(1, 8, '\P{spaceperl}', "");
Expect(0, 8, '\P{^spaceperl}', "");
Expect(1, 10, '\p{	_SPACEPERL}', "");
Expect(0, 10, '\p{^	_SPACEPERL}', "");
Expect(0, 10, '\P{	_SPACEPERL}', "");
Expect(1, 10, '\P{^	_SPACEPERL}', "");
Expect(0, 8, '\p{	_SPACEPERL}', "");
Expect(1, 8, '\p{^	_SPACEPERL}', "");
Expect(1, 8, '\P{	_SPACEPERL}', "");
Expect(0, 8, '\P{^	_SPACEPERL}', "");
Error('\p{	 IS_SpacePerl/a/}');
Error('\P{	 IS_SpacePerl/a/}');
Expect(1, 10, '\p{isspaceperl}', "");
Expect(0, 10, '\p{^isspaceperl}', "");
Expect(0, 10, '\P{isspaceperl}', "");
Expect(1, 10, '\P{^isspaceperl}', "");
Expect(0, 8, '\p{isspaceperl}', "");
Expect(1, 8, '\p{^isspaceperl}', "");
Expect(1, 8, '\P{isspaceperl}', "");
Expect(0, 8, '\P{^isspaceperl}', "");
Expect(1, 10, '\p{ -Is_SPACEPERL}', "");
Expect(0, 10, '\p{^ -Is_SPACEPERL}', "");
Expect(0, 10, '\P{ -Is_SPACEPERL}', "");
Expect(1, 10, '\P{^ -Is_SPACEPERL}', "");
Expect(0, 8, '\p{ -Is_SPACEPERL}', "");
Expect(1, 8, '\p{^ -Is_SPACEPERL}', "");
Expect(1, 8, '\P{ -Is_SPACEPERL}', "");
Expect(0, 8, '\P{^ -Is_SPACEPERL}', "");
Error('\p{  In	oriya/a/}');
Error('\P{  In	oriya/a/}');
Expect(1, 2943, '\p{inoriya}', "");
Expect(0, 2943, '\p{^inoriya}', "");
Expect(0, 2943, '\P{inoriya}', "");
Expect(1, 2943, '\P{^inoriya}', "");
Expect(0, 2815, '\p{inoriya}', "");
Expect(1, 2815, '\p{^inoriya}', "");
Expect(1, 2815, '\P{inoriya}', "");
Expect(0, 2815, '\P{^inoriya}', "");
Expect(1, 2943, '\p{	_IN-Oriya}', "");
Expect(0, 2943, '\p{^	_IN-Oriya}', "");
Expect(0, 2943, '\P{	_IN-Oriya}', "");
Expect(1, 2943, '\P{^	_IN-Oriya}', "");
Expect(0, 2815, '\p{	_IN-Oriya}', "");
Expect(1, 2815, '\p{^	_IN-Oriya}', "");
Expect(1, 2815, '\P{	_IN-Oriya}', "");
Expect(0, 2815, '\P{^	_IN-Oriya}', "");
Error('\p{ _CJKUNIFIED/a/Ideographs}');
Error('\P{ _CJKUNIFIED/a/Ideographs}');
Expect(1, 40959, '\p{cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^cjkunifiedideographs}', "");
Expect(0, 40959, '\P{cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^cjkunifiedideographs}', "");
Expect(0, 19967, '\p{cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^cjkunifiedideographs}', "");
Expect(1, 19967, '\P{cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^cjkunifiedideographs}', "");
Expect(1, 40959, '\p{	 CJK UNIFIED-Ideographs}', "");
Expect(0, 40959, '\p{^	 CJK UNIFIED-Ideographs}', "");
Expect(0, 40959, '\P{	 CJK UNIFIED-Ideographs}', "");
Expect(1, 40959, '\P{^	 CJK UNIFIED-Ideographs}', "");
Expect(0, 19967, '\p{	 CJK UNIFIED-Ideographs}', "");
Expect(1, 19967, '\p{^	 CJK UNIFIED-Ideographs}', "");
Expect(1, 19967, '\P{	 CJK UNIFIED-Ideographs}', "");
Expect(0, 19967, '\P{^	 CJK UNIFIED-Ideographs}', "");
Error('\p{ -Is_CJK-Unified Ideographs/a/}');
Error('\P{ -Is_CJK-Unified Ideographs/a/}');
Expect(1, 40959, '\p{iscjkunifiedideographs}', "");
Expect(0, 40959, '\p{^iscjkunifiedideographs}', "");
Expect(0, 40959, '\P{iscjkunifiedideographs}', "");
Expect(1, 40959, '\P{^iscjkunifiedideographs}', "");
Expect(0, 19967, '\p{iscjkunifiedideographs}', "");
Expect(1, 19967, '\p{^iscjkunifiedideographs}', "");
Expect(1, 19967, '\P{iscjkunifiedideographs}', "");
Expect(0, 19967, '\P{^iscjkunifiedideographs}', "");
Expect(1, 40959, '\p{ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(0, 40959, '\P{ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(0, 19967, '\p{ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(1, 19967, '\P{ _Is	CJK-unified-IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^ _Is	CJK-unified-IDEOGRAPHS}', "");
Error('\p{__INcjk UNIFIEDIdeographs/a/}');
Error('\P{__INcjk UNIFIEDIdeographs/a/}');
Expect(1, 40959, '\p{incjkunifiedideographs}', "");
Expect(0, 40959, '\p{^incjkunifiedideographs}', "");
Expect(0, 40959, '\P{incjkunifiedideographs}', "");
Expect(1, 40959, '\P{^incjkunifiedideographs}', "");
Expect(0, 19967, '\p{incjkunifiedideographs}', "");
Expect(1, 19967, '\p{^incjkunifiedideographs}', "");
Expect(1, 19967, '\P{incjkunifiedideographs}', "");
Expect(0, 19967, '\P{^incjkunifiedideographs}', "");
Expect(1, 40959, '\p{	IN_CJK	UnifiedIdeographs}', "");
Expect(0, 40959, '\p{^	IN_CJK	UnifiedIdeographs}', "");
Expect(0, 40959, '\P{	IN_CJK	UnifiedIdeographs}', "");
Expect(1, 40959, '\P{^	IN_CJK	UnifiedIdeographs}', "");
Expect(0, 19967, '\p{	IN_CJK	UnifiedIdeographs}', "");
Expect(1, 19967, '\p{^	IN_CJK	UnifiedIdeographs}', "");
Expect(1, 19967, '\P{	IN_CJK	UnifiedIdeographs}', "");
Expect(0, 19967, '\P{^	IN_CJK	UnifiedIdeographs}', "");
Error('\p{	/a/ID Continue}');
Error('\P{	/a/ID Continue}');
Expect(1, 57, '\p{idcontinue}', "");
Expect(0, 57, '\p{^idcontinue}', "");
Expect(0, 57, '\P{idcontinue}', "");
Expect(1, 57, '\P{^idcontinue}', "");
Expect(0, 47, '\p{idcontinue}', "");
Expect(1, 47, '\p{^idcontinue}', "");
Expect(1, 47, '\P{idcontinue}', "");
Expect(0, 47, '\P{^idcontinue}', "");
Expect(1, 57, '\p{_id_CONTINUE}', "");
Expect(0, 57, '\p{^_id_CONTINUE}', "");
Expect(0, 57, '\P{_id_CONTINUE}', "");
Expect(1, 57, '\P{^_id_CONTINUE}', "");
Expect(0, 47, '\p{_id_CONTINUE}', "");
Expect(1, 47, '\p{^_id_CONTINUE}', "");
Expect(1, 47, '\P{_id_CONTINUE}', "");
Expect(0, 47, '\P{^_id_CONTINUE}', "");
Error('\p{_/a/Is_ID_Continue}');
Error('\P{_/a/Is_ID_Continue}');
Expect(1, 57, '\p{isidcontinue}', "");
Expect(0, 57, '\p{^isidcontinue}', "");
Expect(0, 57, '\P{isidcontinue}', "");
Expect(1, 57, '\P{^isidcontinue}', "");
Expect(0, 47, '\p{isidcontinue}', "");
Expect(1, 47, '\p{^isidcontinue}', "");
Expect(1, 47, '\P{isidcontinue}', "");
Expect(0, 47, '\P{^isidcontinue}', "");
Expect(1, 57, '\p{	_Isid-CONTINUE}', "");
Expect(0, 57, '\p{^	_Isid-CONTINUE}', "");
Expect(0, 57, '\P{	_Isid-CONTINUE}', "");
Expect(1, 57, '\P{^	_Isid-CONTINUE}', "");
Expect(0, 47, '\p{	_Isid-CONTINUE}', "");
Expect(1, 47, '\p{^	_Isid-CONTINUE}', "");
Expect(1, 47, '\P{	_Isid-CONTINUE}', "");
Expect(0, 47, '\P{^	_Isid-CONTINUE}', "");
Error('\p{	IDC:=}');
Error('\P{	IDC:=}');
Expect(1, 57, '\p{idc}', "");
Expect(0, 57, '\p{^idc}', "");
Expect(0, 57, '\P{idc}', "");
Expect(1, 57, '\P{^idc}', "");
Expect(0, 47, '\p{idc}', "");
Expect(1, 47, '\p{^idc}', "");
Expect(1, 47, '\P{idc}', "");
Expect(0, 47, '\P{^idc}', "");
Expect(1, 57, '\p{ -IDC}', "");
Expect(0, 57, '\p{^ -IDC}', "");
Expect(0, 57, '\P{ -IDC}', "");
Expect(1, 57, '\P{^ -IDC}', "");
Expect(0, 47, '\p{ -IDC}', "");
Expect(1, 47, '\p{^ -IDC}', "");
Expect(1, 47, '\P{ -IDC}', "");
Expect(0, 47, '\P{^ -IDC}', "");
Error('\p{:=_ IsIDC}');
Error('\P{:=_ IsIDC}');
Expect(1, 57, '\p{isidc}', "");
Expect(0, 57, '\p{^isidc}', "");
Expect(0, 57, '\P{isidc}', "");
Expect(1, 57, '\P{^isidc}', "");
Expect(0, 47, '\p{isidc}', "");
Expect(1, 47, '\p{^isidc}', "");
Expect(1, 47, '\P{isidc}', "");
Expect(0, 47, '\P{^isidc}', "");
Expect(1, 57, '\p{	Is_IDC}', "");
Expect(0, 57, '\p{^	Is_IDC}', "");
Expect(0, 57, '\P{	Is_IDC}', "");
Expect(1, 57, '\P{^	Is_IDC}', "");
Expect(0, 47, '\p{	Is_IDC}', "");
Expect(1, 47, '\p{^	Is_IDC}', "");
Expect(1, 47, '\P{	Is_IDC}', "");
Expect(0, 47, '\P{^	Is_IDC}', "");
Error('\p{:=In GLAGOLITIC}');
Error('\P{:=In GLAGOLITIC}');
Expect(1, 11359, '\p{inglagolitic}', "");
Expect(0, 11359, '\p{^inglagolitic}', "");
Expect(0, 11359, '\P{inglagolitic}', "");
Expect(1, 11359, '\P{^inglagolitic}', "");
Expect(0, 11263, '\p{inglagolitic}', "");
Expect(1, 11263, '\p{^inglagolitic}', "");
Expect(1, 11263, '\P{inglagolitic}', "");
Expect(0, 11263, '\P{^inglagolitic}', "");
Expect(1, 11359, '\p{	In	Glagolitic}', "");
Expect(0, 11359, '\p{^	In	Glagolitic}', "");
Expect(0, 11359, '\P{	In	Glagolitic}', "");
Expect(1, 11359, '\P{^	In	Glagolitic}', "");
Expect(0, 11263, '\p{	In	Glagolitic}', "");
Expect(1, 11263, '\p{^	In	Glagolitic}', "");
Expect(1, 11263, '\P{	In	Glagolitic}', "");
Expect(0, 11263, '\P{^	In	Glagolitic}', "");
Error('\p{/a/ 	open	PUNCTUATION}');
Error('\P{/a/ 	open	PUNCTUATION}');
Expect(1, 40, '\p{openpunctuation}', "");
Expect(0, 40, '\p{^openpunctuation}', "");
Expect(0, 40, '\P{openpunctuation}', "");
Expect(1, 40, '\P{^openpunctuation}', "");
Expect(0, 39, '\p{openpunctuation}', "");
Expect(1, 39, '\p{^openpunctuation}', "");
Expect(1, 39, '\P{openpunctuation}', "");
Expect(0, 39, '\P{^openpunctuation}', "");
Expect(1, 40, '\p{		OPEN	Punctuation}', "");
Expect(0, 40, '\p{^		OPEN	Punctuation}', "");
Expect(0, 40, '\P{		OPEN	Punctuation}', "");
Expect(1, 40, '\P{^		OPEN	Punctuation}', "");
Expect(0, 39, '\p{		OPEN	Punctuation}', "");
Expect(1, 39, '\p{^		OPEN	Punctuation}', "");
Expect(1, 39, '\P{		OPEN	Punctuation}', "");
Expect(0, 39, '\P{^		OPEN	Punctuation}', "");
Error('\p{-:=IS	Open_PUNCTUATION}');
Error('\P{-:=IS	Open_PUNCTUATION}');
Expect(1, 40, '\p{isopenpunctuation}', "");
Expect(0, 40, '\p{^isopenpunctuation}', "");
Expect(0, 40, '\P{isopenpunctuation}', "");
Expect(1, 40, '\P{^isopenpunctuation}', "");
Expect(0, 39, '\p{isopenpunctuation}', "");
Expect(1, 39, '\p{^isopenpunctuation}', "");
Expect(1, 39, '\P{isopenpunctuation}', "");
Expect(0, 39, '\P{^isopenpunctuation}', "");
Expect(1, 40, '\p{-Is_openPunctuation}', "");
Expect(0, 40, '\p{^-Is_openPunctuation}', "");
Expect(0, 40, '\P{-Is_openPunctuation}', "");
Expect(1, 40, '\P{^-Is_openPunctuation}', "");
Expect(0, 39, '\p{-Is_openPunctuation}', "");
Expect(1, 39, '\p{^-Is_openPunctuation}', "");
Expect(1, 39, '\P{-Is_openPunctuation}', "");
Expect(0, 39, '\P{^-Is_openPunctuation}', "");
Error('\p{ /a/ps}');
Error('\P{ /a/ps}');
Expect(1, 40, '\p{ps}', "");
Expect(0, 40, '\p{^ps}', "");
Expect(0, 40, '\P{ps}', "");
Expect(1, 40, '\P{^ps}', "");
Expect(0, 39, '\p{ps}', "");
Expect(1, 39, '\p{^ps}', "");
Expect(1, 39, '\P{ps}', "");
Expect(0, 39, '\P{^ps}', "");
Expect(1, 40, '\p{ -PS}', "");
Expect(0, 40, '\p{^ -PS}', "");
Expect(0, 40, '\P{ -PS}', "");
Expect(1, 40, '\P{^ -PS}', "");
Expect(0, 39, '\p{ -PS}', "");
Expect(1, 39, '\p{^ -PS}', "");
Expect(1, 39, '\P{ -PS}', "");
Expect(0, 39, '\P{^ -PS}', "");
Error('\p{ 	Is	ps/a/}');
Error('\P{ 	Is	ps/a/}');
Expect(1, 40, '\p{isps}', "");
Expect(0, 40, '\p{^isps}', "");
Expect(0, 40, '\P{isps}', "");
Expect(1, 40, '\P{^isps}', "");
Expect(0, 39, '\p{isps}', "");
Expect(1, 39, '\p{^isps}', "");
Expect(1, 39, '\P{isps}', "");
Expect(0, 39, '\P{^isps}', "");
Expect(1, 40, '\p{Is_Ps}', "");
Expect(0, 40, '\p{^Is_Ps}', "");
Expect(0, 40, '\P{Is_Ps}', "");
Expect(1, 40, '\P{^Is_Ps}', "");
Expect(0, 39, '\p{Is_Ps}', "");
Expect(1, 39, '\p{^Is_Ps}', "");
Expect(1, 39, '\P{Is_Ps}', "");
Expect(0, 39, '\P{^Is_Ps}', "");
Error('\p{ _HANGUL/a/}');
Error('\P{ _HANGUL/a/}');
Expect(1, 4607, '\p{hangul}', "");
Expect(0, 4607, '\p{^hangul}', "");
Expect(0, 4607, '\P{hangul}', "");
Expect(1, 4607, '\P{^hangul}', "");
Expect(0, 4351, '\p{hangul}', "");
Expect(1, 4351, '\p{^hangul}', "");
Expect(1, 4351, '\P{hangul}', "");
Expect(0, 4351, '\P{^hangul}', "");
Expect(1, 4607, '\p{-_hangul}', "");
Expect(0, 4607, '\p{^-_hangul}', "");
Expect(0, 4607, '\P{-_hangul}', "");
Expect(1, 4607, '\P{^-_hangul}', "");
Expect(0, 4351, '\p{-_hangul}', "");
Expect(1, 4351, '\p{^-_hangul}', "");
Expect(1, 4351, '\P{-_hangul}', "");
Expect(0, 4351, '\P{^-_hangul}', "");
Error('\p{:= _is-Hangul}');
Error('\P{:= _is-Hangul}');
Expect(1, 4607, '\p{ishangul}', "");
Expect(0, 4607, '\p{^ishangul}', "");
Expect(0, 4607, '\P{ishangul}', "");
Expect(1, 4607, '\P{^ishangul}', "");
Expect(0, 4351, '\p{ishangul}', "");
Expect(1, 4351, '\p{^ishangul}', "");
Expect(1, 4351, '\P{ishangul}', "");
Expect(0, 4351, '\P{^ishangul}', "");
Expect(1, 4607, '\p{	-Ishangul}', "");
Expect(0, 4607, '\p{^	-Ishangul}', "");
Expect(0, 4607, '\P{	-Ishangul}', "");
Expect(1, 4607, '\P{^	-Ishangul}', "");
Expect(0, 4351, '\p{	-Ishangul}', "");
Expect(1, 4351, '\p{^	-Ishangul}', "");
Expect(1, 4351, '\P{	-Ishangul}', "");
Expect(0, 4351, '\P{^	-Ishangul}', "");
Error('\p{  HANG/a/}');
Error('\P{  HANG/a/}');
Expect(1, 4607, '\p{hang}', "");
Expect(0, 4607, '\p{^hang}', "");
Expect(0, 4607, '\P{hang}', "");
Expect(1, 4607, '\P{^hang}', "");
Expect(0, 4351, '\p{hang}', "");
Expect(1, 4351, '\p{^hang}', "");
Expect(1, 4351, '\P{hang}', "");
Expect(0, 4351, '\P{^hang}', "");
Expect(1, 4607, '\p{ 	Hang}', "");
Expect(0, 4607, '\p{^ 	Hang}', "");
Expect(0, 4607, '\P{ 	Hang}', "");
Expect(1, 4607, '\P{^ 	Hang}', "");
Expect(0, 4351, '\p{ 	Hang}', "");
Expect(1, 4351, '\p{^ 	Hang}', "");
Expect(1, 4351, '\P{ 	Hang}', "");
Expect(0, 4351, '\P{^ 	Hang}', "");
Error('\p{/a/__IS_HANG}');
Error('\P{/a/__IS_HANG}');
Expect(1, 4607, '\p{ishang}', "");
Expect(0, 4607, '\p{^ishang}', "");
Expect(0, 4607, '\P{ishang}', "");
Expect(1, 4607, '\P{^ishang}', "");
Expect(0, 4351, '\p{ishang}', "");
Expect(1, 4351, '\p{^ishang}', "");
Expect(1, 4351, '\P{ishang}', "");
Expect(0, 4351, '\P{^ishang}', "");
Expect(1, 4607, '\p{_-Is	HANG}', "");
Expect(0, 4607, '\p{^_-Is	HANG}', "");
Expect(0, 4607, '\P{_-Is	HANG}', "");
Expect(1, 4607, '\P{^_-Is	HANG}', "");
Expect(0, 4351, '\p{_-Is	HANG}', "");
Expect(1, 4351, '\p{^_-Is	HANG}', "");
Expect(1, 4351, '\P{_-Is	HANG}', "");
Expect(0, 4351, '\P{^_-Is	HANG}', "");
Error('\p{:= -Cypriot}');
Error('\P{:= -Cypriot}');
Expect(1, 67589, '\p{cypriot}', "");
Expect(0, 67589, '\p{^cypriot}', "");
Expect(0, 67589, '\P{cypriot}', "");
Expect(1, 67589, '\P{^cypriot}', "");
Expect(0, 67583, '\p{cypriot}', "");
Expect(1, 67583, '\p{^cypriot}', "");
Expect(1, 67583, '\P{cypriot}', "");
Expect(0, 67583, '\P{^cypriot}', "");
Expect(1, 67589, '\p{ _CYPRIOT}', "");
Expect(0, 67589, '\p{^ _CYPRIOT}', "");
Expect(0, 67589, '\P{ _CYPRIOT}', "");
Expect(1, 67589, '\P{^ _CYPRIOT}', "");
Expect(0, 67583, '\p{ _CYPRIOT}', "");
Expect(1, 67583, '\p{^ _CYPRIOT}', "");
Expect(1, 67583, '\P{ _CYPRIOT}', "");
Expect(0, 67583, '\P{^ _CYPRIOT}', "");
Error('\p{	/a/IS Cypriot}');
Error('\P{	/a/IS Cypriot}');
Expect(1, 67589, '\p{iscypriot}', "");
Expect(0, 67589, '\p{^iscypriot}', "");
Expect(0, 67589, '\P{iscypriot}', "");
Expect(1, 67589, '\P{^iscypriot}', "");
Expect(0, 67583, '\p{iscypriot}', "");
Expect(1, 67583, '\p{^iscypriot}', "");
Expect(1, 67583, '\P{iscypriot}', "");
Expect(0, 67583, '\P{^iscypriot}', "");
Expect(1, 67589, '\p{		IS Cypriot}', "");
Expect(0, 67589, '\p{^		IS Cypriot}', "");
Expect(0, 67589, '\P{		IS Cypriot}', "");
Expect(1, 67589, '\P{^		IS Cypriot}', "");
Expect(0, 67583, '\p{		IS Cypriot}', "");
Expect(1, 67583, '\p{^		IS Cypriot}', "");
Expect(1, 67583, '\P{		IS Cypriot}', "");
Expect(0, 67583, '\P{^		IS Cypriot}', "");
Error('\p{	/a/Cprt}');
Error('\P{	/a/Cprt}');
Expect(1, 67589, '\p{cprt}', "");
Expect(0, 67589, '\p{^cprt}', "");
Expect(0, 67589, '\P{cprt}', "");
Expect(1, 67589, '\P{^cprt}', "");
Expect(0, 67583, '\p{cprt}', "");
Expect(1, 67583, '\p{^cprt}', "");
Expect(1, 67583, '\P{cprt}', "");
Expect(0, 67583, '\P{^cprt}', "");
Expect(1, 67589, '\p{_cprt}', "");
Expect(0, 67589, '\p{^_cprt}', "");
Expect(0, 67589, '\P{_cprt}', "");
Expect(1, 67589, '\P{^_cprt}', "");
Expect(0, 67583, '\p{_cprt}', "");
Expect(1, 67583, '\p{^_cprt}', "");
Expect(1, 67583, '\P{_cprt}', "");
Expect(0, 67583, '\P{^_cprt}', "");
Error('\p{	 Is:=cprt}');
Error('\P{	 Is:=cprt}');
Expect(1, 67589, '\p{iscprt}', "");
Expect(0, 67589, '\p{^iscprt}', "");
Expect(0, 67589, '\P{iscprt}', "");
Expect(1, 67589, '\P{^iscprt}', "");
Expect(0, 67583, '\p{iscprt}', "");
Expect(1, 67583, '\p{^iscprt}', "");
Expect(1, 67583, '\P{iscprt}', "");
Expect(0, 67583, '\P{^iscprt}', "");
Expect(1, 67589, '\p{-	is CPRT}', "");
Expect(0, 67589, '\p{^-	is CPRT}', "");
Expect(0, 67589, '\P{-	is CPRT}', "");
Expect(1, 67589, '\P{^-	is CPRT}', "");
Expect(0, 67583, '\p{-	is CPRT}', "");
Expect(1, 67583, '\p{^-	is CPRT}', "");
Expect(1, 67583, '\P{-	is CPRT}', "");
Expect(0, 67583, '\P{^-	is CPRT}', "");
Error('\p{_ BYZANTINEMUSICALSYMBOLS:=}');
Error('\P{_ BYZANTINEMUSICALSYMBOLS:=}');
Expect(1, 119039, '\p{byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{	byzantine_MUSICAL Symbols}', "");
Expect(0, 119039, '\p{^	byzantine_MUSICAL Symbols}', "");
Expect(0, 119039, '\P{	byzantine_MUSICAL Symbols}', "");
Expect(1, 119039, '\P{^	byzantine_MUSICAL Symbols}', "");
Expect(0, 118783, '\p{	byzantine_MUSICAL Symbols}', "");
Expect(1, 118783, '\p{^	byzantine_MUSICAL Symbols}', "");
Expect(1, 118783, '\P{	byzantine_MUSICAL Symbols}', "");
Expect(0, 118783, '\P{^	byzantine_MUSICAL Symbols}', "");
Error('\p{	/a/is	Byzantine_MUSICAL	symbols}');
Error('\P{	/a/is	Byzantine_MUSICAL	symbols}');
Expect(1, 119039, '\p{isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{_ is-ByzantineMusical-Symbols}', "");
Expect(0, 119039, '\p{^_ is-ByzantineMusical-Symbols}', "");
Expect(0, 119039, '\P{_ is-ByzantineMusical-Symbols}', "");
Expect(1, 119039, '\P{^_ is-ByzantineMusical-Symbols}', "");
Expect(0, 118783, '\p{_ is-ByzantineMusical-Symbols}', "");
Expect(1, 118783, '\p{^_ is-ByzantineMusical-Symbols}', "");
Expect(1, 118783, '\P{_ is-ByzantineMusical-Symbols}', "");
Expect(0, 118783, '\P{^_ is-ByzantineMusical-Symbols}', "");
Error('\p{-In/a/Byzantine_musicalsymbols}');
Error('\P{-In/a/Byzantine_musicalsymbols}');
Expect(1, 119039, '\p{inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{_In_BYZANTINEmusical-Symbols}', "");
Expect(0, 119039, '\p{^_In_BYZANTINEmusical-Symbols}', "");
Expect(0, 119039, '\P{_In_BYZANTINEmusical-Symbols}', "");
Expect(1, 119039, '\P{^_In_BYZANTINEmusical-Symbols}', "");
Expect(0, 118783, '\p{_In_BYZANTINEmusical-Symbols}', "");
Expect(1, 118783, '\p{^_In_BYZANTINEmusical-Symbols}', "");
Expect(1, 118783, '\P{_In_BYZANTINEmusical-Symbols}', "");
Expect(0, 118783, '\P{^_In_BYZANTINEmusical-Symbols}', "");
Error('\p{/a/_PosixUpper}');
Error('\P{/a/_PosixUpper}');
Expect(1, 90, '\p{posixupper}', "");
Expect(0, 90, '\p{^posixupper}', "");
Expect(0, 90, '\P{posixupper}', "");
Expect(1, 90, '\P{^posixupper}', "");
Expect(0, 64, '\p{posixupper}', "");
Expect(1, 64, '\p{^posixupper}', "");
Expect(1, 64, '\P{posixupper}', "");
Expect(0, 64, '\P{^posixupper}', "");
Expect(1, 90, '\p{-_POSIXUPPER}', "");
Expect(0, 90, '\p{^-_POSIXUPPER}', "");
Expect(0, 90, '\P{-_POSIXUPPER}', "");
Expect(1, 90, '\P{^-_POSIXUPPER}', "");
Expect(0, 64, '\p{-_POSIXUPPER}', "");
Expect(1, 64, '\p{^-_POSIXUPPER}', "");
Expect(1, 64, '\P{-_POSIXUPPER}', "");
Expect(0, 64, '\P{^-_POSIXUPPER}', "");
Error('\p{-:=Is	PosixUpper}');
Error('\P{-:=Is	PosixUpper}');
Expect(1, 90, '\p{isposixupper}', "");
Expect(0, 90, '\p{^isposixupper}', "");
Expect(0, 90, '\P{isposixupper}', "");
Expect(1, 90, '\P{^isposixupper}', "");
Expect(0, 64, '\p{isposixupper}', "");
Expect(1, 64, '\p{^isposixupper}', "");
Expect(1, 64, '\P{isposixupper}', "");
Expect(0, 64, '\P{^isposixupper}', "");
Expect(1, 90, '\p{ _Isposixupper}', "");
Expect(0, 90, '\p{^ _Isposixupper}', "");
Expect(0, 90, '\P{ _Isposixupper}', "");
Expect(1, 90, '\P{^ _Isposixupper}', "");
Expect(0, 64, '\p{ _Isposixupper}', "");
Expect(1, 64, '\p{^ _Isposixupper}', "");
Expect(1, 64, '\P{ _Isposixupper}', "");
Expect(0, 64, '\P{^ _Isposixupper}', "");
Error('\p{		in	Armenian/a/}');
Error('\P{		in	Armenian/a/}');
Expect(1, 1423, '\p{inarmenian}', "");
Expect(0, 1423, '\p{^inarmenian}', "");
Expect(0, 1423, '\P{inarmenian}', "");
Expect(1, 1423, '\P{^inarmenian}', "");
Expect(0, 1327, '\p{inarmenian}', "");
Expect(1, 1327, '\p{^inarmenian}', "");
Expect(1, 1327, '\P{inarmenian}', "");
Expect(0, 1327, '\P{^inarmenian}', "");
Expect(1, 1423, '\p{_IN Armenian}', "");
Expect(0, 1423, '\p{^_IN Armenian}', "");
Expect(0, 1423, '\P{_IN Armenian}', "");
Expect(1, 1423, '\P{^_IN Armenian}', "");
Expect(0, 1327, '\p{_IN Armenian}', "");
Expect(1, 1327, '\p{^_IN Armenian}', "");
Expect(1, 1327, '\P{_IN Armenian}', "");
Expect(0, 1327, '\P{^_IN Armenian}', "");
Error('\p{/a/__PosixAlpha}');
Error('\P{/a/__PosixAlpha}');
Expect(1, 90, '\p{posixalpha}', "");
Expect(0, 90, '\p{^posixalpha}', "");
Expect(0, 90, '\P{posixalpha}', "");
Expect(1, 90, '\P{^posixalpha}', "");
Expect(0, 64, '\p{posixalpha}', "");
Expect(1, 64, '\p{^posixalpha}', "");
Expect(1, 64, '\P{posixalpha}', "");
Expect(0, 64, '\P{^posixalpha}', "");
Expect(1, 90, '\p{	POSIXALPHA}', "");
Expect(0, 90, '\p{^	POSIXALPHA}', "");
Expect(0, 90, '\P{	POSIXALPHA}', "");
Expect(1, 90, '\P{^	POSIXALPHA}', "");
Expect(0, 64, '\p{	POSIXALPHA}', "");
Expect(1, 64, '\p{^	POSIXALPHA}', "");
Expect(1, 64, '\P{	POSIXALPHA}', "");
Expect(0, 64, '\P{^	POSIXALPHA}', "");
Error('\p{ :=IS	POSIXALPHA}');
Error('\P{ :=IS	POSIXALPHA}');
Expect(1, 90, '\p{isposixalpha}', "");
Expect(0, 90, '\p{^isposixalpha}', "");
Expect(0, 90, '\P{isposixalpha}', "");
Expect(1, 90, '\P{^isposixalpha}', "");
Expect(0, 64, '\p{isposixalpha}', "");
Expect(1, 64, '\p{^isposixalpha}', "");
Expect(1, 64, '\P{isposixalpha}', "");
Expect(0, 64, '\P{^isposixalpha}', "");
Expect(1, 90, '\p{	_Is-POSIXALPHA}', "");
Expect(0, 90, '\p{^	_Is-POSIXALPHA}', "");
Expect(0, 90, '\P{	_Is-POSIXALPHA}', "");
Expect(1, 90, '\P{^	_Is-POSIXALPHA}', "");
Expect(0, 64, '\p{	_Is-POSIXALPHA}', "");
Expect(1, 64, '\p{^	_Is-POSIXALPHA}', "");
Expect(1, 64, '\P{	_Is-POSIXALPHA}', "");
Expect(0, 64, '\P{^	_Is-POSIXALPHA}', "");
Error('\p{/a/  PARAGRAPH_Separator}');
Error('\P{/a/  PARAGRAPH_Separator}');
Expect(1, 8233, '\p{paragraphseparator}', "");
Expect(0, 8233, '\p{^paragraphseparator}', "");
Expect(0, 8233, '\P{paragraphseparator}', "");
Expect(1, 8233, '\P{^paragraphseparator}', "");
Expect(0, 8232, '\p{paragraphseparator}', "");
Expect(1, 8232, '\p{^paragraphseparator}', "");
Expect(1, 8232, '\P{paragraphseparator}', "");
Expect(0, 8232, '\P{^paragraphseparator}', "");
Expect(1, 8233, '\p{-	Paragraph-Separator}', "");
Expect(0, 8233, '\p{^-	Paragraph-Separator}', "");
Expect(0, 8233, '\P{-	Paragraph-Separator}', "");
Expect(1, 8233, '\P{^-	Paragraph-Separator}', "");
Expect(0, 8232, '\p{-	Paragraph-Separator}', "");
Expect(1, 8232, '\p{^-	Paragraph-Separator}', "");
Expect(1, 8232, '\P{-	Paragraph-Separator}', "");
Expect(0, 8232, '\P{^-	Paragraph-Separator}', "");
Error('\p{-	IS:=paragraph_Separator}');
Error('\P{-	IS:=paragraph_Separator}');
Expect(1, 8233, '\p{isparagraphseparator}', "");
Expect(0, 8233, '\p{^isparagraphseparator}', "");
Expect(0, 8233, '\P{isparagraphseparator}', "");
Expect(1, 8233, '\P{^isparagraphseparator}', "");
Expect(0, 8232, '\p{isparagraphseparator}', "");
Expect(1, 8232, '\p{^isparagraphseparator}', "");
Expect(1, 8232, '\P{isparagraphseparator}', "");
Expect(0, 8232, '\P{^isparagraphseparator}', "");
Expect(1, 8233, '\p{-	Is_Paragraph Separator}', "");
Expect(0, 8233, '\p{^-	Is_Paragraph Separator}', "");
Expect(0, 8233, '\P{-	Is_Paragraph Separator}', "");
Expect(1, 8233, '\P{^-	Is_Paragraph Separator}', "");
Expect(0, 8232, '\p{-	Is_Paragraph Separator}', "");
Expect(1, 8232, '\p{^-	Is_Paragraph Separator}', "");
Expect(1, 8232, '\P{-	Is_Paragraph Separator}', "");
Expect(0, 8232, '\P{^-	Is_Paragraph Separator}', "");
Error('\p{_ZP/a/}');
Error('\P{_ZP/a/}');
Expect(1, 8233, '\p{zp}', "");
Expect(0, 8233, '\p{^zp}', "");
Expect(0, 8233, '\P{zp}', "");
Expect(1, 8233, '\P{^zp}', "");
Expect(0, 8232, '\p{zp}', "");
Expect(1, 8232, '\p{^zp}', "");
Expect(1, 8232, '\P{zp}', "");
Expect(0, 8232, '\P{^zp}', "");
Expect(1, 8233, '\p{ -Zp}', "");
Expect(0, 8233, '\p{^ -Zp}', "");
Expect(0, 8233, '\P{ -Zp}', "");
Expect(1, 8233, '\P{^ -Zp}', "");
Expect(0, 8232, '\p{ -Zp}', "");
Expect(1, 8232, '\p{^ -Zp}', "");
Expect(1, 8232, '\P{ -Zp}', "");
Expect(0, 8232, '\P{^ -Zp}', "");
Error('\p{_Is:=zp}');
Error('\P{_Is:=zp}');
Expect(1, 8233, '\p{iszp}', "");
Expect(0, 8233, '\p{^iszp}', "");
Expect(0, 8233, '\P{iszp}', "");
Expect(1, 8233, '\P{^iszp}', "");
Expect(0, 8232, '\p{iszp}', "");
Expect(1, 8232, '\p{^iszp}', "");
Expect(1, 8232, '\P{iszp}', "");
Expect(0, 8232, '\P{^iszp}', "");
Expect(1, 8233, '\p{is_Zp}', "");
Expect(0, 8233, '\p{^is_Zp}', "");
Expect(0, 8233, '\P{is_Zp}', "");
Expect(1, 8233, '\P{^is_Zp}', "");
Expect(0, 8232, '\p{is_Zp}', "");
Expect(1, 8232, '\p{^is_Zp}', "");
Expect(1, 8232, '\P{is_Zp}', "");
Expect(0, 8232, '\P{^is_Zp}', "");
Error('\p{__PHAGS:=Pa}');
Error('\P{__PHAGS:=Pa}');
Expect(1, 43127, '\p{phagspa}', "");
Expect(0, 43127, '\p{^phagspa}', "");
Expect(0, 43127, '\P{phagspa}', "");
Expect(1, 43127, '\P{^phagspa}', "");
Expect(0, 43071, '\p{phagspa}', "");
Expect(1, 43071, '\p{^phagspa}', "");
Expect(1, 43071, '\P{phagspa}', "");
Expect(0, 43071, '\P{^phagspa}', "");
Expect(1, 43127, '\p{-Phags Pa}', "");
Expect(0, 43127, '\p{^-Phags Pa}', "");
Expect(0, 43127, '\P{-Phags Pa}', "");
Expect(1, 43127, '\P{^-Phags Pa}', "");
Expect(0, 43071, '\p{-Phags Pa}', "");
Expect(1, 43071, '\p{^-Phags Pa}', "");
Expect(1, 43071, '\P{-Phags Pa}', "");
Expect(0, 43071, '\P{^-Phags Pa}', "");
Error('\p{_:=IsPHAGS Pa}');
Error('\P{_:=IsPHAGS Pa}');
Expect(1, 43127, '\p{isphagspa}', "");
Expect(0, 43127, '\p{^isphagspa}', "");
Expect(0, 43127, '\P{isphagspa}', "");
Expect(1, 43127, '\P{^isphagspa}', "");
Expect(0, 43071, '\p{isphagspa}', "");
Expect(1, 43071, '\p{^isphagspa}', "");
Expect(1, 43071, '\P{isphagspa}', "");
Expect(0, 43071, '\P{^isphagspa}', "");
Expect(1, 43127, '\p{ 	Is PHAGS_Pa}', "");
Expect(0, 43127, '\p{^ 	Is PHAGS_Pa}', "");
Expect(0, 43127, '\P{ 	Is PHAGS_Pa}', "");
Expect(1, 43127, '\P{^ 	Is PHAGS_Pa}', "");
Expect(0, 43071, '\p{ 	Is PHAGS_Pa}', "");
Expect(1, 43071, '\p{^ 	Is PHAGS_Pa}', "");
Expect(1, 43071, '\P{ 	Is PHAGS_Pa}', "");
Expect(0, 43071, '\P{^ 	Is PHAGS_Pa}', "");
Error('\p{:=-Phag}');
Error('\P{:=-Phag}');
Expect(1, 43127, '\p{phag}', "");
Expect(0, 43127, '\p{^phag}', "");
Expect(0, 43127, '\P{phag}', "");
Expect(1, 43127, '\P{^phag}', "");
Expect(0, 43071, '\p{phag}', "");
Expect(1, 43071, '\p{^phag}', "");
Expect(1, 43071, '\P{phag}', "");
Expect(0, 43071, '\P{^phag}', "");
Expect(1, 43127, '\p{_Phag}', "");
Expect(0, 43127, '\p{^_Phag}', "");
Expect(0, 43127, '\P{_Phag}', "");
Expect(1, 43127, '\P{^_Phag}', "");
Expect(0, 43071, '\p{_Phag}', "");
Expect(1, 43071, '\p{^_Phag}', "");
Expect(1, 43071, '\P{_Phag}', "");
Expect(0, 43071, '\P{^_Phag}', "");
Error('\p{ isphag:=}');
Error('\P{ isphag:=}');
Expect(1, 43127, '\p{isphag}', "");
Expect(0, 43127, '\p{^isphag}', "");
Expect(0, 43127, '\P{isphag}', "");
Expect(1, 43127, '\P{^isphag}', "");
Expect(0, 43071, '\p{isphag}', "");
Expect(1, 43071, '\p{^isphag}', "");
Expect(1, 43071, '\P{isphag}', "");
Expect(0, 43071, '\P{^isphag}', "");
Expect(1, 43127, '\p{_ Is Phag}', "");
Expect(0, 43127, '\p{^_ Is Phag}', "");
Expect(0, 43127, '\P{_ Is Phag}', "");
Expect(1, 43127, '\P{^_ Is Phag}', "");
Expect(0, 43071, '\p{_ Is Phag}', "");
Expect(1, 43071, '\p{^_ Is Phag}', "");
Expect(1, 43071, '\P{_ Is Phag}', "");
Expect(0, 43071, '\P{^_ Is Phag}', "");
Error('\p{:=	 LETTER	NUMBER}');
Error('\P{:=	 LETTER	NUMBER}');
Expect(1, 5872, '\p{letternumber}', "");
Expect(0, 5872, '\p{^letternumber}', "");
Expect(0, 5872, '\P{letternumber}', "");
Expect(1, 5872, '\P{^letternumber}', "");
Expect(0, 5869, '\p{letternumber}', "");
Expect(1, 5869, '\p{^letternumber}', "");
Expect(1, 5869, '\P{letternumber}', "");
Expect(0, 5869, '\P{^letternumber}', "");
Expect(1, 5872, '\p{ -Letter-Number}', "");
Expect(0, 5872, '\p{^ -Letter-Number}', "");
Expect(0, 5872, '\P{ -Letter-Number}', "");
Expect(1, 5872, '\P{^ -Letter-Number}', "");
Expect(0, 5869, '\p{ -Letter-Number}', "");
Expect(1, 5869, '\p{^ -Letter-Number}', "");
Expect(1, 5869, '\P{ -Letter-Number}', "");
Expect(0, 5869, '\P{^ -Letter-Number}', "");
Error('\p{-:=IS-LetterNumber}');
Error('\P{-:=IS-LetterNumber}');
Expect(1, 5872, '\p{isletternumber}', "");
Expect(0, 5872, '\p{^isletternumber}', "");
Expect(0, 5872, '\P{isletternumber}', "");
Expect(1, 5872, '\P{^isletternumber}', "");
Expect(0, 5869, '\p{isletternumber}', "");
Expect(1, 5869, '\p{^isletternumber}', "");
Expect(1, 5869, '\P{isletternumber}', "");
Expect(0, 5869, '\P{^isletternumber}', "");
Expect(1, 5872, '\p{-	is-Letter Number}', "");
Expect(0, 5872, '\p{^-	is-Letter Number}', "");
Expect(0, 5872, '\P{-	is-Letter Number}', "");
Expect(1, 5872, '\P{^-	is-Letter Number}', "");
Expect(0, 5869, '\p{-	is-Letter Number}', "");
Expect(1, 5869, '\p{^-	is-Letter Number}', "");
Expect(1, 5869, '\P{-	is-Letter Number}', "");
Expect(0, 5869, '\P{^-	is-Letter Number}', "");
Error('\p{ /a/Nl}');
Error('\P{ /a/Nl}');
Expect(1, 5872, '\p{nl}', "");
Expect(0, 5872, '\p{^nl}', "");
Expect(0, 5872, '\P{nl}', "");
Expect(1, 5872, '\P{^nl}', "");
Expect(0, 5869, '\p{nl}', "");
Expect(1, 5869, '\p{^nl}', "");
Expect(1, 5869, '\P{nl}', "");
Expect(0, 5869, '\P{^nl}', "");
Expect(1, 5872, '\p{-Nl}', "");
Expect(0, 5872, '\p{^-Nl}', "");
Expect(0, 5872, '\P{-Nl}', "");
Expect(1, 5872, '\P{^-Nl}', "");
Expect(0, 5869, '\p{-Nl}', "");
Expect(1, 5869, '\p{^-Nl}', "");
Expect(1, 5869, '\P{-Nl}', "");
Expect(0, 5869, '\P{^-Nl}', "");
Error('\p{-/a/is NL}');
Error('\P{-/a/is NL}');
Expect(1, 5872, '\p{isnl}', "");
Expect(0, 5872, '\p{^isnl}', "");
Expect(0, 5872, '\P{isnl}', "");
Expect(1, 5872, '\P{^isnl}', "");
Expect(0, 5869, '\p{isnl}', "");
Expect(1, 5869, '\p{^isnl}', "");
Expect(1, 5869, '\P{isnl}', "");
Expect(0, 5869, '\P{^isnl}', "");
Expect(1, 5872, '\p{	-Is nl}', "");
Expect(0, 5872, '\p{^	-Is nl}', "");
Expect(0, 5872, '\P{	-Is nl}', "");
Expect(1, 5872, '\P{^	-Is nl}', "");
Expect(0, 5869, '\p{	-Is nl}', "");
Expect(1, 5869, '\p{^	-Is nl}', "");
Expect(1, 5869, '\P{	-Is nl}', "");
Expect(0, 5869, '\P{^	-Is nl}', "");
Error('\p{	NUMBERFORMS:=}');
Error('\P{	NUMBERFORMS:=}');
Expect(1, 8591, '\p{numberforms}', "");
Expect(0, 8591, '\p{^numberforms}', "");
Expect(0, 8591, '\P{numberforms}', "");
Expect(1, 8591, '\P{^numberforms}', "");
Expect(0, 8527, '\p{numberforms}', "");
Expect(1, 8527, '\p{^numberforms}', "");
Expect(1, 8527, '\P{numberforms}', "");
Expect(0, 8527, '\P{^numberforms}', "");
Expect(1, 8591, '\p{--NUMBER_Forms}', "");
Expect(0, 8591, '\p{^--NUMBER_Forms}', "");
Expect(0, 8591, '\P{--NUMBER_Forms}', "");
Expect(1, 8591, '\P{^--NUMBER_Forms}', "");
Expect(0, 8527, '\p{--NUMBER_Forms}', "");
Expect(1, 8527, '\p{^--NUMBER_Forms}', "");
Expect(1, 8527, '\P{--NUMBER_Forms}', "");
Expect(0, 8527, '\P{^--NUMBER_Forms}', "");
Error('\p{-is/a/NUMBER-Forms}');
Error('\P{-is/a/NUMBER-Forms}');
Expect(1, 8591, '\p{isnumberforms}', "");
Expect(0, 8591, '\p{^isnumberforms}', "");
Expect(0, 8591, '\P{isnumberforms}', "");
Expect(1, 8591, '\P{^isnumberforms}', "");
Expect(0, 8527, '\p{isnumberforms}', "");
Expect(1, 8527, '\p{^isnumberforms}', "");
Expect(1, 8527, '\P{isnumberforms}', "");
Expect(0, 8527, '\P{^isnumberforms}', "");
Expect(1, 8591, '\p{-_IS numberForms}', "");
Expect(0, 8591, '\p{^-_IS numberForms}', "");
Expect(0, 8591, '\P{-_IS numberForms}', "");
Expect(1, 8591, '\P{^-_IS numberForms}', "");
Expect(0, 8527, '\p{-_IS numberForms}', "");
Expect(1, 8527, '\p{^-_IS numberForms}', "");
Expect(1, 8527, '\P{-_IS numberForms}', "");
Expect(0, 8527, '\P{^-_IS numberForms}', "");
Error('\p{	IN/a/number_forms}');
Error('\P{	IN/a/number_forms}');
Expect(1, 8591, '\p{innumberforms}', "");
Expect(0, 8591, '\p{^innumberforms}', "");
Expect(0, 8591, '\P{innumberforms}', "");
Expect(1, 8591, '\P{^innumberforms}', "");
Expect(0, 8527, '\p{innumberforms}', "");
Expect(1, 8527, '\p{^innumberforms}', "");
Expect(1, 8527, '\P{innumberforms}', "");
Expect(0, 8527, '\P{^innumberforms}', "");
Expect(1, 8591, '\p{- InnumberForms}', "");
Expect(0, 8591, '\p{^- InnumberForms}', "");
Expect(0, 8591, '\P{- InnumberForms}', "");
Expect(1, 8591, '\P{^- InnumberForms}', "");
Expect(0, 8527, '\p{- InnumberForms}', "");
Expect(1, 8527, '\p{^- InnumberForms}', "");
Expect(1, 8527, '\P{- InnumberForms}', "");
Expect(0, 8527, '\P{^- InnumberForms}', "");
Error('\p{	:=alnum}');
Error('\P{	:=alnum}');
Expect(1, 57, '\p{alnum}', "");
Expect(0, 57, '\p{^alnum}', "");
Expect(0, 57, '\P{alnum}', "");
Expect(1, 57, '\P{^alnum}', "");
Expect(0, 47, '\p{alnum}', "");
Expect(1, 47, '\p{^alnum}', "");
Expect(1, 47, '\P{alnum}', "");
Expect(0, 47, '\P{^alnum}', "");
Expect(1, 57, '\p{-_Alnum}', "");
Expect(0, 57, '\p{^-_Alnum}', "");
Expect(0, 57, '\P{-_Alnum}', "");
Expect(1, 57, '\P{^-_Alnum}', "");
Expect(0, 47, '\p{-_Alnum}', "");
Expect(1, 47, '\p{^-_Alnum}', "");
Expect(1, 47, '\P{-_Alnum}', "");
Expect(0, 47, '\P{^-_Alnum}', "");
Error('\p{	:=is ALNUM}');
Error('\P{	:=is ALNUM}');
Expect(1, 57, '\p{isalnum}', "");
Expect(0, 57, '\p{^isalnum}', "");
Expect(0, 57, '\P{isalnum}', "");
Expect(1, 57, '\P{^isalnum}', "");
Expect(0, 47, '\p{isalnum}', "");
Expect(1, 47, '\p{^isalnum}', "");
Expect(1, 47, '\P{isalnum}', "");
Expect(0, 47, '\P{^isalnum}', "");
Expect(1, 57, '\p{	_Is ALNUM}', "");
Expect(0, 57, '\p{^	_Is ALNUM}', "");
Expect(0, 57, '\P{	_Is ALNUM}', "");
Expect(1, 57, '\P{^	_Is ALNUM}', "");
Expect(0, 47, '\p{	_Is ALNUM}', "");
Expect(1, 47, '\p{^	_Is ALNUM}', "");
Expect(1, 47, '\P{	_Is ALNUM}', "");
Expect(0, 47, '\P{^	_Is ALNUM}', "");
Error('\p{/a/_-IN_Sundanese}');
Error('\P{/a/_-IN_Sundanese}');
Expect(1, 7103, '\p{insundanese}', "");
Expect(0, 7103, '\p{^insundanese}', "");
Expect(0, 7103, '\P{insundanese}', "");
Expect(1, 7103, '\P{^insundanese}', "");
Expect(0, 7039, '\p{insundanese}', "");
Expect(1, 7039, '\p{^insundanese}', "");
Expect(1, 7039, '\P{insundanese}', "");
Expect(0, 7039, '\P{^insundanese}', "");
Expect(1, 7103, '\p{--IN	SUNDANESE}', "");
Expect(0, 7103, '\p{^--IN	SUNDANESE}', "");
Expect(0, 7103, '\P{--IN	SUNDANESE}', "");
Expect(1, 7103, '\P{^--IN	SUNDANESE}', "");
Expect(0, 7039, '\p{--IN	SUNDANESE}', "");
Expect(1, 7039, '\p{^--IN	SUNDANESE}', "");
Expect(1, 7039, '\P{--IN	SUNDANESE}', "");
Expect(0, 7039, '\P{^--IN	SUNDANESE}', "");
Error('\p{_/a/ArabicpresentationFORMS_B}');
Error('\P{_/a/ArabicpresentationFORMS_B}');
Expect(1, 65279, '\p{arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^arabicpresentationformsb}', "");
Expect(0, 65279, '\P{arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^arabicpresentationformsb}', "");
Expect(0, 65135, '\p{arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^arabicpresentationformsb}', "");
Expect(1, 65135, '\P{arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^arabicpresentationformsb}', "");
Expect(1, 65279, '\p{	Arabic-Presentation_formsB}', "");
Expect(0, 65279, '\p{^	Arabic-Presentation_formsB}', "");
Expect(0, 65279, '\P{	Arabic-Presentation_formsB}', "");
Expect(1, 65279, '\P{^	Arabic-Presentation_formsB}', "");
Expect(0, 65135, '\p{	Arabic-Presentation_formsB}', "");
Expect(1, 65135, '\p{^	Arabic-Presentation_formsB}', "");
Expect(1, 65135, '\P{	Arabic-Presentation_formsB}', "");
Expect(0, 65135, '\P{^	Arabic-Presentation_formsB}', "");
Error('\p{--is:=ARABIC	PRESENTATION-Forms B}');
Error('\P{--is:=ARABIC	PRESENTATION-Forms B}');
Expect(1, 65279, '\p{isarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^isarabicpresentationformsb}', "");
Expect(0, 65279, '\P{isarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^isarabicpresentationformsb}', "");
Expect(0, 65135, '\p{isarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^isarabicpresentationformsb}', "");
Expect(1, 65135, '\P{isarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^isarabicpresentationformsb}', "");
Expect(1, 65279, '\p{	-Is Arabic-presentation_forms-b}', "");
Expect(0, 65279, '\p{^	-Is Arabic-presentation_forms-b}', "");
Expect(0, 65279, '\P{	-Is Arabic-presentation_forms-b}', "");
Expect(1, 65279, '\P{^	-Is Arabic-presentation_forms-b}', "");
Expect(0, 65135, '\p{	-Is Arabic-presentation_forms-b}', "");
Expect(1, 65135, '\p{^	-Is Arabic-presentation_forms-b}', "");
Expect(1, 65135, '\P{	-Is Arabic-presentation_forms-b}', "");
Expect(0, 65135, '\P{^	-Is Arabic-presentation_forms-b}', "");
Error('\p{ -In ARABIC	presentation	FormsB:=}');
Error('\P{ -In ARABIC	presentation	FormsB:=}');
Expect(1, 65279, '\p{inarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^inarabicpresentationformsb}', "");
Expect(0, 65279, '\P{inarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^inarabicpresentationformsb}', "");
Expect(0, 65135, '\p{inarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^inarabicpresentationformsb}', "");
Expect(1, 65135, '\P{inarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^inarabicpresentationformsb}', "");
Expect(1, 65279, '\p{__IN	ARABIC presentation	Forms B}', "");
Expect(0, 65279, '\p{^__IN	ARABIC presentation	Forms B}', "");
Expect(0, 65279, '\P{__IN	ARABIC presentation	Forms B}', "");
Expect(1, 65279, '\P{^__IN	ARABIC presentation	Forms B}', "");
Expect(0, 65135, '\p{__IN	ARABIC presentation	Forms B}', "");
Expect(1, 65135, '\p{^__IN	ARABIC presentation	Forms B}', "");
Expect(1, 65135, '\P{__IN	ARABIC presentation	Forms B}', "");
Expect(0, 65135, '\P{^__IN	ARABIC presentation	Forms B}', "");
Error('\p{-:=rumi	Numeralsymbols}');
Error('\P{-:=rumi	Numeralsymbols}');
Expect(1, 69247, '\p{ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^ruminumeralsymbols}', "");
Expect(0, 69247, '\P{ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^ruminumeralsymbols}', "");
Expect(0, 69215, '\p{ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^ruminumeralsymbols}', "");
Expect(1, 69215, '\P{ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^ruminumeralsymbols}', "");
Expect(1, 69247, '\p{	-Rumi Numeral SYMBOLS}', "");
Expect(0, 69247, '\p{^	-Rumi Numeral SYMBOLS}', "");
Expect(0, 69247, '\P{	-Rumi Numeral SYMBOLS}', "");
Expect(1, 69247, '\P{^	-Rumi Numeral SYMBOLS}', "");
Expect(0, 69215, '\p{	-Rumi Numeral SYMBOLS}', "");
Expect(1, 69215, '\p{^	-Rumi Numeral SYMBOLS}', "");
Expect(1, 69215, '\P{	-Rumi Numeral SYMBOLS}', "");
Expect(0, 69215, '\P{^	-Rumi Numeral SYMBOLS}', "");
Error('\p{-Is	ruminumeral:=Symbols}');
Error('\P{-Is	ruminumeral:=Symbols}');
Expect(1, 69247, '\p{isruminumeralsymbols}', "");
Expect(0, 69247, '\p{^isruminumeralsymbols}', "");
Expect(0, 69247, '\P{isruminumeralsymbols}', "");
Expect(1, 69247, '\P{^isruminumeralsymbols}', "");
Expect(0, 69215, '\p{isruminumeralsymbols}', "");
Expect(1, 69215, '\p{^isruminumeralsymbols}', "");
Expect(1, 69215, '\P{isruminumeralsymbols}', "");
Expect(0, 69215, '\P{^isruminumeralsymbols}', "");
Expect(1, 69247, '\p{_ Is_rumi	numeralsymbols}', "");
Expect(0, 69247, '\p{^_ Is_rumi	numeralsymbols}', "");
Expect(0, 69247, '\P{_ Is_rumi	numeralsymbols}', "");
Expect(1, 69247, '\P{^_ Is_rumi	numeralsymbols}', "");
Expect(0, 69215, '\p{_ Is_rumi	numeralsymbols}', "");
Expect(1, 69215, '\p{^_ Is_rumi	numeralsymbols}', "");
Expect(1, 69215, '\P{_ Is_rumi	numeralsymbols}', "");
Expect(0, 69215, '\P{^_ Is_rumi	numeralsymbols}', "");
Error('\p{ in-Rumi_NUMERAL/a/Symbols}');
Error('\P{ in-Rumi_NUMERAL/a/Symbols}');
Expect(1, 69247, '\p{inruminumeralsymbols}', "");
Expect(0, 69247, '\p{^inruminumeralsymbols}', "");
Expect(0, 69247, '\P{inruminumeralsymbols}', "");
Expect(1, 69247, '\P{^inruminumeralsymbols}', "");
Expect(0, 69215, '\p{inruminumeralsymbols}', "");
Expect(1, 69215, '\p{^inruminumeralsymbols}', "");
Expect(1, 69215, '\P{inruminumeralsymbols}', "");
Expect(0, 69215, '\P{^inruminumeralsymbols}', "");
Expect(1, 69247, '\p{	_IN	Rumi numeralSymbols}', "");
Expect(0, 69247, '\p{^	_IN	Rumi numeralSymbols}', "");
Expect(0, 69247, '\P{	_IN	Rumi numeralSymbols}', "");
Expect(1, 69247, '\P{^	_IN	Rumi numeralSymbols}', "");
Expect(0, 69215, '\p{	_IN	Rumi numeralSymbols}', "");
Expect(1, 69215, '\p{^	_IN	Rumi numeralSymbols}', "");
Expect(1, 69215, '\P{	_IN	Rumi numeralSymbols}', "");
Expect(0, 69215, '\P{^	_IN	Rumi numeralSymbols}', "");
Error('\p{-_common_IndicNumber/a/Forms}');
Error('\P{-_common_IndicNumber/a/Forms}');
Expect(1, 43071, '\p{commonindicnumberforms}', "");
Expect(0, 43071, '\p{^commonindicnumberforms}', "");
Expect(0, 43071, '\P{commonindicnumberforms}', "");
Expect(1, 43071, '\P{^commonindicnumberforms}', "");
Expect(0, 43055, '\p{commonindicnumberforms}', "");
Expect(1, 43055, '\p{^commonindicnumberforms}', "");
Expect(1, 43055, '\P{commonindicnumberforms}', "");
Expect(0, 43055, '\P{^commonindicnumberforms}', "");
Expect(1, 43071, '\p{-	CommonIndic-Numberforms}', "");
Expect(0, 43071, '\p{^-	CommonIndic-Numberforms}', "");
Expect(0, 43071, '\P{-	CommonIndic-Numberforms}', "");
Expect(1, 43071, '\P{^-	CommonIndic-Numberforms}', "");
Expect(0, 43055, '\p{-	CommonIndic-Numberforms}', "");
Expect(1, 43055, '\p{^-	CommonIndic-Numberforms}', "");
Expect(1, 43055, '\P{-	CommonIndic-Numberforms}', "");
Expect(0, 43055, '\P{^-	CommonIndic-Numberforms}', "");
Error('\p{	-Is:=common_Indic-NUMBER	Forms}');
Error('\P{	-Is:=common_Indic-NUMBER	Forms}');
Expect(1, 43071, '\p{iscommonindicnumberforms}', "");
Expect(0, 43071, '\p{^iscommonindicnumberforms}', "");
Expect(0, 43071, '\P{iscommonindicnumberforms}', "");
Expect(1, 43071, '\P{^iscommonindicnumberforms}', "");
Expect(0, 43055, '\p{iscommonindicnumberforms}', "");
Expect(1, 43055, '\p{^iscommonindicnumberforms}', "");
Expect(1, 43055, '\P{iscommonindicnumberforms}', "");
Expect(0, 43055, '\P{^iscommonindicnumberforms}', "");
Expect(1, 43071, '\p{_	Is	Common-INDIC Number FORMS}', "");
Expect(0, 43071, '\p{^_	Is	Common-INDIC Number FORMS}', "");
Expect(0, 43071, '\P{_	Is	Common-INDIC Number FORMS}', "");
Expect(1, 43071, '\P{^_	Is	Common-INDIC Number FORMS}', "");
Expect(0, 43055, '\p{_	Is	Common-INDIC Number FORMS}', "");
Expect(1, 43055, '\p{^_	Is	Common-INDIC Number FORMS}', "");
Expect(1, 43055, '\P{_	Is	Common-INDIC Number FORMS}', "");
Expect(0, 43055, '\P{^_	Is	Common-INDIC Number FORMS}', "");
Error('\p{ in Common	INDIC:=number Forms}');
Error('\P{ in Common	INDIC:=number Forms}');
Expect(1, 43071, '\p{incommonindicnumberforms}', "");
Expect(0, 43071, '\p{^incommonindicnumberforms}', "");
Expect(0, 43071, '\P{incommonindicnumberforms}', "");
Expect(1, 43071, '\P{^incommonindicnumberforms}', "");
Expect(0, 43055, '\p{incommonindicnumberforms}', "");
Expect(1, 43055, '\p{^incommonindicnumberforms}', "");
Expect(1, 43055, '\P{incommonindicnumberforms}', "");
Expect(0, 43055, '\P{^incommonindicnumberforms}', "");
Expect(1, 43071, '\p{--In-common-Indic_NUMBERForms}', "");
Expect(0, 43071, '\p{^--In-common-Indic_NUMBERForms}', "");
Expect(0, 43071, '\P{--In-common-Indic_NUMBERForms}', "");
Expect(1, 43071, '\P{^--In-common-Indic_NUMBERForms}', "");
Expect(0, 43055, '\p{--In-common-Indic_NUMBERForms}', "");
Expect(1, 43055, '\p{^--In-common-Indic_NUMBERForms}', "");
Expect(1, 43055, '\P{--In-common-Indic_NUMBERForms}', "");
Expect(0, 43055, '\P{^--In-common-Indic_NUMBERForms}', "");
Error('\p{:=Alpha}');
Error('\P{:=Alpha}');
Expect(1, 90, '\p{alpha}', "");
Expect(0, 90, '\p{^alpha}', "");
Expect(0, 90, '\P{alpha}', "");
Expect(1, 90, '\P{^alpha}', "");
Expect(0, 64, '\p{alpha}', "");
Expect(1, 64, '\p{^alpha}', "");
Expect(1, 64, '\P{alpha}', "");
Expect(0, 64, '\P{^alpha}', "");
Expect(1, 90, '\p{-alpha}', "");
Expect(0, 90, '\p{^-alpha}', "");
Expect(0, 90, '\P{-alpha}', "");
Expect(1, 90, '\P{^-alpha}', "");
Expect(0, 64, '\p{-alpha}', "");
Expect(1, 64, '\p{^-alpha}', "");
Expect(1, 64, '\P{-alpha}', "");
Expect(0, 64, '\P{^-alpha}', "");
Error('\p{_/a/IsAlpha}');
Error('\P{_/a/IsAlpha}');
Expect(1, 90, '\p{isalpha}', "");
Expect(0, 90, '\p{^isalpha}', "");
Expect(0, 90, '\P{isalpha}', "");
Expect(1, 90, '\P{^isalpha}', "");
Expect(0, 64, '\p{isalpha}', "");
Expect(1, 64, '\p{^isalpha}', "");
Expect(1, 64, '\P{isalpha}', "");
Expect(0, 64, '\P{^isalpha}', "");
Expect(1, 90, '\p{- Is Alpha}', "");
Expect(0, 90, '\p{^- Is Alpha}', "");
Expect(0, 90, '\P{- Is Alpha}', "");
Expect(1, 90, '\P{^- Is Alpha}', "");
Expect(0, 64, '\p{- Is Alpha}', "");
Expect(1, 64, '\p{^- Is Alpha}', "");
Expect(1, 64, '\P{- Is Alpha}', "");
Expect(0, 64, '\P{^- Is Alpha}', "");
Error('\p{:=	-Alphabetic}');
Error('\P{:=	-Alphabetic}');
Expect(1, 90, '\p{alphabetic}', "");
Expect(0, 90, '\p{^alphabetic}', "");
Expect(0, 90, '\P{alphabetic}', "");
Expect(1, 90, '\P{^alphabetic}', "");
Expect(0, 64, '\p{alphabetic}', "");
Expect(1, 64, '\p{^alphabetic}', "");
Expect(1, 64, '\P{alphabetic}', "");
Expect(0, 64, '\P{^alphabetic}', "");
Expect(1, 90, '\p{	-alphabetic}', "");
Expect(0, 90, '\p{^	-alphabetic}', "");
Expect(0, 90, '\P{	-alphabetic}', "");
Expect(1, 90, '\P{^	-alphabetic}', "");
Expect(0, 64, '\p{	-alphabetic}', "");
Expect(1, 64, '\p{^	-alphabetic}', "");
Expect(1, 64, '\P{	-alphabetic}', "");
Expect(0, 64, '\P{^	-alphabetic}', "");
Error('\p{	:=isalphabetic}');
Error('\P{	:=isalphabetic}');
Expect(1, 90, '\p{isalphabetic}', "");
Expect(0, 90, '\p{^isalphabetic}', "");
Expect(0, 90, '\P{isalphabetic}', "");
Expect(1, 90, '\P{^isalphabetic}', "");
Expect(0, 64, '\p{isalphabetic}', "");
Expect(1, 64, '\p{^isalphabetic}', "");
Expect(1, 64, '\P{isalphabetic}', "");
Expect(0, 64, '\P{^isalphabetic}', "");
Expect(1, 90, '\p{is	alphabetic}', "");
Expect(0, 90, '\p{^is	alphabetic}', "");
Expect(0, 90, '\P{is	alphabetic}', "");
Expect(1, 90, '\P{^is	alphabetic}', "");
Expect(0, 64, '\p{is	alphabetic}', "");
Expect(1, 64, '\p{^is	alphabetic}', "");
Expect(1, 64, '\P{is	alphabetic}', "");
Expect(0, 64, '\P{^is	alphabetic}', "");
Error('\p{__InEgyptian hieroglyphs/a/}');
Error('\P{__InEgyptian hieroglyphs/a/}');
Expect(1, 78895, '\p{inegyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^inegyptianhieroglyphs}', "");
Expect(0, 78895, '\P{inegyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^inegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{inegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^inegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{inegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^inegyptianhieroglyphs}', "");
Expect(1, 78895, '\p{ -INEgyptianHieroglyphs}', "");
Expect(0, 78895, '\p{^ -INEgyptianHieroglyphs}', "");
Expect(0, 78895, '\P{ -INEgyptianHieroglyphs}', "");
Expect(1, 78895, '\P{^ -INEgyptianHieroglyphs}', "");
Expect(0, 77823, '\p{ -INEgyptianHieroglyphs}', "");
Expect(1, 77823, '\p{^ -INEgyptianHieroglyphs}', "");
Expect(1, 77823, '\P{ -INEgyptianHieroglyphs}', "");
Expect(0, 77823, '\P{^ -INEgyptianHieroglyphs}', "");
Error('\p{/a/In Myanmar}');
Error('\P{/a/In Myanmar}');
Expect(1, 4255, '\p{inmyanmar}', "");
Expect(0, 4255, '\p{^inmyanmar}', "");
Expect(0, 4255, '\P{inmyanmar}', "");
Expect(1, 4255, '\P{^inmyanmar}', "");
Expect(0, 4095, '\p{inmyanmar}', "");
Expect(1, 4095, '\p{^inmyanmar}', "");
Expect(1, 4095, '\P{inmyanmar}', "");
Expect(0, 4095, '\P{^inmyanmar}', "");
Expect(1, 4255, '\p{ 	IN MYANMAR}', "");
Expect(0, 4255, '\p{^ 	IN MYANMAR}', "");
Expect(0, 4255, '\P{ 	IN MYANMAR}', "");
Expect(1, 4255, '\P{^ 	IN MYANMAR}', "");
Expect(0, 4095, '\p{ 	IN MYANMAR}', "");
Expect(1, 4095, '\p{^ 	IN MYANMAR}', "");
Expect(1, 4095, '\P{ 	IN MYANMAR}', "");
Expect(0, 4095, '\P{^ 	IN MYANMAR}', "");
Error('\p{- Greek/a/Extended}');
Error('\P{- Greek/a/Extended}');
Expect(1, 8191, '\p{greekextended}', "");
Expect(0, 8191, '\p{^greekextended}', "");
Expect(0, 8191, '\P{greekextended}', "");
Expect(1, 8191, '\P{^greekextended}', "");
Expect(0, 7935, '\p{greekextended}', "");
Expect(1, 7935, '\p{^greekextended}', "");
Expect(1, 7935, '\P{greekextended}', "");
Expect(0, 7935, '\P{^greekextended}', "");
Expect(1, 8191, '\p{- GREEK_EXTENDED}', "");
Expect(0, 8191, '\p{^- GREEK_EXTENDED}', "");
Expect(0, 8191, '\P{- GREEK_EXTENDED}', "");
Expect(1, 8191, '\P{^- GREEK_EXTENDED}', "");
Expect(0, 7935, '\p{- GREEK_EXTENDED}', "");
Expect(1, 7935, '\p{^- GREEK_EXTENDED}', "");
Expect(1, 7935, '\P{- GREEK_EXTENDED}', "");
Expect(0, 7935, '\P{^- GREEK_EXTENDED}', "");
Error('\p{ Is greek/a/EXTENDED}');
Error('\P{ Is greek/a/EXTENDED}');
Expect(1, 8191, '\p{isgreekextended}', "");
Expect(0, 8191, '\p{^isgreekextended}', "");
Expect(0, 8191, '\P{isgreekextended}', "");
Expect(1, 8191, '\P{^isgreekextended}', "");
Expect(0, 7935, '\p{isgreekextended}', "");
Expect(1, 7935, '\p{^isgreekextended}', "");
Expect(1, 7935, '\P{isgreekextended}', "");
Expect(0, 7935, '\P{^isgreekextended}', "");
Expect(1, 8191, '\p{	-is	GREEK_EXTENDED}', "");
Expect(0, 8191, '\p{^	-is	GREEK_EXTENDED}', "");
Expect(0, 8191, '\P{	-is	GREEK_EXTENDED}', "");
Expect(1, 8191, '\P{^	-is	GREEK_EXTENDED}', "");
Expect(0, 7935, '\p{	-is	GREEK_EXTENDED}', "");
Expect(1, 7935, '\p{^	-is	GREEK_EXTENDED}', "");
Expect(1, 7935, '\P{	-is	GREEK_EXTENDED}', "");
Expect(0, 7935, '\P{^	-is	GREEK_EXTENDED}', "");
Error('\p{-/a/In greek_extended}');
Error('\P{-/a/In greek_extended}');
Expect(1, 8191, '\p{ingreekextended}', "");
Expect(0, 8191, '\p{^ingreekextended}', "");
Expect(0, 8191, '\P{ingreekextended}', "");
Expect(1, 8191, '\P{^ingreekextended}', "");
Expect(0, 7935, '\p{ingreekextended}', "");
Expect(1, 7935, '\p{^ingreekextended}', "");
Expect(1, 7935, '\P{ingreekextended}', "");
Expect(0, 7935, '\P{^ingreekextended}', "");
Expect(1, 8191, '\p{ 	in	GreekEXTENDED}', "");
Expect(0, 8191, '\p{^ 	in	GreekEXTENDED}', "");
Expect(0, 8191, '\P{ 	in	GreekEXTENDED}', "");
Expect(1, 8191, '\P{^ 	in	GreekEXTENDED}', "");
Expect(0, 7935, '\p{ 	in	GreekEXTENDED}', "");
Expect(1, 7935, '\p{^ 	in	GreekEXTENDED}', "");
Expect(1, 7935, '\P{ 	in	GreekEXTENDED}', "");
Expect(0, 7935, '\P{^ 	in	GreekEXTENDED}', "");
Error('\p{	:=radical}');
Error('\P{	:=radical}');
Expect(1, 11929, '\p{radical}', "");
Expect(0, 11929, '\p{^radical}', "");
Expect(0, 11929, '\P{radical}', "");
Expect(1, 11929, '\P{^radical}', "");
Expect(0, 11903, '\p{radical}', "");
Expect(1, 11903, '\p{^radical}', "");
Expect(1, 11903, '\P{radical}', "");
Expect(0, 11903, '\P{^radical}', "");
Expect(1, 11929, '\p{	-RADICAL}', "");
Expect(0, 11929, '\p{^	-RADICAL}', "");
Expect(0, 11929, '\P{	-RADICAL}', "");
Expect(1, 11929, '\P{^	-RADICAL}', "");
Expect(0, 11903, '\p{	-RADICAL}', "");
Expect(1, 11903, '\p{^	-RADICAL}', "");
Expect(1, 11903, '\P{	-RADICAL}', "");
Expect(0, 11903, '\P{^	-RADICAL}', "");
Error('\p{	/a/Isradical}');
Error('\P{	/a/Isradical}');
Expect(1, 11929, '\p{isradical}', "");
Expect(0, 11929, '\p{^isradical}', "");
Expect(0, 11929, '\P{isradical}', "");
Expect(1, 11929, '\P{^isradical}', "");
Expect(0, 11903, '\p{isradical}', "");
Expect(1, 11903, '\p{^isradical}', "");
Expect(1, 11903, '\P{isradical}', "");
Expect(0, 11903, '\P{^isradical}', "");
Expect(1, 11929, '\p{		is-radical}', "");
Expect(0, 11929, '\p{^		is-radical}', "");
Expect(0, 11929, '\P{		is-radical}', "");
Expect(1, 11929, '\P{^		is-radical}', "");
Expect(0, 11903, '\p{		is-radical}', "");
Expect(1, 11903, '\p{^		is-radical}', "");
Expect(1, 11903, '\P{		is-radical}', "");
Expect(0, 11903, '\P{^		is-radical}', "");
Error('\p{	_Low/a/Surrogates}');
Error('\P{	_Low/a/Surrogates}');
Expect(0, 1, '\p{lowsurrogates}', "");
Expect(1, 1, '\p{^lowsurrogates}', "");
Expect(1, 1, '\P{lowsurrogates}', "");
Expect(0, 1, '\P{^lowsurrogates}', "");
Expect(0, 1, '\p{	low_Surrogates}', "");
Expect(1, 1, '\p{^	low_Surrogates}', "");
Expect(1, 1, '\P{	low_Surrogates}', "");
Expect(0, 1, '\P{^	low_Surrogates}', "");
Error('\p{_:=Is_Low Surrogates}');
Error('\P{_:=Is_Low Surrogates}');
Expect(0, 1, '\p{islowsurrogates}', "");
Expect(1, 1, '\p{^islowsurrogates}', "");
Expect(1, 1, '\P{islowsurrogates}', "");
Expect(0, 1, '\P{^islowsurrogates}', "");
Expect(0, 1, '\p{_-IS	Low Surrogates}', "");
Expect(1, 1, '\p{^_-IS	Low Surrogates}', "");
Expect(1, 1, '\P{_-IS	Low Surrogates}', "");
Expect(0, 1, '\P{^_-IS	Low Surrogates}', "");
Error('\p{-in-low	SURROGATES/a/}');
Error('\P{-in-low	SURROGATES/a/}');
Expect(0, 1, '\p{inlowsurrogates}', "");
Expect(1, 1, '\p{^inlowsurrogates}', "");
Expect(1, 1, '\P{inlowsurrogates}', "");
Expect(0, 1, '\P{^inlowsurrogates}', "");
Expect(0, 1, '\p{ in Low	Surrogates}', "");
Expect(1, 1, '\p{^ in Low	Surrogates}', "");
Expect(1, 1, '\P{ in Low	Surrogates}', "");
Expect(0, 1, '\P{^ in Low	Surrogates}', "");
Error('\p{__in_Phags-pa:=}');
Error('\P{__in_Phags-pa:=}');
Expect(1, 43135, '\p{inphagspa}', "");
Expect(0, 43135, '\p{^inphagspa}', "");
Expect(0, 43135, '\P{inphagspa}', "");
Expect(1, 43135, '\P{^inphagspa}', "");
Expect(0, 43071, '\p{inphagspa}', "");
Expect(1, 43071, '\p{^inphagspa}', "");
Expect(1, 43071, '\P{inphagspa}', "");
Expect(0, 43071, '\P{^inphagspa}', "");
Expect(1, 43135, '\p{- in Phags Pa}', "");
Expect(0, 43135, '\p{^- in Phags Pa}', "");
Expect(0, 43135, '\P{- in Phags Pa}', "");
Expect(1, 43135, '\P{^- in Phags Pa}', "");
Expect(0, 43071, '\p{- in Phags Pa}', "");
Expect(1, 43071, '\p{^- in Phags Pa}', "");
Expect(1, 43071, '\P{- in Phags Pa}', "");
Expect(0, 43071, '\P{^- in Phags Pa}', "");
Error('\p{_ IMPERIAL/a/Aramaic}');
Error('\P{_ IMPERIAL/a/Aramaic}');
Expect(1, 67669, '\p{imperialaramaic}', "");
Expect(0, 67669, '\p{^imperialaramaic}', "");
Expect(0, 67669, '\P{imperialaramaic}', "");
Expect(1, 67669, '\P{^imperialaramaic}', "");
Expect(0, 67647, '\p{imperialaramaic}', "");
Expect(1, 67647, '\p{^imperialaramaic}', "");
Expect(1, 67647, '\P{imperialaramaic}', "");
Expect(0, 67647, '\P{^imperialaramaic}', "");
Expect(1, 67669, '\p{_Imperial Aramaic}', "");
Expect(0, 67669, '\p{^_Imperial Aramaic}', "");
Expect(0, 67669, '\P{_Imperial Aramaic}', "");
Expect(1, 67669, '\P{^_Imperial Aramaic}', "");
Expect(0, 67647, '\p{_Imperial Aramaic}', "");
Expect(1, 67647, '\p{^_Imperial Aramaic}', "");
Expect(1, 67647, '\P{_Imperial Aramaic}', "");
Expect(0, 67647, '\P{^_Imperial Aramaic}', "");
Error('\p{:=	_IS	IMPERIAL_aramaic}');
Error('\P{:=	_IS	IMPERIAL_aramaic}');
Expect(1, 67669, '\p{isimperialaramaic}', "");
Expect(0, 67669, '\p{^isimperialaramaic}', "");
Expect(0, 67669, '\P{isimperialaramaic}', "");
Expect(1, 67669, '\P{^isimperialaramaic}', "");
Expect(0, 67647, '\p{isimperialaramaic}', "");
Expect(1, 67647, '\p{^isimperialaramaic}', "");
Expect(1, 67647, '\P{isimperialaramaic}', "");
Expect(0, 67647, '\P{^isimperialaramaic}', "");
Expect(1, 67669, '\p{-	Is-Imperial ARAMAIC}', "");
Expect(0, 67669, '\p{^-	Is-Imperial ARAMAIC}', "");
Expect(0, 67669, '\P{-	Is-Imperial ARAMAIC}', "");
Expect(1, 67669, '\P{^-	Is-Imperial ARAMAIC}', "");
Expect(0, 67647, '\p{-	Is-Imperial ARAMAIC}', "");
Expect(1, 67647, '\p{^-	Is-Imperial ARAMAIC}', "");
Expect(1, 67647, '\P{-	Is-Imperial ARAMAIC}', "");
Expect(0, 67647, '\P{^-	Is-Imperial ARAMAIC}', "");
Error('\p{:=_-ARMI}');
Error('\P{:=_-ARMI}');
Expect(1, 67669, '\p{armi}', "");
Expect(0, 67669, '\p{^armi}', "");
Expect(0, 67669, '\P{armi}', "");
Expect(1, 67669, '\P{^armi}', "");
Expect(0, 67647, '\p{armi}', "");
Expect(1, 67647, '\p{^armi}', "");
Expect(1, 67647, '\P{armi}', "");
Expect(0, 67647, '\P{^armi}', "");
Expect(1, 67669, '\p{_	ARMI}', "");
Expect(0, 67669, '\p{^_	ARMI}', "");
Expect(0, 67669, '\P{_	ARMI}', "");
Expect(1, 67669, '\P{^_	ARMI}', "");
Expect(0, 67647, '\p{_	ARMI}', "");
Expect(1, 67647, '\p{^_	ARMI}', "");
Expect(1, 67647, '\P{_	ARMI}', "");
Expect(0, 67647, '\P{^_	ARMI}', "");
Error('\p{_Is:=Armi}');
Error('\P{_Is:=Armi}');
Expect(1, 67669, '\p{isarmi}', "");
Expect(0, 67669, '\p{^isarmi}', "");
Expect(0, 67669, '\P{isarmi}', "");
Expect(1, 67669, '\P{^isarmi}', "");
Expect(0, 67647, '\p{isarmi}', "");
Expect(1, 67647, '\p{^isarmi}', "");
Expect(1, 67647, '\P{isarmi}', "");
Expect(0, 67647, '\P{^isarmi}', "");
Expect(1, 67669, '\p{_ Is-Armi}', "");
Expect(0, 67669, '\p{^_ Is-Armi}', "");
Expect(0, 67669, '\P{_ Is-Armi}', "");
Expect(1, 67669, '\P{^_ Is-Armi}', "");
Expect(0, 67647, '\p{_ Is-Armi}', "");
Expect(1, 67647, '\p{^_ Is-Armi}', "");
Expect(1, 67647, '\P{_ Is-Armi}', "");
Expect(0, 67647, '\P{^_ Is-Armi}', "");
Error('\p{:=-PERLSPACE}');
Error('\P{:=-PERLSPACE}');
Expect(1, 10, '\p{perlspace}', "");
Expect(0, 10, '\p{^perlspace}', "");
Expect(0, 10, '\P{perlspace}', "");
Expect(1, 10, '\P{^perlspace}', "");
Expect(0, 8, '\p{perlspace}', "");
Expect(1, 8, '\p{^perlspace}', "");
Expect(1, 8, '\P{perlspace}', "");
Expect(0, 8, '\P{^perlspace}', "");
Expect(1, 10, '\p{	-PerlSpace}', "");
Expect(0, 10, '\p{^	-PerlSpace}', "");
Expect(0, 10, '\P{	-PerlSpace}', "");
Expect(1, 10, '\P{^	-PerlSpace}', "");
Expect(0, 8, '\p{	-PerlSpace}', "");
Expect(1, 8, '\p{^	-PerlSpace}', "");
Expect(1, 8, '\P{	-PerlSpace}', "");
Expect(0, 8, '\P{^	-PerlSpace}', "");
Error('\p{-/a/Is_perlspace}');
Error('\P{-/a/Is_perlspace}');
Expect(1, 10, '\p{isperlspace}', "");
Expect(0, 10, '\p{^isperlspace}', "");
Expect(0, 10, '\P{isperlspace}', "");
Expect(1, 10, '\P{^isperlspace}', "");
Expect(0, 8, '\p{isperlspace}', "");
Expect(1, 8, '\p{^isperlspace}', "");
Expect(1, 8, '\P{isperlspace}', "");
Expect(0, 8, '\P{^isperlspace}', "");
Expect(1, 10, '\p{IS PerlSpace}', "");
Expect(0, 10, '\p{^IS PerlSpace}', "");
Expect(0, 10, '\P{IS PerlSpace}', "");
Expect(1, 10, '\P{^IS PerlSpace}', "");
Expect(0, 8, '\p{IS PerlSpace}', "");
Expect(1, 8, '\p{^IS PerlSpace}', "");
Expect(1, 8, '\P{IS PerlSpace}', "");
Expect(0, 8, '\P{^IS PerlSpace}', "");
Error('\p{ -IDS:=BINARYOPERATOR}');
Error('\P{ -IDS:=BINARYOPERATOR}');
Expect(1, 12273, '\p{idsbinaryoperator}', "");
Expect(0, 12273, '\p{^idsbinaryoperator}', "");
Expect(0, 12273, '\P{idsbinaryoperator}', "");
Expect(1, 12273, '\P{^idsbinaryoperator}', "");
Expect(0, 12271, '\p{idsbinaryoperator}', "");
Expect(1, 12271, '\p{^idsbinaryoperator}', "");
Expect(1, 12271, '\P{idsbinaryoperator}', "");
Expect(0, 12271, '\P{^idsbinaryoperator}', "");
Expect(1, 12273, '\p{  ids Binary-OPERATOR}', "");
Expect(0, 12273, '\p{^  ids Binary-OPERATOR}', "");
Expect(0, 12273, '\P{  ids Binary-OPERATOR}', "");
Expect(1, 12273, '\P{^  ids Binary-OPERATOR}', "");
Expect(0, 12271, '\p{  ids Binary-OPERATOR}', "");
Expect(1, 12271, '\p{^  ids Binary-OPERATOR}', "");
Expect(1, 12271, '\P{  ids Binary-OPERATOR}', "");
Expect(0, 12271, '\P{^  ids Binary-OPERATOR}', "");
Error('\p{_/a/Is_ids-Binaryoperator}');
Error('\P{_/a/Is_ids-Binaryoperator}');
Expect(1, 12273, '\p{isidsbinaryoperator}', "");
Expect(0, 12273, '\p{^isidsbinaryoperator}', "");
Expect(0, 12273, '\P{isidsbinaryoperator}', "");
Expect(1, 12273, '\P{^isidsbinaryoperator}', "");
Expect(0, 12271, '\p{isidsbinaryoperator}', "");
Expect(1, 12271, '\p{^isidsbinaryoperator}', "");
Expect(1, 12271, '\P{isidsbinaryoperator}', "");
Expect(0, 12271, '\P{^isidsbinaryoperator}', "");
Expect(1, 12273, '\p{ Isids_Binary-Operator}', "");
Expect(0, 12273, '\p{^ Isids_Binary-Operator}', "");
Expect(0, 12273, '\P{ Isids_Binary-Operator}', "");
Expect(1, 12273, '\P{^ Isids_Binary-Operator}', "");
Expect(0, 12271, '\p{ Isids_Binary-Operator}', "");
Expect(1, 12271, '\p{^ Isids_Binary-Operator}', "");
Expect(1, 12271, '\P{ Isids_Binary-Operator}', "");
Expect(0, 12271, '\P{^ Isids_Binary-Operator}', "");
Error('\p{_/a/IDSB}');
Error('\P{_/a/IDSB}');
Expect(1, 12273, '\p{idsb}', "");
Expect(0, 12273, '\p{^idsb}', "");
Expect(0, 12273, '\P{idsb}', "");
Expect(1, 12273, '\P{^idsb}', "");
Expect(0, 12271, '\p{idsb}', "");
Expect(1, 12271, '\p{^idsb}', "");
Expect(1, 12271, '\P{idsb}', "");
Expect(0, 12271, '\P{^idsb}', "");
Expect(1, 12273, '\p{_ IDSB}', "");
Expect(0, 12273, '\p{^_ IDSB}', "");
Expect(0, 12273, '\P{_ IDSB}', "");
Expect(1, 12273, '\P{^_ IDSB}', "");
Expect(0, 12271, '\p{_ IDSB}', "");
Expect(1, 12271, '\p{^_ IDSB}', "");
Expect(1, 12271, '\P{_ IDSB}', "");
Expect(0, 12271, '\P{^_ IDSB}', "");
Error('\p{-/a/IS	IDSB}');
Error('\P{-/a/IS	IDSB}');
Expect(1, 12273, '\p{isidsb}', "");
Expect(0, 12273, '\p{^isidsb}', "");
Expect(0, 12273, '\P{isidsb}', "");
Expect(1, 12273, '\P{^isidsb}', "");
Expect(0, 12271, '\p{isidsb}', "");
Expect(1, 12271, '\p{^isidsb}', "");
Expect(1, 12271, '\P{isidsb}', "");
Expect(0, 12271, '\P{^isidsb}', "");
Expect(1, 12273, '\p{	is IDSB}', "");
Expect(0, 12273, '\p{^	is IDSB}', "");
Expect(0, 12273, '\P{	is IDSB}', "");
Expect(1, 12273, '\P{^	is IDSB}', "");
Expect(0, 12271, '\p{	is IDSB}', "");
Expect(1, 12271, '\p{^	is IDSB}', "");
Expect(1, 12271, '\P{	is IDSB}', "");
Expect(0, 12271, '\P{^	is IDSB}', "");
Error('\p{_/a/Cntrl}');
Error('\P{_/a/Cntrl}');
Expect(1, 31, '\p{cntrl}', "");
Expect(0, 31, '\p{^cntrl}', "");
Expect(0, 31, '\P{cntrl}', "");
Expect(1, 31, '\P{^cntrl}', "");
Expect(0, 126, '\p{cntrl}', "");
Expect(1, 126, '\p{^cntrl}', "");
Expect(1, 126, '\P{cntrl}', "");
Expect(0, 126, '\P{^cntrl}', "");
Expect(1, 31, '\p{__Cntrl}', "");
Expect(0, 31, '\p{^__Cntrl}', "");
Expect(0, 31, '\P{__Cntrl}', "");
Expect(1, 31, '\P{^__Cntrl}', "");
Expect(0, 126, '\p{__Cntrl}', "");
Expect(1, 126, '\p{^__Cntrl}', "");
Expect(1, 126, '\P{__Cntrl}', "");
Expect(0, 126, '\P{^__Cntrl}', "");
Error('\p{-:=Is	Cntrl}');
Error('\P{-:=Is	Cntrl}');
Expect(1, 31, '\p{iscntrl}', "");
Expect(0, 31, '\p{^iscntrl}', "");
Expect(0, 31, '\P{iscntrl}', "");
Expect(1, 31, '\P{^iscntrl}', "");
Expect(0, 126, '\p{iscntrl}', "");
Expect(1, 126, '\p{^iscntrl}', "");
Expect(1, 126, '\P{iscntrl}', "");
Expect(0, 126, '\P{^iscntrl}', "");
Expect(1, 31, '\p{_is	Cntrl}', "");
Expect(0, 31, '\p{^_is	Cntrl}', "");
Expect(0, 31, '\P{_is	Cntrl}', "");
Expect(1, 31, '\P{^_is	Cntrl}', "");
Expect(0, 126, '\p{_is	Cntrl}', "");
Expect(1, 126, '\p{^_is	Cntrl}', "");
Expect(1, 126, '\P{_is	Cntrl}', "");
Expect(0, 126, '\P{^_is	Cntrl}', "");
Error('\p{/a/-_control}');
Error('\P{/a/-_control}');
Expect(1, 31, '\p{control}', "");
Expect(0, 31, '\p{^control}', "");
Expect(0, 31, '\P{control}', "");
Expect(1, 31, '\P{^control}', "");
Expect(0, 126, '\p{control}', "");
Expect(1, 126, '\p{^control}', "");
Expect(1, 126, '\P{control}', "");
Expect(0, 126, '\P{^control}', "");
Expect(1, 31, '\p{--Control}', "");
Expect(0, 31, '\p{^--Control}', "");
Expect(0, 31, '\P{--Control}', "");
Expect(1, 31, '\P{^--Control}', "");
Expect(0, 126, '\p{--Control}', "");
Expect(1, 126, '\p{^--Control}', "");
Expect(1, 126, '\P{--Control}', "");
Expect(0, 126, '\P{^--Control}', "");
Error('\p{_/a/ISControl}');
Error('\P{_/a/ISControl}');
Expect(1, 31, '\p{iscontrol}', "");
Expect(0, 31, '\p{^iscontrol}', "");
Expect(0, 31, '\P{iscontrol}', "");
Expect(1, 31, '\P{^iscontrol}', "");
Expect(0, 126, '\p{iscontrol}', "");
Expect(1, 126, '\p{^iscontrol}', "");
Expect(1, 126, '\P{iscontrol}', "");
Expect(0, 126, '\P{^iscontrol}', "");
Expect(1, 31, '\p{-Iscontrol}', "");
Expect(0, 31, '\p{^-Iscontrol}', "");
Expect(0, 31, '\P{-Iscontrol}', "");
Expect(1, 31, '\P{^-Iscontrol}', "");
Expect(0, 126, '\p{-Iscontrol}', "");
Expect(1, 126, '\p{^-Iscontrol}', "");
Expect(1, 126, '\P{-Iscontrol}', "");
Expect(0, 126, '\P{^-Iscontrol}', "");
Error('\p{/a/-_Cc}');
Error('\P{/a/-_Cc}');
Expect(1, 31, '\p{cc}', "");
Expect(0, 31, '\p{^cc}', "");
Expect(0, 31, '\P{cc}', "");
Expect(1, 31, '\P{^cc}', "");
Expect(0, 126, '\p{cc}', "");
Expect(1, 126, '\p{^cc}', "");
Expect(1, 126, '\P{cc}', "");
Expect(0, 126, '\P{^cc}', "");
Expect(1, 31, '\p{- Cc}', "");
Expect(0, 31, '\p{^- Cc}', "");
Expect(0, 31, '\P{- Cc}', "");
Expect(1, 31, '\P{^- Cc}', "");
Expect(0, 126, '\p{- Cc}', "");
Expect(1, 126, '\p{^- Cc}', "");
Expect(1, 126, '\P{- Cc}', "");
Expect(0, 126, '\P{^- Cc}', "");
Error('\p{	-Is CC/a/}');
Error('\P{	-Is CC/a/}');
Expect(1, 31, '\p{iscc}', "");
Expect(0, 31, '\p{^iscc}', "");
Expect(0, 31, '\P{iscc}', "");
Expect(1, 31, '\P{^iscc}', "");
Expect(0, 126, '\p{iscc}', "");
Expect(1, 126, '\p{^iscc}', "");
Expect(1, 126, '\P{iscc}', "");
Expect(0, 126, '\P{^iscc}', "");
Expect(1, 31, '\p{_-Is-Cc}', "");
Expect(0, 31, '\p{^_-Is-Cc}', "");
Expect(0, 31, '\P{_-Is-Cc}', "");
Expect(1, 31, '\P{^_-Is-Cc}', "");
Expect(0, 126, '\p{_-Is-Cc}', "");
Expect(1, 126, '\p{^_-Is-Cc}', "");
Expect(1, 126, '\P{_-Is-Cc}', "");
Expect(0, 126, '\P{^_-Is-Cc}', "");
Error('\p{_CHANGES/a/When	Titlecased}');
Error('\P{_CHANGES/a/When	Titlecased}');
Expect(1, 122, '\p{changeswhentitlecased}', "");
Expect(0, 122, '\p{^changeswhentitlecased}', "");
Expect(0, 122, '\P{changeswhentitlecased}', "");
Expect(1, 122, '\P{^changeswhentitlecased}', "");
Expect(0, 96, '\p{changeswhentitlecased}', "");
Expect(1, 96, '\p{^changeswhentitlecased}', "");
Expect(1, 96, '\P{changeswhentitlecased}', "");
Expect(0, 96, '\P{^changeswhentitlecased}', "");
Expect(1, 122, '\p{_ Changes	When	Titlecased}', "");
Expect(0, 122, '\p{^_ Changes	When	Titlecased}', "");
Expect(0, 122, '\P{_ Changes	When	Titlecased}', "");
Expect(1, 122, '\P{^_ Changes	When	Titlecased}', "");
Expect(0, 96, '\p{_ Changes	When	Titlecased}', "");
Expect(1, 96, '\p{^_ Changes	When	Titlecased}', "");
Expect(1, 96, '\P{_ Changes	When	Titlecased}', "");
Expect(0, 96, '\P{^_ Changes	When	Titlecased}', "");
Error('\p{_:=is-Changes When	Titlecased}');
Error('\P{_:=is-Changes When	Titlecased}');
Expect(1, 122, '\p{ischangeswhentitlecased}', "");
Expect(0, 122, '\p{^ischangeswhentitlecased}', "");
Expect(0, 122, '\P{ischangeswhentitlecased}', "");
Expect(1, 122, '\P{^ischangeswhentitlecased}', "");
Expect(0, 96, '\p{ischangeswhentitlecased}', "");
Expect(1, 96, '\p{^ischangeswhentitlecased}', "");
Expect(1, 96, '\P{ischangeswhentitlecased}', "");
Expect(0, 96, '\P{^ischangeswhentitlecased}', "");
Expect(1, 122, '\p{	Is-changes_WHENTitlecased}', "");
Expect(0, 122, '\p{^	Is-changes_WHENTitlecased}', "");
Expect(0, 122, '\P{	Is-changes_WHENTitlecased}', "");
Expect(1, 122, '\P{^	Is-changes_WHENTitlecased}', "");
Expect(0, 96, '\p{	Is-changes_WHENTitlecased}', "");
Expect(1, 96, '\p{^	Is-changes_WHENTitlecased}', "");
Expect(1, 96, '\P{	Is-changes_WHENTitlecased}', "");
Expect(0, 96, '\P{^	Is-changes_WHENTitlecased}', "");
Error('\p{_ CWT:=}');
Error('\P{_ CWT:=}');
Expect(1, 122, '\p{cwt}', "");
Expect(0, 122, '\p{^cwt}', "");
Expect(0, 122, '\P{cwt}', "");
Expect(1, 122, '\P{^cwt}', "");
Expect(0, 96, '\p{cwt}', "");
Expect(1, 96, '\p{^cwt}', "");
Expect(1, 96, '\P{cwt}', "");
Expect(0, 96, '\P{^cwt}', "");
Expect(1, 122, '\p{- cwt}', "");
Expect(0, 122, '\p{^- cwt}', "");
Expect(0, 122, '\P{- cwt}', "");
Expect(1, 122, '\P{^- cwt}', "");
Expect(0, 96, '\p{- cwt}', "");
Expect(1, 96, '\p{^- cwt}', "");
Expect(1, 96, '\P{- cwt}', "");
Expect(0, 96, '\P{^- cwt}', "");
Error('\p{ _is_cwt/a/}');
Error('\P{ _is_cwt/a/}');
Expect(1, 122, '\p{iscwt}', "");
Expect(0, 122, '\p{^iscwt}', "");
Expect(0, 122, '\P{iscwt}', "");
Expect(1, 122, '\P{^iscwt}', "");
Expect(0, 96, '\p{iscwt}', "");
Expect(1, 96, '\p{^iscwt}', "");
Expect(1, 96, '\P{iscwt}', "");
Expect(0, 96, '\P{^iscwt}', "");
Expect(1, 122, '\p{ -IsCWT}', "");
Expect(0, 122, '\p{^ -IsCWT}', "");
Expect(0, 122, '\P{ -IsCWT}', "");
Expect(1, 122, '\P{^ -IsCWT}', "");
Expect(0, 96, '\p{ -IsCWT}', "");
Expect(1, 96, '\p{^ -IsCWT}', "");
Expect(1, 96, '\P{ -IsCWT}', "");
Expect(0, 96, '\P{^ -IsCWT}', "");
Error('\p{	_cyrillic Extended A/a/}');
Error('\P{	_cyrillic Extended A/a/}');
Expect(1, 11775, '\p{cyrillicextendeda}', "");
Expect(0, 11775, '\p{^cyrillicextendeda}', "");
Expect(0, 11775, '\P{cyrillicextendeda}', "");
Expect(1, 11775, '\P{^cyrillicextendeda}', "");
Expect(0, 11743, '\p{cyrillicextendeda}', "");
Expect(1, 11743, '\p{^cyrillicextendeda}', "");
Expect(1, 11743, '\P{cyrillicextendeda}', "");
Expect(0, 11743, '\P{^cyrillicextendeda}', "");
Expect(1, 11775, '\p{-	Cyrillic_Extended	A}', "");
Expect(0, 11775, '\p{^-	Cyrillic_Extended	A}', "");
Expect(0, 11775, '\P{-	Cyrillic_Extended	A}', "");
Expect(1, 11775, '\P{^-	Cyrillic_Extended	A}', "");
Expect(0, 11743, '\p{-	Cyrillic_Extended	A}', "");
Expect(1, 11743, '\p{^-	Cyrillic_Extended	A}', "");
Expect(1, 11743, '\P{-	Cyrillic_Extended	A}', "");
Expect(0, 11743, '\P{^-	Cyrillic_Extended	A}', "");
Error('\p{	-is	Cyrillic EXTENDEDA/a/}');
Error('\P{	-is	Cyrillic EXTENDEDA/a/}');
Expect(1, 11775, '\p{iscyrillicextendeda}', "");
Expect(0, 11775, '\p{^iscyrillicextendeda}', "");
Expect(0, 11775, '\P{iscyrillicextendeda}', "");
Expect(1, 11775, '\P{^iscyrillicextendeda}', "");
Expect(0, 11743, '\p{iscyrillicextendeda}', "");
Expect(1, 11743, '\p{^iscyrillicextendeda}', "");
Expect(1, 11743, '\P{iscyrillicextendeda}', "");
Expect(0, 11743, '\P{^iscyrillicextendeda}', "");
Expect(1, 11775, '\p{	is	Cyrillic-Extended_a}', "");
Expect(0, 11775, '\p{^	is	Cyrillic-Extended_a}', "");
Expect(0, 11775, '\P{	is	Cyrillic-Extended_a}', "");
Expect(1, 11775, '\P{^	is	Cyrillic-Extended_a}', "");
Expect(0, 11743, '\p{	is	Cyrillic-Extended_a}', "");
Expect(1, 11743, '\p{^	is	Cyrillic-Extended_a}', "");
Expect(1, 11743, '\P{	is	Cyrillic-Extended_a}', "");
Expect(0, 11743, '\P{^	is	Cyrillic-Extended_a}', "");
Error('\p{_/a/in_Cyrillicextended a}');
Error('\P{_/a/in_Cyrillicextended a}');
Expect(1, 11775, '\p{incyrillicextendeda}', "");
Expect(0, 11775, '\p{^incyrillicextendeda}', "");
Expect(0, 11775, '\P{incyrillicextendeda}', "");
Expect(1, 11775, '\P{^incyrillicextendeda}', "");
Expect(0, 11743, '\p{incyrillicextendeda}', "");
Expect(1, 11743, '\p{^incyrillicextendeda}', "");
Expect(1, 11743, '\P{incyrillicextendeda}', "");
Expect(0, 11743, '\P{^incyrillicextendeda}', "");
Expect(1, 11775, '\p{-_IN_CYRILLIC_Extended A}', "");
Expect(0, 11775, '\p{^-_IN_CYRILLIC_Extended A}', "");
Expect(0, 11775, '\P{-_IN_CYRILLIC_Extended A}', "");
Expect(1, 11775, '\P{^-_IN_CYRILLIC_Extended A}', "");
Expect(0, 11743, '\p{-_IN_CYRILLIC_Extended A}', "");
Expect(1, 11743, '\p{^-_IN_CYRILLIC_Extended A}', "");
Expect(1, 11743, '\P{-_IN_CYRILLIC_Extended A}', "");
Expect(0, 11743, '\P{^-_IN_CYRILLIC_Extended A}', "");
Error('\p{__posixlower/a/}');
Error('\P{__posixlower/a/}');
Expect(1, 122, '\p{posixlower}', "");
Expect(0, 122, '\p{^posixlower}', "");
Expect(0, 122, '\P{posixlower}', "");
Expect(1, 122, '\P{^posixlower}', "");
Expect(0, 96, '\p{posixlower}', "");
Expect(1, 96, '\p{^posixlower}', "");
Expect(1, 96, '\P{posixlower}', "");
Expect(0, 96, '\P{^posixlower}', "");
Expect(1, 122, '\p{	-posixlower}', "");
Expect(0, 122, '\p{^	-posixlower}', "");
Expect(0, 122, '\P{	-posixlower}', "");
Expect(1, 122, '\P{^	-posixlower}', "");
Expect(0, 96, '\p{	-posixlower}', "");
Expect(1, 96, '\p{^	-posixlower}', "");
Expect(1, 96, '\P{	-posixlower}', "");
Expect(0, 96, '\P{^	-posixlower}', "");
Error('\p{:=_IS PosixLower}');
Error('\P{:=_IS PosixLower}');
Expect(1, 122, '\p{isposixlower}', "");
Expect(0, 122, '\p{^isposixlower}', "");
Expect(0, 122, '\P{isposixlower}', "");
Expect(1, 122, '\P{^isposixlower}', "");
Expect(0, 96, '\p{isposixlower}', "");
Expect(1, 96, '\p{^isposixlower}', "");
Expect(1, 96, '\P{isposixlower}', "");
Expect(0, 96, '\P{^isposixlower}', "");
Expect(1, 122, '\p{_ Is_PosixLower}', "");
Expect(0, 122, '\p{^_ Is_PosixLower}', "");
Expect(0, 122, '\P{_ Is_PosixLower}', "");
Expect(1, 122, '\P{^_ Is_PosixLower}', "");
Expect(0, 96, '\p{_ Is_PosixLower}', "");
Expect(1, 96, '\p{^_ Is_PosixLower}', "");
Expect(1, 96, '\P{_ Is_PosixLower}', "");
Expect(0, 96, '\P{^_ Is_PosixLower}', "");
Error('\p{-/a/Othergrapheme-Extend}');
Error('\P{-/a/Othergrapheme-Extend}');
Expect(1, 2494, '\p{othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{ -othergrapheme	Extend}', 'deprecated');
Expect(0, 2494, '\p{^ -othergrapheme	Extend}', 'deprecated');
Expect(0, 2494, '\P{ -othergrapheme	Extend}', 'deprecated');
Expect(1, 2494, '\P{^ -othergrapheme	Extend}', 'deprecated');
Expect(0, 2493, '\p{ -othergrapheme	Extend}', 'deprecated');
Expect(1, 2493, '\p{^ -othergrapheme	Extend}', 'deprecated');
Expect(1, 2493, '\P{ -othergrapheme	Extend}', 'deprecated');
Expect(0, 2493, '\P{^ -othergrapheme	Extend}', 'deprecated');
Error('\p{ Is:=Other-grapheme_extend}');
Error('\P{ Is:=Other-grapheme_extend}');
Expect(1, 2494, '\p{isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(0, 2494, '\p{^ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(0, 2494, '\P{ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(1, 2494, '\P{^ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(0, 2493, '\p{ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(1, 2493, '\p{^ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(1, 2493, '\P{ 	isother_GRAPHEME_Extend}', 'deprecated');
Expect(0, 2493, '\P{^ 	isother_GRAPHEME_Extend}', 'deprecated');
Error('\p{/a/ ogr_Ext}');
Error('\P{/a/ ogr_Ext}');
Expect(1, 2494, '\p{ogrext}', 'deprecated');
Expect(0, 2494, '\p{^ogrext}', 'deprecated');
Expect(0, 2494, '\P{ogrext}', 'deprecated');
Expect(1, 2494, '\P{^ogrext}', 'deprecated');
Expect(0, 2493, '\p{ogrext}', 'deprecated');
Expect(1, 2493, '\p{^ogrext}', 'deprecated');
Expect(1, 2493, '\P{ogrext}', 'deprecated');
Expect(0, 2493, '\P{^ogrext}', 'deprecated');
Expect(1, 2494, '\p{- OGR-Ext}', 'deprecated');
Expect(0, 2494, '\p{^- OGR-Ext}', 'deprecated');
Expect(0, 2494, '\P{- OGR-Ext}', 'deprecated');
Expect(1, 2494, '\P{^- OGR-Ext}', 'deprecated');
Expect(0, 2493, '\p{- OGR-Ext}', 'deprecated');
Expect(1, 2493, '\p{^- OGR-Ext}', 'deprecated');
Expect(1, 2493, '\P{- OGR-Ext}', 'deprecated');
Expect(0, 2493, '\P{^- OGR-Ext}', 'deprecated');
Error('\p{_/a/IS_OGR	ext}');
Error('\P{_/a/IS_OGR	ext}');
Expect(1, 2494, '\p{isogrext}', 'deprecated');
Expect(0, 2494, '\p{^isogrext}', 'deprecated');
Expect(0, 2494, '\P{isogrext}', 'deprecated');
Expect(1, 2494, '\P{^isogrext}', 'deprecated');
Expect(0, 2493, '\p{isogrext}', 'deprecated');
Expect(1, 2493, '\p{^isogrext}', 'deprecated');
Expect(1, 2493, '\P{isogrext}', 'deprecated');
Expect(0, 2493, '\P{^isogrext}', 'deprecated');
Expect(1, 2494, '\p{	-Is ogr Ext}', 'deprecated');
Expect(0, 2494, '\p{^	-Is ogr Ext}', 'deprecated');
Expect(0, 2494, '\P{	-Is ogr Ext}', 'deprecated');
Expect(1, 2494, '\P{^	-Is ogr Ext}', 'deprecated');
Expect(0, 2493, '\p{	-Is ogr Ext}', 'deprecated');
Expect(1, 2493, '\p{^	-Is ogr Ext}', 'deprecated');
Expect(1, 2493, '\P{	-Is ogr Ext}', 'deprecated');
Expect(0, 2493, '\P{^	-Is ogr Ext}', 'deprecated');
Error('\p{	 OLD:=Persian}');
Error('\P{	 OLD:=Persian}');
Expect(1, 66499, '\p{oldpersian}', "");
Expect(0, 66499, '\p{^oldpersian}', "");
Expect(0, 66499, '\P{oldpersian}', "");
Expect(1, 66499, '\P{^oldpersian}', "");
Expect(0, 66463, '\p{oldpersian}', "");
Expect(1, 66463, '\p{^oldpersian}', "");
Expect(1, 66463, '\P{oldpersian}', "");
Expect(0, 66463, '\P{^oldpersian}', "");
Expect(1, 66499, '\p{	-OLD Persian}', "");
Expect(0, 66499, '\p{^	-OLD Persian}', "");
Expect(0, 66499, '\P{	-OLD Persian}', "");
Expect(1, 66499, '\P{^	-OLD Persian}', "");
Expect(0, 66463, '\p{	-OLD Persian}', "");
Expect(1, 66463, '\p{^	-OLD Persian}', "");
Expect(1, 66463, '\P{	-OLD Persian}', "");
Expect(0, 66463, '\P{^	-OLD Persian}', "");
Error('\p{_IS	Old/a/PERSIAN}');
Error('\P{_IS	Old/a/PERSIAN}');
Expect(1, 66499, '\p{isoldpersian}', "");
Expect(0, 66499, '\p{^isoldpersian}', "");
Expect(0, 66499, '\P{isoldpersian}', "");
Expect(1, 66499, '\P{^isoldpersian}', "");
Expect(0, 66463, '\p{isoldpersian}', "");
Expect(1, 66463, '\p{^isoldpersian}', "");
Expect(1, 66463, '\P{isoldpersian}', "");
Expect(0, 66463, '\P{^isoldpersian}', "");
Expect(1, 66499, '\p{is-OLD	PERSIAN}', "");
Expect(0, 66499, '\p{^is-OLD	PERSIAN}', "");
Expect(0, 66499, '\P{is-OLD	PERSIAN}', "");
Expect(1, 66499, '\P{^is-OLD	PERSIAN}', "");
Expect(0, 66463, '\p{is-OLD	PERSIAN}', "");
Expect(1, 66463, '\p{^is-OLD	PERSIAN}', "");
Expect(1, 66463, '\P{is-OLD	PERSIAN}', "");
Expect(0, 66463, '\P{^is-OLD	PERSIAN}', "");
Error('\p{_:=Xpeo}');
Error('\P{_:=Xpeo}');
Expect(1, 66499, '\p{xpeo}', "");
Expect(0, 66499, '\p{^xpeo}', "");
Expect(0, 66499, '\P{xpeo}', "");
Expect(1, 66499, '\P{^xpeo}', "");
Expect(0, 66463, '\p{xpeo}', "");
Expect(1, 66463, '\p{^xpeo}', "");
Expect(1, 66463, '\P{xpeo}', "");
Expect(0, 66463, '\P{^xpeo}', "");
Expect(1, 66499, '\p{	-Xpeo}', "");
Expect(0, 66499, '\p{^	-Xpeo}', "");
Expect(0, 66499, '\P{	-Xpeo}', "");
Expect(1, 66499, '\P{^	-Xpeo}', "");
Expect(0, 66463, '\p{	-Xpeo}', "");
Expect(1, 66463, '\p{^	-Xpeo}', "");
Expect(1, 66463, '\P{	-Xpeo}', "");
Expect(0, 66463, '\P{^	-Xpeo}', "");
Error('\p{	:=is Xpeo}');
Error('\P{	:=is Xpeo}');
Expect(1, 66499, '\p{isxpeo}', "");
Expect(0, 66499, '\p{^isxpeo}', "");
Expect(0, 66499, '\P{isxpeo}', "");
Expect(1, 66499, '\P{^isxpeo}', "");
Expect(0, 66463, '\p{isxpeo}', "");
Expect(1, 66463, '\p{^isxpeo}', "");
Expect(1, 66463, '\P{isxpeo}', "");
Expect(0, 66463, '\P{^isxpeo}', "");
Expect(1, 66499, '\p{-is	xpeo}', "");
Expect(0, 66499, '\p{^-is	xpeo}', "");
Expect(0, 66499, '\P{-is	xpeo}', "");
Expect(1, 66499, '\P{^-is	xpeo}', "");
Expect(0, 66463, '\p{-is	xpeo}', "");
Expect(1, 66463, '\p{^-is	xpeo}', "");
Expect(1, 66463, '\P{-is	xpeo}', "");
Expect(0, 66463, '\P{^-is	xpeo}', "");
Error('\p{__New:=tai_LUE}');
Error('\P{__New:=tai_LUE}');
Expect(1, 6571, '\p{newtailue}', "");
Expect(0, 6571, '\p{^newtailue}', "");
Expect(0, 6571, '\P{newtailue}', "");
Expect(1, 6571, '\P{^newtailue}', "");
Expect(0, 6527, '\p{newtailue}', "");
Expect(1, 6527, '\p{^newtailue}', "");
Expect(1, 6527, '\P{newtailue}', "");
Expect(0, 6527, '\P{^newtailue}', "");
Expect(1, 6571, '\p{_ NEW Tai LUE}', "");
Expect(0, 6571, '\p{^_ NEW Tai LUE}', "");
Expect(0, 6571, '\P{_ NEW Tai LUE}', "");
Expect(1, 6571, '\P{^_ NEW Tai LUE}', "");
Expect(0, 6527, '\p{_ NEW Tai LUE}', "");
Expect(1, 6527, '\p{^_ NEW Tai LUE}', "");
Expect(1, 6527, '\P{_ NEW Tai LUE}', "");
Expect(0, 6527, '\P{^_ NEW Tai LUE}', "");
Error('\p{ 	Is:=New-TAI	LUE}');
Error('\P{ 	Is:=New-TAI	LUE}');
Expect(1, 6571, '\p{isnewtailue}', "");
Expect(0, 6571, '\p{^isnewtailue}', "");
Expect(0, 6571, '\P{isnewtailue}', "");
Expect(1, 6571, '\P{^isnewtailue}', "");
Expect(0, 6527, '\p{isnewtailue}', "");
Expect(1, 6527, '\p{^isnewtailue}', "");
Expect(1, 6527, '\P{isnewtailue}', "");
Expect(0, 6527, '\P{^isnewtailue}', "");
Expect(1, 6571, '\p{ IS	New-TAI	lue}', "");
Expect(0, 6571, '\p{^ IS	New-TAI	lue}', "");
Expect(0, 6571, '\P{ IS	New-TAI	lue}', "");
Expect(1, 6571, '\P{^ IS	New-TAI	lue}', "");
Expect(0, 6527, '\p{ IS	New-TAI	lue}', "");
Expect(1, 6527, '\p{^ IS	New-TAI	lue}', "");
Expect(1, 6527, '\P{ IS	New-TAI	lue}', "");
Expect(0, 6527, '\P{^ IS	New-TAI	lue}', "");
Error('\p{/a/ 	Talu}');
Error('\P{/a/ 	Talu}');
Expect(1, 6571, '\p{talu}', "");
Expect(0, 6571, '\p{^talu}', "");
Expect(0, 6571, '\P{talu}', "");
Expect(1, 6571, '\P{^talu}', "");
Expect(0, 6527, '\p{talu}', "");
Expect(1, 6527, '\p{^talu}', "");
Expect(1, 6527, '\P{talu}', "");
Expect(0, 6527, '\P{^talu}', "");
Expect(1, 6571, '\p{- TALU}', "");
Expect(0, 6571, '\p{^- TALU}', "");
Expect(0, 6571, '\P{- TALU}', "");
Expect(1, 6571, '\P{^- TALU}', "");
Expect(0, 6527, '\p{- TALU}', "");
Expect(1, 6527, '\p{^- TALU}', "");
Expect(1, 6527, '\P{- TALU}', "");
Expect(0, 6527, '\P{^- TALU}', "");
Error('\p{ /a/Is_Talu}');
Error('\P{ /a/Is_Talu}');
Expect(1, 6571, '\p{istalu}', "");
Expect(0, 6571, '\p{^istalu}', "");
Expect(0, 6571, '\P{istalu}', "");
Expect(1, 6571, '\P{^istalu}', "");
Expect(0, 6527, '\p{istalu}', "");
Expect(1, 6527, '\p{^istalu}', "");
Expect(1, 6527, '\P{istalu}', "");
Expect(0, 6527, '\P{^istalu}', "");
Expect(1, 6571, '\p{  is-Talu}', "");
Expect(0, 6571, '\p{^  is-Talu}', "");
Expect(0, 6571, '\P{  is-Talu}', "");
Expect(1, 6571, '\P{^  is-Talu}', "");
Expect(0, 6527, '\p{  is-Talu}', "");
Expect(1, 6527, '\p{^  is-Talu}', "");
Expect(1, 6527, '\P{  is-Talu}', "");
Expect(0, 6527, '\P{^  is-Talu}', "");
Error('\p{:= -Unassigned}');
Error('\P{:= -Unassigned}');
Expect(1, 889, '\p{unassigned}', "");
Expect(0, 889, '\p{^unassigned}', "");
Expect(0, 889, '\P{unassigned}', "");
Expect(1, 889, '\P{^unassigned}', "");
Expect(0, 887, '\p{unassigned}', "");
Expect(1, 887, '\p{^unassigned}', "");
Expect(1, 887, '\P{unassigned}', "");
Expect(0, 887, '\P{^unassigned}', "");
Expect(1, 889, '\p{UNASSIGNED}', "");
Expect(0, 889, '\p{^UNASSIGNED}', "");
Expect(0, 889, '\P{UNASSIGNED}', "");
Expect(1, 889, '\P{^UNASSIGNED}', "");
Expect(0, 887, '\p{UNASSIGNED}', "");
Expect(1, 887, '\p{^UNASSIGNED}', "");
Expect(1, 887, '\P{UNASSIGNED}', "");
Expect(0, 887, '\P{^UNASSIGNED}', "");
Error('\p{Is:=Unassigned}');
Error('\P{Is:=Unassigned}');
Expect(1, 889, '\p{isunassigned}', "");
Expect(0, 889, '\p{^isunassigned}', "");
Expect(0, 889, '\P{isunassigned}', "");
Expect(1, 889, '\P{^isunassigned}', "");
Expect(0, 887, '\p{isunassigned}', "");
Expect(1, 887, '\p{^isunassigned}', "");
Expect(1, 887, '\P{isunassigned}', "");
Expect(0, 887, '\P{^isunassigned}', "");
Expect(1, 889, '\p{_IsUnassigned}', "");
Expect(0, 889, '\p{^_IsUnassigned}', "");
Expect(0, 889, '\P{_IsUnassigned}', "");
Expect(1, 889, '\P{^_IsUnassigned}', "");
Expect(0, 887, '\p{_IsUnassigned}', "");
Expect(1, 887, '\p{^_IsUnassigned}', "");
Expect(1, 887, '\P{_IsUnassigned}', "");
Expect(0, 887, '\P{^_IsUnassigned}', "");
Error('\p{ /a/Cn}');
Error('\P{ /a/Cn}');
Expect(1, 889, '\p{cn}', "");
Expect(0, 889, '\p{^cn}', "");
Expect(0, 889, '\P{cn}', "");
Expect(1, 889, '\P{^cn}', "");
Expect(0, 887, '\p{cn}', "");
Expect(1, 887, '\p{^cn}', "");
Expect(1, 887, '\P{cn}', "");
Expect(0, 887, '\P{^cn}', "");
Expect(1, 889, '\p{-_cn}', "");
Expect(0, 889, '\p{^-_cn}', "");
Expect(0, 889, '\P{-_cn}', "");
Expect(1, 889, '\P{^-_cn}', "");
Expect(0, 887, '\p{-_cn}', "");
Expect(1, 887, '\p{^-_cn}', "");
Expect(1, 887, '\P{-_cn}', "");
Expect(0, 887, '\P{^-_cn}', "");
Error('\p{/a/- IS	Cn}');
Error('\P{/a/- IS	Cn}');
Expect(1, 889, '\p{iscn}', "");
Expect(0, 889, '\p{^iscn}', "");
Expect(0, 889, '\P{iscn}', "");
Expect(1, 889, '\P{^iscn}', "");
Expect(0, 887, '\p{iscn}', "");
Expect(1, 887, '\p{^iscn}', "");
Expect(1, 887, '\P{iscn}', "");
Expect(0, 887, '\P{^iscn}', "");
Expect(1, 889, '\p{-IS CN}', "");
Expect(0, 889, '\p{^-IS CN}', "");
Expect(0, 889, '\P{-IS CN}', "");
Expect(1, 889, '\P{^-IS CN}', "");
Expect(0, 887, '\p{-IS CN}', "");
Expect(1, 887, '\p{^-IS CN}', "");
Expect(1, 887, '\P{-IS CN}', "");
Expect(0, 887, '\P{^-IS CN}', "");
Error('\p{ lepcha:=}');
Error('\P{ lepcha:=}');
Expect(1, 7223, '\p{lepcha}', "");
Expect(0, 7223, '\p{^lepcha}', "");
Expect(0, 7223, '\P{lepcha}', "");
Expect(1, 7223, '\P{^lepcha}', "");
Expect(0, 7167, '\p{lepcha}', "");
Expect(1, 7167, '\p{^lepcha}', "");
Expect(1, 7167, '\P{lepcha}', "");
Expect(0, 7167, '\P{^lepcha}', "");
Expect(1, 7223, '\p{-LEPCHA}', "");
Expect(0, 7223, '\p{^-LEPCHA}', "");
Expect(0, 7223, '\P{-LEPCHA}', "");
Expect(1, 7223, '\P{^-LEPCHA}', "");
Expect(0, 7167, '\p{-LEPCHA}', "");
Expect(1, 7167, '\p{^-LEPCHA}', "");
Expect(1, 7167, '\P{-LEPCHA}', "");
Expect(0, 7167, '\P{^-LEPCHA}', "");
Error('\p{ 	Is/a/Lepcha}');
Error('\P{ 	Is/a/Lepcha}');
Expect(1, 7223, '\p{islepcha}', "");
Expect(0, 7223, '\p{^islepcha}', "");
Expect(0, 7223, '\P{islepcha}', "");
Expect(1, 7223, '\P{^islepcha}', "");
Expect(0, 7167, '\p{islepcha}', "");
Expect(1, 7167, '\p{^islepcha}', "");
Expect(1, 7167, '\P{islepcha}', "");
Expect(0, 7167, '\P{^islepcha}', "");
Expect(1, 7223, '\p{	IS-lepcha}', "");
Expect(0, 7223, '\p{^	IS-lepcha}', "");
Expect(0, 7223, '\P{	IS-lepcha}', "");
Expect(1, 7223, '\P{^	IS-lepcha}', "");
Expect(0, 7167, '\p{	IS-lepcha}', "");
Expect(1, 7167, '\p{^	IS-lepcha}', "");
Expect(1, 7167, '\P{	IS-lepcha}', "");
Expect(0, 7167, '\P{^	IS-lepcha}', "");
Error('\p{  lepc:=}');
Error('\P{  lepc:=}');
Expect(1, 7223, '\p{lepc}', "");
Expect(0, 7223, '\p{^lepc}', "");
Expect(0, 7223, '\P{lepc}', "");
Expect(1, 7223, '\P{^lepc}', "");
Expect(0, 7167, '\p{lepc}', "");
Expect(1, 7167, '\p{^lepc}', "");
Expect(1, 7167, '\P{lepc}', "");
Expect(0, 7167, '\P{^lepc}', "");
Expect(1, 7223, '\p{	 lepc}', "");
Expect(0, 7223, '\p{^	 lepc}', "");
Expect(0, 7223, '\P{	 lepc}', "");
Expect(1, 7223, '\P{^	 lepc}', "");
Expect(0, 7167, '\p{	 lepc}', "");
Expect(1, 7167, '\p{^	 lepc}', "");
Expect(1, 7167, '\P{	 lepc}', "");
Expect(0, 7167, '\P{^	 lepc}', "");
Error('\p{ /a/Islepc}');
Error('\P{ /a/Islepc}');
Expect(1, 7223, '\p{islepc}', "");
Expect(0, 7223, '\p{^islepc}', "");
Expect(0, 7223, '\P{islepc}', "");
Expect(1, 7223, '\P{^islepc}', "");
Expect(0, 7167, '\p{islepc}', "");
Expect(1, 7167, '\p{^islepc}', "");
Expect(1, 7167, '\P{islepc}', "");
Expect(0, 7167, '\P{^islepc}', "");
Expect(1, 7223, '\p{	 is_Lepc}', "");
Expect(0, 7223, '\p{^	 is_Lepc}', "");
Expect(0, 7223, '\P{	 is_Lepc}', "");
Expect(1, 7223, '\P{^	 is_Lepc}', "");
Expect(0, 7167, '\p{	 is_Lepc}', "");
Expect(1, 7167, '\p{^	 is_Lepc}', "");
Expect(1, 7167, '\P{	 is_Lepc}', "");
Expect(0, 7167, '\P{^	 is_Lepc}', "");
Error('\p{:=	ideographic_Description Characters}');
Error('\P{:=	ideographic_Description Characters}');
Expect(1, 12287, '\p{ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{-ideographic-description-characters}', "");
Expect(0, 12287, '\p{^-ideographic-description-characters}', "");
Expect(0, 12287, '\P{-ideographic-description-characters}', "");
Expect(1, 12287, '\P{^-ideographic-description-characters}', "");
Expect(0, 12271, '\p{-ideographic-description-characters}', "");
Expect(1, 12271, '\p{^-ideographic-description-characters}', "");
Expect(1, 12271, '\P{-ideographic-description-characters}', "");
Expect(0, 12271, '\P{^-ideographic-description-characters}', "");
Error('\p{__is/a/IDEOGRAPHIC DESCRIPTION-Characters}');
Error('\P{__is/a/IDEOGRAPHIC DESCRIPTION-Characters}');
Expect(1, 12287, '\p{isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(0, 12287, '\p{^-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(0, 12287, '\P{-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(1, 12287, '\P{^-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(0, 12271, '\p{-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(1, 12271, '\p{^-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(1, 12271, '\P{-is-Ideographic_DESCRIPTION-Characters}', "");
Expect(0, 12271, '\P{^-is-Ideographic_DESCRIPTION-Characters}', "");
Error('\p{-In-ideographic:=DESCRIPTION-characters}');
Error('\P{-In-ideographic:=DESCRIPTION-characters}');
Expect(1, 12287, '\p{inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(0, 12287, '\p{^	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(0, 12287, '\P{	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(1, 12287, '\P{^	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(0, 12271, '\p{	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(1, 12271, '\p{^	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(1, 12271, '\P{	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Expect(0, 12271, '\P{^	-IN_Ideographic-DESCRIPTIONcharacters}', "");
Error('\p{_CombiningHALF_marks:=}');
Error('\P{_CombiningHALF_marks:=}');
Expect(1, 65071, '\p{combininghalfmarks}', "");
Expect(0, 65071, '\p{^combininghalfmarks}', "");
Expect(0, 65071, '\P{combininghalfmarks}', "");
Expect(1, 65071, '\P{^combininghalfmarks}', "");
Expect(0, 65055, '\p{combininghalfmarks}', "");
Expect(1, 65055, '\p{^combininghalfmarks}', "");
Expect(1, 65055, '\P{combininghalfmarks}', "");
Expect(0, 65055, '\P{^combininghalfmarks}', "");
Expect(1, 65071, '\p{-_combiningHalf Marks}', "");
Expect(0, 65071, '\p{^-_combiningHalf Marks}', "");
Expect(0, 65071, '\P{-_combiningHalf Marks}', "");
Expect(1, 65071, '\P{^-_combiningHalf Marks}', "");
Expect(0, 65055, '\p{-_combiningHalf Marks}', "");
Expect(1, 65055, '\p{^-_combiningHalf Marks}', "");
Expect(1, 65055, '\P{-_combiningHalf Marks}', "");
Expect(0, 65055, '\P{^-_combiningHalf Marks}', "");
Error('\p{ Is:=COMBINING	HalfMarks}');
Error('\P{ Is:=COMBINING	HalfMarks}');
Expect(1, 65071, '\p{iscombininghalfmarks}', "");
Expect(0, 65071, '\p{^iscombininghalfmarks}', "");
Expect(0, 65071, '\P{iscombininghalfmarks}', "");
Expect(1, 65071, '\P{^iscombininghalfmarks}', "");
Expect(0, 65055, '\p{iscombininghalfmarks}', "");
Expect(1, 65055, '\p{^iscombininghalfmarks}', "");
Expect(1, 65055, '\P{iscombininghalfmarks}', "");
Expect(0, 65055, '\P{^iscombininghalfmarks}', "");
Expect(1, 65071, '\p{	_IS	combining HALF_Marks}', "");
Expect(0, 65071, '\p{^	_IS	combining HALF_Marks}', "");
Expect(0, 65071, '\P{	_IS	combining HALF_Marks}', "");
Expect(1, 65071, '\P{^	_IS	combining HALF_Marks}', "");
Expect(0, 65055, '\p{	_IS	combining HALF_Marks}', "");
Expect(1, 65055, '\p{^	_IS	combining HALF_Marks}', "");
Expect(1, 65055, '\P{	_IS	combining HALF_Marks}', "");
Expect(0, 65055, '\P{^	_IS	combining HALF_Marks}', "");
Error('\p{_:=incombiningHalf-Marks}');
Error('\P{_:=incombiningHalf-Marks}');
Expect(1, 65071, '\p{incombininghalfmarks}', "");
Expect(0, 65071, '\p{^incombininghalfmarks}', "");
Expect(0, 65071, '\P{incombininghalfmarks}', "");
Expect(1, 65071, '\P{^incombininghalfmarks}', "");
Expect(0, 65055, '\p{incombininghalfmarks}', "");
Expect(1, 65055, '\p{^incombininghalfmarks}', "");
Expect(1, 65055, '\P{incombininghalfmarks}', "");
Expect(0, 65055, '\P{^incombininghalfmarks}', "");
Expect(1, 65071, '\p{	-inCombining-Half-Marks}', "");
Expect(0, 65071, '\p{^	-inCombining-Half-Marks}', "");
Expect(0, 65071, '\P{	-inCombining-Half-Marks}', "");
Expect(1, 65071, '\P{^	-inCombining-Half-Marks}', "");
Expect(0, 65055, '\p{	-inCombining-Half-Marks}', "");
Expect(1, 65055, '\p{^	-inCombining-Half-Marks}', "");
Expect(1, 65055, '\P{	-inCombining-Half-Marks}', "");
Expect(0, 65055, '\P{^	-inCombining-Half-Marks}', "");
Error('\p{/a/	 oriya}');
Error('\P{/a/	 oriya}');
Expect(1, 2819, '\p{oriya}', "");
Expect(0, 2819, '\p{^oriya}', "");
Expect(0, 2819, '\P{oriya}', "");
Expect(1, 2819, '\P{^oriya}', "");
Expect(0, 2816, '\p{oriya}', "");
Expect(1, 2816, '\p{^oriya}', "");
Expect(1, 2816, '\P{oriya}', "");
Expect(0, 2816, '\P{^oriya}', "");
Expect(1, 2819, '\p{ Oriya}', "");
Expect(0, 2819, '\p{^ Oriya}', "");
Expect(0, 2819, '\P{ Oriya}', "");
Expect(1, 2819, '\P{^ Oriya}', "");
Expect(0, 2816, '\p{ Oriya}', "");
Expect(1, 2816, '\p{^ Oriya}', "");
Expect(1, 2816, '\P{ Oriya}', "");
Expect(0, 2816, '\P{^ Oriya}', "");
Error('\p{__is_Oriya/a/}');
Error('\P{__is_Oriya/a/}');
Expect(1, 2819, '\p{isoriya}', "");
Expect(0, 2819, '\p{^isoriya}', "");
Expect(0, 2819, '\P{isoriya}', "");
Expect(1, 2819, '\P{^isoriya}', "");
Expect(0, 2816, '\p{isoriya}', "");
Expect(1, 2816, '\p{^isoriya}', "");
Expect(1, 2816, '\P{isoriya}', "");
Expect(0, 2816, '\P{^isoriya}', "");
Expect(1, 2819, '\p{ -is	Oriya}', "");
Expect(0, 2819, '\p{^ -is	Oriya}', "");
Expect(0, 2819, '\P{ -is	Oriya}', "");
Expect(1, 2819, '\P{^ -is	Oriya}', "");
Expect(0, 2816, '\p{ -is	Oriya}', "");
Expect(1, 2816, '\p{^ -is	Oriya}', "");
Expect(1, 2816, '\P{ -is	Oriya}', "");
Expect(0, 2816, '\P{^ -is	Oriya}', "");
Error('\p{-/a/Orya}');
Error('\P{-/a/Orya}');
Expect(1, 2819, '\p{orya}', "");
Expect(0, 2819, '\p{^orya}', "");
Expect(0, 2819, '\P{orya}', "");
Expect(1, 2819, '\P{^orya}', "");
Expect(0, 2816, '\p{orya}', "");
Expect(1, 2816, '\p{^orya}', "");
Expect(1, 2816, '\P{orya}', "");
Expect(0, 2816, '\P{^orya}', "");
Expect(1, 2819, '\p{ -Orya}', "");
Expect(0, 2819, '\p{^ -Orya}', "");
Expect(0, 2819, '\P{ -Orya}', "");
Expect(1, 2819, '\P{^ -Orya}', "");
Expect(0, 2816, '\p{ -Orya}', "");
Expect(1, 2816, '\p{^ -Orya}', "");
Expect(1, 2816, '\P{ -Orya}', "");
Expect(0, 2816, '\P{^ -Orya}', "");
Error('\p{ :=Is	ORYA}');
Error('\P{ :=Is	ORYA}');
Expect(1, 2819, '\p{isorya}', "");
Expect(0, 2819, '\p{^isorya}', "");
Expect(0, 2819, '\P{isorya}', "");
Expect(1, 2819, '\P{^isorya}', "");
Expect(0, 2816, '\p{isorya}', "");
Expect(1, 2816, '\p{^isorya}', "");
Expect(1, 2816, '\P{isorya}', "");
Expect(0, 2816, '\P{^isorya}', "");
Expect(1, 2819, '\p{is ORYA}', "");
Expect(0, 2819, '\p{^is ORYA}', "");
Expect(0, 2819, '\P{is ORYA}', "");
Expect(1, 2819, '\P{^is ORYA}', "");
Expect(0, 2816, '\p{is ORYA}', "");
Expect(1, 2816, '\p{^is ORYA}', "");
Expect(1, 2816, '\P{is ORYA}', "");
Expect(0, 2816, '\P{^is ORYA}', "");
Error('\p{	:=Phonetic extensions}');
Error('\P{	:=Phonetic extensions}');
Expect(1, 7551, '\p{phoneticextensions}', "");
Expect(0, 7551, '\p{^phoneticextensions}', "");
Expect(0, 7551, '\P{phoneticextensions}', "");
Expect(1, 7551, '\P{^phoneticextensions}', "");
Expect(0, 7423, '\p{phoneticextensions}', "");
Expect(1, 7423, '\p{^phoneticextensions}', "");
Expect(1, 7423, '\P{phoneticextensions}', "");
Expect(0, 7423, '\P{^phoneticextensions}', "");
Expect(1, 7551, '\p{Phonetic	extensions}', "");
Expect(0, 7551, '\p{^Phonetic	extensions}', "");
Expect(0, 7551, '\P{Phonetic	extensions}', "");
Expect(1, 7551, '\P{^Phonetic	extensions}', "");
Expect(0, 7423, '\p{Phonetic	extensions}', "");
Expect(1, 7423, '\p{^Phonetic	extensions}', "");
Expect(1, 7423, '\P{Phonetic	extensions}', "");
Expect(0, 7423, '\P{^Phonetic	extensions}', "");
Error('\p{ Is/a/PhoneticExtensions}');
Error('\P{ Is/a/PhoneticExtensions}');
Expect(1, 7551, '\p{isphoneticextensions}', "");
Expect(0, 7551, '\p{^isphoneticextensions}', "");
Expect(0, 7551, '\P{isphoneticextensions}', "");
Expect(1, 7551, '\P{^isphoneticextensions}', "");
Expect(0, 7423, '\p{isphoneticextensions}', "");
Expect(1, 7423, '\p{^isphoneticextensions}', "");
Expect(1, 7423, '\P{isphoneticextensions}', "");
Expect(0, 7423, '\P{^isphoneticextensions}', "");
Expect(1, 7551, '\p{-isphonetic_Extensions}', "");
Expect(0, 7551, '\p{^-isphonetic_Extensions}', "");
Expect(0, 7551, '\P{-isphonetic_Extensions}', "");
Expect(1, 7551, '\P{^-isphonetic_Extensions}', "");
Expect(0, 7423, '\p{-isphonetic_Extensions}', "");
Expect(1, 7423, '\p{^-isphonetic_Extensions}', "");
Expect(1, 7423, '\P{-isphonetic_Extensions}', "");
Expect(0, 7423, '\P{^-isphonetic_Extensions}', "");
Error('\p{ /a/in-PHONETIC_Extensions}');
Error('\P{ /a/in-PHONETIC_Extensions}');
Expect(1, 7551, '\p{inphoneticextensions}', "");
Expect(0, 7551, '\p{^inphoneticextensions}', "");
Expect(0, 7551, '\P{inphoneticextensions}', "");
Expect(1, 7551, '\P{^inphoneticextensions}', "");
Expect(0, 7423, '\p{inphoneticextensions}', "");
Expect(1, 7423, '\p{^inphoneticextensions}', "");
Expect(1, 7423, '\P{inphoneticextensions}', "");
Expect(0, 7423, '\P{^inphoneticextensions}', "");
Expect(1, 7551, '\p{	-in Phonetic	Extensions}', "");
Expect(0, 7551, '\p{^	-in Phonetic	Extensions}', "");
Expect(0, 7551, '\P{	-in Phonetic	Extensions}', "");
Expect(1, 7551, '\P{^	-in Phonetic	Extensions}', "");
Expect(0, 7423, '\p{	-in Phonetic	Extensions}', "");
Expect(1, 7423, '\p{^	-in Phonetic	Extensions}', "");
Expect(1, 7423, '\P{	-in Phonetic	Extensions}', "");
Expect(0, 7423, '\P{^	-in Phonetic	Extensions}', "");
Error('\p{ /a/Grapheme Extend}');
Error('\P{ /a/Grapheme Extend}');
Expect(1, 879, '\p{graphemeextend}', "");
Expect(0, 879, '\p{^graphemeextend}', "");
Expect(0, 879, '\P{graphemeextend}', "");
Expect(1, 879, '\P{^graphemeextend}', "");
Expect(0, 767, '\p{graphemeextend}', "");
Expect(1, 767, '\p{^graphemeextend}', "");
Expect(1, 767, '\P{graphemeextend}', "");
Expect(0, 767, '\P{^graphemeextend}', "");
Expect(1, 879, '\p{	grapheme_extend}', "");
Expect(0, 879, '\p{^	grapheme_extend}', "");
Expect(0, 879, '\P{	grapheme_extend}', "");
Expect(1, 879, '\P{^	grapheme_extend}', "");
Expect(0, 767, '\p{	grapheme_extend}', "");
Expect(1, 767, '\p{^	grapheme_extend}', "");
Expect(1, 767, '\P{	grapheme_extend}', "");
Expect(0, 767, '\P{^	grapheme_extend}', "");
Error('\p{--IS_Grapheme Extend/a/}');
Error('\P{--IS_Grapheme Extend/a/}');
Expect(1, 879, '\p{isgraphemeextend}', "");
Expect(0, 879, '\p{^isgraphemeextend}', "");
Expect(0, 879, '\P{isgraphemeextend}', "");
Expect(1, 879, '\P{^isgraphemeextend}', "");
Expect(0, 767, '\p{isgraphemeextend}', "");
Expect(1, 767, '\p{^isgraphemeextend}', "");
Expect(1, 767, '\P{isgraphemeextend}', "");
Expect(0, 767, '\P{^isgraphemeextend}', "");
Expect(1, 879, '\p{	-Is-Grapheme_Extend}', "");
Expect(0, 879, '\p{^	-Is-Grapheme_Extend}', "");
Expect(0, 879, '\P{	-Is-Grapheme_Extend}', "");
Expect(1, 879, '\P{^	-Is-Grapheme_Extend}', "");
Expect(0, 767, '\p{	-Is-Grapheme_Extend}', "");
Expect(1, 767, '\p{^	-Is-Grapheme_Extend}', "");
Expect(1, 767, '\P{	-Is-Grapheme_Extend}', "");
Expect(0, 767, '\P{^	-Is-Grapheme_Extend}', "");
Error('\p{-/a/Gr_Ext}');
Error('\P{-/a/Gr_Ext}');
Expect(1, 879, '\p{grext}', "");
Expect(0, 879, '\p{^grext}', "");
Expect(0, 879, '\P{grext}', "");
Expect(1, 879, '\P{^grext}', "");
Expect(0, 767, '\p{grext}', "");
Expect(1, 767, '\p{^grext}', "");
Expect(1, 767, '\P{grext}', "");
Expect(0, 767, '\P{^grext}', "");
Expect(1, 879, '\p{GR EXT}', "");
Expect(0, 879, '\p{^GR EXT}', "");
Expect(0, 879, '\P{GR EXT}', "");
Expect(1, 879, '\P{^GR EXT}', "");
Expect(0, 767, '\p{GR EXT}', "");
Expect(1, 767, '\p{^GR EXT}', "");
Expect(1, 767, '\P{GR EXT}', "");
Expect(0, 767, '\P{^GR EXT}', "");
Error('\p{-is:=GR Ext}');
Error('\P{-is:=GR Ext}');
Expect(1, 879, '\p{isgrext}', "");
Expect(0, 879, '\p{^isgrext}', "");
Expect(0, 879, '\P{isgrext}', "");
Expect(1, 879, '\P{^isgrext}', "");
Expect(0, 767, '\p{isgrext}', "");
Expect(1, 767, '\p{^isgrext}', "");
Expect(1, 767, '\P{isgrext}', "");
Expect(0, 767, '\P{^isgrext}', "");
Expect(1, 879, '\p{_Is-GrEXT}', "");
Expect(0, 879, '\p{^_Is-GrEXT}', "");
Expect(0, 879, '\P{_Is-GrEXT}', "");
Expect(1, 879, '\P{^_Is-GrEXT}', "");
Expect(0, 767, '\p{_Is-GrEXT}', "");
Expect(1, 767, '\p{^_Is-GrEXT}', "");
Expect(1, 767, '\P{_Is-GrEXT}', "");
Expect(0, 767, '\P{^_Is-GrEXT}', "");
Error('\p{-default IgnorableCode-Point/a/}');
Error('\P{-default IgnorableCode-Point/a/}');
Expect(1, 173, '\p{defaultignorablecodepoint}', "");
Expect(0, 173, '\p{^defaultignorablecodepoint}', "");
Expect(0, 173, '\P{defaultignorablecodepoint}', "");
Expect(1, 173, '\P{^defaultignorablecodepoint}', "");
Expect(0, 172, '\p{defaultignorablecodepoint}', "");
Expect(1, 172, '\p{^defaultignorablecodepoint}', "");
Expect(1, 172, '\P{defaultignorablecodepoint}', "");
Expect(0, 172, '\P{^defaultignorablecodepoint}', "");
Expect(1, 173, '\p{DEFAULT	ignorableCode	Point}', "");
Expect(0, 173, '\p{^DEFAULT	ignorableCode	Point}', "");
Expect(0, 173, '\P{DEFAULT	ignorableCode	Point}', "");
Expect(1, 173, '\P{^DEFAULT	ignorableCode	Point}', "");
Expect(0, 172, '\p{DEFAULT	ignorableCode	Point}', "");
Expect(1, 172, '\p{^DEFAULT	ignorableCode	Point}', "");
Expect(1, 172, '\P{DEFAULT	ignorableCode	Point}', "");
Expect(0, 172, '\P{^DEFAULT	ignorableCode	Point}', "");
Error('\p{ Is-Default:=Ignorable-code POINT}');
Error('\P{ Is-Default:=Ignorable-code POINT}');
Expect(1, 173, '\p{isdefaultignorablecodepoint}', "");
Expect(0, 173, '\p{^isdefaultignorablecodepoint}', "");
Expect(0, 173, '\P{isdefaultignorablecodepoint}', "");
Expect(1, 173, '\P{^isdefaultignorablecodepoint}', "");
Expect(0, 172, '\p{isdefaultignorablecodepoint}', "");
Expect(1, 172, '\p{^isdefaultignorablecodepoint}', "");
Expect(1, 172, '\P{isdefaultignorablecodepoint}', "");
Expect(0, 172, '\P{^isdefaultignorablecodepoint}', "");
Expect(1, 173, '\p{-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(0, 173, '\p{^-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(0, 173, '\P{-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(1, 173, '\P{^-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(0, 172, '\p{-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(1, 172, '\p{^-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(1, 172, '\P{-	IS DEFAULT-ignorable	CODE_POINT}', "");
Expect(0, 172, '\P{^-	IS DEFAULT-ignorable	CODE_POINT}', "");
Error('\p{_:=DI}');
Error('\P{_:=DI}');
Expect(1, 173, '\p{di}', "");
Expect(0, 173, '\p{^di}', "");
Expect(0, 173, '\P{di}', "");
Expect(1, 173, '\P{^di}', "");
Expect(0, 172, '\p{di}', "");
Expect(1, 172, '\p{^di}', "");
Expect(1, 172, '\P{di}', "");
Expect(0, 172, '\P{^di}', "");
Expect(1, 173, '\p{ di}', "");
Expect(0, 173, '\p{^ di}', "");
Expect(0, 173, '\P{ di}', "");
Expect(1, 173, '\P{^ di}', "");
Expect(0, 172, '\p{ di}', "");
Expect(1, 172, '\p{^ di}', "");
Expect(1, 172, '\P{ di}', "");
Expect(0, 172, '\P{^ di}', "");
Error('\p{/a/	 Is	DI}');
Error('\P{/a/	 Is	DI}');
Expect(1, 173, '\p{isdi}', "");
Expect(0, 173, '\p{^isdi}', "");
Expect(0, 173, '\P{isdi}', "");
Expect(1, 173, '\P{^isdi}', "");
Expect(0, 172, '\p{isdi}', "");
Expect(1, 172, '\p{^isdi}', "");
Expect(1, 172, '\P{isdi}', "");
Expect(0, 172, '\P{^isdi}', "");
Expect(1, 173, '\p{_IS-DI}', "");
Expect(0, 173, '\p{^_IS-DI}', "");
Expect(0, 173, '\P{_IS-DI}', "");
Expect(1, 173, '\P{^_IS-DI}', "");
Expect(0, 172, '\p{_IS-DI}', "");
Expect(1, 172, '\p{^_IS-DI}', "");
Expect(1, 172, '\P{_IS-DI}', "");
Expect(0, 172, '\P{^_IS-DI}', "");
Error('\p{ IDstart/a/}');
Error('\P{ IDstart/a/}');
Expect(1, 90, '\p{idstart}', "");
Expect(0, 90, '\p{^idstart}', "");
Expect(0, 90, '\P{idstart}', "");
Expect(1, 90, '\P{^idstart}', "");
Expect(0, 64, '\p{idstart}', "");
Expect(1, 64, '\p{^idstart}', "");
Expect(1, 64, '\P{idstart}', "");
Expect(0, 64, '\P{^idstart}', "");
Expect(1, 90, '\p{--ID	Start}', "");
Expect(0, 90, '\p{^--ID	Start}', "");
Expect(0, 90, '\P{--ID	Start}', "");
Expect(1, 90, '\P{^--ID	Start}', "");
Expect(0, 64, '\p{--ID	Start}', "");
Expect(1, 64, '\p{^--ID	Start}', "");
Expect(1, 64, '\P{--ID	Start}', "");
Expect(0, 64, '\P{^--ID	Start}', "");
Error('\p{:=IS ID_START}');
Error('\P{:=IS ID_START}');
Expect(1, 90, '\p{isidstart}', "");
Expect(0, 90, '\p{^isidstart}', "");
Expect(0, 90, '\P{isidstart}', "");
Expect(1, 90, '\P{^isidstart}', "");
Expect(0, 64, '\p{isidstart}', "");
Expect(1, 64, '\p{^isidstart}', "");
Expect(1, 64, '\P{isidstart}', "");
Expect(0, 64, '\P{^isidstart}', "");
Expect(1, 90, '\p{-Is	ID_Start}', "");
Expect(0, 90, '\p{^-Is	ID_Start}', "");
Expect(0, 90, '\P{-Is	ID_Start}', "");
Expect(1, 90, '\P{^-Is	ID_Start}', "");
Expect(0, 64, '\p{-Is	ID_Start}', "");
Expect(1, 64, '\p{^-Is	ID_Start}', "");
Expect(1, 64, '\P{-Is	ID_Start}', "");
Expect(0, 64, '\P{^-Is	ID_Start}', "");
Error('\p{:=-	IDS}');
Error('\P{:=-	IDS}');
Expect(1, 90, '\p{ids}', "");
Expect(0, 90, '\p{^ids}', "");
Expect(0, 90, '\P{ids}', "");
Expect(1, 90, '\P{^ids}', "");
Expect(0, 64, '\p{ids}', "");
Expect(1, 64, '\p{^ids}', "");
Expect(1, 64, '\P{ids}', "");
Expect(0, 64, '\P{^ids}', "");
Expect(1, 90, '\p{ -IDS}', "");
Expect(0, 90, '\p{^ -IDS}', "");
Expect(0, 90, '\P{ -IDS}', "");
Expect(1, 90, '\P{^ -IDS}', "");
Expect(0, 64, '\p{ -IDS}', "");
Expect(1, 64, '\p{^ -IDS}', "");
Expect(1, 64, '\P{ -IDS}', "");
Expect(0, 64, '\P{^ -IDS}', "");
Error('\p{:=IS IDS}');
Error('\P{:=IS IDS}');
Expect(1, 90, '\p{isids}', "");
Expect(0, 90, '\p{^isids}', "");
Expect(0, 90, '\P{isids}', "");
Expect(1, 90, '\P{^isids}', "");
Expect(0, 64, '\p{isids}', "");
Expect(1, 64, '\p{^isids}', "");
Expect(1, 64, '\P{isids}', "");
Expect(0, 64, '\P{^isids}', "");
Expect(1, 90, '\p{		is IDS}', "");
Expect(0, 90, '\p{^		is IDS}', "");
Expect(0, 90, '\P{		is IDS}', "");
Expect(1, 90, '\P{^		is IDS}', "");
Expect(0, 64, '\p{		is IDS}', "");
Expect(1, 64, '\p{^		is IDS}', "");
Expect(1, 64, '\P{		is IDS}', "");
Expect(0, 64, '\P{^		is IDS}', "");
Error('\p{		Cyrillic/a/Supplement}');
Error('\P{		Cyrillic/a/Supplement}');
Expect(1, 1327, '\p{cyrillicsupplement}', "");
Expect(0, 1327, '\p{^cyrillicsupplement}', "");
Expect(0, 1327, '\P{cyrillicsupplement}', "");
Expect(1, 1327, '\P{^cyrillicsupplement}', "");
Expect(0, 1279, '\p{cyrillicsupplement}', "");
Expect(1, 1279, '\p{^cyrillicsupplement}', "");
Expect(1, 1279, '\P{cyrillicsupplement}', "");
Expect(0, 1279, '\P{^cyrillicsupplement}', "");
Expect(1, 1327, '\p{	-cyrillic	SUPPLEMENT}', "");
Expect(0, 1327, '\p{^	-cyrillic	SUPPLEMENT}', "");
Expect(0, 1327, '\P{	-cyrillic	SUPPLEMENT}', "");
Expect(1, 1327, '\P{^	-cyrillic	SUPPLEMENT}', "");
Expect(0, 1279, '\p{	-cyrillic	SUPPLEMENT}', "");
Expect(1, 1279, '\p{^	-cyrillic	SUPPLEMENT}', "");
Expect(1, 1279, '\P{	-cyrillic	SUPPLEMENT}', "");
Expect(0, 1279, '\P{^	-cyrillic	SUPPLEMENT}', "");
Error('\p{_:=IS_Cyrillic	Supplement}');
Error('\P{_:=IS_Cyrillic	Supplement}');
Expect(1, 1327, '\p{iscyrillicsupplement}', "");
Expect(0, 1327, '\p{^iscyrillicsupplement}', "");
Expect(0, 1327, '\P{iscyrillicsupplement}', "");
Expect(1, 1327, '\P{^iscyrillicsupplement}', "");
Expect(0, 1279, '\p{iscyrillicsupplement}', "");
Expect(1, 1279, '\p{^iscyrillicsupplement}', "");
Expect(1, 1279, '\P{iscyrillicsupplement}', "");
Expect(0, 1279, '\P{^iscyrillicsupplement}', "");
Expect(1, 1327, '\p{ Is_CYRILLIC-Supplement}', "");
Expect(0, 1327, '\p{^ Is_CYRILLIC-Supplement}', "");
Expect(0, 1327, '\P{ Is_CYRILLIC-Supplement}', "");
Expect(1, 1327, '\P{^ Is_CYRILLIC-Supplement}', "");
Expect(0, 1279, '\p{ Is_CYRILLIC-Supplement}', "");
Expect(1, 1279, '\p{^ Is_CYRILLIC-Supplement}', "");
Expect(1, 1279, '\P{ Is_CYRILLIC-Supplement}', "");
Expect(0, 1279, '\P{^ Is_CYRILLIC-Supplement}', "");
Error('\p{/a/Incyrillic Supplement}');
Error('\P{/a/Incyrillic Supplement}');
Expect(1, 1327, '\p{incyrillicsupplement}', "");
Expect(0, 1327, '\p{^incyrillicsupplement}', "");
Expect(0, 1327, '\P{incyrillicsupplement}', "");
Expect(1, 1327, '\P{^incyrillicsupplement}', "");
Expect(0, 1279, '\p{incyrillicsupplement}', "");
Expect(1, 1279, '\p{^incyrillicsupplement}', "");
Expect(1, 1279, '\P{incyrillicsupplement}', "");
Expect(0, 1279, '\P{^incyrillicsupplement}', "");
Expect(1, 1327, '\p{--In CYRILLICSupplement}', "");
Expect(0, 1327, '\p{^--In CYRILLICSupplement}', "");
Expect(0, 1327, '\P{--In CYRILLICSupplement}', "");
Expect(1, 1327, '\P{^--In CYRILLICSupplement}', "");
Expect(0, 1279, '\p{--In CYRILLICSupplement}', "");
Expect(1, 1279, '\p{^--In CYRILLICSupplement}', "");
Expect(1, 1279, '\P{--In CYRILLICSupplement}', "");
Expect(0, 1279, '\P{^--In CYRILLICSupplement}', "");
Error('\p{ -Cyrillic/a/Supplementary}');
Error('\P{ -Cyrillic/a/Supplementary}');
Expect(1, 1327, '\p{cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^cyrillicsupplementary}', "");
Expect(0, 1327, '\P{cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^cyrillicsupplementary}', "");
Expect(0, 1279, '\p{cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^cyrillicsupplementary}', "");
Expect(1, 1279, '\P{cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^cyrillicsupplementary}', "");
Expect(1, 1327, '\p{ CYRILLIC_Supplementary}', "");
Expect(0, 1327, '\p{^ CYRILLIC_Supplementary}', "");
Expect(0, 1327, '\P{ CYRILLIC_Supplementary}', "");
Expect(1, 1327, '\P{^ CYRILLIC_Supplementary}', "");
Expect(0, 1279, '\p{ CYRILLIC_Supplementary}', "");
Expect(1, 1279, '\p{^ CYRILLIC_Supplementary}', "");
Expect(1, 1279, '\P{ CYRILLIC_Supplementary}', "");
Expect(0, 1279, '\P{^ CYRILLIC_Supplementary}', "");
Error('\p{ :=Is CYRILLIC_supplementary}');
Error('\P{ :=Is CYRILLIC_supplementary}');
Expect(1, 1327, '\p{iscyrillicsupplementary}', "");
Expect(0, 1327, '\p{^iscyrillicsupplementary}', "");
Expect(0, 1327, '\P{iscyrillicsupplementary}', "");
Expect(1, 1327, '\P{^iscyrillicsupplementary}', "");
Expect(0, 1279, '\p{iscyrillicsupplementary}', "");
Expect(1, 1279, '\p{^iscyrillicsupplementary}', "");
Expect(1, 1279, '\P{iscyrillicsupplementary}', "");
Expect(0, 1279, '\P{^iscyrillicsupplementary}', "");
Expect(1, 1327, '\p{ Is_CyrillicSUPPLEMENTARY}', "");
Expect(0, 1327, '\p{^ Is_CyrillicSUPPLEMENTARY}', "");
Expect(0, 1327, '\P{ Is_CyrillicSUPPLEMENTARY}', "");
Expect(1, 1327, '\P{^ Is_CyrillicSUPPLEMENTARY}', "");
Expect(0, 1279, '\p{ Is_CyrillicSUPPLEMENTARY}', "");
Expect(1, 1279, '\p{^ Is_CyrillicSUPPLEMENTARY}', "");
Expect(1, 1279, '\P{ Is_CyrillicSUPPLEMENTARY}', "");
Expect(0, 1279, '\P{^ Is_CyrillicSUPPLEMENTARY}', "");
Error('\p{_:=inCYRILLIC-Supplementary}');
Error('\P{_:=inCYRILLIC-Supplementary}');
Expect(1, 1327, '\p{incyrillicsupplementary}', "");
Expect(0, 1327, '\p{^incyrillicsupplementary}', "");
Expect(0, 1327, '\P{incyrillicsupplementary}', "");
Expect(1, 1327, '\P{^incyrillicsupplementary}', "");
Expect(0, 1279, '\p{incyrillicsupplementary}', "");
Expect(1, 1279, '\p{^incyrillicsupplementary}', "");
Expect(1, 1279, '\P{incyrillicsupplementary}', "");
Expect(0, 1279, '\P{^incyrillicsupplementary}', "");
Expect(1, 1327, '\p{-_IN	CyrillicSupplementary}', "");
Expect(0, 1327, '\p{^-_IN	CyrillicSupplementary}', "");
Expect(0, 1327, '\P{-_IN	CyrillicSupplementary}', "");
Expect(1, 1327, '\P{^-_IN	CyrillicSupplementary}', "");
Expect(0, 1279, '\p{-_IN	CyrillicSupplementary}', "");
Expect(1, 1279, '\p{^-_IN	CyrillicSupplementary}', "");
Expect(1, 1279, '\P{-_IN	CyrillicSupplementary}', "");
Expect(0, 1279, '\P{^-_IN	CyrillicSupplementary}', "");
Error('\p{ -geometric:=Shapes}');
Error('\P{ -geometric:=Shapes}');
Expect(1, 9727, '\p{geometricshapes}', "");
Expect(0, 9727, '\p{^geometricshapes}', "");
Expect(0, 9727, '\P{geometricshapes}', "");
Expect(1, 9727, '\P{^geometricshapes}', "");
Expect(0, 9631, '\p{geometricshapes}', "");
Expect(1, 9631, '\p{^geometricshapes}', "");
Expect(1, 9631, '\P{geometricshapes}', "");
Expect(0, 9631, '\P{^geometricshapes}', "");
Expect(1, 9727, '\p{ 	GeometricShapes}', "");
Expect(0, 9727, '\p{^ 	GeometricShapes}', "");
Expect(0, 9727, '\P{ 	GeometricShapes}', "");
Expect(1, 9727, '\P{^ 	GeometricShapes}', "");
Expect(0, 9631, '\p{ 	GeometricShapes}', "");
Expect(1, 9631, '\p{^ 	GeometricShapes}', "");
Expect(1, 9631, '\P{ 	GeometricShapes}', "");
Expect(0, 9631, '\P{^ 	GeometricShapes}', "");
Error('\p{		Is:=Geometric	shapes}');
Error('\P{		Is:=Geometric	shapes}');
Expect(1, 9727, '\p{isgeometricshapes}', "");
Expect(0, 9727, '\p{^isgeometricshapes}', "");
Expect(0, 9727, '\P{isgeometricshapes}', "");
Expect(1, 9727, '\P{^isgeometricshapes}', "");
Expect(0, 9631, '\p{isgeometricshapes}', "");
Expect(1, 9631, '\p{^isgeometricshapes}', "");
Expect(1, 9631, '\P{isgeometricshapes}', "");
Expect(0, 9631, '\P{^isgeometricshapes}', "");
Expect(1, 9727, '\p{  Is Geometric_Shapes}', "");
Expect(0, 9727, '\p{^  Is Geometric_Shapes}', "");
Expect(0, 9727, '\P{  Is Geometric_Shapes}', "");
Expect(1, 9727, '\P{^  Is Geometric_Shapes}', "");
Expect(0, 9631, '\p{  Is Geometric_Shapes}', "");
Expect(1, 9631, '\p{^  Is Geometric_Shapes}', "");
Expect(1, 9631, '\P{  Is Geometric_Shapes}', "");
Expect(0, 9631, '\P{^  Is Geometric_Shapes}', "");
Error('\p{_in_GeometricSHAPES:=}');
Error('\P{_in_GeometricSHAPES:=}');
Expect(1, 9727, '\p{ingeometricshapes}', "");
Expect(0, 9727, '\p{^ingeometricshapes}', "");
Expect(0, 9727, '\P{ingeometricshapes}', "");
Expect(1, 9727, '\P{^ingeometricshapes}', "");
Expect(0, 9631, '\p{ingeometricshapes}', "");
Expect(1, 9631, '\p{^ingeometricshapes}', "");
Expect(1, 9631, '\P{ingeometricshapes}', "");
Expect(0, 9631, '\P{^ingeometricshapes}', "");
Expect(1, 9727, '\p{_inGeometric SHAPES}', "");
Expect(0, 9727, '\p{^_inGeometric SHAPES}', "");
Expect(0, 9727, '\P{_inGeometric SHAPES}', "");
Expect(1, 9727, '\P{^_inGeometric SHAPES}', "");
Expect(0, 9631, '\p{_inGeometric SHAPES}', "");
Expect(1, 9631, '\p{^_inGeometric SHAPES}', "");
Expect(1, 9631, '\P{_inGeometric SHAPES}', "");
Expect(0, 9631, '\P{^_inGeometric SHAPES}', "");
Error('\p{/a/latin Extended D}');
Error('\P{/a/latin Extended D}');
Expect(1, 43007, '\p{latinextendedd}', "");
Expect(0, 43007, '\p{^latinextendedd}', "");
Expect(0, 43007, '\P{latinextendedd}', "");
Expect(1, 43007, '\P{^latinextendedd}', "");
Expect(0, 42783, '\p{latinextendedd}', "");
Expect(1, 42783, '\p{^latinextendedd}', "");
Expect(1, 42783, '\P{latinextendedd}', "");
Expect(0, 42783, '\P{^latinextendedd}', "");
Expect(1, 43007, '\p{	Latin-Extended	D}', "");
Expect(0, 43007, '\p{^	Latin-Extended	D}', "");
Expect(0, 43007, '\P{	Latin-Extended	D}', "");
Expect(1, 43007, '\P{^	Latin-Extended	D}', "");
Expect(0, 42783, '\p{	Latin-Extended	D}', "");
Expect(1, 42783, '\p{^	Latin-Extended	D}', "");
Expect(1, 42783, '\P{	Latin-Extended	D}', "");
Expect(0, 42783, '\P{^	Latin-Extended	D}', "");
Error('\p{ Is/a/Latinextended-D}');
Error('\P{ Is/a/Latinextended-D}');
Expect(1, 43007, '\p{islatinextendedd}', "");
Expect(0, 43007, '\p{^islatinextendedd}', "");
Expect(0, 43007, '\P{islatinextendedd}', "");
Expect(1, 43007, '\P{^islatinextendedd}', "");
Expect(0, 42783, '\p{islatinextendedd}', "");
Expect(1, 42783, '\p{^islatinextendedd}', "");
Expect(1, 42783, '\P{islatinextendedd}', "");
Expect(0, 42783, '\P{^islatinextendedd}', "");
Expect(1, 43007, '\p{ Is-Latin-EXTENDED_D}', "");
Expect(0, 43007, '\p{^ Is-Latin-EXTENDED_D}', "");
Expect(0, 43007, '\P{ Is-Latin-EXTENDED_D}', "");
Expect(1, 43007, '\P{^ Is-Latin-EXTENDED_D}', "");
Expect(0, 42783, '\p{ Is-Latin-EXTENDED_D}', "");
Expect(1, 42783, '\p{^ Is-Latin-EXTENDED_D}', "");
Expect(1, 42783, '\P{ Is-Latin-EXTENDED_D}', "");
Expect(0, 42783, '\P{^ Is-Latin-EXTENDED_D}', "");
Error('\p{In LATIN/a/extended-D}');
Error('\P{In LATIN/a/extended-D}');
Expect(1, 43007, '\p{inlatinextendedd}', "");
Expect(0, 43007, '\p{^inlatinextendedd}', "");
Expect(0, 43007, '\P{inlatinextendedd}', "");
Expect(1, 43007, '\P{^inlatinextendedd}', "");
Expect(0, 42783, '\p{inlatinextendedd}', "");
Expect(1, 42783, '\p{^inlatinextendedd}', "");
Expect(1, 42783, '\P{inlatinextendedd}', "");
Expect(0, 42783, '\P{^inlatinextendedd}', "");
Expect(1, 43007, '\p{_INlatin_Extended	D}', "");
Expect(0, 43007, '\p{^_INlatin_Extended	D}', "");
Expect(0, 43007, '\P{_INlatin_Extended	D}', "");
Expect(1, 43007, '\P{^_INlatin_Extended	D}', "");
Expect(0, 42783, '\p{_INlatin_Extended	D}', "");
Expect(1, 42783, '\p{^_INlatin_Extended	D}', "");
Expect(1, 42783, '\P{_INlatin_Extended	D}', "");
Expect(0, 42783, '\P{^_INlatin_Extended	D}', "");
Error('\p{:= -Buginese}');
Error('\P{:= -Buginese}');
Expect(1, 6683, '\p{buginese}', "");
Expect(0, 6683, '\p{^buginese}', "");
Expect(0, 6683, '\P{buginese}', "");
Expect(1, 6683, '\P{^buginese}', "");
Expect(0, 6655, '\p{buginese}', "");
Expect(1, 6655, '\p{^buginese}', "");
Expect(1, 6655, '\P{buginese}', "");
Expect(0, 6655, '\P{^buginese}', "");
Expect(1, 6683, '\p{ -Buginese}', "");
Expect(0, 6683, '\p{^ -Buginese}', "");
Expect(0, 6683, '\P{ -Buginese}', "");
Expect(1, 6683, '\P{^ -Buginese}', "");
Expect(0, 6655, '\p{ -Buginese}', "");
Expect(1, 6655, '\p{^ -Buginese}', "");
Expect(1, 6655, '\P{ -Buginese}', "");
Expect(0, 6655, '\P{^ -Buginese}', "");
Error('\p{	Is/a/BUGINESE}');
Error('\P{	Is/a/BUGINESE}');
Expect(1, 6683, '\p{isbuginese}', "");
Expect(0, 6683, '\p{^isbuginese}', "");
Expect(0, 6683, '\P{isbuginese}', "");
Expect(1, 6683, '\P{^isbuginese}', "");
Expect(0, 6655, '\p{isbuginese}', "");
Expect(1, 6655, '\p{^isbuginese}', "");
Expect(1, 6655, '\P{isbuginese}', "");
Expect(0, 6655, '\P{^isbuginese}', "");
Expect(1, 6683, '\p{	_IsBUGINESE}', "");
Expect(0, 6683, '\p{^	_IsBUGINESE}', "");
Expect(0, 6683, '\P{	_IsBUGINESE}', "");
Expect(1, 6683, '\P{^	_IsBUGINESE}', "");
Expect(0, 6655, '\p{	_IsBUGINESE}', "");
Expect(1, 6655, '\p{^	_IsBUGINESE}', "");
Expect(1, 6655, '\P{	_IsBUGINESE}', "");
Expect(0, 6655, '\P{^	_IsBUGINESE}', "");
Error('\p{:= 	BUGI}');
Error('\P{:= 	BUGI}');
Expect(1, 6683, '\p{bugi}', "");
Expect(0, 6683, '\p{^bugi}', "");
Expect(0, 6683, '\P{bugi}', "");
Expect(1, 6683, '\P{^bugi}', "");
Expect(0, 6655, '\p{bugi}', "");
Expect(1, 6655, '\p{^bugi}', "");
Expect(1, 6655, '\P{bugi}', "");
Expect(0, 6655, '\P{^bugi}', "");
Expect(1, 6683, '\p{	_BUGI}', "");
Expect(0, 6683, '\p{^	_BUGI}', "");
Expect(0, 6683, '\P{	_BUGI}', "");
Expect(1, 6683, '\P{^	_BUGI}', "");
Expect(0, 6655, '\p{	_BUGI}', "");
Expect(1, 6655, '\p{^	_BUGI}', "");
Expect(1, 6655, '\P{	_BUGI}', "");
Expect(0, 6655, '\P{^	_BUGI}', "");
Error('\p{	 is-bugi/a/}');
Error('\P{	 is-bugi/a/}');
Expect(1, 6683, '\p{isbugi}', "");
Expect(0, 6683, '\p{^isbugi}', "");
Expect(0, 6683, '\P{isbugi}', "");
Expect(1, 6683, '\P{^isbugi}', "");
Expect(0, 6655, '\p{isbugi}', "");
Expect(1, 6655, '\p{^isbugi}', "");
Expect(1, 6655, '\P{isbugi}', "");
Expect(0, 6655, '\P{^isbugi}', "");
Expect(1, 6683, '\p{_Is BUGI}', "");
Expect(0, 6683, '\p{^_Is BUGI}', "");
Expect(0, 6683, '\P{_Is BUGI}', "");
Expect(1, 6683, '\P{^_Is BUGI}', "");
Expect(0, 6655, '\p{_Is BUGI}', "");
Expect(1, 6655, '\p{^_Is BUGI}', "");
Expect(1, 6655, '\P{_Is BUGI}', "");
Expect(0, 6655, '\P{^_Is BUGI}', "");
Error('\p{	:=IN-malayalam}');
Error('\P{	:=IN-malayalam}');
Expect(1, 3455, '\p{inmalayalam}', "");
Expect(0, 3455, '\p{^inmalayalam}', "");
Expect(0, 3455, '\P{inmalayalam}', "");
Expect(1, 3455, '\P{^inmalayalam}', "");
Expect(0, 3327, '\p{inmalayalam}', "");
Expect(1, 3327, '\p{^inmalayalam}', "");
Expect(1, 3327, '\P{inmalayalam}', "");
Expect(0, 3327, '\P{^inmalayalam}', "");
Expect(1, 3455, '\p{	 in Malayalam}', "");
Expect(0, 3455, '\p{^	 in Malayalam}', "");
Expect(0, 3455, '\P{	 in Malayalam}', "");
Expect(1, 3455, '\P{^	 in Malayalam}', "");
Expect(0, 3327, '\p{	 in Malayalam}', "");
Expect(1, 3327, '\p{^	 in Malayalam}', "");
Expect(1, 3327, '\P{	 in Malayalam}', "");
Expect(0, 3327, '\P{^	 in Malayalam}', "");
Error('\p{ 	INSCRIPTIONAL/a/PAHLAVI}');
Error('\P{ 	INSCRIPTIONAL/a/PAHLAVI}');
Expect(1, 68466, '\p{inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{		Inscriptional Pahlavi}', "");
Expect(0, 68466, '\p{^		Inscriptional Pahlavi}', "");
Expect(0, 68466, '\P{		Inscriptional Pahlavi}', "");
Expect(1, 68466, '\P{^		Inscriptional Pahlavi}', "");
Expect(0, 68447, '\p{		Inscriptional Pahlavi}', "");
Expect(1, 68447, '\p{^		Inscriptional Pahlavi}', "");
Expect(1, 68447, '\P{		Inscriptional Pahlavi}', "");
Expect(0, 68447, '\P{^		Inscriptional Pahlavi}', "");
Error('\p{ -is:=INSCRIPTIONAL_Pahlavi}');
Error('\P{ -is:=INSCRIPTIONAL_Pahlavi}');
Expect(1, 68466, '\p{isinscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^isinscriptionalpahlavi}', "");
Expect(0, 68466, '\P{isinscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^isinscriptionalpahlavi}', "");
Expect(0, 68447, '\p{isinscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^isinscriptionalpahlavi}', "");
Expect(1, 68447, '\P{isinscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^isinscriptionalpahlavi}', "");
Expect(1, 68466, '\p{_IsInscriptional-Pahlavi}', "");
Expect(0, 68466, '\p{^_IsInscriptional-Pahlavi}', "");
Expect(0, 68466, '\P{_IsInscriptional-Pahlavi}', "");
Expect(1, 68466, '\P{^_IsInscriptional-Pahlavi}', "");
Expect(0, 68447, '\p{_IsInscriptional-Pahlavi}', "");
Expect(1, 68447, '\p{^_IsInscriptional-Pahlavi}', "");
Expect(1, 68447, '\P{_IsInscriptional-Pahlavi}', "");
Expect(0, 68447, '\P{^_IsInscriptional-Pahlavi}', "");
Error('\p{:=	_PHLI}');
Error('\P{:=	_PHLI}');
Expect(1, 68466, '\p{phli}', "");
Expect(0, 68466, '\p{^phli}', "");
Expect(0, 68466, '\P{phli}', "");
Expect(1, 68466, '\P{^phli}', "");
Expect(0, 68447, '\p{phli}', "");
Expect(1, 68447, '\p{^phli}', "");
Expect(1, 68447, '\P{phli}', "");
Expect(0, 68447, '\P{^phli}', "");
Expect(1, 68466, '\p{-PHLI}', "");
Expect(0, 68466, '\p{^-PHLI}', "");
Expect(0, 68466, '\P{-PHLI}', "");
Expect(1, 68466, '\P{^-PHLI}', "");
Expect(0, 68447, '\p{-PHLI}', "");
Expect(1, 68447, '\p{^-PHLI}', "");
Expect(1, 68447, '\P{-PHLI}', "");
Expect(0, 68447, '\P{^-PHLI}', "");
Error('\p{:=_IsPhli}');
Error('\P{:=_IsPhli}');
Expect(1, 68466, '\p{isphli}', "");
Expect(0, 68466, '\p{^isphli}', "");
Expect(0, 68466, '\P{isphli}', "");
Expect(1, 68466, '\P{^isphli}', "");
Expect(0, 68447, '\p{isphli}', "");
Expect(1, 68447, '\p{^isphli}', "");
Expect(1, 68447, '\P{isphli}', "");
Expect(0, 68447, '\P{^isphli}', "");
Expect(1, 68466, '\p{- isPhli}', "");
Expect(0, 68466, '\p{^- isPhli}', "");
Expect(0, 68466, '\P{- isPhli}', "");
Expect(1, 68466, '\P{^- isPhli}', "");
Expect(0, 68447, '\p{- isPhli}', "");
Expect(1, 68447, '\p{^- isPhli}', "");
Expect(1, 68447, '\P{- isPhli}', "");
Expect(0, 68447, '\P{^- isPhli}', "");
Error('\p{_ cham/a/}');
Error('\P{_ cham/a/}');
Expect(1, 43574, '\p{cham}', "");
Expect(0, 43574, '\p{^cham}', "");
Expect(0, 43574, '\P{cham}', "");
Expect(1, 43574, '\P{^cham}', "");
Expect(0, 43519, '\p{cham}', "");
Expect(1, 43519, '\p{^cham}', "");
Expect(1, 43519, '\P{cham}', "");
Expect(0, 43519, '\P{^cham}', "");
Expect(1, 43574, '\p{-_Cham}', "");
Expect(0, 43574, '\p{^-_Cham}', "");
Expect(0, 43574, '\P{-_Cham}', "");
Expect(1, 43574, '\P{^-_Cham}', "");
Expect(0, 43519, '\p{-_Cham}', "");
Expect(1, 43519, '\p{^-_Cham}', "");
Expect(1, 43519, '\P{-_Cham}', "");
Expect(0, 43519, '\P{^-_Cham}', "");
Error('\p{	Is-CHAM/a/}');
Error('\P{	Is-CHAM/a/}');
Expect(1, 43574, '\p{ischam}', "");
Expect(0, 43574, '\p{^ischam}', "");
Expect(0, 43574, '\P{ischam}', "");
Expect(1, 43574, '\P{^ischam}', "");
Expect(0, 43519, '\p{ischam}', "");
Expect(1, 43519, '\p{^ischam}', "");
Expect(1, 43519, '\P{ischam}', "");
Expect(0, 43519, '\P{^ischam}', "");
Expect(1, 43574, '\p{ 	is	CHAM}', "");
Expect(0, 43574, '\p{^ 	is	CHAM}', "");
Expect(0, 43574, '\P{ 	is	CHAM}', "");
Expect(1, 43574, '\P{^ 	is	CHAM}', "");
Expect(0, 43519, '\p{ 	is	CHAM}', "");
Expect(1, 43519, '\p{^ 	is	CHAM}', "");
Expect(1, 43519, '\P{ 	is	CHAM}', "");
Expect(0, 43519, '\P{^ 	is	CHAM}', "");
Error('\p{_ BRAILLE:=}');
Error('\P{_ BRAILLE:=}');
Expect(1, 10495, '\p{braille}', "");
Expect(0, 10495, '\p{^braille}', "");
Expect(0, 10495, '\P{braille}', "");
Expect(1, 10495, '\P{^braille}', "");
Expect(0, 10239, '\p{braille}', "");
Expect(1, 10239, '\p{^braille}', "");
Expect(1, 10239, '\P{braille}', "");
Expect(0, 10239, '\P{^braille}', "");
Expect(1, 10495, '\p{-braille}', "");
Expect(0, 10495, '\p{^-braille}', "");
Expect(0, 10495, '\P{-braille}', "");
Expect(1, 10495, '\P{^-braille}', "");
Expect(0, 10239, '\p{-braille}', "");
Expect(1, 10239, '\p{^-braille}', "");
Expect(1, 10239, '\P{-braille}', "");
Expect(0, 10239, '\P{^-braille}', "");
Error('\p{/a/_-IS Braille}');
Error('\P{/a/_-IS Braille}');
Expect(1, 10495, '\p{isbraille}', "");
Expect(0, 10495, '\p{^isbraille}', "");
Expect(0, 10495, '\P{isbraille}', "");
Expect(1, 10495, '\P{^isbraille}', "");
Expect(0, 10239, '\p{isbraille}', "");
Expect(1, 10239, '\p{^isbraille}', "");
Expect(1, 10239, '\P{isbraille}', "");
Expect(0, 10239, '\P{^isbraille}', "");
Expect(1, 10495, '\p{-	ISBraille}', "");
Expect(0, 10495, '\p{^-	ISBraille}', "");
Expect(0, 10495, '\P{-	ISBraille}', "");
Expect(1, 10495, '\P{^-	ISBraille}', "");
Expect(0, 10239, '\p{-	ISBraille}', "");
Expect(1, 10239, '\p{^-	ISBraille}', "");
Expect(1, 10239, '\P{-	ISBraille}', "");
Expect(0, 10239, '\P{^-	ISBraille}', "");
Error('\p{/a/ 	Brai}');
Error('\P{/a/ 	Brai}');
Expect(1, 10495, '\p{brai}', "");
Expect(0, 10495, '\p{^brai}', "");
Expect(0, 10495, '\P{brai}', "");
Expect(1, 10495, '\P{^brai}', "");
Expect(0, 10239, '\p{brai}', "");
Expect(1, 10239, '\p{^brai}', "");
Expect(1, 10239, '\P{brai}', "");
Expect(0, 10239, '\P{^brai}', "");
Expect(1, 10495, '\p{-BRAI}', "");
Expect(0, 10495, '\p{^-BRAI}', "");
Expect(0, 10495, '\P{-BRAI}', "");
Expect(1, 10495, '\P{^-BRAI}', "");
Expect(0, 10239, '\p{-BRAI}', "");
Expect(1, 10239, '\p{^-BRAI}', "");
Expect(1, 10239, '\P{-BRAI}', "");
Expect(0, 10239, '\P{^-BRAI}', "");
Error('\p{_Is/a/BRAI}');
Error('\P{_Is/a/BRAI}');
Expect(1, 10495, '\p{isbrai}', "");
Expect(0, 10495, '\p{^isbrai}', "");
Expect(0, 10495, '\P{isbrai}', "");
Expect(1, 10495, '\P{^isbrai}', "");
Expect(0, 10239, '\p{isbrai}', "");
Expect(1, 10239, '\p{^isbrai}', "");
Expect(1, 10239, '\P{isbrai}', "");
Expect(0, 10239, '\P{^isbrai}', "");
Expect(1, 10495, '\p{	IS-brai}', "");
Expect(0, 10495, '\p{^	IS-brai}', "");
Expect(0, 10495, '\P{	IS-brai}', "");
Expect(1, 10495, '\P{^	IS-brai}', "");
Expect(0, 10239, '\p{	IS-brai}', "");
Expect(1, 10239, '\p{^	IS-brai}', "");
Expect(1, 10239, '\P{	IS-brai}', "");
Expect(0, 10239, '\P{^	IS-brai}', "");
Error('\p{_:=IN old-Persian}');
Error('\P{_:=IN old-Persian}');
Expect(1, 66527, '\p{inoldpersian}', "");
Expect(0, 66527, '\p{^inoldpersian}', "");
Expect(0, 66527, '\P{inoldpersian}', "");
Expect(1, 66527, '\P{^inoldpersian}', "");
Expect(0, 66463, '\p{inoldpersian}', "");
Expect(1, 66463, '\p{^inoldpersian}', "");
Expect(1, 66463, '\P{inoldpersian}', "");
Expect(0, 66463, '\P{^inoldpersian}', "");
Expect(1, 66527, '\p{ -inOldPERSIAN}', "");
Expect(0, 66527, '\p{^ -inOldPERSIAN}', "");
Expect(0, 66527, '\P{ -inOldPERSIAN}', "");
Expect(1, 66527, '\P{^ -inOldPERSIAN}', "");
Expect(0, 66463, '\p{ -inOldPERSIAN}', "");
Expect(1, 66463, '\p{^ -inOldPERSIAN}', "");
Expect(1, 66463, '\P{ -inOldPERSIAN}', "");
Expect(0, 66463, '\P{^ -inOldPERSIAN}', "");
Error('\p{	:=box DRAWING}');
Error('\P{	:=box DRAWING}');
Expect(1, 9599, '\p{boxdrawing}', "");
Expect(0, 9599, '\p{^boxdrawing}', "");
Expect(0, 9599, '\P{boxdrawing}', "");
Expect(1, 9599, '\P{^boxdrawing}', "");
Expect(0, 9471, '\p{boxdrawing}', "");
Expect(1, 9471, '\p{^boxdrawing}', "");
Expect(1, 9471, '\P{boxdrawing}', "");
Expect(0, 9471, '\P{^boxdrawing}', "");
Expect(1, 9599, '\p{ _boxdrawing}', "");
Expect(0, 9599, '\p{^ _boxdrawing}', "");
Expect(0, 9599, '\P{ _boxdrawing}', "");
Expect(1, 9599, '\P{^ _boxdrawing}', "");
Expect(0, 9471, '\p{ _boxdrawing}', "");
Expect(1, 9471, '\p{^ _boxdrawing}', "");
Expect(1, 9471, '\P{ _boxdrawing}', "");
Expect(0, 9471, '\P{^ _boxdrawing}', "");
Error('\p{	 is:=BoxDrawing}');
Error('\P{	 is:=BoxDrawing}');
Expect(1, 9599, '\p{isboxdrawing}', "");
Expect(0, 9599, '\p{^isboxdrawing}', "");
Expect(0, 9599, '\P{isboxdrawing}', "");
Expect(1, 9599, '\P{^isboxdrawing}', "");
Expect(0, 9471, '\p{isboxdrawing}', "");
Expect(1, 9471, '\p{^isboxdrawing}', "");
Expect(1, 9471, '\P{isboxdrawing}', "");
Expect(0, 9471, '\P{^isboxdrawing}', "");
Expect(1, 9599, '\p{		Is_Box Drawing}', "");
Expect(0, 9599, '\p{^		Is_Box Drawing}', "");
Expect(0, 9599, '\P{		Is_Box Drawing}', "");
Expect(1, 9599, '\P{^		Is_Box Drawing}', "");
Expect(0, 9471, '\p{		Is_Box Drawing}', "");
Expect(1, 9471, '\p{^		Is_Box Drawing}', "");
Expect(1, 9471, '\P{		Is_Box Drawing}', "");
Expect(0, 9471, '\P{^		Is_Box Drawing}', "");
Error('\p{ _in:=box Drawing}');
Error('\P{ _in:=box Drawing}');
Expect(1, 9599, '\p{inboxdrawing}', "");
Expect(0, 9599, '\p{^inboxdrawing}', "");
Expect(0, 9599, '\P{inboxdrawing}', "");
Expect(1, 9599, '\P{^inboxdrawing}', "");
Expect(0, 9471, '\p{inboxdrawing}', "");
Expect(1, 9471, '\p{^inboxdrawing}', "");
Expect(1, 9471, '\P{inboxdrawing}', "");
Expect(0, 9471, '\P{^inboxdrawing}', "");
Expect(1, 9599, '\p{__In BOXdrawing}', "");
Expect(0, 9599, '\p{^__In BOXdrawing}', "");
Expect(0, 9599, '\P{__In BOXdrawing}', "");
Expect(1, 9599, '\P{^__In BOXdrawing}', "");
Expect(0, 9471, '\p{__In BOXdrawing}', "");
Expect(1, 9471, '\p{^__In BOXdrawing}', "");
Expect(1, 9471, '\P{__In BOXdrawing}', "");
Expect(0, 9471, '\P{^__In BOXdrawing}', "");
Error('\p{	/a/Linear	b}');
Error('\P{	/a/Linear	b}');
Expect(1, 65547, '\p{linearb}', "");
Expect(0, 65547, '\p{^linearb}', "");
Expect(0, 65547, '\P{linearb}', "");
Expect(1, 65547, '\P{^linearb}', "");
Expect(0, 1, '\p{linearb}', "");
Expect(1, 1, '\p{^linearb}', "");
Expect(1, 1, '\P{linearb}', "");
Expect(0, 1, '\P{^linearb}', "");
Expect(1, 65547, '\p{_	Linear b}', "");
Expect(0, 65547, '\p{^_	Linear b}', "");
Expect(0, 65547, '\P{_	Linear b}', "");
Expect(1, 65547, '\P{^_	Linear b}', "");
Expect(0, 1, '\p{_	Linear b}', "");
Expect(1, 1, '\p{^_	Linear b}', "");
Expect(1, 1, '\P{_	Linear b}', "");
Expect(0, 1, '\P{^_	Linear b}', "");
Error('\p{ _IS:=LinearB}');
Error('\P{ _IS:=LinearB}');
Expect(1, 65547, '\p{islinearb}', "");
Expect(0, 65547, '\p{^islinearb}', "");
Expect(0, 65547, '\P{islinearb}', "");
Expect(1, 65547, '\P{^islinearb}', "");
Expect(0, 1, '\p{islinearb}', "");
Expect(1, 1, '\p{^islinearb}', "");
Expect(1, 1, '\P{islinearb}', "");
Expect(0, 1, '\P{^islinearb}', "");
Expect(1, 65547, '\p{	-Is-LinearB}', "");
Expect(0, 65547, '\p{^	-Is-LinearB}', "");
Expect(0, 65547, '\P{	-Is-LinearB}', "");
Expect(1, 65547, '\P{^	-Is-LinearB}', "");
Expect(0, 1, '\p{	-Is-LinearB}', "");
Expect(1, 1, '\p{^	-Is-LinearB}', "");
Expect(1, 1, '\P{	-Is-LinearB}', "");
Expect(0, 1, '\P{^	-Is-LinearB}', "");
Error('\p{-/a/Linb}');
Error('\P{-/a/Linb}');
Expect(1, 65547, '\p{linb}', "");
Expect(0, 65547, '\p{^linb}', "");
Expect(0, 65547, '\P{linb}', "");
Expect(1, 65547, '\P{^linb}', "");
Expect(0, 1, '\p{linb}', "");
Expect(1, 1, '\p{^linb}', "");
Expect(1, 1, '\P{linb}', "");
Expect(0, 1, '\P{^linb}', "");
Error('\p{-IS:=linb}');
Error('\P{-IS:=linb}');
Expect(1, 65547, '\p{islinb}', "");
Expect(0, 65547, '\p{^islinb}', "");
Expect(0, 65547, '\P{islinb}', "");
Expect(1, 65547, '\P{^islinb}', "");
Expect(0, 1, '\p{islinb}', "");
Expect(1, 1, '\p{^islinb}', "");
Expect(1, 1, '\P{islinb}', "");
Expect(0, 1, '\P{^islinb}', "");
Expect(1, 65547, '\p{_	Is_LINB}', "");
Expect(0, 65547, '\p{^_	Is_LINB}', "");
Expect(0, 65547, '\P{_	Is_LINB}', "");
Expect(1, 65547, '\P{^_	Is_LINB}', "");
Expect(0, 1, '\p{_	Is_LINB}', "");
Expect(1, 1, '\p{^_	Is_LINB}', "");
Expect(1, 1, '\P{_	Is_LINB}', "");
Expect(0, 1, '\P{^_	Is_LINB}', "");
Error('\p{/a/_	tifinagh}');
Error('\P{/a/_	tifinagh}');
Expect(1, 11621, '\p{tifinagh}', "");
Expect(0, 11621, '\p{^tifinagh}', "");
Expect(0, 11621, '\P{tifinagh}', "");
Expect(1, 11621, '\P{^tifinagh}', "");
Expect(0, 11567, '\p{tifinagh}', "");
Expect(1, 11567, '\p{^tifinagh}', "");
Expect(1, 11567, '\P{tifinagh}', "");
Expect(0, 11567, '\P{^tifinagh}', "");
Expect(1, 11621, '\p{_	Tifinagh}', "");
Expect(0, 11621, '\p{^_	Tifinagh}', "");
Expect(0, 11621, '\P{_	Tifinagh}', "");
Expect(1, 11621, '\P{^_	Tifinagh}', "");
Expect(0, 11567, '\p{_	Tifinagh}', "");
Expect(1, 11567, '\p{^_	Tifinagh}', "");
Expect(1, 11567, '\P{_	Tifinagh}', "");
Expect(0, 11567, '\P{^_	Tifinagh}', "");
Error('\p{:=-_IsTifinagh}');
Error('\P{:=-_IsTifinagh}');
Expect(1, 11621, '\p{istifinagh}', "");
Expect(0, 11621, '\p{^istifinagh}', "");
Expect(0, 11621, '\P{istifinagh}', "");
Expect(1, 11621, '\P{^istifinagh}', "");
Expect(0, 11567, '\p{istifinagh}', "");
Expect(1, 11567, '\p{^istifinagh}', "");
Expect(1, 11567, '\P{istifinagh}', "");
Expect(0, 11567, '\P{^istifinagh}', "");
Expect(1, 11621, '\p{--isTifinagh}', "");
Expect(0, 11621, '\p{^--isTifinagh}', "");
Expect(0, 11621, '\P{--isTifinagh}', "");
Expect(1, 11621, '\P{^--isTifinagh}', "");
Expect(0, 11567, '\p{--isTifinagh}', "");
Expect(1, 11567, '\p{^--isTifinagh}', "");
Expect(1, 11567, '\P{--isTifinagh}', "");
Expect(0, 11567, '\P{^--isTifinagh}', "");
Error('\p{/a/	 Tfng}');
Error('\P{/a/	 Tfng}');
Expect(1, 11621, '\p{tfng}', "");
Expect(0, 11621, '\p{^tfng}', "");
Expect(0, 11621, '\P{tfng}', "");
Expect(1, 11621, '\P{^tfng}', "");
Expect(0, 11567, '\p{tfng}', "");
Expect(1, 11567, '\p{^tfng}', "");
Expect(1, 11567, '\P{tfng}', "");
Expect(0, 11567, '\P{^tfng}', "");
Expect(1, 11621, '\p{	tfng}', "");
Expect(0, 11621, '\p{^	tfng}', "");
Expect(0, 11621, '\P{	tfng}', "");
Expect(1, 11621, '\P{^	tfng}', "");
Expect(0, 11567, '\p{	tfng}', "");
Expect(1, 11567, '\p{^	tfng}', "");
Expect(1, 11567, '\P{	tfng}', "");
Expect(0, 11567, '\P{^	tfng}', "");
Error('\p{is TFNG:=}');
Error('\P{is TFNG:=}');
Expect(1, 11621, '\p{istfng}', "");
Expect(0, 11621, '\p{^istfng}', "");
Expect(0, 11621, '\P{istfng}', "");
Expect(1, 11621, '\P{^istfng}', "");
Expect(0, 11567, '\p{istfng}', "");
Expect(1, 11567, '\p{^istfng}', "");
Expect(1, 11567, '\P{istfng}', "");
Expect(0, 11567, '\P{^istfng}', "");
Expect(1, 11621, '\p{-	is-TFNG}', "");
Expect(0, 11621, '\p{^-	is-TFNG}', "");
Expect(0, 11621, '\P{-	is-TFNG}', "");
Expect(1, 11621, '\P{^-	is-TFNG}', "");
Expect(0, 11567, '\p{-	is-TFNG}', "");
Expect(1, 11567, '\p{^-	is-TFNG}', "");
Expect(1, 11567, '\P{-	is-TFNG}', "");
Expect(0, 11567, '\P{^-	is-TFNG}', "");
Error('\p{__Syloti_Nagri:=}');
Error('\P{__Syloti_Nagri:=}');
Expect(1, 43051, '\p{sylotinagri}', "");
Expect(0, 43051, '\p{^sylotinagri}', "");
Expect(0, 43051, '\P{sylotinagri}', "");
Expect(1, 43051, '\P{^sylotinagri}', "");
Expect(0, 43007, '\p{sylotinagri}', "");
Expect(1, 43007, '\p{^sylotinagri}', "");
Expect(1, 43007, '\P{sylotinagri}', "");
Expect(0, 43007, '\P{^sylotinagri}', "");
Expect(1, 43051, '\p{ 	Syloti Nagri}', "");
Expect(0, 43051, '\p{^ 	Syloti Nagri}', "");
Expect(0, 43051, '\P{ 	Syloti Nagri}', "");
Expect(1, 43051, '\P{^ 	Syloti Nagri}', "");
Expect(0, 43007, '\p{ 	Syloti Nagri}', "");
Expect(1, 43007, '\p{^ 	Syloti Nagri}', "");
Expect(1, 43007, '\P{ 	Syloti Nagri}', "");
Expect(0, 43007, '\P{^ 	Syloti Nagri}', "");
Error('\p{_IsSyloti:=Nagri}');
Error('\P{_IsSyloti:=Nagri}');
Expect(1, 43051, '\p{issylotinagri}', "");
Expect(0, 43051, '\p{^issylotinagri}', "");
Expect(0, 43051, '\P{issylotinagri}', "");
Expect(1, 43051, '\P{^issylotinagri}', "");
Expect(0, 43007, '\p{issylotinagri}', "");
Expect(1, 43007, '\p{^issylotinagri}', "");
Expect(1, 43007, '\P{issylotinagri}', "");
Expect(0, 43007, '\P{^issylotinagri}', "");
Expect(1, 43051, '\p{  is_Syloti	NAGRI}', "");
Expect(0, 43051, '\p{^  is_Syloti	NAGRI}', "");
Expect(0, 43051, '\P{  is_Syloti	NAGRI}', "");
Expect(1, 43051, '\P{^  is_Syloti	NAGRI}', "");
Expect(0, 43007, '\p{  is_Syloti	NAGRI}', "");
Expect(1, 43007, '\p{^  is_Syloti	NAGRI}', "");
Expect(1, 43007, '\P{  is_Syloti	NAGRI}', "");
Expect(0, 43007, '\P{^  is_Syloti	NAGRI}', "");
Error('\p{:=_-Sylo}');
Error('\P{:=_-Sylo}');
Expect(1, 43051, '\p{sylo}', "");
Expect(0, 43051, '\p{^sylo}', "");
Expect(0, 43051, '\P{sylo}', "");
Expect(1, 43051, '\P{^sylo}', "");
Expect(0, 43007, '\p{sylo}', "");
Expect(1, 43007, '\p{^sylo}', "");
Expect(1, 43007, '\P{sylo}', "");
Expect(0, 43007, '\P{^sylo}', "");
Expect(1, 43051, '\p{-_sylo}', "");
Expect(0, 43051, '\p{^-_sylo}', "");
Expect(0, 43051, '\P{-_sylo}', "");
Expect(1, 43051, '\P{^-_sylo}', "");
Expect(0, 43007, '\p{-_sylo}', "");
Expect(1, 43007, '\p{^-_sylo}', "");
Expect(1, 43007, '\P{-_sylo}', "");
Expect(0, 43007, '\P{^-_sylo}', "");
Error('\p{/a/-IS-Sylo}');
Error('\P{/a/-IS-Sylo}');
Expect(1, 43051, '\p{issylo}', "");
Expect(0, 43051, '\p{^issylo}', "");
Expect(0, 43051, '\P{issylo}', "");
Expect(1, 43051, '\P{^issylo}', "");
Expect(0, 43007, '\p{issylo}', "");
Expect(1, 43007, '\p{^issylo}', "");
Expect(1, 43007, '\P{issylo}', "");
Expect(0, 43007, '\P{^issylo}', "");
Expect(1, 43051, '\p{ 	is	sylo}', "");
Expect(0, 43051, '\p{^ 	is	sylo}', "");
Expect(0, 43051, '\P{ 	is	sylo}', "");
Expect(1, 43051, '\P{^ 	is	sylo}', "");
Expect(0, 43007, '\p{ 	is	sylo}', "");
Expect(1, 43007, '\p{^ 	is	sylo}', "");
Expect(1, 43007, '\P{ 	is	sylo}', "");
Expect(0, 43007, '\P{^ 	is	sylo}', "");
Error('\p{/a/Balinese}');
Error('\P{/a/Balinese}');
Expect(1, 6987, '\p{balinese}', "");
Expect(0, 6987, '\p{^balinese}', "");
Expect(0, 6987, '\P{balinese}', "");
Expect(1, 6987, '\P{^balinese}', "");
Expect(0, 6911, '\p{balinese}', "");
Expect(1, 6911, '\p{^balinese}', "");
Expect(1, 6911, '\P{balinese}', "");
Expect(0, 6911, '\P{^balinese}', "");
Expect(1, 6987, '\p{_balinese}', "");
Expect(0, 6987, '\p{^_balinese}', "");
Expect(0, 6987, '\P{_balinese}', "");
Expect(1, 6987, '\P{^_balinese}', "");
Expect(0, 6911, '\p{_balinese}', "");
Expect(1, 6911, '\p{^_balinese}', "");
Expect(1, 6911, '\P{_balinese}', "");
Expect(0, 6911, '\P{^_balinese}', "");
Error('\p{:= _IsBalinese}');
Error('\P{:= _IsBalinese}');
Expect(1, 6987, '\p{isbalinese}', "");
Expect(0, 6987, '\p{^isbalinese}', "");
Expect(0, 6987, '\P{isbalinese}', "");
Expect(1, 6987, '\P{^isbalinese}', "");
Expect(0, 6911, '\p{isbalinese}', "");
Expect(1, 6911, '\p{^isbalinese}', "");
Expect(1, 6911, '\P{isbalinese}', "");
Expect(0, 6911, '\P{^isbalinese}', "");
Expect(1, 6987, '\p{	Isbalinese}', "");
Expect(0, 6987, '\p{^	Isbalinese}', "");
Expect(0, 6987, '\P{	Isbalinese}', "");
Expect(1, 6987, '\P{^	Isbalinese}', "");
Expect(0, 6911, '\p{	Isbalinese}', "");
Expect(1, 6911, '\p{^	Isbalinese}', "");
Expect(1, 6911, '\P{	Isbalinese}', "");
Expect(0, 6911, '\P{^	Isbalinese}', "");
Error('\p{/a/bali}');
Error('\P{/a/bali}');
Expect(1, 6987, '\p{bali}', "");
Expect(0, 6987, '\p{^bali}', "");
Expect(0, 6987, '\P{bali}', "");
Expect(1, 6987, '\P{^bali}', "");
Expect(0, 6911, '\p{bali}', "");
Expect(1, 6911, '\p{^bali}', "");
Expect(1, 6911, '\P{bali}', "");
Expect(0, 6911, '\P{^bali}', "");
Expect(1, 6987, '\p{	Bali}', "");
Expect(0, 6987, '\p{^	Bali}', "");
Expect(0, 6987, '\P{	Bali}', "");
Expect(1, 6987, '\P{^	Bali}', "");
Expect(0, 6911, '\p{	Bali}', "");
Expect(1, 6911, '\p{^	Bali}', "");
Expect(1, 6911, '\P{	Bali}', "");
Expect(0, 6911, '\P{^	Bali}', "");
Error('\p{ IS	Bali:=}');
Error('\P{ IS	Bali:=}');
Expect(1, 6987, '\p{isbali}', "");
Expect(0, 6987, '\p{^isbali}', "");
Expect(0, 6987, '\P{isbali}', "");
Expect(1, 6987, '\P{^isbali}', "");
Expect(0, 6911, '\p{isbali}', "");
Expect(1, 6911, '\p{^isbali}', "");
Expect(1, 6911, '\P{isbali}', "");
Expect(0, 6911, '\P{^isbali}', "");
Expect(1, 6987, '\p{ _is	BALI}', "");
Expect(0, 6987, '\p{^ _is	BALI}', "");
Expect(0, 6987, '\P{ _is	BALI}', "");
Expect(1, 6987, '\P{^ _is	BALI}', "");
Expect(0, 6911, '\p{ _is	BALI}', "");
Expect(1, 6911, '\p{^ _is	BALI}', "");
Expect(1, 6911, '\P{ _is	BALI}', "");
Expect(0, 6911, '\P{^ _is	BALI}', "");
Error('\p{	:=MISCELLANEOUS_SYMBOLS-and	Arrows}');
Error('\P{	:=MISCELLANEOUS_SYMBOLS-and	Arrows}');
Expect(1, 11263, '\p{miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(0, 11263, '\p{^	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(0, 11263, '\P{	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(1, 11263, '\P{^	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(0, 11007, '\p{	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(1, 11007, '\p{^	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(1, 11007, '\P{	Miscellaneous-Symbols	AND	Arrows}', "");
Expect(0, 11007, '\P{^	Miscellaneous-Symbols	AND	Arrows}', "");
Error('\p{:=_	is-MISCELLANEOUSsymbols	And_ARROWS}');
Error('\P{:=_	is-MISCELLANEOUSsymbols	And_ARROWS}');
Expect(1, 11263, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(0, 11263, '\p{^  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(0, 11263, '\P{  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(1, 11263, '\P{^  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(0, 11007, '\p{  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(1, 11007, '\p{^  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(1, 11007, '\P{  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Expect(0, 11007, '\P{^  IS miscellaneous_SYMBOLS	AND_Arrows}', "");
Error('\p{-_inmiscellaneous	Symbolsand-Arrows/a/}');
Error('\P{-_inmiscellaneous	Symbolsand-Arrows/a/}');
Expect(1, 11263, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(0, 11263, '\p{^  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(0, 11263, '\P{  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(1, 11263, '\P{^  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(0, 11007, '\p{  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(1, 11007, '\p{^  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(1, 11007, '\P{  in_Miscellaneous_Symbols_And_Arrows}', "");
Expect(0, 11007, '\P{^  in_Miscellaneous_Symbols_And_Arrows}', "");
Error('\p{:=	 PRINT}');
Error('\P{:=	 PRINT}');
Expect(1, 126, '\p{print}', "");
Expect(0, 126, '\p{^print}', "");
Expect(0, 126, '\P{print}', "");
Expect(1, 126, '\P{^print}', "");
Expect(0, 31, '\p{print}', "");
Expect(1, 31, '\p{^print}', "");
Expect(1, 31, '\P{print}', "");
Expect(0, 31, '\P{^print}', "");
Expect(1, 126, '\p{ PRINT}', "");
Expect(0, 126, '\p{^ PRINT}', "");
Expect(0, 126, '\P{ PRINT}', "");
Expect(1, 126, '\P{^ PRINT}', "");
Expect(0, 31, '\p{ PRINT}', "");
Expect(1, 31, '\p{^ PRINT}', "");
Expect(1, 31, '\P{ PRINT}', "");
Expect(0, 31, '\P{^ PRINT}', "");
Error('\p{_Is/a/PRINT}');
Error('\P{_Is/a/PRINT}');
Expect(1, 126, '\p{isprint}', "");
Expect(0, 126, '\p{^isprint}', "");
Expect(0, 126, '\P{isprint}', "");
Expect(1, 126, '\P{^isprint}', "");
Expect(0, 31, '\p{isprint}', "");
Expect(1, 31, '\p{^isprint}', "");
Expect(1, 31, '\P{isprint}', "");
Expect(0, 31, '\P{^isprint}', "");
Expect(1, 126, '\p{-	Is_Print}', "");
Expect(0, 126, '\p{^-	Is_Print}', "");
Expect(0, 126, '\P{-	Is_Print}', "");
Expect(1, 126, '\P{^-	Is_Print}', "");
Expect(0, 31, '\p{-	Is_Print}', "");
Expect(1, 31, '\p{^-	Is_Print}', "");
Expect(1, 31, '\P{-	Is_Print}', "");
Expect(0, 31, '\P{^-	Is_Print}', "");
Error('\p{_:=IDS Trinary-operator}');
Error('\P{_:=IDS Trinary-operator}');
Expect(1, 12275, '\p{idstrinaryoperator}', "");
Expect(0, 12275, '\p{^idstrinaryoperator}', "");
Expect(0, 12275, '\P{idstrinaryoperator}', "");
Expect(1, 12275, '\P{^idstrinaryoperator}', "");
Expect(0, 12273, '\p{idstrinaryoperator}', "");
Expect(1, 12273, '\p{^idstrinaryoperator}', "");
Expect(1, 12273, '\P{idstrinaryoperator}', "");
Expect(0, 12273, '\P{^idstrinaryoperator}', "");
Expect(1, 12275, '\p{ -IDS_trinary_OPERATOR}', "");
Expect(0, 12275, '\p{^ -IDS_trinary_OPERATOR}', "");
Expect(0, 12275, '\P{ -IDS_trinary_OPERATOR}', "");
Expect(1, 12275, '\P{^ -IDS_trinary_OPERATOR}', "");
Expect(0, 12273, '\p{ -IDS_trinary_OPERATOR}', "");
Expect(1, 12273, '\p{^ -IDS_trinary_OPERATOR}', "");
Expect(1, 12273, '\P{ -IDS_trinary_OPERATOR}', "");
Expect(0, 12273, '\P{^ -IDS_trinary_OPERATOR}', "");
Error('\p{_Is/a/ids_TRINARYOPERATOR}');
Error('\P{_Is/a/ids_TRINARYOPERATOR}');
Expect(1, 12275, '\p{isidstrinaryoperator}', "");
Expect(0, 12275, '\p{^isidstrinaryoperator}', "");
Expect(0, 12275, '\P{isidstrinaryoperator}', "");
Expect(1, 12275, '\P{^isidstrinaryoperator}', "");
Expect(0, 12273, '\p{isidstrinaryoperator}', "");
Expect(1, 12273, '\p{^isidstrinaryoperator}', "");
Expect(1, 12273, '\P{isidstrinaryoperator}', "");
Expect(0, 12273, '\P{^isidstrinaryoperator}', "");
Expect(1, 12275, '\p{-IS-IDSTrinary OPERATOR}', "");
Expect(0, 12275, '\p{^-IS-IDSTrinary OPERATOR}', "");
Expect(0, 12275, '\P{-IS-IDSTrinary OPERATOR}', "");
Expect(1, 12275, '\P{^-IS-IDSTrinary OPERATOR}', "");
Expect(0, 12273, '\p{-IS-IDSTrinary OPERATOR}', "");
Expect(1, 12273, '\p{^-IS-IDSTrinary OPERATOR}', "");
Expect(1, 12273, '\P{-IS-IDSTrinary OPERATOR}', "");
Expect(0, 12273, '\P{^-IS-IDSTrinary OPERATOR}', "");
Error('\p{-/a/IDST}');
Error('\P{-/a/IDST}');
Expect(1, 12275, '\p{idst}', "");
Expect(0, 12275, '\p{^idst}', "");
Expect(0, 12275, '\P{idst}', "");
Expect(1, 12275, '\P{^idst}', "");
Expect(0, 12273, '\p{idst}', "");
Expect(1, 12273, '\p{^idst}', "");
Expect(1, 12273, '\P{idst}', "");
Expect(0, 12273, '\P{^idst}', "");
Expect(1, 12275, '\p{IDST}', "");
Expect(0, 12275, '\p{^IDST}', "");
Expect(0, 12275, '\P{IDST}', "");
Expect(1, 12275, '\P{^IDST}', "");
Expect(0, 12273, '\p{IDST}', "");
Expect(1, 12273, '\p{^IDST}', "");
Expect(1, 12273, '\P{IDST}', "");
Expect(0, 12273, '\P{^IDST}', "");
Error('\p{/a/Is_IDST}');
Error('\P{/a/Is_IDST}');
Expect(1, 12275, '\p{isidst}', "");
Expect(0, 12275, '\p{^isidst}', "");
Expect(0, 12275, '\P{isidst}', "");
Expect(1, 12275, '\P{^isidst}', "");
Expect(0, 12273, '\p{isidst}', "");
Expect(1, 12273, '\p{^isidst}', "");
Expect(1, 12273, '\P{isidst}', "");
Expect(0, 12273, '\P{^isidst}', "");
Expect(1, 12275, '\p{-_Is-idst}', "");
Expect(0, 12275, '\p{^-_Is-idst}', "");
Expect(0, 12275, '\P{-_Is-idst}', "");
Expect(1, 12275, '\P{^-_Is-idst}', "");
Expect(0, 12273, '\p{-_Is-idst}', "");
Expect(1, 12273, '\p{^-_Is-idst}', "");
Expect(1, 12273, '\P{-_Is-idst}', "");
Expect(0, 12273, '\P{^-_Is-idst}', "");
Error('\p{:=CJK RADICALSSupplement}');
Error('\P{:=CJK RADICALSSupplement}');
Expect(1, 12031, '\p{cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^cjkradicalssupplement}', "");
Expect(0, 12031, '\P{cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^cjkradicalssupplement}', "");
Expect(0, 11903, '\p{cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^cjkradicalssupplement}', "");
Expect(1, 11903, '\P{cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^cjkradicalssupplement}', "");
Expect(1, 12031, '\p{CJKRadicals-supplement}', "");
Expect(0, 12031, '\p{^CJKRadicals-supplement}', "");
Expect(0, 12031, '\P{CJKRadicals-supplement}', "");
Expect(1, 12031, '\P{^CJKRadicals-supplement}', "");
Expect(0, 11903, '\p{CJKRadicals-supplement}', "");
Expect(1, 11903, '\p{^CJKRadicals-supplement}', "");
Expect(1, 11903, '\P{CJKRadicals-supplement}', "");
Expect(0, 11903, '\P{^CJKRadicals-supplement}', "");
Error('\p{-Is	CJK Radicals-SUPPLEMENT:=}');
Error('\P{-Is	CJK Radicals-SUPPLEMENT:=}');
Expect(1, 12031, '\p{iscjkradicalssupplement}', "");
Expect(0, 12031, '\p{^iscjkradicalssupplement}', "");
Expect(0, 12031, '\P{iscjkradicalssupplement}', "");
Expect(1, 12031, '\P{^iscjkradicalssupplement}', "");
Expect(0, 11903, '\p{iscjkradicalssupplement}', "");
Expect(1, 11903, '\p{^iscjkradicalssupplement}', "");
Expect(1, 11903, '\P{iscjkradicalssupplement}', "");
Expect(0, 11903, '\P{^iscjkradicalssupplement}', "");
Expect(1, 12031, '\p{-IsCJK Radicals-Supplement}', "");
Expect(0, 12031, '\p{^-IsCJK Radicals-Supplement}', "");
Expect(0, 12031, '\P{-IsCJK Radicals-Supplement}', "");
Expect(1, 12031, '\P{^-IsCJK Radicals-Supplement}', "");
Expect(0, 11903, '\p{-IsCJK Radicals-Supplement}', "");
Expect(1, 11903, '\p{^-IsCJK Radicals-Supplement}', "");
Expect(1, 11903, '\P{-IsCJK Radicals-Supplement}', "");
Expect(0, 11903, '\P{^-IsCJK Radicals-Supplement}', "");
Error('\p{ _In-CJK Radicals:=supplement}');
Error('\P{ _In-CJK Radicals:=supplement}');
Expect(1, 12031, '\p{incjkradicalssupplement}', "");
Expect(0, 12031, '\p{^incjkradicalssupplement}', "");
Expect(0, 12031, '\P{incjkradicalssupplement}', "");
Expect(1, 12031, '\P{^incjkradicalssupplement}', "");
Expect(0, 11903, '\p{incjkradicalssupplement}', "");
Expect(1, 11903, '\p{^incjkradicalssupplement}', "");
Expect(1, 11903, '\P{incjkradicalssupplement}', "");
Expect(0, 11903, '\P{^incjkradicalssupplement}', "");
Expect(1, 12031, '\p{  inCJK Radicals-Supplement}', "");
Expect(0, 12031, '\p{^  inCJK Radicals-Supplement}', "");
Expect(0, 12031, '\P{  inCJK Radicals-Supplement}', "");
Expect(1, 12031, '\P{^  inCJK Radicals-Supplement}', "");
Expect(0, 11903, '\p{  inCJK Radicals-Supplement}', "");
Expect(1, 11903, '\p{^  inCJK Radicals-Supplement}', "");
Expect(1, 11903, '\P{  inCJK Radicals-Supplement}', "");
Expect(0, 11903, '\P{^  inCJK Radicals-Supplement}', "");
Error('\p{_invai/a/}');
Error('\P{_invai/a/}');
Expect(1, 42559, '\p{invai}', "");
Expect(0, 42559, '\p{^invai}', "");
Expect(0, 42559, '\P{invai}', "");
Expect(1, 42559, '\P{^invai}', "");
Expect(0, 42239, '\p{invai}', "");
Expect(1, 42239, '\p{^invai}', "");
Expect(1, 42239, '\P{invai}', "");
Expect(0, 42239, '\P{^invai}', "");
Expect(1, 42559, '\p{	In	VAI}', "");
Expect(0, 42559, '\p{^	In	VAI}', "");
Expect(0, 42559, '\P{	In	VAI}', "");
Expect(1, 42559, '\P{^	In	VAI}', "");
Expect(0, 42239, '\p{	In	VAI}', "");
Expect(1, 42239, '\p{^	In	VAI}', "");
Expect(1, 42239, '\P{	In	VAI}', "");
Expect(0, 42239, '\P{^	In	VAI}', "");
Error('\p{/a/-	thaana}');
Error('\P{/a/-	thaana}');
Expect(1, 1969, '\p{thaana}', "");
Expect(0, 1969, '\p{^thaana}', "");
Expect(0, 1969, '\P{thaana}', "");
Expect(1, 1969, '\P{^thaana}', "");
Expect(0, 1919, '\p{thaana}', "");
Expect(1, 1919, '\p{^thaana}', "");
Expect(1, 1919, '\P{thaana}', "");
Expect(0, 1919, '\P{^thaana}', "");
Expect(1, 1969, '\p{Thaana}', "");
Expect(0, 1969, '\p{^Thaana}', "");
Expect(0, 1969, '\P{Thaana}', "");
Expect(1, 1969, '\P{^Thaana}', "");
Expect(0, 1919, '\p{Thaana}', "");
Expect(1, 1919, '\p{^Thaana}', "");
Expect(1, 1919, '\P{Thaana}', "");
Expect(0, 1919, '\P{^Thaana}', "");
Error('\p{/a/	Is THAANA}');
Error('\P{/a/	Is THAANA}');
Expect(1, 1969, '\p{isthaana}', "");
Expect(0, 1969, '\p{^isthaana}', "");
Expect(0, 1969, '\P{isthaana}', "");
Expect(1, 1969, '\P{^isthaana}', "");
Expect(0, 1919, '\p{isthaana}', "");
Expect(1, 1919, '\p{^isthaana}', "");
Expect(1, 1919, '\P{isthaana}', "");
Expect(0, 1919, '\P{^isthaana}', "");
Expect(1, 1969, '\p{	IS Thaana}', "");
Expect(0, 1969, '\p{^	IS Thaana}', "");
Expect(0, 1969, '\P{	IS Thaana}', "");
Expect(1, 1969, '\P{^	IS Thaana}', "");
Expect(0, 1919, '\p{	IS Thaana}', "");
Expect(1, 1919, '\p{^	IS Thaana}', "");
Expect(1, 1919, '\P{	IS Thaana}', "");
Expect(0, 1919, '\P{^	IS Thaana}', "");
Error('\p{-/a/THAA}');
Error('\P{-/a/THAA}');
Expect(1, 1969, '\p{thaa}', "");
Expect(0, 1969, '\p{^thaa}', "");
Expect(0, 1969, '\P{thaa}', "");
Expect(1, 1969, '\P{^thaa}', "");
Expect(0, 1919, '\p{thaa}', "");
Expect(1, 1919, '\p{^thaa}', "");
Expect(1, 1919, '\P{thaa}', "");
Expect(0, 1919, '\P{^thaa}', "");
Expect(1, 1969, '\p{-_THAA}', "");
Expect(0, 1969, '\p{^-_THAA}', "");
Expect(0, 1969, '\P{-_THAA}', "");
Expect(1, 1969, '\P{^-_THAA}', "");
Expect(0, 1919, '\p{-_THAA}', "");
Expect(1, 1919, '\p{^-_THAA}', "");
Expect(1, 1919, '\P{-_THAA}', "");
Expect(0, 1919, '\P{^-_THAA}', "");
Error('\p{	-Is/a/THAA}');
Error('\P{	-Is/a/THAA}');
Expect(1, 1969, '\p{isthaa}', "");
Expect(0, 1969, '\p{^isthaa}', "");
Expect(0, 1969, '\P{isthaa}', "");
Expect(1, 1969, '\P{^isthaa}', "");
Expect(0, 1919, '\p{isthaa}', "");
Expect(1, 1919, '\p{^isthaa}', "");
Expect(1, 1919, '\P{isthaa}', "");
Expect(0, 1919, '\P{^isthaa}', "");
Expect(1, 1969, '\p{-is Thaa}', "");
Expect(0, 1969, '\p{^-is Thaa}', "");
Expect(0, 1969, '\P{-is Thaa}', "");
Expect(1, 1969, '\P{^-is Thaa}', "");
Expect(0, 1919, '\p{-is Thaa}', "");
Expect(1, 1919, '\p{^-is Thaa}', "");
Expect(1, 1919, '\P{-is Thaa}', "");
Expect(0, 1919, '\P{^-is Thaa}', "");
Error('\p{	:=OTHER	IDStart}');
Error('\P{	:=OTHER	IDStart}');
Expect(1, 8472, '\p{otheridstart}', 'deprecated');
Expect(0, 8472, '\p{^otheridstart}', 'deprecated');
Expect(0, 8472, '\P{otheridstart}', 'deprecated');
Expect(1, 8472, '\P{^otheridstart}', 'deprecated');
Expect(0, 8471, '\p{otheridstart}', 'deprecated');
Expect(1, 8471, '\p{^otheridstart}', 'deprecated');
Expect(1, 8471, '\P{otheridstart}', 'deprecated');
Expect(0, 8471, '\P{^otheridstart}', 'deprecated');
Expect(1, 8472, '\p{_	Other	ID Start}', 'deprecated');
Expect(0, 8472, '\p{^_	Other	ID Start}', 'deprecated');
Expect(0, 8472, '\P{_	Other	ID Start}', 'deprecated');
Expect(1, 8472, '\P{^_	Other	ID Start}', 'deprecated');
Expect(0, 8471, '\p{_	Other	ID Start}', 'deprecated');
Expect(1, 8471, '\p{^_	Other	ID Start}', 'deprecated');
Expect(1, 8471, '\P{_	Other	ID Start}', 'deprecated');
Expect(0, 8471, '\P{^_	Other	ID Start}', 'deprecated');
Error('\p{- IS:=other	ID	Start}');
Error('\P{- IS:=other	ID	Start}');
Expect(1, 8472, '\p{isotheridstart}', 'deprecated');
Expect(0, 8472, '\p{^isotheridstart}', 'deprecated');
Expect(0, 8472, '\P{isotheridstart}', 'deprecated');
Expect(1, 8472, '\P{^isotheridstart}', 'deprecated');
Expect(0, 8471, '\p{isotheridstart}', 'deprecated');
Expect(1, 8471, '\p{^isotheridstart}', 'deprecated');
Expect(1, 8471, '\P{isotheridstart}', 'deprecated');
Expect(0, 8471, '\P{^isotheridstart}', 'deprecated');
Expect(1, 8472, '\p{_-IsOther-ID-Start}', 'deprecated');
Expect(0, 8472, '\p{^_-IsOther-ID-Start}', 'deprecated');
Expect(0, 8472, '\P{_-IsOther-ID-Start}', 'deprecated');
Expect(1, 8472, '\P{^_-IsOther-ID-Start}', 'deprecated');
Expect(0, 8471, '\p{_-IsOther-ID-Start}', 'deprecated');
Expect(1, 8471, '\p{^_-IsOther-ID-Start}', 'deprecated');
Expect(1, 8471, '\P{_-IsOther-ID-Start}', 'deprecated');
Expect(0, 8471, '\P{^_-IsOther-ID-Start}', 'deprecated');
Error('\p{/a/	OIDS}');
Error('\P{/a/	OIDS}');
Expect(1, 8472, '\p{oids}', 'deprecated');
Expect(0, 8472, '\p{^oids}', 'deprecated');
Expect(0, 8472, '\P{oids}', 'deprecated');
Expect(1, 8472, '\P{^oids}', 'deprecated');
Expect(0, 8471, '\p{oids}', 'deprecated');
Expect(1, 8471, '\p{^oids}', 'deprecated');
Expect(1, 8471, '\P{oids}', 'deprecated');
Expect(0, 8471, '\P{^oids}', 'deprecated');
Expect(1, 8472, '\p{--OIDS}', 'deprecated');
Expect(0, 8472, '\p{^--OIDS}', 'deprecated');
Expect(0, 8472, '\P{--OIDS}', 'deprecated');
Expect(1, 8472, '\P{^--OIDS}', 'deprecated');
Expect(0, 8471, '\p{--OIDS}', 'deprecated');
Expect(1, 8471, '\p{^--OIDS}', 'deprecated');
Expect(1, 8471, '\P{--OIDS}', 'deprecated');
Expect(0, 8471, '\P{^--OIDS}', 'deprecated');
Error('\p{		Is:=OIDS}');
Error('\P{		Is:=OIDS}');
Expect(1, 8472, '\p{isoids}', 'deprecated');
Expect(0, 8472, '\p{^isoids}', 'deprecated');
Expect(0, 8472, '\P{isoids}', 'deprecated');
Expect(1, 8472, '\P{^isoids}', 'deprecated');
Expect(0, 8471, '\p{isoids}', 'deprecated');
Expect(1, 8471, '\p{^isoids}', 'deprecated');
Expect(1, 8471, '\P{isoids}', 'deprecated');
Expect(0, 8471, '\P{^isoids}', 'deprecated');
Expect(1, 8472, '\p{_	Is	OIDS}', 'deprecated');
Expect(0, 8472, '\p{^_	Is	OIDS}', 'deprecated');
Expect(0, 8472, '\P{_	Is	OIDS}', 'deprecated');
Expect(1, 8472, '\P{^_	Is	OIDS}', 'deprecated');
Expect(0, 8471, '\p{_	Is	OIDS}', 'deprecated');
Expect(1, 8471, '\p{^_	Is	OIDS}', 'deprecated');
Expect(1, 8471, '\P{_	Is	OIDS}', 'deprecated');
Expect(0, 8471, '\P{^_	Is	OIDS}', 'deprecated');
Error('\p{/a/Specials}');
Error('\P{/a/Specials}');
Expect(1, 65520, '\p{specials}', "");
Expect(0, 65520, '\p{^specials}', "");
Expect(0, 65520, '\P{specials}', "");
Expect(1, 65520, '\P{^specials}', "");
Expect(0, 65519, '\p{specials}', "");
Expect(1, 65519, '\p{^specials}', "");
Expect(1, 65519, '\P{specials}', "");
Expect(0, 65519, '\P{^specials}', "");
Expect(1, 65520, '\p{	 specials}', "");
Expect(0, 65520, '\p{^	 specials}', "");
Expect(0, 65520, '\P{	 specials}', "");
Expect(1, 65520, '\P{^	 specials}', "");
Expect(0, 65519, '\p{	 specials}', "");
Expect(1, 65519, '\p{^	 specials}', "");
Expect(1, 65519, '\P{	 specials}', "");
Expect(0, 65519, '\P{^	 specials}', "");
Error('\p{	 is/a/Specials}');
Error('\P{	 is/a/Specials}');
Expect(1, 65520, '\p{isspecials}', "");
Expect(0, 65520, '\p{^isspecials}', "");
Expect(0, 65520, '\P{isspecials}', "");
Expect(1, 65520, '\P{^isspecials}', "");
Expect(0, 65519, '\p{isspecials}', "");
Expect(1, 65519, '\p{^isspecials}', "");
Expect(1, 65519, '\P{isspecials}', "");
Expect(0, 65519, '\P{^isspecials}', "");
Expect(1, 65520, '\p{- is SPECIALS}', "");
Expect(0, 65520, '\p{^- is SPECIALS}', "");
Expect(0, 65520, '\P{- is SPECIALS}', "");
Expect(1, 65520, '\P{^- is SPECIALS}', "");
Expect(0, 65519, '\p{- is SPECIALS}', "");
Expect(1, 65519, '\p{^- is SPECIALS}', "");
Expect(1, 65519, '\P{- is SPECIALS}', "");
Expect(0, 65519, '\P{^- is SPECIALS}', "");
Error('\p{ In-Specials:=}');
Error('\P{ In-Specials:=}');
Expect(1, 65520, '\p{inspecials}', "");
Expect(0, 65520, '\p{^inspecials}', "");
Expect(0, 65520, '\P{inspecials}', "");
Expect(1, 65520, '\P{^inspecials}', "");
Expect(0, 65519, '\p{inspecials}', "");
Expect(1, 65519, '\p{^inspecials}', "");
Expect(1, 65519, '\P{inspecials}', "");
Expect(0, 65519, '\P{^inspecials}', "");
Expect(1, 65520, '\p{--In	specials}', "");
Expect(0, 65520, '\p{^--In	specials}', "");
Expect(0, 65520, '\P{--In	specials}', "");
Expect(1, 65520, '\P{^--In	specials}', "");
Expect(0, 65519, '\p{--In	specials}', "");
Expect(1, 65519, '\p{^--In	specials}', "");
Expect(1, 65519, '\P{--In	specials}', "");
Expect(0, 65519, '\P{^--In	specials}', "");
Error('\p{Mathematical/a/Operators}');
Error('\P{Mathematical/a/Operators}');
Expect(1, 8959, '\p{mathematicaloperators}', "");
Expect(0, 8959, '\p{^mathematicaloperators}', "");
Expect(0, 8959, '\P{mathematicaloperators}', "");
Expect(1, 8959, '\P{^mathematicaloperators}', "");
Expect(0, 8703, '\p{mathematicaloperators}', "");
Expect(1, 8703, '\p{^mathematicaloperators}', "");
Expect(1, 8703, '\P{mathematicaloperators}', "");
Expect(0, 8703, '\P{^mathematicaloperators}', "");
Expect(1, 8959, '\p{	Mathematical-Operators}', "");
Expect(0, 8959, '\p{^	Mathematical-Operators}', "");
Expect(0, 8959, '\P{	Mathematical-Operators}', "");
Expect(1, 8959, '\P{^	Mathematical-Operators}', "");
Expect(0, 8703, '\p{	Mathematical-Operators}', "");
Expect(1, 8703, '\p{^	Mathematical-Operators}', "");
Expect(1, 8703, '\P{	Mathematical-Operators}', "");
Expect(0, 8703, '\P{^	Mathematical-Operators}', "");
Error('\p{ :=is-MATHEMATICALOperators}');
Error('\P{ :=is-MATHEMATICALOperators}');
Expect(1, 8959, '\p{ismathematicaloperators}', "");
Expect(0, 8959, '\p{^ismathematicaloperators}', "");
Expect(0, 8959, '\P{ismathematicaloperators}', "");
Expect(1, 8959, '\P{^ismathematicaloperators}', "");
Expect(0, 8703, '\p{ismathematicaloperators}', "");
Expect(1, 8703, '\p{^ismathematicaloperators}', "");
Expect(1, 8703, '\P{ismathematicaloperators}', "");
Expect(0, 8703, '\P{^ismathematicaloperators}', "");
Expect(1, 8959, '\p{ _ISMathematicalOperators}', "");
Expect(0, 8959, '\p{^ _ISMathematicalOperators}', "");
Expect(0, 8959, '\P{ _ISMathematicalOperators}', "");
Expect(1, 8959, '\P{^ _ISMathematicalOperators}', "");
Expect(0, 8703, '\p{ _ISMathematicalOperators}', "");
Expect(1, 8703, '\p{^ _ISMathematicalOperators}', "");
Expect(1, 8703, '\P{ _ISMathematicalOperators}', "");
Expect(0, 8703, '\P{^ _ISMathematicalOperators}', "");
Error('\p{_ IN_Mathematical/a/operators}');
Error('\P{_ IN_Mathematical/a/operators}');
Expect(1, 8959, '\p{inmathematicaloperators}', "");
Expect(0, 8959, '\p{^inmathematicaloperators}', "");
Expect(0, 8959, '\P{inmathematicaloperators}', "");
Expect(1, 8959, '\P{^inmathematicaloperators}', "");
Expect(0, 8703, '\p{inmathematicaloperators}', "");
Expect(1, 8703, '\p{^inmathematicaloperators}', "");
Expect(1, 8703, '\P{inmathematicaloperators}', "");
Expect(0, 8703, '\P{^inmathematicaloperators}', "");
Expect(1, 8959, '\p{-in	MATHEMATICAL-OPERATORS}', "");
Expect(0, 8959, '\p{^-in	MATHEMATICAL-OPERATORS}', "");
Expect(0, 8959, '\P{-in	MATHEMATICAL-OPERATORS}', "");
Expect(1, 8959, '\P{^-in	MATHEMATICAL-OPERATORS}', "");
Expect(0, 8703, '\p{-in	MATHEMATICAL-OPERATORS}', "");
Expect(1, 8703, '\p{^-in	MATHEMATICAL-OPERATORS}', "");
Expect(1, 8703, '\P{-in	MATHEMATICAL-OPERATORS}', "");
Expect(0, 8703, '\P{^-in	MATHEMATICAL-OPERATORS}', "");
Error('\p{_:=Bidi_Mirrored}');
Error('\P{_:=Bidi_Mirrored}');
Expect(1, 41, '\p{bidimirrored}', "");
Expect(0, 41, '\p{^bidimirrored}', "");
Expect(0, 41, '\P{bidimirrored}', "");
Expect(1, 41, '\P{^bidimirrored}', "");
Expect(0, 39, '\p{bidimirrored}', "");
Expect(1, 39, '\p{^bidimirrored}', "");
Expect(1, 39, '\P{bidimirrored}', "");
Expect(0, 39, '\P{^bidimirrored}', "");
Expect(1, 41, '\p{	_Bidi Mirrored}', "");
Expect(0, 41, '\p{^	_Bidi Mirrored}', "");
Expect(0, 41, '\P{	_Bidi Mirrored}', "");
Expect(1, 41, '\P{^	_Bidi Mirrored}', "");
Expect(0, 39, '\p{	_Bidi Mirrored}', "");
Expect(1, 39, '\p{^	_Bidi Mirrored}', "");
Expect(1, 39, '\P{	_Bidi Mirrored}', "");
Expect(0, 39, '\P{^	_Bidi Mirrored}', "");
Error('\p{-IsBidi:=MIRRORED}');
Error('\P{-IsBidi:=MIRRORED}');
Expect(1, 41, '\p{isbidimirrored}', "");
Expect(0, 41, '\p{^isbidimirrored}', "");
Expect(0, 41, '\P{isbidimirrored}', "");
Expect(1, 41, '\P{^isbidimirrored}', "");
Expect(0, 39, '\p{isbidimirrored}', "");
Expect(1, 39, '\p{^isbidimirrored}', "");
Expect(1, 39, '\P{isbidimirrored}', "");
Expect(0, 39, '\P{^isbidimirrored}', "");
Expect(1, 41, '\p{	is Bidi	MIRRORED}', "");
Expect(0, 41, '\p{^	is Bidi	MIRRORED}', "");
Expect(0, 41, '\P{	is Bidi	MIRRORED}', "");
Expect(1, 41, '\P{^	is Bidi	MIRRORED}', "");
Expect(0, 39, '\p{	is Bidi	MIRRORED}', "");
Expect(1, 39, '\p{^	is Bidi	MIRRORED}', "");
Expect(1, 39, '\P{	is Bidi	MIRRORED}', "");
Expect(0, 39, '\P{^	is Bidi	MIRRORED}', "");
Error('\p{/a/Bidi_M}');
Error('\P{/a/Bidi_M}');
Expect(1, 41, '\p{bidim}', "");
Expect(0, 41, '\p{^bidim}', "");
Expect(0, 41, '\P{bidim}', "");
Expect(1, 41, '\P{^bidim}', "");
Expect(0, 39, '\p{bidim}', "");
Expect(1, 39, '\p{^bidim}', "");
Expect(1, 39, '\P{bidim}', "");
Expect(0, 39, '\P{^bidim}', "");
Expect(1, 41, '\p{ _Bidi-M}', "");
Expect(0, 41, '\p{^ _Bidi-M}', "");
Expect(0, 41, '\P{ _Bidi-M}', "");
Expect(1, 41, '\P{^ _Bidi-M}', "");
Expect(0, 39, '\p{ _Bidi-M}', "");
Expect(1, 39, '\p{^ _Bidi-M}', "");
Expect(1, 39, '\P{ _Bidi-M}', "");
Expect(0, 39, '\P{^ _Bidi-M}', "");
Error('\p{_	Is Bidi_M:=}');
Error('\P{_	Is Bidi_M:=}');
Expect(1, 41, '\p{isbidim}', "");
Expect(0, 41, '\p{^isbidim}', "");
Expect(0, 41, '\P{isbidim}', "");
Expect(1, 41, '\P{^isbidim}', "");
Expect(0, 39, '\p{isbidim}', "");
Expect(1, 39, '\p{^isbidim}', "");
Expect(1, 39, '\P{isbidim}', "");
Expect(0, 39, '\P{^isbidim}', "");
Expect(1, 41, '\p{ -Is_Bidi_M}', "");
Expect(0, 41, '\p{^ -Is_Bidi_M}', "");
Expect(0, 41, '\P{ -Is_Bidi_M}', "");
Expect(1, 41, '\P{^ -Is_Bidi_M}', "");
Expect(0, 39, '\p{ -Is_Bidi_M}', "");
Expect(1, 39, '\p{^ -Is_Bidi_M}', "");
Expect(1, 39, '\P{ -Is_Bidi_M}', "");
Expect(0, 39, '\P{^ -Is_Bidi_M}', "");
Error('\p{Katakana_Or_Hiragana}');
Error('\P{Katakana_Or_Hiragana}');
Error('\p{Is_Katakana_Or_Hiragana}');
Error('\P{Is_Katakana_Or_Hiragana}');
Error('\p{Hrkt}');
Error('\P{Hrkt}');
Error('\p{Is_Hrkt}');
Error('\P{Is_Hrkt}');
Error('\p{	OTHER/a/Symbol}');
Error('\P{	OTHER/a/Symbol}');
Expect(1, 167, '\p{othersymbol}', "");
Expect(0, 167, '\p{^othersymbol}', "");
Expect(0, 167, '\P{othersymbol}', "");
Expect(1, 167, '\P{^othersymbol}', "");
Expect(0, 165, '\p{othersymbol}', "");
Expect(1, 165, '\p{^othersymbol}', "");
Expect(1, 165, '\P{othersymbol}', "");
Expect(0, 165, '\P{^othersymbol}', "");
Expect(1, 167, '\p{-_otherSYMBOL}', "");
Expect(0, 167, '\p{^-_otherSYMBOL}', "");
Expect(0, 167, '\P{-_otherSYMBOL}', "");
Expect(1, 167, '\P{^-_otherSYMBOL}', "");
Expect(0, 165, '\p{-_otherSYMBOL}', "");
Expect(1, 165, '\p{^-_otherSYMBOL}', "");
Expect(1, 165, '\P{-_otherSYMBOL}', "");
Expect(0, 165, '\P{^-_otherSYMBOL}', "");
Error('\p{_is	Other:=Symbol}');
Error('\P{_is	Other:=Symbol}');
Expect(1, 167, '\p{isothersymbol}', "");
Expect(0, 167, '\p{^isothersymbol}', "");
Expect(0, 167, '\P{isothersymbol}', "");
Expect(1, 167, '\P{^isothersymbol}', "");
Expect(0, 165, '\p{isothersymbol}', "");
Expect(1, 165, '\p{^isothersymbol}', "");
Expect(1, 165, '\P{isothersymbol}', "");
Expect(0, 165, '\P{^isothersymbol}', "");
Expect(1, 167, '\p{-is_OTHERSymbol}', "");
Expect(0, 167, '\p{^-is_OTHERSymbol}', "");
Expect(0, 167, '\P{-is_OTHERSymbol}', "");
Expect(1, 167, '\P{^-is_OTHERSymbol}', "");
Expect(0, 165, '\p{-is_OTHERSymbol}', "");
Expect(1, 165, '\p{^-is_OTHERSymbol}', "");
Expect(1, 165, '\P{-is_OTHERSymbol}', "");
Expect(0, 165, '\P{^-is_OTHERSymbol}', "");
Error('\p{:=_So}');
Error('\P{:=_So}');
Expect(1, 167, '\p{so}', "");
Expect(0, 167, '\p{^so}', "");
Expect(0, 167, '\P{so}', "");
Expect(1, 167, '\P{^so}', "");
Expect(0, 165, '\p{so}', "");
Expect(1, 165, '\p{^so}', "");
Expect(1, 165, '\P{so}', "");
Expect(0, 165, '\P{^so}', "");
Expect(1, 167, '\p{	 So}', "");
Expect(0, 167, '\p{^	 So}', "");
Expect(0, 167, '\P{	 So}', "");
Expect(1, 167, '\P{^	 So}', "");
Expect(0, 165, '\p{	 So}', "");
Expect(1, 165, '\p{^	 So}', "");
Expect(1, 165, '\P{	 So}', "");
Expect(0, 165, '\P{^	 So}', "");
Error('\p{ IS SO/a/}');
Error('\P{ IS SO/a/}');
Expect(1, 167, '\p{isso}', "");
Expect(0, 167, '\p{^isso}', "");
Expect(0, 167, '\P{isso}', "");
Expect(1, 167, '\P{^isso}', "");
Expect(0, 165, '\p{isso}', "");
Expect(1, 165, '\p{^isso}', "");
Expect(1, 165, '\P{isso}', "");
Expect(0, 165, '\P{^isso}', "");
Expect(1, 167, '\p{_Is-SO}', "");
Expect(0, 167, '\p{^_Is-SO}', "");
Expect(0, 167, '\P{_Is-SO}', "");
Expect(1, 167, '\P{^_Is-SO}', "");
Expect(0, 165, '\p{_Is-SO}', "");
Expect(1, 165, '\p{^_Is-SO}', "");
Expect(1, 165, '\P{_Is-SO}', "");
Expect(0, 165, '\P{^_Is-SO}', "");
Error('\p{/a/ANY}');
Error('\P{/a/ANY}');
Expect(1, 1, '\p{any}', "");
Expect(0, 1, '\p{^any}', "");
Expect(0, 1, '\P{any}', "");
Expect(1, 1, '\P{^any}', "");
Expect(1, 1, '\p{	-any}', "");
Expect(0, 1, '\p{^	-any}', "");
Expect(0, 1, '\P{	-any}', "");
Expect(1, 1, '\P{^	-any}', "");
Error('\p{-All:=}');
Error('\P{-All:=}');
Expect(1, 1, '\p{all}', "");
Expect(0, 1, '\p{^all}', "");
Expect(0, 1, '\P{all}', "");
Expect(1, 1, '\P{^all}', "");
Expect(1, 1, '\p{_all}', "");
Expect(0, 1, '\p{^_all}', "");
Expect(0, 1, '\P{_all}', "");
Expect(1, 1, '\P{^_all}', "");
Error('\p{:=	_Is	ANY}');
Error('\P{:=	_Is	ANY}');
Expect(1, 1, '\p{isany}', "");
Expect(0, 1, '\p{^isany}', "");
Expect(0, 1, '\P{isany}', "");
Expect(1, 1, '\P{^isany}', "");
Expect(1, 1, '\p{	 IS	ANY}', "");
Expect(0, 1, '\p{^	 IS	ANY}', "");
Expect(0, 1, '\P{	 IS	ANY}', "");
Expect(1, 1, '\P{^	 IS	ANY}', "");
Error('\p{-	IS/a/ALL}');
Error('\P{-	IS/a/ALL}');
Expect(1, 1, '\p{isall}', "");
Expect(0, 1, '\p{^isall}', "");
Expect(0, 1, '\P{isall}', "");
Expect(1, 1, '\P{^isall}', "");
Expect(1, 1, '\p{_	is-ALL}', "");
Expect(0, 1, '\p{^_	is-ALL}', "");
Expect(0, 1, '\P{_	is-ALL}', "");
Expect(1, 1, '\P{^_	is-ALL}', "");
Error('\p{	:=OTHER Letter}');
Error('\P{	:=OTHER Letter}');
Expect(1, 443, '\p{otherletter}', "");
Expect(0, 443, '\p{^otherletter}', "");
Expect(0, 443, '\P{otherletter}', "");
Expect(1, 443, '\P{^otherletter}', "");
Expect(0, 442, '\p{otherletter}', "");
Expect(1, 442, '\p{^otherletter}', "");
Expect(1, 442, '\P{otherletter}', "");
Expect(0, 442, '\P{^otherletter}', "");
Expect(1, 443, '\p{-_Other	Letter}', "");
Expect(0, 443, '\p{^-_Other	Letter}', "");
Expect(0, 443, '\P{-_Other	Letter}', "");
Expect(1, 443, '\P{^-_Other	Letter}', "");
Expect(0, 442, '\p{-_Other	Letter}', "");
Expect(1, 442, '\p{^-_Other	Letter}', "");
Expect(1, 442, '\P{-_Other	Letter}', "");
Expect(0, 442, '\P{^-_Other	Letter}', "");
Error('\p{/a/  is-OTHERLetter}');
Error('\P{/a/  is-OTHERLetter}');
Expect(1, 443, '\p{isotherletter}', "");
Expect(0, 443, '\p{^isotherletter}', "");
Expect(0, 443, '\P{isotherletter}', "");
Expect(1, 443, '\P{^isotherletter}', "");
Expect(0, 442, '\p{isotherletter}', "");
Expect(1, 442, '\p{^isotherletter}', "");
Expect(1, 442, '\P{isotherletter}', "");
Expect(0, 442, '\P{^isotherletter}', "");
Expect(1, 443, '\p{-IS_OTHER-Letter}', "");
Expect(0, 443, '\p{^-IS_OTHER-Letter}', "");
Expect(0, 443, '\P{-IS_OTHER-Letter}', "");
Expect(1, 443, '\P{^-IS_OTHER-Letter}', "");
Expect(0, 442, '\p{-IS_OTHER-Letter}', "");
Expect(1, 442, '\p{^-IS_OTHER-Letter}', "");
Expect(1, 442, '\P{-IS_OTHER-Letter}', "");
Expect(0, 442, '\P{^-IS_OTHER-Letter}', "");
Error('\p{/a/_Lo}');
Error('\P{/a/_Lo}');
Expect(1, 443, '\p{lo}', "");
Expect(0, 443, '\p{^lo}', "");
Expect(0, 443, '\P{lo}', "");
Expect(1, 443, '\P{^lo}', "");
Expect(0, 442, '\p{lo}', "");
Expect(1, 442, '\p{^lo}', "");
Expect(1, 442, '\P{lo}', "");
Expect(0, 442, '\P{^lo}', "");
Expect(1, 443, '\p{_Lo}', "");
Expect(0, 443, '\p{^_Lo}', "");
Expect(0, 443, '\P{_Lo}', "");
Expect(1, 443, '\P{^_Lo}', "");
Expect(0, 442, '\p{_Lo}', "");
Expect(1, 442, '\p{^_Lo}', "");
Expect(1, 442, '\P{_Lo}', "");
Expect(0, 442, '\P{^_Lo}', "");
Error('\p{_	Is-Lo/a/}');
Error('\P{_	Is-Lo/a/}');
Expect(1, 443, '\p{islo}', "");
Expect(0, 443, '\p{^islo}', "");
Expect(0, 443, '\P{islo}', "");
Expect(1, 443, '\P{^islo}', "");
Expect(0, 442, '\p{islo}', "");
Expect(1, 442, '\p{^islo}', "");
Expect(1, 442, '\P{islo}', "");
Expect(0, 442, '\P{^islo}', "");
Expect(1, 443, '\p{		ISlo}', "");
Expect(0, 443, '\p{^		ISlo}', "");
Expect(0, 443, '\P{		ISlo}', "");
Expect(1, 443, '\P{^		ISlo}', "");
Expect(0, 442, '\p{		ISlo}', "");
Expect(1, 442, '\p{^		ISlo}', "");
Expect(1, 442, '\P{		ISlo}', "");
Expect(0, 442, '\P{^		ISlo}', "");
Error('\p{__other DEFAULT:=Ignorable	CODEPoint}');
Error('\P{__other DEFAULT:=Ignorable	CODEPoint}');
Expect(1, 847, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(0, 847, '\p{^-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(0, 847, '\P{-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(1, 847, '\P{^-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(0, 846, '\p{-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(1, 846, '\p{^-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(1, 846, '\P{-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Expect(0, 846, '\P{^-_Other_DefaultIGNORABLE-CODE Point}', 'deprecated');
Error('\p{:=Is OTHER_DEFAULT-ignorableCODE_POINT}');
Error('\P{:=Is OTHER_DEFAULT-ignorableCODE_POINT}');
Expect(1, 847, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(0, 847, '\p{^-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(0, 847, '\P{-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(1, 847, '\P{^-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(0, 846, '\p{-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(1, 846, '\p{^-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(1, 846, '\P{-Is-other	default	Ignorable Codepoint}', 'deprecated');
Expect(0, 846, '\P{^-Is-other	default	Ignorable Codepoint}', 'deprecated');
Error('\p{_:=ODI}');
Error('\P{_:=ODI}');
Expect(1, 847, '\p{odi}', 'deprecated');
Expect(0, 847, '\p{^odi}', 'deprecated');
Expect(0, 847, '\P{odi}', 'deprecated');
Expect(1, 847, '\P{^odi}', 'deprecated');
Expect(0, 846, '\p{odi}', 'deprecated');
Expect(1, 846, '\p{^odi}', 'deprecated');
Expect(1, 846, '\P{odi}', 'deprecated');
Expect(0, 846, '\P{^odi}', 'deprecated');
Expect(1, 847, '\p{_ODI}', 'deprecated');
Expect(0, 847, '\p{^_ODI}', 'deprecated');
Expect(0, 847, '\P{_ODI}', 'deprecated');
Expect(1, 847, '\P{^_ODI}', 'deprecated');
Expect(0, 846, '\p{_ODI}', 'deprecated');
Expect(1, 846, '\p{^_ODI}', 'deprecated');
Expect(1, 846, '\P{_ODI}', 'deprecated');
Expect(0, 846, '\P{^_ODI}', 'deprecated');
Error('\p{:=	_is	ODI}');
Error('\P{:=	_is	ODI}');
Expect(1, 847, '\p{isodi}', 'deprecated');
Expect(0, 847, '\p{^isodi}', 'deprecated');
Expect(0, 847, '\P{isodi}', 'deprecated');
Expect(1, 847, '\P{^isodi}', 'deprecated');
Expect(0, 846, '\p{isodi}', 'deprecated');
Expect(1, 846, '\p{^isodi}', 'deprecated');
Expect(1, 846, '\P{isodi}', 'deprecated');
Expect(0, 846, '\P{^isodi}', 'deprecated');
Expect(1, 847, '\p{ 	is-ODI}', 'deprecated');
Expect(0, 847, '\p{^ 	is-ODI}', 'deprecated');
Expect(0, 847, '\P{ 	is-ODI}', 'deprecated');
Expect(1, 847, '\P{^ 	is-ODI}', 'deprecated');
Expect(0, 846, '\p{ 	is-ODI}', 'deprecated');
Expect(1, 846, '\p{^ 	is-ODI}', 'deprecated');
Expect(1, 846, '\P{ 	is-ODI}', 'deprecated');
Expect(0, 846, '\P{^ 	is-ODI}', 'deprecated');
Error('\p{		SUNDANESE:=}');
Error('\P{		SUNDANESE:=}');
Expect(1, 7082, '\p{sundanese}', "");
Expect(0, 7082, '\p{^sundanese}', "");
Expect(0, 7082, '\P{sundanese}', "");
Expect(1, 7082, '\P{^sundanese}', "");
Expect(0, 7039, '\p{sundanese}', "");
Expect(1, 7039, '\p{^sundanese}', "");
Expect(1, 7039, '\P{sundanese}', "");
Expect(0, 7039, '\P{^sundanese}', "");
Expect(1, 7082, '\p{		Sundanese}', "");
Expect(0, 7082, '\p{^		Sundanese}', "");
Expect(0, 7082, '\P{		Sundanese}', "");
Expect(1, 7082, '\P{^		Sundanese}', "");
Expect(0, 7039, '\p{		Sundanese}', "");
Expect(1, 7039, '\p{^		Sundanese}', "");
Expect(1, 7039, '\P{		Sundanese}', "");
Expect(0, 7039, '\P{^		Sundanese}', "");
Error('\p{	Is_sundanese:=}');
Error('\P{	Is_sundanese:=}');
Expect(1, 7082, '\p{issundanese}', "");
Expect(0, 7082, '\p{^issundanese}', "");
Expect(0, 7082, '\P{issundanese}', "");
Expect(1, 7082, '\P{^issundanese}', "");
Expect(0, 7039, '\p{issundanese}', "");
Expect(1, 7039, '\p{^issundanese}', "");
Expect(1, 7039, '\P{issundanese}', "");
Expect(0, 7039, '\P{^issundanese}', "");
Expect(1, 7082, '\p{--IsSUNDANESE}', "");
Expect(0, 7082, '\p{^--IsSUNDANESE}', "");
Expect(0, 7082, '\P{--IsSUNDANESE}', "");
Expect(1, 7082, '\P{^--IsSUNDANESE}', "");
Expect(0, 7039, '\p{--IsSUNDANESE}', "");
Expect(1, 7039, '\p{^--IsSUNDANESE}', "");
Expect(1, 7039, '\P{--IsSUNDANESE}', "");
Expect(0, 7039, '\P{^--IsSUNDANESE}', "");
Error('\p{ Sund/a/}');
Error('\P{ Sund/a/}');
Expect(1, 7082, '\p{sund}', "");
Expect(0, 7082, '\p{^sund}', "");
Expect(0, 7082, '\P{sund}', "");
Expect(1, 7082, '\P{^sund}', "");
Expect(0, 7039, '\p{sund}', "");
Expect(1, 7039, '\p{^sund}', "");
Expect(1, 7039, '\P{sund}', "");
Expect(0, 7039, '\P{^sund}', "");
Expect(1, 7082, '\p{- SUND}', "");
Expect(0, 7082, '\p{^- SUND}', "");
Expect(0, 7082, '\P{- SUND}', "");
Expect(1, 7082, '\P{^- SUND}', "");
Expect(0, 7039, '\p{- SUND}', "");
Expect(1, 7039, '\p{^- SUND}', "");
Expect(1, 7039, '\P{- SUND}', "");
Expect(0, 7039, '\P{^- SUND}', "");
Error('\p{_Is Sund/a/}');
Error('\P{_Is Sund/a/}');
Expect(1, 7082, '\p{issund}', "");
Expect(0, 7082, '\p{^issund}', "");
Expect(0, 7082, '\P{issund}', "");
Expect(1, 7082, '\P{^issund}', "");
Expect(0, 7039, '\p{issund}', "");
Expect(1, 7039, '\p{^issund}', "");
Expect(1, 7039, '\P{issund}', "");
Expect(0, 7039, '\P{^issund}', "");
Expect(1, 7082, '\p{- Is-SUND}', "");
Expect(0, 7082, '\p{^- Is-SUND}', "");
Expect(0, 7082, '\P{- Is-SUND}', "");
Expect(1, 7082, '\P{^- Is-SUND}', "");
Expect(0, 7039, '\p{- Is-SUND}', "");
Expect(1, 7039, '\p{^- Is-SUND}', "");
Expect(1, 7039, '\P{- Is-SUND}', "");
Expect(0, 7039, '\P{^- Is-SUND}', "");
Error('\p{--Carian:=}');
Error('\P{--Carian:=}');
Expect(1, 66256, '\p{carian}', "");
Expect(0, 66256, '\p{^carian}', "");
Expect(0, 66256, '\P{carian}', "");
Expect(1, 66256, '\P{^carian}', "");
Expect(0, 66207, '\p{carian}', "");
Expect(1, 66207, '\p{^carian}', "");
Expect(1, 66207, '\P{carian}', "");
Expect(0, 66207, '\P{^carian}', "");
Expect(1, 66256, '\p{_carian}', "");
Expect(0, 66256, '\p{^_carian}', "");
Expect(0, 66256, '\P{_carian}', "");
Expect(1, 66256, '\P{^_carian}', "");
Expect(0, 66207, '\p{_carian}', "");
Expect(1, 66207, '\p{^_carian}', "");
Expect(1, 66207, '\P{_carian}', "");
Expect(0, 66207, '\P{^_carian}', "");
Error('\p{:=-IS CARIAN}');
Error('\P{:=-IS CARIAN}');
Expect(1, 66256, '\p{iscarian}', "");
Expect(0, 66256, '\p{^iscarian}', "");
Expect(0, 66256, '\P{iscarian}', "");
Expect(1, 66256, '\P{^iscarian}', "");
Expect(0, 66207, '\p{iscarian}', "");
Expect(1, 66207, '\p{^iscarian}', "");
Expect(1, 66207, '\P{iscarian}', "");
Expect(0, 66207, '\P{^iscarian}', "");
Expect(1, 66256, '\p{_-IS-Carian}', "");
Expect(0, 66256, '\p{^_-IS-Carian}', "");
Expect(0, 66256, '\P{_-IS-Carian}', "");
Expect(1, 66256, '\P{^_-IS-Carian}', "");
Expect(0, 66207, '\p{_-IS-Carian}', "");
Expect(1, 66207, '\p{^_-IS-Carian}', "");
Expect(1, 66207, '\P{_-IS-Carian}', "");
Expect(0, 66207, '\P{^_-IS-Carian}', "");
Error('\p{/a/	 cari}');
Error('\P{/a/	 cari}');
Expect(1, 66256, '\p{cari}', "");
Expect(0, 66256, '\p{^cari}', "");
Expect(0, 66256, '\P{cari}', "");
Expect(1, 66256, '\P{^cari}', "");
Expect(0, 66207, '\p{cari}', "");
Expect(1, 66207, '\p{^cari}', "");
Expect(1, 66207, '\P{cari}', "");
Expect(0, 66207, '\P{^cari}', "");
Expect(1, 66256, '\p{-_Cari}', "");
Expect(0, 66256, '\p{^-_Cari}', "");
Expect(0, 66256, '\P{-_Cari}', "");
Expect(1, 66256, '\P{^-_Cari}', "");
Expect(0, 66207, '\p{-_Cari}', "");
Expect(1, 66207, '\p{^-_Cari}', "");
Expect(1, 66207, '\P{-_Cari}', "");
Expect(0, 66207, '\P{^-_Cari}', "");
Error('\p{_/a/is	cari}');
Error('\P{_/a/is	cari}');
Expect(1, 66256, '\p{iscari}', "");
Expect(0, 66256, '\p{^iscari}', "");
Expect(0, 66256, '\P{iscari}', "");
Expect(1, 66256, '\P{^iscari}', "");
Expect(0, 66207, '\p{iscari}', "");
Expect(1, 66207, '\p{^iscari}', "");
Expect(1, 66207, '\P{iscari}', "");
Expect(0, 66207, '\P{^iscari}', "");
Expect(1, 66256, '\p{ Is Cari}', "");
Expect(0, 66256, '\p{^ Is Cari}', "");
Expect(0, 66256, '\P{ Is Cari}', "");
Expect(1, 66256, '\P{^ Is Cari}', "");
Expect(0, 66207, '\p{ Is Cari}', "");
Expect(1, 66207, '\p{^ Is Cari}', "");
Expect(1, 66207, '\P{ Is Cari}', "");
Expect(0, 66207, '\P{^ Is Cari}', "");
Error('\p{ /a/olditalic}');
Error('\P{ /a/olditalic}');
Expect(1, 66334, '\p{olditalic}', "");
Expect(0, 66334, '\p{^olditalic}', "");
Expect(0, 66334, '\P{olditalic}', "");
Expect(1, 66334, '\P{^olditalic}', "");
Expect(0, 66303, '\p{olditalic}', "");
Expect(1, 66303, '\p{^olditalic}', "");
Expect(1, 66303, '\P{olditalic}', "");
Expect(0, 66303, '\P{^olditalic}', "");
Expect(1, 66334, '\p{ 	OldITALIC}', "");
Expect(0, 66334, '\p{^ 	OldITALIC}', "");
Expect(0, 66334, '\P{ 	OldITALIC}', "");
Expect(1, 66334, '\P{^ 	OldITALIC}', "");
Expect(0, 66303, '\p{ 	OldITALIC}', "");
Expect(1, 66303, '\p{^ 	OldITALIC}', "");
Expect(1, 66303, '\P{ 	OldITALIC}', "");
Expect(0, 66303, '\P{^ 	OldITALIC}', "");
Error('\p{- Is:=OldItalic}');
Error('\P{- Is:=OldItalic}');
Expect(1, 66334, '\p{isolditalic}', "");
Expect(0, 66334, '\p{^isolditalic}', "");
Expect(0, 66334, '\P{isolditalic}', "");
Expect(1, 66334, '\P{^isolditalic}', "");
Expect(0, 66303, '\p{isolditalic}', "");
Expect(1, 66303, '\p{^isolditalic}', "");
Expect(1, 66303, '\P{isolditalic}', "");
Expect(0, 66303, '\P{^isolditalic}', "");
Expect(1, 66334, '\p{__is-OldItalic}', "");
Expect(0, 66334, '\p{^__is-OldItalic}', "");
Expect(0, 66334, '\P{__is-OldItalic}', "");
Expect(1, 66334, '\P{^__is-OldItalic}', "");
Expect(0, 66303, '\p{__is-OldItalic}', "");
Expect(1, 66303, '\p{^__is-OldItalic}', "");
Expect(1, 66303, '\P{__is-OldItalic}', "");
Expect(0, 66303, '\P{^__is-OldItalic}', "");
Error('\p{-:=ital}');
Error('\P{-:=ital}');
Expect(1, 66334, '\p{ital}', "");
Expect(0, 66334, '\p{^ital}', "");
Expect(0, 66334, '\P{ital}', "");
Expect(1, 66334, '\P{^ital}', "");
Expect(0, 66303, '\p{ital}', "");
Expect(1, 66303, '\p{^ital}', "");
Expect(1, 66303, '\P{ital}', "");
Expect(0, 66303, '\P{^ital}', "");
Expect(1, 66334, '\p{ ital}', "");
Expect(0, 66334, '\p{^ ital}', "");
Expect(0, 66334, '\P{ ital}', "");
Expect(1, 66334, '\P{^ ital}', "");
Expect(0, 66303, '\p{ ital}', "");
Expect(1, 66303, '\p{^ ital}', "");
Expect(1, 66303, '\P{ ital}', "");
Expect(0, 66303, '\P{^ ital}', "");
Error('\p{		is:=ital}');
Error('\P{		is:=ital}');
Expect(1, 66334, '\p{isital}', "");
Expect(0, 66334, '\p{^isital}', "");
Expect(0, 66334, '\P{isital}', "");
Expect(1, 66334, '\P{^isital}', "");
Expect(0, 66303, '\p{isital}', "");
Expect(1, 66303, '\p{^isital}', "");
Expect(1, 66303, '\P{isital}', "");
Expect(0, 66303, '\P{^isital}', "");
Expect(1, 66334, '\p{-_IS Ital}', "");
Expect(0, 66334, '\p{^-_IS Ital}', "");
Expect(0, 66334, '\P{-_IS Ital}', "");
Expect(1, 66334, '\P{^-_IS Ital}', "");
Expect(0, 66303, '\p{-_IS Ital}', "");
Expect(1, 66303, '\p{^-_IS Ital}', "");
Expect(1, 66303, '\P{-_IS Ital}', "");
Expect(0, 66303, '\P{^-_IS Ital}', "");
Error('\p{	XDIGIT:=}');
Error('\P{	XDIGIT:=}');
Expect(1, 57, '\p{xdigit}', "");
Expect(0, 57, '\p{^xdigit}', "");
Expect(0, 57, '\P{xdigit}', "");
Expect(1, 57, '\P{^xdigit}', "");
Expect(0, 47, '\p{xdigit}', "");
Expect(1, 47, '\p{^xdigit}', "");
Expect(1, 47, '\P{xdigit}', "");
Expect(0, 47, '\P{^xdigit}', "");
Expect(1, 57, '\p{	 xdigit}', "");
Expect(0, 57, '\p{^	 xdigit}', "");
Expect(0, 57, '\P{	 xdigit}', "");
Expect(1, 57, '\P{^	 xdigit}', "");
Expect(0, 47, '\p{	 xdigit}', "");
Expect(1, 47, '\p{^	 xdigit}', "");
Expect(1, 47, '\P{	 xdigit}', "");
Expect(0, 47, '\P{^	 xdigit}', "");
Error('\p{/a/__ISXDigit}');
Error('\P{/a/__ISXDigit}');
Expect(1, 57, '\p{isxdigit}', "");
Expect(0, 57, '\p{^isxdigit}', "");
Expect(0, 57, '\P{isxdigit}', "");
Expect(1, 57, '\P{^isxdigit}', "");
Expect(0, 47, '\p{isxdigit}', "");
Expect(1, 47, '\p{^isxdigit}', "");
Expect(1, 47, '\P{isxdigit}', "");
Expect(0, 47, '\P{^isxdigit}', "");
Expect(1, 57, '\p{ isXDIGIT}', "");
Expect(0, 57, '\p{^ isXDIGIT}', "");
Expect(0, 57, '\P{ isXDIGIT}', "");
Expect(1, 57, '\P{^ isXDIGIT}', "");
Expect(0, 47, '\p{ isXDIGIT}', "");
Expect(1, 47, '\p{^ isXDIGIT}', "");
Expect(1, 47, '\P{ isXDIGIT}', "");
Expect(0, 47, '\P{^ isXDIGIT}', "");
Error('\p{	HexDigit/a/}');
Error('\P{	HexDigit/a/}');
Expect(1, 57, '\p{hexdigit}', "");
Expect(0, 57, '\p{^hexdigit}', "");
Expect(0, 57, '\P{hexdigit}', "");
Expect(1, 57, '\P{^hexdigit}', "");
Expect(0, 47, '\p{hexdigit}', "");
Expect(1, 47, '\p{^hexdigit}', "");
Expect(1, 47, '\P{hexdigit}', "");
Expect(0, 47, '\P{^hexdigit}', "");
Expect(1, 57, '\p{	_Hexdigit}', "");
Expect(0, 57, '\p{^	_Hexdigit}', "");
Expect(0, 57, '\P{	_Hexdigit}', "");
Expect(1, 57, '\P{^	_Hexdigit}', "");
Expect(0, 47, '\p{	_Hexdigit}', "");
Expect(1, 47, '\p{^	_Hexdigit}', "");
Expect(1, 47, '\P{	_Hexdigit}', "");
Expect(0, 47, '\P{^	_Hexdigit}', "");
Error('\p{-/a/Is-HEX_Digit}');
Error('\P{-/a/Is-HEX_Digit}');
Expect(1, 57, '\p{ishexdigit}', "");
Expect(0, 57, '\p{^ishexdigit}', "");
Expect(0, 57, '\P{ishexdigit}', "");
Expect(1, 57, '\P{^ishexdigit}', "");
Expect(0, 47, '\p{ishexdigit}', "");
Expect(1, 47, '\p{^ishexdigit}', "");
Expect(1, 47, '\P{ishexdigit}', "");
Expect(0, 47, '\P{^ishexdigit}', "");
Expect(1, 57, '\p{		IS Hexdigit}', "");
Expect(0, 57, '\p{^		IS Hexdigit}', "");
Expect(0, 57, '\P{		IS Hexdigit}', "");
Expect(1, 57, '\P{^		IS Hexdigit}', "");
Expect(0, 47, '\p{		IS Hexdigit}', "");
Expect(1, 47, '\p{^		IS Hexdigit}', "");
Expect(1, 47, '\P{		IS Hexdigit}', "");
Expect(0, 47, '\P{^		IS Hexdigit}', "");
Error('\p{/a/__hex}');
Error('\P{/a/__hex}');
Expect(1, 57, '\p{hex}', "");
Expect(0, 57, '\p{^hex}', "");
Expect(0, 57, '\P{hex}', "");
Expect(1, 57, '\P{^hex}', "");
Expect(0, 47, '\p{hex}', "");
Expect(1, 47, '\p{^hex}', "");
Expect(1, 47, '\P{hex}', "");
Expect(0, 47, '\P{^hex}', "");
Expect(1, 57, '\p{_-hex}', "");
Expect(0, 57, '\p{^_-hex}', "");
Expect(0, 57, '\P{_-hex}', "");
Expect(1, 57, '\P{^_-hex}', "");
Expect(0, 47, '\p{_-hex}', "");
Expect(1, 47, '\p{^_-hex}', "");
Expect(1, 47, '\P{_-hex}', "");
Expect(0, 47, '\P{^_-hex}', "");
Error('\p{ IS HEX:=}');
Error('\P{ IS HEX:=}');
Expect(1, 57, '\p{ishex}', "");
Expect(0, 57, '\p{^ishex}', "");
Expect(0, 57, '\P{ishex}', "");
Expect(1, 57, '\P{^ishex}', "");
Expect(0, 47, '\p{ishex}', "");
Expect(1, 47, '\p{^ishex}', "");
Expect(1, 47, '\P{ishex}', "");
Expect(0, 47, '\P{^ishex}', "");
Expect(1, 57, '\p{ 	Is-hex}', "");
Expect(0, 57, '\p{^ 	Is-hex}', "");
Expect(0, 57, '\P{ 	Is-hex}', "");
Expect(1, 57, '\P{^ 	Is-hex}', "");
Expect(0, 47, '\p{ 	Is-hex}', "");
Expect(1, 47, '\p{^ 	Is-hex}', "");
Expect(1, 47, '\P{ 	Is-hex}', "");
Expect(0, 47, '\P{^ 	Is-hex}', "");
Error('\p{/a/_-TITLE}');
Error('\P{/a/_-TITLE}');
Expect(1, 453, '\p{title}', "");
Expect(0, 453, '\p{^title}', "");
Expect(0, 453, '\P{title}', "");
Expect(1, 453, '\P{^title}', "");
Expect(0, 452, '\p{title}', "");
Expect(1, 452, '\p{^title}', "");
Expect(1, 452, '\P{title}', "");
Expect(0, 452, '\P{^title}', "");
Expect(1, 453, '\p{	Title}', "");
Expect(0, 453, '\p{^	Title}', "");
Expect(0, 453, '\P{	Title}', "");
Expect(1, 453, '\P{^	Title}', "");
Expect(0, 452, '\p{	Title}', "");
Expect(1, 452, '\p{^	Title}', "");
Expect(1, 452, '\P{	Title}', "");
Expect(0, 452, '\P{^	Title}', "");
Error('\p{/a/Is-Title}');
Error('\P{/a/Is-Title}');
Expect(1, 453, '\p{istitle}', "");
Expect(0, 453, '\p{^istitle}', "");
Expect(0, 453, '\P{istitle}', "");
Expect(1, 453, '\P{^istitle}', "");
Expect(0, 452, '\p{istitle}', "");
Expect(1, 452, '\p{^istitle}', "");
Expect(1, 452, '\P{istitle}', "");
Expect(0, 452, '\P{^istitle}', "");
Expect(1, 453, '\p{__Is	Title}', "");
Expect(0, 453, '\p{^__Is	Title}', "");
Expect(0, 453, '\P{__Is	Title}', "");
Expect(1, 453, '\P{^__Is	Title}', "");
Expect(0, 452, '\p{__Is	Title}', "");
Expect(1, 452, '\p{^__Is	Title}', "");
Expect(1, 452, '\P{__Is	Title}', "");
Expect(0, 452, '\P{^__Is	Title}', "");
Error('\p{/a/  Titlecase letter}');
Error('\P{/a/  Titlecase letter}');
Expect(1, 453, '\p{titlecaseletter}', "");
Expect(0, 453, '\p{^titlecaseletter}', "");
Expect(0, 453, '\P{titlecaseletter}', "");
Expect(1, 453, '\P{^titlecaseletter}', "");
Expect(0, 452, '\p{titlecaseletter}', "");
Expect(1, 452, '\p{^titlecaseletter}', "");
Expect(1, 452, '\P{titlecaseletter}', "");
Expect(0, 452, '\P{^titlecaseletter}', "");
Expect(1, 453, '\p{ Titlecase_Letter}', "");
Expect(0, 453, '\p{^ Titlecase_Letter}', "");
Expect(0, 453, '\P{ Titlecase_Letter}', "");
Expect(1, 453, '\P{^ Titlecase_Letter}', "");
Expect(0, 452, '\p{ Titlecase_Letter}', "");
Expect(1, 452, '\p{^ Titlecase_Letter}', "");
Expect(1, 452, '\P{ Titlecase_Letter}', "");
Expect(0, 452, '\P{^ Titlecase_Letter}', "");
Error('\p{__Is/a/Titlecase	Letter}');
Error('\P{__Is/a/Titlecase	Letter}');
Expect(1, 453, '\p{istitlecaseletter}', "");
Expect(0, 453, '\p{^istitlecaseletter}', "");
Expect(0, 453, '\P{istitlecaseletter}', "");
Expect(1, 453, '\P{^istitlecaseletter}', "");
Expect(0, 452, '\p{istitlecaseletter}', "");
Expect(1, 452, '\p{^istitlecaseletter}', "");
Expect(1, 452, '\P{istitlecaseletter}', "");
Expect(0, 452, '\P{^istitlecaseletter}', "");
Expect(1, 453, '\p{_ Is	Titlecase letter}', "");
Expect(0, 453, '\p{^_ Is	Titlecase letter}', "");
Expect(0, 453, '\P{_ Is	Titlecase letter}', "");
Expect(1, 453, '\P{^_ Is	Titlecase letter}', "");
Expect(0, 452, '\p{_ Is	Titlecase letter}', "");
Expect(1, 452, '\p{^_ Is	Titlecase letter}', "");
Expect(1, 452, '\P{_ Is	Titlecase letter}', "");
Expect(0, 452, '\P{^_ Is	Titlecase letter}', "");
Error('\p{_:=Lt}');
Error('\P{_:=Lt}');
Expect(1, 453, '\p{lt}', "");
Expect(0, 453, '\p{^lt}', "");
Expect(0, 453, '\P{lt}', "");
Expect(1, 453, '\P{^lt}', "");
Expect(0, 452, '\p{lt}', "");
Expect(1, 452, '\p{^lt}', "");
Expect(1, 452, '\P{lt}', "");
Expect(0, 452, '\P{^lt}', "");
Expect(1, 453, '\p{-	lt}', "");
Expect(0, 453, '\p{^-	lt}', "");
Expect(0, 453, '\P{-	lt}', "");
Expect(1, 453, '\P{^-	lt}', "");
Expect(0, 452, '\p{-	lt}', "");
Expect(1, 452, '\p{^-	lt}', "");
Expect(1, 452, '\P{-	lt}', "");
Expect(0, 452, '\P{^-	lt}', "");
Error('\p{ 	IS:=lt}');
Error('\P{ 	IS:=lt}');
Expect(1, 453, '\p{islt}', "");
Expect(0, 453, '\p{^islt}', "");
Expect(0, 453, '\P{islt}', "");
Expect(1, 453, '\P{^islt}', "");
Expect(0, 452, '\p{islt}', "");
Expect(1, 452, '\p{^islt}', "");
Expect(1, 452, '\P{islt}', "");
Expect(0, 452, '\P{^islt}', "");
Expect(1, 453, '\p{_	IsLt}', "");
Expect(0, 453, '\p{^_	IsLt}', "");
Expect(0, 453, '\P{_	IsLt}', "");
Expect(1, 453, '\P{^_	IsLt}', "");
Expect(0, 452, '\p{_	IsLt}', "");
Expect(1, 452, '\p{^_	IsLt}', "");
Expect(1, 452, '\P{_	IsLt}', "");
Expect(0, 452, '\P{^_	IsLt}', "");
Error('\p{-_SPACING/a/Modifier-LETTERS}');
Error('\P{-_SPACING/a/Modifier-LETTERS}');
Expect(1, 767, '\p{spacingmodifierletters}', "");
Expect(0, 767, '\p{^spacingmodifierletters}', "");
Expect(0, 767, '\P{spacingmodifierletters}', "");
Expect(1, 767, '\P{^spacingmodifierletters}', "");
Expect(0, 687, '\p{spacingmodifierletters}', "");
Expect(1, 687, '\p{^spacingmodifierletters}', "");
Expect(1, 687, '\P{spacingmodifierletters}', "");
Expect(0, 687, '\P{^spacingmodifierletters}', "");
Expect(1, 767, '\p{		spacingModifier	Letters}', "");
Expect(0, 767, '\p{^		spacingModifier	Letters}', "");
Expect(0, 767, '\P{		spacingModifier	Letters}', "");
Expect(1, 767, '\P{^		spacingModifier	Letters}', "");
Expect(0, 687, '\p{		spacingModifier	Letters}', "");
Expect(1, 687, '\p{^		spacingModifier	Letters}', "");
Expect(1, 687, '\P{		spacingModifier	Letters}', "");
Expect(0, 687, '\P{^		spacingModifier	Letters}', "");
Error('\p{-	Is/a/SPACING-Modifier-LETTERS}');
Error('\P{-	Is/a/SPACING-Modifier-LETTERS}');
Expect(1, 767, '\p{isspacingmodifierletters}', "");
Expect(0, 767, '\p{^isspacingmodifierletters}', "");
Expect(0, 767, '\P{isspacingmodifierletters}', "");
Expect(1, 767, '\P{^isspacingmodifierletters}', "");
Expect(0, 687, '\p{isspacingmodifierletters}', "");
Expect(1, 687, '\p{^isspacingmodifierletters}', "");
Expect(1, 687, '\P{isspacingmodifierletters}', "");
Expect(0, 687, '\P{^isspacingmodifierletters}', "");
Expect(1, 767, '\p{ _IS Spacing_modifier_Letters}', "");
Expect(0, 767, '\p{^ _IS Spacing_modifier_Letters}', "");
Expect(0, 767, '\P{ _IS Spacing_modifier_Letters}', "");
Expect(1, 767, '\P{^ _IS Spacing_modifier_Letters}', "");
Expect(0, 687, '\p{ _IS Spacing_modifier_Letters}', "");
Expect(1, 687, '\p{^ _IS Spacing_modifier_Letters}', "");
Expect(1, 687, '\P{ _IS Spacing_modifier_Letters}', "");
Expect(0, 687, '\P{^ _IS Spacing_modifier_Letters}', "");
Error('\p{--IN_spacing	Modifier:=letters}');
Error('\P{--IN_spacing	Modifier:=letters}');
Expect(1, 767, '\p{inspacingmodifierletters}', "");
Expect(0, 767, '\p{^inspacingmodifierletters}', "");
Expect(0, 767, '\P{inspacingmodifierletters}', "");
Expect(1, 767, '\P{^inspacingmodifierletters}', "");
Expect(0, 687, '\p{inspacingmodifierletters}', "");
Expect(1, 687, '\p{^inspacingmodifierletters}', "");
Expect(1, 687, '\P{inspacingmodifierletters}', "");
Expect(0, 687, '\P{^inspacingmodifierletters}', "");
Expect(1, 767, '\p{		IN SPACING_Modifier Letters}', "");
Expect(0, 767, '\p{^		IN SPACING_Modifier Letters}', "");
Expect(0, 767, '\P{		IN SPACING_Modifier Letters}', "");
Expect(1, 767, '\P{^		IN SPACING_Modifier Letters}', "");
Expect(0, 687, '\p{		IN SPACING_Modifier Letters}', "");
Expect(1, 687, '\p{^		IN SPACING_Modifier Letters}', "");
Expect(1, 687, '\P{		IN SPACING_Modifier Letters}', "");
Expect(0, 687, '\P{^		IN SPACING_Modifier Letters}', "");
Error('\p{Grapheme_Link}');
Error('\P{Grapheme_Link}');
Error('\p{Is_Grapheme_Link}');
Error('\P{Is_Grapheme_Link}');
Error('\p{Gr_Link}');
Error('\P{Gr_Link}');
Error('\p{Is_Gr_Link}');
Error('\P{Is_Gr_Link}');
Error('\p{-:=Other-lowercase}');
Error('\P{-:=Other-lowercase}');
Expect(1, 696, '\p{otherlowercase}', 'deprecated');
Expect(0, 696, '\p{^otherlowercase}', 'deprecated');
Expect(0, 696, '\P{otherlowercase}', 'deprecated');
Expect(1, 696, '\P{^otherlowercase}', 'deprecated');
Expect(0, 687, '\p{otherlowercase}', 'deprecated');
Expect(1, 687, '\p{^otherlowercase}', 'deprecated');
Expect(1, 687, '\P{otherlowercase}', 'deprecated');
Expect(0, 687, '\P{^otherlowercase}', 'deprecated');
Expect(1, 696, '\p{	Other_Lowercase}', 'deprecated');
Expect(0, 696, '\p{^	Other_Lowercase}', 'deprecated');
Expect(0, 696, '\P{	Other_Lowercase}', 'deprecated');
Expect(1, 696, '\P{^	Other_Lowercase}', 'deprecated');
Expect(0, 687, '\p{	Other_Lowercase}', 'deprecated');
Expect(1, 687, '\p{^	Other_Lowercase}', 'deprecated');
Expect(1, 687, '\P{	Other_Lowercase}', 'deprecated');
Expect(0, 687, '\P{^	Other_Lowercase}', 'deprecated');
Error('\p{	_is-OTHER-lowercase/a/}');
Error('\P{	_is-OTHER-lowercase/a/}');
Expect(1, 696, '\p{isotherlowercase}', 'deprecated');
Expect(0, 696, '\p{^isotherlowercase}', 'deprecated');
Expect(0, 696, '\P{isotherlowercase}', 'deprecated');
Expect(1, 696, '\P{^isotherlowercase}', 'deprecated');
Expect(0, 687, '\p{isotherlowercase}', 'deprecated');
Expect(1, 687, '\p{^isotherlowercase}', 'deprecated');
Expect(1, 687, '\P{isotherlowercase}', 'deprecated');
Expect(0, 687, '\P{^isotherlowercase}', 'deprecated');
Expect(1, 696, '\p{ Is Other-LOWERCASE}', 'deprecated');
Expect(0, 696, '\p{^ Is Other-LOWERCASE}', 'deprecated');
Expect(0, 696, '\P{ Is Other-LOWERCASE}', 'deprecated');
Expect(1, 696, '\P{^ Is Other-LOWERCASE}', 'deprecated');
Expect(0, 687, '\p{ Is Other-LOWERCASE}', 'deprecated');
Expect(1, 687, '\p{^ Is Other-LOWERCASE}', 'deprecated');
Expect(1, 687, '\P{ Is Other-LOWERCASE}', 'deprecated');
Expect(0, 687, '\P{^ Is Other-LOWERCASE}', 'deprecated');
Error('\p{ /a/olower}');
Error('\P{ /a/olower}');
Expect(1, 696, '\p{olower}', 'deprecated');
Expect(0, 696, '\p{^olower}', 'deprecated');
Expect(0, 696, '\P{olower}', 'deprecated');
Expect(1, 696, '\P{^olower}', 'deprecated');
Expect(0, 687, '\p{olower}', 'deprecated');
Expect(1, 687, '\p{^olower}', 'deprecated');
Expect(1, 687, '\P{olower}', 'deprecated');
Expect(0, 687, '\P{^olower}', 'deprecated');
Expect(1, 696, '\p{--OLOWER}', 'deprecated');
Expect(0, 696, '\p{^--OLOWER}', 'deprecated');
Expect(0, 696, '\P{--OLOWER}', 'deprecated');
Expect(1, 696, '\P{^--OLOWER}', 'deprecated');
Expect(0, 687, '\p{--OLOWER}', 'deprecated');
Expect(1, 687, '\p{^--OLOWER}', 'deprecated');
Expect(1, 687, '\P{--OLOWER}', 'deprecated');
Expect(0, 687, '\P{^--OLOWER}', 'deprecated');
Error('\p{	/a/IsOLower}');
Error('\P{	/a/IsOLower}');
Expect(1, 696, '\p{isolower}', 'deprecated');
Expect(0, 696, '\p{^isolower}', 'deprecated');
Expect(0, 696, '\P{isolower}', 'deprecated');
Expect(1, 696, '\P{^isolower}', 'deprecated');
Expect(0, 687, '\p{isolower}', 'deprecated');
Expect(1, 687, '\p{^isolower}', 'deprecated');
Expect(1, 687, '\P{isolower}', 'deprecated');
Expect(0, 687, '\P{^isolower}', 'deprecated');
Expect(1, 696, '\p{_	is	olower}', 'deprecated');
Expect(0, 696, '\p{^_	is	olower}', 'deprecated');
Expect(0, 696, '\P{_	is	olower}', 'deprecated');
Expect(1, 696, '\P{^_	is	olower}', 'deprecated');
Expect(0, 687, '\p{_	is	olower}', 'deprecated');
Expect(1, 687, '\p{^_	is	olower}', 'deprecated');
Expect(1, 687, '\P{_	is	olower}', 'deprecated');
Expect(0, 687, '\P{^_	is	olower}', 'deprecated');
Error('\p{/a/	arabic}');
Error('\P{/a/	arabic}');
Expect(1, 1547, '\p{arabic}', "");
Expect(0, 1547, '\p{^arabic}', "");
Expect(0, 1547, '\P{arabic}', "");
Expect(1, 1547, '\P{^arabic}', "");
Expect(0, 1541, '\p{arabic}', "");
Expect(1, 1541, '\p{^arabic}', "");
Expect(1, 1541, '\P{arabic}', "");
Expect(0, 1541, '\P{^arabic}', "");
Expect(1, 1547, '\p{-Arabic}', "");
Expect(0, 1547, '\p{^-Arabic}', "");
Expect(0, 1547, '\P{-Arabic}', "");
Expect(1, 1547, '\P{^-Arabic}', "");
Expect(0, 1541, '\p{-Arabic}', "");
Expect(1, 1541, '\p{^-Arabic}', "");
Expect(1, 1541, '\P{-Arabic}', "");
Expect(0, 1541, '\P{^-Arabic}', "");
Error('\p{/a/		is_arabic}');
Error('\P{/a/		is_arabic}');
Expect(1, 1547, '\p{isarabic}', "");
Expect(0, 1547, '\p{^isarabic}', "");
Expect(0, 1547, '\P{isarabic}', "");
Expect(1, 1547, '\P{^isarabic}', "");
Expect(0, 1541, '\p{isarabic}', "");
Expect(1, 1541, '\p{^isarabic}', "");
Expect(1, 1541, '\P{isarabic}', "");
Expect(0, 1541, '\P{^isarabic}', "");
Expect(1, 1547, '\p{	-Is Arabic}', "");
Expect(0, 1547, '\p{^	-Is Arabic}', "");
Expect(0, 1547, '\P{	-Is Arabic}', "");
Expect(1, 1547, '\P{^	-Is Arabic}', "");
Expect(0, 1541, '\p{	-Is Arabic}', "");
Expect(1, 1541, '\p{^	-Is Arabic}', "");
Expect(1, 1541, '\P{	-Is Arabic}', "");
Expect(0, 1541, '\P{^	-Is Arabic}', "");
Error('\p{:=-	arab}');
Error('\P{:=-	arab}');
Expect(1, 1547, '\p{arab}', "");
Expect(0, 1547, '\p{^arab}', "");
Expect(0, 1547, '\P{arab}', "");
Expect(1, 1547, '\P{^arab}', "");
Expect(0, 1541, '\p{arab}', "");
Expect(1, 1541, '\p{^arab}', "");
Expect(1, 1541, '\P{arab}', "");
Expect(0, 1541, '\P{^arab}', "");
Expect(1, 1547, '\p{		arab}', "");
Expect(0, 1547, '\p{^		arab}', "");
Expect(0, 1547, '\P{		arab}', "");
Expect(1, 1547, '\P{^		arab}', "");
Expect(0, 1541, '\p{		arab}', "");
Expect(1, 1541, '\p{^		arab}', "");
Expect(1, 1541, '\P{		arab}', "");
Expect(0, 1541, '\P{^		arab}', "");
Error('\p{:=		Is_arab}');
Error('\P{:=		Is_arab}');
Expect(1, 1547, '\p{isarab}', "");
Expect(0, 1547, '\p{^isarab}', "");
Expect(0, 1547, '\P{isarab}', "");
Expect(1, 1547, '\P{^isarab}', "");
Expect(0, 1541, '\p{isarab}', "");
Expect(1, 1541, '\p{^isarab}', "");
Expect(1, 1541, '\P{isarab}', "");
Expect(0, 1541, '\P{^isarab}', "");
Expect(1, 1547, '\p{_Is Arab}', "");
Expect(0, 1547, '\p{^_Is Arab}', "");
Expect(0, 1547, '\P{_Is Arab}', "");
Expect(1, 1547, '\P{^_Is Arab}', "");
Expect(0, 1541, '\p{_Is Arab}', "");
Expect(1, 1541, '\p{^_Is Arab}', "");
Expect(1, 1541, '\P{_Is Arab}', "");
Expect(0, 1541, '\P{^_Is Arab}', "");
Error('\p{-:=Deseret}');
Error('\P{-:=Deseret}');
Expect(1, 66639, '\p{deseret}', "");
Expect(0, 66639, '\p{^deseret}', "");
Expect(0, 66639, '\P{deseret}', "");
Expect(1, 66639, '\P{^deseret}', "");
Expect(0, 66559, '\p{deseret}', "");
Expect(1, 66559, '\p{^deseret}', "");
Expect(1, 66559, '\P{deseret}', "");
Expect(0, 66559, '\P{^deseret}', "");
Expect(1, 66639, '\p{--Deseret}', "");
Expect(0, 66639, '\p{^--Deseret}', "");
Expect(0, 66639, '\P{--Deseret}', "");
Expect(1, 66639, '\P{^--Deseret}', "");
Expect(0, 66559, '\p{--Deseret}', "");
Expect(1, 66559, '\p{^--Deseret}', "");
Expect(1, 66559, '\P{--Deseret}', "");
Expect(0, 66559, '\P{^--Deseret}', "");
Error('\p{ Is/a/DESERET}');
Error('\P{ Is/a/DESERET}');
Expect(1, 66639, '\p{isdeseret}', "");
Expect(0, 66639, '\p{^isdeseret}', "");
Expect(0, 66639, '\P{isdeseret}', "");
Expect(1, 66639, '\P{^isdeseret}', "");
Expect(0, 66559, '\p{isdeseret}', "");
Expect(1, 66559, '\p{^isdeseret}', "");
Expect(1, 66559, '\P{isdeseret}', "");
Expect(0, 66559, '\P{^isdeseret}', "");
Expect(1, 66639, '\p{__is-Deseret}', "");
Expect(0, 66639, '\p{^__is-Deseret}', "");
Expect(0, 66639, '\P{__is-Deseret}', "");
Expect(1, 66639, '\P{^__is-Deseret}', "");
Expect(0, 66559, '\p{__is-Deseret}', "");
Expect(1, 66559, '\p{^__is-Deseret}', "");
Expect(1, 66559, '\P{__is-Deseret}', "");
Expect(0, 66559, '\P{^__is-Deseret}', "");
Error('\p{_:=Dsrt}');
Error('\P{_:=Dsrt}');
Expect(1, 66639, '\p{dsrt}', "");
Expect(0, 66639, '\p{^dsrt}', "");
Expect(0, 66639, '\P{dsrt}', "");
Expect(1, 66639, '\P{^dsrt}', "");
Expect(0, 66559, '\p{dsrt}', "");
Expect(1, 66559, '\p{^dsrt}', "");
Expect(1, 66559, '\P{dsrt}', "");
Expect(0, 66559, '\P{^dsrt}', "");
Expect(1, 66639, '\p{ 	DSRT}', "");
Expect(0, 66639, '\p{^ 	DSRT}', "");
Expect(0, 66639, '\P{ 	DSRT}', "");
Expect(1, 66639, '\P{^ 	DSRT}', "");
Expect(0, 66559, '\p{ 	DSRT}', "");
Expect(1, 66559, '\p{^ 	DSRT}', "");
Expect(1, 66559, '\P{ 	DSRT}', "");
Expect(0, 66559, '\P{^ 	DSRT}', "");
Error('\p{Isdsrt/a/}');
Error('\P{Isdsrt/a/}');
Expect(1, 66639, '\p{isdsrt}', "");
Expect(0, 66639, '\p{^isdsrt}', "");
Expect(0, 66639, '\P{isdsrt}', "");
Expect(1, 66639, '\P{^isdsrt}', "");
Expect(0, 66559, '\p{isdsrt}', "");
Expect(1, 66559, '\p{^isdsrt}', "");
Expect(1, 66559, '\P{isdsrt}', "");
Expect(0, 66559, '\P{^isdsrt}', "");
Expect(1, 66639, '\p{	-ISDsrt}', "");
Expect(0, 66639, '\p{^	-ISDsrt}', "");
Expect(0, 66639, '\P{	-ISDsrt}', "");
Expect(1, 66639, '\P{^	-ISDsrt}', "");
Expect(0, 66559, '\p{	-ISDsrt}', "");
Expect(1, 66559, '\p{^	-ISDsrt}', "");
Expect(1, 66559, '\P{	-ISDsrt}', "");
Expect(0, 66559, '\P{^	-ISDsrt}', "");
Error('\p{ Cased_letter:=}');
Error('\P{ Cased_letter:=}');
Expect(1, 90, '\p{casedletter}', "");
Expect(0, 90, '\p{^casedletter}', "");
Expect(0, 90, '\P{casedletter}', "");
Expect(1, 90, '\P{^casedletter}', "");
Expect(0, 64, '\p{casedletter}', "");
Expect(1, 64, '\p{^casedletter}', "");
Expect(1, 64, '\P{casedletter}', "");
Expect(0, 64, '\P{^casedletter}', "");
Expect(1, 90, '\p{-Cased	LETTER}', "");
Expect(0, 90, '\p{^-Cased	LETTER}', "");
Expect(0, 90, '\P{-Cased	LETTER}', "");
Expect(1, 90, '\P{^-Cased	LETTER}', "");
Expect(0, 64, '\p{-Cased	LETTER}', "");
Expect(1, 64, '\p{^-Cased	LETTER}', "");
Expect(1, 64, '\P{-Cased	LETTER}', "");
Expect(0, 64, '\P{^-Cased	LETTER}', "");
Error('\p{--Is	CASED/a/letter}');
Error('\P{--Is	CASED/a/letter}');
Expect(1, 90, '\p{iscasedletter}', "");
Expect(0, 90, '\p{^iscasedletter}', "");
Expect(0, 90, '\P{iscasedletter}', "");
Expect(1, 90, '\P{^iscasedletter}', "");
Expect(0, 64, '\p{iscasedletter}', "");
Expect(1, 64, '\p{^iscasedletter}', "");
Expect(1, 64, '\P{iscasedletter}', "");
Expect(0, 64, '\P{^iscasedletter}', "");
Expect(1, 90, '\p{_	Is	casedletter}', "");
Expect(0, 90, '\p{^_	Is	casedletter}', "");
Expect(0, 90, '\P{_	Is	casedletter}', "");
Expect(1, 90, '\P{^_	Is	casedletter}', "");
Expect(0, 64, '\p{_	Is	casedletter}', "");
Expect(1, 64, '\p{^_	Is	casedletter}', "");
Expect(1, 64, '\P{_	Is	casedletter}', "");
Expect(0, 64, '\P{^_	Is	casedletter}', "");
Error('\p{:=		LC}');
Error('\P{:=		LC}');
Expect(1, 90, '\p{lc}', "");
Expect(0, 90, '\p{^lc}', "");
Expect(0, 90, '\P{lc}', "");
Expect(1, 90, '\P{^lc}', "");
Expect(0, 64, '\p{lc}', "");
Expect(1, 64, '\p{^lc}', "");
Expect(1, 64, '\P{lc}', "");
Expect(0, 64, '\P{^lc}', "");
Expect(1, 90, '\p{-_LC}', "");
Expect(0, 90, '\p{^-_LC}', "");
Expect(0, 90, '\P{-_LC}', "");
Expect(1, 90, '\P{^-_LC}', "");
Expect(0, 64, '\p{-_LC}', "");
Expect(1, 64, '\p{^-_LC}', "");
Expect(1, 64, '\P{-_LC}', "");
Expect(0, 64, '\P{^-_LC}', "");
Error('\p{/a/		Is lc}');
Error('\P{/a/		Is lc}');
Expect(1, 90, '\p{islc}', "");
Expect(0, 90, '\p{^islc}', "");
Expect(0, 90, '\P{islc}', "");
Expect(1, 90, '\P{^islc}', "");
Expect(0, 64, '\p{islc}', "");
Expect(1, 64, '\p{^islc}', "");
Expect(1, 64, '\P{islc}', "");
Expect(0, 64, '\P{^islc}', "");
Expect(1, 90, '\p{	islc}', "");
Expect(0, 90, '\p{^	islc}', "");
Expect(0, 90, '\P{	islc}', "");
Expect(1, 90, '\P{^	islc}', "");
Expect(0, 64, '\p{	islc}', "");
Expect(1, 64, '\p{^	islc}', "");
Expect(1, 64, '\P{	islc}', "");
Expect(0, 64, '\P{^	islc}', "");
Error('\p{/a/  L}');
Error('\P{/a/  L}');
Expect(1, 90, '\p{l_}', "");
Expect(0, 90, '\p{^l_}', "");
Expect(0, 90, '\P{l_}', "");
Expect(1, 90, '\P{^l_}', "");
Expect(0, 64, '\p{l_}', "");
Expect(1, 64, '\p{^l_}', "");
Expect(1, 64, '\P{l_}', "");
Expect(0, 64, '\P{^l_}', "");
Expect(1, 90, '\p{	l}', "");
Expect(0, 90, '\p{^	l}', "");
Expect(0, 90, '\P{	l}', "");
Expect(1, 90, '\P{^	l}', "");
Expect(0, 64, '\p{	l}', "");
Expect(1, 64, '\p{^	l}', "");
Expect(1, 64, '\P{	l}', "");
Expect(0, 64, '\P{^	l}', "");
Error('\p{-IS:=L}');
Error('\P{-IS:=L}');
Expect(1, 90, '\p{isl_}', "");
Expect(0, 90, '\p{^isl_}', "");
Expect(0, 90, '\P{isl_}', "");
Expect(1, 90, '\P{^isl_}', "");
Expect(0, 64, '\p{isl_}', "");
Expect(1, 64, '\p{^isl_}', "");
Expect(1, 64, '\P{isl_}', "");
Expect(0, 64, '\P{^isl_}', "");
Expect(1, 90, '\p{-is_L}', "");
Expect(0, 90, '\p{^-is_L}', "");
Expect(0, 90, '\P{-is_L}', "");
Expect(1, 90, '\P{^-is_L}', "");
Expect(0, 64, '\p{-is_L}', "");
Expect(1, 64, '\p{^-is_L}', "");
Expect(1, 64, '\P{-is_L}', "");
Expect(0, 64, '\P{^-is_L}', "");
Error('\p{ :=l&}');
Error('\P{ :=l&}');
Expect(1, 90, '\p{l&}', "");
Expect(0, 90, '\p{^l&}', "");
Expect(0, 90, '\P{l&}', "");
Expect(1, 90, '\P{^l&}', "");
Expect(0, 64, '\p{l&}', "");
Expect(1, 64, '\p{^l&}', "");
Expect(1, 64, '\P{l&}', "");
Expect(0, 64, '\P{^l&}', "");
Expect(1, 90, '\p{	-L&}', "");
Expect(0, 90, '\p{^	-L&}', "");
Expect(0, 90, '\P{	-L&}', "");
Expect(1, 90, '\P{^	-L&}', "");
Expect(0, 64, '\p{	-L&}', "");
Expect(1, 64, '\p{^	-L&}', "");
Expect(1, 64, '\P{	-L&}', "");
Expect(0, 64, '\P{^	-L&}', "");
Error('\p{/a/Is	l&}');
Error('\P{/a/Is	l&}');
Expect(1, 90, '\p{isl&}', "");
Expect(0, 90, '\p{^isl&}', "");
Expect(0, 90, '\P{isl&}', "");
Expect(1, 90, '\P{^isl&}', "");
Expect(0, 64, '\p{isl&}', "");
Expect(1, 64, '\p{^isl&}', "");
Expect(1, 64, '\P{isl&}', "");
Expect(0, 64, '\P{^isl&}', "");
Expect(1, 90, '\p{--Is L&}', "");
Expect(0, 90, '\p{^--Is L&}', "");
Expect(0, 90, '\P{--Is L&}', "");
Expect(1, 90, '\P{^--Is L&}', "");
Expect(0, 64, '\p{--Is L&}', "");
Expect(1, 64, '\p{^--Is L&}', "");
Expect(1, 64, '\P{--Is L&}', "");
Expect(0, 64, '\P{^--Is L&}', "");
Error('\p{ Symbol/a/}');
Error('\P{ Symbol/a/}');
Expect(1, 36, '\p{symbol}', "");
Expect(0, 36, '\p{^symbol}', "");
Expect(0, 36, '\P{symbol}', "");
Expect(1, 36, '\P{^symbol}', "");
Expect(0, 35, '\p{symbol}', "");
Expect(1, 35, '\p{^symbol}', "");
Expect(1, 35, '\P{symbol}', "");
Expect(0, 35, '\P{^symbol}', "");
Expect(1, 36, '\p{ 	SYMBOL}', "");
Expect(0, 36, '\p{^ 	SYMBOL}', "");
Expect(0, 36, '\P{ 	SYMBOL}', "");
Expect(1, 36, '\P{^ 	SYMBOL}', "");
Expect(0, 35, '\p{ 	SYMBOL}', "");
Expect(1, 35, '\p{^ 	SYMBOL}', "");
Expect(1, 35, '\P{ 	SYMBOL}', "");
Expect(0, 35, '\P{^ 	SYMBOL}', "");
Error('\p{	:=IsSYMBOL}');
Error('\P{	:=IsSYMBOL}');
Expect(1, 36, '\p{issymbol}', "");
Expect(0, 36, '\p{^issymbol}', "");
Expect(0, 36, '\P{issymbol}', "");
Expect(1, 36, '\P{^issymbol}', "");
Expect(0, 35, '\p{issymbol}', "");
Expect(1, 35, '\p{^issymbol}', "");
Expect(1, 35, '\P{issymbol}', "");
Expect(0, 35, '\P{^issymbol}', "");
Expect(1, 36, '\p{		is symbol}', "");
Expect(0, 36, '\p{^		is symbol}', "");
Expect(0, 36, '\P{		is symbol}', "");
Expect(1, 36, '\P{^		is symbol}', "");
Expect(0, 35, '\p{		is symbol}', "");
Expect(1, 35, '\p{^		is symbol}', "");
Expect(1, 35, '\P{		is symbol}', "");
Expect(0, 35, '\P{^		is symbol}', "");
Error('\p{/a/	_S}');
Error('\P{/a/	_S}');
Expect(1, 36, '\p{s}', "");
Expect(0, 36, '\p{^s}', "");
Expect(0, 36, '\P{s}', "");
Expect(1, 36, '\P{^s}', "");
Expect(0, 35, '\p{s}', "");
Expect(1, 35, '\p{^s}', "");
Expect(1, 35, '\P{s}', "");
Expect(0, 35, '\P{^s}', "");
Expect(1, 36, '\p{__S}', "");
Expect(0, 36, '\p{^__S}', "");
Expect(0, 36, '\P{__S}', "");
Expect(1, 36, '\P{^__S}', "");
Expect(0, 35, '\p{__S}', "");
Expect(1, 35, '\p{^__S}', "");
Expect(1, 35, '\P{__S}', "");
Expect(0, 35, '\P{^__S}', "");
Error('\p{-:=Is_s}');
Error('\P{-:=Is_s}');
Expect(1, 36, '\p{iss}', "");
Expect(0, 36, '\p{^iss}', "");
Expect(0, 36, '\P{iss}', "");
Expect(1, 36, '\P{^iss}', "");
Expect(0, 35, '\p{iss}', "");
Expect(1, 35, '\p{^iss}', "");
Expect(1, 35, '\P{iss}', "");
Expect(0, 35, '\P{^iss}', "");
Expect(1, 36, '\p{- Is	S}', "");
Expect(0, 36, '\p{^- Is	S}', "");
Expect(0, 36, '\P{- Is	S}', "");
Expect(1, 36, '\P{^- Is	S}', "");
Expect(0, 35, '\p{- Is	S}', "");
Expect(1, 35, '\p{^- Is	S}', "");
Expect(1, 35, '\P{- Is	S}', "");
Expect(0, 35, '\P{^- Is	S}', "");
Error('\p{_:=Yijing_HEXAGRAM-Symbols}');
Error('\P{_:=Yijing_HEXAGRAM-Symbols}');
Expect(1, 19967, '\p{yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{ -Yijing	hexagram Symbols}', "");
Expect(0, 19967, '\p{^ -Yijing	hexagram Symbols}', "");
Expect(0, 19967, '\P{ -Yijing	hexagram Symbols}', "");
Expect(1, 19967, '\P{^ -Yijing	hexagram Symbols}', "");
Expect(0, 19903, '\p{ -Yijing	hexagram Symbols}', "");
Expect(1, 19903, '\p{^ -Yijing	hexagram Symbols}', "");
Expect(1, 19903, '\P{ -Yijing	hexagram Symbols}', "");
Expect(0, 19903, '\P{^ -Yijing	hexagram Symbols}', "");
Error('\p{ is YIJING/a/Hexagram	Symbols}');
Error('\P{ is YIJING/a/Hexagram	Symbols}');
Expect(1, 19967, '\p{isyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^isyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{isyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^isyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{isyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^isyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{isyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^isyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{  IS YijingHEXAGRAM symbols}', "");
Expect(0, 19967, '\p{^  IS YijingHEXAGRAM symbols}', "");
Expect(0, 19967, '\P{  IS YijingHEXAGRAM symbols}', "");
Expect(1, 19967, '\P{^  IS YijingHEXAGRAM symbols}', "");
Expect(0, 19903, '\p{  IS YijingHEXAGRAM symbols}', "");
Expect(1, 19903, '\p{^  IS YijingHEXAGRAM symbols}', "");
Expect(1, 19903, '\P{  IS YijingHEXAGRAM symbols}', "");
Expect(0, 19903, '\P{^  IS YijingHEXAGRAM symbols}', "");
Error('\p{/a/in-Yijing-HEXAGRAMSymbols}');
Error('\P{/a/in-Yijing-HEXAGRAMSymbols}');
Expect(1, 19967, '\p{inyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^inyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{inyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^inyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{inyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^inyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{inyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^inyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(0, 19967, '\p{^ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(0, 19967, '\P{ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(1, 19967, '\P{^ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(0, 19903, '\p{ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(1, 19903, '\p{^ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(1, 19903, '\P{ -IN yijingHEXAGRAM_SYMBOLS}', "");
Expect(0, 19903, '\P{^ -IN yijingHEXAGRAM_SYMBOLS}', "");
Error('\p{:= 	POSIXSPACE}');
Error('\P{:= 	POSIXSPACE}');
Expect(1, 13, '\p{posixspace}', "");
Expect(0, 13, '\p{^posixspace}', "");
Expect(0, 13, '\P{posixspace}', "");
Expect(1, 13, '\P{^posixspace}', "");
Expect(0, 8, '\p{posixspace}', "");
Expect(1, 8, '\p{^posixspace}', "");
Expect(1, 8, '\P{posixspace}', "");
Expect(0, 8, '\P{^posixspace}', "");
Expect(1, 13, '\p{-PosixSpace}', "");
Expect(0, 13, '\p{^-PosixSpace}', "");
Expect(0, 13, '\P{-PosixSpace}', "");
Expect(1, 13, '\P{^-PosixSpace}', "");
Expect(0, 8, '\p{-PosixSpace}', "");
Expect(1, 8, '\p{^-PosixSpace}', "");
Expect(1, 8, '\P{-PosixSpace}', "");
Expect(0, 8, '\P{^-PosixSpace}', "");
Error('\p{- Is/a/posixspace}');
Error('\P{- Is/a/posixspace}');
Expect(1, 13, '\p{isposixspace}', "");
Expect(0, 13, '\p{^isposixspace}', "");
Expect(0, 13, '\P{isposixspace}', "");
Expect(1, 13, '\P{^isposixspace}', "");
Expect(0, 8, '\p{isposixspace}', "");
Expect(1, 8, '\p{^isposixspace}', "");
Expect(1, 8, '\P{isposixspace}', "");
Expect(0, 8, '\P{^isposixspace}', "");
Expect(1, 13, '\p{_-Is-PosixSpace}', "");
Expect(0, 13, '\p{^_-Is-PosixSpace}', "");
Expect(0, 13, '\P{_-Is-PosixSpace}', "");
Expect(1, 13, '\P{^_-Is-PosixSpace}', "");
Expect(0, 8, '\p{_-Is-PosixSpace}', "");
Expect(1, 8, '\p{^_-Is-PosixSpace}', "");
Expect(1, 8, '\P{_-Is-PosixSpace}', "");
Expect(0, 8, '\P{^_-Is-PosixSpace}', "");
Error('\p{:=_Currency-symbols}');
Error('\P{:=_Currency-symbols}');
Expect(1, 8399, '\p{currencysymbols}', "");
Expect(0, 8399, '\p{^currencysymbols}', "");
Expect(0, 8399, '\P{currencysymbols}', "");
Expect(1, 8399, '\P{^currencysymbols}', "");
Expect(0, 8351, '\p{currencysymbols}', "");
Expect(1, 8351, '\p{^currencysymbols}', "");
Expect(1, 8351, '\P{currencysymbols}', "");
Expect(0, 8351, '\P{^currencysymbols}', "");
Expect(1, 8399, '\p{	Currencysymbols}', "");
Expect(0, 8399, '\p{^	Currencysymbols}', "");
Expect(0, 8399, '\P{	Currencysymbols}', "");
Expect(1, 8399, '\P{^	Currencysymbols}', "");
Expect(0, 8351, '\p{	Currencysymbols}', "");
Expect(1, 8351, '\p{^	Currencysymbols}', "");
Expect(1, 8351, '\P{	Currencysymbols}', "");
Expect(0, 8351, '\P{^	Currencysymbols}', "");
Error('\p{ 	Is	Currency symbols:=}');
Error('\P{ 	Is	Currency symbols:=}');
Expect(1, 8399, '\p{iscurrencysymbols}', "");
Expect(0, 8399, '\p{^iscurrencysymbols}', "");
Expect(0, 8399, '\P{iscurrencysymbols}', "");
Expect(1, 8399, '\P{^iscurrencysymbols}', "");
Expect(0, 8351, '\p{iscurrencysymbols}', "");
Expect(1, 8351, '\p{^iscurrencysymbols}', "");
Expect(1, 8351, '\P{iscurrencysymbols}', "");
Expect(0, 8351, '\P{^iscurrencysymbols}', "");
Expect(1, 8399, '\p{ _isCurrency SYMBOLS}', "");
Expect(0, 8399, '\p{^ _isCurrency SYMBOLS}', "");
Expect(0, 8399, '\P{ _isCurrency SYMBOLS}', "");
Expect(1, 8399, '\P{^ _isCurrency SYMBOLS}', "");
Expect(0, 8351, '\p{ _isCurrency SYMBOLS}', "");
Expect(1, 8351, '\p{^ _isCurrency SYMBOLS}', "");
Expect(1, 8351, '\P{ _isCurrency SYMBOLS}', "");
Expect(0, 8351, '\P{^ _isCurrency SYMBOLS}', "");
Error('\p{/a/ 	In CURRENCY-symbols}');
Error('\P{/a/ 	In CURRENCY-symbols}');
Expect(1, 8399, '\p{incurrencysymbols}', "");
Expect(0, 8399, '\p{^incurrencysymbols}', "");
Expect(0, 8399, '\P{incurrencysymbols}', "");
Expect(1, 8399, '\P{^incurrencysymbols}', "");
Expect(0, 8351, '\p{incurrencysymbols}', "");
Expect(1, 8351, '\p{^incurrencysymbols}', "");
Expect(1, 8351, '\P{incurrencysymbols}', "");
Expect(0, 8351, '\P{^incurrencysymbols}', "");
Expect(1, 8399, '\p{-	IN	CurrencySymbols}', "");
Expect(0, 8399, '\p{^-	IN	CurrencySymbols}', "");
Expect(0, 8399, '\P{-	IN	CurrencySymbols}', "");
Expect(1, 8399, '\P{^-	IN	CurrencySymbols}', "");
Expect(0, 8351, '\p{-	IN	CurrencySymbols}', "");
Expect(1, 8351, '\p{^-	IN	CurrencySymbols}', "");
Expect(1, 8351, '\P{-	IN	CurrencySymbols}', "");
Expect(0, 8351, '\P{^-	IN	CurrencySymbols}', "");
Error('\p{	/a/currency-symbol}');
Error('\P{	/a/currency-symbol}');
Expect(1, 36, '\p{currencysymbol}', "");
Expect(0, 36, '\p{^currencysymbol}', "");
Expect(0, 36, '\P{currencysymbol}', "");
Expect(1, 36, '\P{^currencysymbol}', "");
Expect(0, 35, '\p{currencysymbol}', "");
Expect(1, 35, '\p{^currencysymbol}', "");
Expect(1, 35, '\P{currencysymbol}', "");
Expect(0, 35, '\P{^currencysymbol}', "");
Expect(1, 36, '\p{_	CurrencySymbol}', "");
Expect(0, 36, '\p{^_	CurrencySymbol}', "");
Expect(0, 36, '\P{_	CurrencySymbol}', "");
Expect(1, 36, '\P{^_	CurrencySymbol}', "");
Expect(0, 35, '\p{_	CurrencySymbol}', "");
Expect(1, 35, '\p{^_	CurrencySymbol}', "");
Expect(1, 35, '\P{_	CurrencySymbol}', "");
Expect(0, 35, '\P{^_	CurrencySymbol}', "");
Error('\p{_Is Currency Symbol:=}');
Error('\P{_Is Currency Symbol:=}');
Expect(1, 36, '\p{iscurrencysymbol}', "");
Expect(0, 36, '\p{^iscurrencysymbol}', "");
Expect(0, 36, '\P{iscurrencysymbol}', "");
Expect(1, 36, '\P{^iscurrencysymbol}', "");
Expect(0, 35, '\p{iscurrencysymbol}', "");
Expect(1, 35, '\p{^iscurrencysymbol}', "");
Expect(1, 35, '\P{iscurrencysymbol}', "");
Expect(0, 35, '\P{^iscurrencysymbol}', "");
Expect(1, 36, '\p{ -Is-CURRENCY symbol}', "");
Expect(0, 36, '\p{^ -Is-CURRENCY symbol}', "");
Expect(0, 36, '\P{ -Is-CURRENCY symbol}', "");
Expect(1, 36, '\P{^ -Is-CURRENCY symbol}', "");
Expect(0, 35, '\p{ -Is-CURRENCY symbol}', "");
Expect(1, 35, '\p{^ -Is-CURRENCY symbol}', "");
Expect(1, 35, '\P{ -Is-CURRENCY symbol}', "");
Expect(0, 35, '\P{^ -Is-CURRENCY symbol}', "");
Error('\p{/a/	Sc}');
Error('\P{/a/	Sc}');
Expect(1, 36, '\p{sc}', "");
Expect(0, 36, '\p{^sc}', "");
Expect(0, 36, '\P{sc}', "");
Expect(1, 36, '\P{^sc}', "");
Expect(0, 35, '\p{sc}', "");
Expect(1, 35, '\p{^sc}', "");
Expect(1, 35, '\P{sc}', "");
Expect(0, 35, '\P{^sc}', "");
Expect(1, 36, '\p{-sc}', "");
Expect(0, 36, '\p{^-sc}', "");
Expect(0, 36, '\P{-sc}', "");
Expect(1, 36, '\P{^-sc}', "");
Expect(0, 35, '\p{-sc}', "");
Expect(1, 35, '\p{^-sc}', "");
Expect(1, 35, '\P{-sc}', "");
Expect(0, 35, '\P{^-sc}', "");
Error('\p{_Is:=SC}');
Error('\P{_Is:=SC}');
Expect(1, 36, '\p{issc}', "");
Expect(0, 36, '\p{^issc}', "");
Expect(0, 36, '\P{issc}', "");
Expect(1, 36, '\P{^issc}', "");
Expect(0, 35, '\p{issc}', "");
Expect(1, 35, '\p{^issc}', "");
Expect(1, 35, '\P{issc}', "");
Expect(0, 35, '\P{^issc}', "");
Expect(1, 36, '\p{  Is_sc}', "");
Expect(0, 36, '\p{^  Is_sc}', "");
Expect(0, 36, '\P{  Is_sc}', "");
Expect(1, 36, '\P{^  Is_sc}', "");
Expect(0, 35, '\p{  Is_sc}', "");
Expect(1, 35, '\p{^  Is_sc}', "");
Expect(1, 35, '\P{  Is_sc}', "");
Expect(0, 35, '\P{^  Is_sc}', "");
Error('\p{ :=High-Surrogates}');
Error('\P{ :=High-Surrogates}');
Expect(0, 55295, '\p{highsurrogates}', "");
Expect(1, 55295, '\p{^highsurrogates}', "");
Expect(1, 55295, '\P{highsurrogates}', "");
Expect(0, 55295, '\P{^highsurrogates}', "");
Expect(0, 55295, '\p{  High	Surrogates}', "");
Expect(1, 55295, '\p{^  High	Surrogates}', "");
Expect(1, 55295, '\P{  High	Surrogates}', "");
Expect(0, 55295, '\P{^  High	Surrogates}', "");
Error('\p{ -IS	HIGH:=surrogates}');
Error('\P{ -IS	HIGH:=surrogates}');
Expect(0, 55295, '\p{ishighsurrogates}', "");
Expect(1, 55295, '\p{^ishighsurrogates}', "");
Expect(1, 55295, '\P{ishighsurrogates}', "");
Expect(0, 55295, '\P{^ishighsurrogates}', "");
Expect(0, 55295, '\p{_IS High surrogates}', "");
Expect(1, 55295, '\p{^_IS High surrogates}', "");
Expect(1, 55295, '\P{_IS High surrogates}', "");
Expect(0, 55295, '\P{^_IS High surrogates}', "");
Error('\p{/a/ In_High	surrogates}');
Error('\P{/a/ In_High	surrogates}');
Expect(0, 55295, '\p{inhighsurrogates}', "");
Expect(1, 55295, '\p{^inhighsurrogates}', "");
Expect(1, 55295, '\P{inhighsurrogates}', "");
Expect(0, 55295, '\P{^inhighsurrogates}', "");
Expect(0, 55295, '\p{ -IN	High-Surrogates}', "");
Expect(1, 55295, '\p{^ -IN	High-Surrogates}', "");
Expect(1, 55295, '\P{ -IN	High-Surrogates}', "");
Expect(0, 55295, '\P{^ -IN	High-Surrogates}', "");
Error('\p{_-IN:=DESERET}');
Error('\P{_-IN:=DESERET}');
Expect(1, 66639, '\p{indeseret}', "");
Expect(0, 66639, '\p{^indeseret}', "");
Expect(0, 66639, '\P{indeseret}', "");
Expect(1, 66639, '\P{^indeseret}', "");
Expect(0, 66559, '\p{indeseret}', "");
Expect(1, 66559, '\p{^indeseret}', "");
Expect(1, 66559, '\P{indeseret}', "");
Expect(0, 66559, '\P{^indeseret}', "");
Expect(1, 66639, '\p{INDESERET}', "");
Expect(0, 66639, '\p{^INDESERET}', "");
Expect(0, 66639, '\P{INDESERET}', "");
Expect(1, 66639, '\P{^INDESERET}', "");
Expect(0, 66559, '\p{INDESERET}', "");
Expect(1, 66559, '\p{^INDESERET}', "");
Expect(1, 66559, '\P{INDESERET}', "");
Expect(0, 66559, '\P{^INDESERET}', "");
Error('\p{	Other:=alphabetic}');
Error('\P{	Other:=alphabetic}');
Expect(1, 837, '\p{otheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^otheralphabetic}', 'deprecated');
Expect(0, 837, '\P{otheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^otheralphabetic}', 'deprecated');
Expect(0, 836, '\p{otheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^otheralphabetic}', 'deprecated');
Expect(1, 836, '\P{otheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^otheralphabetic}', 'deprecated');
Expect(1, 837, '\p{ Other_Alphabetic}', 'deprecated');
Expect(0, 837, '\p{^ Other_Alphabetic}', 'deprecated');
Expect(0, 837, '\P{ Other_Alphabetic}', 'deprecated');
Expect(1, 837, '\P{^ Other_Alphabetic}', 'deprecated');
Expect(0, 836, '\p{ Other_Alphabetic}', 'deprecated');
Expect(1, 836, '\p{^ Other_Alphabetic}', 'deprecated');
Expect(1, 836, '\P{ Other_Alphabetic}', 'deprecated');
Expect(0, 836, '\P{^ Other_Alphabetic}', 'deprecated');
Error('\p{/a/ 	Is-Other-Alphabetic}');
Error('\P{/a/ 	Is-Other-Alphabetic}');
Expect(1, 837, '\p{isotheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^isotheralphabetic}', 'deprecated');
Expect(0, 837, '\P{isotheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^isotheralphabetic}', 'deprecated');
Expect(0, 836, '\p{isotheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^isotheralphabetic}', 'deprecated');
Expect(1, 836, '\P{isotheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^isotheralphabetic}', 'deprecated');
Expect(1, 837, '\p{ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(0, 837, '\p{^ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(0, 837, '\P{ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(1, 837, '\P{^ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(0, 836, '\p{ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(1, 836, '\p{^ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(1, 836, '\P{ 	Is	other_ALPHABETIC}', 'deprecated');
Expect(0, 836, '\P{^ 	Is	other_ALPHABETIC}', 'deprecated');
Error('\p{/a/ _OAlpha}');
Error('\P{/a/ _OAlpha}');
Expect(1, 837, '\p{oalpha}', 'deprecated');
Expect(0, 837, '\p{^oalpha}', 'deprecated');
Expect(0, 837, '\P{oalpha}', 'deprecated');
Expect(1, 837, '\P{^oalpha}', 'deprecated');
Expect(0, 836, '\p{oalpha}', 'deprecated');
Expect(1, 836, '\p{^oalpha}', 'deprecated');
Expect(1, 836, '\P{oalpha}', 'deprecated');
Expect(0, 836, '\P{^oalpha}', 'deprecated');
Expect(1, 837, '\p{	OAlpha}', 'deprecated');
Expect(0, 837, '\p{^	OAlpha}', 'deprecated');
Expect(0, 837, '\P{	OAlpha}', 'deprecated');
Expect(1, 837, '\P{^	OAlpha}', 'deprecated');
Expect(0, 836, '\p{	OAlpha}', 'deprecated');
Expect(1, 836, '\p{^	OAlpha}', 'deprecated');
Expect(1, 836, '\P{	OAlpha}', 'deprecated');
Expect(0, 836, '\P{^	OAlpha}', 'deprecated');
Error('\p{	is/a/OAlpha}');
Error('\P{	is/a/OAlpha}');
Expect(1, 837, '\p{isoalpha}', 'deprecated');
Expect(0, 837, '\p{^isoalpha}', 'deprecated');
Expect(0, 837, '\P{isoalpha}', 'deprecated');
Expect(1, 837, '\P{^isoalpha}', 'deprecated');
Expect(0, 836, '\p{isoalpha}', 'deprecated');
Expect(1, 836, '\p{^isoalpha}', 'deprecated');
Expect(1, 836, '\P{isoalpha}', 'deprecated');
Expect(0, 836, '\P{^isoalpha}', 'deprecated');
Expect(1, 837, '\p{--is OAlpha}', 'deprecated');
Expect(0, 837, '\p{^--is OAlpha}', 'deprecated');
Expect(0, 837, '\P{--is OAlpha}', 'deprecated');
Expect(1, 837, '\P{^--is OAlpha}', 'deprecated');
Expect(0, 836, '\p{--is OAlpha}', 'deprecated');
Expect(1, 836, '\p{^--is OAlpha}', 'deprecated');
Expect(1, 836, '\P{--is OAlpha}', 'deprecated');
Expect(0, 836, '\P{^--is OAlpha}', 'deprecated');
Error('\p{-_Supplementary/a/PrivateUSEArea-A}');
Error('\P{-_Supplementary/a/PrivateUSEArea-A}');
Expect(1, 983040, '\p{supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(0, 983040, '\p{^		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(0, 983040, '\P{		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(1, 983040, '\P{^		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(0, 1, '\p{		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(1, 1, '\p{^		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(1, 1, '\P{		SUPPLEMENTARY_Private_Use_area-A}', "");
Expect(0, 1, '\P{^		SUPPLEMENTARY_Private_Use_area-A}', "");
Error('\p{ /a/Is	SUPPLEMENTARYPRIVATE use_AreaA}');
Error('\P{ /a/Is	SUPPLEMENTARYPRIVATE use_AreaA}');
Expect(1, 983040, '\p{issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{-Is	supplementary_private_USE_area A}', "");
Expect(0, 983040, '\p{^-Is	supplementary_private_USE_area A}', "");
Expect(0, 983040, '\P{-Is	supplementary_private_USE_area A}', "");
Expect(1, 983040, '\P{^-Is	supplementary_private_USE_area A}', "");
Expect(0, 1, '\p{-Is	supplementary_private_USE_area A}', "");
Expect(1, 1, '\p{^-Is	supplementary_private_USE_area A}', "");
Expect(1, 1, '\P{-Is	supplementary_private_USE_area A}', "");
Expect(0, 1, '\P{^-Is	supplementary_private_USE_area A}', "");
Error('\p{	-InSupplementary:=PRIVATE_Use	area A}');
Error('\P{	-InSupplementary:=PRIVATE_Use	area A}');
Expect(1, 983040, '\p{insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(0, 983040, '\p{^-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(0, 983040, '\P{-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(1, 983040, '\P{^-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(0, 1, '\p{-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(1, 1, '\p{^-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(1, 1, '\P{-In-SUPPLEMENTARY private	Use_area A}', "");
Expect(0, 1, '\P{^-In-SUPPLEMENTARY private	Use_area A}', "");
Error('\p{-_SAURASHTRA/a/}');
Error('\P{-_SAURASHTRA/a/}');
Expect(1, 43204, '\p{saurashtra}', "");
Expect(0, 43204, '\p{^saurashtra}', "");
Expect(0, 43204, '\P{saurashtra}', "");
Expect(1, 43204, '\P{^saurashtra}', "");
Expect(0, 43135, '\p{saurashtra}', "");
Expect(1, 43135, '\p{^saurashtra}', "");
Expect(1, 43135, '\P{saurashtra}', "");
Expect(0, 43135, '\P{^saurashtra}', "");
Expect(1, 43204, '\p{_Saurashtra}', "");
Expect(0, 43204, '\p{^_Saurashtra}', "");
Expect(0, 43204, '\P{_Saurashtra}', "");
Expect(1, 43204, '\P{^_Saurashtra}', "");
Expect(0, 43135, '\p{_Saurashtra}', "");
Expect(1, 43135, '\p{^_Saurashtra}', "");
Expect(1, 43135, '\P{_Saurashtra}', "");
Expect(0, 43135, '\P{^_Saurashtra}', "");
Error('\p{	_Is saurashtra:=}');
Error('\P{	_Is saurashtra:=}');
Expect(1, 43204, '\p{issaurashtra}', "");
Expect(0, 43204, '\p{^issaurashtra}', "");
Expect(0, 43204, '\P{issaurashtra}', "");
Expect(1, 43204, '\P{^issaurashtra}', "");
Expect(0, 43135, '\p{issaurashtra}', "");
Expect(1, 43135, '\p{^issaurashtra}', "");
Expect(1, 43135, '\P{issaurashtra}', "");
Expect(0, 43135, '\P{^issaurashtra}', "");
Expect(1, 43204, '\p{ _ISSaurashtra}', "");
Expect(0, 43204, '\p{^ _ISSaurashtra}', "");
Expect(0, 43204, '\P{ _ISSaurashtra}', "");
Expect(1, 43204, '\P{^ _ISSaurashtra}', "");
Expect(0, 43135, '\p{ _ISSaurashtra}', "");
Expect(1, 43135, '\p{^ _ISSaurashtra}', "");
Expect(1, 43135, '\P{ _ISSaurashtra}', "");
Expect(0, 43135, '\P{^ _ISSaurashtra}', "");
Error('\p{:=_Saur}');
Error('\P{:=_Saur}');
Expect(1, 43204, '\p{saur}', "");
Expect(0, 43204, '\p{^saur}', "");
Expect(0, 43204, '\P{saur}', "");
Expect(1, 43204, '\P{^saur}', "");
Expect(0, 43135, '\p{saur}', "");
Expect(1, 43135, '\p{^saur}', "");
Expect(1, 43135, '\P{saur}', "");
Expect(0, 43135, '\P{^saur}', "");
Expect(1, 43204, '\p{- Saur}', "");
Expect(0, 43204, '\p{^- Saur}', "");
Expect(0, 43204, '\P{- Saur}', "");
Expect(1, 43204, '\P{^- Saur}', "");
Expect(0, 43135, '\p{- Saur}', "");
Expect(1, 43135, '\p{^- Saur}', "");
Expect(1, 43135, '\P{- Saur}', "");
Expect(0, 43135, '\P{^- Saur}', "");
Error('\p{:=- is	Saur}');
Error('\P{:=- is	Saur}');
Expect(1, 43204, '\p{issaur}', "");
Expect(0, 43204, '\p{^issaur}', "");
Expect(0, 43204, '\P{issaur}', "");
Expect(1, 43204, '\P{^issaur}', "");
Expect(0, 43135, '\p{issaur}', "");
Expect(1, 43135, '\p{^issaur}', "");
Expect(1, 43135, '\P{issaur}', "");
Expect(0, 43135, '\P{^issaur}', "");
Expect(1, 43204, '\p{		Is-Saur}', "");
Expect(0, 43204, '\p{^		Is-Saur}', "");
Expect(0, 43204, '\P{		Is-Saur}', "");
Expect(1, 43204, '\P{^		Is-Saur}', "");
Expect(0, 43135, '\p{		Is-Saur}', "");
Expect(1, 43135, '\p{^		Is-Saur}', "");
Expect(1, 43135, '\P{		Is-Saur}', "");
Expect(0, 43135, '\P{^		Is-Saur}', "");
Error('\p{  /a/X-EXTEND}');
Error('\P{  /a/X-EXTEND}');
Expect(1, 879, '\p{_x_extend}', "");
Expect(0, 879, '\p{^_x_extend}', "");
Expect(0, 879, '\P{_x_extend}', "");
Expect(1, 879, '\P{^_x_extend}', "");
Expect(0, 767, '\p{_x_extend}', "");
Expect(1, 767, '\p{^_x_extend}', "");
Expect(1, 767, '\P{_x_extend}', "");
Expect(0, 767, '\P{^_x_extend}', "");
Error('\p{:= TAGBANWA}');
Error('\P{:= TAGBANWA}');
Expect(1, 5996, '\p{tagbanwa}', "");
Expect(0, 5996, '\p{^tagbanwa}', "");
Expect(0, 5996, '\P{tagbanwa}', "");
Expect(1, 5996, '\P{^tagbanwa}', "");
Expect(0, 5983, '\p{tagbanwa}', "");
Expect(1, 5983, '\p{^tagbanwa}', "");
Expect(1, 5983, '\P{tagbanwa}', "");
Expect(0, 5983, '\P{^tagbanwa}', "");
Expect(1, 5996, '\p{ 	tagbanwa}', "");
Expect(0, 5996, '\p{^ 	tagbanwa}', "");
Expect(0, 5996, '\P{ 	tagbanwa}', "");
Expect(1, 5996, '\P{^ 	tagbanwa}', "");
Expect(0, 5983, '\p{ 	tagbanwa}', "");
Expect(1, 5983, '\p{^ 	tagbanwa}', "");
Expect(1, 5983, '\P{ 	tagbanwa}', "");
Expect(0, 5983, '\P{^ 	tagbanwa}', "");
Error('\p{:=		is	Tagbanwa}');
Error('\P{:=		is	Tagbanwa}');
Expect(1, 5996, '\p{istagbanwa}', "");
Expect(0, 5996, '\p{^istagbanwa}', "");
Expect(0, 5996, '\P{istagbanwa}', "");
Expect(1, 5996, '\P{^istagbanwa}', "");
Expect(0, 5983, '\p{istagbanwa}', "");
Expect(1, 5983, '\p{^istagbanwa}', "");
Expect(1, 5983, '\P{istagbanwa}', "");
Expect(0, 5983, '\P{^istagbanwa}', "");
Expect(1, 5996, '\p{--Is-tagbanwa}', "");
Expect(0, 5996, '\p{^--Is-tagbanwa}', "");
Expect(0, 5996, '\P{--Is-tagbanwa}', "");
Expect(1, 5996, '\P{^--Is-tagbanwa}', "");
Expect(0, 5983, '\p{--Is-tagbanwa}', "");
Expect(1, 5983, '\p{^--Is-tagbanwa}', "");
Expect(1, 5983, '\P{--Is-tagbanwa}', "");
Expect(0, 5983, '\P{^--Is-tagbanwa}', "");
Error('\p{/a/__TAGB}');
Error('\P{/a/__TAGB}');
Expect(1, 5996, '\p{tagb}', "");
Expect(0, 5996, '\p{^tagb}', "");
Expect(0, 5996, '\P{tagb}', "");
Expect(1, 5996, '\P{^tagb}', "");
Expect(0, 5983, '\p{tagb}', "");
Expect(1, 5983, '\p{^tagb}', "");
Expect(1, 5983, '\P{tagb}', "");
Expect(0, 5983, '\P{^tagb}', "");
Expect(1, 5996, '\p{	_Tagb}', "");
Expect(0, 5996, '\p{^	_Tagb}', "");
Expect(0, 5996, '\P{	_Tagb}', "");
Expect(1, 5996, '\P{^	_Tagb}', "");
Expect(0, 5983, '\p{	_Tagb}', "");
Expect(1, 5983, '\p{^	_Tagb}', "");
Expect(1, 5983, '\P{	_Tagb}', "");
Expect(0, 5983, '\P{^	_Tagb}', "");
Error('\p{:=	_Is-tagb}');
Error('\P{:=	_Is-tagb}');
Expect(1, 5996, '\p{istagb}', "");
Expect(0, 5996, '\p{^istagb}', "");
Expect(0, 5996, '\P{istagb}', "");
Expect(1, 5996, '\P{^istagb}', "");
Expect(0, 5983, '\p{istagb}', "");
Expect(1, 5983, '\p{^istagb}', "");
Expect(1, 5983, '\P{istagb}', "");
Expect(0, 5983, '\P{^istagb}', "");
Expect(1, 5996, '\p{is	Tagb}', "");
Expect(0, 5996, '\p{^is	Tagb}', "");
Expect(0, 5996, '\P{is	Tagb}', "");
Expect(1, 5996, '\P{^is	Tagb}', "");
Expect(0, 5983, '\p{is	Tagb}', "");
Expect(1, 5983, '\p{^is	Tagb}', "");
Expect(1, 5983, '\P{is	Tagb}', "");
Expect(0, 5983, '\P{^is	Tagb}', "");
Error('\p{khmer-symbols:=}');
Error('\P{khmer-symbols:=}');
Expect(1, 6655, '\p{khmersymbols}', "");
Expect(0, 6655, '\p{^khmersymbols}', "");
Expect(0, 6655, '\P{khmersymbols}', "");
Expect(1, 6655, '\P{^khmersymbols}', "");
Expect(0, 6623, '\p{khmersymbols}', "");
Expect(1, 6623, '\p{^khmersymbols}', "");
Expect(1, 6623, '\P{khmersymbols}', "");
Expect(0, 6623, '\P{^khmersymbols}', "");
Expect(1, 6655, '\p{KHMERSYMBOLS}', "");
Expect(0, 6655, '\p{^KHMERSYMBOLS}', "");
Expect(0, 6655, '\P{KHMERSYMBOLS}', "");
Expect(1, 6655, '\P{^KHMERSYMBOLS}', "");
Expect(0, 6623, '\p{KHMERSYMBOLS}', "");
Expect(1, 6623, '\p{^KHMERSYMBOLS}', "");
Expect(1, 6623, '\P{KHMERSYMBOLS}', "");
Expect(0, 6623, '\P{^KHMERSYMBOLS}', "");
Error('\p{/a/Is-KHMER-Symbols}');
Error('\P{/a/Is-KHMER-Symbols}');
Expect(1, 6655, '\p{iskhmersymbols}', "");
Expect(0, 6655, '\p{^iskhmersymbols}', "");
Expect(0, 6655, '\P{iskhmersymbols}', "");
Expect(1, 6655, '\P{^iskhmersymbols}', "");
Expect(0, 6623, '\p{iskhmersymbols}', "");
Expect(1, 6623, '\p{^iskhmersymbols}', "");
Expect(1, 6623, '\P{iskhmersymbols}', "");
Expect(0, 6623, '\P{^iskhmersymbols}', "");
Expect(1, 6655, '\p{ -Iskhmer	Symbols}', "");
Expect(0, 6655, '\p{^ -Iskhmer	Symbols}', "");
Expect(0, 6655, '\P{ -Iskhmer	Symbols}', "");
Expect(1, 6655, '\P{^ -Iskhmer	Symbols}', "");
Expect(0, 6623, '\p{ -Iskhmer	Symbols}', "");
Expect(1, 6623, '\p{^ -Iskhmer	Symbols}', "");
Expect(1, 6623, '\P{ -Iskhmer	Symbols}', "");
Expect(0, 6623, '\P{^ -Iskhmer	Symbols}', "");
Error('\p{-In	Khmer_Symbols/a/}');
Error('\P{-In	Khmer_Symbols/a/}');
Expect(1, 6655, '\p{inkhmersymbols}', "");
Expect(0, 6655, '\p{^inkhmersymbols}', "");
Expect(0, 6655, '\P{inkhmersymbols}', "");
Expect(1, 6655, '\P{^inkhmersymbols}', "");
Expect(0, 6623, '\p{inkhmersymbols}', "");
Expect(1, 6623, '\p{^inkhmersymbols}', "");
Expect(1, 6623, '\P{inkhmersymbols}', "");
Expect(0, 6623, '\P{^inkhmersymbols}', "");
Expect(1, 6655, '\p{-INKhmer	symbols}', "");
Expect(0, 6655, '\p{^-INKhmer	symbols}', "");
Expect(0, 6655, '\P{-INKhmer	symbols}', "");
Expect(1, 6655, '\P{^-INKhmer	symbols}', "");
Expect(0, 6623, '\p{-INKhmer	symbols}', "");
Expect(1, 6623, '\p{^-INKhmer	symbols}', "");
Expect(1, 6623, '\P{-INKhmer	symbols}', "");
Expect(0, 6623, '\P{^-INKhmer	symbols}', "");
Error('\p{/a/-MATH}');
Error('\P{/a/-MATH}');
Expect(1, 43, '\p{math}', "");
Expect(0, 43, '\p{^math}', "");
Expect(0, 43, '\P{math}', "");
Expect(1, 43, '\P{^math}', "");
Expect(0, 42, '\p{math}', "");
Expect(1, 42, '\p{^math}', "");
Expect(1, 42, '\P{math}', "");
Expect(0, 42, '\P{^math}', "");
Expect(1, 43, '\p{- Math}', "");
Expect(0, 43, '\p{^- Math}', "");
Expect(0, 43, '\P{- Math}', "");
Expect(1, 43, '\P{^- Math}', "");
Expect(0, 42, '\p{- Math}', "");
Expect(1, 42, '\p{^- Math}', "");
Expect(1, 42, '\P{- Math}', "");
Expect(0, 42, '\P{^- Math}', "");
Error('\p{/a/- ISmath}');
Error('\P{/a/- ISmath}');
Expect(1, 43, '\p{ismath}', "");
Expect(0, 43, '\p{^ismath}', "");
Expect(0, 43, '\P{ismath}', "");
Expect(1, 43, '\P{^ismath}', "");
Expect(0, 42, '\p{ismath}', "");
Expect(1, 42, '\p{^ismath}', "");
Expect(1, 42, '\P{ismath}', "");
Expect(0, 42, '\P{^ismath}', "");
Expect(1, 43, '\p{ IsMath}', "");
Expect(0, 43, '\p{^ IsMath}', "");
Expect(0, 43, '\P{ IsMath}', "");
Expect(1, 43, '\P{^ IsMath}', "");
Expect(0, 42, '\p{ IsMath}', "");
Expect(1, 42, '\p{^ IsMath}', "");
Expect(1, 42, '\P{ IsMath}', "");
Expect(0, 42, '\P{^ IsMath}', "");
Error('\p{	/a/Buhid}');
Error('\P{	/a/Buhid}');
Expect(1, 5971, '\p{buhid}', "");
Expect(0, 5971, '\p{^buhid}', "");
Expect(0, 5971, '\P{buhid}', "");
Expect(1, 5971, '\P{^buhid}', "");
Expect(0, 5951, '\p{buhid}', "");
Expect(1, 5951, '\p{^buhid}', "");
Expect(1, 5951, '\P{buhid}', "");
Expect(0, 5951, '\P{^buhid}', "");
Expect(1, 5971, '\p{- buhid}', "");
Expect(0, 5971, '\p{^- buhid}', "");
Expect(0, 5971, '\P{- buhid}', "");
Expect(1, 5971, '\P{^- buhid}', "");
Expect(0, 5951, '\p{- buhid}', "");
Expect(1, 5951, '\p{^- buhid}', "");
Expect(1, 5951, '\P{- buhid}', "");
Expect(0, 5951, '\P{^- buhid}', "");
Error('\p{ /a/Is_Buhid}');
Error('\P{ /a/Is_Buhid}');
Expect(1, 5971, '\p{isbuhid}', "");
Expect(0, 5971, '\p{^isbuhid}', "");
Expect(0, 5971, '\P{isbuhid}', "");
Expect(1, 5971, '\P{^isbuhid}', "");
Expect(0, 5951, '\p{isbuhid}', "");
Expect(1, 5951, '\p{^isbuhid}', "");
Expect(1, 5951, '\P{isbuhid}', "");
Expect(0, 5951, '\P{^isbuhid}', "");
Expect(1, 5971, '\p{ Is-buhid}', "");
Expect(0, 5971, '\p{^ Is-buhid}', "");
Expect(0, 5971, '\P{ Is-buhid}', "");
Expect(1, 5971, '\P{^ Is-buhid}', "");
Expect(0, 5951, '\p{ Is-buhid}', "");
Expect(1, 5951, '\p{^ Is-buhid}', "");
Expect(1, 5951, '\P{ Is-buhid}', "");
Expect(0, 5951, '\P{^ Is-buhid}', "");
Error('\p{/a/ BUHD}');
Error('\P{/a/ BUHD}');
Expect(1, 5971, '\p{buhd}', "");
Expect(0, 5971, '\p{^buhd}', "");
Expect(0, 5971, '\P{buhd}', "");
Expect(1, 5971, '\P{^buhd}', "");
Expect(0, 5951, '\p{buhd}', "");
Expect(1, 5951, '\p{^buhd}', "");
Expect(1, 5951, '\P{buhd}', "");
Expect(0, 5951, '\P{^buhd}', "");
Expect(1, 5971, '\p{ BUHD}', "");
Expect(0, 5971, '\p{^ BUHD}', "");
Expect(0, 5971, '\P{ BUHD}', "");
Expect(1, 5971, '\P{^ BUHD}', "");
Expect(0, 5951, '\p{ BUHD}', "");
Expect(1, 5951, '\p{^ BUHD}', "");
Expect(1, 5951, '\P{ BUHD}', "");
Expect(0, 5951, '\P{^ BUHD}', "");
Error('\p{/a/- ISBuhd}');
Error('\P{/a/- ISBuhd}');
Expect(1, 5971, '\p{isbuhd}', "");
Expect(0, 5971, '\p{^isbuhd}', "");
Expect(0, 5971, '\P{isbuhd}', "");
Expect(1, 5971, '\P{^isbuhd}', "");
Expect(0, 5951, '\p{isbuhd}', "");
Expect(1, 5951, '\p{^isbuhd}', "");
Expect(1, 5951, '\P{isbuhd}', "");
Expect(0, 5951, '\P{^isbuhd}', "");
Expect(1, 5971, '\p{ _Is	Buhd}', "");
Expect(0, 5971, '\p{^ _Is	Buhd}', "");
Expect(0, 5971, '\P{ _Is	Buhd}', "");
Expect(1, 5971, '\P{^ _Is	Buhd}', "");
Expect(0, 5951, '\p{ _Is	Buhd}', "");
Expect(1, 5951, '\p{^ _Is	Buhd}', "");
Expect(1, 5951, '\P{ _Is	Buhd}', "");
Expect(0, 5951, '\P{^ _Is	Buhd}', "");
Error('\p{	Greek	And	coptic/a/}');
Error('\P{	Greek	And	coptic/a/}');
Expect(1, 1023, '\p{greekandcoptic}', "");
Expect(0, 1023, '\p{^greekandcoptic}', "");
Expect(0, 1023, '\P{greekandcoptic}', "");
Expect(1, 1023, '\P{^greekandcoptic}', "");
Expect(0, 879, '\p{greekandcoptic}', "");
Expect(1, 879, '\p{^greekandcoptic}', "");
Expect(1, 879, '\P{greekandcoptic}', "");
Expect(0, 879, '\P{^greekandcoptic}', "");
Expect(1, 1023, '\p{	-greek	And-Coptic}', "");
Expect(0, 1023, '\p{^	-greek	And-Coptic}', "");
Expect(0, 1023, '\P{	-greek	And-Coptic}', "");
Expect(1, 1023, '\P{^	-greek	And-Coptic}', "");
Expect(0, 879, '\p{	-greek	And-Coptic}', "");
Expect(1, 879, '\p{^	-greek	And-Coptic}', "");
Expect(1, 879, '\P{	-greek	And-Coptic}', "");
Expect(0, 879, '\P{^	-greek	And-Coptic}', "");
Error('\p{  IS:=greekAnd	Coptic}');
Error('\P{  IS:=greekAnd	Coptic}');
Expect(1, 1023, '\p{isgreekandcoptic}', "");
Expect(0, 1023, '\p{^isgreekandcoptic}', "");
Expect(0, 1023, '\P{isgreekandcoptic}', "");
Expect(1, 1023, '\P{^isgreekandcoptic}', "");
Expect(0, 879, '\p{isgreekandcoptic}', "");
Expect(1, 879, '\p{^isgreekandcoptic}', "");
Expect(1, 879, '\P{isgreekandcoptic}', "");
Expect(0, 879, '\P{^isgreekandcoptic}', "");
Expect(1, 1023, '\p{_is_GREEKand-Coptic}', "");
Expect(0, 1023, '\p{^_is_GREEKand-Coptic}', "");
Expect(0, 1023, '\P{_is_GREEKand-Coptic}', "");
Expect(1, 1023, '\P{^_is_GREEKand-Coptic}', "");
Expect(0, 879, '\p{_is_GREEKand-Coptic}', "");
Expect(1, 879, '\p{^_is_GREEKand-Coptic}', "");
Expect(1, 879, '\P{_is_GREEKand-Coptic}', "");
Expect(0, 879, '\P{^_is_GREEKand-Coptic}', "");
Error('\p{--IN	Greek_AND_COPTIC:=}');
Error('\P{--IN	Greek_AND_COPTIC:=}');
Expect(1, 1023, '\p{ingreekandcoptic}', "");
Expect(0, 1023, '\p{^ingreekandcoptic}', "");
Expect(0, 1023, '\P{ingreekandcoptic}', "");
Expect(1, 1023, '\P{^ingreekandcoptic}', "");
Expect(0, 879, '\p{ingreekandcoptic}', "");
Expect(1, 879, '\p{^ingreekandcoptic}', "");
Expect(1, 879, '\P{ingreekandcoptic}', "");
Expect(0, 879, '\P{^ingreekandcoptic}', "");
Expect(1, 1023, '\p{ 	in-GreekAND Coptic}', "");
Expect(0, 1023, '\p{^ 	in-GreekAND Coptic}', "");
Expect(0, 1023, '\P{ 	in-GreekAND Coptic}', "");
Expect(1, 1023, '\P{^ 	in-GreekAND Coptic}', "");
Expect(0, 879, '\p{ 	in-GreekAND Coptic}', "");
Expect(1, 879, '\p{^ 	in-GreekAND Coptic}', "");
Expect(1, 879, '\P{ 	in-GreekAND Coptic}', "");
Expect(0, 879, '\P{^ 	in-GreekAND Coptic}', "");
Error('\p{	IN:=GREEK}');
Error('\P{	IN:=GREEK}');
Expect(1, 1023, '\p{ingreek}', "");
Expect(0, 1023, '\p{^ingreek}', "");
Expect(0, 1023, '\P{ingreek}', "");
Expect(1, 1023, '\P{^ingreek}', "");
Expect(0, 879, '\p{ingreek}', "");
Expect(1, 879, '\p{^ingreek}', "");
Expect(1, 879, '\P{ingreek}', "");
Expect(0, 879, '\P{^ingreek}', "");
Expect(1, 1023, '\p{	 In Greek}', "");
Expect(0, 1023, '\p{^	 In Greek}', "");
Expect(0, 1023, '\P{	 In Greek}', "");
Expect(1, 1023, '\P{^	 In Greek}', "");
Expect(0, 879, '\p{	 In Greek}', "");
Expect(1, 879, '\p{^	 In Greek}', "");
Expect(1, 879, '\P{	 In Greek}', "");
Expect(0, 879, '\P{^	 In Greek}', "");
Error('\p{ 	WHITESPACE:=}');
Error('\P{ 	WHITESPACE:=}');
Expect(1, 13, '\p{whitespace}', "");
Expect(0, 13, '\p{^whitespace}', "");
Expect(0, 13, '\P{whitespace}', "");
Expect(1, 13, '\P{^whitespace}', "");
Expect(0, 8, '\p{whitespace}', "");
Expect(1, 8, '\p{^whitespace}', "");
Expect(1, 8, '\P{whitespace}', "");
Expect(0, 8, '\P{^whitespace}', "");
Expect(1, 13, '\p{  White Space}', "");
Expect(0, 13, '\p{^  White Space}', "");
Expect(0, 13, '\P{  White Space}', "");
Expect(1, 13, '\P{^  White Space}', "");
Expect(0, 8, '\p{  White Space}', "");
Expect(1, 8, '\p{^  White Space}', "");
Expect(1, 8, '\P{  White Space}', "");
Expect(0, 8, '\P{^  White Space}', "");
Error('\p{Is:=white_SPACE}');
Error('\P{Is:=white_SPACE}');
Expect(1, 13, '\p{iswhitespace}', "");
Expect(0, 13, '\p{^iswhitespace}', "");
Expect(0, 13, '\P{iswhitespace}', "");
Expect(1, 13, '\P{^iswhitespace}', "");
Expect(0, 8, '\p{iswhitespace}', "");
Expect(1, 8, '\p{^iswhitespace}', "");
Expect(1, 8, '\P{iswhitespace}', "");
Expect(0, 8, '\P{^iswhitespace}', "");
Expect(1, 13, '\p{is	White-Space}', "");
Expect(0, 13, '\p{^is	White-Space}', "");
Expect(0, 13, '\P{is	White-Space}', "");
Expect(1, 13, '\P{^is	White-Space}', "");
Expect(0, 8, '\p{is	White-Space}', "");
Expect(1, 8, '\p{^is	White-Space}', "");
Expect(1, 8, '\P{is	White-Space}', "");
Expect(0, 8, '\P{^is	White-Space}', "");
Error('\p{:=-_WSpace}');
Error('\P{:=-_WSpace}');
Expect(1, 13, '\p{wspace}', "");
Expect(0, 13, '\p{^wspace}', "");
Expect(0, 13, '\P{wspace}', "");
Expect(1, 13, '\P{^wspace}', "");
Expect(0, 8, '\p{wspace}', "");
Expect(1, 8, '\p{^wspace}', "");
Expect(1, 8, '\P{wspace}', "");
Expect(0, 8, '\P{^wspace}', "");
Expect(1, 13, '\p{		WSpace}', "");
Expect(0, 13, '\p{^		WSpace}', "");
Expect(0, 13, '\P{		WSpace}', "");
Expect(1, 13, '\P{^		WSpace}', "");
Expect(0, 8, '\p{		WSpace}', "");
Expect(1, 8, '\p{^		WSpace}', "");
Expect(1, 8, '\P{		WSpace}', "");
Expect(0, 8, '\P{^		WSpace}', "");
Error('\p{/a/	_is	wspace}');
Error('\P{/a/	_is	wspace}');
Expect(1, 13, '\p{iswspace}', "");
Expect(0, 13, '\p{^iswspace}', "");
Expect(0, 13, '\P{iswspace}', "");
Expect(1, 13, '\P{^iswspace}', "");
Expect(0, 8, '\p{iswspace}', "");
Expect(1, 8, '\p{^iswspace}', "");
Expect(1, 8, '\P{iswspace}', "");
Expect(0, 8, '\P{^iswspace}', "");
Expect(1, 13, '\p{		IsWSpace}', "");
Expect(0, 13, '\p{^		IsWSpace}', "");
Expect(0, 13, '\P{		IsWSpace}', "");
Expect(1, 13, '\P{^		IsWSpace}', "");
Expect(0, 8, '\p{		IsWSpace}', "");
Expect(1, 8, '\p{^		IsWSpace}', "");
Expect(1, 8, '\P{		IsWSpace}', "");
Expect(0, 8, '\P{^		IsWSpace}', "");
Error('\p{_Supplementary Private:=Use-AREAB}');
Error('\P{_Supplementary Private:=Use-AREAB}');
Expect(1, 1048576, '\p{supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{_Supplementary	PRIVATE-use Area	B}', "");
Expect(0, 1048576, '\p{^_Supplementary	PRIVATE-use Area	B}', "");
Expect(0, 1048576, '\P{_Supplementary	PRIVATE-use Area	B}', "");
Expect(1, 1048576, '\P{^_Supplementary	PRIVATE-use Area	B}', "");
Expect(0, 1, '\p{_Supplementary	PRIVATE-use Area	B}', "");
Expect(1, 1, '\p{^_Supplementary	PRIVATE-use Area	B}', "");
Expect(1, 1, '\P{_Supplementary	PRIVATE-use Area	B}', "");
Expect(0, 1, '\P{^_Supplementary	PRIVATE-use Area	B}', "");
Error('\p{ IS/a/supplementary Private USE Area_B}');
Error('\P{ IS/a/supplementary Private USE Area_B}');
Expect(1, 1048576, '\p{issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^issupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{	-ISSupplementary PrivateUSEArea b}', "");
Expect(0, 1048576, '\p{^	-ISSupplementary PrivateUSEArea b}', "");
Expect(0, 1048576, '\P{	-ISSupplementary PrivateUSEArea b}', "");
Expect(1, 1048576, '\P{^	-ISSupplementary PrivateUSEArea b}', "");
Expect(0, 1, '\p{	-ISSupplementary PrivateUSEArea b}', "");
Expect(1, 1, '\p{^	-ISSupplementary PrivateUSEArea b}', "");
Expect(1, 1, '\P{	-ISSupplementary PrivateUSEArea b}', "");
Expect(0, 1, '\P{^	-ISSupplementary PrivateUSEArea b}', "");
Error('\p{/a/In_SUPPLEMENTARY_private-use_AREA B}');
Error('\P{/a/In_SUPPLEMENTARY_private-use_AREA B}');
Expect(1, 1048576, '\p{insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^insupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(0, 1048576, '\p{^ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(0, 1048576, '\P{ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(1, 1048576, '\P{^ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(0, 1, '\p{ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(1, 1, '\p{^ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(1, 1, '\P{ in Supplementary_PRIVATE-use AREA-B}', "");
Expect(0, 1, '\P{^ in Supplementary_PRIVATE-use AREA-B}', "");
Error('\p{--in Cuneiform/a/}');
Error('\P{--in Cuneiform/a/}');
Expect(1, 74751, '\p{incuneiform}', "");
Expect(0, 74751, '\p{^incuneiform}', "");
Expect(0, 74751, '\P{incuneiform}', "");
Expect(1, 74751, '\P{^incuneiform}', "");
Expect(0, 73727, '\p{incuneiform}', "");
Expect(1, 73727, '\p{^incuneiform}', "");
Expect(1, 73727, '\P{incuneiform}', "");
Expect(0, 73727, '\P{^incuneiform}', "");
Expect(1, 74751, '\p{_	IN cuneiform}', "");
Expect(0, 74751, '\p{^_	IN cuneiform}', "");
Expect(0, 74751, '\P{_	IN cuneiform}', "");
Expect(1, 74751, '\P{^_	IN cuneiform}', "");
Expect(0, 73727, '\p{_	IN cuneiform}', "");
Expect(1, 73727, '\p{^_	IN cuneiform}', "");
Expect(1, 73727, '\P{_	IN cuneiform}', "");
Expect(0, 73727, '\P{^_	IN cuneiform}', "");
Error('\p{_/a/CJK_Symbols_AND-Punctuation}');
Error('\P{_/a/CJK_Symbols_AND-Punctuation}');
Expect(1, 12351, '\p{cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{	CJK_SymbolsAnd	Punctuation}', "");
Expect(0, 12351, '\p{^	CJK_SymbolsAnd	Punctuation}', "");
Expect(0, 12351, '\P{	CJK_SymbolsAnd	Punctuation}', "");
Expect(1, 12351, '\P{^	CJK_SymbolsAnd	Punctuation}', "");
Expect(0, 12287, '\p{	CJK_SymbolsAnd	Punctuation}', "");
Expect(1, 12287, '\p{^	CJK_SymbolsAnd	Punctuation}', "");
Expect(1, 12287, '\P{	CJK_SymbolsAnd	Punctuation}', "");
Expect(0, 12287, '\P{^	CJK_SymbolsAnd	Punctuation}', "");
Error('\p{/a/_Is	cjk-SymbolsAnd	punctuation}');
Error('\P{/a/_Is	cjk-SymbolsAnd	punctuation}');
Expect(1, 12351, '\p{iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(0, 12351, '\p{^ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(0, 12351, '\P{ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(1, 12351, '\P{^ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(0, 12287, '\p{ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(1, 12287, '\p{^ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(1, 12287, '\P{ -is-CJKSymbols-And_PUNCTUATION}', "");
Expect(0, 12287, '\P{^ -is-CJKSymbols-And_PUNCTUATION}', "");
Error('\p{_ In:=CJK	SYMBOLSAnd-Punctuation}');
Error('\P{_ In:=CJK	SYMBOLSAnd-Punctuation}');
Expect(1, 12351, '\p{incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{in-CJK symbolsAndPUNCTUATION}', "");
Expect(0, 12351, '\p{^in-CJK symbolsAndPUNCTUATION}', "");
Expect(0, 12351, '\P{in-CJK symbolsAndPUNCTUATION}', "");
Expect(1, 12351, '\P{^in-CJK symbolsAndPUNCTUATION}', "");
Expect(0, 12287, '\p{in-CJK symbolsAndPUNCTUATION}', "");
Expect(1, 12287, '\p{^in-CJK symbolsAndPUNCTUATION}', "");
Expect(1, 12287, '\P{in-CJK symbolsAndPUNCTUATION}', "");
Expect(0, 12287, '\P{^in-CJK symbolsAndPUNCTUATION}', "");
Error('\p{	-Surrogate:=}');
Error('\P{	-Surrogate:=}');
Expect(0, 55295, '\p{surrogate}', "");
Expect(1, 55295, '\p{^surrogate}', "");
Expect(1, 55295, '\P{surrogate}', "");
Expect(0, 55295, '\P{^surrogate}', "");
Expect(0, 55295, '\p{-Surrogate}', "");
Expect(1, 55295, '\p{^-Surrogate}', "");
Expect(1, 55295, '\P{-Surrogate}', "");
Expect(0, 55295, '\P{^-Surrogate}', "");
Error('\p{_ IS SURROGATE:=}');
Error('\P{_ IS SURROGATE:=}');
Expect(0, 55295, '\p{issurrogate}', "");
Expect(1, 55295, '\p{^issurrogate}', "");
Expect(1, 55295, '\P{issurrogate}', "");
Expect(0, 55295, '\P{^issurrogate}', "");
Expect(0, 55295, '\p{	Is	Surrogate}', "");
Expect(1, 55295, '\p{^	Is	Surrogate}', "");
Expect(1, 55295, '\P{	Is	Surrogate}', "");
Expect(0, 55295, '\P{^	Is	Surrogate}', "");
Error('\p{:=-_cs}');
Error('\P{:=-_cs}');
Expect(0, 55295, '\p{cs}', "");
Expect(1, 55295, '\p{^cs}', "");
Expect(1, 55295, '\P{cs}', "");
Expect(0, 55295, '\P{^cs}', "");
Expect(0, 55295, '\p{ -CS}', "");
Expect(1, 55295, '\p{^ -CS}', "");
Expect(1, 55295, '\P{ -CS}', "");
Expect(0, 55295, '\P{^ -CS}', "");
Error('\p{:=-	IS_Cs}');
Error('\P{:=-	IS_Cs}');
Expect(0, 55295, '\p{iscs}', "");
Expect(1, 55295, '\p{^iscs}', "");
Expect(1, 55295, '\P{iscs}', "");
Expect(0, 55295, '\P{^iscs}', "");
Expect(0, 55295, '\p{	 Is-cs}', "");
Expect(1, 55295, '\p{^	 Is-cs}', "");
Expect(1, 55295, '\P{	 Is-cs}', "");
Expect(0, 55295, '\P{^	 Is-cs}', "");
Error('\p{_In/a/COPTIC}');
Error('\P{_In/a/COPTIC}');
Expect(1, 11519, '\p{incoptic}', "");
Expect(0, 11519, '\p{^incoptic}', "");
Expect(0, 11519, '\P{incoptic}', "");
Expect(1, 11519, '\P{^incoptic}', "");
Expect(0, 11391, '\p{incoptic}', "");
Expect(1, 11391, '\p{^incoptic}', "");
Expect(1, 11391, '\P{incoptic}', "");
Expect(0, 11391, '\P{^incoptic}', "");
Expect(1, 11519, '\p{--In Coptic}', "");
Expect(0, 11519, '\p{^--In Coptic}', "");
Expect(0, 11519, '\P{--In Coptic}', "");
Expect(1, 11519, '\P{^--In Coptic}', "");
Expect(0, 11391, '\p{--In Coptic}', "");
Expect(1, 11391, '\p{^--In Coptic}', "");
Expect(1, 11391, '\P{--In Coptic}', "");
Expect(0, 11391, '\P{^--In Coptic}', "");
Error('\p{--Khmer/a/}');
Error('\P{--Khmer/a/}');
Expect(1, 6109, '\p{khmer}', "");
Expect(0, 6109, '\p{^khmer}', "");
Expect(0, 6109, '\P{khmer}', "");
Expect(1, 6109, '\P{^khmer}', "");
Expect(0, 6015, '\p{khmer}', "");
Expect(1, 6015, '\p{^khmer}', "");
Expect(1, 6015, '\P{khmer}', "");
Expect(0, 6015, '\P{^khmer}', "");
Expect(1, 6109, '\p{-khmer}', "");
Expect(0, 6109, '\p{^-khmer}', "");
Expect(0, 6109, '\P{-khmer}', "");
Expect(1, 6109, '\P{^-khmer}', "");
Expect(0, 6015, '\p{-khmer}', "");
Expect(1, 6015, '\p{^-khmer}', "");
Expect(1, 6015, '\P{-khmer}', "");
Expect(0, 6015, '\P{^-khmer}', "");
Error('\p{-/a/is	KHMER}');
Error('\P{-/a/is	KHMER}');
Expect(1, 6109, '\p{iskhmer}', "");
Expect(0, 6109, '\p{^iskhmer}', "");
Expect(0, 6109, '\P{iskhmer}', "");
Expect(1, 6109, '\P{^iskhmer}', "");
Expect(0, 6015, '\p{iskhmer}', "");
Expect(1, 6015, '\p{^iskhmer}', "");
Expect(1, 6015, '\P{iskhmer}', "");
Expect(0, 6015, '\P{^iskhmer}', "");
Expect(1, 6109, '\p{	IS_khmer}', "");
Expect(0, 6109, '\p{^	IS_khmer}', "");
Expect(0, 6109, '\P{	IS_khmer}', "");
Expect(1, 6109, '\P{^	IS_khmer}', "");
Expect(0, 6015, '\p{	IS_khmer}', "");
Expect(1, 6015, '\p{^	IS_khmer}', "");
Expect(1, 6015, '\P{	IS_khmer}', "");
Expect(0, 6015, '\P{^	IS_khmer}', "");
Error('\p{:=	Khmr}');
Error('\P{:=	Khmr}');
Expect(1, 6109, '\p{khmr}', "");
Expect(0, 6109, '\p{^khmr}', "");
Expect(0, 6109, '\P{khmr}', "");
Expect(1, 6109, '\P{^khmr}', "");
Expect(0, 6015, '\p{khmr}', "");
Expect(1, 6015, '\p{^khmr}', "");
Expect(1, 6015, '\P{khmr}', "");
Expect(0, 6015, '\P{^khmr}', "");
Expect(1, 6109, '\p{	 Khmr}', "");
Expect(0, 6109, '\p{^	 Khmr}', "");
Expect(0, 6109, '\P{	 Khmr}', "");
Expect(1, 6109, '\P{^	 Khmr}', "");
Expect(0, 6015, '\p{	 Khmr}', "");
Expect(1, 6015, '\p{^	 Khmr}', "");
Expect(1, 6015, '\P{	 Khmr}', "");
Expect(0, 6015, '\P{^	 Khmr}', "");
Error('\p{	:=is-khmr}');
Error('\P{	:=is-khmr}');
Expect(1, 6109, '\p{iskhmr}', "");
Expect(0, 6109, '\p{^iskhmr}', "");
Expect(0, 6109, '\P{iskhmr}', "");
Expect(1, 6109, '\P{^iskhmr}', "");
Expect(0, 6015, '\p{iskhmr}', "");
Expect(1, 6015, '\p{^iskhmr}', "");
Expect(1, 6015, '\P{iskhmr}', "");
Expect(0, 6015, '\P{^iskhmr}', "");
Expect(1, 6109, '\p{ IS-KHMR}', "");
Expect(0, 6109, '\p{^ IS-KHMR}', "");
Expect(0, 6109, '\P{ IS-KHMR}', "");
Expect(1, 6109, '\P{^ IS-KHMR}', "");
Expect(0, 6015, '\p{ IS-KHMR}', "");
Expect(1, 6015, '\p{^ IS-KHMR}', "");
Expect(1, 6015, '\P{ IS-KHMR}', "");
Expect(0, 6015, '\P{^ IS-KHMR}', "");
Error('\p{ In:=NKo}');
Error('\P{ In:=NKo}');
Expect(1, 2047, '\p{innko}', "");
Expect(0, 2047, '\p{^innko}', "");
Expect(0, 2047, '\P{innko}', "");
Expect(1, 2047, '\P{^innko}', "");
Expect(0, 1983, '\p{innko}', "");
Expect(1, 1983, '\p{^innko}', "");
Expect(1, 1983, '\P{innko}', "");
Expect(0, 1983, '\P{^innko}', "");
Expect(1, 2047, '\p{_in	NKo}', "");
Expect(0, 2047, '\p{^_in	NKo}', "");
Expect(0, 2047, '\P{_in	NKo}', "");
Expect(1, 2047, '\P{^_in	NKo}', "");
Expect(0, 1983, '\p{_in	NKo}', "");
Expect(1, 1983, '\p{^_in	NKo}', "");
Expect(1, 1983, '\P{_in	NKo}', "");
Expect(0, 1983, '\P{^_in	NKo}', "");
Error('\p{-/a/linear_B Syllabary}');
Error('\P{-/a/linear_B Syllabary}');
Expect(1, 65663, '\p{linearbsyllabary}', "");
Expect(0, 65663, '\p{^linearbsyllabary}', "");
Expect(0, 65663, '\P{linearbsyllabary}', "");
Expect(1, 65663, '\P{^linearbsyllabary}', "");
Expect(0, 1, '\p{linearbsyllabary}', "");
Expect(1, 1, '\p{^linearbsyllabary}', "");
Expect(1, 1, '\P{linearbsyllabary}', "");
Expect(0, 1, '\P{^linearbsyllabary}', "");
Expect(1, 65663, '\p{_Linear	b	SYLLABARY}', "");
Expect(0, 65663, '\p{^_Linear	b	SYLLABARY}', "");
Expect(0, 65663, '\P{_Linear	b	SYLLABARY}', "");
Expect(1, 65663, '\P{^_Linear	b	SYLLABARY}', "");
Expect(0, 1, '\p{_Linear	b	SYLLABARY}', "");
Expect(1, 1, '\p{^_Linear	b	SYLLABARY}', "");
Expect(1, 1, '\P{_Linear	b	SYLLABARY}', "");
Expect(0, 1, '\P{^_Linear	b	SYLLABARY}', "");
Error('\p{-Is-LINEAR-B:=syllabary}');
Error('\P{-Is-LINEAR-B:=syllabary}');
Expect(1, 65663, '\p{islinearbsyllabary}', "");
Expect(0, 65663, '\p{^islinearbsyllabary}', "");
Expect(0, 65663, '\P{islinearbsyllabary}', "");
Expect(1, 65663, '\P{^islinearbsyllabary}', "");
Expect(0, 1, '\p{islinearbsyllabary}', "");
Expect(1, 1, '\p{^islinearbsyllabary}', "");
Expect(1, 1, '\P{islinearbsyllabary}', "");
Expect(0, 1, '\P{^islinearbsyllabary}', "");
Expect(1, 65663, '\p{	_IS_Linear B-SYLLABARY}', "");
Expect(0, 65663, '\p{^	_IS_Linear B-SYLLABARY}', "");
Expect(0, 65663, '\P{	_IS_Linear B-SYLLABARY}', "");
Expect(1, 65663, '\P{^	_IS_Linear B-SYLLABARY}', "");
Expect(0, 1, '\p{	_IS_Linear B-SYLLABARY}', "");
Expect(1, 1, '\p{^	_IS_Linear B-SYLLABARY}', "");
Expect(1, 1, '\P{	_IS_Linear B-SYLLABARY}', "");
Expect(0, 1, '\P{^	_IS_Linear B-SYLLABARY}', "");
Error('\p{/a/	 In Linear_b-Syllabary}');
Error('\P{/a/	 In Linear_b-Syllabary}');
Expect(1, 65663, '\p{inlinearbsyllabary}', "");
Expect(0, 65663, '\p{^inlinearbsyllabary}', "");
Expect(0, 65663, '\P{inlinearbsyllabary}', "");
Expect(1, 65663, '\P{^inlinearbsyllabary}', "");
Expect(0, 1, '\p{inlinearbsyllabary}', "");
Expect(1, 1, '\p{^inlinearbsyllabary}', "");
Expect(1, 1, '\P{inlinearbsyllabary}', "");
Expect(0, 1, '\P{^inlinearbsyllabary}', "");
Expect(1, 65663, '\p{	In	Linear B-SYLLABARY}', "");
Expect(0, 65663, '\p{^	In	Linear B-SYLLABARY}', "");
Expect(0, 65663, '\P{	In	Linear B-SYLLABARY}', "");
Expect(1, 65663, '\P{^	In	Linear B-SYLLABARY}', "");
Expect(0, 1, '\p{	In	Linear B-SYLLABARY}', "");
Expect(1, 1, '\p{^	In	Linear B-SYLLABARY}', "");
Expect(1, 1, '\P{	In	Linear B-SYLLABARY}', "");
Expect(0, 1, '\P{^	In	Linear B-SYLLABARY}', "");
Error('\p{		Hangul	jamo/a/EXTENDED B}');
Error('\P{		Hangul	jamo/a/EXTENDED B}');
Expect(1, 55295, '\p{hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^hanguljamoextendedb}', "");
Expect(0, 55295, '\P{hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^hanguljamoextendedb}', "");
Expect(0, 55215, '\p{hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^hanguljamoextendedb}', "");
Expect(1, 55215, '\P{hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^hanguljamoextendedb}', "");
Expect(1, 55295, '\p{_HANGUL-Jamo_Extended-B}', "");
Expect(0, 55295, '\p{^_HANGUL-Jamo_Extended-B}', "");
Expect(0, 55295, '\P{_HANGUL-Jamo_Extended-B}', "");
Expect(1, 55295, '\P{^_HANGUL-Jamo_Extended-B}', "");
Expect(0, 55215, '\p{_HANGUL-Jamo_Extended-B}', "");
Expect(1, 55215, '\p{^_HANGUL-Jamo_Extended-B}', "");
Expect(1, 55215, '\P{_HANGUL-Jamo_Extended-B}', "");
Expect(0, 55215, '\P{^_HANGUL-Jamo_Extended-B}', "");
Error('\p{- IS:=Hangul	Jamo_Extended_B}');
Error('\P{- IS:=Hangul	Jamo_Extended_B}');
Expect(1, 55295, '\p{ishanguljamoextendedb}', "");
Expect(0, 55295, '\p{^ishanguljamoextendedb}', "");
Expect(0, 55295, '\P{ishanguljamoextendedb}', "");
Expect(1, 55295, '\P{^ishanguljamoextendedb}', "");
Expect(0, 55215, '\p{ishanguljamoextendedb}', "");
Expect(1, 55215, '\p{^ishanguljamoextendedb}', "");
Expect(1, 55215, '\P{ishanguljamoextendedb}', "");
Expect(0, 55215, '\P{^ishanguljamoextendedb}', "");
Expect(1, 55295, '\p{-	Ishangul JAMO-Extended_B}', "");
Expect(0, 55295, '\p{^-	Ishangul JAMO-Extended_B}', "");
Expect(0, 55295, '\P{-	Ishangul JAMO-Extended_B}', "");
Expect(1, 55295, '\P{^-	Ishangul JAMO-Extended_B}', "");
Expect(0, 55215, '\p{-	Ishangul JAMO-Extended_B}', "");
Expect(1, 55215, '\p{^-	Ishangul JAMO-Extended_B}', "");
Expect(1, 55215, '\P{-	Ishangul JAMO-Extended_B}', "");
Expect(0, 55215, '\P{^-	Ishangul JAMO-Extended_B}', "");
Error('\p{ _INHangul_JAMO/a/Extended B}');
Error('\P{ _INHangul_JAMO/a/Extended B}');
Expect(1, 55295, '\p{inhanguljamoextendedb}', "");
Expect(0, 55295, '\p{^inhanguljamoextendedb}', "");
Expect(0, 55295, '\P{inhanguljamoextendedb}', "");
Expect(1, 55295, '\P{^inhanguljamoextendedb}', "");
Expect(0, 55215, '\p{inhanguljamoextendedb}', "");
Expect(1, 55215, '\p{^inhanguljamoextendedb}', "");
Expect(1, 55215, '\P{inhanguljamoextendedb}', "");
Expect(0, 55215, '\P{^inhanguljamoextendedb}', "");
Expect(1, 55295, '\p{-inhangul	jamo	EXTENDED B}', "");
Expect(0, 55295, '\p{^-inhangul	jamo	EXTENDED B}', "");
Expect(0, 55295, '\P{-inhangul	jamo	EXTENDED B}', "");
Expect(1, 55295, '\P{^-inhangul	jamo	EXTENDED B}', "");
Expect(0, 55215, '\p{-inhangul	jamo	EXTENDED B}', "");
Expect(1, 55215, '\p{^-inhangul	jamo	EXTENDED B}', "");
Expect(1, 55215, '\P{-inhangul	jamo	EXTENDED B}', "");
Expect(0, 55215, '\P{^-inhangul	jamo	EXTENDED B}', "");
Error('\p{:=_-IN_Buginese}');
Error('\P{:=_-IN_Buginese}');
Expect(1, 6687, '\p{inbuginese}', "");
Expect(0, 6687, '\p{^inbuginese}', "");
Expect(0, 6687, '\P{inbuginese}', "");
Expect(1, 6687, '\P{^inbuginese}', "");
Expect(0, 6655, '\p{inbuginese}', "");
Expect(1, 6655, '\p{^inbuginese}', "");
Expect(1, 6655, '\P{inbuginese}', "");
Expect(0, 6655, '\P{^inbuginese}', "");
Expect(1, 6687, '\p{_In	Buginese}', "");
Expect(0, 6687, '\p{^_In	Buginese}', "");
Expect(0, 6687, '\P{_In	Buginese}', "");
Expect(1, 6687, '\P{^_In	Buginese}', "");
Expect(0, 6655, '\p{_In	Buginese}', "");
Expect(1, 6655, '\p{^_In	Buginese}', "");
Expect(1, 6655, '\P{_In	Buginese}', "");
Expect(0, 6655, '\P{^_In	Buginese}', "");
Error('\p{	/a/In Tagbanwa}');
Error('\P{	/a/In Tagbanwa}');
Expect(1, 6015, '\p{intagbanwa}', "");
Expect(0, 6015, '\p{^intagbanwa}', "");
Expect(0, 6015, '\P{intagbanwa}', "");
Expect(1, 6015, '\P{^intagbanwa}', "");
Expect(0, 5983, '\p{intagbanwa}', "");
Expect(1, 5983, '\p{^intagbanwa}', "");
Expect(1, 5983, '\P{intagbanwa}', "");
Expect(0, 5983, '\P{^intagbanwa}', "");
Expect(1, 6015, '\p{_	In_TAGBANWA}', "");
Expect(0, 6015, '\p{^_	In_TAGBANWA}', "");
Expect(0, 6015, '\P{_	In_TAGBANWA}', "");
Expect(1, 6015, '\P{^_	In_TAGBANWA}', "");
Expect(0, 5983, '\p{_	In_TAGBANWA}', "");
Expect(1, 5983, '\p{^_	In_TAGBANWA}', "");
Expect(1, 5983, '\P{_	In_TAGBANWA}', "");
Expect(0, 5983, '\P{^_	In_TAGBANWA}', "");
Error('\p{/a/__XID_start}');
Error('\P{/a/__XID_start}');
Expect(1, 90, '\p{xidstart}', "");
Expect(0, 90, '\p{^xidstart}', "");
Expect(0, 90, '\P{xidstart}', "");
Expect(1, 90, '\P{^xidstart}', "");
Expect(0, 64, '\p{xidstart}', "");
Expect(1, 64, '\p{^xidstart}', "");
Expect(1, 64, '\P{xidstart}', "");
Expect(0, 64, '\P{^xidstart}', "");
Expect(1, 90, '\p{_ XID	Start}', "");
Expect(0, 90, '\p{^_ XID	Start}', "");
Expect(0, 90, '\P{_ XID	Start}', "");
Expect(1, 90, '\P{^_ XID	Start}', "");
Expect(0, 64, '\p{_ XID	Start}', "");
Expect(1, 64, '\p{^_ XID	Start}', "");
Expect(1, 64, '\P{_ XID	Start}', "");
Expect(0, 64, '\P{^_ XID	Start}', "");
Error('\p{-/a/Is	xid	Start}');
Error('\P{-/a/Is	xid	Start}');
Expect(1, 90, '\p{isxidstart}', "");
Expect(0, 90, '\p{^isxidstart}', "");
Expect(0, 90, '\P{isxidstart}', "");
Expect(1, 90, '\P{^isxidstart}', "");
Expect(0, 64, '\p{isxidstart}', "");
Expect(1, 64, '\p{^isxidstart}', "");
Expect(1, 64, '\P{isxidstart}', "");
Expect(0, 64, '\P{^isxidstart}', "");
Expect(1, 90, '\p{-Is XID	Start}', "");
Expect(0, 90, '\p{^-Is XID	Start}', "");
Expect(0, 90, '\P{-Is XID	Start}', "");
Expect(1, 90, '\P{^-Is XID	Start}', "");
Expect(0, 64, '\p{-Is XID	Start}', "");
Expect(1, 64, '\p{^-Is XID	Start}', "");
Expect(1, 64, '\P{-Is XID	Start}', "");
Expect(0, 64, '\P{^-Is XID	Start}', "");
Error('\p{		XIDS/a/}');
Error('\P{		XIDS/a/}');
Expect(1, 90, '\p{xids}', "");
Expect(0, 90, '\p{^xids}', "");
Expect(0, 90, '\P{xids}', "");
Expect(1, 90, '\P{^xids}', "");
Expect(0, 64, '\p{xids}', "");
Expect(1, 64, '\p{^xids}', "");
Expect(1, 64, '\P{xids}', "");
Expect(0, 64, '\P{^xids}', "");
Expect(1, 90, '\p{_ XIDS}', "");
Expect(0, 90, '\p{^_ XIDS}', "");
Expect(0, 90, '\P{_ XIDS}', "");
Expect(1, 90, '\P{^_ XIDS}', "");
Expect(0, 64, '\p{_ XIDS}', "");
Expect(1, 64, '\p{^_ XIDS}', "");
Expect(1, 64, '\P{_ XIDS}', "");
Expect(0, 64, '\P{^_ XIDS}', "");
Error('\p{:=-_Is-XIDS}');
Error('\P{:=-_Is-XIDS}');
Expect(1, 90, '\p{isxids}', "");
Expect(0, 90, '\p{^isxids}', "");
Expect(0, 90, '\P{isxids}', "");
Expect(1, 90, '\P{^isxids}', "");
Expect(0, 64, '\p{isxids}', "");
Expect(1, 64, '\p{^isxids}', "");
Expect(1, 64, '\P{isxids}', "");
Expect(0, 64, '\P{^isxids}', "");
Expect(1, 90, '\p{_IS	XIDS}', "");
Expect(0, 90, '\p{^_IS	XIDS}', "");
Expect(0, 90, '\P{_IS	XIDS}', "");
Expect(1, 90, '\P{^_IS	XIDS}', "");
Expect(0, 64, '\p{_IS	XIDS}', "");
Expect(1, 64, '\p{^_IS	XIDS}', "");
Expect(1, 64, '\P{_IS	XIDS}', "");
Expect(0, 64, '\P{^_IS	XIDS}', "");
Error('\p{ /a/GRAPH}');
Error('\P{ /a/GRAPH}');
Expect(1, 126, '\p{graph}', "");
Expect(0, 126, '\p{^graph}', "");
Expect(0, 126, '\P{graph}', "");
Expect(1, 126, '\P{^graph}', "");
Expect(0, 32, '\p{graph}', "");
Expect(1, 32, '\p{^graph}', "");
Expect(1, 32, '\P{graph}', "");
Expect(0, 32, '\P{^graph}', "");
Expect(1, 126, '\p{	_Graph}', "");
Expect(0, 126, '\p{^	_Graph}', "");
Expect(0, 126, '\P{	_Graph}', "");
Expect(1, 126, '\P{^	_Graph}', "");
Expect(0, 32, '\p{	_Graph}', "");
Expect(1, 32, '\p{^	_Graph}', "");
Expect(1, 32, '\P{	_Graph}', "");
Expect(0, 32, '\P{^	_Graph}', "");
Error('\p{-:=Is	Graph}');
Error('\P{-:=Is	Graph}');
Expect(1, 126, '\p{isgraph}', "");
Expect(0, 126, '\p{^isgraph}', "");
Expect(0, 126, '\P{isgraph}', "");
Expect(1, 126, '\P{^isgraph}', "");
Expect(0, 32, '\p{isgraph}', "");
Expect(1, 32, '\p{^isgraph}', "");
Expect(1, 32, '\P{isgraph}', "");
Expect(0, 32, '\P{^isgraph}', "");
Expect(1, 126, '\p{__IS	Graph}', "");
Expect(0, 126, '\p{^__IS	Graph}', "");
Expect(0, 126, '\P{__IS	Graph}', "");
Expect(1, 126, '\P{^__IS	Graph}', "");
Expect(0, 32, '\p{__IS	Graph}', "");
Expect(1, 32, '\p{^__IS	Graph}', "");
Expect(1, 32, '\P{__IS	Graph}', "");
Expect(0, 32, '\P{^__IS	Graph}', "");
Error('\p{-Phonetic:=EXTENSIONS_Supplement}');
Error('\P{-Phonetic:=EXTENSIONS_Supplement}');
Expect(1, 7615, '\p{phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{	 Phonetic	Extensions	Supplement}', "");
Expect(0, 7615, '\p{^	 Phonetic	Extensions	Supplement}', "");
Expect(0, 7615, '\P{	 Phonetic	Extensions	Supplement}', "");
Expect(1, 7615, '\P{^	 Phonetic	Extensions	Supplement}', "");
Expect(0, 7551, '\p{	 Phonetic	Extensions	Supplement}', "");
Expect(1, 7551, '\p{^	 Phonetic	Extensions	Supplement}', "");
Expect(1, 7551, '\P{	 Phonetic	Extensions	Supplement}', "");
Expect(0, 7551, '\P{^	 Phonetic	Extensions	Supplement}', "");
Error('\p{/a/_ISPhoneticExtensions supplement}');
Error('\P{/a/_ISPhoneticExtensions supplement}');
Expect(1, 7615, '\p{isphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^isphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{isphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^isphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{isphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^isphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{isphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^isphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{_IS	phonetic_extensionssupplement}', "");
Expect(0, 7615, '\p{^_IS	phonetic_extensionssupplement}', "");
Expect(0, 7615, '\P{_IS	phonetic_extensionssupplement}', "");
Expect(1, 7615, '\P{^_IS	phonetic_extensionssupplement}', "");
Expect(0, 7551, '\p{_IS	phonetic_extensionssupplement}', "");
Expect(1, 7551, '\p{^_IS	phonetic_extensionssupplement}', "");
Expect(1, 7551, '\P{_IS	phonetic_extensionssupplement}', "");
Expect(0, 7551, '\P{^_IS	phonetic_extensionssupplement}', "");
Error('\p{/a/-	InPhonetic_Extensions_SUPPLEMENT}');
Error('\P{/a/-	InPhonetic_Extensions_SUPPLEMENT}');
Expect(1, 7615, '\p{inphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^inphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{inphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^inphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{inphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^inphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{inphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^inphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(0, 7615, '\p{^_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(0, 7615, '\P{_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(1, 7615, '\P{^_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(0, 7551, '\p{_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(1, 7551, '\p{^_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(1, 7551, '\P{_-IN PHONETIC EXTENSIONSSupplement}', "");
Expect(0, 7551, '\P{^_-IN PHONETIC EXTENSIONSSupplement}', "");
Error('\p{:=-_modifier-tone	LETTERS}');
Error('\P{:=-_modifier-tone	LETTERS}');
Expect(1, 42783, '\p{modifiertoneletters}', "");
Expect(0, 42783, '\p{^modifiertoneletters}', "");
Expect(0, 42783, '\P{modifiertoneletters}', "");
Expect(1, 42783, '\P{^modifiertoneletters}', "");
Expect(0, 42751, '\p{modifiertoneletters}', "");
Expect(1, 42751, '\p{^modifiertoneletters}', "");
Expect(1, 42751, '\P{modifiertoneletters}', "");
Expect(0, 42751, '\P{^modifiertoneletters}', "");
Expect(1, 42783, '\p{-Modifier TONE-LETTERS}', "");
Expect(0, 42783, '\p{^-Modifier TONE-LETTERS}', "");
Expect(0, 42783, '\P{-Modifier TONE-LETTERS}', "");
Expect(1, 42783, '\P{^-Modifier TONE-LETTERS}', "");
Expect(0, 42751, '\p{-Modifier TONE-LETTERS}', "");
Expect(1, 42751, '\p{^-Modifier TONE-LETTERS}', "");
Expect(1, 42751, '\P{-Modifier TONE-LETTERS}', "");
Expect(0, 42751, '\P{^-Modifier TONE-LETTERS}', "");
Error('\p{ -Is_Modifier	TONELetters/a/}');
Error('\P{ -Is_Modifier	TONELetters/a/}');
Expect(1, 42783, '\p{ismodifiertoneletters}', "");
Expect(0, 42783, '\p{^ismodifiertoneletters}', "");
Expect(0, 42783, '\P{ismodifiertoneletters}', "");
Expect(1, 42783, '\P{^ismodifiertoneletters}', "");
Expect(0, 42751, '\p{ismodifiertoneletters}', "");
Expect(1, 42751, '\p{^ismodifiertoneletters}', "");
Expect(1, 42751, '\P{ismodifiertoneletters}', "");
Expect(0, 42751, '\P{^ismodifiertoneletters}', "");
Expect(1, 42783, '\p{	_is-MODIFIER-Tone Letters}', "");
Expect(0, 42783, '\p{^	_is-MODIFIER-Tone Letters}', "");
Expect(0, 42783, '\P{	_is-MODIFIER-Tone Letters}', "");
Expect(1, 42783, '\P{^	_is-MODIFIER-Tone Letters}', "");
Expect(0, 42751, '\p{	_is-MODIFIER-Tone Letters}', "");
Expect(1, 42751, '\p{^	_is-MODIFIER-Tone Letters}', "");
Expect(1, 42751, '\P{	_is-MODIFIER-Tone Letters}', "");
Expect(0, 42751, '\P{^	_is-MODIFIER-Tone Letters}', "");
Error('\p{-:=in MODIFIERTONE Letters}');
Error('\P{-:=in MODIFIERTONE Letters}');
Expect(1, 42783, '\p{inmodifiertoneletters}', "");
Expect(0, 42783, '\p{^inmodifiertoneletters}', "");
Expect(0, 42783, '\P{inmodifiertoneletters}', "");
Expect(1, 42783, '\P{^inmodifiertoneletters}', "");
Expect(0, 42751, '\p{inmodifiertoneletters}', "");
Expect(1, 42751, '\p{^inmodifiertoneletters}', "");
Expect(1, 42751, '\P{inmodifiertoneletters}', "");
Expect(0, 42751, '\P{^inmodifiertoneletters}', "");
Expect(1, 42783, '\p{	In-MODIFIERTONE_Letters}', "");
Expect(0, 42783, '\p{^	In-MODIFIERTONE_Letters}', "");
Expect(0, 42783, '\P{	In-MODIFIERTONE_Letters}', "");
Expect(1, 42783, '\P{^	In-MODIFIERTONE_Letters}', "");
Expect(0, 42751, '\p{	In-MODIFIERTONE_Letters}', "");
Expect(1, 42751, '\p{^	In-MODIFIERTONE_Letters}', "");
Expect(1, 42751, '\P{	In-MODIFIERTONE_Letters}', "");
Expect(0, 42751, '\P{^	In-MODIFIERTONE_Letters}', "");
Error('\p{:=_ CHANGES when	CASEFOLDED}');
Error('\P{:=_ CHANGES when	CASEFOLDED}');
Expect(1, 90, '\p{changeswhencasefolded}', "");
Expect(0, 90, '\p{^changeswhencasefolded}', "");
Expect(0, 90, '\P{changeswhencasefolded}', "");
Expect(1, 90, '\P{^changeswhencasefolded}', "");
Expect(0, 64, '\p{changeswhencasefolded}', "");
Expect(1, 64, '\p{^changeswhencasefolded}', "");
Expect(1, 64, '\P{changeswhencasefolded}', "");
Expect(0, 64, '\P{^changeswhencasefolded}', "");
Expect(1, 90, '\p{- changesWhen_Casefolded}', "");
Expect(0, 90, '\p{^- changesWhen_Casefolded}', "");
Expect(0, 90, '\P{- changesWhen_Casefolded}', "");
Expect(1, 90, '\P{^- changesWhen_Casefolded}', "");
Expect(0, 64, '\p{- changesWhen_Casefolded}', "");
Expect(1, 64, '\p{^- changesWhen_Casefolded}', "");
Expect(1, 64, '\P{- changesWhen_Casefolded}', "");
Expect(0, 64, '\P{^- changesWhen_Casefolded}', "");
Error('\p{_	IS:=Changes_When	CASEFOLDED}');
Error('\P{_	IS:=Changes_When	CASEFOLDED}');
Expect(1, 90, '\p{ischangeswhencasefolded}', "");
Expect(0, 90, '\p{^ischangeswhencasefolded}', "");
Expect(0, 90, '\P{ischangeswhencasefolded}', "");
Expect(1, 90, '\P{^ischangeswhencasefolded}', "");
Expect(0, 64, '\p{ischangeswhencasefolded}', "");
Expect(1, 64, '\p{^ischangeswhencasefolded}', "");
Expect(1, 64, '\P{ischangeswhencasefolded}', "");
Expect(0, 64, '\P{^ischangeswhencasefolded}', "");
Expect(1, 90, '\p{ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(0, 90, '\p{^ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(0, 90, '\P{ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(1, 90, '\P{^ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(0, 64, '\p{ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(1, 64, '\p{^ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(1, 64, '\P{ _Is CHANGESWHEN_CASEFOLDED}', "");
Expect(0, 64, '\P{^ _Is CHANGESWHEN_CASEFOLDED}', "");
Error('\p{ /a/CWCF}');
Error('\P{ /a/CWCF}');
Expect(1, 90, '\p{cwcf}', "");
Expect(0, 90, '\p{^cwcf}', "");
Expect(0, 90, '\P{cwcf}', "");
Expect(1, 90, '\P{^cwcf}', "");
Expect(0, 64, '\p{cwcf}', "");
Expect(1, 64, '\p{^cwcf}', "");
Expect(1, 64, '\P{cwcf}', "");
Expect(0, 64, '\P{^cwcf}', "");
Expect(1, 90, '\p{-CWCF}', "");
Expect(0, 90, '\p{^-CWCF}', "");
Expect(0, 90, '\P{-CWCF}', "");
Expect(1, 90, '\P{^-CWCF}', "");
Expect(0, 64, '\p{-CWCF}', "");
Expect(1, 64, '\p{^-CWCF}', "");
Expect(1, 64, '\P{-CWCF}', "");
Expect(0, 64, '\P{^-CWCF}', "");
Error('\p{ :=iscwcf}');
Error('\P{ :=iscwcf}');
Expect(1, 90, '\p{iscwcf}', "");
Expect(0, 90, '\p{^iscwcf}', "");
Expect(0, 90, '\P{iscwcf}', "");
Expect(1, 90, '\P{^iscwcf}', "");
Expect(0, 64, '\p{iscwcf}', "");
Expect(1, 64, '\p{^iscwcf}', "");
Expect(1, 64, '\P{iscwcf}', "");
Expect(0, 64, '\P{^iscwcf}', "");
Expect(1, 90, '\p{ IS_CWCF}', "");
Expect(0, 90, '\p{^ IS_CWCF}', "");
Expect(0, 90, '\P{ IS_CWCF}', "");
Expect(1, 90, '\P{^ IS_CWCF}', "");
Expect(0, 64, '\p{ IS_CWCF}', "");
Expect(1, 64, '\p{^ IS_CWCF}', "");
Expect(1, 64, '\P{ IS_CWCF}', "");
Expect(0, 64, '\P{^ IS_CWCF}', "");
Error('\p{	Private:=USEArea}');
Error('\P{	Private:=USEArea}');
Expect(1, 63743, '\p{privateusearea}', "");
Expect(0, 63743, '\p{^privateusearea}', "");
Expect(0, 63743, '\P{privateusearea}', "");
Expect(1, 63743, '\P{^privateusearea}', "");
Expect(0, 1, '\p{privateusearea}', "");
Expect(1, 1, '\p{^privateusearea}', "");
Expect(1, 1, '\P{privateusearea}', "");
Expect(0, 1, '\P{^privateusearea}', "");
Expect(1, 63743, '\p{-PRIVATE USE Area}', "");
Expect(0, 63743, '\p{^-PRIVATE USE Area}', "");
Expect(0, 63743, '\P{-PRIVATE USE Area}', "");
Expect(1, 63743, '\P{^-PRIVATE USE Area}', "");
Expect(0, 1, '\p{-PRIVATE USE Area}', "");
Expect(1, 1, '\p{^-PRIVATE USE Area}', "");
Expect(1, 1, '\P{-PRIVATE USE Area}', "");
Expect(0, 1, '\P{^-PRIVATE USE Area}', "");
Error('\p{:=--IS-Private-USE-Area}');
Error('\P{:=--IS-Private-USE-Area}');
Expect(1, 63743, '\p{isprivateusearea}', "");
Expect(0, 63743, '\p{^isprivateusearea}', "");
Expect(0, 63743, '\P{isprivateusearea}', "");
Expect(1, 63743, '\P{^isprivateusearea}', "");
Expect(0, 1, '\p{isprivateusearea}', "");
Expect(1, 1, '\p{^isprivateusearea}', "");
Expect(1, 1, '\P{isprivateusearea}', "");
Expect(0, 1, '\P{^isprivateusearea}', "");
Expect(1, 63743, '\p{	 isprivateuse	AREA}', "");
Expect(0, 63743, '\p{^	 isprivateuse	AREA}', "");
Expect(0, 63743, '\P{	 isprivateuse	AREA}', "");
Expect(1, 63743, '\P{^	 isprivateuse	AREA}', "");
Expect(0, 1, '\p{	 isprivateuse	AREA}', "");
Expect(1, 1, '\p{^	 isprivateuse	AREA}', "");
Expect(1, 1, '\P{	 isprivateuse	AREA}', "");
Expect(0, 1, '\P{^	 isprivateuse	AREA}', "");
Error('\p{_:=IN-PRIVATE	USEArea}');
Error('\P{_:=IN-PRIVATE	USEArea}');
Expect(1, 63743, '\p{inprivateusearea}', "");
Expect(0, 63743, '\p{^inprivateusearea}', "");
Expect(0, 63743, '\P{inprivateusearea}', "");
Expect(1, 63743, '\P{^inprivateusearea}', "");
Expect(0, 1, '\p{inprivateusearea}', "");
Expect(1, 1, '\p{^inprivateusearea}', "");
Expect(1, 1, '\P{inprivateusearea}', "");
Expect(0, 1, '\P{^inprivateusearea}', "");
Expect(1, 63743, '\p{__In_Private	Use_area}', "");
Expect(0, 63743, '\p{^__In_Private	Use_area}', "");
Expect(0, 63743, '\P{__In_Private	Use_area}', "");
Expect(1, 63743, '\P{^__In_Private	Use_area}', "");
Expect(0, 1, '\p{__In_Private	Use_area}', "");
Expect(1, 1, '\p{^__In_Private	Use_area}', "");
Expect(1, 1, '\P{__In_Private	Use_area}', "");
Expect(0, 1, '\P{^__In_Private	Use_area}', "");
Error('\p{_:=In_private Use}');
Error('\P{_:=In_private Use}');
Expect(1, 63743, '\p{inprivateuse}', "");
Expect(0, 63743, '\p{^inprivateuse}', "");
Expect(0, 63743, '\P{inprivateuse}', "");
Expect(1, 63743, '\P{^inprivateuse}', "");
Expect(0, 1, '\p{inprivateuse}', "");
Expect(1, 1, '\p{^inprivateuse}', "");
Expect(1, 1, '\P{inprivateuse}', "");
Expect(0, 1, '\P{^inprivateuse}', "");
Expect(1, 63743, '\p{	_INprivateuse}', "");
Expect(0, 63743, '\p{^	_INprivateuse}', "");
Expect(0, 63743, '\P{	_INprivateuse}', "");
Expect(1, 63743, '\P{^	_INprivateuse}', "");
Expect(0, 1, '\p{	_INprivateuse}', "");
Expect(1, 1, '\p{^	_INprivateuse}', "");
Expect(1, 1, '\P{	_INprivateuse}', "");
Expect(0, 1, '\P{^	_INprivateuse}', "");
Error('\p{	:=LYCIAN}');
Error('\P{	:=LYCIAN}');
Expect(1, 66204, '\p{lycian}', "");
Expect(0, 66204, '\p{^lycian}', "");
Expect(0, 66204, '\P{lycian}', "");
Expect(1, 66204, '\P{^lycian}', "");
Expect(0, 66175, '\p{lycian}', "");
Expect(1, 66175, '\p{^lycian}', "");
Expect(1, 66175, '\P{lycian}', "");
Expect(0, 66175, '\P{^lycian}', "");
Expect(1, 66204, '\p{-	Lycian}', "");
Expect(0, 66204, '\p{^-	Lycian}', "");
Expect(0, 66204, '\P{-	Lycian}', "");
Expect(1, 66204, '\P{^-	Lycian}', "");
Expect(0, 66175, '\p{-	Lycian}', "");
Expect(1, 66175, '\p{^-	Lycian}', "");
Expect(1, 66175, '\P{-	Lycian}', "");
Expect(0, 66175, '\P{^-	Lycian}', "");
Error('\p{	Is:=Lycian}');
Error('\P{	Is:=Lycian}');
Expect(1, 66204, '\p{islycian}', "");
Expect(0, 66204, '\p{^islycian}', "");
Expect(0, 66204, '\P{islycian}', "");
Expect(1, 66204, '\P{^islycian}', "");
Expect(0, 66175, '\p{islycian}', "");
Expect(1, 66175, '\p{^islycian}', "");
Expect(1, 66175, '\P{islycian}', "");
Expect(0, 66175, '\P{^islycian}', "");
Expect(1, 66204, '\p{ 	Is_LYCIAN}', "");
Expect(0, 66204, '\p{^ 	Is_LYCIAN}', "");
Expect(0, 66204, '\P{ 	Is_LYCIAN}', "");
Expect(1, 66204, '\P{^ 	Is_LYCIAN}', "");
Expect(0, 66175, '\p{ 	Is_LYCIAN}', "");
Expect(1, 66175, '\p{^ 	Is_LYCIAN}', "");
Expect(1, 66175, '\P{ 	Is_LYCIAN}', "");
Expect(0, 66175, '\P{^ 	Is_LYCIAN}', "");
Error('\p{_/a/lyci}');
Error('\P{_/a/lyci}');
Expect(1, 66204, '\p{lyci}', "");
Expect(0, 66204, '\p{^lyci}', "");
Expect(0, 66204, '\P{lyci}', "");
Expect(1, 66204, '\P{^lyci}', "");
Expect(0, 66175, '\p{lyci}', "");
Expect(1, 66175, '\p{^lyci}', "");
Expect(1, 66175, '\P{lyci}', "");
Expect(0, 66175, '\P{^lyci}', "");
Expect(1, 66204, '\p{ Lyci}', "");
Expect(0, 66204, '\p{^ Lyci}', "");
Expect(0, 66204, '\P{ Lyci}', "");
Expect(1, 66204, '\P{^ Lyci}', "");
Expect(0, 66175, '\p{ Lyci}', "");
Expect(1, 66175, '\p{^ Lyci}', "");
Expect(1, 66175, '\P{ Lyci}', "");
Expect(0, 66175, '\P{^ Lyci}', "");
Error('\p{:=__IS_Lyci}');
Error('\P{:=__IS_Lyci}');
Expect(1, 66204, '\p{islyci}', "");
Expect(0, 66204, '\p{^islyci}', "");
Expect(0, 66204, '\P{islyci}', "");
Expect(1, 66204, '\P{^islyci}', "");
Expect(0, 66175, '\p{islyci}', "");
Expect(1, 66175, '\p{^islyci}', "");
Expect(1, 66175, '\P{islyci}', "");
Expect(0, 66175, '\P{^islyci}', "");
Expect(1, 66204, '\p{_Is_Lyci}', "");
Expect(0, 66204, '\p{^_Is_Lyci}', "");
Expect(0, 66204, '\P{_Is_Lyci}', "");
Expect(1, 66204, '\P{^_Is_Lyci}', "");
Expect(0, 66175, '\p{_Is_Lyci}', "");
Expect(1, 66175, '\p{^_Is_Lyci}', "");
Expect(1, 66175, '\P{_Is_Lyci}', "");
Expect(0, 66175, '\P{^_Is_Lyci}', "");
Error('\p{/a/Number}');
Error('\P{/a/Number}');
Expect(1, 57, '\p{number}', "");
Expect(0, 57, '\p{^number}', "");
Expect(0, 57, '\P{number}', "");
Expect(1, 57, '\P{^number}', "");
Expect(0, 47, '\p{number}', "");
Expect(1, 47, '\p{^number}', "");
Expect(1, 47, '\P{number}', "");
Expect(0, 47, '\P{^number}', "");
Expect(1, 57, '\p{	_Number}', "");
Expect(0, 57, '\p{^	_Number}', "");
Expect(0, 57, '\P{	_Number}', "");
Expect(1, 57, '\P{^	_Number}', "");
Expect(0, 47, '\p{	_Number}', "");
Expect(1, 47, '\p{^	_Number}', "");
Expect(1, 47, '\P{	_Number}', "");
Expect(0, 47, '\P{^	_Number}', "");
Error('\p{:= Is Number}');
Error('\P{:= Is Number}');
Expect(1, 57, '\p{isnumber}', "");
Expect(0, 57, '\p{^isnumber}', "");
Expect(0, 57, '\P{isnumber}', "");
Expect(1, 57, '\P{^isnumber}', "");
Expect(0, 47, '\p{isnumber}', "");
Expect(1, 47, '\p{^isnumber}', "");
Expect(1, 47, '\P{isnumber}', "");
Expect(0, 47, '\P{^isnumber}', "");
Expect(1, 57, '\p{_IS-number}', "");
Expect(0, 57, '\p{^_IS-number}', "");
Expect(0, 57, '\P{_IS-number}', "");
Expect(1, 57, '\P{^_IS-number}', "");
Expect(0, 47, '\p{_IS-number}', "");
Expect(1, 47, '\p{^_IS-number}', "");
Expect(1, 47, '\P{_IS-number}', "");
Expect(0, 47, '\P{^_IS-number}', "");
Error('\p{/a/-_N}');
Error('\P{/a/-_N}');
Expect(1, 57, '\p{n}', "");
Expect(0, 57, '\p{^n}', "");
Expect(0, 57, '\P{n}', "");
Expect(1, 57, '\P{^n}', "");
Expect(0, 47, '\p{n}', "");
Expect(1, 47, '\p{^n}', "");
Expect(1, 47, '\P{n}', "");
Expect(0, 47, '\P{^n}', "");
Expect(1, 57, '\p{_-N}', "");
Expect(0, 57, '\p{^_-N}', "");
Expect(0, 57, '\P{_-N}', "");
Expect(1, 57, '\P{^_-N}', "");
Expect(0, 47, '\p{_-N}', "");
Expect(1, 47, '\p{^_-N}', "");
Expect(1, 47, '\P{_-N}', "");
Expect(0, 47, '\P{^_-N}', "");
Error('\p{		Is:=N}');
Error('\P{		Is:=N}');
Expect(1, 57, '\p{isn}', "");
Expect(0, 57, '\p{^isn}', "");
Expect(0, 57, '\P{isn}', "");
Expect(1, 57, '\P{^isn}', "");
Expect(0, 47, '\p{isn}', "");
Expect(1, 47, '\p{^isn}', "");
Expect(1, 47, '\P{isn}', "");
Expect(0, 47, '\P{^isn}', "");
Expect(1, 57, '\p{-	Is n}', "");
Expect(0, 57, '\p{^-	Is n}', "");
Expect(0, 57, '\P{-	Is n}', "");
Expect(1, 57, '\P{^-	Is n}', "");
Expect(0, 47, '\p{-	Is n}', "");
Expect(1, 47, '\p{^-	Is n}', "");
Expect(1, 47, '\P{-	Is n}', "");
Expect(0, 47, '\P{^-	Is n}', "");
Error('\p{_/a/POSIXDIGIT}');
Error('\P{_/a/POSIXDIGIT}');
Expect(1, 57, '\p{posixdigit}', "");
Expect(0, 57, '\p{^posixdigit}', "");
Expect(0, 57, '\P{posixdigit}', "");
Expect(1, 57, '\P{^posixdigit}', "");
Expect(0, 47, '\p{posixdigit}', "");
Expect(1, 47, '\p{^posixdigit}', "");
Expect(1, 47, '\P{posixdigit}', "");
Expect(0, 47, '\P{^posixdigit}', "");
Expect(1, 57, '\p{  PosixDigit}', "");
Expect(0, 57, '\p{^  PosixDigit}', "");
Expect(0, 57, '\P{  PosixDigit}', "");
Expect(1, 57, '\P{^  PosixDigit}', "");
Expect(0, 47, '\p{  PosixDigit}', "");
Expect(1, 47, '\p{^  PosixDigit}', "");
Expect(1, 47, '\P{  PosixDigit}', "");
Expect(0, 47, '\P{^  PosixDigit}', "");
Error('\p{_IS:=PosixDigit}');
Error('\P{_IS:=PosixDigit}');
Expect(1, 57, '\p{isposixdigit}', "");
Expect(0, 57, '\p{^isposixdigit}', "");
Expect(0, 57, '\P{isposixdigit}', "");
Expect(1, 57, '\P{^isposixdigit}', "");
Expect(0, 47, '\p{isposixdigit}', "");
Expect(1, 47, '\p{^isposixdigit}', "");
Expect(1, 47, '\P{isposixdigit}', "");
Expect(0, 47, '\P{^isposixdigit}', "");
Expect(1, 57, '\p{	Is_PosixDigit}', "");
Expect(0, 57, '\p{^	Is_PosixDigit}', "");
Expect(0, 57, '\P{	Is_PosixDigit}', "");
Expect(1, 57, '\P{^	Is_PosixDigit}', "");
Expect(0, 47, '\p{	Is_PosixDigit}', "");
Expect(1, 47, '\p{^	Is_PosixDigit}', "");
Expect(1, 47, '\P{	Is_PosixDigit}', "");
Expect(0, 47, '\P{^	Is_PosixDigit}', "");
Error('\p{:=-	Georgian}');
Error('\P{:=-	Georgian}');
Expect(1, 4293, '\p{georgian}', "");
Expect(0, 4293, '\p{^georgian}', "");
Expect(0, 4293, '\P{georgian}', "");
Expect(1, 4293, '\P{^georgian}', "");
Expect(0, 4255, '\p{georgian}', "");
Expect(1, 4255, '\p{^georgian}', "");
Expect(1, 4255, '\P{georgian}', "");
Expect(0, 4255, '\P{^georgian}', "");
Expect(1, 4293, '\p{	 Georgian}', "");
Expect(0, 4293, '\p{^	 Georgian}', "");
Expect(0, 4293, '\P{	 Georgian}', "");
Expect(1, 4293, '\P{^	 Georgian}', "");
Expect(0, 4255, '\p{	 Georgian}', "");
Expect(1, 4255, '\p{^	 Georgian}', "");
Expect(1, 4255, '\P{	 Georgian}', "");
Expect(0, 4255, '\P{^	 Georgian}', "");
Error('\p{	:=is_Georgian}');
Error('\P{	:=is_Georgian}');
Expect(1, 4293, '\p{isgeorgian}', "");
Expect(0, 4293, '\p{^isgeorgian}', "");
Expect(0, 4293, '\P{isgeorgian}', "");
Expect(1, 4293, '\P{^isgeorgian}', "");
Expect(0, 4255, '\p{isgeorgian}', "");
Expect(1, 4255, '\p{^isgeorgian}', "");
Expect(1, 4255, '\P{isgeorgian}', "");
Expect(0, 4255, '\P{^isgeorgian}', "");
Expect(1, 4293, '\p{- Is	Georgian}', "");
Expect(0, 4293, '\p{^- Is	Georgian}', "");
Expect(0, 4293, '\P{- Is	Georgian}', "");
Expect(1, 4293, '\P{^- Is	Georgian}', "");
Expect(0, 4255, '\p{- Is	Georgian}', "");
Expect(1, 4255, '\p{^- Is	Georgian}', "");
Expect(1, 4255, '\P{- Is	Georgian}', "");
Expect(0, 4255, '\P{^- Is	Georgian}', "");
Error('\p{ 	GEOR:=}');
Error('\P{ 	GEOR:=}');
Expect(1, 4293, '\p{geor}', "");
Expect(0, 4293, '\p{^geor}', "");
Expect(0, 4293, '\P{geor}', "");
Expect(1, 4293, '\P{^geor}', "");
Expect(0, 4255, '\p{geor}', "");
Expect(1, 4255, '\p{^geor}', "");
Expect(1, 4255, '\P{geor}', "");
Expect(0, 4255, '\P{^geor}', "");
Expect(1, 4293, '\p{ 	Geor}', "");
Expect(0, 4293, '\p{^ 	Geor}', "");
Expect(0, 4293, '\P{ 	Geor}', "");
Expect(1, 4293, '\P{^ 	Geor}', "");
Expect(0, 4255, '\p{ 	Geor}', "");
Expect(1, 4255, '\p{^ 	Geor}', "");
Expect(1, 4255, '\P{ 	Geor}', "");
Expect(0, 4255, '\P{^ 	Geor}', "");
Error('\p{-	IS-Geor:=}');
Error('\P{-	IS-Geor:=}');
Expect(1, 4293, '\p{isgeor}', "");
Expect(0, 4293, '\p{^isgeor}', "");
Expect(0, 4293, '\P{isgeor}', "");
Expect(1, 4293, '\P{^isgeor}', "");
Expect(0, 4255, '\p{isgeor}', "");
Expect(1, 4255, '\p{^isgeor}', "");
Expect(1, 4255, '\P{isgeor}', "");
Expect(0, 4255, '\P{^isgeor}', "");
Expect(1, 4293, '\p{_-isGeor}', "");
Expect(0, 4293, '\p{^_-isGeor}', "");
Expect(0, 4293, '\P{_-isGeor}', "");
Expect(1, 4293, '\P{^_-isGeor}', "");
Expect(0, 4255, '\p{_-isGeor}', "");
Expect(1, 4255, '\p{^_-isGeor}', "");
Expect(1, 4255, '\P{_-isGeor}', "");
Expect(0, 4255, '\P{^_-isGeor}', "");
Error('\p{:= _no_Block}');
Error('\P{:= _no_Block}');
Expect(1, 2303, '\p{noblock}', "");
Expect(0, 2303, '\p{^noblock}', "");
Expect(0, 2303, '\P{noblock}', "");
Expect(1, 2303, '\P{^noblock}', "");
Expect(0, 2111, '\p{noblock}', "");
Expect(1, 2111, '\p{^noblock}', "");
Expect(1, 2111, '\P{noblock}', "");
Expect(0, 2111, '\P{^noblock}', "");
Expect(1, 2303, '\p{	 NO Block}', "");
Expect(0, 2303, '\p{^	 NO Block}', "");
Expect(0, 2303, '\P{	 NO Block}', "");
Expect(1, 2303, '\P{^	 NO Block}', "");
Expect(0, 2111, '\p{	 NO Block}', "");
Expect(1, 2111, '\p{^	 NO Block}', "");
Expect(1, 2111, '\P{	 NO Block}', "");
Expect(0, 2111, '\P{^	 NO Block}', "");
Error('\p{:=_Is-NOBlock}');
Error('\P{:=_Is-NOBlock}');
Expect(1, 2303, '\p{isnoblock}', "");
Expect(0, 2303, '\p{^isnoblock}', "");
Expect(0, 2303, '\P{isnoblock}', "");
Expect(1, 2303, '\P{^isnoblock}', "");
Expect(0, 2111, '\p{isnoblock}', "");
Expect(1, 2111, '\p{^isnoblock}', "");
Expect(1, 2111, '\P{isnoblock}', "");
Expect(0, 2111, '\P{^isnoblock}', "");
Expect(1, 2303, '\p{	-Is-NO Block}', "");
Expect(0, 2303, '\p{^	-Is-NO Block}', "");
Expect(0, 2303, '\P{	-Is-NO Block}', "");
Expect(1, 2303, '\P{^	-Is-NO Block}', "");
Expect(0, 2111, '\p{	-Is-NO Block}', "");
Expect(1, 2111, '\p{^	-Is-NO Block}', "");
Expect(1, 2111, '\P{	-Is-NO Block}', "");
Expect(0, 2111, '\P{^	-Is-NO Block}', "");
Error('\p{_/a/in No_Block}');
Error('\P{_/a/in No_Block}');
Expect(1, 2303, '\p{innoblock}', "");
Expect(0, 2303, '\p{^innoblock}', "");
Expect(0, 2303, '\P{innoblock}', "");
Expect(1, 2303, '\P{^innoblock}', "");
Expect(0, 2111, '\p{innoblock}', "");
Expect(1, 2111, '\p{^innoblock}', "");
Expect(1, 2111, '\P{innoblock}', "");
Expect(0, 2111, '\P{^innoblock}', "");
Expect(1, 2303, '\p{	_InNo BLOCK}', "");
Expect(0, 2303, '\p{^	_InNo BLOCK}', "");
Expect(0, 2303, '\P{	_InNo BLOCK}', "");
Expect(1, 2303, '\P{^	_InNo BLOCK}', "");
Expect(0, 2111, '\p{	_InNo BLOCK}', "");
Expect(1, 2111, '\p{^	_InNo BLOCK}', "");
Expect(1, 2111, '\P{	_InNo BLOCK}', "");
Expect(0, 2111, '\P{^	_InNo BLOCK}', "");
Error('\p{/a/_ Assigned}');
Error('\P{/a/_ Assigned}');
Expect(1, 887, '\p{assigned}', "");
Expect(0, 887, '\p{^assigned}', "");
Expect(0, 887, '\P{assigned}', "");
Expect(1, 887, '\P{^assigned}', "");
Expect(0, 889, '\p{assigned}', "");
Expect(1, 889, '\p{^assigned}', "");
Expect(1, 889, '\P{assigned}', "");
Expect(0, 889, '\P{^assigned}', "");
Expect(1, 887, '\p{-	assigned}', "");
Expect(0, 887, '\p{^-	assigned}', "");
Expect(0, 887, '\P{-	assigned}', "");
Expect(1, 887, '\P{^-	assigned}', "");
Expect(0, 889, '\p{-	assigned}', "");
Expect(1, 889, '\p{^-	assigned}', "");
Expect(1, 889, '\P{-	assigned}', "");
Expect(0, 889, '\P{^-	assigned}', "");
Error('\p{:= 	Is	Assigned}');
Error('\P{:= 	Is	Assigned}');
Expect(1, 887, '\p{isassigned}', "");
Expect(0, 887, '\p{^isassigned}', "");
Expect(0, 887, '\P{isassigned}', "");
Expect(1, 887, '\P{^isassigned}', "");
Expect(0, 889, '\p{isassigned}', "");
Expect(1, 889, '\p{^isassigned}', "");
Expect(1, 889, '\P{isassigned}', "");
Expect(0, 889, '\P{^isassigned}', "");
Expect(1, 887, '\p{- Is_Assigned}', "");
Expect(0, 887, '\p{^- Is_Assigned}', "");
Expect(0, 887, '\P{- Is_Assigned}', "");
Expect(1, 887, '\P{^- Is_Assigned}', "");
Expect(0, 889, '\p{- Is_Assigned}', "");
Expect(1, 889, '\p{^- Is_Assigned}', "");
Expect(1, 889, '\P{- Is_Assigned}', "");
Expect(0, 889, '\P{^- Is_Assigned}', "");
Error('\p{:=_vertical_forms}');
Error('\P{:=_vertical_forms}');
Expect(1, 65055, '\p{verticalforms}', "");
Expect(0, 65055, '\p{^verticalforms}', "");
Expect(0, 65055, '\P{verticalforms}', "");
Expect(1, 65055, '\P{^verticalforms}', "");
Expect(0, 65039, '\p{verticalforms}', "");
Expect(1, 65039, '\p{^verticalforms}', "");
Expect(1, 65039, '\P{verticalforms}', "");
Expect(0, 65039, '\P{^verticalforms}', "");
Expect(1, 65055, '\p{_	Vertical-Forms}', "");
Expect(0, 65055, '\p{^_	Vertical-Forms}', "");
Expect(0, 65055, '\P{_	Vertical-Forms}', "");
Expect(1, 65055, '\P{^_	Vertical-Forms}', "");
Expect(0, 65039, '\p{_	Vertical-Forms}', "");
Expect(1, 65039, '\p{^_	Vertical-Forms}', "");
Expect(1, 65039, '\P{_	Vertical-Forms}', "");
Expect(0, 65039, '\P{^_	Vertical-Forms}', "");
Error('\p{-/a/Is-VERTICAL	Forms}');
Error('\P{-/a/Is-VERTICAL	Forms}');
Expect(1, 65055, '\p{isverticalforms}', "");
Expect(0, 65055, '\p{^isverticalforms}', "");
Expect(0, 65055, '\P{isverticalforms}', "");
Expect(1, 65055, '\P{^isverticalforms}', "");
Expect(0, 65039, '\p{isverticalforms}', "");
Expect(1, 65039, '\p{^isverticalforms}', "");
Expect(1, 65039, '\P{isverticalforms}', "");
Expect(0, 65039, '\P{^isverticalforms}', "");
Expect(1, 65055, '\p{_-IS	VERTICAL FORMS}', "");
Expect(0, 65055, '\p{^_-IS	VERTICAL FORMS}', "");
Expect(0, 65055, '\P{_-IS	VERTICAL FORMS}', "");
Expect(1, 65055, '\P{^_-IS	VERTICAL FORMS}', "");
Expect(0, 65039, '\p{_-IS	VERTICAL FORMS}', "");
Expect(1, 65039, '\p{^_-IS	VERTICAL FORMS}', "");
Expect(1, 65039, '\P{_-IS	VERTICAL FORMS}', "");
Expect(0, 65039, '\P{^_-IS	VERTICAL FORMS}', "");
Error('\p{/a/__In Verticalforms}');
Error('\P{/a/__In Verticalforms}');
Expect(1, 65055, '\p{inverticalforms}', "");
Expect(0, 65055, '\p{^inverticalforms}', "");
Expect(0, 65055, '\P{inverticalforms}', "");
Expect(1, 65055, '\P{^inverticalforms}', "");
Expect(0, 65039, '\p{inverticalforms}', "");
Expect(1, 65039, '\p{^inverticalforms}', "");
Expect(1, 65039, '\P{inverticalforms}', "");
Expect(0, 65039, '\P{^inverticalforms}', "");
Expect(1, 65055, '\p{_In VERTICAL_Forms}', "");
Expect(0, 65055, '\p{^_In VERTICAL_Forms}', "");
Expect(0, 65055, '\P{_In VERTICAL_Forms}', "");
Expect(1, 65055, '\P{^_In VERTICAL_Forms}', "");
Expect(0, 65039, '\p{_In VERTICAL_Forms}', "");
Expect(1, 65039, '\p{^_In VERTICAL_Forms}', "");
Expect(1, 65039, '\P{_In VERTICAL_Forms}', "");
Expect(0, 65039, '\P{^_In VERTICAL_Forms}', "");
Error('\p{:=		CJKCompatibility}');
Error('\P{:=		CJKCompatibility}');
Expect(1, 13311, '\p{cjkcompatibility}', "");
Expect(0, 13311, '\p{^cjkcompatibility}', "");
Expect(0, 13311, '\P{cjkcompatibility}', "");
Expect(1, 13311, '\P{^cjkcompatibility}', "");
Expect(0, 13055, '\p{cjkcompatibility}', "");
Expect(1, 13055, '\p{^cjkcompatibility}', "");
Expect(1, 13055, '\P{cjkcompatibility}', "");
Expect(0, 13055, '\P{^cjkcompatibility}', "");
Expect(1, 13311, '\p{	CJK	compatibility}', "");
Expect(0, 13311, '\p{^	CJK	compatibility}', "");
Expect(0, 13311, '\P{	CJK	compatibility}', "");
Expect(1, 13311, '\P{^	CJK	compatibility}', "");
Expect(0, 13055, '\p{	CJK	compatibility}', "");
Expect(1, 13055, '\p{^	CJK	compatibility}', "");
Expect(1, 13055, '\P{	CJK	compatibility}', "");
Expect(0, 13055, '\P{^	CJK	compatibility}', "");
Error('\p{_IS-CJK_compatibility:=}');
Error('\P{_IS-CJK_compatibility:=}');
Expect(1, 13311, '\p{iscjkcompatibility}', "");
Expect(0, 13311, '\p{^iscjkcompatibility}', "");
Expect(0, 13311, '\P{iscjkcompatibility}', "");
Expect(1, 13311, '\P{^iscjkcompatibility}', "");
Expect(0, 13055, '\p{iscjkcompatibility}', "");
Expect(1, 13055, '\p{^iscjkcompatibility}', "");
Expect(1, 13055, '\P{iscjkcompatibility}', "");
Expect(0, 13055, '\P{^iscjkcompatibility}', "");
Expect(1, 13311, '\p{Is_CJKCompatibility}', "");
Expect(0, 13311, '\p{^Is_CJKCompatibility}', "");
Expect(0, 13311, '\P{Is_CJKCompatibility}', "");
Expect(1, 13311, '\P{^Is_CJKCompatibility}', "");
Expect(0, 13055, '\p{Is_CJKCompatibility}', "");
Expect(1, 13055, '\p{^Is_CJKCompatibility}', "");
Expect(1, 13055, '\P{Is_CJKCompatibility}', "");
Expect(0, 13055, '\P{^Is_CJKCompatibility}', "");
Error('\p{ /a/in CJK	compatibility}');
Error('\P{ /a/in CJK	compatibility}');
Expect(1, 13311, '\p{incjkcompatibility}', "");
Expect(0, 13311, '\p{^incjkcompatibility}', "");
Expect(0, 13311, '\P{incjkcompatibility}', "");
Expect(1, 13311, '\P{^incjkcompatibility}', "");
Expect(0, 13055, '\p{incjkcompatibility}', "");
Expect(1, 13055, '\p{^incjkcompatibility}', "");
Expect(1, 13055, '\P{incjkcompatibility}', "");
Expect(0, 13055, '\P{^incjkcompatibility}', "");
Expect(1, 13311, '\p{ -In CJKCOMPATIBILITY}', "");
Expect(0, 13311, '\p{^ -In CJKCOMPATIBILITY}', "");
Expect(0, 13311, '\P{ -In CJKCOMPATIBILITY}', "");
Expect(1, 13311, '\P{^ -In CJKCOMPATIBILITY}', "");
Expect(0, 13055, '\p{ -In CJKCOMPATIBILITY}', "");
Expect(1, 13055, '\p{^ -In CJKCOMPATIBILITY}', "");
Expect(1, 13055, '\P{ -In CJKCOMPATIBILITY}', "");
Expect(0, 13055, '\P{^ -In CJKCOMPATIBILITY}', "");
Error('\p{ :=CJK_Unified ideographs_Extension-A}');
Error('\P{ :=CJK_Unified ideographs_Extension-A}');
Expect(1, 19903, '\p{cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{	 CJK Unified-Ideographs_extensionA}', "");
Expect(0, 19903, '\p{^	 CJK Unified-Ideographs_extensionA}', "");
Expect(0, 19903, '\P{	 CJK Unified-Ideographs_extensionA}', "");
Expect(1, 19903, '\P{^	 CJK Unified-Ideographs_extensionA}', "");
Expect(0, 13311, '\p{	 CJK Unified-Ideographs_extensionA}', "");
Expect(1, 13311, '\p{^	 CJK Unified-Ideographs_extensionA}', "");
Expect(1, 13311, '\P{	 CJK Unified-Ideographs_extensionA}', "");
Expect(0, 13311, '\P{^	 CJK Unified-Ideographs_extensionA}', "");
Error('\p{ Is/a/CJK	Unified IDEOGRAPHSextension A}');
Error('\P{ Is/a/CJK	Unified IDEOGRAPHSextension A}');
Expect(1, 19903, '\p{iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(0, 19903, '\p{^	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(0, 19903, '\P{	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(1, 19903, '\P{^	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(0, 13311, '\p{	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(1, 13311, '\p{^	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(1, 13311, '\P{	Is	CJK-unified Ideographs-ExtensionA}', "");
Expect(0, 13311, '\P{^	Is	CJK-unified Ideographs-ExtensionA}', "");
Error('\p{ _In/a/CJK-UNIFIED-Ideographs-Extension-A}');
Error('\P{ _In/a/CJK-UNIFIED-Ideographs-Extension-A}');
Expect(1, 19903, '\p{incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 19903, '\p{^-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 19903, '\P{-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 19903, '\P{^-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 13311, '\p{-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 13311, '\p{^-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 13311, '\P{-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 13311, '\P{^-inCJK-Unified IDEOGRAPHS	EXTENSION	A}', "");
Error('\p{ /a/Kharoshthi}');
Error('\P{ /a/Kharoshthi}');
Expect(1, 68099, '\p{kharoshthi}', "");
Expect(0, 68099, '\p{^kharoshthi}', "");
Expect(0, 68099, '\P{kharoshthi}', "");
Expect(1, 68099, '\P{^kharoshthi}', "");
Expect(0, 68095, '\p{kharoshthi}', "");
Expect(1, 68095, '\p{^kharoshthi}', "");
Expect(1, 68095, '\P{kharoshthi}', "");
Expect(0, 68095, '\P{^kharoshthi}', "");
Expect(1, 68099, '\p{_-KHAROSHTHI}', "");
Expect(0, 68099, '\p{^_-KHAROSHTHI}', "");
Expect(0, 68099, '\P{_-KHAROSHTHI}', "");
Expect(1, 68099, '\P{^_-KHAROSHTHI}', "");
Expect(0, 68095, '\p{_-KHAROSHTHI}', "");
Expect(1, 68095, '\p{^_-KHAROSHTHI}', "");
Expect(1, 68095, '\P{_-KHAROSHTHI}', "");
Expect(0, 68095, '\P{^_-KHAROSHTHI}', "");
Error('\p{  Is_Kharoshthi:=}');
Error('\P{  Is_Kharoshthi:=}');
Expect(1, 68099, '\p{iskharoshthi}', "");
Expect(0, 68099, '\p{^iskharoshthi}', "");
Expect(0, 68099, '\P{iskharoshthi}', "");
Expect(1, 68099, '\P{^iskharoshthi}', "");
Expect(0, 68095, '\p{iskharoshthi}', "");
Expect(1, 68095, '\p{^iskharoshthi}', "");
Expect(1, 68095, '\P{iskharoshthi}', "");
Expect(0, 68095, '\P{^iskharoshthi}', "");
Expect(1, 68099, '\p{-_IS Kharoshthi}', "");
Expect(0, 68099, '\p{^-_IS Kharoshthi}', "");
Expect(0, 68099, '\P{-_IS Kharoshthi}', "");
Expect(1, 68099, '\P{^-_IS Kharoshthi}', "");
Expect(0, 68095, '\p{-_IS Kharoshthi}', "");
Expect(1, 68095, '\p{^-_IS Kharoshthi}', "");
Expect(1, 68095, '\P{-_IS Kharoshthi}', "");
Expect(0, 68095, '\P{^-_IS Kharoshthi}', "");
Error('\p{:=_-Khar}');
Error('\P{:=_-Khar}');
Expect(1, 68099, '\p{khar}', "");
Expect(0, 68099, '\p{^khar}', "");
Expect(0, 68099, '\P{khar}', "");
Expect(1, 68099, '\P{^khar}', "");
Expect(0, 68095, '\p{khar}', "");
Expect(1, 68095, '\p{^khar}', "");
Expect(1, 68095, '\P{khar}', "");
Expect(0, 68095, '\P{^khar}', "");
Expect(1, 68099, '\p{-_khar}', "");
Expect(0, 68099, '\p{^-_khar}', "");
Expect(0, 68099, '\P{-_khar}', "");
Expect(1, 68099, '\P{^-_khar}', "");
Expect(0, 68095, '\p{-_khar}', "");
Expect(1, 68095, '\p{^-_khar}', "");
Expect(1, 68095, '\P{-_khar}', "");
Expect(0, 68095, '\P{^-_khar}', "");
Error('\p{/a/		IS	Khar}');
Error('\P{/a/		IS	Khar}');
Expect(1, 68099, '\p{iskhar}', "");
Expect(0, 68099, '\p{^iskhar}', "");
Expect(0, 68099, '\P{iskhar}', "");
Expect(1, 68099, '\P{^iskhar}', "");
Expect(0, 68095, '\p{iskhar}', "");
Expect(1, 68095, '\p{^iskhar}', "");
Expect(1, 68095, '\P{iskhar}', "");
Expect(0, 68095, '\P{^iskhar}', "");
Expect(1, 68099, '\p{ _IS_Khar}', "");
Expect(0, 68099, '\p{^ _IS_Khar}', "");
Expect(0, 68099, '\P{ _IS_Khar}', "");
Expect(1, 68099, '\P{^ _IS_Khar}', "");
Expect(0, 68095, '\p{ _IS_Khar}', "");
Expect(1, 68095, '\p{^ _IS_Khar}', "");
Expect(1, 68095, '\P{ _IS_Khar}', "");
Expect(0, 68095, '\P{^ _IS_Khar}', "");
Error('\p{ -MATH_SYMBOL:=}');
Error('\P{ -MATH_SYMBOL:=}');
Expect(1, 43, '\p{mathsymbol}', "");
Expect(0, 43, '\p{^mathsymbol}', "");
Expect(0, 43, '\P{mathsymbol}', "");
Expect(1, 43, '\P{^mathsymbol}', "");
Expect(0, 42, '\p{mathsymbol}', "");
Expect(1, 42, '\p{^mathsymbol}', "");
Expect(1, 42, '\P{mathsymbol}', "");
Expect(0, 42, '\P{^mathsymbol}', "");
Expect(1, 43, '\p{-_Math SYMBOL}', "");
Expect(0, 43, '\p{^-_Math SYMBOL}', "");
Expect(0, 43, '\P{-_Math SYMBOL}', "");
Expect(1, 43, '\P{^-_Math SYMBOL}', "");
Expect(0, 42, '\p{-_Math SYMBOL}', "");
Expect(1, 42, '\p{^-_Math SYMBOL}', "");
Expect(1, 42, '\P{-_Math SYMBOL}', "");
Expect(0, 42, '\P{^-_Math SYMBOL}', "");
Error('\p{	Is_MATH_symbol:=}');
Error('\P{	Is_MATH_symbol:=}');
Expect(1, 43, '\p{ismathsymbol}', "");
Expect(0, 43, '\p{^ismathsymbol}', "");
Expect(0, 43, '\P{ismathsymbol}', "");
Expect(1, 43, '\P{^ismathsymbol}', "");
Expect(0, 42, '\p{ismathsymbol}', "");
Expect(1, 42, '\p{^ismathsymbol}', "");
Expect(1, 42, '\P{ismathsymbol}', "");
Expect(0, 42, '\P{^ismathsymbol}', "");
Expect(1, 43, '\p{-	Is_Math	Symbol}', "");
Expect(0, 43, '\p{^-	Is_Math	Symbol}', "");
Expect(0, 43, '\P{-	Is_Math	Symbol}', "");
Expect(1, 43, '\P{^-	Is_Math	Symbol}', "");
Expect(0, 42, '\p{-	Is_Math	Symbol}', "");
Expect(1, 42, '\p{^-	Is_Math	Symbol}', "");
Expect(1, 42, '\P{-	Is_Math	Symbol}', "");
Expect(0, 42, '\P{^-	Is_Math	Symbol}', "");
Error('\p{	 Sm:=}');
Error('\P{	 Sm:=}');
Expect(1, 43, '\p{sm}', "");
Expect(0, 43, '\p{^sm}', "");
Expect(0, 43, '\P{sm}', "");
Expect(1, 43, '\P{^sm}', "");
Expect(0, 42, '\p{sm}', "");
Expect(1, 42, '\p{^sm}', "");
Expect(1, 42, '\P{sm}', "");
Expect(0, 42, '\P{^sm}', "");
Expect(1, 43, '\p{_ Sm}', "");
Expect(0, 43, '\p{^_ Sm}', "");
Expect(0, 43, '\P{_ Sm}', "");
Expect(1, 43, '\P{^_ Sm}', "");
Expect(0, 42, '\p{_ Sm}', "");
Expect(1, 42, '\p{^_ Sm}', "");
Expect(1, 42, '\P{_ Sm}', "");
Expect(0, 42, '\P{^_ Sm}', "");
Error('\p{ Is-Sm:=}');
Error('\P{ Is-Sm:=}');
Expect(1, 43, '\p{issm}', "");
Expect(0, 43, '\p{^issm}', "");
Expect(0, 43, '\P{issm}', "");
Expect(1, 43, '\P{^issm}', "");
Expect(0, 42, '\p{issm}', "");
Expect(1, 42, '\p{^issm}', "");
Expect(1, 42, '\P{issm}', "");
Expect(0, 42, '\P{^issm}', "");
Expect(1, 43, '\p{	IS Sm}', "");
Expect(0, 43, '\p{^	IS Sm}', "");
Expect(0, 43, '\P{	IS Sm}', "");
Expect(1, 43, '\P{^	IS Sm}', "");
Expect(0, 42, '\p{	IS Sm}', "");
Expect(1, 42, '\p{^	IS Sm}', "");
Expect(1, 42, '\P{	IS Sm}', "");
Expect(0, 42, '\P{^	IS Sm}', "");
Error('\p{/a/ 	Tagalog}');
Error('\P{/a/ 	Tagalog}');
Expect(1, 5900, '\p{tagalog}', "");
Expect(0, 5900, '\p{^tagalog}', "");
Expect(0, 5900, '\P{tagalog}', "");
Expect(1, 5900, '\P{^tagalog}', "");
Expect(0, 5887, '\p{tagalog}', "");
Expect(1, 5887, '\p{^tagalog}', "");
Expect(1, 5887, '\P{tagalog}', "");
Expect(0, 5887, '\P{^tagalog}', "");
Expect(1, 5900, '\p{  tagalog}', "");
Expect(0, 5900, '\p{^  tagalog}', "");
Expect(0, 5900, '\P{  tagalog}', "");
Expect(1, 5900, '\P{^  tagalog}', "");
Expect(0, 5887, '\p{  tagalog}', "");
Expect(1, 5887, '\p{^  tagalog}', "");
Expect(1, 5887, '\P{  tagalog}', "");
Expect(0, 5887, '\P{^  tagalog}', "");
Error('\p{ -is	Tagalog/a/}');
Error('\P{ -is	Tagalog/a/}');
Expect(1, 5900, '\p{istagalog}', "");
Expect(0, 5900, '\p{^istagalog}', "");
Expect(0, 5900, '\P{istagalog}', "");
Expect(1, 5900, '\P{^istagalog}', "");
Expect(0, 5887, '\p{istagalog}', "");
Expect(1, 5887, '\p{^istagalog}', "");
Expect(1, 5887, '\P{istagalog}', "");
Expect(0, 5887, '\P{^istagalog}', "");
Expect(1, 5900, '\p{-	IS Tagalog}', "");
Expect(0, 5900, '\p{^-	IS Tagalog}', "");
Expect(0, 5900, '\P{-	IS Tagalog}', "");
Expect(1, 5900, '\P{^-	IS Tagalog}', "");
Expect(0, 5887, '\p{-	IS Tagalog}', "");
Expect(1, 5887, '\p{^-	IS Tagalog}', "");
Expect(1, 5887, '\P{-	IS Tagalog}', "");
Expect(0, 5887, '\P{^-	IS Tagalog}', "");
Error('\p{/a/ _TGLG}');
Error('\P{/a/ _TGLG}');
Expect(1, 5900, '\p{tglg}', "");
Expect(0, 5900, '\p{^tglg}', "");
Expect(0, 5900, '\P{tglg}', "");
Expect(1, 5900, '\P{^tglg}', "");
Expect(0, 5887, '\p{tglg}', "");
Expect(1, 5887, '\p{^tglg}', "");
Expect(1, 5887, '\P{tglg}', "");
Expect(0, 5887, '\P{^tglg}', "");
Expect(1, 5900, '\p{-_tglg}', "");
Expect(0, 5900, '\p{^-_tglg}', "");
Expect(0, 5900, '\P{-_tglg}', "");
Expect(1, 5900, '\P{^-_tglg}', "");
Expect(0, 5887, '\p{-_tglg}', "");
Expect(1, 5887, '\p{^-_tglg}', "");
Expect(1, 5887, '\P{-_tglg}', "");
Expect(0, 5887, '\P{^-_tglg}', "");
Error('\p{- Is_TGLG/a/}');
Error('\P{- Is_TGLG/a/}');
Expect(1, 5900, '\p{istglg}', "");
Expect(0, 5900, '\p{^istglg}', "");
Expect(0, 5900, '\P{istglg}', "");
Expect(1, 5900, '\P{^istglg}', "");
Expect(0, 5887, '\p{istglg}', "");
Expect(1, 5887, '\p{^istglg}', "");
Expect(1, 5887, '\P{istglg}', "");
Expect(0, 5887, '\P{^istglg}', "");
Expect(1, 5900, '\p{-_Is_TGLG}', "");
Expect(0, 5900, '\p{^-_Is_TGLG}', "");
Expect(0, 5900, '\P{-_Is_TGLG}', "");
Expect(1, 5900, '\P{^-_Is_TGLG}', "");
Expect(0, 5887, '\p{-_Is_TGLG}', "");
Expect(1, 5887, '\p{^-_Is_TGLG}', "");
Expect(1, 5887, '\P{-_Is_TGLG}', "");
Expect(0, 5887, '\P{^-_Is_TGLG}', "");
Error('\p{ /a/Syriac}');
Error('\P{ /a/Syriac}');
Expect(1, 1805, '\p{syriac}', "");
Expect(0, 1805, '\p{^syriac}', "");
Expect(0, 1805, '\P{syriac}', "");
Expect(1, 1805, '\P{^syriac}', "");
Expect(0, 1791, '\p{syriac}', "");
Expect(1, 1791, '\p{^syriac}', "");
Expect(1, 1791, '\P{syriac}', "");
Expect(0, 1791, '\P{^syriac}', "");
Expect(1, 1805, '\p{_Syriac}', "");
Expect(0, 1805, '\p{^_Syriac}', "");
Expect(0, 1805, '\P{_Syriac}', "");
Expect(1, 1805, '\P{^_Syriac}', "");
Expect(0, 1791, '\p{_Syriac}', "");
Expect(1, 1791, '\p{^_Syriac}', "");
Expect(1, 1791, '\P{_Syriac}', "");
Expect(0, 1791, '\P{^_Syriac}', "");
Error('\p{:= Is	syriac}');
Error('\P{:= Is	syriac}');
Expect(1, 1805, '\p{issyriac}', "");
Expect(0, 1805, '\p{^issyriac}', "");
Expect(0, 1805, '\P{issyriac}', "");
Expect(1, 1805, '\P{^issyriac}', "");
Expect(0, 1791, '\p{issyriac}', "");
Expect(1, 1791, '\p{^issyriac}', "");
Expect(1, 1791, '\P{issyriac}', "");
Expect(0, 1791, '\P{^issyriac}', "");
Expect(1, 1805, '\p{-Is	Syriac}', "");
Expect(0, 1805, '\p{^-Is	Syriac}', "");
Expect(0, 1805, '\P{-Is	Syriac}', "");
Expect(1, 1805, '\P{^-Is	Syriac}', "");
Expect(0, 1791, '\p{-Is	Syriac}', "");
Expect(1, 1791, '\p{^-Is	Syriac}', "");
Expect(1, 1791, '\P{-Is	Syriac}', "");
Expect(0, 1791, '\P{^-Is	Syriac}', "");
Error('\p{ 	Syrc/a/}');
Error('\P{ 	Syrc/a/}');
Expect(1, 1805, '\p{syrc}', "");
Expect(0, 1805, '\p{^syrc}', "");
Expect(0, 1805, '\P{syrc}', "");
Expect(1, 1805, '\P{^syrc}', "");
Expect(0, 1791, '\p{syrc}', "");
Expect(1, 1791, '\p{^syrc}', "");
Expect(1, 1791, '\P{syrc}', "");
Expect(0, 1791, '\P{^syrc}', "");
Expect(1, 1805, '\p{	Syrc}', "");
Expect(0, 1805, '\p{^	Syrc}', "");
Expect(0, 1805, '\P{	Syrc}', "");
Expect(1, 1805, '\P{^	Syrc}', "");
Expect(0, 1791, '\p{	Syrc}', "");
Expect(1, 1791, '\p{^	Syrc}', "");
Expect(1, 1791, '\P{	Syrc}', "");
Expect(0, 1791, '\P{^	Syrc}', "");
Error('\p{  IS SYRC:=}');
Error('\P{  IS SYRC:=}');
Expect(1, 1805, '\p{issyrc}', "");
Expect(0, 1805, '\p{^issyrc}', "");
Expect(0, 1805, '\P{issyrc}', "");
Expect(1, 1805, '\P{^issyrc}', "");
Expect(0, 1791, '\p{issyrc}', "");
Expect(1, 1791, '\p{^issyrc}', "");
Expect(1, 1791, '\P{issyrc}', "");
Expect(0, 1791, '\P{^issyrc}', "");
Expect(1, 1805, '\p{__Is	syrc}', "");
Expect(0, 1805, '\p{^__Is	syrc}', "");
Expect(0, 1805, '\P{__Is	syrc}', "");
Expect(1, 1805, '\P{^__Is	syrc}', "");
Expect(0, 1791, '\p{__Is	syrc}', "");
Expect(1, 1791, '\p{^__Is	syrc}', "");
Expect(1, 1791, '\P{__Is	syrc}', "");
Expect(0, 1791, '\P{^__Is	syrc}', "");
Error('\p{-_In-Phoenician:=}');
Error('\P{-_In-Phoenician:=}');
Expect(1, 67871, '\p{inphoenician}', "");
Expect(0, 67871, '\p{^inphoenician}', "");
Expect(0, 67871, '\P{inphoenician}', "");
Expect(1, 67871, '\P{^inphoenician}', "");
Expect(0, 67839, '\p{inphoenician}', "");
Expect(1, 67839, '\p{^inphoenician}', "");
Expect(1, 67839, '\P{inphoenician}', "");
Expect(0, 67839, '\P{^inphoenician}', "");
Expect(1, 67871, '\p{	 In-Phoenician}', "");
Expect(0, 67871, '\p{^	 In-Phoenician}', "");
Expect(0, 67871, '\P{	 In-Phoenician}', "");
Expect(1, 67871, '\P{^	 In-Phoenician}', "");
Expect(0, 67839, '\p{	 In-Phoenician}', "");
Expect(1, 67839, '\p{^	 In-Phoenician}', "");
Expect(1, 67839, '\P{	 In-Phoenician}', "");
Expect(0, 67839, '\P{^	 In-Phoenician}', "");
Error('\p{_	PerlWord/a/}');
Error('\P{_	PerlWord/a/}');
Expect(1, 57, '\p{perlword}', "");
Expect(0, 57, '\p{^perlword}', "");
Expect(0, 57, '\P{perlword}', "");
Expect(1, 57, '\P{^perlword}', "");
Expect(0, 47, '\p{perlword}', "");
Expect(1, 47, '\p{^perlword}', "");
Expect(1, 47, '\P{perlword}', "");
Expect(0, 47, '\P{^perlword}', "");
Expect(1, 57, '\p{-_PERLWORD}', "");
Expect(0, 57, '\p{^-_PERLWORD}', "");
Expect(0, 57, '\P{-_PERLWORD}', "");
Expect(1, 57, '\P{^-_PERLWORD}', "");
Expect(0, 47, '\p{-_PERLWORD}', "");
Expect(1, 47, '\p{^-_PERLWORD}', "");
Expect(1, 47, '\P{-_PERLWORD}', "");
Expect(0, 47, '\P{^-_PERLWORD}', "");
Error('\p{-/a/is PERLWORD}');
Error('\P{-/a/is PERLWORD}');
Expect(1, 57, '\p{isperlword}', "");
Expect(0, 57, '\p{^isperlword}', "");
Expect(0, 57, '\P{isperlword}', "");
Expect(1, 57, '\P{^isperlword}', "");
Expect(0, 47, '\p{isperlword}', "");
Expect(1, 47, '\p{^isperlword}', "");
Expect(1, 47, '\P{isperlword}', "");
Expect(0, 47, '\P{^isperlword}', "");
Expect(1, 57, '\p{__Is_PerlWord}', "");
Expect(0, 57, '\p{^__Is_PerlWord}', "");
Expect(0, 57, '\P{__Is_PerlWord}', "");
Expect(1, 57, '\P{^__Is_PerlWord}', "");
Expect(0, 47, '\p{__Is_PerlWord}', "");
Expect(1, 47, '\p{^__Is_PerlWord}', "");
Expect(1, 47, '\P{__Is_PerlWord}', "");
Expect(0, 47, '\P{^__Is_PerlWord}', "");
Error('\p{Halfwidth AndFullwidthFORMS/a/}');
Error('\P{Halfwidth AndFullwidthFORMS/a/}');
Expect(1, 65519, '\p{halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{- HALFWIDTHAND	fullwidthforms}', "");
Expect(0, 65519, '\p{^- HALFWIDTHAND	fullwidthforms}', "");
Expect(0, 65519, '\P{- HALFWIDTHAND	fullwidthforms}', "");
Expect(1, 65519, '\P{^- HALFWIDTHAND	fullwidthforms}', "");
Expect(0, 65279, '\p{- HALFWIDTHAND	fullwidthforms}', "");
Expect(1, 65279, '\p{^- HALFWIDTHAND	fullwidthforms}', "");
Expect(1, 65279, '\P{- HALFWIDTHAND	fullwidthforms}', "");
Expect(0, 65279, '\P{^- HALFWIDTHAND	fullwidthforms}', "");
Error('\p{:=	Is Halfwidth-And	fullwidth forms}');
Error('\P{:=	Is Halfwidth-And	fullwidth forms}');
Expect(1, 65519, '\p{ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(0, 65519, '\p{^ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(0, 65519, '\P{ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(1, 65519, '\P{^ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(0, 65279, '\p{ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(1, 65279, '\p{^ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(1, 65279, '\P{ -Ishalfwidth ANDFULLWIDTHForms}', "");
Expect(0, 65279, '\P{^ -Ishalfwidth ANDFULLWIDTHForms}', "");
Error('\p{In	Halfwidth	And:=Fullwidth_FORMS}');
Error('\P{In	Halfwidth	And:=Fullwidth_FORMS}');
Expect(1, 65519, '\p{inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(0, 65519, '\p{^- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(0, 65519, '\P{- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(1, 65519, '\P{^- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(0, 65279, '\p{- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(1, 65279, '\p{^- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(1, 65279, '\P{- inHALFWIDTHAnd	Fullwidthforms}', "");
Expect(0, 65279, '\P{^- inHALFWIDTHAnd	Fullwidthforms}', "");
Error('\p{	-Ancient/a/Greek-NUMBERS}');
Error('\P{	-Ancient/a/Greek-NUMBERS}');
Expect(1, 65935, '\p{ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^ancientgreeknumbers}', "");
Expect(0, 65935, '\P{ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^ancientgreeknumbers}', "");
Expect(0, 65855, '\p{ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^ancientgreeknumbers}', "");
Expect(1, 65855, '\P{ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^ancientgreeknumbers}', "");
Expect(1, 65935, '\p{-_ancient greek NUMBERS}', "");
Expect(0, 65935, '\p{^-_ancient greek NUMBERS}', "");
Expect(0, 65935, '\P{-_ancient greek NUMBERS}', "");
Expect(1, 65935, '\P{^-_ancient greek NUMBERS}', "");
Expect(0, 65855, '\p{-_ancient greek NUMBERS}', "");
Expect(1, 65855, '\p{^-_ancient greek NUMBERS}', "");
Expect(1, 65855, '\P{-_ancient greek NUMBERS}', "");
Expect(0, 65855, '\P{^-_ancient greek NUMBERS}', "");
Error('\p{_IS ANCIENT Greek:=Numbers}');
Error('\P{_IS ANCIENT Greek:=Numbers}');
Expect(1, 65935, '\p{isancientgreeknumbers}', "");
Expect(0, 65935, '\p{^isancientgreeknumbers}', "");
Expect(0, 65935, '\P{isancientgreeknumbers}', "");
Expect(1, 65935, '\P{^isancientgreeknumbers}', "");
Expect(0, 65855, '\p{isancientgreeknumbers}', "");
Expect(1, 65855, '\p{^isancientgreeknumbers}', "");
Expect(1, 65855, '\P{isancientgreeknumbers}', "");
Expect(0, 65855, '\P{^isancientgreeknumbers}', "");
Expect(1, 65935, '\p{ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(0, 65935, '\p{^ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(0, 65935, '\P{ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(1, 65935, '\P{^ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(0, 65855, '\p{ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(1, 65855, '\p{^ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(1, 65855, '\P{ _Is	ANCIENT-greek	NUMBERS}', "");
Expect(0, 65855, '\P{^ _Is	ANCIENT-greek	NUMBERS}', "");
Error('\p{_-in-Ancient/a/Greek	Numbers}');
Error('\P{_-in-Ancient/a/Greek	Numbers}');
Expect(1, 65935, '\p{inancientgreeknumbers}', "");
Expect(0, 65935, '\p{^inancientgreeknumbers}', "");
Expect(0, 65935, '\P{inancientgreeknumbers}', "");
Expect(1, 65935, '\P{^inancientgreeknumbers}', "");
Expect(0, 65855, '\p{inancientgreeknumbers}', "");
Expect(1, 65855, '\p{^inancientgreeknumbers}', "");
Expect(1, 65855, '\P{inancientgreeknumbers}', "");
Expect(0, 65855, '\P{^inancientgreeknumbers}', "");
Expect(1, 65935, '\p{	in_ancient Greeknumbers}', "");
Expect(0, 65935, '\p{^	in_ancient Greeknumbers}', "");
Expect(0, 65935, '\P{	in_ancient Greeknumbers}', "");
Expect(1, 65935, '\P{^	in_ancient Greeknumbers}', "");
Expect(0, 65855, '\p{	in_ancient Greeknumbers}', "");
Expect(1, 65855, '\p{^	in_ancient Greeknumbers}', "");
Expect(1, 65855, '\P{	in_ancient Greeknumbers}', "");
Expect(0, 65855, '\P{^	in_ancient Greeknumbers}', "");
Error('\p{-_Optical/a/Character	Recognition}');
Error('\P{-_Optical/a/Character	Recognition}');
Expect(1, 9311, '\p{opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{-	OpticalCharacterRecognition}', "");
Expect(0, 9311, '\p{^-	OpticalCharacterRecognition}', "");
Expect(0, 9311, '\P{-	OpticalCharacterRecognition}', "");
Expect(1, 9311, '\P{^-	OpticalCharacterRecognition}', "");
Expect(0, 9279, '\p{-	OpticalCharacterRecognition}', "");
Expect(1, 9279, '\p{^-	OpticalCharacterRecognition}', "");
Expect(1, 9279, '\P{-	OpticalCharacterRecognition}', "");
Expect(0, 9279, '\P{^-	OpticalCharacterRecognition}', "");
Error('\p{- Is Optical Character/a/recognition}');
Error('\P{- Is Optical Character/a/recognition}');
Expect(1, 9311, '\p{isopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^isopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{isopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^isopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{isopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^isopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{isopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^isopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{ ISoptical Character_recognition}', "");
Expect(0, 9311, '\p{^ ISoptical Character_recognition}', "");
Expect(0, 9311, '\P{ ISoptical Character_recognition}', "");
Expect(1, 9311, '\P{^ ISoptical Character_recognition}', "");
Expect(0, 9279, '\p{ ISoptical Character_recognition}', "");
Expect(1, 9279, '\p{^ ISoptical Character_recognition}', "");
Expect(1, 9279, '\P{ ISoptical Character_recognition}', "");
Expect(0, 9279, '\P{^ ISoptical Character_recognition}', "");
Error('\p{	 In	OPTICALCharacter	Recognition:=}');
Error('\P{	 In	OPTICALCharacter	Recognition:=}');
Expect(1, 9311, '\p{inopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^inopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{inopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^inopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{inopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^inopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{inopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^inopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{	 IN-Optical CHARACTER	Recognition}', "");
Expect(0, 9311, '\p{^	 IN-Optical CHARACTER	Recognition}', "");
Expect(0, 9311, '\P{	 IN-Optical CHARACTER	Recognition}', "");
Expect(1, 9311, '\P{^	 IN-Optical CHARACTER	Recognition}', "");
Expect(0, 9279, '\p{	 IN-Optical CHARACTER	Recognition}', "");
Expect(1, 9279, '\p{^	 IN-Optical CHARACTER	Recognition}', "");
Expect(1, 9279, '\P{	 IN-Optical CHARACTER	Recognition}', "");
Expect(0, 9279, '\P{^	 IN-Optical CHARACTER	Recognition}', "");
Error('\p{ limbu:=}');
Error('\P{ limbu:=}');
Expect(1, 6428, '\p{limbu}', "");
Expect(0, 6428, '\p{^limbu}', "");
Expect(0, 6428, '\P{limbu}', "");
Expect(1, 6428, '\P{^limbu}', "");
Expect(0, 6399, '\p{limbu}', "");
Expect(1, 6399, '\p{^limbu}', "");
Expect(1, 6399, '\P{limbu}', "");
Expect(0, 6399, '\P{^limbu}', "");
Expect(1, 6428, '\p{_LIMBU}', "");
Expect(0, 6428, '\p{^_LIMBU}', "");
Expect(0, 6428, '\P{_LIMBU}', "");
Expect(1, 6428, '\P{^_LIMBU}', "");
Expect(0, 6399, '\p{_LIMBU}', "");
Expect(1, 6399, '\p{^_LIMBU}', "");
Expect(1, 6399, '\P{_LIMBU}', "");
Expect(0, 6399, '\P{^_LIMBU}', "");
Error('\p{ :=is-limbu}');
Error('\P{ :=is-limbu}');
Expect(1, 6428, '\p{islimbu}', "");
Expect(0, 6428, '\p{^islimbu}', "");
Expect(0, 6428, '\P{islimbu}', "");
Expect(1, 6428, '\P{^islimbu}', "");
Expect(0, 6399, '\p{islimbu}', "");
Expect(1, 6399, '\p{^islimbu}', "");
Expect(1, 6399, '\P{islimbu}', "");
Expect(0, 6399, '\P{^islimbu}', "");
Expect(1, 6428, '\p{--isLimbu}', "");
Expect(0, 6428, '\p{^--isLimbu}', "");
Expect(0, 6428, '\P{--isLimbu}', "");
Expect(1, 6428, '\P{^--isLimbu}', "");
Expect(0, 6399, '\p{--isLimbu}', "");
Expect(1, 6399, '\p{^--isLimbu}', "");
Expect(1, 6399, '\P{--isLimbu}', "");
Expect(0, 6399, '\P{^--isLimbu}', "");
Error('\p{ _Limb/a/}');
Error('\P{ _Limb/a/}');
Expect(1, 6428, '\p{limb}', "");
Expect(0, 6428, '\p{^limb}', "");
Expect(0, 6428, '\P{limb}', "");
Expect(1, 6428, '\P{^limb}', "");
Expect(0, 6399, '\p{limb}', "");
Expect(1, 6399, '\p{^limb}', "");
Expect(1, 6399, '\P{limb}', "");
Expect(0, 6399, '\P{^limb}', "");
Expect(1, 6428, '\p{	Limb}', "");
Expect(0, 6428, '\p{^	Limb}', "");
Expect(0, 6428, '\P{	Limb}', "");
Expect(1, 6428, '\P{^	Limb}', "");
Expect(0, 6399, '\p{	Limb}', "");
Expect(1, 6399, '\p{^	Limb}', "");
Expect(1, 6399, '\P{	Limb}', "");
Expect(0, 6399, '\P{^	Limb}', "");
Error('\p{	 Is:=limb}');
Error('\P{	 Is:=limb}');
Expect(1, 6428, '\p{islimb}', "");
Expect(0, 6428, '\p{^islimb}', "");
Expect(0, 6428, '\P{islimb}', "");
Expect(1, 6428, '\P{^islimb}', "");
Expect(0, 6399, '\p{islimb}', "");
Expect(1, 6399, '\p{^islimb}', "");
Expect(1, 6399, '\P{islimb}', "");
Expect(0, 6399, '\P{^islimb}', "");
Expect(1, 6428, '\p{ 	IsLIMB}', "");
Expect(0, 6428, '\p{^ 	IsLIMB}', "");
Expect(0, 6428, '\P{ 	IsLIMB}', "");
Expect(1, 6428, '\P{^ 	IsLIMB}', "");
Expect(0, 6399, '\p{ 	IsLIMB}', "");
Expect(1, 6399, '\p{^ 	IsLIMB}', "");
Expect(1, 6399, '\P{ 	IsLIMB}', "");
Expect(0, 6399, '\P{^ 	IsLIMB}', "");
Error('\p{:= TerminalPunctuation}');
Error('\P{:= TerminalPunctuation}');
Expect(1, 33, '\p{terminalpunctuation}', "");
Expect(0, 33, '\p{^terminalpunctuation}', "");
Expect(0, 33, '\P{terminalpunctuation}', "");
Expect(1, 33, '\P{^terminalpunctuation}', "");
Expect(0, 32, '\p{terminalpunctuation}', "");
Expect(1, 32, '\p{^terminalpunctuation}', "");
Expect(1, 32, '\P{terminalpunctuation}', "");
Expect(0, 32, '\P{^terminalpunctuation}', "");
Expect(1, 33, '\p{ TerminalPunctuation}', "");
Expect(0, 33, '\p{^ TerminalPunctuation}', "");
Expect(0, 33, '\P{ TerminalPunctuation}', "");
Expect(1, 33, '\P{^ TerminalPunctuation}', "");
Expect(0, 32, '\p{ TerminalPunctuation}', "");
Expect(1, 32, '\p{^ TerminalPunctuation}', "");
Expect(1, 32, '\P{ TerminalPunctuation}', "");
Expect(0, 32, '\P{^ TerminalPunctuation}', "");
Error('\p{:=	Is-TERMINALPunctuation}');
Error('\P{:=	Is-TERMINALPunctuation}');
Expect(1, 33, '\p{isterminalpunctuation}', "");
Expect(0, 33, '\p{^isterminalpunctuation}', "");
Expect(0, 33, '\P{isterminalpunctuation}', "");
Expect(1, 33, '\P{^isterminalpunctuation}', "");
Expect(0, 32, '\p{isterminalpunctuation}', "");
Expect(1, 32, '\p{^isterminalpunctuation}', "");
Expect(1, 32, '\P{isterminalpunctuation}', "");
Expect(0, 32, '\P{^isterminalpunctuation}', "");
Expect(1, 33, '\p{Is terminal PUNCTUATION}', "");
Expect(0, 33, '\p{^Is terminal PUNCTUATION}', "");
Expect(0, 33, '\P{Is terminal PUNCTUATION}', "");
Expect(1, 33, '\P{^Is terminal PUNCTUATION}', "");
Expect(0, 32, '\p{Is terminal PUNCTUATION}', "");
Expect(1, 32, '\p{^Is terminal PUNCTUATION}', "");
Expect(1, 32, '\P{Is terminal PUNCTUATION}', "");
Expect(0, 32, '\P{^Is terminal PUNCTUATION}', "");
Error('\p{:=	 term}');
Error('\P{:=	 term}');
Expect(1, 33, '\p{term}', "");
Expect(0, 33, '\p{^term}', "");
Expect(0, 33, '\P{term}', "");
Expect(1, 33, '\P{^term}', "");
Expect(0, 32, '\p{term}', "");
Expect(1, 32, '\p{^term}', "");
Expect(1, 32, '\P{term}', "");
Expect(0, 32, '\P{^term}', "");
Expect(1, 33, '\p{_Term}', "");
Expect(0, 33, '\p{^_Term}', "");
Expect(0, 33, '\P{_Term}', "");
Expect(1, 33, '\P{^_Term}', "");
Expect(0, 32, '\p{_Term}', "");
Expect(1, 32, '\p{^_Term}', "");
Expect(1, 32, '\P{_Term}', "");
Expect(0, 32, '\P{^_Term}', "");
Error('\p{	_Isterm/a/}');
Error('\P{	_Isterm/a/}');
Expect(1, 33, '\p{isterm}', "");
Expect(0, 33, '\p{^isterm}', "");
Expect(0, 33, '\P{isterm}', "");
Expect(1, 33, '\P{^isterm}', "");
Expect(0, 32, '\p{isterm}', "");
Expect(1, 32, '\p{^isterm}', "");
Expect(1, 32, '\P{isterm}', "");
Expect(0, 32, '\P{^isterm}', "");
Expect(1, 33, '\p{  Is Term}', "");
Expect(0, 33, '\p{^  Is Term}', "");
Expect(0, 33, '\P{  Is Term}', "");
Expect(1, 33, '\P{^  Is Term}', "");
Expect(0, 32, '\p{  Is Term}', "");
Expect(1, 32, '\p{^  Is Term}', "");
Expect(1, 32, '\P{  Is Term}', "");
Expect(0, 32, '\P{^  Is Term}', "");
Error('\p{/a/Other-Uppercase}');
Error('\P{/a/Other-Uppercase}');
Expect(1, 8559, '\p{otheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^otheruppercase}', 'deprecated');
Expect(0, 8559, '\P{otheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^otheruppercase}', 'deprecated');
Expect(0, 8543, '\p{otheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^otheruppercase}', 'deprecated');
Expect(1, 8543, '\P{otheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^otheruppercase}', 'deprecated');
Expect(1, 8559, '\p{_-other	Uppercase}', 'deprecated');
Expect(0, 8559, '\p{^_-other	Uppercase}', 'deprecated');
Expect(0, 8559, '\P{_-other	Uppercase}', 'deprecated');
Expect(1, 8559, '\P{^_-other	Uppercase}', 'deprecated');
Expect(0, 8543, '\p{_-other	Uppercase}', 'deprecated');
Expect(1, 8543, '\p{^_-other	Uppercase}', 'deprecated');
Expect(1, 8543, '\P{_-other	Uppercase}', 'deprecated');
Expect(0, 8543, '\P{^_-other	Uppercase}', 'deprecated');
Error('\p{	-ISOTHER_uppercase:=}');
Error('\P{	-ISOTHER_uppercase:=}');
Expect(1, 8559, '\p{isotheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^isotheruppercase}', 'deprecated');
Expect(0, 8559, '\P{isotheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^isotheruppercase}', 'deprecated');
Expect(0, 8543, '\p{isotheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^isotheruppercase}', 'deprecated');
Expect(1, 8543, '\P{isotheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^isotheruppercase}', 'deprecated');
Expect(1, 8559, '\p{_isOther uppercase}', 'deprecated');
Expect(0, 8559, '\p{^_isOther uppercase}', 'deprecated');
Expect(0, 8559, '\P{_isOther uppercase}', 'deprecated');
Expect(1, 8559, '\P{^_isOther uppercase}', 'deprecated');
Expect(0, 8543, '\p{_isOther uppercase}', 'deprecated');
Expect(1, 8543, '\p{^_isOther uppercase}', 'deprecated');
Expect(1, 8543, '\P{_isOther uppercase}', 'deprecated');
Expect(0, 8543, '\P{^_isOther uppercase}', 'deprecated');
Error('\p{		OUPPER/a/}');
Error('\P{		OUPPER/a/}');
Expect(1, 8559, '\p{oupper}', 'deprecated');
Expect(0, 8559, '\p{^oupper}', 'deprecated');
Expect(0, 8559, '\P{oupper}', 'deprecated');
Expect(1, 8559, '\P{^oupper}', 'deprecated');
Expect(0, 8543, '\p{oupper}', 'deprecated');
Expect(1, 8543, '\p{^oupper}', 'deprecated');
Expect(1, 8543, '\P{oupper}', 'deprecated');
Expect(0, 8543, '\P{^oupper}', 'deprecated');
Expect(1, 8559, '\p{ oupper}', 'deprecated');
Expect(0, 8559, '\p{^ oupper}', 'deprecated');
Expect(0, 8559, '\P{ oupper}', 'deprecated');
Expect(1, 8559, '\P{^ oupper}', 'deprecated');
Expect(0, 8543, '\p{ oupper}', 'deprecated');
Expect(1, 8543, '\p{^ oupper}', 'deprecated');
Expect(1, 8543, '\P{ oupper}', 'deprecated');
Expect(0, 8543, '\P{^ oupper}', 'deprecated');
Error('\p{ /a/is_OUPPER}');
Error('\P{ /a/is_OUPPER}');
Expect(1, 8559, '\p{isoupper}', 'deprecated');
Expect(0, 8559, '\p{^isoupper}', 'deprecated');
Expect(0, 8559, '\P{isoupper}', 'deprecated');
Expect(1, 8559, '\P{^isoupper}', 'deprecated');
Expect(0, 8543, '\p{isoupper}', 'deprecated');
Expect(1, 8543, '\p{^isoupper}', 'deprecated');
Expect(1, 8543, '\P{isoupper}', 'deprecated');
Expect(0, 8543, '\P{^isoupper}', 'deprecated');
Expect(1, 8559, '\p{-IsOUPPER}', 'deprecated');
Expect(0, 8559, '\p{^-IsOUPPER}', 'deprecated');
Expect(0, 8559, '\P{-IsOUPPER}', 'deprecated');
Expect(1, 8559, '\P{^-IsOUPPER}', 'deprecated');
Expect(0, 8543, '\p{-IsOUPPER}', 'deprecated');
Expect(1, 8543, '\p{^-IsOUPPER}', 'deprecated');
Expect(1, 8543, '\P{-IsOUPPER}', 'deprecated');
Expect(0, 8543, '\P{^-IsOUPPER}', 'deprecated');
Error('\p{	posixpunct/a/}');
Error('\P{	posixpunct/a/}');
Expect(1, 47, '\p{posixpunct}', "");
Expect(0, 47, '\p{^posixpunct}', "");
Expect(0, 47, '\P{posixpunct}', "");
Expect(1, 47, '\P{^posixpunct}', "");
Expect(0, 32, '\p{posixpunct}', "");
Expect(1, 32, '\p{^posixpunct}', "");
Expect(1, 32, '\P{posixpunct}', "");
Expect(0, 32, '\P{^posixpunct}', "");
Expect(1, 47, '\p{	posixpunct}', "");
Expect(0, 47, '\p{^	posixpunct}', "");
Expect(0, 47, '\P{	posixpunct}', "");
Expect(1, 47, '\P{^	posixpunct}', "");
Expect(0, 32, '\p{	posixpunct}', "");
Expect(1, 32, '\p{^	posixpunct}', "");
Expect(1, 32, '\P{	posixpunct}', "");
Expect(0, 32, '\P{^	posixpunct}', "");
Error('\p{:=	_Is_PosixPunct}');
Error('\P{:=	_Is_PosixPunct}');
Expect(1, 47, '\p{isposixpunct}', "");
Expect(0, 47, '\p{^isposixpunct}', "");
Expect(0, 47, '\P{isposixpunct}', "");
Expect(1, 47, '\P{^isposixpunct}', "");
Expect(0, 32, '\p{isposixpunct}', "");
Expect(1, 32, '\p{^isposixpunct}', "");
Expect(1, 32, '\P{isposixpunct}', "");
Expect(0, 32, '\P{^isposixpunct}', "");
Expect(1, 47, '\p{	is posixpunct}', "");
Expect(0, 47, '\p{^	is posixpunct}', "");
Expect(0, 47, '\P{	is posixpunct}', "");
Expect(1, 47, '\P{^	is posixpunct}', "");
Expect(0, 32, '\p{	is posixpunct}', "");
Expect(1, 32, '\p{^	is posixpunct}', "");
Expect(1, 32, '\P{	is posixpunct}', "");
Expect(0, 32, '\P{^	is posixpunct}', "");
Error('\p{-/a/Block Elements}');
Error('\P{-/a/Block Elements}');
Expect(1, 9631, '\p{blockelements}', "");
Expect(0, 9631, '\p{^blockelements}', "");
Expect(0, 9631, '\P{blockelements}', "");
Expect(1, 9631, '\P{^blockelements}', "");
Expect(0, 9599, '\p{blockelements}', "");
Expect(1, 9599, '\p{^blockelements}', "");
Expect(1, 9599, '\P{blockelements}', "");
Expect(0, 9599, '\P{^blockelements}', "");
Expect(1, 9631, '\p{	 blockelements}', "");
Expect(0, 9631, '\p{^	 blockelements}', "");
Expect(0, 9631, '\P{	 blockelements}', "");
Expect(1, 9631, '\P{^	 blockelements}', "");
Expect(0, 9599, '\p{	 blockelements}', "");
Expect(1, 9599, '\p{^	 blockelements}', "");
Expect(1, 9599, '\P{	 blockelements}', "");
Expect(0, 9599, '\P{^	 blockelements}', "");
Error('\p{ 	Is/a/block_Elements}');
Error('\P{ 	Is/a/block_Elements}');
Expect(1, 9631, '\p{isblockelements}', "");
Expect(0, 9631, '\p{^isblockelements}', "");
Expect(0, 9631, '\P{isblockelements}', "");
Expect(1, 9631, '\P{^isblockelements}', "");
Expect(0, 9599, '\p{isblockelements}', "");
Expect(1, 9599, '\p{^isblockelements}', "");
Expect(1, 9599, '\P{isblockelements}', "");
Expect(0, 9599, '\P{^isblockelements}', "");
Expect(1, 9631, '\p{_	Isblock elements}', "");
Expect(0, 9631, '\p{^_	Isblock elements}', "");
Expect(0, 9631, '\P{_	Isblock elements}', "");
Expect(1, 9631, '\P{^_	Isblock elements}', "");
Expect(0, 9599, '\p{_	Isblock elements}', "");
Expect(1, 9599, '\p{^_	Isblock elements}', "");
Expect(1, 9599, '\P{_	Isblock elements}', "");
Expect(0, 9599, '\P{^_	Isblock elements}', "");
Error('\p{-/a/IN-Block-Elements}');
Error('\P{-/a/IN-Block-Elements}');
Expect(1, 9631, '\p{inblockelements}', "");
Expect(0, 9631, '\p{^inblockelements}', "");
Expect(0, 9631, '\P{inblockelements}', "");
Expect(1, 9631, '\P{^inblockelements}', "");
Expect(0, 9599, '\p{inblockelements}', "");
Expect(1, 9599, '\p{^inblockelements}', "");
Expect(1, 9599, '\P{inblockelements}', "");
Expect(0, 9599, '\P{^inblockelements}', "");
Expect(1, 9631, '\p{ in_Block ELEMENTS}', "");
Expect(0, 9631, '\p{^ in_Block ELEMENTS}', "");
Expect(0, 9631, '\P{ in_Block ELEMENTS}', "");
Expect(1, 9631, '\P{^ in_Block ELEMENTS}', "");
Expect(0, 9599, '\p{ in_Block ELEMENTS}', "");
Expect(1, 9599, '\p{^ in_Block ELEMENTS}', "");
Expect(1, 9599, '\P{ in_Block ELEMENTS}', "");
Expect(0, 9599, '\P{^ in_Block ELEMENTS}', "");
Error('\p{:=_	In-Kaithi}');
Error('\P{:=_	In-Kaithi}');
Expect(1, 69839, '\p{inkaithi}', "");
Expect(0, 69839, '\p{^inkaithi}', "");
Expect(0, 69839, '\P{inkaithi}', "");
Expect(1, 69839, '\P{^inkaithi}', "");
Expect(0, 69759, '\p{inkaithi}', "");
Expect(1, 69759, '\p{^inkaithi}', "");
Expect(1, 69759, '\P{inkaithi}', "");
Expect(0, 69759, '\P{^inkaithi}', "");
Expect(1, 69839, '\p{	inKaithi}', "");
Expect(0, 69839, '\p{^	inKaithi}', "");
Expect(0, 69839, '\P{	inKaithi}', "");
Expect(1, 69839, '\P{^	inKaithi}', "");
Expect(0, 69759, '\p{	inKaithi}', "");
Expect(1, 69759, '\p{^	inKaithi}', "");
Expect(1, 69759, '\P{	inKaithi}', "");
Expect(0, 69759, '\P{^	inKaithi}', "");
Error('\p{__Han/a/}');
Error('\P{__Han/a/}');
Expect(1, 11929, '\p{han}', "");
Expect(0, 11929, '\p{^han}', "");
Expect(0, 11929, '\P{han}', "");
Expect(1, 11929, '\P{^han}', "");
Expect(0, 11903, '\p{han}', "");
Expect(1, 11903, '\p{^han}', "");
Expect(1, 11903, '\P{han}', "");
Expect(0, 11903, '\P{^han}', "");
Expect(1, 11929, '\p{--Han}', "");
Expect(0, 11929, '\p{^--Han}', "");
Expect(0, 11929, '\P{--Han}', "");
Expect(1, 11929, '\P{^--Han}', "");
Expect(0, 11903, '\p{--Han}', "");
Expect(1, 11903, '\p{^--Han}', "");
Expect(1, 11903, '\P{--Han}', "");
Expect(0, 11903, '\P{^--Han}', "");
Error('\p{ -is:=HAN}');
Error('\P{ -is:=HAN}');
Expect(1, 11929, '\p{ishan}', "");
Expect(0, 11929, '\p{^ishan}', "");
Expect(0, 11929, '\P{ishan}', "");
Expect(1, 11929, '\P{^ishan}', "");
Expect(0, 11903, '\p{ishan}', "");
Expect(1, 11903, '\p{^ishan}', "");
Expect(1, 11903, '\P{ishan}', "");
Expect(0, 11903, '\P{^ishan}', "");
Expect(1, 11929, '\p{-	Is	HAN}', "");
Expect(0, 11929, '\p{^-	Is	HAN}', "");
Expect(0, 11929, '\P{-	Is	HAN}', "");
Expect(1, 11929, '\P{^-	Is	HAN}', "");
Expect(0, 11903, '\p{-	Is	HAN}', "");
Expect(1, 11903, '\p{^-	Is	HAN}', "");
Expect(1, 11903, '\P{-	Is	HAN}', "");
Expect(0, 11903, '\P{^-	Is	HAN}', "");
Error('\p{_:=hani}');
Error('\P{_:=hani}');
Expect(1, 11929, '\p{hani}', "");
Expect(0, 11929, '\p{^hani}', "");
Expect(0, 11929, '\P{hani}', "");
Expect(1, 11929, '\P{^hani}', "");
Expect(0, 11903, '\p{hani}', "");
Expect(1, 11903, '\p{^hani}', "");
Expect(1, 11903, '\P{hani}', "");
Expect(0, 11903, '\P{^hani}', "");
Expect(1, 11929, '\p{-	hani}', "");
Expect(0, 11929, '\p{^-	hani}', "");
Expect(0, 11929, '\P{-	hani}', "");
Expect(1, 11929, '\P{^-	hani}', "");
Expect(0, 11903, '\p{-	hani}', "");
Expect(1, 11903, '\p{^-	hani}', "");
Expect(1, 11903, '\P{-	hani}', "");
Expect(0, 11903, '\P{^-	hani}', "");
Error('\p{  IS Hani:=}');
Error('\P{  IS Hani:=}');
Expect(1, 11929, '\p{ishani}', "");
Expect(0, 11929, '\p{^ishani}', "");
Expect(0, 11929, '\P{ishani}', "");
Expect(1, 11929, '\P{^ishani}', "");
Expect(0, 11903, '\p{ishani}', "");
Expect(1, 11903, '\p{^ishani}', "");
Expect(1, 11903, '\P{ishani}', "");
Expect(0, 11903, '\P{^ishani}', "");
Expect(1, 11929, '\p{		Is-hani}', "");
Expect(0, 11929, '\p{^		Is-hani}', "");
Expect(0, 11929, '\P{		Is-hani}', "");
Expect(1, 11929, '\P{^		Is-hani}', "");
Expect(0, 11903, '\p{		Is-hani}', "");
Expect(1, 11903, '\p{^		Is-hani}', "");
Expect(1, 11903, '\P{		Is-hani}', "");
Expect(0, 11903, '\P{^		Is-hani}', "");
Error('\p{	/a/Hanunoo}');
Error('\P{	/a/Hanunoo}');
Expect(1, 5940, '\p{hanunoo}', "");
Expect(0, 5940, '\p{^hanunoo}', "");
Expect(0, 5940, '\P{hanunoo}', "");
Expect(1, 5940, '\P{^hanunoo}', "");
Expect(0, 5919, '\p{hanunoo}', "");
Expect(1, 5919, '\p{^hanunoo}', "");
Expect(1, 5919, '\P{hanunoo}', "");
Expect(0, 5919, '\P{^hanunoo}', "");
Expect(1, 5940, '\p{		hanunoo}', "");
Expect(0, 5940, '\p{^		hanunoo}', "");
Expect(0, 5940, '\P{		hanunoo}', "");
Expect(1, 5940, '\P{^		hanunoo}', "");
Expect(0, 5919, '\p{		hanunoo}', "");
Expect(1, 5919, '\p{^		hanunoo}', "");
Expect(1, 5919, '\P{		hanunoo}', "");
Expect(0, 5919, '\P{^		hanunoo}', "");
Error('\p{ /a/Is_HANUNOO}');
Error('\P{ /a/Is_HANUNOO}');
Expect(1, 5940, '\p{ishanunoo}', "");
Expect(0, 5940, '\p{^ishanunoo}', "");
Expect(0, 5940, '\P{ishanunoo}', "");
Expect(1, 5940, '\P{^ishanunoo}', "");
Expect(0, 5919, '\p{ishanunoo}', "");
Expect(1, 5919, '\p{^ishanunoo}', "");
Expect(1, 5919, '\P{ishanunoo}', "");
Expect(0, 5919, '\P{^ishanunoo}', "");
Expect(1, 5940, '\p{Is hanunoo}', "");
Expect(0, 5940, '\p{^Is hanunoo}', "");
Expect(0, 5940, '\P{Is hanunoo}', "");
Expect(1, 5940, '\P{^Is hanunoo}', "");
Expect(0, 5919, '\p{Is hanunoo}', "");
Expect(1, 5919, '\p{^Is hanunoo}', "");
Expect(1, 5919, '\P{Is hanunoo}', "");
Expect(0, 5919, '\P{^Is hanunoo}', "");
Error('\p{-	HANO:=}');
Error('\P{-	HANO:=}');
Expect(1, 5940, '\p{hano}', "");
Expect(0, 5940, '\p{^hano}', "");
Expect(0, 5940, '\P{hano}', "");
Expect(1, 5940, '\P{^hano}', "");
Expect(0, 5919, '\p{hano}', "");
Expect(1, 5919, '\p{^hano}', "");
Expect(1, 5919, '\P{hano}', "");
Expect(0, 5919, '\P{^hano}', "");
Expect(1, 5940, '\p{-	Hano}', "");
Expect(0, 5940, '\p{^-	Hano}', "");
Expect(0, 5940, '\P{-	Hano}', "");
Expect(1, 5940, '\P{^-	Hano}', "");
Expect(0, 5919, '\p{-	Hano}', "");
Expect(1, 5919, '\p{^-	Hano}', "");
Expect(1, 5919, '\P{-	Hano}', "");
Expect(0, 5919, '\P{^-	Hano}', "");
Error('\p{/a/_Is Hano}');
Error('\P{/a/_Is Hano}');
Expect(1, 5940, '\p{ishano}', "");
Expect(0, 5940, '\p{^ishano}', "");
Expect(0, 5940, '\P{ishano}', "");
Expect(1, 5940, '\P{^ishano}', "");
Expect(0, 5919, '\p{ishano}', "");
Expect(1, 5919, '\p{^ishano}', "");
Expect(1, 5919, '\P{ishano}', "");
Expect(0, 5919, '\P{^ishano}', "");
Expect(1, 5940, '\p{_IsHano}', "");
Expect(0, 5940, '\p{^_IsHano}', "");
Expect(0, 5940, '\P{_IsHano}', "");
Expect(1, 5940, '\P{^_IsHano}', "");
Expect(0, 5919, '\p{_IsHano}', "");
Expect(1, 5919, '\p{^_IsHano}', "");
Expect(1, 5919, '\P{_IsHano}', "");
Expect(0, 5919, '\P{^_IsHano}', "");
Error('\p{ IN/a/meetei-mayek}');
Error('\P{ IN/a/meetei-mayek}');
Expect(1, 44031, '\p{inmeeteimayek}', "");
Expect(0, 44031, '\p{^inmeeteimayek}', "");
Expect(0, 44031, '\P{inmeeteimayek}', "");
Expect(1, 44031, '\P{^inmeeteimayek}', "");
Expect(0, 43967, '\p{inmeeteimayek}', "");
Expect(1, 43967, '\p{^inmeeteimayek}', "");
Expect(1, 43967, '\P{inmeeteimayek}', "");
Expect(0, 43967, '\P{^inmeeteimayek}', "");
Expect(1, 44031, '\p{_ Inmeetei-MAYEK}', "");
Expect(0, 44031, '\p{^_ Inmeetei-MAYEK}', "");
Expect(0, 44031, '\P{_ Inmeetei-MAYEK}', "");
Expect(1, 44031, '\P{^_ Inmeetei-MAYEK}', "");
Expect(0, 43967, '\p{_ Inmeetei-MAYEK}', "");
Expect(1, 43967, '\p{^_ Inmeetei-MAYEK}', "");
Expect(1, 43967, '\P{_ Inmeetei-MAYEK}', "");
Expect(0, 43967, '\P{^_ Inmeetei-MAYEK}', "");
Error('\p{/a/--vertspace}');
Error('\P{/a/--vertspace}');
Expect(1, 13, '\p{vertspace}', "");
Expect(0, 13, '\p{^vertspace}', "");
Expect(0, 13, '\P{vertspace}', "");
Expect(1, 13, '\P{^vertspace}', "");
Expect(0, 9, '\p{vertspace}', "");
Expect(1, 9, '\p{^vertspace}', "");
Expect(1, 9, '\P{vertspace}', "");
Expect(0, 9, '\P{^vertspace}', "");
Expect(1, 13, '\p{_-vertspace}', "");
Expect(0, 13, '\p{^_-vertspace}', "");
Expect(0, 13, '\P{_-vertspace}', "");
Expect(1, 13, '\P{^_-vertspace}', "");
Expect(0, 9, '\p{_-vertspace}', "");
Expect(1, 9, '\p{^_-vertspace}', "");
Expect(1, 9, '\P{_-vertspace}', "");
Expect(0, 9, '\P{^_-vertspace}', "");
Error('\p{_/a/IsVertSpace}');
Error('\P{_/a/IsVertSpace}');
Expect(1, 13, '\p{isvertspace}', "");
Expect(0, 13, '\p{^isvertspace}', "");
Expect(0, 13, '\P{isvertspace}', "");
Expect(1, 13, '\P{^isvertspace}', "");
Expect(0, 9, '\p{isvertspace}', "");
Expect(1, 9, '\p{^isvertspace}', "");
Expect(1, 9, '\P{isvertspace}', "");
Expect(0, 9, '\P{^isvertspace}', "");
Expect(1, 13, '\p{_IsVERTSPACE}', "");
Expect(0, 13, '\p{^_IsVERTSPACE}', "");
Expect(0, 13, '\P{_IsVERTSPACE}', "");
Expect(1, 13, '\P{^_IsVERTSPACE}', "");
Expect(0, 9, '\p{_IsVERTSPACE}', "");
Expect(1, 9, '\p{^_IsVERTSPACE}', "");
Expect(1, 9, '\P{_IsVERTSPACE}', "");
Expect(0, 9, '\P{^_IsVERTSPACE}', "");
Error('\p{:=__Letterlike	Symbols}');
Error('\P{:=__Letterlike	Symbols}');
Expect(1, 8527, '\p{letterlikesymbols}', "");
Expect(0, 8527, '\p{^letterlikesymbols}', "");
Expect(0, 8527, '\P{letterlikesymbols}', "");
Expect(1, 8527, '\P{^letterlikesymbols}', "");
Expect(0, 8447, '\p{letterlikesymbols}', "");
Expect(1, 8447, '\p{^letterlikesymbols}', "");
Expect(1, 8447, '\P{letterlikesymbols}', "");
Expect(0, 8447, '\P{^letterlikesymbols}', "");
Expect(1, 8527, '\p{ -letterlike-SYMBOLS}', "");
Expect(0, 8527, '\p{^ -letterlike-SYMBOLS}', "");
Expect(0, 8527, '\P{ -letterlike-SYMBOLS}', "");
Expect(1, 8527, '\P{^ -letterlike-SYMBOLS}', "");
Expect(0, 8447, '\p{ -letterlike-SYMBOLS}', "");
Expect(1, 8447, '\p{^ -letterlike-SYMBOLS}', "");
Expect(1, 8447, '\P{ -letterlike-SYMBOLS}', "");
Expect(0, 8447, '\P{^ -letterlike-SYMBOLS}', "");
Error('\p{ :=IsLetterlike_SYMBOLS}');
Error('\P{ :=IsLetterlike_SYMBOLS}');
Expect(1, 8527, '\p{isletterlikesymbols}', "");
Expect(0, 8527, '\p{^isletterlikesymbols}', "");
Expect(0, 8527, '\P{isletterlikesymbols}', "");
Expect(1, 8527, '\P{^isletterlikesymbols}', "");
Expect(0, 8447, '\p{isletterlikesymbols}', "");
Expect(1, 8447, '\p{^isletterlikesymbols}', "");
Expect(1, 8447, '\P{isletterlikesymbols}', "");
Expect(0, 8447, '\P{^isletterlikesymbols}', "");
Expect(1, 8527, '\p{_is-letterlikesymbols}', "");
Expect(0, 8527, '\p{^_is-letterlikesymbols}', "");
Expect(0, 8527, '\P{_is-letterlikesymbols}', "");
Expect(1, 8527, '\P{^_is-letterlikesymbols}', "");
Expect(0, 8447, '\p{_is-letterlikesymbols}', "");
Expect(1, 8447, '\p{^_is-letterlikesymbols}', "");
Expect(1, 8447, '\P{_is-letterlikesymbols}', "");
Expect(0, 8447, '\P{^_is-letterlikesymbols}', "");
Error('\p{-/a/in Letterlike_Symbols}');
Error('\P{-/a/in Letterlike_Symbols}');
Expect(1, 8527, '\p{inletterlikesymbols}', "");
Expect(0, 8527, '\p{^inletterlikesymbols}', "");
Expect(0, 8527, '\P{inletterlikesymbols}', "");
Expect(1, 8527, '\P{^inletterlikesymbols}', "");
Expect(0, 8447, '\p{inletterlikesymbols}', "");
Expect(1, 8447, '\p{^inletterlikesymbols}', "");
Expect(1, 8447, '\P{inletterlikesymbols}', "");
Expect(0, 8447, '\P{^inletterlikesymbols}', "");
Expect(1, 8527, '\p{- In_Letterlike-symbols}', "");
Expect(0, 8527, '\p{^- In_Letterlike-symbols}', "");
Expect(0, 8527, '\P{- In_Letterlike-symbols}', "");
Expect(1, 8527, '\P{^- In_Letterlike-symbols}', "");
Expect(0, 8447, '\p{- In_Letterlike-symbols}', "");
Expect(1, 8447, '\p{^- In_Letterlike-symbols}', "");
Expect(1, 8447, '\P{- In_Letterlike-symbols}', "");
Expect(0, 8447, '\P{^- In_Letterlike-symbols}', "");
Error('\p{_:=INMONGOLIAN}');
Error('\P{_:=INMONGOLIAN}');
Expect(1, 6319, '\p{inmongolian}', "");
Expect(0, 6319, '\p{^inmongolian}', "");
Expect(0, 6319, '\P{inmongolian}', "");
Expect(1, 6319, '\P{^inmongolian}', "");
Expect(0, 6143, '\p{inmongolian}', "");
Expect(1, 6143, '\p{^inmongolian}', "");
Expect(1, 6143, '\P{inmongolian}', "");
Expect(0, 6143, '\P{^inmongolian}', "");
Expect(1, 6319, '\p{_	In_Mongolian}', "");
Expect(0, 6319, '\p{^_	In_Mongolian}', "");
Expect(0, 6319, '\P{_	In_Mongolian}', "");
Expect(1, 6319, '\P{^_	In_Mongolian}', "");
Expect(0, 6143, '\p{_	In_Mongolian}', "");
Expect(1, 6143, '\p{^_	In_Mongolian}', "");
Expect(1, 6143, '\P{_	In_Mongolian}', "");
Expect(0, 6143, '\P{^_	In_Mongolian}', "");
Error('\p{	-Ideographic/a/}');
Error('\P{	-Ideographic/a/}');
Expect(1, 12295, '\p{ideographic}', "");
Expect(0, 12295, '\p{^ideographic}', "");
Expect(0, 12295, '\P{ideographic}', "");
Expect(1, 12295, '\P{^ideographic}', "");
Expect(0, 12293, '\p{ideographic}', "");
Expect(1, 12293, '\p{^ideographic}', "");
Expect(1, 12293, '\P{ideographic}', "");
Expect(0, 12293, '\P{^ideographic}', "");
Expect(1, 12295, '\p{	-Ideographic}', "");
Expect(0, 12295, '\p{^	-Ideographic}', "");
Expect(0, 12295, '\P{	-Ideographic}', "");
Expect(1, 12295, '\P{^	-Ideographic}', "");
Expect(0, 12293, '\p{	-Ideographic}', "");
Expect(1, 12293, '\p{^	-Ideographic}', "");
Expect(1, 12293, '\P{	-Ideographic}', "");
Expect(0, 12293, '\P{^	-Ideographic}', "");
Error('\p{:=_-Is Ideographic}');
Error('\P{:=_-Is Ideographic}');
Expect(1, 12295, '\p{isideographic}', "");
Expect(0, 12295, '\p{^isideographic}', "");
Expect(0, 12295, '\P{isideographic}', "");
Expect(1, 12295, '\P{^isideographic}', "");
Expect(0, 12293, '\p{isideographic}', "");
Expect(1, 12293, '\p{^isideographic}', "");
Expect(1, 12293, '\P{isideographic}', "");
Expect(0, 12293, '\P{^isideographic}', "");
Expect(1, 12295, '\p{ _is-Ideographic}', "");
Expect(0, 12295, '\p{^ _is-Ideographic}', "");
Expect(0, 12295, '\P{ _is-Ideographic}', "");
Expect(1, 12295, '\P{^ _is-Ideographic}', "");
Expect(0, 12293, '\p{ _is-Ideographic}', "");
Expect(1, 12293, '\p{^ _is-Ideographic}', "");
Expect(1, 12293, '\P{ _is-Ideographic}', "");
Expect(0, 12293, '\P{^ _is-Ideographic}', "");
Error('\p{_/a/Ideo}');
Error('\P{_/a/Ideo}');
Expect(1, 12295, '\p{ideo}', "");
Expect(0, 12295, '\p{^ideo}', "");
Expect(0, 12295, '\P{ideo}', "");
Expect(1, 12295, '\P{^ideo}', "");
Expect(0, 12293, '\p{ideo}', "");
Expect(1, 12293, '\p{^ideo}', "");
Expect(1, 12293, '\P{ideo}', "");
Expect(0, 12293, '\P{^ideo}', "");
Expect(1, 12295, '\p{  Ideo}', "");
Expect(0, 12295, '\p{^  Ideo}', "");
Expect(0, 12295, '\P{  Ideo}', "");
Expect(1, 12295, '\P{^  Ideo}', "");
Expect(0, 12293, '\p{  Ideo}', "");
Expect(1, 12293, '\p{^  Ideo}', "");
Expect(1, 12293, '\P{  Ideo}', "");
Expect(0, 12293, '\P{^  Ideo}', "");
Error('\p{:=ISideo}');
Error('\P{:=ISideo}');
Expect(1, 12295, '\p{isideo}', "");
Expect(0, 12295, '\p{^isideo}', "");
Expect(0, 12295, '\P{isideo}', "");
Expect(1, 12295, '\P{^isideo}', "");
Expect(0, 12293, '\p{isideo}', "");
Expect(1, 12293, '\p{^isideo}', "");
Expect(1, 12293, '\P{isideo}', "");
Expect(0, 12293, '\P{^isideo}', "");
Expect(1, 12295, '\p{	Is Ideo}', "");
Expect(0, 12295, '\p{^	Is Ideo}', "");
Expect(0, 12295, '\P{	Is Ideo}', "");
Expect(1, 12295, '\P{^	Is Ideo}', "");
Expect(0, 12293, '\p{	Is Ideo}', "");
Expect(1, 12293, '\p{^	Is Ideo}', "");
Expect(1, 12293, '\P{	Is Ideo}', "");
Expect(0, 12293, '\P{^	Is Ideo}', "");
Error('\p{_/a/VARIATION_selectors_Supplement}');
Error('\P{_/a/VARIATION_selectors_Supplement}');
Expect(1, 917999, '\p{variationselectorssupplement}', "");
Expect(0, 917999, '\p{^variationselectorssupplement}', "");
Expect(0, 917999, '\P{variationselectorssupplement}', "");
Expect(1, 917999, '\P{^variationselectorssupplement}', "");
Expect(0, 917759, '\p{variationselectorssupplement}', "");
Expect(1, 917759, '\p{^variationselectorssupplement}', "");
Expect(1, 917759, '\P{variationselectorssupplement}', "");
Expect(0, 917759, '\P{^variationselectorssupplement}', "");
Expect(1, 917999, '\p{- VARIATION selectors_Supplement}', "");
Expect(0, 917999, '\p{^- VARIATION selectors_Supplement}', "");
Expect(0, 917999, '\P{- VARIATION selectors_Supplement}', "");
Expect(1, 917999, '\P{^- VARIATION selectors_Supplement}', "");
Expect(0, 917759, '\p{- VARIATION selectors_Supplement}', "");
Expect(1, 917759, '\p{^- VARIATION selectors_Supplement}', "");
Expect(1, 917759, '\P{- VARIATION selectors_Supplement}', "");
Expect(0, 917759, '\P{^- VARIATION selectors_Supplement}', "");
Error('\p{	-Is_variation/a/selectors	Supplement}');
Error('\P{	-Is_variation/a/selectors	Supplement}');
Expect(1, 917999, '\p{isvariationselectorssupplement}', "");
Expect(0, 917999, '\p{^isvariationselectorssupplement}', "");
Expect(0, 917999, '\P{isvariationselectorssupplement}', "");
Expect(1, 917999, '\P{^isvariationselectorssupplement}', "");
Expect(0, 917759, '\p{isvariationselectorssupplement}', "");
Expect(1, 917759, '\p{^isvariationselectorssupplement}', "");
Expect(1, 917759, '\P{isvariationselectorssupplement}', "");
Expect(0, 917759, '\P{^isvariationselectorssupplement}', "");
Expect(1, 917999, '\p{ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(0, 917999, '\p{^ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(0, 917999, '\P{ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(1, 917999, '\P{^ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(0, 917759, '\p{ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(1, 917759, '\p{^ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(1, 917759, '\P{ _IS_Variation_selectors_SUPPLEMENT}', "");
Expect(0, 917759, '\P{^ _IS_Variation_selectors_SUPPLEMENT}', "");
Error('\p{_ In:=VariationSELECTORSSupplement}');
Error('\P{_ In:=VariationSELECTORSSupplement}');
Expect(1, 917999, '\p{invariationselectorssupplement}', "");
Expect(0, 917999, '\p{^invariationselectorssupplement}', "");
Expect(0, 917999, '\P{invariationselectorssupplement}', "");
Expect(1, 917999, '\P{^invariationselectorssupplement}', "");
Expect(0, 917759, '\p{invariationselectorssupplement}', "");
Expect(1, 917759, '\p{^invariationselectorssupplement}', "");
Expect(1, 917759, '\P{invariationselectorssupplement}', "");
Expect(0, 917759, '\P{^invariationselectorssupplement}', "");
Expect(1, 917999, '\p{-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(0, 917999, '\p{^-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(0, 917999, '\P{-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(1, 917999, '\P{^-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(0, 917759, '\p{-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(1, 917759, '\p{^-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(1, 917759, '\P{-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Expect(0, 917759, '\P{^-	IN-VARIATION_SELECTORS_SUPPLEMENT}', "");
Error('\p{_-in:=Thaana}');
Error('\P{_-in:=Thaana}');
Expect(1, 1983, '\p{inthaana}', "");
Expect(0, 1983, '\p{^inthaana}', "");
Expect(0, 1983, '\P{inthaana}', "");
Expect(1, 1983, '\P{^inthaana}', "");
Expect(0, 1919, '\p{inthaana}', "");
Expect(1, 1919, '\p{^inthaana}', "");
Expect(1, 1919, '\P{inthaana}', "");
Expect(0, 1919, '\P{^inthaana}', "");
Expect(1, 1983, '\p{ IN	thaana}', "");
Expect(0, 1983, '\p{^ IN	thaana}', "");
Expect(0, 1983, '\P{ IN	thaana}', "");
Expect(1, 1983, '\P{^ IN	thaana}', "");
Expect(0, 1919, '\p{ IN	thaana}', "");
Expect(1, 1919, '\p{^ IN	thaana}', "");
Expect(1, 1919, '\P{ IN	thaana}', "");
Expect(0, 1919, '\P{^ IN	thaana}', "");
Error('\p{/a/ 	SUPPLEMENTAL	Arrowsa}');
Error('\P{/a/ 	SUPPLEMENTAL	Arrowsa}');
Expect(1, 10239, '\p{supplementalarrowsa}', "");
Expect(0, 10239, '\p{^supplementalarrowsa}', "");
Expect(0, 10239, '\P{supplementalarrowsa}', "");
Expect(1, 10239, '\P{^supplementalarrowsa}', "");
Expect(0, 10223, '\p{supplementalarrowsa}', "");
Expect(1, 10223, '\p{^supplementalarrowsa}', "");
Expect(1, 10223, '\P{supplementalarrowsa}', "");
Expect(0, 10223, '\P{^supplementalarrowsa}', "");
Expect(1, 10239, '\p{-Supplemental_ArrowsA}', "");
Expect(0, 10239, '\p{^-Supplemental_ArrowsA}', "");
Expect(0, 10239, '\P{-Supplemental_ArrowsA}', "");
Expect(1, 10239, '\P{^-Supplemental_ArrowsA}', "");
Expect(0, 10223, '\p{-Supplemental_ArrowsA}', "");
Expect(1, 10223, '\p{^-Supplemental_ArrowsA}', "");
Expect(1, 10223, '\P{-Supplemental_ArrowsA}', "");
Expect(0, 10223, '\P{^-Supplemental_ArrowsA}', "");
Error('\p{  Is Supplemental/a/Arrows A}');
Error('\P{  Is Supplemental/a/Arrows A}');
Expect(1, 10239, '\p{issupplementalarrowsa}', "");
Expect(0, 10239, '\p{^issupplementalarrowsa}', "");
Expect(0, 10239, '\P{issupplementalarrowsa}', "");
Expect(1, 10239, '\P{^issupplementalarrowsa}', "");
Expect(0, 10223, '\p{issupplementalarrowsa}', "");
Expect(1, 10223, '\p{^issupplementalarrowsa}', "");
Expect(1, 10223, '\P{issupplementalarrowsa}', "");
Expect(0, 10223, '\P{^issupplementalarrowsa}', "");
Expect(1, 10239, '\p{	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(0, 10239, '\p{^	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(0, 10239, '\P{	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(1, 10239, '\P{^	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(0, 10223, '\p{	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(1, 10223, '\p{^	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(1, 10223, '\P{	Is_SUPPLEMENTAL	arrows-A}', "");
Expect(0, 10223, '\P{^	Is_SUPPLEMENTAL	arrows-A}', "");
Error('\p{ In	Supplemental-Arrows:=A}');
Error('\P{ In	Supplemental-Arrows:=A}');
Expect(1, 10239, '\p{insupplementalarrowsa}', "");
Expect(0, 10239, '\p{^insupplementalarrowsa}', "");
Expect(0, 10239, '\P{insupplementalarrowsa}', "");
Expect(1, 10239, '\P{^insupplementalarrowsa}', "");
Expect(0, 10223, '\p{insupplementalarrowsa}', "");
Expect(1, 10223, '\p{^insupplementalarrowsa}', "");
Expect(1, 10223, '\P{insupplementalarrowsa}', "");
Expect(0, 10223, '\P{^insupplementalarrowsa}', "");
Expect(1, 10239, '\p{_	INsupplemental_Arrows A}', "");
Expect(0, 10239, '\p{^_	INsupplemental_Arrows A}', "");
Expect(0, 10239, '\P{_	INsupplemental_Arrows A}', "");
Expect(1, 10239, '\P{^_	INsupplemental_Arrows A}', "");
Expect(0, 10223, '\p{_	INsupplemental_Arrows A}', "");
Expect(1, 10223, '\p{^_	INsupplemental_Arrows A}', "");
Expect(1, 10223, '\P{_	INsupplemental_Arrows A}', "");
Expect(0, 10223, '\P{^_	INsupplemental_Arrows A}', "");
Error('\p{_:=Changes-When_Uppercased}');
Error('\P{_:=Changes-When_Uppercased}');
Expect(1, 122, '\p{changeswhenuppercased}', "");
Expect(0, 122, '\p{^changeswhenuppercased}', "");
Expect(0, 122, '\P{changeswhenuppercased}', "");
Expect(1, 122, '\P{^changeswhenuppercased}', "");
Expect(0, 96, '\p{changeswhenuppercased}', "");
Expect(1, 96, '\p{^changeswhenuppercased}', "");
Expect(1, 96, '\P{changeswhenuppercased}', "");
Expect(0, 96, '\P{^changeswhenuppercased}', "");
Expect(1, 122, '\p{-	CHANGES	When_uppercased}', "");
Expect(0, 122, '\p{^-	CHANGES	When_uppercased}', "");
Expect(0, 122, '\P{-	CHANGES	When_uppercased}', "");
Expect(1, 122, '\P{^-	CHANGES	When_uppercased}', "");
Expect(0, 96, '\p{-	CHANGES	When_uppercased}', "");
Expect(1, 96, '\p{^-	CHANGES	When_uppercased}', "");
Expect(1, 96, '\P{-	CHANGES	When_uppercased}', "");
Expect(0, 96, '\P{^-	CHANGES	When_uppercased}', "");
Error('\p{/a/	IsCHANGES-When-UPPERCASED}');
Error('\P{/a/	IsCHANGES-When-UPPERCASED}');
Expect(1, 122, '\p{ischangeswhenuppercased}', "");
Expect(0, 122, '\p{^ischangeswhenuppercased}', "");
Expect(0, 122, '\P{ischangeswhenuppercased}', "");
Expect(1, 122, '\P{^ischangeswhenuppercased}', "");
Expect(0, 96, '\p{ischangeswhenuppercased}', "");
Expect(1, 96, '\p{^ischangeswhenuppercased}', "");
Expect(1, 96, '\P{ischangeswhenuppercased}', "");
Expect(0, 96, '\P{^ischangeswhenuppercased}', "");
Expect(1, 122, '\p{-	isCHANGES	WHENUppercased}', "");
Expect(0, 122, '\p{^-	isCHANGES	WHENUppercased}', "");
Expect(0, 122, '\P{-	isCHANGES	WHENUppercased}', "");
Expect(1, 122, '\P{^-	isCHANGES	WHENUppercased}', "");
Expect(0, 96, '\p{-	isCHANGES	WHENUppercased}', "");
Expect(1, 96, '\p{^-	isCHANGES	WHENUppercased}', "");
Expect(1, 96, '\P{-	isCHANGES	WHENUppercased}', "");
Expect(0, 96, '\P{^-	isCHANGES	WHENUppercased}', "");
Error('\p{:=_-CWU}');
Error('\P{:=_-CWU}');
Expect(1, 122, '\p{cwu}', "");
Expect(0, 122, '\p{^cwu}', "");
Expect(0, 122, '\P{cwu}', "");
Expect(1, 122, '\P{^cwu}', "");
Expect(0, 96, '\p{cwu}', "");
Expect(1, 96, '\p{^cwu}', "");
Expect(1, 96, '\P{cwu}', "");
Expect(0, 96, '\P{^cwu}', "");
Expect(1, 122, '\p{_-CWU}', "");
Expect(0, 122, '\p{^_-CWU}', "");
Expect(0, 122, '\P{_-CWU}', "");
Expect(1, 122, '\P{^_-CWU}', "");
Expect(0, 96, '\p{_-CWU}', "");
Expect(1, 96, '\p{^_-CWU}', "");
Expect(1, 96, '\P{_-CWU}', "");
Expect(0, 96, '\P{^_-CWU}', "");
Error('\p{/a/  Is_cwu}');
Error('\P{/a/  Is_cwu}');
Expect(1, 122, '\p{iscwu}', "");
Expect(0, 122, '\p{^iscwu}', "");
Expect(0, 122, '\P{iscwu}', "");
Expect(1, 122, '\P{^iscwu}', "");
Expect(0, 96, '\p{iscwu}', "");
Expect(1, 96, '\p{^iscwu}', "");
Expect(1, 96, '\P{iscwu}', "");
Expect(0, 96, '\P{^iscwu}', "");
Expect(1, 122, '\p{ _iscwu}', "");
Expect(0, 122, '\p{^ _iscwu}', "");
Expect(0, 122, '\P{ _iscwu}', "");
Expect(1, 122, '\P{^ _iscwu}', "");
Expect(0, 96, '\p{ _iscwu}', "");
Expect(1, 96, '\p{^ _iscwu}', "");
Expect(1, 96, '\P{ _iscwu}', "");
Expect(0, 96, '\P{^ _iscwu}', "");
Error('\p{-:=In syriac}');
Error('\P{-:=In syriac}');
Expect(1, 1871, '\p{insyriac}', "");
Expect(0, 1871, '\p{^insyriac}', "");
Expect(0, 1871, '\P{insyriac}', "");
Expect(1, 1871, '\P{^insyriac}', "");
Expect(0, 1791, '\p{insyriac}', "");
Expect(1, 1791, '\p{^insyriac}', "");
Expect(1, 1791, '\P{insyriac}', "");
Expect(0, 1791, '\P{^insyriac}', "");
Expect(1, 1871, '\p{		in Syriac}', "");
Expect(0, 1871, '\p{^		in Syriac}', "");
Expect(0, 1871, '\P{		in Syriac}', "");
Expect(1, 1871, '\P{^		in Syriac}', "");
Expect(0, 1791, '\p{		in Syriac}', "");
Expect(1, 1791, '\p{^		in Syriac}', "");
Expect(1, 1791, '\P{		in Syriac}', "");
Expect(0, 1791, '\P{^		in Syriac}', "");
Error('\p{--Ethiopic:=Extended}');
Error('\P{--Ethiopic:=Extended}');
Expect(1, 11743, '\p{ethiopicextended}', "");
Expect(0, 11743, '\p{^ethiopicextended}', "");
Expect(0, 11743, '\P{ethiopicextended}', "");
Expect(1, 11743, '\P{^ethiopicextended}', "");
Expect(0, 11647, '\p{ethiopicextended}', "");
Expect(1, 11647, '\p{^ethiopicextended}', "");
Expect(1, 11647, '\P{ethiopicextended}', "");
Expect(0, 11647, '\P{^ethiopicextended}', "");
Expect(1, 11743, '\p{-Ethiopic_Extended}', "");
Expect(0, 11743, '\p{^-Ethiopic_Extended}', "");
Expect(0, 11743, '\P{-Ethiopic_Extended}', "");
Expect(1, 11743, '\P{^-Ethiopic_Extended}', "");
Expect(0, 11647, '\p{-Ethiopic_Extended}', "");
Expect(1, 11647, '\p{^-Ethiopic_Extended}', "");
Expect(1, 11647, '\P{-Ethiopic_Extended}', "");
Expect(0, 11647, '\P{^-Ethiopic_Extended}', "");
Error('\p{__IsEthiopic:=EXTENDED}');
Error('\P{__IsEthiopic:=EXTENDED}');
Expect(1, 11743, '\p{isethiopicextended}', "");
Expect(0, 11743, '\p{^isethiopicextended}', "");
Expect(0, 11743, '\P{isethiopicextended}', "");
Expect(1, 11743, '\P{^isethiopicextended}', "");
Expect(0, 11647, '\p{isethiopicextended}', "");
Expect(1, 11647, '\p{^isethiopicextended}', "");
Expect(1, 11647, '\P{isethiopicextended}', "");
Expect(0, 11647, '\P{^isethiopicextended}', "");
Expect(1, 11743, '\p{		Is_EthiopicEXTENDED}', "");
Expect(0, 11743, '\p{^		Is_EthiopicEXTENDED}', "");
Expect(0, 11743, '\P{		Is_EthiopicEXTENDED}', "");
Expect(1, 11743, '\P{^		Is_EthiopicEXTENDED}', "");
Expect(0, 11647, '\p{		Is_EthiopicEXTENDED}', "");
Expect(1, 11647, '\p{^		Is_EthiopicEXTENDED}', "");
Expect(1, 11647, '\P{		Is_EthiopicEXTENDED}', "");
Expect(0, 11647, '\P{^		Is_EthiopicEXTENDED}', "");
Error('\p{:=-_IN_ethiopicExtended}');
Error('\P{:=-_IN_ethiopicExtended}');
Expect(1, 11743, '\p{inethiopicextended}', "");
Expect(0, 11743, '\p{^inethiopicextended}', "");
Expect(0, 11743, '\P{inethiopicextended}', "");
Expect(1, 11743, '\P{^inethiopicextended}', "");
Expect(0, 11647, '\p{inethiopicextended}', "");
Expect(1, 11647, '\p{^inethiopicextended}', "");
Expect(1, 11647, '\P{inethiopicextended}', "");
Expect(0, 11647, '\P{^inethiopicextended}', "");
Expect(1, 11743, '\p{	_in	ethiopic_extended}', "");
Expect(0, 11743, '\p{^	_in	ethiopic_extended}', "");
Expect(0, 11743, '\P{	_in	ethiopic_extended}', "");
Expect(1, 11743, '\P{^	_in	ethiopic_extended}', "");
Expect(0, 11647, '\p{	_in	ethiopic_extended}', "");
Expect(1, 11647, '\p{^	_in	ethiopic_extended}', "");
Expect(1, 11647, '\P{	_in	ethiopic_extended}', "");
Expect(0, 11647, '\P{^	_in	ethiopic_extended}', "");
Error('\p{-/a/Phoenician}');
Error('\P{-/a/Phoenician}');
Expect(1, 67867, '\p{phoenician}', "");
Expect(0, 67867, '\p{^phoenician}', "");
Expect(0, 67867, '\P{phoenician}', "");
Expect(1, 67867, '\P{^phoenician}', "");
Expect(0, 67839, '\p{phoenician}', "");
Expect(1, 67839, '\p{^phoenician}', "");
Expect(1, 67839, '\P{phoenician}', "");
Expect(0, 67839, '\P{^phoenician}', "");
Expect(1, 67867, '\p{ _Phoenician}', "");
Expect(0, 67867, '\p{^ _Phoenician}', "");
Expect(0, 67867, '\P{ _Phoenician}', "");
Expect(1, 67867, '\P{^ _Phoenician}', "");
Expect(0, 67839, '\p{ _Phoenician}', "");
Expect(1, 67839, '\p{^ _Phoenician}', "");
Expect(1, 67839, '\P{ _Phoenician}', "");
Expect(0, 67839, '\P{^ _Phoenician}', "");
Error('\p{ :=Isphoenician}');
Error('\P{ :=Isphoenician}');
Expect(1, 67867, '\p{isphoenician}', "");
Expect(0, 67867, '\p{^isphoenician}', "");
Expect(0, 67867, '\P{isphoenician}', "");
Expect(1, 67867, '\P{^isphoenician}', "");
Expect(0, 67839, '\p{isphoenician}', "");
Expect(1, 67839, '\p{^isphoenician}', "");
Expect(1, 67839, '\P{isphoenician}', "");
Expect(0, 67839, '\P{^isphoenician}', "");
Expect(1, 67867, '\p{_ is Phoenician}', "");
Expect(0, 67867, '\p{^_ is Phoenician}', "");
Expect(0, 67867, '\P{_ is Phoenician}', "");
Expect(1, 67867, '\P{^_ is Phoenician}', "");
Expect(0, 67839, '\p{_ is Phoenician}', "");
Expect(1, 67839, '\p{^_ is Phoenician}', "");
Expect(1, 67839, '\P{_ is Phoenician}', "");
Expect(0, 67839, '\P{^_ is Phoenician}', "");
Error('\p{/a/__Phnx}');
Error('\P{/a/__Phnx}');
Expect(1, 67867, '\p{phnx}', "");
Expect(0, 67867, '\p{^phnx}', "");
Expect(0, 67867, '\P{phnx}', "");
Expect(1, 67867, '\P{^phnx}', "");
Expect(0, 67839, '\p{phnx}', "");
Expect(1, 67839, '\p{^phnx}', "");
Expect(1, 67839, '\P{phnx}', "");
Expect(0, 67839, '\P{^phnx}', "");
Expect(1, 67867, '\p{	Phnx}', "");
Expect(0, 67867, '\p{^	Phnx}', "");
Expect(0, 67867, '\P{	Phnx}', "");
Expect(1, 67867, '\P{^	Phnx}', "");
Expect(0, 67839, '\p{	Phnx}', "");
Expect(1, 67839, '\p{^	Phnx}', "");
Expect(1, 67839, '\P{	Phnx}', "");
Expect(0, 67839, '\P{^	Phnx}', "");
Error('\p{-IS	Phnx/a/}');
Error('\P{-IS	Phnx/a/}');
Expect(1, 67867, '\p{isphnx}', "");
Expect(0, 67867, '\p{^isphnx}', "");
Expect(0, 67867, '\P{isphnx}', "");
Expect(1, 67867, '\P{^isphnx}', "");
Expect(0, 67839, '\p{isphnx}', "");
Expect(1, 67839, '\p{^isphnx}', "");
Expect(1, 67839, '\P{isphnx}', "");
Expect(0, 67839, '\P{^isphnx}', "");
Expect(1, 67867, '\p{_Is_PHNX}', "");
Expect(0, 67867, '\p{^_Is_PHNX}', "");
Expect(0, 67867, '\P{_Is_PHNX}', "");
Expect(1, 67867, '\P{^_Is_PHNX}', "");
Expect(0, 67839, '\p{_Is_PHNX}', "");
Expect(1, 67839, '\p{^_Is_PHNX}', "");
Expect(1, 67839, '\P{_Is_PHNX}', "");
Expect(0, 67839, '\P{^_Is_PHNX}', "");
Error('\p{- Myanmar/a/extended	A}');
Error('\P{- Myanmar/a/extended	A}');
Expect(1, 43647, '\p{myanmarextendeda}', "");
Expect(0, 43647, '\p{^myanmarextendeda}', "");
Expect(0, 43647, '\P{myanmarextendeda}', "");
Expect(1, 43647, '\P{^myanmarextendeda}', "");
Expect(0, 43615, '\p{myanmarextendeda}', "");
Expect(1, 43615, '\p{^myanmarextendeda}', "");
Expect(1, 43615, '\P{myanmarextendeda}', "");
Expect(0, 43615, '\P{^myanmarextendeda}', "");
Expect(1, 43647, '\p{-_MYANMAR	Extended_A}', "");
Expect(0, 43647, '\p{^-_MYANMAR	Extended_A}', "");
Expect(0, 43647, '\P{-_MYANMAR	Extended_A}', "");
Expect(1, 43647, '\P{^-_MYANMAR	Extended_A}', "");
Expect(0, 43615, '\p{-_MYANMAR	Extended_A}', "");
Expect(1, 43615, '\p{^-_MYANMAR	Extended_A}', "");
Expect(1, 43615, '\P{-_MYANMAR	Extended_A}', "");
Expect(0, 43615, '\P{^-_MYANMAR	Extended_A}', "");
Error('\p{ -is:=Myanmar	Extended-A}');
Error('\P{ -is:=Myanmar	Extended-A}');
Expect(1, 43647, '\p{ismyanmarextendeda}', "");
Expect(0, 43647, '\p{^ismyanmarextendeda}', "");
Expect(0, 43647, '\P{ismyanmarextendeda}', "");
Expect(1, 43647, '\P{^ismyanmarextendeda}', "");
Expect(0, 43615, '\p{ismyanmarextendeda}', "");
Expect(1, 43615, '\p{^ismyanmarextendeda}', "");
Expect(1, 43615, '\P{ismyanmarextendeda}', "");
Expect(0, 43615, '\P{^ismyanmarextendeda}', "");
Expect(1, 43647, '\p{ is-MYANMARExtended_A}', "");
Expect(0, 43647, '\p{^ is-MYANMARExtended_A}', "");
Expect(0, 43647, '\P{ is-MYANMARExtended_A}', "");
Expect(1, 43647, '\P{^ is-MYANMARExtended_A}', "");
Expect(0, 43615, '\p{ is-MYANMARExtended_A}', "");
Expect(1, 43615, '\p{^ is-MYANMARExtended_A}', "");
Expect(1, 43615, '\P{ is-MYANMARExtended_A}', "");
Expect(0, 43615, '\P{^ is-MYANMARExtended_A}', "");
Error('\p{	in/a/Myanmar-EXTENDED_a}');
Error('\P{	in/a/Myanmar-EXTENDED_a}');
Expect(1, 43647, '\p{inmyanmarextendeda}', "");
Expect(0, 43647, '\p{^inmyanmarextendeda}', "");
Expect(0, 43647, '\P{inmyanmarextendeda}', "");
Expect(1, 43647, '\P{^inmyanmarextendeda}', "");
Expect(0, 43615, '\p{inmyanmarextendeda}', "");
Expect(1, 43615, '\p{^inmyanmarextendeda}', "");
Expect(1, 43615, '\P{inmyanmarextendeda}', "");
Expect(0, 43615, '\P{^inmyanmarextendeda}', "");
Expect(1, 43647, '\p{ In	myanmar_extended	A}', "");
Expect(0, 43647, '\p{^ In	myanmar_extended	A}', "");
Expect(0, 43647, '\P{ In	myanmar_extended	A}', "");
Expect(1, 43647, '\P{^ In	myanmar_extended	A}', "");
Expect(0, 43615, '\p{ In	myanmar_extended	A}', "");
Expect(1, 43615, '\p{^ In	myanmar_extended	A}', "");
Expect(1, 43615, '\P{ In	myanmar_extended	A}', "");
Expect(0, 43615, '\P{^ In	myanmar_extended	A}', "");
Error('\p{:=	Runic}');
Error('\P{:=	Runic}');
Expect(1, 5866, '\p{runic}', "");
Expect(0, 5866, '\p{^runic}', "");
Expect(0, 5866, '\P{runic}', "");
Expect(1, 5866, '\P{^runic}', "");
Expect(0, 5791, '\p{runic}', "");
Expect(1, 5791, '\p{^runic}', "");
Expect(1, 5791, '\P{runic}', "");
Expect(0, 5791, '\P{^runic}', "");
Expect(1, 5866, '\p{- runic}', "");
Expect(0, 5866, '\p{^- runic}', "");
Expect(0, 5866, '\P{- runic}', "");
Expect(1, 5866, '\P{^- runic}', "");
Expect(0, 5791, '\p{- runic}', "");
Expect(1, 5791, '\p{^- runic}', "");
Expect(1, 5791, '\P{- runic}', "");
Expect(0, 5791, '\P{^- runic}', "");
Error('\p{		Is:=runic}');
Error('\P{		Is:=runic}');
Expect(1, 5866, '\p{isrunic}', "");
Expect(0, 5866, '\p{^isrunic}', "");
Expect(0, 5866, '\P{isrunic}', "");
Expect(1, 5866, '\P{^isrunic}', "");
Expect(0, 5791, '\p{isrunic}', "");
Expect(1, 5791, '\p{^isrunic}', "");
Expect(1, 5791, '\P{isrunic}', "");
Expect(0, 5791, '\P{^isrunic}', "");
Expect(1, 5866, '\p{ 	IS	RUNIC}', "");
Expect(0, 5866, '\p{^ 	IS	RUNIC}', "");
Expect(0, 5866, '\P{ 	IS	RUNIC}', "");
Expect(1, 5866, '\P{^ 	IS	RUNIC}', "");
Expect(0, 5791, '\p{ 	IS	RUNIC}', "");
Expect(1, 5791, '\p{^ 	IS	RUNIC}', "");
Expect(1, 5791, '\P{ 	IS	RUNIC}', "");
Expect(0, 5791, '\P{^ 	IS	RUNIC}', "");
Error('\p{	:=RUNR}');
Error('\P{	:=RUNR}');
Expect(1, 5866, '\p{runr}', "");
Expect(0, 5866, '\p{^runr}', "");
Expect(0, 5866, '\P{runr}', "");
Expect(1, 5866, '\P{^runr}', "");
Expect(0, 5791, '\p{runr}', "");
Expect(1, 5791, '\p{^runr}', "");
Expect(1, 5791, '\P{runr}', "");
Expect(0, 5791, '\P{^runr}', "");
Expect(1, 5866, '\p{ _runr}', "");
Expect(0, 5866, '\p{^ _runr}', "");
Expect(0, 5866, '\P{ _runr}', "");
Expect(1, 5866, '\P{^ _runr}', "");
Expect(0, 5791, '\p{ _runr}', "");
Expect(1, 5791, '\p{^ _runr}', "");
Expect(1, 5791, '\P{ _runr}', "");
Expect(0, 5791, '\P{^ _runr}', "");
Error('\p{	:=Is	runr}');
Error('\P{	:=Is	runr}');
Expect(1, 5866, '\p{isrunr}', "");
Expect(0, 5866, '\p{^isrunr}', "");
Expect(0, 5866, '\P{isrunr}', "");
Expect(1, 5866, '\P{^isrunr}', "");
Expect(0, 5791, '\p{isrunr}', "");
Expect(1, 5791, '\p{^isrunr}', "");
Expect(1, 5791, '\P{isrunr}', "");
Expect(0, 5791, '\P{^isrunr}', "");
Expect(1, 5866, '\p{ is	Runr}', "");
Expect(0, 5866, '\p{^ is	Runr}', "");
Expect(0, 5866, '\P{ is	Runr}', "");
Expect(1, 5866, '\P{^ is	Runr}', "");
Expect(0, 5791, '\p{ is	Runr}', "");
Expect(1, 5791, '\p{^ is	Runr}', "");
Expect(1, 5791, '\P{ is	Runr}', "");
Expect(0, 5791, '\P{^ is	Runr}', "");
Error('\p{-HIGH/a/Private_Use	SURROGATES}');
Error('\P{-HIGH/a/Private_Use	SURROGATES}');
Expect(0, 1, '\p{highprivateusesurrogates}', "");
Expect(1, 1, '\p{^highprivateusesurrogates}', "");
Expect(1, 1, '\P{highprivateusesurrogates}', "");
Expect(0, 1, '\P{^highprivateusesurrogates}', "");
Expect(0, 1, '\p{	 high Private-Use	surrogates}', "");
Expect(1, 1, '\p{^	 high Private-Use	surrogates}', "");
Expect(1, 1, '\P{	 high Private-Use	surrogates}', "");
Expect(0, 1, '\P{^	 high Private-Use	surrogates}', "");
Error('\p{ _is High/a/Private-use Surrogates}');
Error('\P{ _is High/a/Private-use Surrogates}');
Expect(0, 1, '\p{ishighprivateusesurrogates}', "");
Expect(1, 1, '\p{^ishighprivateusesurrogates}', "");
Expect(1, 1, '\P{ishighprivateusesurrogates}', "");
Expect(0, 1, '\P{^ishighprivateusesurrogates}', "");
Expect(0, 1, '\p{ -Is	High Private_USE_Surrogates}', "");
Expect(1, 1, '\p{^ -Is	High Private_USE_Surrogates}', "");
Expect(1, 1, '\P{ -Is	High Private_USE_Surrogates}', "");
Expect(0, 1, '\P{^ -Is	High Private_USE_Surrogates}', "");
Error('\p{	-in High-private:=use	Surrogates}');
Error('\P{	-in High-private:=use	Surrogates}');
Expect(0, 1, '\p{inhighprivateusesurrogates}', "");
Expect(1, 1, '\p{^inhighprivateusesurrogates}', "");
Expect(1, 1, '\P{inhighprivateusesurrogates}', "");
Expect(0, 1, '\P{^inhighprivateusesurrogates}', "");
Expect(0, 1, '\p{--In	HIGHprivate	Use	Surrogates}', "");
Expect(1, 1, '\p{^--In	HIGHprivate	Use	Surrogates}', "");
Expect(1, 1, '\P{--In	HIGHprivate	Use	Surrogates}', "");
Expect(0, 1, '\P{^--In	HIGHprivate	Use	Surrogates}', "");
Error('\p{:=kayah-li}');
Error('\P{:=kayah-li}');
Expect(1, 43311, '\p{kayahli}', "");
Expect(0, 43311, '\p{^kayahli}', "");
Expect(0, 43311, '\P{kayahli}', "");
Expect(1, 43311, '\P{^kayahli}', "");
Expect(0, 43263, '\p{kayahli}', "");
Expect(1, 43263, '\p{^kayahli}', "");
Expect(1, 43263, '\P{kayahli}', "");
Expect(0, 43263, '\P{^kayahli}', "");
Expect(1, 43311, '\p{-_KAYAH	li}', "");
Expect(0, 43311, '\p{^-_KAYAH	li}', "");
Expect(0, 43311, '\P{-_KAYAH	li}', "");
Expect(1, 43311, '\P{^-_KAYAH	li}', "");
Expect(0, 43263, '\p{-_KAYAH	li}', "");
Expect(1, 43263, '\p{^-_KAYAH	li}', "");
Expect(1, 43263, '\P{-_KAYAH	li}', "");
Expect(0, 43263, '\P{^-_KAYAH	li}', "");
Error('\p{-Is:=Kayah_li}');
Error('\P{-Is:=Kayah_li}');
Expect(1, 43311, '\p{iskayahli}', "");
Expect(0, 43311, '\p{^iskayahli}', "");
Expect(0, 43311, '\P{iskayahli}', "");
Expect(1, 43311, '\P{^iskayahli}', "");
Expect(0, 43263, '\p{iskayahli}', "");
Expect(1, 43263, '\p{^iskayahli}', "");
Expect(1, 43263, '\P{iskayahli}', "");
Expect(0, 43263, '\P{^iskayahli}', "");
Expect(1, 43311, '\p{_-is KayahLi}', "");
Expect(0, 43311, '\p{^_-is KayahLi}', "");
Expect(0, 43311, '\P{_-is KayahLi}', "");
Expect(1, 43311, '\P{^_-is KayahLi}', "");
Expect(0, 43263, '\p{_-is KayahLi}', "");
Expect(1, 43263, '\p{^_-is KayahLi}', "");
Expect(1, 43263, '\P{_-is KayahLi}', "");
Expect(0, 43263, '\P{^_-is KayahLi}', "");
Error('\p{Kali/a/}');
Error('\P{Kali/a/}');
Expect(1, 43311, '\p{kali}', "");
Expect(0, 43311, '\p{^kali}', "");
Expect(0, 43311, '\P{kali}', "");
Expect(1, 43311, '\P{^kali}', "");
Expect(0, 43263, '\p{kali}', "");
Expect(1, 43263, '\p{^kali}', "");
Expect(1, 43263, '\P{kali}', "");
Expect(0, 43263, '\P{^kali}', "");
Expect(1, 43311, '\p{ _kali}', "");
Expect(0, 43311, '\p{^ _kali}', "");
Expect(0, 43311, '\P{ _kali}', "");
Expect(1, 43311, '\P{^ _kali}', "");
Expect(0, 43263, '\p{ _kali}', "");
Expect(1, 43263, '\p{^ _kali}', "");
Expect(1, 43263, '\P{ _kali}', "");
Expect(0, 43263, '\P{^ _kali}', "");
Error('\p{_	Is	kali:=}');
Error('\P{_	Is	kali:=}');
Expect(1, 43311, '\p{iskali}', "");
Expect(0, 43311, '\p{^iskali}', "");
Expect(0, 43311, '\P{iskali}', "");
Expect(1, 43311, '\P{^iskali}', "");
Expect(0, 43263, '\p{iskali}', "");
Expect(1, 43263, '\p{^iskali}', "");
Expect(1, 43263, '\P{iskali}', "");
Expect(0, 43263, '\P{^iskali}', "");
Expect(1, 43311, '\p{- IS	KALI}', "");
Expect(0, 43311, '\p{^- IS	KALI}', "");
Expect(0, 43311, '\P{- IS	KALI}', "");
Expect(1, 43311, '\P{^- IS	KALI}', "");
Expect(0, 43263, '\p{- IS	KALI}', "");
Expect(1, 43263, '\p{^- IS	KALI}', "");
Expect(1, 43263, '\P{- IS	KALI}', "");
Expect(0, 43263, '\P{^- IS	KALI}', "");
Error('\p{ -PosixGraph:=}');
Error('\P{ -PosixGraph:=}');
Expect(1, 126, '\p{posixgraph}', "");
Expect(0, 126, '\p{^posixgraph}', "");
Expect(0, 126, '\P{posixgraph}', "");
Expect(1, 126, '\P{^posixgraph}', "");
Expect(0, 32, '\p{posixgraph}', "");
Expect(1, 32, '\p{^posixgraph}', "");
Expect(1, 32, '\P{posixgraph}', "");
Expect(0, 32, '\P{^posixgraph}', "");
Expect(1, 126, '\p{-_POSIXGRAPH}', "");
Expect(0, 126, '\p{^-_POSIXGRAPH}', "");
Expect(0, 126, '\P{-_POSIXGRAPH}', "");
Expect(1, 126, '\P{^-_POSIXGRAPH}', "");
Expect(0, 32, '\p{-_POSIXGRAPH}', "");
Expect(1, 32, '\p{^-_POSIXGRAPH}', "");
Expect(1, 32, '\P{-_POSIXGRAPH}', "");
Expect(0, 32, '\P{^-_POSIXGRAPH}', "");
Error('\p{ :=is_posixgraph}');
Error('\P{ :=is_posixgraph}');
Expect(1, 126, '\p{isposixgraph}', "");
Expect(0, 126, '\p{^isposixgraph}', "");
Expect(0, 126, '\P{isposixgraph}', "");
Expect(1, 126, '\P{^isposixgraph}', "");
Expect(0, 32, '\p{isposixgraph}', "");
Expect(1, 32, '\p{^isposixgraph}', "");
Expect(1, 32, '\P{isposixgraph}', "");
Expect(0, 32, '\P{^isposixgraph}', "");
Expect(1, 126, '\p{ 	Is PosixGraph}', "");
Expect(0, 126, '\p{^ 	Is PosixGraph}', "");
Expect(0, 126, '\P{ 	Is PosixGraph}', "");
Expect(1, 126, '\P{^ 	Is PosixGraph}', "");
Expect(0, 32, '\p{ 	Is PosixGraph}', "");
Expect(1, 32, '\p{^ 	Is PosixGraph}', "");
Expect(1, 32, '\P{ 	Is PosixGraph}', "");
Expect(0, 32, '\P{^ 	Is PosixGraph}', "");
Error('\p{_IN	old	TURKIC/a/}');
Error('\P{_IN	old	TURKIC/a/}');
Expect(1, 68687, '\p{inoldturkic}', "");
Expect(0, 68687, '\p{^inoldturkic}', "");
Expect(0, 68687, '\P{inoldturkic}', "");
Expect(1, 68687, '\P{^inoldturkic}', "");
Expect(0, 68607, '\p{inoldturkic}', "");
Expect(1, 68607, '\p{^inoldturkic}', "");
Expect(1, 68607, '\P{inoldturkic}', "");
Expect(0, 68607, '\P{^inoldturkic}', "");
Expect(1, 68687, '\p{ -IN-old-Turkic}', "");
Expect(0, 68687, '\p{^ -IN-old-Turkic}', "");
Expect(0, 68687, '\P{ -IN-old-Turkic}', "");
Expect(1, 68687, '\P{^ -IN-old-Turkic}', "");
Expect(0, 68607, '\p{ -IN-old-Turkic}', "");
Expect(1, 68607, '\p{^ -IN-old-Turkic}', "");
Expect(1, 68607, '\P{ -IN-old-Turkic}', "");
Expect(0, 68607, '\P{^ -IN-old-Turkic}', "");
Error('\p{	:=GRAPHEME Base}');
Error('\P{	:=GRAPHEME Base}');
Expect(1, 126, '\p{graphemebase}', "");
Expect(0, 126, '\p{^graphemebase}', "");
Expect(0, 126, '\P{graphemebase}', "");
Expect(1, 126, '\P{^graphemebase}', "");
Expect(0, 31, '\p{graphemebase}', "");
Expect(1, 31, '\p{^graphemebase}', "");
Expect(1, 31, '\P{graphemebase}', "");
Expect(0, 31, '\P{^graphemebase}', "");
Expect(1, 126, '\p{_ GRAPHEME-Base}', "");
Expect(0, 126, '\p{^_ GRAPHEME-Base}', "");
Expect(0, 126, '\P{_ GRAPHEME-Base}', "");
Expect(1, 126, '\P{^_ GRAPHEME-Base}', "");
Expect(0, 31, '\p{_ GRAPHEME-Base}', "");
Expect(1, 31, '\p{^_ GRAPHEME-Base}', "");
Expect(1, 31, '\P{_ GRAPHEME-Base}', "");
Expect(0, 31, '\P{^_ GRAPHEME-Base}', "");
Error('\p{-/a/Is_Grapheme-Base}');
Error('\P{-/a/Is_Grapheme-Base}');
Expect(1, 126, '\p{isgraphemebase}', "");
Expect(0, 126, '\p{^isgraphemebase}', "");
Expect(0, 126, '\P{isgraphemebase}', "");
Expect(1, 126, '\P{^isgraphemebase}', "");
Expect(0, 31, '\p{isgraphemebase}', "");
Expect(1, 31, '\p{^isgraphemebase}', "");
Expect(1, 31, '\P{isgraphemebase}', "");
Expect(0, 31, '\P{^isgraphemebase}', "");
Expect(1, 126, '\p{-	Is-Grapheme_BASE}', "");
Expect(0, 126, '\p{^-	Is-Grapheme_BASE}', "");
Expect(0, 126, '\P{-	Is-Grapheme_BASE}', "");
Expect(1, 126, '\P{^-	Is-Grapheme_BASE}', "");
Expect(0, 31, '\p{-	Is-Grapheme_BASE}', "");
Expect(1, 31, '\p{^-	Is-Grapheme_BASE}', "");
Expect(1, 31, '\P{-	Is-Grapheme_BASE}', "");
Expect(0, 31, '\P{^-	Is-Grapheme_BASE}', "");
Error('\p{:=Gr BASE}');
Error('\P{:=Gr BASE}');
Expect(1, 126, '\p{grbase}', "");
Expect(0, 126, '\p{^grbase}', "");
Expect(0, 126, '\P{grbase}', "");
Expect(1, 126, '\P{^grbase}', "");
Expect(0, 31, '\p{grbase}', "");
Expect(1, 31, '\p{^grbase}', "");
Expect(1, 31, '\P{grbase}', "");
Expect(0, 31, '\P{^grbase}', "");
Expect(1, 126, '\p{_-grBase}', "");
Expect(0, 126, '\p{^_-grBase}', "");
Expect(0, 126, '\P{_-grBase}', "");
Expect(1, 126, '\P{^_-grBase}', "");
Expect(0, 31, '\p{_-grBase}', "");
Expect(1, 31, '\p{^_-grBase}', "");
Expect(1, 31, '\P{_-grBase}', "");
Expect(0, 31, '\P{^_-grBase}', "");
Error('\p{	/a/isGr_Base}');
Error('\P{	/a/isGr_Base}');
Expect(1, 126, '\p{isgrbase}', "");
Expect(0, 126, '\p{^isgrbase}', "");
Expect(0, 126, '\P{isgrbase}', "");
Expect(1, 126, '\P{^isgrbase}', "");
Expect(0, 31, '\p{isgrbase}', "");
Expect(1, 31, '\p{^isgrbase}', "");
Expect(1, 31, '\P{isgrbase}', "");
Expect(0, 31, '\P{^isgrbase}', "");
Expect(1, 126, '\p{	IsGr	BASE}', "");
Expect(0, 126, '\p{^	IsGr	BASE}', "");
Expect(0, 126, '\P{	IsGr	BASE}', "");
Expect(1, 126, '\P{^	IsGr	BASE}', "");
Expect(0, 31, '\p{	IsGr	BASE}', "");
Expect(1, 31, '\p{^	IsGr	BASE}', "");
Expect(1, 31, '\P{	IsGr	BASE}', "");
Expect(0, 31, '\P{^	IsGr	BASE}', "");
Error('\p{/a/ -In Ugaritic}');
Error('\P{/a/ -In Ugaritic}');
Expect(1, 66463, '\p{inugaritic}', "");
Expect(0, 66463, '\p{^inugaritic}', "");
Expect(0, 66463, '\P{inugaritic}', "");
Expect(1, 66463, '\P{^inugaritic}', "");
Expect(0, 66431, '\p{inugaritic}', "");
Expect(1, 66431, '\p{^inugaritic}', "");
Expect(1, 66431, '\P{inugaritic}', "");
Expect(0, 66431, '\P{^inugaritic}', "");
Expect(1, 66463, '\p{	-In-UGARITIC}', "");
Expect(0, 66463, '\p{^	-In-UGARITIC}', "");
Expect(0, 66463, '\P{	-In-UGARITIC}', "");
Expect(1, 66463, '\P{^	-In-UGARITIC}', "");
Expect(0, 66431, '\p{	-In-UGARITIC}', "");
Expect(1, 66431, '\p{^	-In-UGARITIC}', "");
Expect(1, 66431, '\P{	-In-UGARITIC}', "");
Expect(0, 66431, '\P{^	-In-UGARITIC}', "");
Error('\p{ Devanagari/a/}');
Error('\P{ Devanagari/a/}');
Expect(1, 2361, '\p{devanagari}', "");
Expect(0, 2361, '\p{^devanagari}', "");
Expect(0, 2361, '\P{devanagari}', "");
Expect(1, 2361, '\P{^devanagari}', "");
Expect(0, 2303, '\p{devanagari}', "");
Expect(1, 2303, '\p{^devanagari}', "");
Expect(1, 2303, '\P{devanagari}', "");
Expect(0, 2303, '\P{^devanagari}', "");
Expect(1, 2361, '\p{-_devanagari}', "");
Expect(0, 2361, '\p{^-_devanagari}', "");
Expect(0, 2361, '\P{-_devanagari}', "");
Expect(1, 2361, '\P{^-_devanagari}', "");
Expect(0, 2303, '\p{-_devanagari}', "");
Expect(1, 2303, '\p{^-_devanagari}', "");
Expect(1, 2303, '\P{-_devanagari}', "");
Expect(0, 2303, '\P{^-_devanagari}', "");
Error('\p{-:=Is DEVANAGARI}');
Error('\P{-:=Is DEVANAGARI}');
Expect(1, 2361, '\p{isdevanagari}', "");
Expect(0, 2361, '\p{^isdevanagari}', "");
Expect(0, 2361, '\P{isdevanagari}', "");
Expect(1, 2361, '\P{^isdevanagari}', "");
Expect(0, 2303, '\p{isdevanagari}', "");
Expect(1, 2303, '\p{^isdevanagari}', "");
Expect(1, 2303, '\P{isdevanagari}', "");
Expect(0, 2303, '\P{^isdevanagari}', "");
Expect(1, 2361, '\p{ _Is devanagari}', "");
Expect(0, 2361, '\p{^ _Is devanagari}', "");
Expect(0, 2361, '\P{ _Is devanagari}', "");
Expect(1, 2361, '\P{^ _Is devanagari}', "");
Expect(0, 2303, '\p{ _Is devanagari}', "");
Expect(1, 2303, '\p{^ _Is devanagari}', "");
Expect(1, 2303, '\P{ _Is devanagari}', "");
Expect(0, 2303, '\P{^ _Is devanagari}', "");
Error('\p{	:=deva}');
Error('\P{	:=deva}');
Expect(1, 2361, '\p{deva}', "");
Expect(0, 2361, '\p{^deva}', "");
Expect(0, 2361, '\P{deva}', "");
Expect(1, 2361, '\P{^deva}', "");
Expect(0, 2303, '\p{deva}', "");
Expect(1, 2303, '\p{^deva}', "");
Expect(1, 2303, '\P{deva}', "");
Expect(0, 2303, '\P{^deva}', "");
Expect(1, 2361, '\p{_	Deva}', "");
Expect(0, 2361, '\p{^_	Deva}', "");
Expect(0, 2361, '\P{_	Deva}', "");
Expect(1, 2361, '\P{^_	Deva}', "");
Expect(0, 2303, '\p{_	Deva}', "");
Expect(1, 2303, '\p{^_	Deva}', "");
Expect(1, 2303, '\P{_	Deva}', "");
Expect(0, 2303, '\P{^_	Deva}', "");
Error('\p{	 IsDeva/a/}');
Error('\P{	 IsDeva/a/}');
Expect(1, 2361, '\p{isdeva}', "");
Expect(0, 2361, '\p{^isdeva}', "");
Expect(0, 2361, '\P{isdeva}', "");
Expect(1, 2361, '\P{^isdeva}', "");
Expect(0, 2303, '\p{isdeva}', "");
Expect(1, 2303, '\p{^isdeva}', "");
Expect(1, 2303, '\P{isdeva}', "");
Expect(0, 2303, '\P{^isdeva}', "");
Expect(1, 2361, '\p{__ISDeva}', "");
Expect(0, 2361, '\p{^__ISDeva}', "");
Expect(0, 2361, '\P{__ISDeva}', "");
Expect(1, 2361, '\P{^__ISDeva}', "");
Expect(0, 2303, '\p{__ISDeva}', "");
Expect(1, 2303, '\p{^__ISDeva}', "");
Expect(1, 2303, '\P{__ISDeva}', "");
Expect(0, 2303, '\P{^__ISDeva}', "");
Error('\p{	:=Final-Punctuation}');
Error('\P{	:=Final-Punctuation}');
Expect(1, 187, '\p{finalpunctuation}', "");
Expect(0, 187, '\p{^finalpunctuation}', "");
Expect(0, 187, '\P{finalpunctuation}', "");
Expect(1, 187, '\P{^finalpunctuation}', "");
Expect(0, 186, '\p{finalpunctuation}', "");
Expect(1, 186, '\p{^finalpunctuation}', "");
Expect(1, 186, '\P{finalpunctuation}', "");
Expect(0, 186, '\P{^finalpunctuation}', "");
Expect(1, 187, '\p{- Final-Punctuation}', "");
Expect(0, 187, '\p{^- Final-Punctuation}', "");
Expect(0, 187, '\P{- Final-Punctuation}', "");
Expect(1, 187, '\P{^- Final-Punctuation}', "");
Expect(0, 186, '\p{- Final-Punctuation}', "");
Expect(1, 186, '\p{^- Final-Punctuation}', "");
Expect(1, 186, '\P{- Final-Punctuation}', "");
Expect(0, 186, '\P{^- Final-Punctuation}', "");
Error('\p{:=-	Is_finalPunctuation}');
Error('\P{:=-	Is_finalPunctuation}');
Expect(1, 187, '\p{isfinalpunctuation}', "");
Expect(0, 187, '\p{^isfinalpunctuation}', "");
Expect(0, 187, '\P{isfinalpunctuation}', "");
Expect(1, 187, '\P{^isfinalpunctuation}', "");
Expect(0, 186, '\p{isfinalpunctuation}', "");
Expect(1, 186, '\p{^isfinalpunctuation}', "");
Expect(1, 186, '\P{isfinalpunctuation}', "");
Expect(0, 186, '\P{^isfinalpunctuation}', "");
Expect(1, 187, '\p{ Is_Finalpunctuation}', "");
Expect(0, 187, '\p{^ Is_Finalpunctuation}', "");
Expect(0, 187, '\P{ Is_Finalpunctuation}', "");
Expect(1, 187, '\P{^ Is_Finalpunctuation}', "");
Expect(0, 186, '\p{ Is_Finalpunctuation}', "");
Expect(1, 186, '\p{^ Is_Finalpunctuation}', "");
Expect(1, 186, '\P{ Is_Finalpunctuation}', "");
Expect(0, 186, '\P{^ Is_Finalpunctuation}', "");
Error('\p{/a/pf}');
Error('\P{/a/pf}');
Expect(1, 187, '\p{pf}', "");
Expect(0, 187, '\p{^pf}', "");
Expect(0, 187, '\P{pf}', "");
Expect(1, 187, '\P{^pf}', "");
Expect(0, 186, '\p{pf}', "");
Expect(1, 186, '\p{^pf}', "");
Expect(1, 186, '\P{pf}', "");
Expect(0, 186, '\P{^pf}', "");
Expect(1, 187, '\p{-_PF}', "");
Expect(0, 187, '\p{^-_PF}', "");
Expect(0, 187, '\P{-_PF}', "");
Expect(1, 187, '\P{^-_PF}', "");
Expect(0, 186, '\p{-_PF}', "");
Expect(1, 186, '\p{^-_PF}', "");
Expect(1, 186, '\P{-_PF}', "");
Expect(0, 186, '\P{^-_PF}', "");
Error('\p{ Is:=pf}');
Error('\P{ Is:=pf}');
Expect(1, 187, '\p{ispf}', "");
Expect(0, 187, '\p{^ispf}', "");
Expect(0, 187, '\P{ispf}', "");
Expect(1, 187, '\P{^ispf}', "");
Expect(0, 186, '\p{ispf}', "");
Expect(1, 186, '\p{^ispf}', "");
Expect(1, 186, '\P{ispf}', "");
Expect(0, 186, '\P{^ispf}', "");
Expect(1, 187, '\p{	is_PF}', "");
Expect(0, 187, '\p{^	is_PF}', "");
Expect(0, 187, '\P{	is_PF}', "");
Expect(1, 187, '\P{^	is_PF}', "");
Expect(0, 186, '\p{	is_PF}', "");
Expect(1, 186, '\p{^	is_PF}', "");
Expect(1, 186, '\P{	is_PF}', "");
Expect(0, 186, '\P{^	is_PF}', "");
Error('\p{	MODIFIER:=LETTER}');
Error('\P{	MODIFIER:=LETTER}');
Expect(1, 705, '\p{modifierletter}', "");
Expect(0, 705, '\p{^modifierletter}', "");
Expect(0, 705, '\P{modifierletter}', "");
Expect(1, 705, '\P{^modifierletter}', "");
Expect(0, 687, '\p{modifierletter}', "");
Expect(1, 687, '\p{^modifierletter}', "");
Expect(1, 687, '\P{modifierletter}', "");
Expect(0, 687, '\P{^modifierletter}', "");
Expect(1, 705, '\p{ _ModifierLetter}', "");
Expect(0, 705, '\p{^ _ModifierLetter}', "");
Expect(0, 705, '\P{ _ModifierLetter}', "");
Expect(1, 705, '\P{^ _ModifierLetter}', "");
Expect(0, 687, '\p{ _ModifierLetter}', "");
Expect(1, 687, '\p{^ _ModifierLetter}', "");
Expect(1, 687, '\P{ _ModifierLetter}', "");
Expect(0, 687, '\P{^ _ModifierLetter}', "");
Error('\p{_Is	MODIFIER-Letter/a/}');
Error('\P{_Is	MODIFIER-Letter/a/}');
Expect(1, 705, '\p{ismodifierletter}', "");
Expect(0, 705, '\p{^ismodifierletter}', "");
Expect(0, 705, '\P{ismodifierletter}', "");
Expect(1, 705, '\P{^ismodifierletter}', "");
Expect(0, 687, '\p{ismodifierletter}', "");
Expect(1, 687, '\p{^ismodifierletter}', "");
Expect(1, 687, '\P{ismodifierletter}', "");
Expect(0, 687, '\P{^ismodifierletter}', "");
Expect(1, 705, '\p{_-Ismodifier Letter}', "");
Expect(0, 705, '\p{^_-Ismodifier Letter}', "");
Expect(0, 705, '\P{_-Ismodifier Letter}', "");
Expect(1, 705, '\P{^_-Ismodifier Letter}', "");
Expect(0, 687, '\p{_-Ismodifier Letter}', "");
Expect(1, 687, '\p{^_-Ismodifier Letter}', "");
Expect(1, 687, '\P{_-Ismodifier Letter}', "");
Expect(0, 687, '\P{^_-Ismodifier Letter}', "");
Error('\p{	Lm/a/}');
Error('\P{	Lm/a/}');
Expect(1, 705, '\p{lm}', "");
Expect(0, 705, '\p{^lm}', "");
Expect(0, 705, '\P{lm}', "");
Expect(1, 705, '\P{^lm}', "");
Expect(0, 687, '\p{lm}', "");
Expect(1, 687, '\p{^lm}', "");
Expect(1, 687, '\P{lm}', "");
Expect(0, 687, '\P{^lm}', "");
Expect(1, 705, '\p{--Lm}', "");
Expect(0, 705, '\p{^--Lm}', "");
Expect(0, 705, '\P{--Lm}', "");
Expect(1, 705, '\P{^--Lm}', "");
Expect(0, 687, '\p{--Lm}', "");
Expect(1, 687, '\p{^--Lm}', "");
Expect(1, 687, '\P{--Lm}', "");
Expect(0, 687, '\P{^--Lm}', "");
Error('\p{	Is	lm/a/}');
Error('\P{	Is	lm/a/}');
Expect(1, 705, '\p{islm}', "");
Expect(0, 705, '\p{^islm}', "");
Expect(0, 705, '\P{islm}', "");
Expect(1, 705, '\P{^islm}', "");
Expect(0, 687, '\p{islm}', "");
Expect(1, 687, '\p{^islm}', "");
Expect(1, 687, '\P{islm}', "");
Expect(0, 687, '\P{^islm}', "");
Expect(1, 705, '\p{ -is lm}', "");
Expect(0, 705, '\p{^ -is lm}', "");
Expect(0, 705, '\P{ -is lm}', "");
Expect(1, 705, '\P{^ -is lm}', "");
Expect(0, 687, '\p{ -is lm}', "");
Expect(1, 687, '\p{^ -is lm}', "");
Expect(1, 687, '\P{ -is lm}', "");
Expect(0, 687, '\P{^ -is lm}', "");
Error('\p{	KANBUN:=}');
Error('\P{	KANBUN:=}');
Expect(1, 12703, '\p{kanbun}', "");
Expect(0, 12703, '\p{^kanbun}', "");
Expect(0, 12703, '\P{kanbun}', "");
Expect(1, 12703, '\P{^kanbun}', "");
Expect(0, 12687, '\p{kanbun}', "");
Expect(1, 12687, '\p{^kanbun}', "");
Expect(1, 12687, '\P{kanbun}', "");
Expect(0, 12687, '\P{^kanbun}', "");
Expect(1, 12703, '\p{ KANBUN}', "");
Expect(0, 12703, '\p{^ KANBUN}', "");
Expect(0, 12703, '\P{ KANBUN}', "");
Expect(1, 12703, '\P{^ KANBUN}', "");
Expect(0, 12687, '\p{ KANBUN}', "");
Expect(1, 12687, '\p{^ KANBUN}', "");
Expect(1, 12687, '\P{ KANBUN}', "");
Expect(0, 12687, '\P{^ KANBUN}', "");
Error('\p{-:=is-Kanbun}');
Error('\P{-:=is-Kanbun}');
Expect(1, 12703, '\p{iskanbun}', "");
Expect(0, 12703, '\p{^iskanbun}', "");
Expect(0, 12703, '\P{iskanbun}', "");
Expect(1, 12703, '\P{^iskanbun}', "");
Expect(0, 12687, '\p{iskanbun}', "");
Expect(1, 12687, '\p{^iskanbun}', "");
Expect(1, 12687, '\P{iskanbun}', "");
Expect(0, 12687, '\P{^iskanbun}', "");
Expect(1, 12703, '\p{__IS	KANBUN}', "");
Expect(0, 12703, '\p{^__IS	KANBUN}', "");
Expect(0, 12703, '\P{__IS	KANBUN}', "");
Expect(1, 12703, '\P{^__IS	KANBUN}', "");
Expect(0, 12687, '\p{__IS	KANBUN}', "");
Expect(1, 12687, '\p{^__IS	KANBUN}', "");
Expect(1, 12687, '\P{__IS	KANBUN}', "");
Expect(0, 12687, '\P{^__IS	KANBUN}', "");
Error('\p{_-In Kanbun/a/}');
Error('\P{_-In Kanbun/a/}');
Expect(1, 12703, '\p{inkanbun}', "");
Expect(0, 12703, '\p{^inkanbun}', "");
Expect(0, 12703, '\P{inkanbun}', "");
Expect(1, 12703, '\P{^inkanbun}', "");
Expect(0, 12687, '\p{inkanbun}', "");
Expect(1, 12687, '\p{^inkanbun}', "");
Expect(1, 12687, '\P{inkanbun}', "");
Expect(0, 12687, '\P{^inkanbun}', "");
Expect(1, 12703, '\p{_In_Kanbun}', "");
Expect(0, 12703, '\p{^_In_Kanbun}', "");
Expect(0, 12703, '\P{_In_Kanbun}', "");
Expect(1, 12703, '\P{^_In_Kanbun}', "");
Expect(0, 12687, '\p{_In_Kanbun}', "");
Expect(1, 12687, '\p{^_In_Kanbun}', "");
Expect(1, 12687, '\P{_In_Kanbun}', "");
Expect(0, 12687, '\P{^_In_Kanbun}', "");
Error('\p{-MiscellaneousMathematical:=Symbols-A}');
Error('\P{-MiscellaneousMathematical:=Symbols-A}');
Expect(1, 10223, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{-Miscellaneous	mathematical-symbols-A}', "");
Expect(0, 10223, '\p{^-Miscellaneous	mathematical-symbols-A}', "");
Expect(0, 10223, '\P{-Miscellaneous	mathematical-symbols-A}', "");
Expect(1, 10223, '\P{^-Miscellaneous	mathematical-symbols-A}', "");
Expect(0, 10175, '\p{-Miscellaneous	mathematical-symbols-A}', "");
Expect(1, 10175, '\p{^-Miscellaneous	mathematical-symbols-A}', "");
Expect(1, 10175, '\P{-Miscellaneous	mathematical-symbols-A}', "");
Expect(0, 10175, '\P{^-Miscellaneous	mathematical-symbols-A}', "");
Error('\p{	Is:=miscellaneous	MATHEMATICAL_symbols-A}');
Error('\P{	Is:=miscellaneous	MATHEMATICAL_symbols-A}');
Expect(1, 10223, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(0, 10223, '\p{^_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(0, 10223, '\P{_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(1, 10223, '\P{^_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(0, 10175, '\p{_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(1, 10175, '\p{^_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(1, 10175, '\P{_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Expect(0, 10175, '\P{^_	Is	MISCELLANEOUS MATHEMATICAL-SYMBOLSa}', "");
Error('\p{ :=In-Miscellaneous Mathematical	Symbols	A}');
Error('\P{ :=In-Miscellaneous Mathematical	Symbols	A}');
Expect(1, 10223, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(0, 10223, '\p{^--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(0, 10223, '\P{--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(1, 10223, '\P{^--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(0, 10175, '\p{--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(1, 10175, '\p{^--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(1, 10175, '\P{--in-Miscellaneous_Mathematical	SymbolsA}', "");
Expect(0, 10175, '\P{^--in-Miscellaneous_Mathematical	SymbolsA}', "");
Error('\p{-IN devanagari:=}');
Error('\P{-IN devanagari:=}');
Expect(1, 2431, '\p{indevanagari}', "");
Expect(0, 2431, '\p{^indevanagari}', "");
Expect(0, 2431, '\P{indevanagari}', "");
Expect(1, 2431, '\P{^indevanagari}', "");
Expect(0, 2303, '\p{indevanagari}', "");
Expect(1, 2303, '\p{^indevanagari}', "");
Expect(1, 2303, '\P{indevanagari}', "");
Expect(0, 2303, '\P{^indevanagari}', "");
Expect(1, 2431, '\p{ -IN-DEVANAGARI}', "");
Expect(0, 2431, '\p{^ -IN-DEVANAGARI}', "");
Expect(0, 2431, '\P{ -IN-DEVANAGARI}', "");
Expect(1, 2431, '\P{^ -IN-DEVANAGARI}', "");
Expect(0, 2303, '\p{ -IN-DEVANAGARI}', "");
Expect(1, 2303, '\p{^ -IN-DEVANAGARI}', "");
Expect(1, 2303, '\P{ -IN-DEVANAGARI}', "");
Expect(0, 2303, '\P{^ -IN-DEVANAGARI}', "");
Error('\p{ /a/TIBETAN}');
Error('\P{ /a/TIBETAN}');
Expect(1, 3911, '\p{tibetan}', "");
Expect(0, 3911, '\p{^tibetan}', "");
Expect(0, 3911, '\P{tibetan}', "");
Expect(1, 3911, '\P{^tibetan}', "");
Expect(0, 3839, '\p{tibetan}', "");
Expect(1, 3839, '\p{^tibetan}', "");
Expect(1, 3839, '\P{tibetan}', "");
Expect(0, 3839, '\P{^tibetan}', "");
Expect(1, 3911, '\p{ TIBETAN}', "");
Expect(0, 3911, '\p{^ TIBETAN}', "");
Expect(0, 3911, '\P{ TIBETAN}', "");
Expect(1, 3911, '\P{^ TIBETAN}', "");
Expect(0, 3839, '\p{ TIBETAN}', "");
Expect(1, 3839, '\p{^ TIBETAN}', "");
Expect(1, 3839, '\P{ TIBETAN}', "");
Expect(0, 3839, '\P{^ TIBETAN}', "");
Error('\p{/a/-_IS_tibetan}');
Error('\P{/a/-_IS_tibetan}');
Expect(1, 3911, '\p{istibetan}', "");
Expect(0, 3911, '\p{^istibetan}', "");
Expect(0, 3911, '\P{istibetan}', "");
Expect(1, 3911, '\P{^istibetan}', "");
Expect(0, 3839, '\p{istibetan}', "");
Expect(1, 3839, '\p{^istibetan}', "");
Expect(1, 3839, '\P{istibetan}', "");
Expect(0, 3839, '\P{^istibetan}', "");
Expect(1, 3911, '\p{- Is-tibetan}', "");
Expect(0, 3911, '\p{^- Is-tibetan}', "");
Expect(0, 3911, '\P{- Is-tibetan}', "");
Expect(1, 3911, '\P{^- Is-tibetan}', "");
Expect(0, 3839, '\p{- Is-tibetan}', "");
Expect(1, 3839, '\p{^- Is-tibetan}', "");
Expect(1, 3839, '\P{- Is-tibetan}', "");
Expect(0, 3839, '\P{^- Is-tibetan}', "");
Error('\p{:=-	Tibt}');
Error('\P{:=-	Tibt}');
Expect(1, 3911, '\p{tibt}', "");
Expect(0, 3911, '\p{^tibt}', "");
Expect(0, 3911, '\P{tibt}', "");
Expect(1, 3911, '\P{^tibt}', "");
Expect(0, 3839, '\p{tibt}', "");
Expect(1, 3839, '\p{^tibt}', "");
Expect(1, 3839, '\P{tibt}', "");
Expect(0, 3839, '\P{^tibt}', "");
Expect(1, 3911, '\p{		Tibt}', "");
Expect(0, 3911, '\p{^		Tibt}', "");
Expect(0, 3911, '\P{		Tibt}', "");
Expect(1, 3911, '\P{^		Tibt}', "");
Expect(0, 3839, '\p{		Tibt}', "");
Expect(1, 3839, '\p{^		Tibt}', "");
Expect(1, 3839, '\P{		Tibt}', "");
Expect(0, 3839, '\P{^		Tibt}', "");
Error('\p{	/a/IS	tibt}');
Error('\P{	/a/IS	tibt}');
Expect(1, 3911, '\p{istibt}', "");
Expect(0, 3911, '\p{^istibt}', "");
Expect(0, 3911, '\P{istibt}', "");
Expect(1, 3911, '\P{^istibt}', "");
Expect(0, 3839, '\p{istibt}', "");
Expect(1, 3839, '\p{^istibt}', "");
Expect(1, 3839, '\P{istibt}', "");
Expect(0, 3839, '\P{^istibt}', "");
Expect(1, 3911, '\p{-	is-TIBT}', "");
Expect(0, 3911, '\p{^-	is-TIBT}', "");
Expect(0, 3911, '\P{-	is-TIBT}', "");
Expect(1, 3911, '\P{^-	is-TIBT}', "");
Expect(0, 3839, '\p{-	is-TIBT}', "");
Expect(1, 3839, '\p{^-	is-TIBT}', "");
Expect(1, 3839, '\P{-	is-TIBT}', "");
Expect(0, 3839, '\P{^-	is-TIBT}', "");
Error('\p{:= _JAVANESE}');
Error('\P{:= _JAVANESE}');
Expect(1, 43469, '\p{javanese}', "");
Expect(0, 43469, '\p{^javanese}', "");
Expect(0, 43469, '\P{javanese}', "");
Expect(1, 43469, '\P{^javanese}', "");
Expect(0, 43391, '\p{javanese}', "");
Expect(1, 43391, '\p{^javanese}', "");
Expect(1, 43391, '\P{javanese}', "");
Expect(0, 43391, '\P{^javanese}', "");
Expect(1, 43469, '\p{ -Javanese}', "");
Expect(0, 43469, '\p{^ -Javanese}', "");
Expect(0, 43469, '\P{ -Javanese}', "");
Expect(1, 43469, '\P{^ -Javanese}', "");
Expect(0, 43391, '\p{ -Javanese}', "");
Expect(1, 43391, '\p{^ -Javanese}', "");
Expect(1, 43391, '\P{ -Javanese}', "");
Expect(0, 43391, '\P{^ -Javanese}', "");
Error('\p{-Is	Javanese/a/}');
Error('\P{-Is	Javanese/a/}');
Expect(1, 43469, '\p{isjavanese}', "");
Expect(0, 43469, '\p{^isjavanese}', "");
Expect(0, 43469, '\P{isjavanese}', "");
Expect(1, 43469, '\P{^isjavanese}', "");
Expect(0, 43391, '\p{isjavanese}', "");
Expect(1, 43391, '\p{^isjavanese}', "");
Expect(1, 43391, '\P{isjavanese}', "");
Expect(0, 43391, '\P{^isjavanese}', "");
Expect(1, 43469, '\p{ -IS_Javanese}', "");
Expect(0, 43469, '\p{^ -IS_Javanese}', "");
Expect(0, 43469, '\P{ -IS_Javanese}', "");
Expect(1, 43469, '\P{^ -IS_Javanese}', "");
Expect(0, 43391, '\p{ -IS_Javanese}', "");
Expect(1, 43391, '\p{^ -IS_Javanese}', "");
Expect(1, 43391, '\P{ -IS_Javanese}', "");
Expect(0, 43391, '\P{^ -IS_Javanese}', "");
Error('\p{:=_JAVA}');
Error('\P{:=_JAVA}');
Expect(1, 43469, '\p{java}', "");
Expect(0, 43469, '\p{^java}', "");
Expect(0, 43469, '\P{java}', "");
Expect(1, 43469, '\P{^java}', "");
Expect(0, 43391, '\p{java}', "");
Expect(1, 43391, '\p{^java}', "");
Expect(1, 43391, '\P{java}', "");
Expect(0, 43391, '\P{^java}', "");
Expect(1, 43469, '\p{	JAVA}', "");
Expect(0, 43469, '\p{^	JAVA}', "");
Expect(0, 43469, '\P{	JAVA}', "");
Expect(1, 43469, '\P{^	JAVA}', "");
Expect(0, 43391, '\p{	JAVA}', "");
Expect(1, 43391, '\p{^	JAVA}', "");
Expect(1, 43391, '\P{	JAVA}', "");
Expect(0, 43391, '\P{^	JAVA}', "");
Error('\p{:=	 Isjava}');
Error('\P{:=	 Isjava}');
Expect(1, 43469, '\p{isjava}', "");
Expect(0, 43469, '\p{^isjava}', "");
Expect(0, 43469, '\P{isjava}', "");
Expect(1, 43469, '\P{^isjava}', "");
Expect(0, 43391, '\p{isjava}', "");
Expect(1, 43391, '\p{^isjava}', "");
Expect(1, 43391, '\P{isjava}', "");
Expect(0, 43391, '\P{^isjava}', "");
Expect(1, 43469, '\p{	_IS_Java}', "");
Expect(0, 43469, '\p{^	_IS_Java}', "");
Expect(0, 43469, '\P{	_IS_Java}', "");
Expect(1, 43469, '\P{^	_IS_Java}', "");
Expect(0, 43391, '\p{	_IS_Java}', "");
Expect(1, 43391, '\p{^	_IS_Java}', "");
Expect(1, 43391, '\P{	_IS_Java}', "");
Expect(0, 43391, '\P{^	_IS_Java}', "");
Error('\p{:=__Telugu}');
Error('\P{:=__Telugu}');
Expect(1, 3075, '\p{telugu}', "");
Expect(0, 3075, '\p{^telugu}', "");
Expect(0, 3075, '\P{telugu}', "");
Expect(1, 3075, '\P{^telugu}', "");
Expect(0, 3072, '\p{telugu}', "");
Expect(1, 3072, '\p{^telugu}', "");
Expect(1, 3072, '\P{telugu}', "");
Expect(0, 3072, '\P{^telugu}', "");
Expect(1, 3075, '\p{ -telugu}', "");
Expect(0, 3075, '\p{^ -telugu}', "");
Expect(0, 3075, '\P{ -telugu}', "");
Expect(1, 3075, '\P{^ -telugu}', "");
Expect(0, 3072, '\p{ -telugu}', "");
Expect(1, 3072, '\p{^ -telugu}', "");
Expect(1, 3072, '\P{ -telugu}', "");
Expect(0, 3072, '\P{^ -telugu}', "");
Error('\p{_IS:=Telugu}');
Error('\P{_IS:=Telugu}');
Expect(1, 3075, '\p{istelugu}', "");
Expect(0, 3075, '\p{^istelugu}', "");
Expect(0, 3075, '\P{istelugu}', "");
Expect(1, 3075, '\P{^istelugu}', "");
Expect(0, 3072, '\p{istelugu}', "");
Expect(1, 3072, '\p{^istelugu}', "");
Expect(1, 3072, '\P{istelugu}', "");
Expect(0, 3072, '\P{^istelugu}', "");
Expect(1, 3075, '\p{ Is-Telugu}', "");
Expect(0, 3075, '\p{^ Is-Telugu}', "");
Expect(0, 3075, '\P{ Is-Telugu}', "");
Expect(1, 3075, '\P{^ Is-Telugu}', "");
Expect(0, 3072, '\p{ Is-Telugu}', "");
Expect(1, 3072, '\p{^ Is-Telugu}', "");
Expect(1, 3072, '\P{ Is-Telugu}', "");
Expect(0, 3072, '\P{^ Is-Telugu}', "");
Error('\p{	:=Telu}');
Error('\P{	:=Telu}');
Expect(1, 3075, '\p{telu}', "");
Expect(0, 3075, '\p{^telu}', "");
Expect(0, 3075, '\P{telu}', "");
Expect(1, 3075, '\P{^telu}', "");
Expect(0, 3072, '\p{telu}', "");
Expect(1, 3072, '\p{^telu}', "");
Expect(1, 3072, '\P{telu}', "");
Expect(0, 3072, '\P{^telu}', "");
Expect(1, 3075, '\p{-Telu}', "");
Expect(0, 3075, '\p{^-Telu}', "");
Expect(0, 3075, '\P{-Telu}', "");
Expect(1, 3075, '\P{^-Telu}', "");
Expect(0, 3072, '\p{-Telu}', "");
Expect(1, 3072, '\p{^-Telu}', "");
Expect(1, 3072, '\P{-Telu}', "");
Expect(0, 3072, '\P{^-Telu}', "");
Error('\p{:=IsTelu}');
Error('\P{:=IsTelu}');
Expect(1, 3075, '\p{istelu}', "");
Expect(0, 3075, '\p{^istelu}', "");
Expect(0, 3075, '\P{istelu}', "");
Expect(1, 3075, '\P{^istelu}', "");
Expect(0, 3072, '\p{istelu}', "");
Expect(1, 3072, '\p{^istelu}', "");
Expect(1, 3072, '\P{istelu}', "");
Expect(0, 3072, '\P{^istelu}', "");
Expect(1, 3075, '\p{_Is Telu}', "");
Expect(0, 3075, '\p{^_Is Telu}', "");
Expect(0, 3075, '\P{_Is Telu}', "");
Expect(1, 3075, '\P{^_Is Telu}', "");
Expect(0, 3072, '\p{_Is Telu}', "");
Expect(1, 3072, '\p{^_Is Telu}', "");
Expect(1, 3072, '\P{_Is Telu}', "");
Expect(0, 3072, '\P{^_Is Telu}', "");
Error('\p{:=	-YiRADICALS}');
Error('\P{:=	-YiRADICALS}');
Expect(1, 42191, '\p{yiradicals}', "");
Expect(0, 42191, '\p{^yiradicals}', "");
Expect(0, 42191, '\P{yiradicals}', "");
Expect(1, 42191, '\P{^yiradicals}', "");
Expect(0, 42127, '\p{yiradicals}', "");
Expect(1, 42127, '\p{^yiradicals}', "");
Expect(1, 42127, '\P{yiradicals}', "");
Expect(0, 42127, '\P{^yiradicals}', "");
Expect(1, 42191, '\p{- YIRadicals}', "");
Expect(0, 42191, '\p{^- YIRadicals}', "");
Expect(0, 42191, '\P{- YIRadicals}', "");
Expect(1, 42191, '\P{^- YIRadicals}', "");
Expect(0, 42127, '\p{- YIRadicals}', "");
Expect(1, 42127, '\p{^- YIRadicals}', "");
Expect(1, 42127, '\P{- YIRadicals}', "");
Expect(0, 42127, '\P{^- YIRadicals}', "");
Error('\p{	/a/IS	Yi	radicals}');
Error('\P{	/a/IS	Yi	radicals}');
Expect(1, 42191, '\p{isyiradicals}', "");
Expect(0, 42191, '\p{^isyiradicals}', "");
Expect(0, 42191, '\P{isyiradicals}', "");
Expect(1, 42191, '\P{^isyiradicals}', "");
Expect(0, 42127, '\p{isyiradicals}', "");
Expect(1, 42127, '\p{^isyiradicals}', "");
Expect(1, 42127, '\P{isyiradicals}', "");
Expect(0, 42127, '\P{^isyiradicals}', "");
Expect(1, 42191, '\p{-is-YiRadicals}', "");
Expect(0, 42191, '\p{^-is-YiRadicals}', "");
Expect(0, 42191, '\P{-is-YiRadicals}', "");
Expect(1, 42191, '\P{^-is-YiRadicals}', "");
Expect(0, 42127, '\p{-is-YiRadicals}', "");
Expect(1, 42127, '\p{^-is-YiRadicals}', "");
Expect(1, 42127, '\P{-is-YiRadicals}', "");
Expect(0, 42127, '\P{^-is-YiRadicals}', "");
Error('\p{:=In-yi_radicals}');
Error('\P{:=In-yi_radicals}');
Expect(1, 42191, '\p{inyiradicals}', "");
Expect(0, 42191, '\p{^inyiradicals}', "");
Expect(0, 42191, '\P{inyiradicals}', "");
Expect(1, 42191, '\P{^inyiradicals}', "");
Expect(0, 42127, '\p{inyiradicals}', "");
Expect(1, 42127, '\p{^inyiradicals}', "");
Expect(1, 42127, '\P{inyiradicals}', "");
Expect(0, 42127, '\P{^inyiradicals}', "");
Expect(1, 42191, '\p{- In_YI	RADICALS}', "");
Expect(0, 42191, '\p{^- In_YI	RADICALS}', "");
Expect(0, 42191, '\P{- In_YI	RADICALS}', "");
Expect(1, 42191, '\P{^- In_YI	RADICALS}', "");
Expect(0, 42127, '\p{- In_YI	RADICALS}', "");
Expect(1, 42127, '\p{^- In_YI	RADICALS}', "");
Expect(1, 42127, '\P{- In_YI	RADICALS}', "");
Expect(0, 42127, '\P{^- In_YI	RADICALS}', "");
Error('\p{:=In	Shavian}');
Error('\P{:=In	Shavian}');
Expect(1, 66687, '\p{inshavian}', "");
Expect(0, 66687, '\p{^inshavian}', "");
Expect(0, 66687, '\P{inshavian}', "");
Expect(1, 66687, '\P{^inshavian}', "");
Expect(0, 66639, '\p{inshavian}', "");
Expect(1, 66639, '\p{^inshavian}', "");
Expect(1, 66639, '\P{inshavian}', "");
Expect(0, 66639, '\P{^inshavian}', "");
Expect(1, 66687, '\p{_in_shavian}', "");
Expect(0, 66687, '\p{^_in_shavian}', "");
Expect(0, 66687, '\P{_in_shavian}', "");
Expect(1, 66687, '\P{^_in_shavian}', "");
Expect(0, 66639, '\p{_in_shavian}', "");
Expect(1, 66639, '\p{^_in_shavian}', "");
Expect(1, 66639, '\P{_in_shavian}', "");
Expect(0, 66639, '\P{^_in_shavian}', "");
Error('\p{ AncientSymbols/a/}');
Error('\P{ AncientSymbols/a/}');
Expect(1, 65999, '\p{ancientsymbols}', "");
Expect(0, 65999, '\p{^ancientsymbols}', "");
Expect(0, 65999, '\P{ancientsymbols}', "");
Expect(1, 65999, '\P{^ancientsymbols}', "");
Expect(0, 65935, '\p{ancientsymbols}', "");
Expect(1, 65935, '\p{^ancientsymbols}', "");
Expect(1, 65935, '\P{ancientsymbols}', "");
Expect(0, 65935, '\P{^ancientsymbols}', "");
Expect(1, 65999, '\p{ Ancient-SYMBOLS}', "");
Expect(0, 65999, '\p{^ Ancient-SYMBOLS}', "");
Expect(0, 65999, '\P{ Ancient-SYMBOLS}', "");
Expect(1, 65999, '\P{^ Ancient-SYMBOLS}', "");
Expect(0, 65935, '\p{ Ancient-SYMBOLS}', "");
Expect(1, 65935, '\p{^ Ancient-SYMBOLS}', "");
Expect(1, 65935, '\P{ Ancient-SYMBOLS}', "");
Expect(0, 65935, '\P{^ Ancient-SYMBOLS}', "");
Error('\p{-_Is-Ancientsymbols/a/}');
Error('\P{-_Is-Ancientsymbols/a/}');
Expect(1, 65999, '\p{isancientsymbols}', "");
Expect(0, 65999, '\p{^isancientsymbols}', "");
Expect(0, 65999, '\P{isancientsymbols}', "");
Expect(1, 65999, '\P{^isancientsymbols}', "");
Expect(0, 65935, '\p{isancientsymbols}', "");
Expect(1, 65935, '\p{^isancientsymbols}', "");
Expect(1, 65935, '\P{isancientsymbols}', "");
Expect(0, 65935, '\P{^isancientsymbols}', "");
Expect(1, 65999, '\p{	-Is_Ancient Symbols}', "");
Expect(0, 65999, '\p{^	-Is_Ancient Symbols}', "");
Expect(0, 65999, '\P{	-Is_Ancient Symbols}', "");
Expect(1, 65999, '\P{^	-Is_Ancient Symbols}', "");
Expect(0, 65935, '\p{	-Is_Ancient Symbols}', "");
Expect(1, 65935, '\p{^	-Is_Ancient Symbols}', "");
Expect(1, 65935, '\P{	-Is_Ancient Symbols}', "");
Expect(0, 65935, '\P{^	-Is_Ancient Symbols}', "");
Error('\p{	-In ANCIENT SYMBOLS:=}');
Error('\P{	-In ANCIENT SYMBOLS:=}');
Expect(1, 65999, '\p{inancientsymbols}', "");
Expect(0, 65999, '\p{^inancientsymbols}', "");
Expect(0, 65999, '\P{inancientsymbols}', "");
Expect(1, 65999, '\P{^inancientsymbols}', "");
Expect(0, 65935, '\p{inancientsymbols}', "");
Expect(1, 65935, '\p{^inancientsymbols}', "");
Expect(1, 65935, '\P{inancientsymbols}', "");
Expect(0, 65935, '\P{^inancientsymbols}', "");
Expect(1, 65999, '\p{	-InAncient Symbols}', "");
Expect(0, 65999, '\p{^	-InAncient Symbols}', "");
Expect(0, 65999, '\P{	-InAncient Symbols}', "");
Expect(1, 65999, '\P{^	-InAncient Symbols}', "");
Expect(0, 65935, '\p{	-InAncient Symbols}', "");
Expect(1, 65935, '\p{^	-InAncient Symbols}', "");
Expect(1, 65935, '\P{	-InAncient Symbols}', "");
Expect(0, 65935, '\P{^	-InAncient Symbols}', "");
Error('\p{	/a/quotation	Mark}');
Error('\P{	/a/quotation	Mark}');
Expect(1, 34, '\p{quotationmark}', "");
Expect(0, 34, '\p{^quotationmark}', "");
Expect(0, 34, '\P{quotationmark}', "");
Expect(1, 34, '\P{^quotationmark}', "");
Expect(0, 33, '\p{quotationmark}', "");
Expect(1, 33, '\p{^quotationmark}', "");
Expect(1, 33, '\P{quotationmark}', "");
Expect(0, 33, '\P{^quotationmark}', "");
Expect(1, 34, '\p{_-Quotation	Mark}', "");
Expect(0, 34, '\p{^_-Quotation	Mark}', "");
Expect(0, 34, '\P{_-Quotation	Mark}', "");
Expect(1, 34, '\P{^_-Quotation	Mark}', "");
Expect(0, 33, '\p{_-Quotation	Mark}', "");
Expect(1, 33, '\p{^_-Quotation	Mark}', "");
Expect(1, 33, '\P{_-Quotation	Mark}', "");
Expect(0, 33, '\P{^_-Quotation	Mark}', "");
Error('\p{	IS-Quotation:=MARK}');
Error('\P{	IS-Quotation:=MARK}');
Expect(1, 34, '\p{isquotationmark}', "");
Expect(0, 34, '\p{^isquotationmark}', "");
Expect(0, 34, '\P{isquotationmark}', "");
Expect(1, 34, '\P{^isquotationmark}', "");
Expect(0, 33, '\p{isquotationmark}', "");
Expect(1, 33, '\p{^isquotationmark}', "");
Expect(1, 33, '\P{isquotationmark}', "");
Expect(0, 33, '\P{^isquotationmark}', "");
Expect(1, 34, '\p{IsQUOTATION_Mark}', "");
Expect(0, 34, '\p{^IsQUOTATION_Mark}', "");
Expect(0, 34, '\P{IsQUOTATION_Mark}', "");
Expect(1, 34, '\P{^IsQUOTATION_Mark}', "");
Expect(0, 33, '\p{IsQUOTATION_Mark}', "");
Expect(1, 33, '\p{^IsQUOTATION_Mark}', "");
Expect(1, 33, '\P{IsQUOTATION_Mark}', "");
Expect(0, 33, '\P{^IsQUOTATION_Mark}', "");
Error('\p{-_QMark/a/}');
Error('\P{-_QMark/a/}');
Expect(1, 34, '\p{qmark}', "");
Expect(0, 34, '\p{^qmark}', "");
Expect(0, 34, '\P{qmark}', "");
Expect(1, 34, '\P{^qmark}', "");
Expect(0, 33, '\p{qmark}', "");
Expect(1, 33, '\p{^qmark}', "");
Expect(1, 33, '\P{qmark}', "");
Expect(0, 33, '\P{^qmark}', "");
Expect(1, 34, '\p{QMark}', "");
Expect(0, 34, '\p{^QMark}', "");
Expect(0, 34, '\P{QMark}', "");
Expect(1, 34, '\P{^QMark}', "");
Expect(0, 33, '\p{QMark}', "");
Expect(1, 33, '\p{^QMark}', "");
Expect(1, 33, '\P{QMark}', "");
Expect(0, 33, '\P{^QMark}', "");
Error('\p{_IS_qmark:=}');
Error('\P{_IS_qmark:=}');
Expect(1, 34, '\p{isqmark}', "");
Expect(0, 34, '\p{^isqmark}', "");
Expect(0, 34, '\P{isqmark}', "");
Expect(1, 34, '\P{^isqmark}', "");
Expect(0, 33, '\p{isqmark}', "");
Expect(1, 33, '\p{^isqmark}', "");
Expect(1, 33, '\P{isqmark}', "");
Expect(0, 33, '\P{^isqmark}', "");
Expect(1, 34, '\p{-	IsQMark}', "");
Expect(0, 34, '\p{^-	IsQMark}', "");
Expect(0, 34, '\P{-	IsQMark}', "");
Expect(1, 34, '\P{^-	IsQMark}', "");
Expect(0, 33, '\p{-	IsQMark}', "");
Expect(1, 33, '\p{^-	IsQMark}', "");
Expect(1, 33, '\P{-	IsQMark}', "");
Expect(0, 33, '\P{^-	IsQMark}', "");
Error('\p{ IN/a/Tibetan}');
Error('\P{ IN/a/Tibetan}');
Expect(1, 4095, '\p{intibetan}', "");
Expect(0, 4095, '\p{^intibetan}', "");
Expect(0, 4095, '\P{intibetan}', "");
Expect(1, 4095, '\P{^intibetan}', "");
Expect(0, 3839, '\p{intibetan}', "");
Expect(1, 3839, '\p{^intibetan}', "");
Expect(1, 3839, '\P{intibetan}', "");
Expect(0, 3839, '\P{^intibetan}', "");
Expect(1, 4095, '\p{In	tibetan}', "");
Expect(0, 4095, '\p{^In	tibetan}', "");
Expect(0, 4095, '\P{In	tibetan}', "");
Expect(1, 4095, '\P{^In	tibetan}', "");
Expect(0, 3839, '\p{In	tibetan}', "");
Expect(1, 3839, '\p{^In	tibetan}', "");
Expect(1, 3839, '\P{In	tibetan}', "");
Expect(0, 3839, '\P{^In	tibetan}', "");
Error('\p{ /a/Supplemental-Mathematical_OPERATORS}');
Error('\P{ /a/Supplemental-Mathematical_OPERATORS}');
Expect(1, 11007, '\p{supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{-_supplemental MathematicalOperators}', "");
Expect(0, 11007, '\p{^-_supplemental MathematicalOperators}', "");
Expect(0, 11007, '\P{-_supplemental MathematicalOperators}', "");
Expect(1, 11007, '\P{^-_supplemental MathematicalOperators}', "");
Expect(0, 10751, '\p{-_supplemental MathematicalOperators}', "");
Expect(1, 10751, '\p{^-_supplemental MathematicalOperators}', "");
Expect(1, 10751, '\P{-_supplemental MathematicalOperators}', "");
Expect(0, 10751, '\P{^-_supplemental MathematicalOperators}', "");
Error('\p{	:=Is	Supplemental mathematical_OPERATORS}');
Error('\P{	:=Is	Supplemental mathematical_OPERATORS}');
Expect(1, 11007, '\p{issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(0, 11007, '\p{^ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(0, 11007, '\P{ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(1, 11007, '\P{^ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(0, 10751, '\p{ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(1, 10751, '\p{^ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(1, 10751, '\P{ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Expect(0, 10751, '\P{^ _Is_SUPPLEMENTAL Mathematical_Operators}', "");
Error('\p{_Insupplemental MATHEMATICAL	OPERATORS/a/}');
Error('\P{_Insupplemental MATHEMATICAL	OPERATORS/a/}');
Expect(1, 11007, '\p{insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{ _In	Supplemental	mathematical	operators}', "");
Expect(0, 11007, '\p{^ _In	Supplemental	mathematical	operators}', "");
Expect(0, 11007, '\P{ _In	Supplemental	mathematical	operators}', "");
Expect(1, 11007, '\P{^ _In	Supplemental	mathematical	operators}', "");
Expect(0, 10751, '\p{ _In	Supplemental	mathematical	operators}', "");
Expect(1, 10751, '\p{^ _In	Supplemental	mathematical	operators}', "");
Expect(1, 10751, '\P{ _In	Supplemental	mathematical	operators}', "");
Expect(0, 10751, '\P{^ _In	Supplemental	mathematical	operators}', "");
Error('\p{-In	CARIAN/a/}');
Error('\P{-In	CARIAN/a/}');
Expect(1, 66271, '\p{incarian}', "");
Expect(0, 66271, '\p{^incarian}', "");
Expect(0, 66271, '\P{incarian}', "");
Expect(1, 66271, '\P{^incarian}', "");
Expect(0, 66207, '\p{incarian}', "");
Expect(1, 66207, '\p{^incarian}', "");
Expect(1, 66207, '\P{incarian}', "");
Expect(0, 66207, '\P{^incarian}', "");
Expect(1, 66271, '\p{		In-Carian}', "");
Expect(0, 66271, '\p{^		In-Carian}', "");
Expect(0, 66271, '\P{		In-Carian}', "");
Expect(1, 66271, '\P{^		In-Carian}', "");
Expect(0, 66207, '\p{		In-Carian}', "");
Expect(1, 66207, '\p{^		In-Carian}', "");
Expect(1, 66207, '\P{		In-Carian}', "");
Expect(0, 66207, '\P{^		In-Carian}', "");
Error('\p{_/a/in	Arabic}');
Error('\P{_/a/in	Arabic}');
Expect(1, 1791, '\p{inarabic}', "");
Expect(0, 1791, '\p{^inarabic}', "");
Expect(0, 1791, '\P{inarabic}', "");
Expect(1, 1791, '\P{^inarabic}', "");
Expect(0, 1535, '\p{inarabic}', "");
Expect(1, 1535, '\p{^inarabic}', "");
Expect(1, 1535, '\P{inarabic}', "");
Expect(0, 1535, '\P{^inarabic}', "");
Expect(1, 1791, '\p{	 in Arabic}', "");
Expect(0, 1791, '\p{^	 in Arabic}', "");
Expect(0, 1791, '\P{	 in Arabic}', "");
Expect(1, 1791, '\P{^	 in Arabic}', "");
Expect(0, 1535, '\p{	 in Arabic}', "");
Expect(1, 1535, '\p{^	 in Arabic}', "");
Expect(1, 1535, '\P{	 in Arabic}', "");
Expect(0, 1535, '\P{^	 in Arabic}', "");
Error('\p{:=-PosixCntrl}');
Error('\P{:=-PosixCntrl}');
Expect(1, 31, '\p{posixcntrl}', "");
Expect(0, 31, '\p{^posixcntrl}', "");
Expect(0, 31, '\P{posixcntrl}', "");
Expect(1, 31, '\P{^posixcntrl}', "");
Expect(0, 126, '\p{posixcntrl}', "");
Expect(1, 126, '\p{^posixcntrl}', "");
Expect(1, 126, '\P{posixcntrl}', "");
Expect(0, 126, '\P{^posixcntrl}', "");
Expect(1, 31, '\p{	-POSIXCNTRL}', "");
Expect(0, 31, '\p{^	-POSIXCNTRL}', "");
Expect(0, 31, '\P{	-POSIXCNTRL}', "");
Expect(1, 31, '\P{^	-POSIXCNTRL}', "");
Expect(0, 126, '\p{	-POSIXCNTRL}', "");
Expect(1, 126, '\p{^	-POSIXCNTRL}', "");
Expect(1, 126, '\P{	-POSIXCNTRL}', "");
Expect(0, 126, '\P{^	-POSIXCNTRL}', "");
Error('\p{		IS/a/PosixCntrl}');
Error('\P{		IS/a/PosixCntrl}');
Expect(1, 31, '\p{isposixcntrl}', "");
Expect(0, 31, '\p{^isposixcntrl}', "");
Expect(0, 31, '\P{isposixcntrl}', "");
Expect(1, 31, '\P{^isposixcntrl}', "");
Expect(0, 126, '\p{isposixcntrl}', "");
Expect(1, 126, '\p{^isposixcntrl}', "");
Expect(1, 126, '\P{isposixcntrl}', "");
Expect(0, 126, '\P{^isposixcntrl}', "");
Expect(1, 31, '\p{	 Is POSIXCNTRL}', "");
Expect(0, 31, '\p{^	 Is POSIXCNTRL}', "");
Expect(0, 31, '\P{	 Is POSIXCNTRL}', "");
Expect(1, 31, '\P{^	 Is POSIXCNTRL}', "");
Expect(0, 126, '\p{	 Is POSIXCNTRL}', "");
Expect(1, 126, '\p{^	 Is POSIXCNTRL}', "");
Expect(1, 126, '\P{	 Is POSIXCNTRL}', "");
Expect(0, 126, '\P{^	 Is POSIXCNTRL}', "");
Error('\p{:=_	InGothic}');
Error('\P{:=_	InGothic}');
Expect(1, 66383, '\p{ingothic}', "");
Expect(0, 66383, '\p{^ingothic}', "");
Expect(0, 66383, '\P{ingothic}', "");
Expect(1, 66383, '\P{^ingothic}', "");
Expect(0, 66351, '\p{ingothic}', "");
Expect(1, 66351, '\p{^ingothic}', "");
Expect(1, 66351, '\P{ingothic}', "");
Expect(0, 66351, '\P{^ingothic}', "");
Expect(1, 66383, '\p{_In-Gothic}', "");
Expect(0, 66383, '\p{^_In-Gothic}', "");
Expect(0, 66383, '\P{_In-Gothic}', "");
Expect(1, 66383, '\P{^_In-Gothic}', "");
Expect(0, 66351, '\p{_In-Gothic}', "");
Expect(1, 66351, '\p{^_In-Gothic}', "");
Expect(1, 66351, '\P{_In-Gothic}', "");
Expect(0, 66351, '\P{^_In-Gothic}', "");
Error('\p{:=  mark}');
Error('\P{:=  mark}');
Expect(1, 879, '\p{mark}', "");
Expect(0, 879, '\p{^mark}', "");
Expect(0, 879, '\P{mark}', "");
Expect(1, 879, '\P{^mark}', "");
Expect(0, 767, '\p{mark}', "");
Expect(1, 767, '\p{^mark}', "");
Expect(1, 767, '\P{mark}', "");
Expect(0, 767, '\P{^mark}', "");
Expect(1, 879, '\p{  Mark}', "");
Expect(0, 879, '\p{^  Mark}', "");
Expect(0, 879, '\P{  Mark}', "");
Expect(1, 879, '\P{^  Mark}', "");
Expect(0, 767, '\p{  Mark}', "");
Expect(1, 767, '\p{^  Mark}', "");
Expect(1, 767, '\P{  Mark}', "");
Expect(0, 767, '\P{^  Mark}', "");
Error('\p{:= _is	Mark}');
Error('\P{:= _is	Mark}');
Expect(1, 879, '\p{ismark}', "");
Expect(0, 879, '\p{^ismark}', "");
Expect(0, 879, '\P{ismark}', "");
Expect(1, 879, '\P{^ismark}', "");
Expect(0, 767, '\p{ismark}', "");
Expect(1, 767, '\p{^ismark}', "");
Expect(1, 767, '\P{ismark}', "");
Expect(0, 767, '\P{^ismark}', "");
Expect(1, 879, '\p{__IS MARK}', "");
Expect(0, 879, '\p{^__IS MARK}', "");
Expect(0, 879, '\P{__IS MARK}', "");
Expect(1, 879, '\P{^__IS MARK}', "");
Expect(0, 767, '\p{__IS MARK}', "");
Expect(1, 767, '\p{^__IS MARK}', "");
Expect(1, 767, '\P{__IS MARK}', "");
Expect(0, 767, '\P{^__IS MARK}', "");
Error('\p{ /a/m}');
Error('\P{ /a/m}');
Expect(1, 879, '\p{m}', "");
Expect(0, 879, '\p{^m}', "");
Expect(0, 879, '\P{m}', "");
Expect(1, 879, '\P{^m}', "");
Expect(0, 767, '\p{m}', "");
Expect(1, 767, '\p{^m}', "");
Expect(1, 767, '\P{m}', "");
Expect(0, 767, '\P{^m}', "");
Expect(1, 879, '\p{__M}', "");
Expect(0, 879, '\p{^__M}', "");
Expect(0, 879, '\P{__M}', "");
Expect(1, 879, '\P{^__M}', "");
Expect(0, 767, '\p{__M}', "");
Expect(1, 767, '\p{^__M}', "");
Expect(1, 767, '\P{__M}', "");
Expect(0, 767, '\P{^__M}', "");
Error('\p{_/a/Is M}');
Error('\P{_/a/Is M}');
Expect(1, 879, '\p{ism}', "");
Expect(0, 879, '\p{^ism}', "");
Expect(0, 879, '\P{ism}', "");
Expect(1, 879, '\P{^ism}', "");
Expect(0, 767, '\p{ism}', "");
Expect(1, 767, '\p{^ism}', "");
Expect(1, 767, '\P{ism}', "");
Expect(0, 767, '\P{^ism}', "");
Expect(1, 879, '\p{Is	M}', "");
Expect(0, 879, '\p{^Is	M}', "");
Expect(0, 879, '\P{Is	M}', "");
Expect(1, 879, '\P{^Is	M}', "");
Expect(0, 767, '\p{Is	M}', "");
Expect(1, 767, '\p{^Is	M}', "");
Expect(1, 767, '\P{Is	M}', "");
Expect(0, 767, '\P{^Is	M}', "");
Error('\p{-Hangul_SYLLABLES:=}');
Error('\P{-Hangul_SYLLABLES:=}');
Expect(1, 55215, '\p{hangulsyllables}', "");
Expect(0, 55215, '\p{^hangulsyllables}', "");
Expect(0, 55215, '\P{hangulsyllables}', "");
Expect(1, 55215, '\P{^hangulsyllables}', "");
Expect(0, 44031, '\p{hangulsyllables}', "");
Expect(1, 44031, '\p{^hangulsyllables}', "");
Expect(1, 44031, '\P{hangulsyllables}', "");
Expect(0, 44031, '\P{^hangulsyllables}', "");
Expect(1, 55215, '\p{-Hangul SYLLABLES}', "");
Expect(0, 55215, '\p{^-Hangul SYLLABLES}', "");
Expect(0, 55215, '\P{-Hangul SYLLABLES}', "");
Expect(1, 55215, '\P{^-Hangul SYLLABLES}', "");
Expect(0, 44031, '\p{-Hangul SYLLABLES}', "");
Expect(1, 44031, '\p{^-Hangul SYLLABLES}', "");
Expect(1, 44031, '\P{-Hangul SYLLABLES}', "");
Expect(0, 44031, '\P{^-Hangul SYLLABLES}', "");
Error('\p{_IsHANGUL	Syllables/a/}');
Error('\P{_IsHANGUL	Syllables/a/}');
Expect(1, 55215, '\p{ishangulsyllables}', "");
Expect(0, 55215, '\p{^ishangulsyllables}', "");
Expect(0, 55215, '\P{ishangulsyllables}', "");
Expect(1, 55215, '\P{^ishangulsyllables}', "");
Expect(0, 44031, '\p{ishangulsyllables}', "");
Expect(1, 44031, '\p{^ishangulsyllables}', "");
Expect(1, 44031, '\P{ishangulsyllables}', "");
Expect(0, 44031, '\P{^ishangulsyllables}', "");
Expect(1, 55215, '\p{		Is	HANGUL-Syllables}', "");
Expect(0, 55215, '\p{^		Is	HANGUL-Syllables}', "");
Expect(0, 55215, '\P{		Is	HANGUL-Syllables}', "");
Expect(1, 55215, '\P{^		Is	HANGUL-Syllables}', "");
Expect(0, 44031, '\p{		Is	HANGUL-Syllables}', "");
Expect(1, 44031, '\p{^		Is	HANGUL-Syllables}', "");
Expect(1, 44031, '\P{		Is	HANGUL-Syllables}', "");
Expect(0, 44031, '\P{^		Is	HANGUL-Syllables}', "");
Error('\p{__In/a/HangulSyllables}');
Error('\P{__In/a/HangulSyllables}');
Expect(1, 55215, '\p{inhangulsyllables}', "");
Expect(0, 55215, '\p{^inhangulsyllables}', "");
Expect(0, 55215, '\P{inhangulsyllables}', "");
Expect(1, 55215, '\P{^inhangulsyllables}', "");
Expect(0, 44031, '\p{inhangulsyllables}', "");
Expect(1, 44031, '\p{^inhangulsyllables}', "");
Expect(1, 44031, '\P{inhangulsyllables}', "");
Expect(0, 44031, '\P{^inhangulsyllables}', "");
Expect(1, 55215, '\p{  In	Hangul	syllables}', "");
Expect(0, 55215, '\p{^  In	Hangul	syllables}', "");
Expect(0, 55215, '\P{  In	Hangul	syllables}', "");
Expect(1, 55215, '\P{^  In	Hangul	syllables}', "");
Expect(0, 44031, '\p{  In	Hangul	syllables}', "");
Expect(1, 44031, '\p{^  In	Hangul	syllables}', "");
Expect(1, 44031, '\P{  In	Hangul	syllables}', "");
Expect(0, 44031, '\P{^  In	Hangul	syllables}', "");
Error('\p{_:=Space}');
Error('\P{_:=Space}');
Expect(1, 13, '\p{space}', "");
Expect(0, 13, '\p{^space}', "");
Expect(0, 13, '\P{space}', "");
Expect(1, 13, '\P{^space}', "");
Expect(0, 8, '\p{space}', "");
Expect(1, 8, '\p{^space}', "");
Expect(1, 8, '\P{space}', "");
Expect(0, 8, '\P{^space}', "");
Expect(1, 13, '\p{- SPACE}', "");
Expect(0, 13, '\p{^- SPACE}', "");
Expect(0, 13, '\P{- SPACE}', "");
Expect(1, 13, '\P{^- SPACE}', "");
Expect(0, 8, '\p{- SPACE}', "");
Expect(1, 8, '\p{^- SPACE}', "");
Expect(1, 8, '\P{- SPACE}', "");
Expect(0, 8, '\P{^- SPACE}', "");
Error('\p{ isspace/a/}');
Error('\P{ isspace/a/}');
Expect(1, 13, '\p{isspace}', "");
Expect(0, 13, '\p{^isspace}', "");
Expect(0, 13, '\P{isspace}', "");
Expect(1, 13, '\P{^isspace}', "");
Expect(0, 8, '\p{isspace}', "");
Expect(1, 8, '\p{^isspace}', "");
Expect(1, 8, '\P{isspace}', "");
Expect(0, 8, '\P{^isspace}', "");
Expect(1, 13, '\p{ _Is space}', "");
Expect(0, 13, '\p{^ _Is space}', "");
Expect(0, 13, '\P{ _Is space}', "");
Expect(1, 13, '\P{^ _Is space}', "");
Expect(0, 8, '\p{ _Is space}', "");
Expect(1, 8, '\p{^ _Is space}', "");
Expect(1, 8, '\P{ _Is space}', "");
Expect(0, 8, '\P{^ _Is space}', "");
Error('\p{	:=In_telugu}');
Error('\P{	:=In_telugu}');
Expect(1, 3199, '\p{intelugu}', "");
Expect(0, 3199, '\p{^intelugu}', "");
Expect(0, 3199, '\P{intelugu}', "");
Expect(1, 3199, '\P{^intelugu}', "");
Expect(0, 3071, '\p{intelugu}', "");
Expect(1, 3071, '\p{^intelugu}', "");
Expect(1, 3071, '\P{intelugu}', "");
Expect(0, 3071, '\P{^intelugu}', "");
Expect(1, 3199, '\p{	In	Telugu}', "");
Expect(0, 3199, '\p{^	In	Telugu}', "");
Expect(0, 3199, '\P{	In	Telugu}', "");
Expect(1, 3199, '\P{^	In	Telugu}', "");
Expect(0, 3071, '\p{	In	Telugu}', "");
Expect(1, 3071, '\p{^	In	Telugu}', "");
Expect(1, 3071, '\P{	In	Telugu}', "");
Expect(0, 3071, '\P{^	In	Telugu}', "");
Error('\p{	:=cjk_Unified-IdeographsExtension	B}');
Error('\P{	:=cjk_Unified-IdeographsExtension	B}');
Expect(1, 173791, '\p{cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(0, 173791, '\p{^- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(0, 173791, '\P{- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(1, 173791, '\P{^- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(0, 1, '\p{- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(1, 1, '\p{^- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(1, 1, '\P{- CJKunifiedIDEOGRAPHS_extension-B}', "");
Expect(0, 1, '\P{^- CJKunifiedIDEOGRAPHS_extension-B}', "");
Error('\p{_ Is-CJK/a/UnifiedIdeographsExtension_B}');
Error('\P{_ Is-CJK/a/UnifiedIdeographsExtension_B}');
Expect(1, 173791, '\p{iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(0, 173791, '\p{^ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(0, 173791, '\P{ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(1, 173791, '\P{^ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(0, 1, '\p{ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(1, 1, '\p{^ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(1, 1, '\P{ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Expect(0, 1, '\P{^ -IsCJK	UnifiedIdeographs EXTENSION_B}', "");
Error('\p{--In:=CJK unified ideographs-EXTENSION_B}');
Error('\P{--In:=CJK unified ideographs-EXTENSION_B}');
Expect(1, 173791, '\p{incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{_ InCJK-Unified_ideographs extension	B}', "");
Expect(0, 173791, '\p{^_ InCJK-Unified_ideographs extension	B}', "");
Expect(0, 173791, '\P{_ InCJK-Unified_ideographs extension	B}', "");
Expect(1, 173791, '\P{^_ InCJK-Unified_ideographs extension	B}', "");
Expect(0, 1, '\p{_ InCJK-Unified_ideographs extension	B}', "");
Expect(1, 1, '\p{^_ InCJK-Unified_ideographs extension	B}', "");
Expect(1, 1, '\P{_ InCJK-Unified_ideographs extension	B}', "");
Expect(0, 1, '\P{^_ InCJK-Unified_ideographs extension	B}', "");
Error('\p{_ In/a/Taiviet}');
Error('\P{_ In/a/Taiviet}');
Expect(1, 43743, '\p{intaiviet}', "");
Expect(0, 43743, '\p{^intaiviet}', "");
Expect(0, 43743, '\P{intaiviet}', "");
Expect(1, 43743, '\P{^intaiviet}', "");
Expect(0, 43647, '\p{intaiviet}', "");
Expect(1, 43647, '\p{^intaiviet}', "");
Expect(1, 43647, '\P{intaiviet}', "");
Expect(0, 43647, '\P{^intaiviet}', "");
Expect(1, 43743, '\p{	-InTaiViet}', "");
Expect(0, 43743, '\p{^	-InTaiViet}', "");
Expect(0, 43743, '\P{	-InTaiViet}', "");
Expect(1, 43743, '\P{^	-InTaiViet}', "");
Expect(0, 43647, '\p{	-InTaiViet}', "");
Expect(1, 43647, '\p{^	-InTaiViet}', "");
Expect(1, 43647, '\P{	-InTaiViet}', "");
Expect(0, 43647, '\P{^	-InTaiViet}', "");
Error('\p{In:=syloti-Nagri}');
Error('\P{In:=syloti-Nagri}');
Expect(1, 43055, '\p{insylotinagri}', "");
Expect(0, 43055, '\p{^insylotinagri}', "");
Expect(0, 43055, '\P{insylotinagri}', "");
Expect(1, 43055, '\P{^insylotinagri}', "");
Expect(0, 43007, '\p{insylotinagri}', "");
Expect(1, 43007, '\p{^insylotinagri}', "");
Expect(1, 43007, '\P{insylotinagri}', "");
Expect(0, 43007, '\P{^insylotinagri}', "");
Expect(1, 43055, '\p{ 	IN-SYLOTI_NAGRI}', "");
Expect(0, 43055, '\p{^ 	IN-SYLOTI_NAGRI}', "");
Expect(0, 43055, '\P{ 	IN-SYLOTI_NAGRI}', "");
Expect(1, 43055, '\P{^ 	IN-SYLOTI_NAGRI}', "");
Expect(0, 43007, '\p{ 	IN-SYLOTI_NAGRI}', "");
Expect(1, 43007, '\p{^ 	IN-SYLOTI_NAGRI}', "");
Expect(1, 43007, '\P{ 	IN-SYLOTI_NAGRI}', "");
Expect(0, 43007, '\P{^ 	IN-SYLOTI_NAGRI}', "");
Error('\p{  cuneiform	NumbersAND/a/punctuation}');
Error('\P{  cuneiform	NumbersAND/a/punctuation}');
Expect(1, 74879, '\p{cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(0, 74879, '\p{^_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(0, 74879, '\P{_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(1, 74879, '\P{^_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(0, 74751, '\p{_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(1, 74751, '\p{^_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(1, 74751, '\P{_-CUNEIFORM_Numbers-And_punctuation}', "");
Expect(0, 74751, '\P{^_-CUNEIFORM_Numbers-And_punctuation}', "");
Error('\p{:= 	IS-CuneiformNumbers_And punctuation}');
Error('\P{:= 	IS-CuneiformNumbers_And punctuation}');
Expect(1, 74879, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(0, 74879, '\p{^ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(0, 74879, '\P{ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(1, 74879, '\P{^ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(0, 74751, '\p{ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(1, 74751, '\p{^ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(1, 74751, '\P{ _ISCUNEIFORM numbersAnd punctuation}', "");
Expect(0, 74751, '\P{^ _ISCUNEIFORM numbersAnd punctuation}', "");
Error('\p{ _In_Cuneiform:=Numbers_ANDPunctuation}');
Error('\P{ _In_Cuneiform:=Numbers_ANDPunctuation}');
Expect(1, 74879, '\p{incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(0, 74879, '\p{^__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(0, 74879, '\P{__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(1, 74879, '\P{^__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(0, 74751, '\p{__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(1, 74751, '\p{^__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(1, 74751, '\P{__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Expect(0, 74751, '\P{^__in CUNEIFORM_NUMBERSAnd	Punctuation}', "");
Error('\p{/a/_KAITHI}');
Error('\P{/a/_KAITHI}');
Expect(1, 69825, '\p{kaithi}', "");
Expect(0, 69825, '\p{^kaithi}', "");
Expect(0, 69825, '\P{kaithi}', "");
Expect(1, 69825, '\P{^kaithi}', "");
Expect(0, 69759, '\p{kaithi}', "");
Expect(1, 69759, '\p{^kaithi}', "");
Expect(1, 69759, '\P{kaithi}', "");
Expect(0, 69759, '\P{^kaithi}', "");
Expect(1, 69825, '\p{_	kaithi}', "");
Expect(0, 69825, '\p{^_	kaithi}', "");
Expect(0, 69825, '\P{_	kaithi}', "");
Expect(1, 69825, '\P{^_	kaithi}', "");
Expect(0, 69759, '\p{_	kaithi}', "");
Expect(1, 69759, '\p{^_	kaithi}', "");
Expect(1, 69759, '\P{_	kaithi}', "");
Expect(0, 69759, '\P{^_	kaithi}', "");
Error('\p{	_Is/a/Kaithi}');
Error('\P{	_Is/a/Kaithi}');
Expect(1, 69825, '\p{iskaithi}', "");
Expect(0, 69825, '\p{^iskaithi}', "");
Expect(0, 69825, '\P{iskaithi}', "");
Expect(1, 69825, '\P{^iskaithi}', "");
Expect(0, 69759, '\p{iskaithi}', "");
Expect(1, 69759, '\p{^iskaithi}', "");
Expect(1, 69759, '\P{iskaithi}', "");
Expect(0, 69759, '\P{^iskaithi}', "");
Expect(1, 69825, '\p{-_IsKaithi}', "");
Expect(0, 69825, '\p{^-_IsKaithi}', "");
Expect(0, 69825, '\P{-_IsKaithi}', "");
Expect(1, 69825, '\P{^-_IsKaithi}', "");
Expect(0, 69759, '\p{-_IsKaithi}', "");
Expect(1, 69759, '\p{^-_IsKaithi}', "");
Expect(1, 69759, '\P{-_IsKaithi}', "");
Expect(0, 69759, '\P{^-_IsKaithi}', "");
Error('\p{:=-Kthi}');
Error('\P{:=-Kthi}');
Expect(1, 69825, '\p{kthi}', "");
Expect(0, 69825, '\p{^kthi}', "");
Expect(0, 69825, '\P{kthi}', "");
Expect(1, 69825, '\P{^kthi}', "");
Expect(0, 69759, '\p{kthi}', "");
Expect(1, 69759, '\p{^kthi}', "");
Expect(1, 69759, '\P{kthi}', "");
Expect(0, 69759, '\P{^kthi}', "");
Expect(1, 69825, '\p{--kthi}', "");
Expect(0, 69825, '\p{^--kthi}', "");
Expect(0, 69825, '\P{--kthi}', "");
Expect(1, 69825, '\P{^--kthi}', "");
Expect(0, 69759, '\p{--kthi}', "");
Expect(1, 69759, '\p{^--kthi}', "");
Expect(1, 69759, '\P{--kthi}', "");
Expect(0, 69759, '\P{^--kthi}', "");
Error('\p{_-is-Kthi/a/}');
Error('\P{_-is-Kthi/a/}');
Expect(1, 69825, '\p{iskthi}', "");
Expect(0, 69825, '\p{^iskthi}', "");
Expect(0, 69825, '\P{iskthi}', "");
Expect(1, 69825, '\P{^iskthi}', "");
Expect(0, 69759, '\p{iskthi}', "");
Expect(1, 69759, '\p{^iskthi}', "");
Expect(1, 69759, '\P{iskthi}', "");
Expect(0, 69759, '\P{^iskthi}', "");
Expect(1, 69825, '\p{_-Is_KTHI}', "");
Expect(0, 69825, '\p{^_-Is_KTHI}', "");
Expect(0, 69825, '\P{_-Is_KTHI}', "");
Expect(1, 69825, '\P{^_-Is_KTHI}', "");
Expect(0, 69759, '\p{_-Is_KTHI}', "");
Expect(1, 69759, '\p{^_-Is_KTHI}', "");
Expect(1, 69759, '\P{_-Is_KTHI}', "");
Expect(0, 69759, '\P{^_-Is_KTHI}', "");
Error('\p{_-In	olditalic:=}');
Error('\P{_-In	olditalic:=}');
Expect(1, 66351, '\p{inolditalic}', "");
Expect(0, 66351, '\p{^inolditalic}', "");
Expect(0, 66351, '\P{inolditalic}', "");
Expect(1, 66351, '\P{^inolditalic}', "");
Expect(0, 66303, '\p{inolditalic}', "");
Expect(1, 66303, '\p{^inolditalic}', "");
Expect(1, 66303, '\P{inolditalic}', "");
Expect(0, 66303, '\P{^inolditalic}', "");
Expect(1, 66351, '\p{_inOLDItalic}', "");
Expect(0, 66351, '\p{^_inOLDItalic}', "");
Expect(0, 66351, '\P{_inOLDItalic}', "");
Expect(1, 66351, '\P{^_inOLDItalic}', "");
Expect(0, 66303, '\p{_inOLDItalic}', "");
Expect(1, 66303, '\p{^_inOLDItalic}', "");
Expect(1, 66303, '\P{_inOLDItalic}', "");
Expect(0, 66303, '\P{^_inOLDItalic}', "");
Error('\p{ :=in	AVESTAN}');
Error('\P{ :=in	AVESTAN}');
Expect(1, 68415, '\p{inavestan}', "");
Expect(0, 68415, '\p{^inavestan}', "");
Expect(0, 68415, '\P{inavestan}', "");
Expect(1, 68415, '\P{^inavestan}', "");
Expect(0, 68351, '\p{inavestan}', "");
Expect(1, 68351, '\p{^inavestan}', "");
Expect(1, 68351, '\P{inavestan}', "");
Expect(0, 68351, '\P{^inavestan}', "");
Expect(1, 68415, '\p{_INavestan}', "");
Expect(0, 68415, '\p{^_INavestan}', "");
Expect(0, 68415, '\P{_INavestan}', "");
Expect(1, 68415, '\P{^_INavestan}', "");
Expect(0, 68351, '\p{_INavestan}', "");
Expect(1, 68351, '\p{^_INavestan}', "");
Expect(1, 68351, '\P{_INavestan}', "");
Expect(0, 68351, '\P{^_INavestan}', "");
Error('\p{:=-	MISCELLANEOUS-Symbols}');
Error('\P{:=-	MISCELLANEOUS-Symbols}');
Expect(1, 9983, '\p{miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^miscellaneoussymbols}', "");
Expect(0, 9983, '\P{miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^miscellaneoussymbols}', "");
Expect(0, 9727, '\p{miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^miscellaneoussymbols}', "");
Expect(1, 9727, '\P{miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^miscellaneoussymbols}', "");
Expect(1, 9983, '\p{-Miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^-Miscellaneoussymbols}', "");
Expect(0, 9983, '\P{-Miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^-Miscellaneoussymbols}', "");
Expect(0, 9727, '\p{-Miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^-Miscellaneoussymbols}', "");
Expect(1, 9727, '\P{-Miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^-Miscellaneoussymbols}', "");
Error('\p{	Is	Miscellaneous/a/SYMBOLS}');
Error('\P{	Is	Miscellaneous/a/SYMBOLS}');
Expect(1, 9983, '\p{ismiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^ismiscellaneoussymbols}', "");
Expect(0, 9983, '\P{ismiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^ismiscellaneoussymbols}', "");
Expect(0, 9727, '\p{ismiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^ismiscellaneoussymbols}', "");
Expect(1, 9727, '\P{ismiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^ismiscellaneoussymbols}', "");
Expect(1, 9983, '\p{ is-MISCELLANEOUS_symbols}', "");
Expect(0, 9983, '\p{^ is-MISCELLANEOUS_symbols}', "");
Expect(0, 9983, '\P{ is-MISCELLANEOUS_symbols}', "");
Expect(1, 9983, '\P{^ is-MISCELLANEOUS_symbols}', "");
Expect(0, 9727, '\p{ is-MISCELLANEOUS_symbols}', "");
Expect(1, 9727, '\p{^ is-MISCELLANEOUS_symbols}', "");
Expect(1, 9727, '\P{ is-MISCELLANEOUS_symbols}', "");
Expect(0, 9727, '\P{^ is-MISCELLANEOUS_symbols}', "");
Error('\p{-/a/in_Miscellaneous-SYMBOLS}');
Error('\P{-/a/in_Miscellaneous-SYMBOLS}');
Expect(1, 9983, '\p{inmiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^inmiscellaneoussymbols}', "");
Expect(0, 9983, '\P{inmiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^inmiscellaneoussymbols}', "");
Expect(0, 9727, '\p{inmiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^inmiscellaneoussymbols}', "");
Expect(1, 9727, '\P{inmiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^inmiscellaneoussymbols}', "");
Expect(1, 9983, '\p{_In-MiscellaneousSymbols}', "");
Expect(0, 9983, '\p{^_In-MiscellaneousSymbols}', "");
Expect(0, 9983, '\P{_In-MiscellaneousSymbols}', "");
Expect(1, 9983, '\P{^_In-MiscellaneousSymbols}', "");
Expect(0, 9727, '\p{_In-MiscellaneousSymbols}', "");
Expect(1, 9727, '\p{^_In-MiscellaneousSymbols}', "");
Expect(1, 9727, '\P{_In-MiscellaneousSymbols}', "");
Expect(0, 9727, '\P{^_In-MiscellaneousSymbols}', "");
Error('\p{-/a/In	javanese}');
Error('\P{-/a/In	javanese}');
Expect(1, 43487, '\p{injavanese}', "");
Expect(0, 43487, '\p{^injavanese}', "");
Expect(0, 43487, '\P{injavanese}', "");
Expect(1, 43487, '\P{^injavanese}', "");
Expect(0, 43391, '\p{injavanese}', "");
Expect(1, 43391, '\p{^injavanese}', "");
Expect(1, 43391, '\P{injavanese}', "");
Expect(0, 43391, '\P{^injavanese}', "");
Expect(1, 43487, '\p{		IN-javanese}', "");
Expect(0, 43487, '\p{^		IN-javanese}', "");
Expect(0, 43487, '\P{		IN-javanese}', "");
Expect(1, 43487, '\P{^		IN-javanese}', "");
Expect(0, 43391, '\p{		IN-javanese}', "");
Expect(1, 43391, '\p{^		IN-javanese}', "");
Expect(1, 43391, '\P{		IN-javanese}', "");
Expect(0, 43391, '\P{^		IN-javanese}', "");
Error('\p{	/a/PosixAlnum}');
Error('\P{	/a/PosixAlnum}');
Expect(1, 57, '\p{posixalnum}', "");
Expect(0, 57, '\p{^posixalnum}', "");
Expect(0, 57, '\P{posixalnum}', "");
Expect(1, 57, '\P{^posixalnum}', "");
Expect(0, 47, '\p{posixalnum}', "");
Expect(1, 47, '\p{^posixalnum}', "");
Expect(1, 47, '\P{posixalnum}', "");
Expect(0, 47, '\P{^posixalnum}', "");
Expect(1, 57, '\p{	posixalnum}', "");
Expect(0, 57, '\p{^	posixalnum}', "");
Expect(0, 57, '\P{	posixalnum}', "");
Expect(1, 57, '\P{^	posixalnum}', "");
Expect(0, 47, '\p{	posixalnum}', "");
Expect(1, 47, '\p{^	posixalnum}', "");
Expect(1, 47, '\P{	posixalnum}', "");
Expect(0, 47, '\P{^	posixalnum}', "");
Error('\p{-/a/is	PosixAlnum}');
Error('\P{-/a/is	PosixAlnum}');
Expect(1, 57, '\p{isposixalnum}', "");
Expect(0, 57, '\p{^isposixalnum}', "");
Expect(0, 57, '\P{isposixalnum}', "");
Expect(1, 57, '\P{^isposixalnum}', "");
Expect(0, 47, '\p{isposixalnum}', "");
Expect(1, 47, '\p{^isposixalnum}', "");
Expect(1, 47, '\P{isposixalnum}', "");
Expect(0, 47, '\P{^isposixalnum}', "");
Expect(1, 57, '\p{ _IsPOSIXALNUM}', "");
Expect(0, 57, '\p{^ _IsPOSIXALNUM}', "");
Expect(0, 57, '\P{ _IsPOSIXALNUM}', "");
Expect(1, 57, '\P{^ _IsPOSIXALNUM}', "");
Expect(0, 47, '\p{ _IsPOSIXALNUM}', "");
Expect(1, 47, '\p{^ _IsPOSIXALNUM}', "");
Expect(1, 47, '\P{ _IsPOSIXALNUM}', "");
Expect(0, 47, '\P{^ _IsPOSIXALNUM}', "");
Error('\p{_ arabic:=SUPPLEMENT}');
Error('\P{_ arabic:=SUPPLEMENT}');
Expect(1, 1919, '\p{arabicsupplement}', "");
Expect(0, 1919, '\p{^arabicsupplement}', "");
Expect(0, 1919, '\P{arabicsupplement}', "");
Expect(1, 1919, '\P{^arabicsupplement}', "");
Expect(0, 1871, '\p{arabicsupplement}', "");
Expect(1, 1871, '\p{^arabicsupplement}', "");
Expect(1, 1871, '\P{arabicsupplement}', "");
Expect(0, 1871, '\P{^arabicsupplement}', "");
Expect(1, 1919, '\p{_ Arabic-Supplement}', "");
Expect(0, 1919, '\p{^_ Arabic-Supplement}', "");
Expect(0, 1919, '\P{_ Arabic-Supplement}', "");
Expect(1, 1919, '\P{^_ Arabic-Supplement}', "");
Expect(0, 1871, '\p{_ Arabic-Supplement}', "");
Expect(1, 1871, '\p{^_ Arabic-Supplement}', "");
Expect(1, 1871, '\P{_ Arabic-Supplement}', "");
Expect(0, 1871, '\P{^_ Arabic-Supplement}', "");
Error('\p{- Is_Arabic:=supplement}');
Error('\P{- Is_Arabic:=supplement}');
Expect(1, 1919, '\p{isarabicsupplement}', "");
Expect(0, 1919, '\p{^isarabicsupplement}', "");
Expect(0, 1919, '\P{isarabicsupplement}', "");
Expect(1, 1919, '\P{^isarabicsupplement}', "");
Expect(0, 1871, '\p{isarabicsupplement}', "");
Expect(1, 1871, '\p{^isarabicsupplement}', "");
Expect(1, 1871, '\P{isarabicsupplement}', "");
Expect(0, 1871, '\P{^isarabicsupplement}', "");
Expect(1, 1919, '\p{ 	Is_ArabicSUPPLEMENT}', "");
Expect(0, 1919, '\p{^ 	Is_ArabicSUPPLEMENT}', "");
Expect(0, 1919, '\P{ 	Is_ArabicSUPPLEMENT}', "");
Expect(1, 1919, '\P{^ 	Is_ArabicSUPPLEMENT}', "");
Expect(0, 1871, '\p{ 	Is_ArabicSUPPLEMENT}', "");
Expect(1, 1871, '\p{^ 	Is_ArabicSUPPLEMENT}', "");
Expect(1, 1871, '\P{ 	Is_ArabicSUPPLEMENT}', "");
Expect(0, 1871, '\P{^ 	Is_ArabicSUPPLEMENT}', "");
Error('\p{	_in-ARABIC/a/SUPPLEMENT}');
Error('\P{	_in-ARABIC/a/SUPPLEMENT}');
Expect(1, 1919, '\p{inarabicsupplement}', "");
Expect(0, 1919, '\p{^inarabicsupplement}', "");
Expect(0, 1919, '\P{inarabicsupplement}', "");
Expect(1, 1919, '\P{^inarabicsupplement}', "");
Expect(0, 1871, '\p{inarabicsupplement}', "");
Expect(1, 1871, '\p{^inarabicsupplement}', "");
Expect(1, 1871, '\P{inarabicsupplement}', "");
Expect(0, 1871, '\P{^inarabicsupplement}', "");
Expect(1, 1919, '\p{InARABICSUPPLEMENT}', "");
Expect(0, 1919, '\p{^InARABICSUPPLEMENT}', "");
Expect(0, 1919, '\P{InARABICSUPPLEMENT}', "");
Expect(1, 1919, '\P{^InARABICSUPPLEMENT}', "");
Expect(0, 1871, '\p{InARABICSUPPLEMENT}', "");
Expect(1, 1871, '\p{^InARABICSUPPLEMENT}', "");
Expect(1, 1871, '\P{InARABICSUPPLEMENT}', "");
Expect(0, 1871, '\P{^InARABICSUPPLEMENT}', "");
Error('\p{_ cjk	Compatibility/a/Ideographs	Supplement}');
Error('\P{_ cjk	Compatibility/a/Ideographs	Supplement}');
Expect(1, 195103, '\p{cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{ -CJKcompatibilityideographs supplement}', "");
Expect(0, 195103, '\p{^ -CJKcompatibilityideographs supplement}', "");
Expect(0, 195103, '\P{ -CJKcompatibilityideographs supplement}', "");
Expect(1, 195103, '\P{^ -CJKcompatibilityideographs supplement}', "");
Expect(0, 194559, '\p{ -CJKcompatibilityideographs supplement}', "");
Expect(1, 194559, '\p{^ -CJKcompatibilityideographs supplement}', "");
Expect(1, 194559, '\P{ -CJKcompatibilityideographs supplement}', "");
Expect(0, 194559, '\P{^ -CJKcompatibilityideographs supplement}', "");
Error('\p{- is_cjkcompatibility-ideographs Supplement:=}');
Error('\P{- is_cjkcompatibility-ideographs Supplement:=}');
Expect(1, 195103, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(0, 195103, '\p{^_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(0, 195103, '\P{_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(1, 195103, '\P{^_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(0, 194559, '\p{_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(1, 194559, '\p{^_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(1, 194559, '\P{_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Expect(0, 194559, '\P{^_	IS_cjkCOMPATIBILITY_Ideographs	Supplement}', "");
Error('\p{	_In/a/CJK COMPATIBILITYideographs	Supplement}');
Error('\P{	_In/a/CJK COMPATIBILITYideographs	Supplement}');
Expect(1, 195103, '\p{incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\p{^-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\P{-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(1, 195103, '\P{^-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\p{-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\p{^-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\P{-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\P{^-inCJK COMPATIBILITYIDEOGRAPHSSupplement}', "");
Error('\p{__IN/a/gurmukhi}');
Error('\P{__IN/a/gurmukhi}');
Expect(1, 2687, '\p{ingurmukhi}', "");
Expect(0, 2687, '\p{^ingurmukhi}', "");
Expect(0, 2687, '\P{ingurmukhi}', "");
Expect(1, 2687, '\P{^ingurmukhi}', "");
Expect(0, 2559, '\p{ingurmukhi}', "");
Expect(1, 2559, '\p{^ingurmukhi}', "");
Expect(1, 2559, '\P{ingurmukhi}', "");
Expect(0, 2559, '\P{^ingurmukhi}', "");
Expect(1, 2687, '\p{- in gurmukhi}', "");
Expect(0, 2687, '\p{^- in gurmukhi}', "");
Expect(0, 2687, '\P{- in gurmukhi}', "");
Expect(1, 2687, '\P{^- in gurmukhi}', "");
Expect(0, 2559, '\p{- in gurmukhi}', "");
Expect(1, 2559, '\p{^- in gurmukhi}', "");
Expect(1, 2559, '\P{- in gurmukhi}', "");
Expect(0, 2559, '\P{^- in gurmukhi}', "");
Error('\p{-_Phaistos-disc/a/}');
Error('\P{-_Phaistos-disc/a/}');
Expect(1, 66047, '\p{phaistosdisc}', "");
Expect(0, 66047, '\p{^phaistosdisc}', "");
Expect(0, 66047, '\P{phaistosdisc}', "");
Expect(1, 66047, '\P{^phaistosdisc}', "");
Expect(0, 65999, '\p{phaistosdisc}', "");
Expect(1, 65999, '\p{^phaistosdisc}', "");
Expect(1, 65999, '\P{phaistosdisc}', "");
Expect(0, 65999, '\P{^phaistosdisc}', "");
Expect(1, 66047, '\p{ -Phaistos	Disc}', "");
Expect(0, 66047, '\p{^ -Phaistos	Disc}', "");
Expect(0, 66047, '\P{ -Phaistos	Disc}', "");
Expect(1, 66047, '\P{^ -Phaistos	Disc}', "");
Expect(0, 65999, '\p{ -Phaistos	Disc}', "");
Expect(1, 65999, '\p{^ -Phaistos	Disc}', "");
Expect(1, 65999, '\P{ -Phaistos	Disc}', "");
Expect(0, 65999, '\P{^ -Phaistos	Disc}', "");
Error('\p{_-IS:=PhaistosDisc}');
Error('\P{_-IS:=PhaistosDisc}');
Expect(1, 66047, '\p{isphaistosdisc}', "");
Expect(0, 66047, '\p{^isphaistosdisc}', "");
Expect(0, 66047, '\P{isphaistosdisc}', "");
Expect(1, 66047, '\P{^isphaistosdisc}', "");
Expect(0, 65999, '\p{isphaistosdisc}', "");
Expect(1, 65999, '\p{^isphaistosdisc}', "");
Expect(1, 65999, '\P{isphaistosdisc}', "");
Expect(0, 65999, '\P{^isphaistosdisc}', "");
Expect(1, 66047, '\p{_ Is	PHAISTOSDisc}', "");
Expect(0, 66047, '\p{^_ Is	PHAISTOSDisc}', "");
Expect(0, 66047, '\P{_ Is	PHAISTOSDisc}', "");
Expect(1, 66047, '\P{^_ Is	PHAISTOSDisc}', "");
Expect(0, 65999, '\p{_ Is	PHAISTOSDisc}', "");
Expect(1, 65999, '\p{^_ Is	PHAISTOSDisc}', "");
Expect(1, 65999, '\P{_ Is	PHAISTOSDisc}', "");
Expect(0, 65999, '\P{^_ Is	PHAISTOSDisc}', "");
Error('\p{_/a/In Phaistos-disc}');
Error('\P{_/a/In Phaistos-disc}');
Expect(1, 66047, '\p{inphaistosdisc}', "");
Expect(0, 66047, '\p{^inphaistosdisc}', "");
Expect(0, 66047, '\P{inphaistosdisc}', "");
Expect(1, 66047, '\P{^inphaistosdisc}', "");
Expect(0, 65999, '\p{inphaistosdisc}', "");
Expect(1, 65999, '\p{^inphaistosdisc}', "");
Expect(1, 65999, '\P{inphaistosdisc}', "");
Expect(0, 65999, '\P{^inphaistosdisc}', "");
Expect(1, 66047, '\p{in-Phaistos disc}', "");
Expect(0, 66047, '\p{^in-Phaistos disc}', "");
Expect(0, 66047, '\P{in-Phaistos disc}', "");
Expect(1, 66047, '\P{^in-Phaistos disc}', "");
Expect(0, 65999, '\p{in-Phaistos disc}', "");
Expect(1, 65999, '\p{^in-Phaistos disc}', "");
Expect(1, 65999, '\P{in-Phaistos disc}', "");
Expect(0, 65999, '\P{^in-Phaistos disc}', "");
Error('\p{/a/-CombAbove}');
Error('\P{/a/-CombAbove}');
Expect(1, 788, '\p{_CombAbove}', "");
Expect(0, 788, '\p{^_CombAbove}', "");
Expect(0, 788, '\P{_CombAbove}', "");
Expect(1, 788, '\P{^_CombAbove}', "");
Expect(0, 767, '\p{_CombAbove}', "");
Expect(1, 767, '\p{^_CombAbove}', "");
Expect(1, 767, '\P{_CombAbove}', "");
Expect(0, 767, '\P{^_CombAbove}', "");
Error('\p{-Other_IDcontinue:=}');
Error('\P{-Other_IDcontinue:=}');
Expect(1, 183, '\p{otheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^otheridcontinue}', 'deprecated');
Expect(0, 183, '\P{otheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^otheridcontinue}', 'deprecated');
Expect(0, 182, '\p{otheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^otheridcontinue}', 'deprecated');
Expect(1, 182, '\P{otheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^otheridcontinue}', 'deprecated');
Expect(1, 183, '\p{	Other ID_continue}', 'deprecated');
Expect(0, 183, '\p{^	Other ID_continue}', 'deprecated');
Expect(0, 183, '\P{	Other ID_continue}', 'deprecated');
Expect(1, 183, '\P{^	Other ID_continue}', 'deprecated');
Expect(0, 182, '\p{	Other ID_continue}', 'deprecated');
Expect(1, 182, '\p{^	Other ID_continue}', 'deprecated');
Expect(1, 182, '\P{	Other ID_continue}', 'deprecated');
Expect(0, 182, '\P{^	Other ID_continue}', 'deprecated');
Error('\p{_:=Is	OtherID-Continue}');
Error('\P{_:=Is	OtherID-Continue}');
Expect(1, 183, '\p{isotheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^isotheridcontinue}', 'deprecated');
Expect(0, 183, '\P{isotheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^isotheridcontinue}', 'deprecated');
Expect(0, 182, '\p{isotheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^isotheridcontinue}', 'deprecated');
Expect(1, 182, '\P{isotheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^isotheridcontinue}', 'deprecated');
Expect(1, 183, '\p{-IsOther ID_CONTINUE}', 'deprecated');
Expect(0, 183, '\p{^-IsOther ID_CONTINUE}', 'deprecated');
Expect(0, 183, '\P{-IsOther ID_CONTINUE}', 'deprecated');
Expect(1, 183, '\P{^-IsOther ID_CONTINUE}', 'deprecated');
Expect(0, 182, '\p{-IsOther ID_CONTINUE}', 'deprecated');
Expect(1, 182, '\p{^-IsOther ID_CONTINUE}', 'deprecated');
Expect(1, 182, '\P{-IsOther ID_CONTINUE}', 'deprecated');
Expect(0, 182, '\P{^-IsOther ID_CONTINUE}', 'deprecated');
Error('\p{-oidc:=}');
Error('\P{-oidc:=}');
Expect(1, 183, '\p{oidc}', 'deprecated');
Expect(0, 183, '\p{^oidc}', 'deprecated');
Expect(0, 183, '\P{oidc}', 'deprecated');
Expect(1, 183, '\P{^oidc}', 'deprecated');
Expect(0, 182, '\p{oidc}', 'deprecated');
Expect(1, 182, '\p{^oidc}', 'deprecated');
Expect(1, 182, '\P{oidc}', 'deprecated');
Expect(0, 182, '\P{^oidc}', 'deprecated');
Expect(1, 183, '\p{ oidc}', 'deprecated');
Expect(0, 183, '\p{^ oidc}', 'deprecated');
Expect(0, 183, '\P{ oidc}', 'deprecated');
Expect(1, 183, '\P{^ oidc}', 'deprecated');
Expect(0, 182, '\p{ oidc}', 'deprecated');
Expect(1, 182, '\p{^ oidc}', 'deprecated');
Expect(1, 182, '\P{ oidc}', 'deprecated');
Expect(0, 182, '\P{^ oidc}', 'deprecated');
Error('\p{	/a/Is oidc}');
Error('\P{	/a/Is oidc}');
Expect(1, 183, '\p{isoidc}', 'deprecated');
Expect(0, 183, '\p{^isoidc}', 'deprecated');
Expect(0, 183, '\P{isoidc}', 'deprecated');
Expect(1, 183, '\P{^isoidc}', 'deprecated');
Expect(0, 182, '\p{isoidc}', 'deprecated');
Expect(1, 182, '\p{^isoidc}', 'deprecated');
Expect(1, 182, '\P{isoidc}', 'deprecated');
Expect(0, 182, '\P{^isoidc}', 'deprecated');
Expect(1, 183, '\p{-	IsOIDC}', 'deprecated');
Expect(0, 183, '\p{^-	IsOIDC}', 'deprecated');
Expect(0, 183, '\P{-	IsOIDC}', 'deprecated');
Expect(1, 183, '\P{^-	IsOIDC}', 'deprecated');
Expect(0, 182, '\p{-	IsOIDC}', 'deprecated');
Expect(1, 182, '\p{^-	IsOIDC}', 'deprecated');
Expect(1, 182, '\P{-	IsOIDC}', 'deprecated');
Expect(0, 182, '\P{^-	IsOIDC}', 'deprecated');
Error('\p{ /a/Bamum}');
Error('\P{ /a/Bamum}');
Expect(1, 42743, '\p{bamum}', "");
Expect(0, 42743, '\p{^bamum}', "");
Expect(0, 42743, '\P{bamum}', "");
Expect(1, 42743, '\P{^bamum}', "");
Expect(0, 42655, '\p{bamum}', "");
Expect(1, 42655, '\p{^bamum}', "");
Expect(1, 42655, '\P{bamum}', "");
Expect(0, 42655, '\P{^bamum}', "");
Expect(1, 42743, '\p{		Bamum}', "");
Expect(0, 42743, '\p{^		Bamum}', "");
Expect(0, 42743, '\P{		Bamum}', "");
Expect(1, 42743, '\P{^		Bamum}', "");
Expect(0, 42655, '\p{		Bamum}', "");
Expect(1, 42655, '\p{^		Bamum}', "");
Expect(1, 42655, '\P{		Bamum}', "");
Expect(0, 42655, '\P{^		Bamum}', "");
Error('\p{- Is:=bamum}');
Error('\P{- Is:=bamum}');
Expect(1, 42743, '\p{isbamum}', "");
Expect(0, 42743, '\p{^isbamum}', "");
Expect(0, 42743, '\P{isbamum}', "");
Expect(1, 42743, '\P{^isbamum}', "");
Expect(0, 42655, '\p{isbamum}', "");
Expect(1, 42655, '\p{^isbamum}', "");
Expect(1, 42655, '\P{isbamum}', "");
Expect(0, 42655, '\P{^isbamum}', "");
Expect(1, 42743, '\p{ is BAMUM}', "");
Expect(0, 42743, '\p{^ is BAMUM}', "");
Expect(0, 42743, '\P{ is BAMUM}', "");
Expect(1, 42743, '\P{^ is BAMUM}', "");
Expect(0, 42655, '\p{ is BAMUM}', "");
Expect(1, 42655, '\p{^ is BAMUM}', "");
Expect(1, 42655, '\P{ is BAMUM}', "");
Expect(0, 42655, '\P{^ is BAMUM}', "");
Error('\p{	_bamu:=}');
Error('\P{	_bamu:=}');
Expect(1, 42743, '\p{bamu}', "");
Expect(0, 42743, '\p{^bamu}', "");
Expect(0, 42743, '\P{bamu}', "");
Expect(1, 42743, '\P{^bamu}', "");
Expect(0, 42655, '\p{bamu}', "");
Expect(1, 42655, '\p{^bamu}', "");
Expect(1, 42655, '\P{bamu}', "");
Expect(0, 42655, '\P{^bamu}', "");
Expect(1, 42743, '\p{_ Bamu}', "");
Expect(0, 42743, '\p{^_ Bamu}', "");
Expect(0, 42743, '\P{_ Bamu}', "");
Expect(1, 42743, '\P{^_ Bamu}', "");
Expect(0, 42655, '\p{_ Bamu}', "");
Expect(1, 42655, '\p{^_ Bamu}', "");
Expect(1, 42655, '\P{_ Bamu}', "");
Expect(0, 42655, '\P{^_ Bamu}', "");
Error('\p{		IS-BAMU/a/}');
Error('\P{		IS-BAMU/a/}');
Expect(1, 42743, '\p{isbamu}', "");
Expect(0, 42743, '\p{^isbamu}', "");
Expect(0, 42743, '\P{isbamu}', "");
Expect(1, 42743, '\P{^isbamu}', "");
Expect(0, 42655, '\p{isbamu}', "");
Expect(1, 42655, '\p{^isbamu}', "");
Expect(1, 42655, '\P{isbamu}', "");
Expect(0, 42655, '\P{^isbamu}', "");
Expect(1, 42743, '\p{_	Is-Bamu}', "");
Expect(0, 42743, '\p{^_	Is-Bamu}', "");
Expect(0, 42743, '\P{_	Is-Bamu}', "");
Expect(1, 42743, '\P{^_	Is-Bamu}', "");
Expect(0, 42655, '\p{_	Is-Bamu}', "");
Expect(1, 42655, '\p{^_	Is-Bamu}', "");
Expect(1, 42655, '\P{_	Is-Bamu}', "");
Expect(0, 42655, '\P{^_	Is-Bamu}', "");
Error('\p{ -In/a/BENGALI}');
Error('\P{ -In/a/BENGALI}');
Expect(1, 2559, '\p{inbengali}', "");
Expect(0, 2559, '\p{^inbengali}', "");
Expect(0, 2559, '\P{inbengali}', "");
Expect(1, 2559, '\P{^inbengali}', "");
Expect(0, 2431, '\p{inbengali}', "");
Expect(1, 2431, '\p{^inbengali}', "");
Expect(1, 2431, '\P{inbengali}', "");
Expect(0, 2431, '\P{^inbengali}', "");
Expect(1, 2559, '\p{-IN Bengali}', "");
Expect(0, 2559, '\p{^-IN Bengali}', "");
Expect(0, 2559, '\P{-IN Bengali}', "");
Expect(1, 2559, '\P{^-IN Bengali}', "");
Expect(0, 2431, '\p{-IN Bengali}', "");
Expect(1, 2431, '\p{^-IN Bengali}', "");
Expect(1, 2431, '\P{-IN Bengali}', "");
Expect(0, 2431, '\P{^-IN Bengali}', "");
Error('\p{-Cuneiform/a/}');
Error('\P{-Cuneiform/a/}');
Expect(1, 74606, '\p{cuneiform}', "");
Expect(0, 74606, '\p{^cuneiform}', "");
Expect(0, 74606, '\P{cuneiform}', "");
Expect(1, 74606, '\P{^cuneiform}', "");
Expect(0, 73727, '\p{cuneiform}', "");
Expect(1, 73727, '\p{^cuneiform}', "");
Expect(1, 73727, '\P{cuneiform}', "");
Expect(0, 73727, '\P{^cuneiform}', "");
Expect(1, 74606, '\p{_ CUNEIFORM}', "");
Expect(0, 74606, '\p{^_ CUNEIFORM}', "");
Expect(0, 74606, '\P{_ CUNEIFORM}', "");
Expect(1, 74606, '\P{^_ CUNEIFORM}', "");
Expect(0, 73727, '\p{_ CUNEIFORM}', "");
Expect(1, 73727, '\p{^_ CUNEIFORM}', "");
Expect(1, 73727, '\P{_ CUNEIFORM}', "");
Expect(0, 73727, '\P{^_ CUNEIFORM}', "");
Error('\p{ -ISCuneiform/a/}');
Error('\P{ -ISCuneiform/a/}');
Expect(1, 74606, '\p{iscuneiform}', "");
Expect(0, 74606, '\p{^iscuneiform}', "");
Expect(0, 74606, '\P{iscuneiform}', "");
Expect(1, 74606, '\P{^iscuneiform}', "");
Expect(0, 73727, '\p{iscuneiform}', "");
Expect(1, 73727, '\p{^iscuneiform}', "");
Expect(1, 73727, '\P{iscuneiform}', "");
Expect(0, 73727, '\P{^iscuneiform}', "");
Expect(1, 74606, '\p{_-IsCuneiform}', "");
Expect(0, 74606, '\p{^_-IsCuneiform}', "");
Expect(0, 74606, '\P{_-IsCuneiform}', "");
Expect(1, 74606, '\P{^_-IsCuneiform}', "");
Expect(0, 73727, '\p{_-IsCuneiform}', "");
Expect(1, 73727, '\p{^_-IsCuneiform}', "");
Expect(1, 73727, '\P{_-IsCuneiform}', "");
Expect(0, 73727, '\P{^_-IsCuneiform}', "");
Error('\p{	:=Xsux}');
Error('\P{	:=Xsux}');
Expect(1, 74606, '\p{xsux}', "");
Expect(0, 74606, '\p{^xsux}', "");
Expect(0, 74606, '\P{xsux}', "");
Expect(1, 74606, '\P{^xsux}', "");
Expect(0, 73727, '\p{xsux}', "");
Expect(1, 73727, '\p{^xsux}', "");
Expect(1, 73727, '\P{xsux}', "");
Expect(0, 73727, '\P{^xsux}', "");
Expect(1, 74606, '\p{-	Xsux}', "");
Expect(0, 74606, '\p{^-	Xsux}', "");
Expect(0, 74606, '\P{-	Xsux}', "");
Expect(1, 74606, '\P{^-	Xsux}', "");
Expect(0, 73727, '\p{-	Xsux}', "");
Expect(1, 73727, '\p{^-	Xsux}', "");
Expect(1, 73727, '\P{-	Xsux}', "");
Expect(0, 73727, '\P{^-	Xsux}', "");
Error('\p{		isXSUX/a/}');
Error('\P{		isXSUX/a/}');
Expect(1, 74606, '\p{isxsux}', "");
Expect(0, 74606, '\p{^isxsux}', "");
Expect(0, 74606, '\P{isxsux}', "");
Expect(1, 74606, '\P{^isxsux}', "");
Expect(0, 73727, '\p{isxsux}', "");
Expect(1, 73727, '\p{^isxsux}', "");
Expect(1, 73727, '\P{isxsux}', "");
Expect(0, 73727, '\P{^isxsux}', "");
Expect(1, 74606, '\p{		IsXsux}', "");
Expect(0, 74606, '\p{^		IsXsux}', "");
Expect(0, 74606, '\P{		IsXsux}', "");
Expect(1, 74606, '\P{^		IsXsux}', "");
Expect(0, 73727, '\p{		IsXsux}', "");
Expect(1, 73727, '\p{^		IsXsux}', "");
Expect(1, 73727, '\P{		IsXsux}', "");
Expect(0, 73727, '\P{^		IsXsux}', "");
Error('\p{_-Hangul:=Jamo_Extended_A}');
Error('\P{_-Hangul:=Jamo_Extended_A}');
Expect(1, 43391, '\p{hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^hanguljamoextendeda}', "");
Expect(0, 43391, '\P{hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^hanguljamoextendeda}', "");
Expect(0, 43359, '\p{hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^hanguljamoextendeda}', "");
Expect(1, 43359, '\P{hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^hanguljamoextendeda}', "");
Expect(1, 43391, '\p{  HANGUL-jamo_EXTENDED	a}', "");
Expect(0, 43391, '\p{^  HANGUL-jamo_EXTENDED	a}', "");
Expect(0, 43391, '\P{  HANGUL-jamo_EXTENDED	a}', "");
Expect(1, 43391, '\P{^  HANGUL-jamo_EXTENDED	a}', "");
Expect(0, 43359, '\p{  HANGUL-jamo_EXTENDED	a}', "");
Expect(1, 43359, '\p{^  HANGUL-jamo_EXTENDED	a}', "");
Expect(1, 43359, '\P{  HANGUL-jamo_EXTENDED	a}', "");
Expect(0, 43359, '\P{^  HANGUL-jamo_EXTENDED	a}', "");
Error('\p{ /a/is	Hangul	Jamo-Extended	a}');
Error('\P{ /a/is	Hangul	Jamo-Extended	a}');
Expect(1, 43391, '\p{ishanguljamoextendeda}', "");
Expect(0, 43391, '\p{^ishanguljamoextendeda}', "");
Expect(0, 43391, '\P{ishanguljamoextendeda}', "");
Expect(1, 43391, '\P{^ishanguljamoextendeda}', "");
Expect(0, 43359, '\p{ishanguljamoextendeda}', "");
Expect(1, 43359, '\p{^ishanguljamoextendeda}', "");
Expect(1, 43359, '\P{ishanguljamoextendeda}', "");
Expect(0, 43359, '\P{^ishanguljamoextendeda}', "");
Expect(1, 43391, '\p{-_Is_HangulJamo_Extended_A}', "");
Expect(0, 43391, '\p{^-_Is_HangulJamo_Extended_A}', "");
Expect(0, 43391, '\P{-_Is_HangulJamo_Extended_A}', "");
Expect(1, 43391, '\P{^-_Is_HangulJamo_Extended_A}', "");
Expect(0, 43359, '\p{-_Is_HangulJamo_Extended_A}', "");
Expect(1, 43359, '\p{^-_Is_HangulJamo_Extended_A}', "");
Expect(1, 43359, '\P{-_Is_HangulJamo_Extended_A}', "");
Expect(0, 43359, '\P{^-_Is_HangulJamo_Extended_A}', "");
Error('\p{  InHangul Jamo_Extended:=A}');
Error('\P{  InHangul Jamo_Extended:=A}');
Expect(1, 43391, '\p{inhanguljamoextendeda}', "");
Expect(0, 43391, '\p{^inhanguljamoextendeda}', "");
Expect(0, 43391, '\P{inhanguljamoextendeda}', "");
Expect(1, 43391, '\P{^inhanguljamoextendeda}', "");
Expect(0, 43359, '\p{inhanguljamoextendeda}', "");
Expect(1, 43359, '\p{^inhanguljamoextendeda}', "");
Expect(1, 43359, '\P{inhanguljamoextendeda}', "");
Expect(0, 43359, '\P{^inhanguljamoextendeda}', "");
Expect(1, 43391, '\p{--in-HangulJAMO-EXTENDED_A}', "");
Expect(0, 43391, '\p{^--in-HangulJAMO-EXTENDED_A}', "");
Expect(0, 43391, '\P{--in-HangulJAMO-EXTENDED_A}', "");
Expect(1, 43391, '\P{^--in-HangulJAMO-EXTENDED_A}', "");
Expect(0, 43359, '\p{--in-HangulJAMO-EXTENDED_A}', "");
Expect(1, 43359, '\p{^--in-HangulJAMO-EXTENDED_A}', "");
Expect(1, 43359, '\P{--in-HangulJAMO-EXTENDED_A}', "");
Expect(0, 43359, '\P{^--in-HangulJAMO-EXTENDED_A}', "");
Error('\p{	cased/a/}');
Error('\P{	cased/a/}');
Expect(1, 90, '\p{cased}', "");
Expect(0, 90, '\p{^cased}', "");
Expect(0, 90, '\P{cased}', "");
Expect(1, 90, '\P{^cased}', "");
Expect(0, 64, '\p{cased}', "");
Expect(1, 64, '\p{^cased}', "");
Expect(1, 64, '\P{cased}', "");
Expect(0, 64, '\P{^cased}', "");
Expect(1, 90, '\p{ 	cased}', "");
Expect(0, 90, '\p{^ 	cased}', "");
Expect(0, 90, '\P{ 	cased}', "");
Expect(1, 90, '\P{^ 	cased}', "");
Expect(0, 64, '\p{ 	cased}', "");
Expect(1, 64, '\p{^ 	cased}', "");
Expect(1, 64, '\P{ 	cased}', "");
Expect(0, 64, '\P{^ 	cased}', "");
Error('\p{ :=IS_CASED}');
Error('\P{ :=IS_CASED}');
Expect(1, 90, '\p{iscased}', "");
Expect(0, 90, '\p{^iscased}', "");
Expect(0, 90, '\P{iscased}', "");
Expect(1, 90, '\P{^iscased}', "");
Expect(0, 64, '\p{iscased}', "");
Expect(1, 64, '\p{^iscased}', "");
Expect(1, 64, '\P{iscased}', "");
Expect(0, 64, '\P{^iscased}', "");
Expect(1, 90, '\p{ Is-Cased}', "");
Expect(0, 90, '\p{^ Is-Cased}', "");
Expect(0, 90, '\P{ Is-Cased}', "");
Expect(1, 90, '\P{^ Is-Cased}', "");
Expect(0, 64, '\p{ Is-Cased}', "");
Expect(1, 64, '\p{^ Is-Cased}', "");
Expect(1, 64, '\P{ Is-Cased}', "");
Expect(0, 64, '\P{^ Is-Cased}', "");
Error('\p{  In:=Katakana}');
Error('\P{  In:=Katakana}');
Expect(1, 12543, '\p{inkatakana}', "");
Expect(0, 12543, '\p{^inkatakana}', "");
Expect(0, 12543, '\P{inkatakana}', "");
Expect(1, 12543, '\P{^inkatakana}', "");
Expect(0, 12447, '\p{inkatakana}', "");
Expect(1, 12447, '\p{^inkatakana}', "");
Expect(1, 12447, '\P{inkatakana}', "");
Expect(0, 12447, '\P{^inkatakana}', "");
Expect(1, 12543, '\p{-InKatakana}', "");
Expect(0, 12543, '\p{^-InKatakana}', "");
Expect(0, 12543, '\P{-InKatakana}', "");
Expect(1, 12543, '\P{^-InKatakana}', "");
Expect(0, 12447, '\p{-InKatakana}', "");
Expect(1, 12447, '\p{^-InKatakana}', "");
Expect(1, 12447, '\P{-InKatakana}', "");
Expect(0, 12447, '\P{^-InKatakana}', "");
Error('\p{ ARABICPRESENTATION/a/FORMS	A}');
Error('\P{ ARABICPRESENTATION/a/FORMS	A}');
Expect(1, 65023, '\p{arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^arabicpresentationformsa}', "");
Expect(0, 65023, '\P{arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^arabicpresentationformsa}', "");
Expect(0, 64335, '\p{arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^arabicpresentationformsa}', "");
Expect(1, 64335, '\P{arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^arabicpresentationformsa}', "");
Expect(1, 65023, '\p{ 	ARABIC	Presentation-forms-a}', "");
Expect(0, 65023, '\p{^ 	ARABIC	Presentation-forms-a}', "");
Expect(0, 65023, '\P{ 	ARABIC	Presentation-forms-a}', "");
Expect(1, 65023, '\P{^ 	ARABIC	Presentation-forms-a}', "");
Expect(0, 64335, '\p{ 	ARABIC	Presentation-forms-a}', "");
Expect(1, 64335, '\p{^ 	ARABIC	Presentation-forms-a}', "");
Expect(1, 64335, '\P{ 	ARABIC	Presentation-forms-a}', "");
Expect(0, 64335, '\P{^ 	ARABIC	Presentation-forms-a}', "");
Error('\p{	:=IS-Arabic-PRESENTATION	Forms	a}');
Error('\P{	:=IS-Arabic-PRESENTATION	Forms	a}');
Expect(1, 65023, '\p{isarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^isarabicpresentationformsa}', "");
Expect(0, 65023, '\P{isarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^isarabicpresentationformsa}', "");
Expect(0, 64335, '\p{isarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^isarabicpresentationformsa}', "");
Expect(1, 64335, '\P{isarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^isarabicpresentationformsa}', "");
Expect(1, 65023, '\p{	IsArabic-presentation_FORMS_A}', "");
Expect(0, 65023, '\p{^	IsArabic-presentation_FORMS_A}', "");
Expect(0, 65023, '\P{	IsArabic-presentation_FORMS_A}', "");
Expect(1, 65023, '\P{^	IsArabic-presentation_FORMS_A}', "");
Expect(0, 64335, '\p{	IsArabic-presentation_FORMS_A}', "");
Expect(1, 64335, '\p{^	IsArabic-presentation_FORMS_A}', "");
Expect(1, 64335, '\P{	IsArabic-presentation_FORMS_A}', "");
Expect(0, 64335, '\P{^	IsArabic-presentation_FORMS_A}', "");
Error('\p{-In Arabicpresentation/a/FormsA}');
Error('\P{-In Arabicpresentation/a/FormsA}');
Expect(1, 65023, '\p{inarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^inarabicpresentationformsa}', "");
Expect(0, 65023, '\P{inarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^inarabicpresentationformsa}', "");
Expect(0, 64335, '\p{inarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^inarabicpresentationformsa}', "");
Expect(1, 64335, '\P{inarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^inarabicpresentationformsa}', "");
Expect(1, 65023, '\p{	_INArabic	presentation_FORMS-a}', "");
Expect(0, 65023, '\p{^	_INArabic	presentation_FORMS-a}', "");
Expect(0, 65023, '\P{	_INArabic	presentation_FORMS-a}', "");
Expect(1, 65023, '\P{^	_INArabic	presentation_FORMS-a}', "");
Expect(0, 64335, '\p{	_INArabic	presentation_FORMS-a}', "");
Expect(1, 64335, '\p{^	_INArabic	presentation_FORMS-a}', "");
Expect(1, 64335, '\P{	_INArabic	presentation_FORMS-a}', "");
Expect(0, 64335, '\P{^	_INArabic	presentation_FORMS-a}', "");
Error('\p{  In/a/TAI-Tham}');
Error('\P{  In/a/TAI-Tham}');
Expect(1, 6831, '\p{intaitham}', "");
Expect(0, 6831, '\p{^intaitham}', "");
Expect(0, 6831, '\P{intaitham}', "");
Expect(1, 6831, '\P{^intaitham}', "");
Expect(0, 6687, '\p{intaitham}', "");
Expect(1, 6687, '\p{^intaitham}', "");
Expect(1, 6687, '\P{intaitham}', "");
Expect(0, 6687, '\P{^intaitham}', "");
Expect(1, 6831, '\p{	In	tai tham}', "");
Expect(0, 6831, '\p{^	In	tai tham}', "");
Expect(0, 6831, '\P{	In	tai tham}', "");
Expect(1, 6831, '\P{^	In	tai tham}', "");
Expect(0, 6687, '\p{	In	tai tham}', "");
Expect(1, 6687, '\p{^	In	tai tham}', "");
Expect(1, 6687, '\P{	In	tai tham}', "");
Expect(0, 6687, '\P{^	In	tai tham}', "");
Error('\p{		In:=Tagalog}');
Error('\P{		In:=Tagalog}');
Expect(1, 5919, '\p{intagalog}', "");
Expect(0, 5919, '\p{^intagalog}', "");
Expect(0, 5919, '\P{intagalog}', "");
Expect(1, 5919, '\P{^intagalog}', "");
Expect(0, 5887, '\p{intagalog}', "");
Expect(1, 5887, '\p{^intagalog}', "");
Expect(1, 5887, '\P{intagalog}', "");
Expect(0, 5887, '\P{^intagalog}', "");
Expect(1, 5919, '\p{_InTagalog}', "");
Expect(0, 5919, '\p{^_InTagalog}', "");
Expect(0, 5919, '\P{_InTagalog}', "");
Expect(1, 5919, '\P{^_InTagalog}', "");
Expect(0, 5887, '\p{_InTagalog}', "");
Expect(1, 5887, '\p{^_InTagalog}', "");
Expect(1, 5887, '\P{_InTagalog}', "");
Expect(0, 5887, '\P{^_InTagalog}', "");
Error('\p{ _tai-XUAN JING Symbols:=}');
Error('\P{ _tai-XUAN JING Symbols:=}');
Expect(1, 119647, '\p{taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^taixuanjingsymbols}', "");
Expect(0, 119647, '\P{taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^taixuanjingsymbols}', "");
Expect(0, 119551, '\p{taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^taixuanjingsymbols}', "");
Expect(1, 119551, '\P{taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^taixuanjingsymbols}', "");
Expect(1, 119647, '\p{  Tai_Xuan-Jing SYMBOLS}', "");
Expect(0, 119647, '\p{^  Tai_Xuan-Jing SYMBOLS}', "");
Expect(0, 119647, '\P{  Tai_Xuan-Jing SYMBOLS}', "");
Expect(1, 119647, '\P{^  Tai_Xuan-Jing SYMBOLS}', "");
Expect(0, 119551, '\p{  Tai_Xuan-Jing SYMBOLS}', "");
Expect(1, 119551, '\p{^  Tai_Xuan-Jing SYMBOLS}', "");
Expect(1, 119551, '\P{  Tai_Xuan-Jing SYMBOLS}', "");
Expect(0, 119551, '\P{^  Tai_Xuan-Jing SYMBOLS}', "");
Error('\p{-/a/is	Tai	XUAN	JingSYMBOLS}');
Error('\P{-/a/is	Tai	XUAN	JingSYMBOLS}');
Expect(1, 119647, '\p{istaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^istaixuanjingsymbols}', "");
Expect(0, 119647, '\P{istaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^istaixuanjingsymbols}', "");
Expect(0, 119551, '\p{istaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^istaixuanjingsymbols}', "");
Expect(1, 119551, '\P{istaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^istaixuanjingsymbols}', "");
Expect(1, 119647, '\p{ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(0, 119647, '\p{^ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(0, 119647, '\P{ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(1, 119647, '\P{^ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(0, 119551, '\p{ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(1, 119551, '\p{^ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(1, 119551, '\P{ 	Is_TaiXuan JING_SYMBOLS}', "");
Expect(0, 119551, '\P{^ 	Is_TaiXuan JING_SYMBOLS}', "");
Error('\p{-/a/In	TAI	XUAN-Jing	Symbols}');
Error('\P{-/a/In	TAI	XUAN-Jing	Symbols}');
Expect(1, 119647, '\p{intaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^intaixuanjingsymbols}', "");
Expect(0, 119647, '\P{intaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^intaixuanjingsymbols}', "");
Expect(0, 119551, '\p{intaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^intaixuanjingsymbols}', "");
Expect(1, 119551, '\P{intaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^intaixuanjingsymbols}', "");
Expect(1, 119647, '\p{-	INTai Xuan_Jingsymbols}', "");
Expect(0, 119647, '\p{^-	INTai Xuan_Jingsymbols}', "");
Expect(0, 119647, '\P{-	INTai Xuan_Jingsymbols}', "");
Expect(1, 119647, '\P{^-	INTai Xuan_Jingsymbols}', "");
Expect(0, 119551, '\p{-	INTai Xuan_Jingsymbols}', "");
Expect(1, 119551, '\p{^-	INTai Xuan_Jingsymbols}', "");
Expect(1, 119551, '\P{-	INTai Xuan_Jingsymbols}', "");
Expect(0, 119551, '\P{^-	INTai Xuan_Jingsymbols}', "");
Error('\p{ :=In-lepcha}');
Error('\P{ :=In-lepcha}');
Expect(1, 7247, '\p{inlepcha}', "");
Expect(0, 7247, '\p{^inlepcha}', "");
Expect(0, 7247, '\P{inlepcha}', "");
Expect(1, 7247, '\P{^inlepcha}', "");
Expect(0, 7167, '\p{inlepcha}', "");
Expect(1, 7167, '\p{^inlepcha}', "");
Expect(1, 7167, '\P{inlepcha}', "");
Expect(0, 7167, '\P{^inlepcha}', "");
Expect(1, 7247, '\p{	-IN	Lepcha}', "");
Expect(0, 7247, '\p{^	-IN	Lepcha}', "");
Expect(0, 7247, '\P{	-IN	Lepcha}', "");
Expect(1, 7247, '\P{^	-IN	Lepcha}', "");
Expect(0, 7167, '\p{	-IN	Lepcha}', "");
Expect(1, 7167, '\p{^	-IN	Lepcha}', "");
Expect(1, 7167, '\P{	-IN	Lepcha}', "");
Expect(0, 7167, '\P{^	-IN	Lepcha}', "");
Error('\p{- in/a/CHAM}');
Error('\P{- in/a/CHAM}');
Expect(1, 43615, '\p{incham}', "");
Expect(0, 43615, '\p{^incham}', "");
Expect(0, 43615, '\P{incham}', "");
Expect(1, 43615, '\P{^incham}', "");
Expect(0, 43519, '\p{incham}', "");
Expect(1, 43519, '\p{^incham}', "");
Expect(1, 43519, '\P{incham}', "");
Expect(0, 43519, '\P{^incham}', "");
Expect(1, 43615, '\p{_	InCHAM}', "");
Expect(0, 43615, '\p{^_	InCHAM}', "");
Expect(0, 43615, '\P{_	InCHAM}', "");
Expect(1, 43615, '\P{^_	InCHAM}', "");
Expect(0, 43519, '\p{_	InCHAM}', "");
Expect(1, 43519, '\p{^_	InCHAM}', "");
Expect(1, 43519, '\P{_	InCHAM}', "");
Expect(0, 43519, '\P{^_	InCHAM}', "");
Error('\p{--in/a/bopomofo}');
Error('\P{--in/a/bopomofo}');
Expect(1, 12591, '\p{inbopomofo}', "");
Expect(0, 12591, '\p{^inbopomofo}', "");
Expect(0, 12591, '\P{inbopomofo}', "");
Expect(1, 12591, '\P{^inbopomofo}', "");
Expect(0, 12543, '\p{inbopomofo}', "");
Expect(1, 12543, '\p{^inbopomofo}', "");
Expect(1, 12543, '\P{inbopomofo}', "");
Expect(0, 12543, '\P{^inbopomofo}', "");
Expect(1, 12591, '\p{__in-BOPOMOFO}', "");
Expect(0, 12591, '\p{^__in-BOPOMOFO}', "");
Expect(0, 12591, '\P{__in-BOPOMOFO}', "");
Expect(1, 12591, '\P{^__in-BOPOMOFO}', "");
Expect(0, 12543, '\p{__in-BOPOMOFO}', "");
Expect(1, 12543, '\p{^__in-BOPOMOFO}', "");
Expect(1, 12543, '\P{__in-BOPOMOFO}', "");
Expect(0, 12543, '\P{^__in-BOPOMOFO}', "");
Error('\p{/a/-CJK	CompatibilityIdeographs}');
Error('\P{/a/-CJK	CompatibilityIdeographs}');
Expect(1, 64255, '\p{cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(0, 64255, '\p{^_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(0, 64255, '\P{_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(1, 64255, '\P{^_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(0, 63743, '\p{_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(1, 63743, '\p{^_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(1, 63743, '\P{_-CJK-Compatibility	IDEOGRAPHS}', "");
Expect(0, 63743, '\P{^_-CJK-Compatibility	IDEOGRAPHS}', "");
Error('\p{ -is/a/CJK Compatibility Ideographs}');
Error('\P{ -is/a/CJK Compatibility Ideographs}');
Expect(1, 64255, '\p{iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(0, 64255, '\p{^	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(0, 64255, '\P{	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(1, 64255, '\P{^	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(0, 63743, '\p{	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(1, 63743, '\p{^	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(1, 63743, '\P{	-Is CJK_compatibility_IDEOGRAPHS}', "");
Expect(0, 63743, '\P{^	-Is CJK_compatibility_IDEOGRAPHS}', "");
Error('\p{_:=In	CJKcompatibility_IDEOGRAPHS}');
Error('\P{_:=In	CJKcompatibility_IDEOGRAPHS}');
Expect(1, 64255, '\p{incjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^incjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{incjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^incjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{incjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^incjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{incjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^incjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{_InCJK COMPATIBILITY ideographs}', "");
Expect(0, 64255, '\p{^_InCJK COMPATIBILITY ideographs}', "");
Expect(0, 64255, '\P{_InCJK COMPATIBILITY ideographs}', "");
Expect(1, 64255, '\P{^_InCJK COMPATIBILITY ideographs}', "");
Expect(0, 63743, '\p{_InCJK COMPATIBILITY ideographs}', "");
Expect(1, 63743, '\p{^_InCJK COMPATIBILITY ideographs}', "");
Expect(1, 63743, '\P{_InCJK COMPATIBILITY ideographs}', "");
Expect(0, 63743, '\P{^_InCJK COMPATIBILITY ideographs}', "");
Error('\p{:=Arrows}');
Error('\P{:=Arrows}');
Expect(1, 8703, '\p{arrows}', "");
Expect(0, 8703, '\p{^arrows}', "");
Expect(0, 8703, '\P{arrows}', "");
Expect(1, 8703, '\P{^arrows}', "");
Expect(0, 8591, '\p{arrows}', "");
Expect(1, 8591, '\p{^arrows}', "");
Expect(1, 8591, '\P{arrows}', "");
Expect(0, 8591, '\P{^arrows}', "");
Expect(1, 8703, '\p{_Arrows}', "");
Expect(0, 8703, '\p{^_Arrows}', "");
Expect(0, 8703, '\P{_Arrows}', "");
Expect(1, 8703, '\P{^_Arrows}', "");
Expect(0, 8591, '\p{_Arrows}', "");
Expect(1, 8591, '\p{^_Arrows}', "");
Expect(1, 8591, '\P{_Arrows}', "");
Expect(0, 8591, '\P{^_Arrows}', "");
Error('\p{Is/a/arrows}');
Error('\P{Is/a/arrows}');
Expect(1, 8703, '\p{isarrows}', "");
Expect(0, 8703, '\p{^isarrows}', "");
Expect(0, 8703, '\P{isarrows}', "");
Expect(1, 8703, '\P{^isarrows}', "");
Expect(0, 8591, '\p{isarrows}', "");
Expect(1, 8591, '\p{^isarrows}', "");
Expect(1, 8591, '\P{isarrows}', "");
Expect(0, 8591, '\P{^isarrows}', "");
Expect(1, 8703, '\p{-is	Arrows}', "");
Expect(0, 8703, '\p{^-is	Arrows}', "");
Expect(0, 8703, '\P{-is	Arrows}', "");
Expect(1, 8703, '\P{^-is	Arrows}', "");
Expect(0, 8591, '\p{-is	Arrows}', "");
Expect(1, 8591, '\p{^-is	Arrows}', "");
Expect(1, 8591, '\P{-is	Arrows}', "");
Expect(0, 8591, '\P{^-is	Arrows}', "");
Error('\p{:=--InArrows}');
Error('\P{:=--InArrows}');
Expect(1, 8703, '\p{inarrows}', "");
Expect(0, 8703, '\p{^inarrows}', "");
Expect(0, 8703, '\P{inarrows}', "");
Expect(1, 8703, '\P{^inarrows}', "");
Expect(0, 8591, '\p{inarrows}', "");
Expect(1, 8591, '\p{^inarrows}', "");
Expect(1, 8591, '\P{inarrows}', "");
Expect(0, 8591, '\P{^inarrows}', "");
Expect(1, 8703, '\p{ inArrows}', "");
Expect(0, 8703, '\p{^ inArrows}', "");
Expect(0, 8703, '\P{ inArrows}', "");
Expect(1, 8703, '\P{^ inArrows}', "");
Expect(0, 8591, '\p{ inArrows}', "");
Expect(1, 8591, '\p{^ inArrows}', "");
Expect(1, 8591, '\P{ inArrows}', "");
Expect(0, 8591, '\P{^ inArrows}', "");
Error('\p{_In:=LAO}');
Error('\P{_In:=LAO}');
Expect(1, 3839, '\p{inlao}', "");
Expect(0, 3839, '\p{^inlao}', "");
Expect(0, 3839, '\P{inlao}', "");
Expect(1, 3839, '\P{^inlao}', "");
Expect(0, 3711, '\p{inlao}', "");
Expect(1, 3711, '\p{^inlao}', "");
Expect(1, 3711, '\P{inlao}', "");
Expect(0, 3711, '\P{^inlao}', "");
Expect(1, 3839, '\p{_-INLao}', "");
Expect(0, 3839, '\p{^_-INLao}', "");
Expect(0, 3839, '\P{_-INLao}', "");
Expect(1, 3839, '\P{^_-INLao}', "");
Expect(0, 3711, '\p{_-INLao}', "");
Expect(1, 3711, '\p{^_-INLao}', "");
Expect(1, 3711, '\P{_-INLao}', "");
Expect(0, 3711, '\P{^_-INLao}', "");
Error('\p{/a/ CONNECTOR	PUNCTUATION}');
Error('\P{/a/ CONNECTOR	PUNCTUATION}');
Expect(1, 95, '\p{connectorpunctuation}', "");
Expect(0, 95, '\p{^connectorpunctuation}', "");
Expect(0, 95, '\P{connectorpunctuation}', "");
Expect(1, 95, '\P{^connectorpunctuation}', "");
Expect(0, 94, '\p{connectorpunctuation}', "");
Expect(1, 94, '\p{^connectorpunctuation}', "");
Expect(1, 94, '\P{connectorpunctuation}', "");
Expect(0, 94, '\P{^connectorpunctuation}', "");
Expect(1, 95, '\p{	 connector-punctuation}', "");
Expect(0, 95, '\p{^	 connector-punctuation}', "");
Expect(0, 95, '\P{	 connector-punctuation}', "");
Expect(1, 95, '\P{^	 connector-punctuation}', "");
Expect(0, 94, '\p{	 connector-punctuation}', "");
Expect(1, 94, '\p{^	 connector-punctuation}', "");
Expect(1, 94, '\P{	 connector-punctuation}', "");
Expect(0, 94, '\P{^	 connector-punctuation}', "");
Error('\p{-is:=CONNECTORPunctuation}');
Error('\P{-is:=CONNECTORPunctuation}');
Expect(1, 95, '\p{isconnectorpunctuation}', "");
Expect(0, 95, '\p{^isconnectorpunctuation}', "");
Expect(0, 95, '\P{isconnectorpunctuation}', "");
Expect(1, 95, '\P{^isconnectorpunctuation}', "");
Expect(0, 94, '\p{isconnectorpunctuation}', "");
Expect(1, 94, '\p{^isconnectorpunctuation}', "");
Expect(1, 94, '\P{isconnectorpunctuation}', "");
Expect(0, 94, '\P{^isconnectorpunctuation}', "");
Expect(1, 95, '\p{Is Connector Punctuation}', "");
Expect(0, 95, '\p{^Is Connector Punctuation}', "");
Expect(0, 95, '\P{Is Connector Punctuation}', "");
Expect(1, 95, '\P{^Is Connector Punctuation}', "");
Expect(0, 94, '\p{Is Connector Punctuation}', "");
Expect(1, 94, '\p{^Is Connector Punctuation}', "");
Expect(1, 94, '\P{Is Connector Punctuation}', "");
Expect(0, 94, '\P{^Is Connector Punctuation}', "");
Error('\p{/a/-Pc}');
Error('\P{/a/-Pc}');
Expect(1, 95, '\p{pc}', "");
Expect(0, 95, '\p{^pc}', "");
Expect(0, 95, '\P{pc}', "");
Expect(1, 95, '\P{^pc}', "");
Expect(0, 94, '\p{pc}', "");
Expect(1, 94, '\p{^pc}', "");
Expect(1, 94, '\P{pc}', "");
Expect(0, 94, '\P{^pc}', "");
Expect(1, 95, '\p{Pc}', "");
Expect(0, 95, '\p{^Pc}', "");
Expect(0, 95, '\P{Pc}', "");
Expect(1, 95, '\P{^Pc}', "");
Expect(0, 94, '\p{Pc}', "");
Expect(1, 94, '\p{^Pc}', "");
Expect(1, 94, '\P{Pc}', "");
Expect(0, 94, '\P{^Pc}', "");
Error('\p{	_IS-PC/a/}');
Error('\P{	_IS-PC/a/}');
Expect(1, 95, '\p{ispc}', "");
Expect(0, 95, '\p{^ispc}', "");
Expect(0, 95, '\P{ispc}', "");
Expect(1, 95, '\P{^ispc}', "");
Expect(0, 94, '\p{ispc}', "");
Expect(1, 94, '\p{^ispc}', "");
Expect(1, 94, '\P{ispc}', "");
Expect(0, 94, '\P{^ispc}', "");
Expect(1, 95, '\p{__ISPC}', "");
Expect(0, 95, '\p{^__ISPC}', "");
Expect(0, 95, '\P{__ISPC}', "");
Expect(1, 95, '\P{^__ISPC}', "");
Expect(0, 94, '\p{__ISPC}', "");
Expect(1, 94, '\p{^__ISPC}', "");
Expect(1, 94, '\P{__ISPC}', "");
Expect(0, 94, '\P{^__ISPC}', "");
Error('\p{:=-_INInscriptionalPahlavi}');
Error('\P{:=-_INInscriptionalPahlavi}');
Expect(1, 68479, '\p{ininscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^ininscriptionalpahlavi}', "");
Expect(0, 68479, '\P{ininscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^ininscriptionalpahlavi}', "");
Expect(0, 68447, '\p{ininscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^ininscriptionalpahlavi}', "");
Expect(1, 68447, '\P{ininscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^ininscriptionalpahlavi}', "");
Expect(1, 68479, '\p{		InInscriptional_Pahlavi}', "");
Expect(0, 68479, '\p{^		InInscriptional_Pahlavi}', "");
Expect(0, 68479, '\P{		InInscriptional_Pahlavi}', "");
Expect(1, 68479, '\P{^		InInscriptional_Pahlavi}', "");
Expect(0, 68447, '\p{		InInscriptional_Pahlavi}', "");
Expect(1, 68447, '\p{^		InInscriptional_Pahlavi}', "");
Expect(1, 68447, '\P{		InInscriptional_Pahlavi}', "");
Expect(0, 68447, '\P{^		InInscriptional_Pahlavi}', "");
Error('\p{:=_Variation	Selectors}');
Error('\P{:=_Variation	Selectors}');
Expect(1, 65039, '\p{variationselectors}', "");
Expect(0, 65039, '\p{^variationselectors}', "");
Expect(0, 65039, '\P{variationselectors}', "");
Expect(1, 65039, '\P{^variationselectors}', "");
Expect(0, 65023, '\p{variationselectors}', "");
Expect(1, 65023, '\p{^variationselectors}', "");
Expect(1, 65023, '\P{variationselectors}', "");
Expect(0, 65023, '\P{^variationselectors}', "");
Expect(1, 65039, '\p{Variation-SELECTORS}', "");
Expect(0, 65039, '\p{^Variation-SELECTORS}', "");
Expect(0, 65039, '\P{Variation-SELECTORS}', "");
Expect(1, 65039, '\P{^Variation-SELECTORS}', "");
Expect(0, 65023, '\p{Variation-SELECTORS}', "");
Expect(1, 65023, '\p{^Variation-SELECTORS}', "");
Expect(1, 65023, '\P{Variation-SELECTORS}', "");
Expect(0, 65023, '\P{^Variation-SELECTORS}', "");
Error('\p{:=	 IsVariationSelectors}');
Error('\P{:=	 IsVariationSelectors}');
Expect(1, 65039, '\p{isvariationselectors}', "");
Expect(0, 65039, '\p{^isvariationselectors}', "");
Expect(0, 65039, '\P{isvariationselectors}', "");
Expect(1, 65039, '\P{^isvariationselectors}', "");
Expect(0, 65023, '\p{isvariationselectors}', "");
Expect(1, 65023, '\p{^isvariationselectors}', "");
Expect(1, 65023, '\P{isvariationselectors}', "");
Expect(0, 65023, '\P{^isvariationselectors}', "");
Expect(1, 65039, '\p{	-IsVariation selectors}', "");
Expect(0, 65039, '\p{^	-IsVariation selectors}', "");
Expect(0, 65039, '\P{	-IsVariation selectors}', "");
Expect(1, 65039, '\P{^	-IsVariation selectors}', "");
Expect(0, 65023, '\p{	-IsVariation selectors}', "");
Expect(1, 65023, '\p{^	-IsVariation selectors}', "");
Expect(1, 65023, '\P{	-IsVariation selectors}', "");
Expect(0, 65023, '\P{^	-IsVariation selectors}', "");
Error('\p{/a/	-In_Variation_Selectors}');
Error('\P{/a/	-In_Variation_Selectors}');
Expect(1, 65039, '\p{invariationselectors}', "");
Expect(0, 65039, '\p{^invariationselectors}', "");
Expect(0, 65039, '\P{invariationselectors}', "");
Expect(1, 65039, '\P{^invariationselectors}', "");
Expect(0, 65023, '\p{invariationselectors}', "");
Expect(1, 65023, '\p{^invariationselectors}', "");
Expect(1, 65023, '\P{invariationselectors}', "");
Expect(0, 65023, '\P{^invariationselectors}', "");
Expect(1, 65039, '\p{_in	Variation	Selectors}', "");
Expect(0, 65039, '\p{^_in	Variation	Selectors}', "");
Expect(0, 65039, '\P{_in	Variation	Selectors}', "");
Expect(1, 65039, '\P{^_in	Variation	Selectors}', "");
Expect(0, 65023, '\p{_in	Variation	Selectors}', "");
Expect(1, 65023, '\p{^_in	Variation	Selectors}', "");
Expect(1, 65023, '\P{_in	Variation	Selectors}', "");
Expect(0, 65023, '\P{^_in	Variation	Selectors}', "");
Error('\p{ __X	LVlvt/a/V}');
Error('\P{ __X	LVlvt/a/V}');
Expect(1, 4519, '\p{_X_lv_LVT_v}', "");
Expect(0, 4519, '\p{^_X_lv_LVT_v}', "");
Expect(0, 4519, '\P{_X_lv_LVT_v}', "");
Expect(1, 4519, '\P{^_X_lv_LVT_v}', "");
Expect(0, 4447, '\p{_X_lv_LVT_v}', "");
Expect(1, 4447, '\p{^_X_lv_LVT_v}', "");
Expect(1, 4447, '\P{_X_lv_LVT_v}', "");
Expect(0, 4447, '\P{^_X_lv_LVT_v}', "");
Error('\p{-/a/Private_Use}');
Error('\P{-/a/Private_Use}');
Expect(1, 63743, '\p{privateuse}', "");
Expect(0, 63743, '\p{^privateuse}', "");
Expect(0, 63743, '\P{privateuse}', "");
Expect(1, 63743, '\P{^privateuse}', "");
Expect(0, 1, '\p{privateuse}', "");
Expect(1, 1, '\p{^privateuse}', "");
Expect(1, 1, '\P{privateuse}', "");
Expect(0, 1, '\P{^privateuse}', "");
Expect(1, 63743, '\p{-	PRIVATEUse}', "");
Expect(0, 63743, '\p{^-	PRIVATEUse}', "");
Expect(0, 63743, '\P{-	PRIVATEUse}', "");
Expect(1, 63743, '\P{^-	PRIVATEUse}', "");
Expect(0, 1, '\p{-	PRIVATEUse}', "");
Expect(1, 1, '\p{^-	PRIVATEUse}', "");
Expect(1, 1, '\P{-	PRIVATEUse}', "");
Expect(0, 1, '\P{^-	PRIVATEUse}', "");
Error('\p{/a/Isprivate_Use}');
Error('\P{/a/Isprivate_Use}');
Expect(1, 63743, '\p{isprivateuse}', "");
Expect(0, 63743, '\p{^isprivateuse}', "");
Expect(0, 63743, '\P{isprivateuse}', "");
Expect(1, 63743, '\P{^isprivateuse}', "");
Expect(0, 1, '\p{isprivateuse}', "");
Expect(1, 1, '\p{^isprivateuse}', "");
Expect(1, 1, '\P{isprivateuse}', "");
Expect(0, 1, '\P{^isprivateuse}', "");
Expect(1, 63743, '\p{	_IS-PrivateUSE}', "");
Expect(0, 63743, '\p{^	_IS-PrivateUSE}', "");
Expect(0, 63743, '\P{	_IS-PrivateUSE}', "");
Expect(1, 63743, '\P{^	_IS-PrivateUSE}', "");
Expect(0, 1, '\p{	_IS-PrivateUSE}', "");
Expect(1, 1, '\p{^	_IS-PrivateUSE}', "");
Expect(1, 1, '\P{	_IS-PrivateUSE}', "");
Expect(0, 1, '\P{^	_IS-PrivateUSE}', "");
Error('\p{:=_co}');
Error('\P{:=_co}');
Expect(1, 63743, '\p{co}', "");
Expect(0, 63743, '\p{^co}', "");
Expect(0, 63743, '\P{co}', "");
Expect(1, 63743, '\P{^co}', "");
Expect(0, 1, '\p{co}', "");
Expect(1, 1, '\p{^co}', "");
Expect(1, 1, '\P{co}', "");
Expect(0, 1, '\P{^co}', "");
Expect(1, 63743, '\p{ co}', "");
Expect(0, 63743, '\p{^ co}', "");
Expect(0, 63743, '\P{ co}', "");
Expect(1, 63743, '\P{^ co}', "");
Expect(0, 1, '\p{ co}', "");
Expect(1, 1, '\p{^ co}', "");
Expect(1, 1, '\P{ co}', "");
Expect(0, 1, '\P{^ co}', "");
Error('\p{	Is Co:=}');
Error('\P{	Is Co:=}');
Expect(1, 63743, '\p{isco}', "");
Expect(0, 63743, '\p{^isco}', "");
Expect(0, 63743, '\P{isco}', "");
Expect(1, 63743, '\P{^isco}', "");
Expect(0, 1, '\p{isco}', "");
Expect(1, 1, '\p{^isco}', "");
Expect(1, 1, '\P{isco}', "");
Expect(0, 1, '\P{^isco}', "");
Expect(1, 63743, '\p{	-IS co}', "");
Expect(0, 63743, '\p{^	-IS co}', "");
Expect(0, 63743, '\P{	-IS co}', "");
Expect(1, 63743, '\P{^	-IS co}', "");
Expect(0, 1, '\p{	-IS co}', "");
Expect(1, 1, '\p{^	-IS co}', "");
Expect(1, 1, '\P{	-IS co}', "");
Expect(0, 1, '\P{^	-IS co}', "");
Error('\p{ In:=lisu}');
Error('\P{ In:=lisu}');
Expect(1, 42239, '\p{inlisu}', "");
Expect(0, 42239, '\p{^inlisu}', "");
Expect(0, 42239, '\P{inlisu}', "");
Expect(1, 42239, '\P{^inlisu}', "");
Expect(0, 42191, '\p{inlisu}', "");
Expect(1, 42191, '\p{^inlisu}', "");
Expect(1, 42191, '\P{inlisu}', "");
Expect(0, 42191, '\P{^inlisu}', "");
Expect(1, 42239, '\p{	_in	Lisu}', "");
Expect(0, 42239, '\p{^	_in	Lisu}', "");
Expect(0, 42239, '\P{	_in	Lisu}', "");
Expect(1, 42239, '\P{^	_in	Lisu}', "");
Expect(0, 42191, '\p{	_in	Lisu}', "");
Expect(1, 42191, '\p{^	_in	Lisu}', "");
Expect(1, 42191, '\P{	_in	Lisu}', "");
Expect(0, 42191, '\P{^	_in	Lisu}', "");
Error('\p{	dash:=PUNCTUATION}');
Error('\P{	dash:=PUNCTUATION}');
Expect(1, 45, '\p{dashpunctuation}', "");
Expect(0, 45, '\p{^dashpunctuation}', "");
Expect(0, 45, '\P{dashpunctuation}', "");
Expect(1, 45, '\P{^dashpunctuation}', "");
Expect(0, 44, '\p{dashpunctuation}', "");
Expect(1, 44, '\p{^dashpunctuation}', "");
Expect(1, 44, '\P{dashpunctuation}', "");
Expect(0, 44, '\P{^dashpunctuation}', "");
Expect(1, 45, '\p{_-Dash-PUNCTUATION}', "");
Expect(0, 45, '\p{^_-Dash-PUNCTUATION}', "");
Expect(0, 45, '\P{_-Dash-PUNCTUATION}', "");
Expect(1, 45, '\P{^_-Dash-PUNCTUATION}', "");
Expect(0, 44, '\p{_-Dash-PUNCTUATION}', "");
Expect(1, 44, '\p{^_-Dash-PUNCTUATION}', "");
Expect(1, 44, '\P{_-Dash-PUNCTUATION}', "");
Expect(0, 44, '\P{^_-Dash-PUNCTUATION}', "");
Error('\p{-is	DASH Punctuation/a/}');
Error('\P{-is	DASH Punctuation/a/}');
Expect(1, 45, '\p{isdashpunctuation}', "");
Expect(0, 45, '\p{^isdashpunctuation}', "");
Expect(0, 45, '\P{isdashpunctuation}', "");
Expect(1, 45, '\P{^isdashpunctuation}', "");
Expect(0, 44, '\p{isdashpunctuation}', "");
Expect(1, 44, '\p{^isdashpunctuation}', "");
Expect(1, 44, '\P{isdashpunctuation}', "");
Expect(0, 44, '\P{^isdashpunctuation}', "");
Expect(1, 45, '\p{-	Is_DASH Punctuation}', "");
Expect(0, 45, '\p{^-	Is_DASH Punctuation}', "");
Expect(0, 45, '\P{-	Is_DASH Punctuation}', "");
Expect(1, 45, '\P{^-	Is_DASH Punctuation}', "");
Expect(0, 44, '\p{-	Is_DASH Punctuation}', "");
Expect(1, 44, '\p{^-	Is_DASH Punctuation}', "");
Expect(1, 44, '\P{-	Is_DASH Punctuation}', "");
Expect(0, 44, '\P{^-	Is_DASH Punctuation}', "");
Error('\p{ pd:=}');
Error('\P{ pd:=}');
Expect(1, 45, '\p{pd}', "");
Expect(0, 45, '\p{^pd}', "");
Expect(0, 45, '\P{pd}', "");
Expect(1, 45, '\P{^pd}', "");
Expect(0, 44, '\p{pd}', "");
Expect(1, 44, '\p{^pd}', "");
Expect(1, 44, '\P{pd}', "");
Expect(0, 44, '\P{^pd}', "");
Expect(1, 45, '\p{-_pd}', "");
Expect(0, 45, '\p{^-_pd}', "");
Expect(0, 45, '\P{-_pd}', "");
Expect(1, 45, '\P{^-_pd}', "");
Expect(0, 44, '\p{-_pd}', "");
Expect(1, 44, '\p{^-_pd}', "");
Expect(1, 44, '\P{-_pd}', "");
Expect(0, 44, '\P{^-_pd}', "");
Error('\p{:=IS	PD}');
Error('\P{:=IS	PD}');
Expect(1, 45, '\p{ispd}', "");
Expect(0, 45, '\p{^ispd}', "");
Expect(0, 45, '\P{ispd}', "");
Expect(1, 45, '\P{^ispd}', "");
Expect(0, 44, '\p{ispd}', "");
Expect(1, 44, '\p{^ispd}', "");
Expect(1, 44, '\P{ispd}', "");
Expect(0, 44, '\P{^ispd}', "");
Expect(1, 45, '\p{-	is-pd}', "");
Expect(0, 45, '\p{^-	is-pd}', "");
Expect(0, 45, '\P{-	is-pd}', "");
Expect(1, 45, '\P{^-	is-pd}', "");
Expect(0, 44, '\p{-	is-pd}', "");
Expect(1, 44, '\p{^-	is-pd}', "");
Expect(1, 44, '\P{-	is-pd}', "");
Expect(0, 44, '\P{^-	is-pd}', "");
Error('\p{:=BOPOMOFO extended}');
Error('\P{:=BOPOMOFO extended}');
Expect(1, 12735, '\p{bopomofoextended}', "");
Expect(0, 12735, '\p{^bopomofoextended}', "");
Expect(0, 12735, '\P{bopomofoextended}', "");
Expect(1, 12735, '\P{^bopomofoextended}', "");
Expect(0, 12703, '\p{bopomofoextended}', "");
Expect(1, 12703, '\p{^bopomofoextended}', "");
Expect(1, 12703, '\P{bopomofoextended}', "");
Expect(0, 12703, '\P{^bopomofoextended}', "");
Expect(1, 12735, '\p{-	bopomofo	Extended}', "");
Expect(0, 12735, '\p{^-	bopomofo	Extended}', "");
Expect(0, 12735, '\P{-	bopomofo	Extended}', "");
Expect(1, 12735, '\P{^-	bopomofo	Extended}', "");
Expect(0, 12703, '\p{-	bopomofo	Extended}', "");
Expect(1, 12703, '\p{^-	bopomofo	Extended}', "");
Expect(1, 12703, '\P{-	bopomofo	Extended}', "");
Expect(0, 12703, '\P{^-	bopomofo	Extended}', "");
Error('\p{/a/Is bopomofo-Extended}');
Error('\P{/a/Is bopomofo-Extended}');
Expect(1, 12735, '\p{isbopomofoextended}', "");
Expect(0, 12735, '\p{^isbopomofoextended}', "");
Expect(0, 12735, '\P{isbopomofoextended}', "");
Expect(1, 12735, '\P{^isbopomofoextended}', "");
Expect(0, 12703, '\p{isbopomofoextended}', "");
Expect(1, 12703, '\p{^isbopomofoextended}', "");
Expect(1, 12703, '\P{isbopomofoextended}', "");
Expect(0, 12703, '\P{^isbopomofoextended}', "");
Expect(1, 12735, '\p{ _IS	bopomofo Extended}', "");
Expect(0, 12735, '\p{^ _IS	bopomofo Extended}', "");
Expect(0, 12735, '\P{ _IS	bopomofo Extended}', "");
Expect(1, 12735, '\P{^ _IS	bopomofo Extended}', "");
Expect(0, 12703, '\p{ _IS	bopomofo Extended}', "");
Expect(1, 12703, '\p{^ _IS	bopomofo Extended}', "");
Expect(1, 12703, '\P{ _IS	bopomofo Extended}', "");
Expect(0, 12703, '\P{^ _IS	bopomofo Extended}', "");
Error('\p{/a/	in-BOPOMOFO-EXTENDED}');
Error('\P{/a/	in-BOPOMOFO-EXTENDED}');
Expect(1, 12735, '\p{inbopomofoextended}', "");
Expect(0, 12735, '\p{^inbopomofoextended}', "");
Expect(0, 12735, '\P{inbopomofoextended}', "");
Expect(1, 12735, '\P{^inbopomofoextended}', "");
Expect(0, 12703, '\p{inbopomofoextended}', "");
Expect(1, 12703, '\p{^inbopomofoextended}', "");
Expect(1, 12703, '\P{inbopomofoextended}', "");
Expect(0, 12703, '\P{^inbopomofoextended}', "");
Expect(1, 12735, '\p{-	in_bopomofo-extended}', "");
Expect(0, 12735, '\p{^-	in_bopomofo-extended}', "");
Expect(0, 12735, '\P{-	in_bopomofo-extended}', "");
Expect(1, 12735, '\P{^-	in_bopomofo-extended}', "");
Expect(0, 12703, '\p{-	in_bopomofo-extended}', "");
Expect(1, 12703, '\p{^-	in_bopomofo-extended}', "");
Expect(1, 12703, '\P{-	in_bopomofo-extended}', "");
Expect(0, 12703, '\P{^-	in_bopomofo-extended}', "");
Error('\p{:=In-KHMER}');
Error('\P{:=In-KHMER}');
Expect(1, 6143, '\p{inkhmer}', "");
Expect(0, 6143, '\p{^inkhmer}', "");
Expect(0, 6143, '\P{inkhmer}', "");
Expect(1, 6143, '\P{^inkhmer}', "");
Expect(0, 6015, '\p{inkhmer}', "");
Expect(1, 6015, '\p{^inkhmer}', "");
Expect(1, 6015, '\P{inkhmer}', "");
Expect(0, 6015, '\P{^inkhmer}', "");
Expect(1, 6143, '\p{-_IN	KHMER}', "");
Expect(0, 6143, '\p{^-_IN	KHMER}', "");
Expect(0, 6143, '\P{-_IN	KHMER}', "");
Expect(1, 6143, '\P{^-_IN	KHMER}', "");
Expect(0, 6015, '\p{-_IN	KHMER}', "");
Expect(1, 6015, '\p{^-_IN	KHMER}', "");
Expect(1, 6015, '\P{-_IN	KHMER}', "");
Expect(0, 6015, '\P{^-_IN	KHMER}', "");
Error('\p{:=-INSamaritan}');
Error('\P{:=-INSamaritan}');
Expect(1, 2111, '\p{insamaritan}', "");
Expect(0, 2111, '\p{^insamaritan}', "");
Expect(0, 2111, '\P{insamaritan}', "");
Expect(1, 2111, '\P{^insamaritan}', "");
Expect(0, 2047, '\p{insamaritan}', "");
Expect(1, 2047, '\p{^insamaritan}', "");
Expect(1, 2047, '\P{insamaritan}', "");
Expect(0, 2047, '\P{^insamaritan}', "");
Expect(1, 2111, '\p{-_IN SAMARITAN}', "");
Expect(0, 2111, '\p{^-_IN SAMARITAN}', "");
Expect(0, 2111, '\P{-_IN SAMARITAN}', "");
Expect(1, 2111, '\P{^-_IN SAMARITAN}', "");
Expect(0, 2047, '\p{-_IN SAMARITAN}', "");
Expect(1, 2047, '\p{^-_IN SAMARITAN}', "");
Expect(1, 2047, '\P{-_IN SAMARITAN}', "");
Expect(0, 2047, '\P{^-_IN SAMARITAN}', "");
Error('\p{:=_ GENERAL punctuation}');
Error('\P{:=_ GENERAL punctuation}');
Expect(1, 8303, '\p{generalpunctuation}', "");
Expect(0, 8303, '\p{^generalpunctuation}', "");
Expect(0, 8303, '\P{generalpunctuation}', "");
Expect(1, 8303, '\P{^generalpunctuation}', "");
Expect(0, 8191, '\p{generalpunctuation}', "");
Expect(1, 8191, '\p{^generalpunctuation}', "");
Expect(1, 8191, '\P{generalpunctuation}', "");
Expect(0, 8191, '\P{^generalpunctuation}', "");
Expect(1, 8303, '\p{		GENERAL	PUNCTUATION}', "");
Expect(0, 8303, '\p{^		GENERAL	PUNCTUATION}', "");
Expect(0, 8303, '\P{		GENERAL	PUNCTUATION}', "");
Expect(1, 8303, '\P{^		GENERAL	PUNCTUATION}', "");
Expect(0, 8191, '\p{		GENERAL	PUNCTUATION}', "");
Expect(1, 8191, '\p{^		GENERAL	PUNCTUATION}', "");
Expect(1, 8191, '\P{		GENERAL	PUNCTUATION}', "");
Expect(0, 8191, '\P{^		GENERAL	PUNCTUATION}', "");
Error('\p{__is GENERAL:=PUNCTUATION}');
Error('\P{__is GENERAL:=PUNCTUATION}');
Expect(1, 8303, '\p{isgeneralpunctuation}', "");
Expect(0, 8303, '\p{^isgeneralpunctuation}', "");
Expect(0, 8303, '\P{isgeneralpunctuation}', "");
Expect(1, 8303, '\P{^isgeneralpunctuation}', "");
Expect(0, 8191, '\p{isgeneralpunctuation}', "");
Expect(1, 8191, '\p{^isgeneralpunctuation}', "");
Expect(1, 8191, '\P{isgeneralpunctuation}', "");
Expect(0, 8191, '\P{^isgeneralpunctuation}', "");
Expect(1, 8303, '\p{- IS-General	Punctuation}', "");
Expect(0, 8303, '\p{^- IS-General	Punctuation}', "");
Expect(0, 8303, '\P{- IS-General	Punctuation}', "");
Expect(1, 8303, '\P{^- IS-General	Punctuation}', "");
Expect(0, 8191, '\p{- IS-General	Punctuation}', "");
Expect(1, 8191, '\p{^- IS-General	Punctuation}', "");
Expect(1, 8191, '\P{- IS-General	Punctuation}', "");
Expect(0, 8191, '\P{^- IS-General	Punctuation}', "");
Error('\p{:=	_IN_GENERAL Punctuation}');
Error('\P{:=	_IN_GENERAL Punctuation}');
Expect(1, 8303, '\p{ingeneralpunctuation}', "");
Expect(0, 8303, '\p{^ingeneralpunctuation}', "");
Expect(0, 8303, '\P{ingeneralpunctuation}', "");
Expect(1, 8303, '\P{^ingeneralpunctuation}', "");
Expect(0, 8191, '\p{ingeneralpunctuation}', "");
Expect(1, 8191, '\p{^ingeneralpunctuation}', "");
Expect(1, 8191, '\P{ingeneralpunctuation}', "");
Expect(0, 8191, '\P{^ingeneralpunctuation}', "");
Expect(1, 8303, '\p{		In_General Punctuation}', "");
Expect(0, 8303, '\p{^		In_General Punctuation}', "");
Expect(0, 8303, '\P{		In_General Punctuation}', "");
Expect(1, 8303, '\P{^		In_General Punctuation}', "");
Expect(0, 8191, '\p{		In_General Punctuation}', "");
Expect(1, 8191, '\p{^		In_General Punctuation}', "");
Expect(1, 8191, '\P{		In_General Punctuation}', "");
Expect(0, 8191, '\P{^		In_General Punctuation}', "");
Error('\p{ /a/In_Georgian}');
Error('\P{ /a/In_Georgian}');
Expect(1, 4351, '\p{ingeorgian}', "");
Expect(0, 4351, '\p{^ingeorgian}', "");
Expect(0, 4351, '\P{ingeorgian}', "");
Expect(1, 4351, '\P{^ingeorgian}', "");
Expect(0, 4255, '\p{ingeorgian}', "");
Expect(1, 4255, '\p{^ingeorgian}', "");
Expect(1, 4255, '\P{ingeorgian}', "");
Expect(0, 4255, '\P{^ingeorgian}', "");
Expect(1, 4351, '\p{-	In_georgian}', "");
Expect(0, 4351, '\p{^-	In_georgian}', "");
Expect(0, 4351, '\P{-	In_georgian}', "");
Expect(1, 4351, '\P{^-	In_georgian}', "");
Expect(0, 4255, '\p{-	In_georgian}', "");
Expect(1, 4255, '\p{^-	In_georgian}', "");
Expect(1, 4255, '\P{-	In_georgian}', "");
Expect(0, 4255, '\P{^-	In_georgian}', "");
Error('\p{	-In/a/Limbu}');
Error('\P{	-In/a/Limbu}');
Expect(1, 6479, '\p{inlimbu}', "");
Expect(0, 6479, '\p{^inlimbu}', "");
Expect(0, 6479, '\P{inlimbu}', "");
Expect(1, 6479, '\P{^inlimbu}', "");
Expect(0, 6399, '\p{inlimbu}', "");
Expect(1, 6399, '\p{^inlimbu}', "");
Expect(1, 6399, '\P{inlimbu}', "");
Expect(0, 6399, '\P{^inlimbu}', "");
Expect(1, 6479, '\p{--in Limbu}', "");
Expect(0, 6479, '\p{^--in Limbu}', "");
Expect(0, 6479, '\P{--in Limbu}', "");
Expect(1, 6479, '\P{^--in Limbu}', "");
Expect(0, 6399, '\p{--in Limbu}', "");
Expect(1, 6399, '\p{^--in Limbu}', "");
Expect(1, 6399, '\P{--in Limbu}', "");
Expect(0, 6399, '\P{^--in Limbu}', "");
Error('\p{:=In-Lydian}');
Error('\P{:=In-Lydian}');
Expect(1, 67903, '\p{inlydian}', "");
Expect(0, 67903, '\p{^inlydian}', "");
Expect(0, 67903, '\P{inlydian}', "");
Expect(1, 67903, '\P{^inlydian}', "");
Expect(0, 67871, '\p{inlydian}', "");
Expect(1, 67871, '\p{^inlydian}', "");
Expect(1, 67871, '\P{inlydian}', "");
Expect(0, 67871, '\P{^inlydian}', "");
Expect(1, 67903, '\p{_IN-Lydian}', "");
Expect(0, 67903, '\p{^_IN-Lydian}', "");
Expect(0, 67903, '\P{_IN-Lydian}', "");
Expect(1, 67903, '\P{^_IN-Lydian}', "");
Expect(0, 67871, '\p{_IN-Lydian}', "");
Expect(1, 67871, '\p{^_IN-Lydian}', "");
Expect(1, 67871, '\P{_IN-Lydian}', "");
Expect(0, 67871, '\P{^_IN-Lydian}', "");
Error('\p{	IN/a/Old-South	arabian}');
Error('\P{	IN/a/Old-South	arabian}');
Expect(1, 68223, '\p{inoldsoutharabian}', "");
Expect(0, 68223, '\p{^inoldsoutharabian}', "");
Expect(0, 68223, '\P{inoldsoutharabian}', "");
Expect(1, 68223, '\P{^inoldsoutharabian}', "");
Expect(0, 68191, '\p{inoldsoutharabian}', "");
Expect(1, 68191, '\p{^inoldsoutharabian}', "");
Expect(1, 68191, '\P{inoldsoutharabian}', "");
Expect(0, 68191, '\P{^inoldsoutharabian}', "");
Expect(1, 68223, '\p{in-oldSouth	Arabian}', "");
Expect(0, 68223, '\p{^in-oldSouth	Arabian}', "");
Expect(0, 68223, '\P{in-oldSouth	Arabian}', "");
Expect(1, 68223, '\P{^in-oldSouth	Arabian}', "");
Expect(0, 68191, '\p{in-oldSouth	Arabian}', "");
Expect(1, 68191, '\p{^in-oldSouth	Arabian}', "");
Expect(1, 68191, '\P{in-oldSouth	Arabian}', "");
Expect(0, 68191, '\P{^in-oldSouth	Arabian}', "");
Error('\p{-	IN kharoshthi:=}');
Error('\P{-	IN kharoshthi:=}');
Expect(1, 68191, '\p{inkharoshthi}', "");
Expect(0, 68191, '\p{^inkharoshthi}', "");
Expect(0, 68191, '\P{inkharoshthi}', "");
Expect(1, 68191, '\P{^inkharoshthi}', "");
Expect(0, 68095, '\p{inkharoshthi}', "");
Expect(1, 68095, '\p{^inkharoshthi}', "");
Expect(1, 68095, '\P{inkharoshthi}', "");
Expect(0, 68095, '\P{^inkharoshthi}', "");
Expect(1, 68191, '\p{_in_kharoshthi}', "");
Expect(0, 68191, '\p{^_in_kharoshthi}', "");
Expect(0, 68191, '\P{_in_kharoshthi}', "");
Expect(1, 68191, '\P{^_in_kharoshthi}', "");
Expect(0, 68095, '\p{_in_kharoshthi}', "");
Expect(1, 68095, '\p{^_in_kharoshthi}', "");
Expect(1, 68095, '\P{_in_kharoshthi}', "");
Expect(0, 68095, '\P{^_in_kharoshthi}', "");
Error('\p{-/a/In	BAMUM}');
Error('\P{-/a/In	BAMUM}');
Expect(1, 42751, '\p{inbamum}', "");
Expect(0, 42751, '\p{^inbamum}', "");
Expect(0, 42751, '\P{inbamum}', "");
Expect(1, 42751, '\P{^inbamum}', "");
Expect(0, 42655, '\p{inbamum}', "");
Expect(1, 42655, '\p{^inbamum}', "");
Expect(1, 42655, '\P{inbamum}', "");
Expect(0, 42655, '\P{^inbamum}', "");
Expect(1, 42751, '\p{ _In-Bamum}', "");
Expect(0, 42751, '\p{^ _In-Bamum}', "");
Expect(0, 42751, '\P{ _In-Bamum}', "");
Expect(1, 42751, '\P{^ _In-Bamum}', "");
Expect(0, 42655, '\p{ _In-Bamum}', "");
Expect(1, 42655, '\p{^ _In-Bamum}', "");
Expect(1, 42655, '\P{ _In-Bamum}', "");
Expect(0, 42655, '\P{^ _In-Bamum}', "");
Error('\p{_ Changes	WhenCASEMAPPED/a/}');
Error('\P{_ Changes	WhenCASEMAPPED/a/}');
Expect(1, 90, '\p{changeswhencasemapped}', "");
Expect(0, 90, '\p{^changeswhencasemapped}', "");
Expect(0, 90, '\P{changeswhencasemapped}', "");
Expect(1, 90, '\P{^changeswhencasemapped}', "");
Expect(0, 64, '\p{changeswhencasemapped}', "");
Expect(1, 64, '\p{^changeswhencasemapped}', "");
Expect(1, 64, '\P{changeswhencasemapped}', "");
Expect(0, 64, '\P{^changeswhencasemapped}', "");
Expect(1, 90, '\p{_-Changes-When_casemapped}', "");
Expect(0, 90, '\p{^_-Changes-When_casemapped}', "");
Expect(0, 90, '\P{_-Changes-When_casemapped}', "");
Expect(1, 90, '\P{^_-Changes-When_casemapped}', "");
Expect(0, 64, '\p{_-Changes-When_casemapped}', "");
Expect(1, 64, '\p{^_-Changes-When_casemapped}', "");
Expect(1, 64, '\P{_-Changes-When_casemapped}', "");
Expect(0, 64, '\P{^_-Changes-When_casemapped}', "");
Error('\p{	/a/ISChanges WHEN_Casemapped}');
Error('\P{	/a/ISChanges WHEN_Casemapped}');
Expect(1, 90, '\p{ischangeswhencasemapped}', "");
Expect(0, 90, '\p{^ischangeswhencasemapped}', "");
Expect(0, 90, '\P{ischangeswhencasemapped}', "");
Expect(1, 90, '\P{^ischangeswhencasemapped}', "");
Expect(0, 64, '\p{ischangeswhencasemapped}', "");
Expect(1, 64, '\p{^ischangeswhencasemapped}', "");
Expect(1, 64, '\P{ischangeswhencasemapped}', "");
Expect(0, 64, '\P{^ischangeswhencasemapped}', "");
Expect(1, 90, '\p{ Is-Changes	When	casemapped}', "");
Expect(0, 90, '\p{^ Is-Changes	When	casemapped}', "");
Expect(0, 90, '\P{ Is-Changes	When	casemapped}', "");
Expect(1, 90, '\P{^ Is-Changes	When	casemapped}', "");
Expect(0, 64, '\p{ Is-Changes	When	casemapped}', "");
Expect(1, 64, '\p{^ Is-Changes	When	casemapped}', "");
Expect(1, 64, '\P{ Is-Changes	When	casemapped}', "");
Expect(0, 64, '\P{^ Is-Changes	When	casemapped}', "");
Error('\p{--CWCM:=}');
Error('\P{--CWCM:=}');
Expect(1, 90, '\p{cwcm}', "");
Expect(0, 90, '\p{^cwcm}', "");
Expect(0, 90, '\P{cwcm}', "");
Expect(1, 90, '\P{^cwcm}', "");
Expect(0, 64, '\p{cwcm}', "");
Expect(1, 64, '\p{^cwcm}', "");
Expect(1, 64, '\P{cwcm}', "");
Expect(0, 64, '\P{^cwcm}', "");
Expect(1, 90, '\p{	-CWCM}', "");
Expect(0, 90, '\p{^	-CWCM}', "");
Expect(0, 90, '\P{	-CWCM}', "");
Expect(1, 90, '\P{^	-CWCM}', "");
Expect(0, 64, '\p{	-CWCM}', "");
Expect(1, 64, '\p{^	-CWCM}', "");
Expect(1, 64, '\P{	-CWCM}', "");
Expect(0, 64, '\P{^	-CWCM}', "");
Error('\p{/a/_is	cwcm}');
Error('\P{/a/_is	cwcm}');
Expect(1, 90, '\p{iscwcm}', "");
Expect(0, 90, '\p{^iscwcm}', "");
Expect(0, 90, '\P{iscwcm}', "");
Expect(1, 90, '\P{^iscwcm}', "");
Expect(0, 64, '\p{iscwcm}', "");
Expect(1, 64, '\p{^iscwcm}', "");
Expect(1, 64, '\P{iscwcm}', "");
Expect(0, 64, '\P{^iscwcm}', "");
Expect(1, 90, '\p{_ IS_CWCM}', "");
Expect(0, 90, '\p{^_ IS_CWCM}', "");
Expect(0, 90, '\P{_ IS_CWCM}', "");
Expect(1, 90, '\P{^_ IS_CWCM}', "");
Expect(0, 64, '\p{_ IS_CWCM}', "");
Expect(1, 64, '\p{^_ IS_CWCM}', "");
Expect(1, 64, '\P{_ IS_CWCM}', "");
Expect(0, 64, '\P{^_ IS_CWCM}', "");
Error('\p{/a/-Dash}');
Error('\P{/a/-Dash}');
Expect(1, 45, '\p{dash}', "");
Expect(0, 45, '\p{^dash}', "");
Expect(0, 45, '\P{dash}', "");
Expect(1, 45, '\P{^dash}', "");
Expect(0, 44, '\p{dash}', "");
Expect(1, 44, '\p{^dash}', "");
Expect(1, 44, '\P{dash}', "");
Expect(0, 44, '\P{^dash}', "");
Expect(1, 45, '\p{	-Dash}', "");
Expect(0, 45, '\p{^	-Dash}', "");
Expect(0, 45, '\P{	-Dash}', "");
Expect(1, 45, '\P{^	-Dash}', "");
Expect(0, 44, '\p{	-Dash}', "");
Expect(1, 44, '\p{^	-Dash}', "");
Expect(1, 44, '\P{	-Dash}', "");
Expect(0, 44, '\P{^	-Dash}', "");
Error('\p{_is/a/Dash}');
Error('\P{_is/a/Dash}');
Expect(1, 45, '\p{isdash}', "");
Expect(0, 45, '\p{^isdash}', "");
Expect(0, 45, '\P{isdash}', "");
Expect(1, 45, '\P{^isdash}', "");
Expect(0, 44, '\p{isdash}', "");
Expect(1, 44, '\p{^isdash}', "");
Expect(1, 44, '\P{isdash}', "");
Expect(0, 44, '\P{^isdash}', "");
Expect(1, 45, '\p{  Is_DASH}', "");
Expect(0, 45, '\p{^  Is_DASH}', "");
Expect(0, 45, '\P{  Is_DASH}', "");
Expect(1, 45, '\P{^  Is_DASH}', "");
Expect(0, 44, '\p{  Is_DASH}', "");
Expect(1, 44, '\p{^  Is_DASH}', "");
Expect(1, 44, '\P{  Is_DASH}', "");
Expect(0, 44, '\P{^  Is_DASH}', "");
Error('\p{ COUNTING/a/rod numerals}');
Error('\P{ COUNTING/a/rod numerals}');
Expect(1, 119679, '\p{countingrodnumerals}', "");
Expect(0, 119679, '\p{^countingrodnumerals}', "");
Expect(0, 119679, '\P{countingrodnumerals}', "");
Expect(1, 119679, '\P{^countingrodnumerals}', "");
Expect(0, 119647, '\p{countingrodnumerals}', "");
Expect(1, 119647, '\p{^countingrodnumerals}', "");
Expect(1, 119647, '\P{countingrodnumerals}', "");
Expect(0, 119647, '\P{^countingrodnumerals}', "");
Expect(1, 119679, '\p{	Counting_ROD Numerals}', "");
Expect(0, 119679, '\p{^	Counting_ROD Numerals}', "");
Expect(0, 119679, '\P{	Counting_ROD Numerals}', "");
Expect(1, 119679, '\P{^	Counting_ROD Numerals}', "");
Expect(0, 119647, '\p{	Counting_ROD Numerals}', "");
Expect(1, 119647, '\p{^	Counting_ROD Numerals}', "");
Expect(1, 119647, '\P{	Counting_ROD Numerals}', "");
Expect(0, 119647, '\P{^	Counting_ROD Numerals}', "");
Error('\p{/a/ Is_counting	Rod_Numerals}');
Error('\P{/a/ Is_counting	Rod_Numerals}');
Expect(1, 119679, '\p{iscountingrodnumerals}', "");
Expect(0, 119679, '\p{^iscountingrodnumerals}', "");
Expect(0, 119679, '\P{iscountingrodnumerals}', "");
Expect(1, 119679, '\P{^iscountingrodnumerals}', "");
Expect(0, 119647, '\p{iscountingrodnumerals}', "");
Expect(1, 119647, '\p{^iscountingrodnumerals}', "");
Expect(1, 119647, '\P{iscountingrodnumerals}', "");
Expect(0, 119647, '\P{^iscountingrodnumerals}', "");
Expect(1, 119679, '\p{ _is_countingRodNUMERALS}', "");
Expect(0, 119679, '\p{^ _is_countingRodNUMERALS}', "");
Expect(0, 119679, '\P{ _is_countingRodNUMERALS}', "");
Expect(1, 119679, '\P{^ _is_countingRodNUMERALS}', "");
Expect(0, 119647, '\p{ _is_countingRodNUMERALS}', "");
Expect(1, 119647, '\p{^ _is_countingRodNUMERALS}', "");
Expect(1, 119647, '\P{ _is_countingRodNUMERALS}', "");
Expect(0, 119647, '\P{^ _is_countingRodNUMERALS}', "");
Error('\p{	_In-counting/a/rod-Numerals}');
Error('\P{	_In-counting/a/rod-Numerals}');
Expect(1, 119679, '\p{incountingrodnumerals}', "");
Expect(0, 119679, '\p{^incountingrodnumerals}', "");
Expect(0, 119679, '\P{incountingrodnumerals}', "");
Expect(1, 119679, '\P{^incountingrodnumerals}', "");
Expect(0, 119647, '\p{incountingrodnumerals}', "");
Expect(1, 119647, '\p{^incountingrodnumerals}', "");
Expect(1, 119647, '\P{incountingrodnumerals}', "");
Expect(0, 119647, '\P{^incountingrodnumerals}', "");
Expect(1, 119679, '\p{	_In_Counting-rod-Numerals}', "");
Expect(0, 119679, '\p{^	_In_Counting-rod-Numerals}', "");
Expect(0, 119679, '\P{	_In_Counting-rod-Numerals}', "");
Expect(1, 119679, '\P{^	_In_Counting-rod-Numerals}', "");
Expect(0, 119647, '\p{	_In_Counting-rod-Numerals}', "");
Expect(1, 119647, '\p{^	_In_Counting-rod-Numerals}', "");
Expect(1, 119647, '\P{	_In_Counting-rod-Numerals}', "");
Expect(0, 119647, '\P{^	_In_Counting-rod-Numerals}', "");
Error('\p{	Enclosed	AlphanumericSUPPLEMENT:=}');
Error('\P{	Enclosed	AlphanumericSUPPLEMENT:=}');
Expect(1, 127487, '\p{enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{	-enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^	-enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{	-enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^	-enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{	-enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^	-enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{	-enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^	-enclosedalphanumericsupplement}', "");
Error('\p{:=IS-Enclosed_alphanumeric	supplement}');
Error('\P{:=IS-Enclosed_alphanumeric	supplement}');
Expect(1, 127487, '\p{isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(0, 127487, '\p{^is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(0, 127487, '\P{is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(1, 127487, '\P{^is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(0, 127231, '\p{is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(1, 127231, '\p{^is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(1, 127231, '\P{is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Expect(0, 127231, '\P{^is ENCLOSED-AlphanumericSUPPLEMENT}', "");
Error('\p{ :=In_ENCLOSED Alphanumeric Supplement}');
Error('\P{ :=In_ENCLOSED Alphanumeric Supplement}');
Expect(1, 127487, '\p{inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(0, 127487, '\p{^_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(0, 127487, '\P{_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(1, 127487, '\P{^_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(0, 127231, '\p{_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(1, 127231, '\p{^_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(1, 127231, '\P{_-IN-ENCLOSEDAlphanumericSupplement}', "");
Expect(0, 127231, '\P{^_-IN-ENCLOSEDAlphanumericSupplement}', "");
Error('\p{-IN	tamil/a/}');
Error('\P{-IN	tamil/a/}');
Expect(1, 3071, '\p{intamil}', "");
Expect(0, 3071, '\p{^intamil}', "");
Expect(0, 3071, '\P{intamil}', "");
Expect(1, 3071, '\P{^intamil}', "");
Expect(0, 2943, '\p{intamil}', "");
Expect(1, 2943, '\p{^intamil}', "");
Expect(1, 2943, '\P{intamil}', "");
Expect(0, 2943, '\P{^intamil}', "");
Expect(1, 3071, '\p{_	InTAMIL}', "");
Expect(0, 3071, '\p{^_	InTAMIL}', "");
Expect(0, 3071, '\P{_	InTAMIL}', "");
Expect(1, 3071, '\P{^_	InTAMIL}', "");
Expect(0, 2943, '\p{_	InTAMIL}', "");
Expect(1, 2943, '\p{^_	InTAMIL}', "");
Expect(1, 2943, '\P{_	InTAMIL}', "");
Expect(0, 2943, '\P{^_	InTAMIL}', "");
Error('\p{	:=In ETHIOPIC}');
Error('\P{	:=In ETHIOPIC}');
Expect(1, 4991, '\p{inethiopic}', "");
Expect(0, 4991, '\p{^inethiopic}', "");
Expect(0, 4991, '\P{inethiopic}', "");
Expect(1, 4991, '\P{^inethiopic}', "");
Expect(0, 4607, '\p{inethiopic}', "");
Expect(1, 4607, '\p{^inethiopic}', "");
Expect(1, 4607, '\P{inethiopic}', "");
Expect(0, 4607, '\P{^inethiopic}', "");
Expect(1, 4991, '\p{__inETHIOPIC}', "");
Expect(0, 4991, '\p{^__inETHIOPIC}', "");
Expect(0, 4991, '\P{__inETHIOPIC}', "");
Expect(1, 4991, '\P{^__inETHIOPIC}', "");
Expect(0, 4607, '\p{__inETHIOPIC}', "");
Expect(1, 4607, '\p{^__inETHIOPIC}', "");
Expect(1, 4607, '\P{__inETHIOPIC}', "");
Expect(0, 4607, '\P{^__inETHIOPIC}', "");
Error('\p{-inTai:=Le}');
Error('\P{-inTai:=Le}');
Expect(1, 6527, '\p{intaile}', "");
Expect(0, 6527, '\p{^intaile}', "");
Expect(0, 6527, '\P{intaile}', "");
Expect(1, 6527, '\P{^intaile}', "");
Expect(0, 6479, '\p{intaile}', "");
Expect(1, 6479, '\p{^intaile}', "");
Expect(1, 6479, '\P{intaile}', "");
Expect(0, 6479, '\P{^intaile}', "");
Expect(1, 6527, '\p{__IN TAILE}', "");
Expect(0, 6527, '\p{^__IN TAILE}', "");
Expect(0, 6527, '\P{__IN TAILE}', "");
Expect(1, 6527, '\P{^__IN TAILE}', "");
Expect(0, 6479, '\p{__IN TAILE}', "");
Expect(1, 6479, '\p{^__IN TAILE}', "");
Expect(1, 6479, '\P{__IN TAILE}', "");
Expect(0, 6479, '\P{^__IN TAILE}', "");
Error('\p{:= _kangxi radicals}');
Error('\P{:= _kangxi radicals}');
Expect(1, 12255, '\p{kangxiradicals}', "");
Expect(0, 12255, '\p{^kangxiradicals}', "");
Expect(0, 12255, '\P{kangxiradicals}', "");
Expect(1, 12255, '\P{^kangxiradicals}', "");
Expect(0, 12031, '\p{kangxiradicals}', "");
Expect(1, 12031, '\p{^kangxiradicals}', "");
Expect(1, 12031, '\P{kangxiradicals}', "");
Expect(0, 12031, '\P{^kangxiradicals}', "");
Expect(1, 12255, '\p{_KANGXIRadicals}', "");
Expect(0, 12255, '\p{^_KANGXIRadicals}', "");
Expect(0, 12255, '\P{_KANGXIRadicals}', "");
Expect(1, 12255, '\P{^_KANGXIRadicals}', "");
Expect(0, 12031, '\p{_KANGXIRadicals}', "");
Expect(1, 12031, '\p{^_KANGXIRadicals}', "");
Expect(1, 12031, '\P{_KANGXIRadicals}', "");
Expect(0, 12031, '\P{^_KANGXIRadicals}', "");
Error('\p{_:=IS_kangxi-radicals}');
Error('\P{_:=IS_kangxi-radicals}');
Expect(1, 12255, '\p{iskangxiradicals}', "");
Expect(0, 12255, '\p{^iskangxiradicals}', "");
Expect(0, 12255, '\P{iskangxiradicals}', "");
Expect(1, 12255, '\P{^iskangxiradicals}', "");
Expect(0, 12031, '\p{iskangxiradicals}', "");
Expect(1, 12031, '\p{^iskangxiradicals}', "");
Expect(1, 12031, '\P{iskangxiradicals}', "");
Expect(0, 12031, '\P{^iskangxiradicals}', "");
Expect(1, 12255, '\p{  Is	KANGXI	Radicals}', "");
Expect(0, 12255, '\p{^  Is	KANGXI	Radicals}', "");
Expect(0, 12255, '\P{  Is	KANGXI	Radicals}', "");
Expect(1, 12255, '\P{^  Is	KANGXI	Radicals}', "");
Expect(0, 12031, '\p{  Is	KANGXI	Radicals}', "");
Expect(1, 12031, '\p{^  Is	KANGXI	Radicals}', "");
Expect(1, 12031, '\P{  Is	KANGXI	Radicals}', "");
Expect(0, 12031, '\P{^  Is	KANGXI	Radicals}', "");
Error('\p{_ In-Kangxi_RADICALS/a/}');
Error('\P{_ In-Kangxi_RADICALS/a/}');
Expect(1, 12255, '\p{inkangxiradicals}', "");
Expect(0, 12255, '\p{^inkangxiradicals}', "");
Expect(0, 12255, '\P{inkangxiradicals}', "");
Expect(1, 12255, '\P{^inkangxiradicals}', "");
Expect(0, 12031, '\p{inkangxiradicals}', "");
Expect(1, 12031, '\p{^inkangxiradicals}', "");
Expect(1, 12031, '\P{inkangxiradicals}', "");
Expect(0, 12031, '\P{^inkangxiradicals}', "");
Expect(1, 12255, '\p{_In	KANGXI	Radicals}', "");
Expect(0, 12255, '\p{^_In	KANGXI	Radicals}', "");
Expect(0, 12255, '\P{_In	KANGXI	Radicals}', "");
Expect(1, 12255, '\P{^_In	KANGXI	Radicals}', "");
Expect(0, 12031, '\p{_In	KANGXI	Radicals}', "");
Expect(1, 12031, '\p{^_In	KANGXI	Radicals}', "");
Expect(1, 12031, '\P{_In	KANGXI	Radicals}', "");
Expect(0, 12031, '\P{^_In	KANGXI	Radicals}', "");
Error('\p{  IN	Hebrew:=}');
Error('\P{  IN	Hebrew:=}');
Expect(1, 1535, '\p{inhebrew}', "");
Expect(0, 1535, '\p{^inhebrew}', "");
Expect(0, 1535, '\P{inhebrew}', "");
Expect(1, 1535, '\P{^inhebrew}', "");
Expect(0, 1423, '\p{inhebrew}', "");
Expect(1, 1423, '\p{^inhebrew}', "");
Expect(1, 1423, '\P{inhebrew}', "");
Expect(0, 1423, '\P{^inhebrew}', "");
Expect(1, 1535, '\p{ In_Hebrew}', "");
Expect(0, 1535, '\p{^ In_Hebrew}', "");
Expect(0, 1535, '\P{ In_Hebrew}', "");
Expect(1, 1535, '\P{^ In_Hebrew}', "");
Expect(0, 1423, '\p{ In_Hebrew}', "");
Expect(1, 1423, '\p{^ In_Hebrew}', "");
Expect(1, 1423, '\P{ In_Hebrew}', "");
Expect(0, 1423, '\P{^ In_Hebrew}', "");
Error('\p{  In/a/INSCRIPTIONAL parthian}');
Error('\P{  In/a/INSCRIPTIONAL parthian}');
Expect(1, 68447, '\p{ininscriptionalparthian}', "");
Expect(0, 68447, '\p{^ininscriptionalparthian}', "");
Expect(0, 68447, '\P{ininscriptionalparthian}', "");
Expect(1, 68447, '\P{^ininscriptionalparthian}', "");
Expect(0, 68415, '\p{ininscriptionalparthian}', "");
Expect(1, 68415, '\p{^ininscriptionalparthian}', "");
Expect(1, 68415, '\P{ininscriptionalparthian}', "");
Expect(0, 68415, '\P{^ininscriptionalparthian}', "");
Expect(1, 68447, '\p{ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68447, '\p{^ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68447, '\P{ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68447, '\P{^ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68415, '\p{ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68415, '\p{^ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(1, 68415, '\P{ IN-INSCRIPTIONAL-PARTHIAN}', "");
Expect(0, 68415, '\P{^ IN-INSCRIPTIONAL-PARTHIAN}', "");
Error('\p{	In	NEW:=tai lue}');
Error('\P{	In	NEW:=tai lue}');
Expect(1, 6623, '\p{innewtailue}', "");
Expect(0, 6623, '\p{^innewtailue}', "");
Expect(0, 6623, '\P{innewtailue}', "");
Expect(1, 6623, '\P{^innewtailue}', "");
Expect(0, 6527, '\p{innewtailue}', "");
Expect(1, 6527, '\p{^innewtailue}', "");
Expect(1, 6527, '\P{innewtailue}', "");
Expect(0, 6527, '\P{^innewtailue}', "");
Expect(1, 6623, '\p{ _In-New-TAI lue}', "");
Expect(0, 6623, '\p{^ _In-New-TAI lue}', "");
Expect(0, 6623, '\P{ _In-New-TAI lue}', "");
Expect(1, 6623, '\P{^ _In-New-TAI lue}', "");
Expect(0, 6527, '\p{ _In-New-TAI lue}', "");
Expect(1, 6527, '\p{^ _In-New-TAI lue}', "");
Expect(1, 6527, '\P{ _In-New-TAI lue}', "");
Expect(0, 6527, '\P{^ _In-New-TAI lue}', "");
Error('\p{__In-IMPERIAL:=aramaic}');
Error('\P{__In-IMPERIAL:=aramaic}');
Expect(1, 67679, '\p{inimperialaramaic}', "");
Expect(0, 67679, '\p{^inimperialaramaic}', "");
Expect(0, 67679, '\P{inimperialaramaic}', "");
Expect(1, 67679, '\P{^inimperialaramaic}', "");
Expect(0, 67647, '\p{inimperialaramaic}', "");
Expect(1, 67647, '\p{^inimperialaramaic}', "");
Expect(1, 67647, '\P{inimperialaramaic}', "");
Expect(0, 67647, '\P{^inimperialaramaic}', "");
Expect(1, 67679, '\p{ in-Imperial Aramaic}', "");
Expect(0, 67679, '\p{^ in-Imperial Aramaic}', "");
Expect(0, 67679, '\P{ in-Imperial Aramaic}', "");
Expect(1, 67679, '\P{^ in-Imperial Aramaic}', "");
Expect(0, 67647, '\p{ in-Imperial Aramaic}', "");
Expect(1, 67647, '\p{^ in-Imperial Aramaic}', "");
Expect(1, 67647, '\P{ in-Imperial Aramaic}', "");
Expect(0, 67647, '\P{^ in-Imperial Aramaic}', "");
Error('\p{_ cjk:=Compatibility forms}');
Error('\P{_ cjk:=Compatibility forms}');
Expect(1, 65103, '\p{cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{-	CJK	Compatibility	FORMS}', "");
Expect(0, 65103, '\p{^-	CJK	Compatibility	FORMS}', "");
Expect(0, 65103, '\P{-	CJK	Compatibility	FORMS}', "");
Expect(1, 65103, '\P{^-	CJK	Compatibility	FORMS}', "");
Expect(0, 65071, '\p{-	CJK	Compatibility	FORMS}', "");
Expect(1, 65071, '\p{^-	CJK	Compatibility	FORMS}', "");
Expect(1, 65071, '\P{-	CJK	Compatibility	FORMS}', "");
Expect(0, 65071, '\P{^-	CJK	Compatibility	FORMS}', "");
Error('\p{		is cjk/a/COMPATIBILITY Forms}');
Error('\P{		is cjk/a/COMPATIBILITY Forms}');
Expect(1, 65103, '\p{iscjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^iscjkcompatibilityforms}', "");
Expect(0, 65103, '\P{iscjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^iscjkcompatibilityforms}', "");
Expect(0, 65071, '\p{iscjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^iscjkcompatibilityforms}', "");
Expect(1, 65071, '\P{iscjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^iscjkcompatibilityforms}', "");
Expect(1, 65103, '\p{-_IS-CJK_Compatibility-FORMS}', "");
Expect(0, 65103, '\p{^-_IS-CJK_Compatibility-FORMS}', "");
Expect(0, 65103, '\P{-_IS-CJK_Compatibility-FORMS}', "");
Expect(1, 65103, '\P{^-_IS-CJK_Compatibility-FORMS}', "");
Expect(0, 65071, '\p{-_IS-CJK_Compatibility-FORMS}', "");
Expect(1, 65071, '\p{^-_IS-CJK_Compatibility-FORMS}', "");
Expect(1, 65071, '\P{-_IS-CJK_Compatibility-FORMS}', "");
Expect(0, 65071, '\P{^-_IS-CJK_Compatibility-FORMS}', "");
Error('\p{_In/a/CJK	Compatibility_FORMS}');
Error('\P{_In/a/CJK	Compatibility_FORMS}');
Expect(1, 65103, '\p{incjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^incjkcompatibilityforms}', "");
Expect(0, 65103, '\P{incjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^incjkcompatibilityforms}', "");
Expect(0, 65071, '\p{incjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^incjkcompatibilityforms}', "");
Expect(1, 65071, '\P{incjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^incjkcompatibilityforms}', "");
Expect(1, 65103, '\p{	InCJK	compatibility	forms}', "");
Expect(0, 65103, '\p{^	InCJK	compatibility	forms}', "");
Expect(0, 65103, '\P{	InCJK	compatibility	forms}', "");
Expect(1, 65103, '\P{^	InCJK	compatibility	forms}', "");
Expect(0, 65071, '\p{	InCJK	compatibility	forms}', "");
Expect(1, 65071, '\p{^	InCJK	compatibility	forms}', "");
Expect(1, 65071, '\P{	InCJK	compatibility	forms}', "");
Expect(0, 65071, '\P{^	InCJK	compatibility	forms}', "");
Error('\p{__In:=Saurashtra}');
Error('\P{__In:=Saurashtra}');
Expect(1, 43231, '\p{insaurashtra}', "");
Expect(0, 43231, '\p{^insaurashtra}', "");
Expect(0, 43231, '\P{insaurashtra}', "");
Expect(1, 43231, '\P{^insaurashtra}', "");
Expect(0, 43135, '\p{insaurashtra}', "");
Expect(1, 43135, '\p{^insaurashtra}', "");
Expect(1, 43135, '\P{insaurashtra}', "");
Expect(0, 43135, '\P{^insaurashtra}', "");
Expect(1, 43231, '\p{_-Insaurashtra}', "");
Expect(0, 43231, '\p{^_-Insaurashtra}', "");
Expect(0, 43231, '\P{_-Insaurashtra}', "");
Expect(1, 43231, '\P{^_-Insaurashtra}', "");
Expect(0, 43135, '\p{_-Insaurashtra}', "");
Expect(1, 43135, '\p{^_-Insaurashtra}', "");
Expect(1, 43135, '\P{_-Insaurashtra}', "");
Expect(0, 43135, '\P{^_-Insaurashtra}', "");
Error('\p{- In/a/Gujarati}');
Error('\P{- In/a/Gujarati}');
Expect(1, 2815, '\p{ingujarati}', "");
Expect(0, 2815, '\p{^ingujarati}', "");
Expect(0, 2815, '\P{ingujarati}', "");
Expect(1, 2815, '\P{^ingujarati}', "");
Expect(0, 2687, '\p{ingujarati}', "");
Expect(1, 2687, '\p{^ingujarati}', "");
Expect(1, 2687, '\P{ingujarati}', "");
Expect(0, 2687, '\P{^ingujarati}', "");
Expect(1, 2815, '\p{_ in GUJARATI}', "");
Expect(0, 2815, '\p{^_ in GUJARATI}', "");
Expect(0, 2815, '\P{_ in GUJARATI}', "");
Expect(1, 2815, '\P{^_ in GUJARATI}', "");
Expect(0, 2687, '\p{_ in GUJARATI}', "");
Expect(1, 2687, '\p{^_ in GUJARATI}', "");
Expect(1, 2687, '\P{_ in GUJARATI}', "");
Expect(0, 2687, '\P{^_ in GUJARATI}', "");
Error('\p{-_In/a/Osmanya}');
Error('\P{-_In/a/Osmanya}');
Expect(1, 66735, '\p{inosmanya}', "");
Expect(0, 66735, '\p{^inosmanya}', "");
Expect(0, 66735, '\P{inosmanya}', "");
Expect(1, 66735, '\P{^inosmanya}', "");
Expect(0, 66687, '\p{inosmanya}', "");
Expect(1, 66687, '\p{^inosmanya}', "");
Expect(1, 66687, '\P{inosmanya}', "");
Expect(0, 66687, '\P{^inosmanya}', "");
Expect(1, 66735, '\p{-_In	Osmanya}', "");
Expect(0, 66735, '\p{^-_In	Osmanya}', "");
Expect(0, 66735, '\P{-_In	Osmanya}', "");
Expect(1, 66735, '\P{^-_In	Osmanya}', "");
Expect(0, 66687, '\p{-_In	Osmanya}', "");
Expect(1, 66687, '\p{^-_In	Osmanya}', "");
Expect(1, 66687, '\P{-_In	Osmanya}', "");
Expect(0, 66687, '\P{^-_In	Osmanya}', "");
Error('\p{/a/-In-Tifinagh}');
Error('\P{/a/-In-Tifinagh}');
Expect(1, 11647, '\p{intifinagh}', "");
Expect(0, 11647, '\p{^intifinagh}', "");
Expect(0, 11647, '\P{intifinagh}', "");
Expect(1, 11647, '\P{^intifinagh}', "");
Expect(0, 11567, '\p{intifinagh}', "");
Expect(1, 11567, '\p{^intifinagh}', "");
Expect(1, 11567, '\P{intifinagh}', "");
Expect(0, 11567, '\P{^intifinagh}', "");
Expect(1, 11647, '\p{	-In-tifinagh}', "");
Expect(0, 11647, '\p{^	-In-tifinagh}', "");
Expect(0, 11647, '\P{	-In-tifinagh}', "");
Expect(1, 11647, '\P{^	-In-tifinagh}', "");
Expect(0, 11567, '\p{	-In-tifinagh}', "");
Expect(1, 11567, '\p{^	-In-tifinagh}', "");
Expect(1, 11567, '\P{	-In-tifinagh}', "");
Expect(0, 11567, '\P{^	-In-tifinagh}', "");
Error('\p{  POSIXPRINT/a/}');
Error('\P{  POSIXPRINT/a/}');
Expect(1, 126, '\p{posixprint}', "");
Expect(0, 126, '\p{^posixprint}', "");
Expect(0, 126, '\P{posixprint}', "");
Expect(1, 126, '\P{^posixprint}', "");
Expect(0, 31, '\p{posixprint}', "");
Expect(1, 31, '\p{^posixprint}', "");
Expect(1, 31, '\P{posixprint}', "");
Expect(0, 31, '\P{^posixprint}', "");
Expect(1, 126, '\p{	PosixPrint}', "");
Expect(0, 126, '\p{^	PosixPrint}', "");
Expect(0, 126, '\P{	PosixPrint}', "");
Expect(1, 126, '\P{^	PosixPrint}', "");
Expect(0, 31, '\p{	PosixPrint}', "");
Expect(1, 31, '\p{^	PosixPrint}', "");
Expect(1, 31, '\P{	PosixPrint}', "");
Expect(0, 31, '\P{^	PosixPrint}', "");
Error('\p{ _Is:=posixprint}');
Error('\P{ _Is:=posixprint}');
Expect(1, 126, '\p{isposixprint}', "");
Expect(0, 126, '\p{^isposixprint}', "");
Expect(0, 126, '\P{isposixprint}', "");
Expect(1, 126, '\P{^isposixprint}', "");
Expect(0, 31, '\p{isposixprint}', "");
Expect(1, 31, '\p{^isposixprint}', "");
Expect(1, 31, '\P{isposixprint}', "");
Expect(0, 31, '\P{^isposixprint}', "");
Expect(1, 126, '\p{  is	PosixPrint}', "");
Expect(0, 126, '\p{^  is	PosixPrint}', "");
Expect(0, 126, '\P{  is	PosixPrint}', "");
Expect(1, 126, '\P{^  is	PosixPrint}', "");
Expect(0, 31, '\p{  is	PosixPrint}', "");
Expect(1, 31, '\p{^  is	PosixPrint}', "");
Expect(1, 31, '\P{  is	PosixPrint}', "");
Expect(0, 31, '\P{^  is	PosixPrint}', "");
Error('\p{	In-hanunoo/a/}');
Error('\P{	In-hanunoo/a/}');
Expect(1, 5951, '\p{inhanunoo}', "");
Expect(0, 5951, '\p{^inhanunoo}', "");
Expect(0, 5951, '\P{inhanunoo}', "");
Expect(1, 5951, '\P{^inhanunoo}', "");
Expect(0, 5919, '\p{inhanunoo}', "");
Expect(1, 5919, '\p{^inhanunoo}', "");
Expect(1, 5919, '\P{inhanunoo}', "");
Expect(0, 5919, '\P{^inhanunoo}', "");
Expect(1, 5951, '\p{-	In	Hanunoo}', "");
Expect(0, 5951, '\p{^-	In	Hanunoo}', "");
Expect(0, 5951, '\P{-	In	Hanunoo}', "");
Expect(1, 5951, '\P{^-	In	Hanunoo}', "");
Expect(0, 5919, '\p{-	In	Hanunoo}', "");
Expect(1, 5919, '\p{^-	In	Hanunoo}', "");
Expect(1, 5919, '\P{-	In	Hanunoo}', "");
Expect(0, 5919, '\P{^-	In	Hanunoo}', "");
Error('\p{-	in_Cyrillic:=}');
Error('\P{-	in_Cyrillic:=}');
Expect(1, 1279, '\p{incyrillic}', "");
Expect(0, 1279, '\p{^incyrillic}', "");
Expect(0, 1279, '\P{incyrillic}', "");
Expect(1, 1279, '\P{^incyrillic}', "");
Expect(0, 1023, '\p{incyrillic}', "");
Expect(1, 1023, '\p{^incyrillic}', "");
Expect(1, 1023, '\P{incyrillic}', "");
Expect(0, 1023, '\P{^incyrillic}', "");
Expect(1, 1279, '\p{	IN	CYRILLIC}', "");
Expect(0, 1279, '\p{^	IN	CYRILLIC}', "");
Expect(0, 1279, '\P{	IN	CYRILLIC}', "");
Expect(1, 1279, '\P{^	IN	CYRILLIC}', "");
Expect(0, 1023, '\p{	IN	CYRILLIC}', "");
Expect(1, 1023, '\p{^	IN	CYRILLIC}', "");
Expect(1, 1023, '\P{	IN	CYRILLIC}', "");
Expect(0, 1023, '\P{^	IN	CYRILLIC}', "");
Error('\p{-In BUHID/a/}');
Error('\P{-In BUHID/a/}');
Expect(1, 5983, '\p{inbuhid}', "");
Expect(0, 5983, '\p{^inbuhid}', "");
Expect(0, 5983, '\P{inbuhid}', "");
Expect(1, 5983, '\P{^inbuhid}', "");
Expect(0, 5951, '\p{inbuhid}', "");
Expect(1, 5951, '\p{^inbuhid}', "");
Expect(1, 5951, '\P{inbuhid}', "");
Expect(0, 5951, '\P{^inbuhid}', "");
Expect(1, 5983, '\p{	_InBUHID}', "");
Expect(0, 5983, '\p{^	_InBUHID}', "");
Expect(0, 5983, '\P{	_InBUHID}', "");
Expect(1, 5983, '\P{^	_InBUHID}', "");
Expect(0, 5951, '\p{	_InBUHID}', "");
Expect(1, 5951, '\p{^	_InBUHID}', "");
Expect(1, 5951, '\P{	_InBUHID}', "");
Expect(0, 5951, '\P{^	_InBUHID}', "");
Error('\p{-_in	Runic:=}');
Error('\P{-_in	Runic:=}');
Expect(1, 5887, '\p{inrunic}', "");
Expect(0, 5887, '\p{^inrunic}', "");
Expect(0, 5887, '\P{inrunic}', "");
Expect(1, 5887, '\P{^inrunic}', "");
Expect(0, 5791, '\p{inrunic}', "");
Expect(1, 5791, '\p{^inrunic}', "");
Expect(1, 5791, '\P{inrunic}', "");
Expect(0, 5791, '\P{^inrunic}', "");
Expect(1, 5887, '\p{	InRunic}', "");
Expect(0, 5887, '\p{^	InRunic}', "");
Expect(0, 5887, '\P{	InRunic}', "");
Expect(1, 5887, '\P{^	InRunic}', "");
Expect(0, 5791, '\p{	InRunic}', "");
Expect(1, 5791, '\p{^	InRunic}', "");
Expect(1, 5791, '\P{	InRunic}', "");
Expect(0, 5791, '\P{^	InRunic}', "");
Error('\p{IDS_Binary_Operator=/a/ -Yes}');
Error('\P{IDS_Binary_Operator=/a/ -Yes}');
Expect(1, 12273, '\p{IDS_Binary_Operator=yes}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator=yes}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator=yes}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator=yes}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator=yes}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator=yes}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator=yes}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator=yes}', "");
Expect(1, 12273, '\p{IDS_Binary_Operator=_yes}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator=_yes}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator=_yes}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator=_yes}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator=_yes}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator=_yes}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator=_yes}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator=_yes}', "");
Error('\p{IDSB=/a/y}');
Error('\P{IDSB=/a/y}');
Expect(1, 12273, '\p{IDSB=y}', "");
Expect(0, 12273, '\p{^IDSB=y}', "");
Expect(0, 12273, '\P{IDSB=y}', "");
Expect(1, 12273, '\P{^IDSB=y}', "");
Expect(0, 12271, '\p{IDSB=y}', "");
Expect(1, 12271, '\p{^IDSB=y}', "");
Expect(1, 12271, '\P{IDSB=y}', "");
Expect(0, 12271, '\P{^IDSB=y}', "");
Expect(1, 12273, '\p{IDSB=_Y}', "");
Expect(0, 12273, '\p{^IDSB=_Y}', "");
Expect(0, 12273, '\P{IDSB=_Y}', "");
Expect(1, 12273, '\P{^IDSB=_Y}', "");
Expect(0, 12271, '\p{IDSB=_Y}', "");
Expect(1, 12271, '\p{^IDSB=_Y}', "");
Expect(1, 12271, '\P{IDSB=_Y}', "");
Expect(0, 12271, '\P{^IDSB=_Y}', "");
Error('\p{Is_IDS_Binary_Operator=/a/--T}');
Error('\P{Is_IDS_Binary_Operator=/a/--T}');
Expect(1, 12273, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\p{Is_IDS_Binary_Operator= _T}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator= _T}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator= _T}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator= _T}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator= _T}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator= _T}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator= _T}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator= _T}', "");
Error('\p{Is_IDSB=- TRUE:=}');
Error('\P{Is_IDSB=- TRUE:=}');
Expect(1, 12273, '\p{Is_IDSB=true}', "");
Expect(0, 12273, '\p{^Is_IDSB=true}', "");
Expect(0, 12273, '\P{Is_IDSB=true}', "");
Expect(1, 12273, '\P{^Is_IDSB=true}', "");
Expect(0, 12271, '\p{Is_IDSB=true}', "");
Expect(1, 12271, '\p{^Is_IDSB=true}', "");
Expect(1, 12271, '\P{Is_IDSB=true}', "");
Expect(0, 12271, '\P{^Is_IDSB=true}', "");
Expect(1, 12273, '\p{Is_IDSB:  TRUE}', "");
Expect(0, 12273, '\p{^Is_IDSB:  TRUE}', "");
Expect(0, 12273, '\P{Is_IDSB:  TRUE}', "");
Expect(1, 12273, '\P{^Is_IDSB:  TRUE}', "");
Expect(0, 12271, '\p{Is_IDSB:  TRUE}', "");
Expect(1, 12271, '\p{^Is_IDSB:  TRUE}', "");
Expect(1, 12271, '\P{Is_IDSB:  TRUE}', "");
Expect(0, 12271, '\P{^Is_IDSB:  TRUE}', "");
Error('\p{IDS_Binary_Operator=/a/_no}');
Error('\P{IDS_Binary_Operator=/a/_no}');
Expect(1, 12271, '\p{IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\p{IDS_Binary_Operator=		NO}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=		NO}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=		NO}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=		NO}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=		NO}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=		NO}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=		NO}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=		NO}', "");
Error('\p{IDSB=/a/	-N}');
Error('\P{IDSB=/a/	-N}');
Expect(1, 12271, '\p{IDSB=n}', "");
Expect(0, 12271, '\p{^IDSB=n}', "");
Expect(0, 12271, '\P{IDSB=n}', "");
Expect(1, 12271, '\P{^IDSB=n}', "");
Expect(0, 12273, '\p{IDSB=n}', "");
Expect(1, 12273, '\p{^IDSB=n}', "");
Expect(1, 12273, '\P{IDSB=n}', "");
Expect(0, 12273, '\P{^IDSB=n}', "");
Expect(1, 12271, '\p{IDSB= _N}', "");
Expect(0, 12271, '\p{^IDSB= _N}', "");
Expect(0, 12271, '\P{IDSB= _N}', "");
Expect(1, 12271, '\P{^IDSB= _N}', "");
Expect(0, 12273, '\p{IDSB= _N}', "");
Expect(1, 12273, '\p{^IDSB= _N}', "");
Expect(1, 12273, '\P{IDSB= _N}', "");
Expect(0, 12273, '\P{^IDSB= _N}', "");
Error('\p{Is_IDS_Binary_Operator=/a/ _F}');
Error('\P{Is_IDS_Binary_Operator=/a/ _F}');
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=_-F}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=_-F}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=_-F}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=_-F}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=_-F}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=_-F}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=_-F}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=_-F}', "");
Error('\p{Is_IDSB= False:=}');
Error('\P{Is_IDSB= False:=}');
Expect(1, 12271, '\p{Is_IDSB=false}', "");
Expect(0, 12271, '\p{^Is_IDSB=false}', "");
Expect(0, 12271, '\P{Is_IDSB=false}', "");
Expect(1, 12271, '\P{^Is_IDSB=false}', "");
Expect(0, 12273, '\p{Is_IDSB=false}', "");
Expect(1, 12273, '\p{^Is_IDSB=false}', "");
Expect(1, 12273, '\P{Is_IDSB=false}', "");
Expect(0, 12273, '\P{^Is_IDSB=false}', "");
Expect(1, 12271, '\p{Is_IDSB=__False}', "");
Expect(0, 12271, '\p{^Is_IDSB=__False}', "");
Expect(0, 12271, '\P{Is_IDSB=__False}', "");
Expect(1, 12271, '\P{^Is_IDSB=__False}', "");
Expect(0, 12273, '\p{Is_IDSB=__False}', "");
Expect(1, 12273, '\p{^Is_IDSB=__False}', "");
Expect(1, 12273, '\P{Is_IDSB=__False}', "");
Expect(0, 12273, '\P{^Is_IDSB=__False}', "");
Error('\p{General_Category=-	symbol/a/}');
Error('\P{General_Category=-	symbol/a/}');
Expect(1, 36, '\p{General_Category:   symbol}', "");
Expect(0, 36, '\p{^General_Category:   symbol}', "");
Expect(0, 36, '\P{General_Category:   symbol}', "");
Expect(1, 36, '\P{^General_Category:   symbol}', "");
Expect(0, 35, '\p{General_Category:   symbol}', "");
Expect(1, 35, '\p{^General_Category:   symbol}', "");
Expect(1, 35, '\P{General_Category:   symbol}', "");
Expect(0, 35, '\P{^General_Category:   symbol}', "");
Expect(1, 36, '\p{General_Category:	 Symbol}', "");
Expect(0, 36, '\p{^General_Category:	 Symbol}', "");
Expect(0, 36, '\P{General_Category:	 Symbol}', "");
Expect(1, 36, '\P{^General_Category:	 Symbol}', "");
Expect(0, 35, '\p{General_Category:	 Symbol}', "");
Expect(1, 35, '\p{^General_Category:	 Symbol}', "");
Expect(1, 35, '\P{General_Category:	 Symbol}', "");
Expect(0, 35, '\P{^General_Category:	 Symbol}', "");
Error('\p{Gc=	/a/S}');
Error('\P{Gc=	/a/S}');
Expect(1, 36, '\p{Gc:   s}', "");
Expect(0, 36, '\p{^Gc:   s}', "");
Expect(0, 36, '\P{Gc:   s}', "");
Expect(1, 36, '\P{^Gc:   s}', "");
Expect(0, 35, '\p{Gc:   s}', "");
Expect(1, 35, '\p{^Gc:   s}', "");
Expect(1, 35, '\P{Gc:   s}', "");
Expect(0, 35, '\P{^Gc:   s}', "");
Expect(1, 36, '\p{Gc=_S}', "");
Expect(0, 36, '\p{^Gc=_S}', "");
Expect(0, 36, '\P{Gc=_S}', "");
Expect(1, 36, '\P{^Gc=_S}', "");
Expect(0, 35, '\p{Gc=_S}', "");
Expect(1, 35, '\p{^Gc=_S}', "");
Expect(1, 35, '\P{Gc=_S}', "");
Expect(0, 35, '\P{^Gc=_S}', "");
Error('\p{Category=	 Symbol:=}');
Error('\P{Category=	 Symbol:=}');
Expect(1, 36, '\p{Category=symbol}', "");
Expect(0, 36, '\p{^Category=symbol}', "");
Expect(0, 36, '\P{Category=symbol}', "");
Expect(1, 36, '\P{^Category=symbol}', "");
Expect(0, 35, '\p{Category=symbol}', "");
Expect(1, 35, '\p{^Category=symbol}', "");
Expect(1, 35, '\P{Category=symbol}', "");
Expect(0, 35, '\P{^Category=symbol}', "");
Expect(1, 36, '\p{Category=Symbol}', "");
Expect(0, 36, '\p{^Category=Symbol}', "");
Expect(0, 36, '\P{Category=Symbol}', "");
Expect(1, 36, '\P{^Category=Symbol}', "");
Expect(0, 35, '\p{Category=Symbol}', "");
Expect(1, 35, '\p{^Category=Symbol}', "");
Expect(1, 35, '\P{Category=Symbol}', "");
Expect(0, 35, '\P{^Category=Symbol}', "");
Error('\p{Is_General_Category=-S:=}');
Error('\P{Is_General_Category=-S:=}');
Expect(1, 36, '\p{Is_General_Category:s}', "");
Expect(0, 36, '\p{^Is_General_Category:s}', "");
Expect(0, 36, '\P{Is_General_Category:s}', "");
Expect(1, 36, '\P{^Is_General_Category:s}', "");
Expect(0, 35, '\p{Is_General_Category:s}', "");
Expect(1, 35, '\p{^Is_General_Category:s}', "");
Expect(1, 35, '\P{Is_General_Category:s}', "");
Expect(0, 35, '\P{^Is_General_Category:s}', "");
Expect(1, 36, '\p{Is_General_Category=_ S}', "");
Expect(0, 36, '\p{^Is_General_Category=_ S}', "");
Expect(0, 36, '\P{Is_General_Category=_ S}', "");
Expect(1, 36, '\P{^Is_General_Category=_ S}', "");
Expect(0, 35, '\p{Is_General_Category=_ S}', "");
Expect(1, 35, '\p{^Is_General_Category=_ S}', "");
Expect(1, 35, '\P{Is_General_Category=_ S}', "");
Expect(0, 35, '\P{^Is_General_Category=_ S}', "");
Error('\p{Is_Gc:Symbol/a/}');
Error('\P{Is_Gc:Symbol/a/}');
Expect(1, 36, '\p{Is_Gc=symbol}', "");
Expect(0, 36, '\p{^Is_Gc=symbol}', "");
Expect(0, 36, '\P{Is_Gc=symbol}', "");
Expect(1, 36, '\P{^Is_Gc=symbol}', "");
Expect(0, 35, '\p{Is_Gc=symbol}', "");
Expect(1, 35, '\p{^Is_Gc=symbol}', "");
Expect(1, 35, '\P{Is_Gc=symbol}', "");
Expect(0, 35, '\P{^Is_Gc=symbol}', "");
Expect(1, 36, '\p{Is_Gc=--SYMBOL}', "");
Expect(0, 36, '\p{^Is_Gc=--SYMBOL}', "");
Expect(0, 36, '\P{Is_Gc=--SYMBOL}', "");
Expect(1, 36, '\P{^Is_Gc=--SYMBOL}', "");
Expect(0, 35, '\p{Is_Gc=--SYMBOL}', "");
Expect(1, 35, '\p{^Is_Gc=--SYMBOL}', "");
Expect(1, 35, '\P{Is_Gc=--SYMBOL}', "");
Expect(0, 35, '\P{^Is_Gc=--SYMBOL}', "");
Error('\p{Is_Category=_:=s}');
Error('\P{Is_Category=_:=s}');
Expect(1, 36, '\p{Is_Category=s}', "");
Expect(0, 36, '\p{^Is_Category=s}', "");
Expect(0, 36, '\P{Is_Category=s}', "");
Expect(1, 36, '\P{^Is_Category=s}', "");
Expect(0, 35, '\p{Is_Category=s}', "");
Expect(1, 35, '\p{^Is_Category=s}', "");
Expect(1, 35, '\P{Is_Category=s}', "");
Expect(0, 35, '\P{^Is_Category=s}', "");
Expect(1, 36, '\p{Is_Category= 	s}', "");
Expect(0, 36, '\p{^Is_Category= 	s}', "");
Expect(0, 36, '\P{Is_Category= 	s}', "");
Expect(1, 36, '\P{^Is_Category= 	s}', "");
Expect(0, 35, '\p{Is_Category= 	s}', "");
Expect(1, 35, '\p{^Is_Category= 	s}', "");
Expect(1, 35, '\P{Is_Category= 	s}', "");
Expect(0, 35, '\P{^Is_Category= 	s}', "");
Error('\p{General_Category=:=Spacing MARK}');
Error('\P{General_Category=:=Spacing MARK}');
Expect(1, 2307, '\p{General_Category=spacingmark}', "");
Expect(0, 2307, '\p{^General_Category=spacingmark}', "");
Expect(0, 2307, '\P{General_Category=spacingmark}', "");
Expect(1, 2307, '\P{^General_Category=spacingmark}', "");
Expect(0, 2306, '\p{General_Category=spacingmark}', "");
Expect(1, 2306, '\p{^General_Category=spacingmark}', "");
Expect(1, 2306, '\P{General_Category=spacingmark}', "");
Expect(0, 2306, '\P{^General_Category=spacingmark}', "");
Expect(1, 2307, '\p{General_Category= Spacing	Mark}', "");
Expect(0, 2307, '\p{^General_Category= Spacing	Mark}', "");
Expect(0, 2307, '\P{General_Category= Spacing	Mark}', "");
Expect(1, 2307, '\P{^General_Category= Spacing	Mark}', "");
Expect(0, 2306, '\p{General_Category= Spacing	Mark}', "");
Expect(1, 2306, '\p{^General_Category= Spacing	Mark}', "");
Expect(1, 2306, '\P{General_Category= Spacing	Mark}', "");
Expect(0, 2306, '\P{^General_Category= Spacing	Mark}', "");
Error('\p{Gc= -mc/a/}');
Error('\P{Gc= -mc/a/}');
Expect(1, 2307, '\p{Gc=mc}', "");
Expect(0, 2307, '\p{^Gc=mc}', "");
Expect(0, 2307, '\P{Gc=mc}', "");
Expect(1, 2307, '\P{^Gc=mc}', "");
Expect(0, 2306, '\p{Gc=mc}', "");
Expect(1, 2306, '\p{^Gc=mc}', "");
Expect(1, 2306, '\P{Gc=mc}', "");
Expect(0, 2306, '\P{^Gc=mc}', "");
Expect(1, 2307, '\p{Gc=_mc}', "");
Expect(0, 2307, '\p{^Gc=_mc}', "");
Expect(0, 2307, '\P{Gc=_mc}', "");
Expect(1, 2307, '\P{^Gc=_mc}', "");
Expect(0, 2306, '\p{Gc=_mc}', "");
Expect(1, 2306, '\p{^Gc=_mc}', "");
Expect(1, 2306, '\P{Gc=_mc}', "");
Expect(0, 2306, '\P{^Gc=_mc}', "");
Error('\p{Category=-	spacing/a/MARK}');
Error('\P{Category=-	spacing/a/MARK}');
Expect(1, 2307, '\p{Category=spacingmark}', "");
Expect(0, 2307, '\p{^Category=spacingmark}', "");
Expect(0, 2307, '\P{Category=spacingmark}', "");
Expect(1, 2307, '\P{^Category=spacingmark}', "");
Expect(0, 2306, '\p{Category=spacingmark}', "");
Expect(1, 2306, '\p{^Category=spacingmark}', "");
Expect(1, 2306, '\P{Category=spacingmark}', "");
Expect(0, 2306, '\P{^Category=spacingmark}', "");
Expect(1, 2307, '\p{Category= -Spacing	Mark}', "");
Expect(0, 2307, '\p{^Category= -Spacing	Mark}', "");
Expect(0, 2307, '\P{Category= -Spacing	Mark}', "");
Expect(1, 2307, '\P{^Category= -Spacing	Mark}', "");
Expect(0, 2306, '\p{Category= -Spacing	Mark}', "");
Expect(1, 2306, '\p{^Category= -Spacing	Mark}', "");
Expect(1, 2306, '\P{Category= -Spacing	Mark}', "");
Expect(0, 2306, '\P{^Category= -Spacing	Mark}', "");
Error('\p{Is_General_Category=-/a/Mc}');
Error('\P{Is_General_Category=-/a/Mc}');
Expect(1, 2307, '\p{Is_General_Category=mc}', "");
Expect(0, 2307, '\p{^Is_General_Category=mc}', "");
Expect(0, 2307, '\P{Is_General_Category=mc}', "");
Expect(1, 2307, '\P{^Is_General_Category=mc}', "");
Expect(0, 2306, '\p{Is_General_Category=mc}', "");
Expect(1, 2306, '\p{^Is_General_Category=mc}', "");
Expect(1, 2306, '\P{Is_General_Category=mc}', "");
Expect(0, 2306, '\P{^Is_General_Category=mc}', "");
Expect(1, 2307, '\p{Is_General_Category=_ mc}', "");
Expect(0, 2307, '\p{^Is_General_Category=_ mc}', "");
Expect(0, 2307, '\P{Is_General_Category=_ mc}', "");
Expect(1, 2307, '\P{^Is_General_Category=_ mc}', "");
Expect(0, 2306, '\p{Is_General_Category=_ mc}', "");
Expect(1, 2306, '\p{^Is_General_Category=_ mc}', "");
Expect(1, 2306, '\P{Is_General_Category=_ mc}', "");
Expect(0, 2306, '\P{^Is_General_Category=_ mc}', "");
Error('\p{Is_Gc=	-SPACING/a/Mark}');
Error('\P{Is_Gc=	-SPACING/a/Mark}');
Expect(1, 2307, '\p{Is_Gc=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Gc=spacingmark}', "");
Expect(0, 2307, '\P{Is_Gc=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Gc=spacingmark}', "");
Expect(0, 2306, '\p{Is_Gc=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Gc=spacingmark}', "");
Expect(1, 2306, '\P{Is_Gc=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Gc=spacingmark}', "");
Expect(1, 2307, '\p{Is_Gc=	 spacing	Mark}', "");
Expect(0, 2307, '\p{^Is_Gc=	 spacing	Mark}', "");
Expect(0, 2307, '\P{Is_Gc=	 spacing	Mark}', "");
Expect(1, 2307, '\P{^Is_Gc=	 spacing	Mark}', "");
Expect(0, 2306, '\p{Is_Gc=	 spacing	Mark}', "");
Expect(1, 2306, '\p{^Is_Gc=	 spacing	Mark}', "");
Expect(1, 2306, '\P{Is_Gc=	 spacing	Mark}', "");
Expect(0, 2306, '\P{^Is_Gc=	 spacing	Mark}', "");
Error('\p{Is_Category= :=mc}');
Error('\P{Is_Category= :=mc}');
Expect(1, 2307, '\p{Is_Category:	mc}', "");
Expect(0, 2307, '\p{^Is_Category:	mc}', "");
Expect(0, 2307, '\P{Is_Category:	mc}', "");
Expect(1, 2307, '\P{^Is_Category:	mc}', "");
Expect(0, 2306, '\p{Is_Category:	mc}', "");
Expect(1, 2306, '\p{^Is_Category:	mc}', "");
Expect(1, 2306, '\P{Is_Category:	mc}', "");
Expect(0, 2306, '\P{^Is_Category:	mc}', "");
Expect(1, 2307, '\p{Is_Category=-	Mc}', "");
Expect(0, 2307, '\p{^Is_Category=-	Mc}', "");
Expect(0, 2307, '\P{Is_Category=-	Mc}', "");
Expect(1, 2307, '\P{^Is_Category=-	Mc}', "");
Expect(0, 2306, '\p{Is_Category=-	Mc}', "");
Expect(1, 2306, '\p{^Is_Category=-	Mc}', "");
Expect(1, 2306, '\P{Is_Category=-	Mc}', "");
Expect(0, 2306, '\P{^Is_Category=-	Mc}', "");
Error('\p{General_Category=-Cased_letter/a/}');
Error('\P{General_Category=-Cased_letter/a/}');
Expect(1, 90, '\p{General_Category=casedletter}', "");
Expect(0, 90, '\p{^General_Category=casedletter}', "");
Expect(0, 90, '\P{General_Category=casedletter}', "");
Expect(1, 90, '\P{^General_Category=casedletter}', "");
Expect(0, 64, '\p{General_Category=casedletter}', "");
Expect(1, 64, '\p{^General_Category=casedletter}', "");
Expect(1, 64, '\P{General_Category=casedletter}', "");
Expect(0, 64, '\P{^General_Category=casedletter}', "");
Expect(1, 90, '\p{General_Category=	CASED Letter}', "");
Expect(0, 90, '\p{^General_Category=	CASED Letter}', "");
Expect(0, 90, '\P{General_Category=	CASED Letter}', "");
Expect(1, 90, '\P{^General_Category=	CASED Letter}', "");
Expect(0, 64, '\p{General_Category=	CASED Letter}', "");
Expect(1, 64, '\p{^General_Category=	CASED Letter}', "");
Expect(1, 64, '\P{General_Category=	CASED Letter}', "");
Expect(0, 64, '\P{^General_Category=	CASED Letter}', "");
Error('\p{Gc=/a/- LC}');
Error('\P{Gc=/a/- LC}');
Expect(1, 90, '\p{Gc=lc}', "");
Expect(0, 90, '\p{^Gc=lc}', "");
Expect(0, 90, '\P{Gc=lc}', "");
Expect(1, 90, '\P{^Gc=lc}', "");
Expect(0, 64, '\p{Gc=lc}', "");
Expect(1, 64, '\p{^Gc=lc}', "");
Expect(1, 64, '\P{Gc=lc}', "");
Expect(0, 64, '\P{^Gc=lc}', "");
Expect(1, 90, '\p{Gc=	LC}', "");
Expect(0, 90, '\p{^Gc=	LC}', "");
Expect(0, 90, '\P{Gc=	LC}', "");
Expect(1, 90, '\P{^Gc=	LC}', "");
Expect(0, 64, '\p{Gc=	LC}', "");
Expect(1, 64, '\p{^Gc=	LC}', "");
Expect(1, 64, '\P{Gc=	LC}', "");
Expect(0, 64, '\P{^Gc=	LC}', "");
Error('\p{Category=	l/a/}');
Error('\P{Category=	l/a/}');
Expect(1, 90, '\p{Category=l_}', "");
Expect(0, 90, '\p{^Category=l_}', "");
Expect(0, 90, '\P{Category=l_}', "");
Expect(1, 90, '\P{^Category=l_}', "");
Expect(0, 64, '\p{Category=l_}', "");
Expect(1, 64, '\p{^Category=l_}', "");
Expect(1, 64, '\P{Category=l_}', "");
Expect(0, 64, '\P{^Category=l_}', "");
Expect(1, 90, '\p{Category=	L}', "");
Expect(0, 90, '\p{^Category=	L}', "");
Expect(0, 90, '\P{Category=	L}', "");
Expect(1, 90, '\P{^Category=	L}', "");
Expect(0, 64, '\p{Category=	L}', "");
Expect(1, 64, '\p{^Category=	L}', "");
Expect(1, 64, '\P{Category=	L}', "");
Expect(0, 64, '\P{^Category=	L}', "");
Error('\p{Is_General_Category=/a/	-L&}');
Error('\P{Is_General_Category=/a/	-L&}');
Expect(1, 90, '\p{Is_General_Category=l&}', "");
Expect(0, 90, '\p{^Is_General_Category=l&}', "");
Expect(0, 90, '\P{Is_General_Category=l&}', "");
Expect(1, 90, '\P{^Is_General_Category=l&}', "");
Expect(0, 64, '\p{Is_General_Category=l&}', "");
Expect(1, 64, '\p{^Is_General_Category=l&}', "");
Expect(1, 64, '\P{Is_General_Category=l&}', "");
Expect(0, 64, '\P{^Is_General_Category=l&}', "");
Expect(1, 90, '\p{Is_General_Category=	_L&}', "");
Expect(0, 90, '\p{^Is_General_Category=	_L&}', "");
Expect(0, 90, '\P{Is_General_Category=	_L&}', "");
Expect(1, 90, '\P{^Is_General_Category=	_L&}', "");
Expect(0, 64, '\p{Is_General_Category=	_L&}', "");
Expect(1, 64, '\p{^Is_General_Category=	_L&}', "");
Expect(1, 64, '\P{Is_General_Category=	_L&}', "");
Expect(0, 64, '\P{^Is_General_Category=	_L&}', "");
Error('\p{Is_Gc:   /a/ _CASED_Letter}');
Error('\P{Is_Gc:   /a/ _CASED_Letter}');
Expect(1, 90, '\p{Is_Gc:   casedletter}', "");
Expect(0, 90, '\p{^Is_Gc:   casedletter}', "");
Expect(0, 90, '\P{Is_Gc:   casedletter}', "");
Expect(1, 90, '\P{^Is_Gc:   casedletter}', "");
Expect(0, 64, '\p{Is_Gc:   casedletter}', "");
Expect(1, 64, '\p{^Is_Gc:   casedletter}', "");
Expect(1, 64, '\P{Is_Gc:   casedletter}', "");
Expect(0, 64, '\P{^Is_Gc:   casedletter}', "");
Expect(1, 90, '\p{Is_Gc=-	CASED_letter}', "");
Expect(0, 90, '\p{^Is_Gc=-	CASED_letter}', "");
Expect(0, 90, '\P{Is_Gc=-	CASED_letter}', "");
Expect(1, 90, '\P{^Is_Gc=-	CASED_letter}', "");
Expect(0, 64, '\p{Is_Gc=-	CASED_letter}', "");
Expect(1, 64, '\p{^Is_Gc=-	CASED_letter}', "");
Expect(1, 64, '\P{Is_Gc=-	CASED_letter}', "");
Expect(0, 64, '\P{^Is_Gc=-	CASED_letter}', "");
Error('\p{Is_Category:		/a/LC}');
Error('\P{Is_Category:		/a/LC}');
Expect(1, 90, '\p{Is_Category=lc}', "");
Expect(0, 90, '\p{^Is_Category=lc}', "");
Expect(0, 90, '\P{Is_Category=lc}', "");
Expect(1, 90, '\P{^Is_Category=lc}', "");
Expect(0, 64, '\p{Is_Category=lc}', "");
Expect(1, 64, '\p{^Is_Category=lc}', "");
Expect(1, 64, '\P{Is_Category=lc}', "");
Expect(0, 64, '\P{^Is_Category=lc}', "");
Expect(1, 90, '\p{Is_Category=_	LC}', "");
Expect(0, 90, '\p{^Is_Category=_	LC}', "");
Expect(0, 90, '\P{Is_Category=_	LC}', "");
Expect(1, 90, '\P{^Is_Category=_	LC}', "");
Expect(0, 64, '\p{Is_Category=_	LC}', "");
Expect(1, 64, '\p{^Is_Category=_	LC}', "");
Expect(1, 64, '\P{Is_Category=_	LC}', "");
Expect(0, 64, '\P{^Is_Category=_	LC}', "");
Error('\p{General_Category=-/a/connectorpunctuation}');
Error('\P{General_Category=-/a/connectorpunctuation}');
Expect(1, 95, '\p{General_Category: connectorpunctuation}', "");
Expect(0, 95, '\p{^General_Category: connectorpunctuation}', "");
Expect(0, 95, '\P{General_Category: connectorpunctuation}', "");
Expect(1, 95, '\P{^General_Category: connectorpunctuation}', "");
Expect(0, 94, '\p{General_Category: connectorpunctuation}', "");
Expect(1, 94, '\p{^General_Category: connectorpunctuation}', "");
Expect(1, 94, '\P{General_Category: connectorpunctuation}', "");
Expect(0, 94, '\P{^General_Category: connectorpunctuation}', "");
Expect(1, 95, '\p{General_Category=	 Connector-PUNCTUATION}', "");
Expect(0, 95, '\p{^General_Category=	 Connector-PUNCTUATION}', "");
Expect(0, 95, '\P{General_Category=	 Connector-PUNCTUATION}', "");
Expect(1, 95, '\P{^General_Category=	 Connector-PUNCTUATION}', "");
Expect(0, 94, '\p{General_Category=	 Connector-PUNCTUATION}', "");
Expect(1, 94, '\p{^General_Category=	 Connector-PUNCTUATION}', "");
Expect(1, 94, '\P{General_Category=	 Connector-PUNCTUATION}', "");
Expect(0, 94, '\P{^General_Category=	 Connector-PUNCTUATION}', "");
Error('\p{Gc=:=-PC}');
Error('\P{Gc=:=-PC}');
Expect(1, 95, '\p{Gc:pc}', "");
Expect(0, 95, '\p{^Gc:pc}', "");
Expect(0, 95, '\P{Gc:pc}', "");
Expect(1, 95, '\P{^Gc:pc}', "");
Expect(0, 94, '\p{Gc:pc}', "");
Expect(1, 94, '\p{^Gc:pc}', "");
Expect(1, 94, '\P{Gc:pc}', "");
Expect(0, 94, '\P{^Gc:pc}', "");
Expect(1, 95, '\p{Gc:     Pc}', "");
Expect(0, 95, '\p{^Gc:     Pc}', "");
Expect(0, 95, '\P{Gc:     Pc}', "");
Expect(1, 95, '\P{^Gc:     Pc}', "");
Expect(0, 94, '\p{Gc:     Pc}', "");
Expect(1, 94, '\p{^Gc:     Pc}', "");
Expect(1, 94, '\P{Gc:     Pc}', "");
Expect(0, 94, '\P{^Gc:     Pc}', "");
Error('\p{Category=-/a/connector	PUNCTUATION}');
Error('\P{Category=-/a/connector	PUNCTUATION}');
Expect(1, 95, '\p{Category=connectorpunctuation}', "");
Expect(0, 95, '\p{^Category=connectorpunctuation}', "");
Expect(0, 95, '\P{Category=connectorpunctuation}', "");
Expect(1, 95, '\P{^Category=connectorpunctuation}', "");
Expect(0, 94, '\p{Category=connectorpunctuation}', "");
Expect(1, 94, '\p{^Category=connectorpunctuation}', "");
Expect(1, 94, '\P{Category=connectorpunctuation}', "");
Expect(0, 94, '\P{^Category=connectorpunctuation}', "");
Expect(1, 95, '\p{Category=--connector	Punctuation}', "");
Expect(0, 95, '\p{^Category=--connector	Punctuation}', "");
Expect(0, 95, '\P{Category=--connector	Punctuation}', "");
Expect(1, 95, '\P{^Category=--connector	Punctuation}', "");
Expect(0, 94, '\p{Category=--connector	Punctuation}', "");
Expect(1, 94, '\p{^Category=--connector	Punctuation}', "");
Expect(1, 94, '\P{Category=--connector	Punctuation}', "");
Expect(0, 94, '\P{^Category=--connector	Punctuation}', "");
Error('\p{Is_General_Category=_:=Pc}');
Error('\P{Is_General_Category=_:=Pc}');
Expect(1, 95, '\p{Is_General_Category:pc}', "");
Expect(0, 95, '\p{^Is_General_Category:pc}', "");
Expect(0, 95, '\P{Is_General_Category:pc}', "");
Expect(1, 95, '\P{^Is_General_Category:pc}', "");
Expect(0, 94, '\p{Is_General_Category:pc}', "");
Expect(1, 94, '\p{^Is_General_Category:pc}', "");
Expect(1, 94, '\P{Is_General_Category:pc}', "");
Expect(0, 94, '\P{^Is_General_Category:pc}', "");
Expect(1, 95, '\p{Is_General_Category=	 Pc}', "");
Expect(0, 95, '\p{^Is_General_Category=	 Pc}', "");
Expect(0, 95, '\P{Is_General_Category=	 Pc}', "");
Expect(1, 95, '\P{^Is_General_Category=	 Pc}', "");
Expect(0, 94, '\p{Is_General_Category=	 Pc}', "");
Expect(1, 94, '\p{^Is_General_Category=	 Pc}', "");
Expect(1, 94, '\P{Is_General_Category=	 Pc}', "");
Expect(0, 94, '\P{^Is_General_Category=	 Pc}', "");
Error('\p{Is_Gc=_/a/CONNECTOR punctuation}');
Error('\P{Is_Gc=_/a/CONNECTOR punctuation}');
Expect(1, 95, '\p{Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\P{Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\p{Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\P{Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\p{Is_Gc=	_connectorpunctuation}', "");
Expect(0, 95, '\p{^Is_Gc=	_connectorpunctuation}', "");
Expect(0, 95, '\P{Is_Gc=	_connectorpunctuation}', "");
Expect(1, 95, '\P{^Is_Gc=	_connectorpunctuation}', "");
Expect(0, 94, '\p{Is_Gc=	_connectorpunctuation}', "");
Expect(1, 94, '\p{^Is_Gc=	_connectorpunctuation}', "");
Expect(1, 94, '\P{Is_Gc=	_connectorpunctuation}', "");
Expect(0, 94, '\P{^Is_Gc=	_connectorpunctuation}', "");
Error('\p{Is_Category=	 Pc/a/}');
Error('\P{Is_Category=	 Pc/a/}');
Expect(1, 95, '\p{Is_Category=pc}', "");
Expect(0, 95, '\p{^Is_Category=pc}', "");
Expect(0, 95, '\P{Is_Category=pc}', "");
Expect(1, 95, '\P{^Is_Category=pc}', "");
Expect(0, 94, '\p{Is_Category=pc}', "");
Expect(1, 94, '\p{^Is_Category=pc}', "");
Expect(1, 94, '\P{Is_Category=pc}', "");
Expect(0, 94, '\P{^Is_Category=pc}', "");
Expect(1, 95, '\p{Is_Category= 	PC}', "");
Expect(0, 95, '\p{^Is_Category= 	PC}', "");
Expect(0, 95, '\P{Is_Category= 	PC}', "");
Expect(1, 95, '\P{^Is_Category= 	PC}', "");
Expect(0, 94, '\p{Is_Category= 	PC}', "");
Expect(1, 94, '\p{^Is_Category= 	PC}', "");
Expect(1, 94, '\P{Is_Category= 	PC}', "");
Expect(0, 94, '\P{^Is_Category= 	PC}', "");
Error('\p{General_Category=- Surrogate/a/}');
Error('\P{General_Category=- Surrogate/a/}');
Expect(0, 55295, '\p{General_Category=surrogate}', "");
Expect(1, 55295, '\p{^General_Category=surrogate}', "");
Expect(1, 55295, '\P{General_Category=surrogate}', "");
Expect(0, 55295, '\P{^General_Category=surrogate}', "");
Expect(0, 55295, '\p{General_Category=__surrogate}', "");
Expect(1, 55295, '\p{^General_Category=__surrogate}', "");
Expect(1, 55295, '\P{General_Category=__surrogate}', "");
Expect(0, 55295, '\P{^General_Category=__surrogate}', "");
Error('\p{Gc=:=-	Cs}');
Error('\P{Gc=:=-	Cs}');
Expect(0, 55295, '\p{Gc: cs}', "");
Expect(1, 55295, '\p{^Gc: cs}', "");
Expect(1, 55295, '\P{Gc: cs}', "");
Expect(0, 55295, '\P{^Gc: cs}', "");
Expect(0, 55295, '\p{Gc=-CS}', "");
Expect(1, 55295, '\p{^Gc=-CS}', "");
Expect(1, 55295, '\P{Gc=-CS}', "");
Expect(0, 55295, '\P{^Gc=-CS}', "");
Error('\p{Category:	:=	_Surrogate}');
Error('\P{Category:	:=	_Surrogate}');
Expect(0, 55295, '\p{Category=surrogate}', "");
Expect(1, 55295, '\p{^Category=surrogate}', "");
Expect(1, 55295, '\P{Category=surrogate}', "");
Expect(0, 55295, '\P{^Category=surrogate}', "");
Expect(0, 55295, '\p{Category= -Surrogate}', "");
Expect(1, 55295, '\p{^Category= -Surrogate}', "");
Expect(1, 55295, '\P{Category= -Surrogate}', "");
Expect(0, 55295, '\P{^Category= -Surrogate}', "");
Error('\p{Is_General_Category=/a/-CS}');
Error('\P{Is_General_Category=/a/-CS}');
Expect(0, 55295, '\p{Is_General_Category:cs}', "");
Expect(1, 55295, '\p{^Is_General_Category:cs}', "");
Expect(1, 55295, '\P{Is_General_Category:cs}', "");
Expect(0, 55295, '\P{^Is_General_Category:cs}', "");
Expect(0, 55295, '\p{Is_General_Category= 	Cs}', "");
Expect(1, 55295, '\p{^Is_General_Category= 	Cs}', "");
Expect(1, 55295, '\P{Is_General_Category= 	Cs}', "");
Expect(0, 55295, '\P{^Is_General_Category= 	Cs}', "");
Error('\p{Is_Gc=surrogate:=}');
Error('\P{Is_Gc=surrogate:=}');
Expect(0, 55295, '\p{Is_Gc=surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc=surrogate}', "");
Expect(1, 55295, '\P{Is_Gc=surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc=surrogate}', "");
Expect(0, 55295, '\p{Is_Gc= 	surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc= 	surrogate}', "");
Expect(1, 55295, '\P{Is_Gc= 	surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc= 	surrogate}', "");
Error('\p{Is_Category=:=-_Cs}');
Error('\P{Is_Category=:=-_Cs}');
Expect(0, 55295, '\p{Is_Category: cs}', "");
Expect(1, 55295, '\p{^Is_Category: cs}', "");
Expect(1, 55295, '\P{Is_Category: cs}', "");
Expect(0, 55295, '\P{^Is_Category: cs}', "");
Expect(0, 55295, '\p{Is_Category= 	Cs}', "");
Expect(1, 55295, '\p{^Is_Category= 	Cs}', "");
Expect(1, 55295, '\P{Is_Category= 	Cs}', "");
Expect(0, 55295, '\P{^Is_Category= 	Cs}', "");
Error('\p{General_Category=	:=private	use}');
Error('\P{General_Category=	:=private	use}');
Expect(1, 63743, '\p{General_Category=privateuse}', "");
Expect(0, 63743, '\p{^General_Category=privateuse}', "");
Expect(0, 63743, '\P{General_Category=privateuse}', "");
Expect(1, 63743, '\P{^General_Category=privateuse}', "");
Expect(0, 1, '\p{General_Category=privateuse}', "");
Expect(1, 1, '\p{^General_Category=privateuse}', "");
Expect(1, 1, '\P{General_Category=privateuse}', "");
Expect(0, 1, '\P{^General_Category=privateuse}', "");
Expect(1, 63743, '\p{General_Category=_	private_Use}', "");
Expect(0, 63743, '\p{^General_Category=_	private_Use}', "");
Expect(0, 63743, '\P{General_Category=_	private_Use}', "");
Expect(1, 63743, '\P{^General_Category=_	private_Use}', "");
Expect(0, 1, '\p{General_Category=_	private_Use}', "");
Expect(1, 1, '\p{^General_Category=_	private_Use}', "");
Expect(1, 1, '\P{General_Category=_	private_Use}', "");
Expect(0, 1, '\P{^General_Category=_	private_Use}', "");
Error('\p{Gc=:=  CO}');
Error('\P{Gc=:=  CO}');
Expect(1, 63743, '\p{Gc=co}', "");
Expect(0, 63743, '\p{^Gc=co}', "");
Expect(0, 63743, '\P{Gc=co}', "");
Expect(1, 63743, '\P{^Gc=co}', "");
Expect(0, 1, '\p{Gc=co}', "");
Expect(1, 1, '\p{^Gc=co}', "");
Expect(1, 1, '\P{Gc=co}', "");
Expect(0, 1, '\P{^Gc=co}', "");
Expect(1, 63743, '\p{Gc:    Co}', "");
Expect(0, 63743, '\p{^Gc:    Co}', "");
Expect(0, 63743, '\P{Gc:    Co}', "");
Expect(1, 63743, '\P{^Gc:    Co}', "");
Expect(0, 1, '\p{Gc:    Co}', "");
Expect(1, 1, '\p{^Gc:    Co}', "");
Expect(1, 1, '\P{Gc:    Co}', "");
Expect(0, 1, '\P{^Gc:    Co}', "");
Error('\p{Category: :=-private	USE}');
Error('\P{Category: :=-private	USE}');
Expect(1, 63743, '\p{Category=privateuse}', "");
Expect(0, 63743, '\p{^Category=privateuse}', "");
Expect(0, 63743, '\P{Category=privateuse}', "");
Expect(1, 63743, '\P{^Category=privateuse}', "");
Expect(0, 1, '\p{Category=privateuse}', "");
Expect(1, 1, '\p{^Category=privateuse}', "");
Expect(1, 1, '\P{Category=privateuse}', "");
Expect(0, 1, '\P{^Category=privateuse}', "");
Expect(1, 63743, '\p{Category:   	PrivateUse}', "");
Expect(0, 63743, '\p{^Category:   	PrivateUse}', "");
Expect(0, 63743, '\P{Category:   	PrivateUse}', "");
Expect(1, 63743, '\P{^Category:   	PrivateUse}', "");
Expect(0, 1, '\p{Category:   	PrivateUse}', "");
Expect(1, 1, '\p{^Category:   	PrivateUse}', "");
Expect(1, 1, '\P{Category:   	PrivateUse}', "");
Expect(0, 1, '\P{^Category:   	PrivateUse}', "");
Error('\p{Is_General_Category=	-co/a/}');
Error('\P{Is_General_Category=	-co/a/}');
Expect(1, 63743, '\p{Is_General_Category=co}', "");
Expect(0, 63743, '\p{^Is_General_Category=co}', "");
Expect(0, 63743, '\P{Is_General_Category=co}', "");
Expect(1, 63743, '\P{^Is_General_Category=co}', "");
Expect(0, 1, '\p{Is_General_Category=co}', "");
Expect(1, 1, '\p{^Is_General_Category=co}', "");
Expect(1, 1, '\P{Is_General_Category=co}', "");
Expect(0, 1, '\P{^Is_General_Category=co}', "");
Expect(1, 63743, '\p{Is_General_Category=	_Co}', "");
Expect(0, 63743, '\p{^Is_General_Category=	_Co}', "");
Expect(0, 63743, '\P{Is_General_Category=	_Co}', "");
Expect(1, 63743, '\P{^Is_General_Category=	_Co}', "");
Expect(0, 1, '\p{Is_General_Category=	_Co}', "");
Expect(1, 1, '\p{^Is_General_Category=	_Co}', "");
Expect(1, 1, '\P{Is_General_Category=	_Co}', "");
Expect(0, 1, '\P{^Is_General_Category=	_Co}', "");
Error('\p{Is_Gc=:=	_Private	Use}');
Error('\P{Is_Gc=:=	_Private	Use}');
Expect(1, 63743, '\p{Is_Gc=privateuse}', "");
Expect(0, 63743, '\p{^Is_Gc=privateuse}', "");
Expect(0, 63743, '\P{Is_Gc=privateuse}', "");
Expect(1, 63743, '\P{^Is_Gc=privateuse}', "");
Expect(0, 1, '\p{Is_Gc=privateuse}', "");
Expect(1, 1, '\p{^Is_Gc=privateuse}', "");
Expect(1, 1, '\P{Is_Gc=privateuse}', "");
Expect(0, 1, '\P{^Is_Gc=privateuse}', "");
Expect(1, 63743, '\p{Is_Gc=_-PRIVATE	Use}', "");
Expect(0, 63743, '\p{^Is_Gc=_-PRIVATE	Use}', "");
Expect(0, 63743, '\P{Is_Gc=_-PRIVATE	Use}', "");
Expect(1, 63743, '\P{^Is_Gc=_-PRIVATE	Use}', "");
Expect(0, 1, '\p{Is_Gc=_-PRIVATE	Use}', "");
Expect(1, 1, '\p{^Is_Gc=_-PRIVATE	Use}', "");
Expect(1, 1, '\P{Is_Gc=_-PRIVATE	Use}', "");
Expect(0, 1, '\P{^Is_Gc=_-PRIVATE	Use}', "");
Error('\p{Is_Category=-/a/Co}');
Error('\P{Is_Category=-/a/Co}');
Expect(1, 63743, '\p{Is_Category=co}', "");
Expect(0, 63743, '\p{^Is_Category=co}', "");
Expect(0, 63743, '\P{Is_Category=co}', "");
Expect(1, 63743, '\P{^Is_Category=co}', "");
Expect(0, 1, '\p{Is_Category=co}', "");
Expect(1, 1, '\p{^Is_Category=co}', "");
Expect(1, 1, '\P{Is_Category=co}', "");
Expect(0, 1, '\P{^Is_Category=co}', "");
Expect(1, 63743, '\p{Is_Category=	-CO}', "");
Expect(0, 63743, '\p{^Is_Category=	-CO}', "");
Expect(0, 63743, '\P{Is_Category=	-CO}', "");
Expect(1, 63743, '\P{^Is_Category=	-CO}', "");
Expect(0, 1, '\p{Is_Category=	-CO}', "");
Expect(1, 1, '\p{^Is_Category=	-CO}', "");
Expect(1, 1, '\P{Is_Category=	-CO}', "");
Expect(0, 1, '\P{^Is_Category=	-CO}', "");
Error('\p{General_Category=-_lowercaseLetter:=}');
Error('\P{General_Category=-_lowercaseLetter:=}');
Expect(1, 122, '\p{General_Category=lowercaseletter}', "");
Expect(0, 122, '\p{^General_Category=lowercaseletter}', "");
Expect(0, 122, '\P{General_Category=lowercaseletter}', "");
Expect(1, 122, '\P{^General_Category=lowercaseletter}', "");
Expect(0, 96, '\p{General_Category=lowercaseletter}', "");
Expect(1, 96, '\p{^General_Category=lowercaseletter}', "");
Expect(1, 96, '\P{General_Category=lowercaseletter}', "");
Expect(0, 96, '\P{^General_Category=lowercaseletter}', "");
Expect(1, 122, '\p{General_Category=LOWERCASE_Letter}', "");
Expect(0, 122, '\p{^General_Category=LOWERCASE_Letter}', "");
Expect(0, 122, '\P{General_Category=LOWERCASE_Letter}', "");
Expect(1, 122, '\P{^General_Category=LOWERCASE_Letter}', "");
Expect(0, 96, '\p{General_Category=LOWERCASE_Letter}', "");
Expect(1, 96, '\p{^General_Category=LOWERCASE_Letter}', "");
Expect(1, 96, '\P{General_Category=LOWERCASE_Letter}', "");
Expect(0, 96, '\P{^General_Category=LOWERCASE_Letter}', "");
Error('\p{Gc=:=  Ll}');
Error('\P{Gc=:=  Ll}');
Expect(1, 122, '\p{Gc=ll}', "");
Expect(0, 122, '\p{^Gc=ll}', "");
Expect(0, 122, '\P{Gc=ll}', "");
Expect(1, 122, '\P{^Gc=ll}', "");
Expect(0, 96, '\p{Gc=ll}', "");
Expect(1, 96, '\p{^Gc=ll}', "");
Expect(1, 96, '\P{Gc=ll}', "");
Expect(0, 96, '\P{^Gc=ll}', "");
Expect(1, 122, '\p{Gc=-	ll}', "");
Expect(0, 122, '\p{^Gc=-	ll}', "");
Expect(0, 122, '\P{Gc=-	ll}', "");
Expect(1, 122, '\P{^Gc=-	ll}', "");
Expect(0, 96, '\p{Gc=-	ll}', "");
Expect(1, 96, '\p{^Gc=-	ll}', "");
Expect(1, 96, '\P{Gc=-	ll}', "");
Expect(0, 96, '\P{^Gc=-	ll}', "");
Error('\p{Category=__Lowercase:=Letter}');
Error('\P{Category=__Lowercase:=Letter}');
Expect(1, 122, '\p{Category=lowercaseletter}', "");
Expect(0, 122, '\p{^Category=lowercaseletter}', "");
Expect(0, 122, '\P{Category=lowercaseletter}', "");
Expect(1, 122, '\P{^Category=lowercaseletter}', "");
Expect(0, 96, '\p{Category=lowercaseletter}', "");
Expect(1, 96, '\p{^Category=lowercaseletter}', "");
Expect(1, 96, '\P{Category=lowercaseletter}', "");
Expect(0, 96, '\P{^Category=lowercaseletter}', "");
Expect(1, 122, '\p{Category=-Lowercase_Letter}', "");
Expect(0, 122, '\p{^Category=-Lowercase_Letter}', "");
Expect(0, 122, '\P{Category=-Lowercase_Letter}', "");
Expect(1, 122, '\P{^Category=-Lowercase_Letter}', "");
Expect(0, 96, '\p{Category=-Lowercase_Letter}', "");
Expect(1, 96, '\p{^Category=-Lowercase_Letter}', "");
Expect(1, 96, '\P{Category=-Lowercase_Letter}', "");
Expect(0, 96, '\P{^Category=-Lowercase_Letter}', "");
Error('\p{Is_General_Category= _Ll:=}');
Error('\P{Is_General_Category= _Ll:=}');
Expect(1, 122, '\p{Is_General_Category=ll}', "");
Expect(0, 122, '\p{^Is_General_Category=ll}', "");
Expect(0, 122, '\P{Is_General_Category=ll}', "");
Expect(1, 122, '\P{^Is_General_Category=ll}', "");
Expect(0, 96, '\p{Is_General_Category=ll}', "");
Expect(1, 96, '\p{^Is_General_Category=ll}', "");
Expect(1, 96, '\P{Is_General_Category=ll}', "");
Expect(0, 96, '\P{^Is_General_Category=ll}', "");
Expect(1, 122, '\p{Is_General_Category:		Ll}', "");
Expect(0, 122, '\p{^Is_General_Category:		Ll}', "");
Expect(0, 122, '\P{Is_General_Category:		Ll}', "");
Expect(1, 122, '\P{^Is_General_Category:		Ll}', "");
Expect(0, 96, '\p{Is_General_Category:		Ll}', "");
Expect(1, 96, '\p{^Is_General_Category:		Ll}', "");
Expect(1, 96, '\P{Is_General_Category:		Ll}', "");
Expect(0, 96, '\P{^Is_General_Category:		Ll}', "");
Error('\p{Is_Gc=	:=Lowercase LETTER}');
Error('\P{Is_Gc=	:=Lowercase LETTER}');
Expect(1, 122, '\p{Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\p{^Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\P{Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\P{^Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\p{Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\p{^Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\P{Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\P{^Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\p{Is_Gc=_LOWERCASE	LETTER}', "");
Expect(0, 122, '\p{^Is_Gc=_LOWERCASE	LETTER}', "");
Expect(0, 122, '\P{Is_Gc=_LOWERCASE	LETTER}', "");
Expect(1, 122, '\P{^Is_Gc=_LOWERCASE	LETTER}', "");
Expect(0, 96, '\p{Is_Gc=_LOWERCASE	LETTER}', "");
Expect(1, 96, '\p{^Is_Gc=_LOWERCASE	LETTER}', "");
Expect(1, 96, '\P{Is_Gc=_LOWERCASE	LETTER}', "");
Expect(0, 96, '\P{^Is_Gc=_LOWERCASE	LETTER}', "");
Error('\p{Is_Category=	 LL/a/}');
Error('\P{Is_Category=	 LL/a/}');
Expect(1, 122, '\p{Is_Category=ll}', "");
Expect(0, 122, '\p{^Is_Category=ll}', "");
Expect(0, 122, '\P{Is_Category=ll}', "");
Expect(1, 122, '\P{^Is_Category=ll}', "");
Expect(0, 96, '\p{Is_Category=ll}', "");
Expect(1, 96, '\p{^Is_Category=ll}', "");
Expect(1, 96, '\P{Is_Category=ll}', "");
Expect(0, 96, '\P{^Is_Category=ll}', "");
Expect(1, 122, '\p{Is_Category=_	Ll}', "");
Expect(0, 122, '\p{^Is_Category=_	Ll}', "");
Expect(0, 122, '\P{Is_Category=_	Ll}', "");
Expect(1, 122, '\P{^Is_Category=_	Ll}', "");
Expect(0, 96, '\p{Is_Category=_	Ll}', "");
Expect(1, 96, '\p{^Is_Category=_	Ll}', "");
Expect(1, 96, '\P{Is_Category=_	Ll}', "");
Expect(0, 96, '\P{^Is_Category=_	Ll}', "");
Error('\p{General_Category:   -:=ClosePunctuation}');
Error('\P{General_Category:   -:=ClosePunctuation}');
Expect(1, 41, '\p{General_Category=closepunctuation}', "");
Expect(0, 41, '\p{^General_Category=closepunctuation}', "");
Expect(0, 41, '\P{General_Category=closepunctuation}', "");
Expect(1, 41, '\P{^General_Category=closepunctuation}', "");
Expect(0, 40, '\p{General_Category=closepunctuation}', "");
Expect(1, 40, '\p{^General_Category=closepunctuation}', "");
Expect(1, 40, '\P{General_Category=closepunctuation}', "");
Expect(0, 40, '\P{^General_Category=closepunctuation}', "");
Expect(1, 41, '\p{General_Category=	-CLOSE Punctuation}', "");
Expect(0, 41, '\p{^General_Category=	-CLOSE Punctuation}', "");
Expect(0, 41, '\P{General_Category=	-CLOSE Punctuation}', "");
Expect(1, 41, '\P{^General_Category=	-CLOSE Punctuation}', "");
Expect(0, 40, '\p{General_Category=	-CLOSE Punctuation}', "");
Expect(1, 40, '\p{^General_Category=	-CLOSE Punctuation}', "");
Expect(1, 40, '\P{General_Category=	-CLOSE Punctuation}', "");
Expect(0, 40, '\P{^General_Category=	-CLOSE Punctuation}', "");
Error('\p{Gc=__pe:=}');
Error('\P{Gc=__pe:=}');
Expect(1, 41, '\p{Gc=pe}', "");
Expect(0, 41, '\p{^Gc=pe}', "");
Expect(0, 41, '\P{Gc=pe}', "");
Expect(1, 41, '\P{^Gc=pe}', "");
Expect(0, 40, '\p{Gc=pe}', "");
Expect(1, 40, '\p{^Gc=pe}', "");
Expect(1, 40, '\P{Gc=pe}', "");
Expect(0, 40, '\P{^Gc=pe}', "");
Expect(1, 41, '\p{Gc=	 PE}', "");
Expect(0, 41, '\p{^Gc=	 PE}', "");
Expect(0, 41, '\P{Gc=	 PE}', "");
Expect(1, 41, '\P{^Gc=	 PE}', "");
Expect(0, 40, '\p{Gc=	 PE}', "");
Expect(1, 40, '\p{^Gc=	 PE}', "");
Expect(1, 40, '\P{Gc=	 PE}', "");
Expect(0, 40, '\P{^Gc=	 PE}', "");
Error('\p{Category=-CLOSE:=Punctuation}');
Error('\P{Category=-CLOSE:=Punctuation}');
Expect(1, 41, '\p{Category:   closepunctuation}', "");
Expect(0, 41, '\p{^Category:   closepunctuation}', "");
Expect(0, 41, '\P{Category:   closepunctuation}', "");
Expect(1, 41, '\P{^Category:   closepunctuation}', "");
Expect(0, 40, '\p{Category:   closepunctuation}', "");
Expect(1, 40, '\p{^Category:   closepunctuation}', "");
Expect(1, 40, '\P{Category:   closepunctuation}', "");
Expect(0, 40, '\P{^Category:   closepunctuation}', "");
Expect(1, 41, '\p{Category=_-ClosePunctuation}', "");
Expect(0, 41, '\p{^Category=_-ClosePunctuation}', "");
Expect(0, 41, '\P{Category=_-ClosePunctuation}', "");
Expect(1, 41, '\P{^Category=_-ClosePunctuation}', "");
Expect(0, 40, '\p{Category=_-ClosePunctuation}', "");
Expect(1, 40, '\p{^Category=_-ClosePunctuation}', "");
Expect(1, 40, '\P{Category=_-ClosePunctuation}', "");
Expect(0, 40, '\P{^Category=_-ClosePunctuation}', "");
Error('\p{Is_General_Category=__PE/a/}');
Error('\P{Is_General_Category=__PE/a/}');
Expect(1, 41, '\p{Is_General_Category=pe}', "");
Expect(0, 41, '\p{^Is_General_Category=pe}', "");
Expect(0, 41, '\P{Is_General_Category=pe}', "");
Expect(1, 41, '\P{^Is_General_Category=pe}', "");
Expect(0, 40, '\p{Is_General_Category=pe}', "");
Expect(1, 40, '\p{^Is_General_Category=pe}', "");
Expect(1, 40, '\P{Is_General_Category=pe}', "");
Expect(0, 40, '\P{^Is_General_Category=pe}', "");
Expect(1, 41, '\p{Is_General_Category= 	Pe}', "");
Expect(0, 41, '\p{^Is_General_Category= 	Pe}', "");
Expect(0, 41, '\P{Is_General_Category= 	Pe}', "");
Expect(1, 41, '\P{^Is_General_Category= 	Pe}', "");
Expect(0, 40, '\p{Is_General_Category= 	Pe}', "");
Expect(1, 40, '\p{^Is_General_Category= 	Pe}', "");
Expect(1, 40, '\P{Is_General_Category= 	Pe}', "");
Expect(0, 40, '\P{^Is_General_Category= 	Pe}', "");
Error('\p{Is_Gc= :=close	Punctuation}');
Error('\P{Is_Gc= :=close	Punctuation}');
Expect(1, 41, '\p{Is_Gc=closepunctuation}', "");
Expect(0, 41, '\p{^Is_Gc=closepunctuation}', "");
Expect(0, 41, '\P{Is_Gc=closepunctuation}', "");
Expect(1, 41, '\P{^Is_Gc=closepunctuation}', "");
Expect(0, 40, '\p{Is_Gc=closepunctuation}', "");
Expect(1, 40, '\p{^Is_Gc=closepunctuation}', "");
Expect(1, 40, '\P{Is_Gc=closepunctuation}', "");
Expect(0, 40, '\P{^Is_Gc=closepunctuation}', "");
Expect(1, 41, '\p{Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(0, 41, '\p{^Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(0, 41, '\P{Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(1, 41, '\P{^Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(0, 40, '\p{Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(1, 40, '\p{^Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(1, 40, '\P{Is_Gc=	CLOSE	PUNCTUATION}', "");
Expect(0, 40, '\P{^Is_Gc=	CLOSE	PUNCTUATION}', "");
Error('\p{Is_Category:		/a/PE}');
Error('\P{Is_Category:		/a/PE}');
Expect(1, 41, '\p{Is_Category=pe}', "");
Expect(0, 41, '\p{^Is_Category=pe}', "");
Expect(0, 41, '\P{Is_Category=pe}', "");
Expect(1, 41, '\P{^Is_Category=pe}', "");
Expect(0, 40, '\p{Is_Category=pe}', "");
Expect(1, 40, '\p{^Is_Category=pe}', "");
Expect(1, 40, '\P{Is_Category=pe}', "");
Expect(0, 40, '\P{^Is_Category=pe}', "");
Expect(1, 41, '\p{Is_Category=_ Pe}', "");
Expect(0, 41, '\p{^Is_Category=_ Pe}', "");
Expect(0, 41, '\P{Is_Category=_ Pe}', "");
Expect(1, 41, '\P{^Is_Category=_ Pe}', "");
Expect(0, 40, '\p{Is_Category=_ Pe}', "");
Expect(1, 40, '\p{^Is_Category=_ Pe}', "");
Expect(1, 40, '\P{Is_Category=_ Pe}', "");
Expect(0, 40, '\P{^Is_Category=_ Pe}', "");
Error('\p{General_Category=	/a/Letter}');
Error('\P{General_Category=	/a/Letter}');
Expect(1, 90, '\p{General_Category=letter}', "");
Expect(0, 90, '\p{^General_Category=letter}', "");
Expect(0, 90, '\P{General_Category=letter}', "");
Expect(1, 90, '\P{^General_Category=letter}', "");
Expect(0, 64, '\p{General_Category=letter}', "");
Expect(1, 64, '\p{^General_Category=letter}', "");
Expect(1, 64, '\P{General_Category=letter}', "");
Expect(0, 64, '\P{^General_Category=letter}', "");
Expect(1, 90, '\p{General_Category=- Letter}', "");
Expect(0, 90, '\p{^General_Category=- Letter}', "");
Expect(0, 90, '\P{General_Category=- Letter}', "");
Expect(1, 90, '\P{^General_Category=- Letter}', "");
Expect(0, 64, '\p{General_Category=- Letter}', "");
Expect(1, 64, '\p{^General_Category=- Letter}', "");
Expect(1, 64, '\P{General_Category=- Letter}', "");
Expect(0, 64, '\P{^General_Category=- Letter}', "");
Error('\p{Gc=L/a/}');
Error('\P{Gc=L/a/}');
Expect(1, 90, '\p{Gc=l}', "");
Expect(0, 90, '\p{^Gc=l}', "");
Expect(0, 90, '\P{Gc=l}', "");
Expect(1, 90, '\P{^Gc=l}', "");
Expect(0, 64, '\p{Gc=l}', "");
Expect(1, 64, '\p{^Gc=l}', "");
Expect(1, 64, '\P{Gc=l}', "");
Expect(0, 64, '\P{^Gc=l}', "");
Expect(1, 90, '\p{Gc=-	L}', "");
Expect(0, 90, '\p{^Gc=-	L}', "");
Expect(0, 90, '\P{Gc=-	L}', "");
Expect(1, 90, '\P{^Gc=-	L}', "");
Expect(0, 64, '\p{Gc=-	L}', "");
Expect(1, 64, '\p{^Gc=-	L}', "");
Expect(1, 64, '\P{Gc=-	L}', "");
Expect(0, 64, '\P{^Gc=-	L}', "");
Error('\p{Category:  /a/Letter}');
Error('\P{Category:  /a/Letter}');
Expect(1, 90, '\p{Category: letter}', "");
Expect(0, 90, '\p{^Category: letter}', "");
Expect(0, 90, '\P{Category: letter}', "");
Expect(1, 90, '\P{^Category: letter}', "");
Expect(0, 64, '\p{Category: letter}', "");
Expect(1, 64, '\p{^Category: letter}', "");
Expect(1, 64, '\P{Category: letter}', "");
Expect(0, 64, '\P{^Category: letter}', "");
Expect(1, 90, '\p{Category=	LETTER}', "");
Expect(0, 90, '\p{^Category=	LETTER}', "");
Expect(0, 90, '\P{Category=	LETTER}', "");
Expect(1, 90, '\P{^Category=	LETTER}', "");
Expect(0, 64, '\p{Category=	LETTER}', "");
Expect(1, 64, '\p{^Category=	LETTER}', "");
Expect(1, 64, '\P{Category=	LETTER}', "");
Expect(0, 64, '\P{^Category=	LETTER}', "");
Error('\p{Is_General_Category=/a/_	L}');
Error('\P{Is_General_Category=/a/_	L}');
Expect(1, 90, '\p{Is_General_Category=l}', "");
Expect(0, 90, '\p{^Is_General_Category=l}', "");
Expect(0, 90, '\P{Is_General_Category=l}', "");
Expect(1, 90, '\P{^Is_General_Category=l}', "");
Expect(0, 64, '\p{Is_General_Category=l}', "");
Expect(1, 64, '\p{^Is_General_Category=l}', "");
Expect(1, 64, '\P{Is_General_Category=l}', "");
Expect(0, 64, '\P{^Is_General_Category=l}', "");
Expect(1, 90, '\p{Is_General_Category= _L}', "");
Expect(0, 90, '\p{^Is_General_Category= _L}', "");
Expect(0, 90, '\P{Is_General_Category= _L}', "");
Expect(1, 90, '\P{^Is_General_Category= _L}', "");
Expect(0, 64, '\p{Is_General_Category= _L}', "");
Expect(1, 64, '\p{^Is_General_Category= _L}', "");
Expect(1, 64, '\P{Is_General_Category= _L}', "");
Expect(0, 64, '\P{^Is_General_Category= _L}', "");
Error('\p{Is_Gc= /a/LETTER}');
Error('\P{Is_Gc= /a/LETTER}');
Expect(1, 90, '\p{Is_Gc=letter}', "");
Expect(0, 90, '\p{^Is_Gc=letter}', "");
Expect(0, 90, '\P{Is_Gc=letter}', "");
Expect(1, 90, '\P{^Is_Gc=letter}', "");
Expect(0, 64, '\p{Is_Gc=letter}', "");
Expect(1, 64, '\p{^Is_Gc=letter}', "");
Expect(1, 64, '\P{Is_Gc=letter}', "");
Expect(0, 64, '\P{^Is_Gc=letter}', "");
Expect(1, 90, '\p{Is_Gc=_Letter}', "");
Expect(0, 90, '\p{^Is_Gc=_Letter}', "");
Expect(0, 90, '\P{Is_Gc=_Letter}', "");
Expect(1, 90, '\P{^Is_Gc=_Letter}', "");
Expect(0, 64, '\p{Is_Gc=_Letter}', "");
Expect(1, 64, '\p{^Is_Gc=_Letter}', "");
Expect(1, 64, '\P{Is_Gc=_Letter}', "");
Expect(0, 64, '\P{^Is_Gc=_Letter}', "");
Error('\p{Is_Category=:=	L}');
Error('\P{Is_Category=:=	L}');
Expect(1, 90, '\p{Is_Category=l}', "");
Expect(0, 90, '\p{^Is_Category=l}', "");
Expect(0, 90, '\P{Is_Category=l}', "");
Expect(1, 90, '\P{^Is_Category=l}', "");
Expect(0, 64, '\p{Is_Category=l}', "");
Expect(1, 64, '\p{^Is_Category=l}', "");
Expect(1, 64, '\P{Is_Category=l}', "");
Expect(0, 64, '\P{^Is_Category=l}', "");
Expect(1, 90, '\p{Is_Category= 	L}', "");
Expect(0, 90, '\p{^Is_Category= 	L}', "");
Expect(0, 90, '\P{Is_Category= 	L}', "");
Expect(1, 90, '\P{^Is_Category= 	L}', "");
Expect(0, 64, '\p{Is_Category= 	L}', "");
Expect(1, 64, '\p{^Is_Category= 	L}', "");
Expect(1, 64, '\P{Is_Category= 	L}', "");
Expect(0, 64, '\P{^Is_Category= 	L}', "");
Error('\p{General_Category:_ Modifier Symbol:=}');
Error('\P{General_Category:_ Modifier Symbol:=}');
Expect(1, 94, '\p{General_Category:	modifiersymbol}', "");
Expect(0, 94, '\p{^General_Category:	modifiersymbol}', "");
Expect(0, 94, '\P{General_Category:	modifiersymbol}', "");
Expect(1, 94, '\P{^General_Category:	modifiersymbol}', "");
Expect(0, 93, '\p{General_Category:	modifiersymbol}', "");
Expect(1, 93, '\p{^General_Category:	modifiersymbol}', "");
Expect(1, 93, '\P{General_Category:	modifiersymbol}', "");
Expect(0, 93, '\P{^General_Category:	modifiersymbol}', "");
Expect(1, 94, '\p{General_Category=	 MODIFIERsymbol}', "");
Expect(0, 94, '\p{^General_Category=	 MODIFIERsymbol}', "");
Expect(0, 94, '\P{General_Category=	 MODIFIERsymbol}', "");
Expect(1, 94, '\P{^General_Category=	 MODIFIERsymbol}', "");
Expect(0, 93, '\p{General_Category=	 MODIFIERsymbol}', "");
Expect(1, 93, '\p{^General_Category=	 MODIFIERsymbol}', "");
Expect(1, 93, '\P{General_Category=	 MODIFIERsymbol}', "");
Expect(0, 93, '\P{^General_Category=	 MODIFIERsymbol}', "");
Error('\p{Gc=/a/_sk}');
Error('\P{Gc=/a/_sk}');
Expect(1, 94, '\p{Gc:sk}', "");
Expect(0, 94, '\p{^Gc:sk}', "");
Expect(0, 94, '\P{Gc:sk}', "");
Expect(1, 94, '\P{^Gc:sk}', "");
Expect(0, 93, '\p{Gc:sk}', "");
Expect(1, 93, '\p{^Gc:sk}', "");
Expect(1, 93, '\P{Gc:sk}', "");
Expect(0, 93, '\P{^Gc:sk}', "");
Expect(1, 94, '\p{Gc=	_SK}', "");
Expect(0, 94, '\p{^Gc=	_SK}', "");
Expect(0, 94, '\P{Gc=	_SK}', "");
Expect(1, 94, '\P{^Gc=	_SK}', "");
Expect(0, 93, '\p{Gc=	_SK}', "");
Expect(1, 93, '\p{^Gc=	_SK}', "");
Expect(1, 93, '\P{Gc=	_SK}', "");
Expect(0, 93, '\P{^Gc=	_SK}', "");
Error('\p{Category=_/a/ModifierSymbol}');
Error('\P{Category=_/a/ModifierSymbol}');
Expect(1, 94, '\p{Category=modifiersymbol}', "");
Expect(0, 94, '\p{^Category=modifiersymbol}', "");
Expect(0, 94, '\P{Category=modifiersymbol}', "");
Expect(1, 94, '\P{^Category=modifiersymbol}', "");
Expect(0, 93, '\p{Category=modifiersymbol}', "");
Expect(1, 93, '\p{^Category=modifiersymbol}', "");
Expect(1, 93, '\P{Category=modifiersymbol}', "");
Expect(0, 93, '\P{^Category=modifiersymbol}', "");
Expect(1, 94, '\p{Category= _ModifierSYMBOL}', "");
Expect(0, 94, '\p{^Category= _ModifierSYMBOL}', "");
Expect(0, 94, '\P{Category= _ModifierSYMBOL}', "");
Expect(1, 94, '\P{^Category= _ModifierSYMBOL}', "");
Expect(0, 93, '\p{Category= _ModifierSYMBOL}', "");
Expect(1, 93, '\p{^Category= _ModifierSYMBOL}', "");
Expect(1, 93, '\P{Category= _ModifierSYMBOL}', "");
Expect(0, 93, '\P{^Category= _ModifierSYMBOL}', "");
Error('\p{Is_General_Category= /a/Sk}');
Error('\P{Is_General_Category= /a/Sk}');
Expect(1, 94, '\p{Is_General_Category=sk}', "");
Expect(0, 94, '\p{^Is_General_Category=sk}', "");
Expect(0, 94, '\P{Is_General_Category=sk}', "");
Expect(1, 94, '\P{^Is_General_Category=sk}', "");
Expect(0, 93, '\p{Is_General_Category=sk}', "");
Expect(1, 93, '\p{^Is_General_Category=sk}', "");
Expect(1, 93, '\P{Is_General_Category=sk}', "");
Expect(0, 93, '\P{^Is_General_Category=sk}', "");
Expect(1, 94, '\p{Is_General_Category=--SK}', "");
Expect(0, 94, '\p{^Is_General_Category=--SK}', "");
Expect(0, 94, '\P{Is_General_Category=--SK}', "");
Expect(1, 94, '\P{^Is_General_Category=--SK}', "");
Expect(0, 93, '\p{Is_General_Category=--SK}', "");
Expect(1, 93, '\p{^Is_General_Category=--SK}', "");
Expect(1, 93, '\P{Is_General_Category=--SK}', "");
Expect(0, 93, '\P{^Is_General_Category=--SK}', "");
Error('\p{Is_Gc=_:=Modifier	Symbol}');
Error('\P{Is_Gc=_:=Modifier	Symbol}');
Expect(1, 94, '\p{Is_Gc: modifiersymbol}', "");
Expect(0, 94, '\p{^Is_Gc: modifiersymbol}', "");
Expect(0, 94, '\P{Is_Gc: modifiersymbol}', "");
Expect(1, 94, '\P{^Is_Gc: modifiersymbol}', "");
Expect(0, 93, '\p{Is_Gc: modifiersymbol}', "");
Expect(1, 93, '\p{^Is_Gc: modifiersymbol}', "");
Expect(1, 93, '\P{Is_Gc: modifiersymbol}', "");
Expect(0, 93, '\P{^Is_Gc: modifiersymbol}', "");
Expect(1, 94, '\p{Is_Gc=  MODIFIER_symbol}', "");
Expect(0, 94, '\p{^Is_Gc=  MODIFIER_symbol}', "");
Expect(0, 94, '\P{Is_Gc=  MODIFIER_symbol}', "");
Expect(1, 94, '\P{^Is_Gc=  MODIFIER_symbol}', "");
Expect(0, 93, '\p{Is_Gc=  MODIFIER_symbol}', "");
Expect(1, 93, '\p{^Is_Gc=  MODIFIER_symbol}', "");
Expect(1, 93, '\P{Is_Gc=  MODIFIER_symbol}', "");
Expect(0, 93, '\P{^Is_Gc=  MODIFIER_symbol}', "");
Error('\p{Is_Category=_Sk/a/}');
Error('\P{Is_Category=_Sk/a/}');
Expect(1, 94, '\p{Is_Category:sk}', "");
Expect(0, 94, '\p{^Is_Category:sk}', "");
Expect(0, 94, '\P{Is_Category:sk}', "");
Expect(1, 94, '\P{^Is_Category:sk}', "");
Expect(0, 93, '\p{Is_Category:sk}', "");
Expect(1, 93, '\p{^Is_Category:sk}', "");
Expect(1, 93, '\P{Is_Category:sk}', "");
Expect(0, 93, '\P{^Is_Category:sk}', "");
Expect(1, 94, '\p{Is_Category=	Sk}', "");
Expect(0, 94, '\p{^Is_Category=	Sk}', "");
Expect(0, 94, '\P{Is_Category=	Sk}', "");
Expect(1, 94, '\P{^Is_Category=	Sk}', "");
Expect(0, 93, '\p{Is_Category=	Sk}', "");
Expect(1, 93, '\p{^Is_Category=	Sk}', "");
Expect(1, 93, '\P{Is_Category=	Sk}', "");
Expect(0, 93, '\P{^Is_Category=	Sk}', "");
Error('\p{General_Category=-:=CONTROL}');
Error('\P{General_Category=-:=CONTROL}');
Expect(1, 31, '\p{General_Category=control}', "");
Expect(0, 31, '\p{^General_Category=control}', "");
Expect(0, 31, '\P{General_Category=control}', "");
Expect(1, 31, '\P{^General_Category=control}', "");
Expect(0, 126, '\p{General_Category=control}', "");
Expect(1, 126, '\p{^General_Category=control}', "");
Expect(1, 126, '\P{General_Category=control}', "");
Expect(0, 126, '\P{^General_Category=control}', "");
Expect(1, 31, '\p{General_Category= _Control}', "");
Expect(0, 31, '\p{^General_Category= _Control}', "");
Expect(0, 31, '\P{General_Category= _Control}', "");
Expect(1, 31, '\P{^General_Category= _Control}', "");
Expect(0, 126, '\p{General_Category= _Control}', "");
Expect(1, 126, '\p{^General_Category= _Control}', "");
Expect(1, 126, '\P{General_Category= _Control}', "");
Expect(0, 126, '\P{^General_Category= _Control}', "");
Error('\p{Gc=:=- Cc}');
Error('\P{Gc=:=- Cc}');
Expect(1, 31, '\p{Gc=cc}', "");
Expect(0, 31, '\p{^Gc=cc}', "");
Expect(0, 31, '\P{Gc=cc}', "");
Expect(1, 31, '\P{^Gc=cc}', "");
Expect(0, 126, '\p{Gc=cc}', "");
Expect(1, 126, '\p{^Gc=cc}', "");
Expect(1, 126, '\P{Gc=cc}', "");
Expect(0, 126, '\P{^Gc=cc}', "");
Expect(1, 31, '\p{Gc= 	cc}', "");
Expect(0, 31, '\p{^Gc= 	cc}', "");
Expect(0, 31, '\P{Gc= 	cc}', "");
Expect(1, 31, '\P{^Gc= 	cc}', "");
Expect(0, 126, '\p{Gc= 	cc}', "");
Expect(1, 126, '\p{^Gc= 	cc}', "");
Expect(1, 126, '\P{Gc= 	cc}', "");
Expect(0, 126, '\P{^Gc= 	cc}', "");
Error('\p{Category=	cntrl:=}');
Error('\P{Category=	cntrl:=}');
Expect(1, 31, '\p{Category=cntrl}', "");
Expect(0, 31, '\p{^Category=cntrl}', "");
Expect(0, 31, '\P{Category=cntrl}', "");
Expect(1, 31, '\P{^Category=cntrl}', "");
Expect(0, 126, '\p{Category=cntrl}', "");
Expect(1, 126, '\p{^Category=cntrl}', "");
Expect(1, 126, '\P{Category=cntrl}', "");
Expect(0, 126, '\P{^Category=cntrl}', "");
Expect(1, 31, '\p{Category=_Cntrl}', "");
Expect(0, 31, '\p{^Category=_Cntrl}', "");
Expect(0, 31, '\P{Category=_Cntrl}', "");
Expect(1, 31, '\P{^Category=_Cntrl}', "");
Expect(0, 126, '\p{Category=_Cntrl}', "");
Expect(1, 126, '\p{^Category=_Cntrl}', "");
Expect(1, 126, '\P{Category=_Cntrl}', "");
Expect(0, 126, '\P{^Category=_Cntrl}', "");
Error('\p{Is_General_Category=/a/ _control}');
Error('\P{Is_General_Category=/a/ _control}');
Expect(1, 31, '\p{Is_General_Category=control}', "");
Expect(0, 31, '\p{^Is_General_Category=control}', "");
Expect(0, 31, '\P{Is_General_Category=control}', "");
Expect(1, 31, '\P{^Is_General_Category=control}', "");
Expect(0, 126, '\p{Is_General_Category=control}', "");
Expect(1, 126, '\p{^Is_General_Category=control}', "");
Expect(1, 126, '\P{Is_General_Category=control}', "");
Expect(0, 126, '\P{^Is_General_Category=control}', "");
Expect(1, 31, '\p{Is_General_Category= control}', "");
Expect(0, 31, '\p{^Is_General_Category= control}', "");
Expect(0, 31, '\P{Is_General_Category= control}', "");
Expect(1, 31, '\P{^Is_General_Category= control}', "");
Expect(0, 126, '\p{Is_General_Category= control}', "");
Expect(1, 126, '\p{^Is_General_Category= control}', "");
Expect(1, 126, '\P{Is_General_Category= control}', "");
Expect(0, 126, '\P{^Is_General_Category= control}', "");
Error('\p{Is_Gc= /a/CC}');
Error('\P{Is_Gc= /a/CC}');
Expect(1, 31, '\p{Is_Gc=cc}', "");
Expect(0, 31, '\p{^Is_Gc=cc}', "");
Expect(0, 31, '\P{Is_Gc=cc}', "");
Expect(1, 31, '\P{^Is_Gc=cc}', "");
Expect(0, 126, '\p{Is_Gc=cc}', "");
Expect(1, 126, '\p{^Is_Gc=cc}', "");
Expect(1, 126, '\P{Is_Gc=cc}', "");
Expect(0, 126, '\P{^Is_Gc=cc}', "");
Expect(1, 31, '\p{Is_Gc:     CC}', "");
Expect(0, 31, '\p{^Is_Gc:     CC}', "");
Expect(0, 31, '\P{Is_Gc:     CC}', "");
Expect(1, 31, '\P{^Is_Gc:     CC}', "");
Expect(0, 126, '\p{Is_Gc:     CC}', "");
Expect(1, 126, '\p{^Is_Gc:     CC}', "");
Expect(1, 126, '\P{Is_Gc:     CC}', "");
Expect(0, 126, '\P{^Is_Gc:     CC}', "");
Error('\p{Is_Category=/a/-Cntrl}');
Error('\P{Is_Category=/a/-Cntrl}');
Expect(1, 31, '\p{Is_Category=cntrl}', "");
Expect(0, 31, '\p{^Is_Category=cntrl}', "");
Expect(0, 31, '\P{Is_Category=cntrl}', "");
Expect(1, 31, '\P{^Is_Category=cntrl}', "");
Expect(0, 126, '\p{Is_Category=cntrl}', "");
Expect(1, 126, '\p{^Is_Category=cntrl}', "");
Expect(1, 126, '\P{Is_Category=cntrl}', "");
Expect(0, 126, '\P{^Is_Category=cntrl}', "");
Expect(1, 31, '\p{Is_Category= -Cntrl}', "");
Expect(0, 31, '\p{^Is_Category= -Cntrl}', "");
Expect(0, 31, '\P{Is_Category= -Cntrl}', "");
Expect(1, 31, '\P{^Is_Category= -Cntrl}', "");
Expect(0, 126, '\p{Is_Category= -Cntrl}', "");
Expect(1, 126, '\p{^Is_Category= -Cntrl}', "");
Expect(1, 126, '\P{Is_Category= -Cntrl}', "");
Expect(0, 126, '\P{^Is_Category= -Cntrl}', "");
Error('\p{General_Category=:=-	Line	SEPARATOR}');
Error('\P{General_Category=:=-	Line	SEPARATOR}');
Expect(1, 8232, '\p{General_Category=lineseparator}', "");
Expect(0, 8232, '\p{^General_Category=lineseparator}', "");
Expect(0, 8232, '\P{General_Category=lineseparator}', "");
Expect(1, 8232, '\P{^General_Category=lineseparator}', "");
Expect(0, 8231, '\p{General_Category=lineseparator}', "");
Expect(1, 8231, '\p{^General_Category=lineseparator}', "");
Expect(1, 8231, '\P{General_Category=lineseparator}', "");
Expect(0, 8231, '\P{^General_Category=lineseparator}', "");
Expect(1, 8232, '\p{General_Category=-	line Separator}', "");
Expect(0, 8232, '\p{^General_Category=-	line Separator}', "");
Expect(0, 8232, '\P{General_Category=-	line Separator}', "");
Expect(1, 8232, '\P{^General_Category=-	line Separator}', "");
Expect(0, 8231, '\p{General_Category=-	line Separator}', "");
Expect(1, 8231, '\p{^General_Category=-	line Separator}', "");
Expect(1, 8231, '\P{General_Category=-	line Separator}', "");
Expect(0, 8231, '\P{^General_Category=-	line Separator}', "");
Error('\p{Gc=	:=Zl}');
Error('\P{Gc=	:=Zl}');
Expect(1, 8232, '\p{Gc=zl}', "");
Expect(0, 8232, '\p{^Gc=zl}', "");
Expect(0, 8232, '\P{Gc=zl}', "");
Expect(1, 8232, '\P{^Gc=zl}', "");
Expect(0, 8231, '\p{Gc=zl}', "");
Expect(1, 8231, '\p{^Gc=zl}', "");
Expect(1, 8231, '\P{Gc=zl}', "");
Expect(0, 8231, '\P{^Gc=zl}', "");
Expect(1, 8232, '\p{Gc:	-ZL}', "");
Expect(0, 8232, '\p{^Gc:	-ZL}', "");
Expect(0, 8232, '\P{Gc:	-ZL}', "");
Expect(1, 8232, '\P{^Gc:	-ZL}', "");
Expect(0, 8231, '\p{Gc:	-ZL}', "");
Expect(1, 8231, '\p{^Gc:	-ZL}', "");
Expect(1, 8231, '\P{Gc:	-ZL}', "");
Expect(0, 8231, '\P{^Gc:	-ZL}', "");
Error('\p{Category=/a/	_Line_Separator}');
Error('\P{Category=/a/	_Line_Separator}');
Expect(1, 8232, '\p{Category:	lineseparator}', "");
Expect(0, 8232, '\p{^Category:	lineseparator}', "");
Expect(0, 8232, '\P{Category:	lineseparator}', "");
Expect(1, 8232, '\P{^Category:	lineseparator}', "");
Expect(0, 8231, '\p{Category:	lineseparator}', "");
Expect(1, 8231, '\p{^Category:	lineseparator}', "");
Expect(1, 8231, '\P{Category:	lineseparator}', "");
Expect(0, 8231, '\P{^Category:	lineseparator}', "");
Expect(1, 8232, '\p{Category=-_LINE separator}', "");
Expect(0, 8232, '\p{^Category=-_LINE separator}', "");
Expect(0, 8232, '\P{Category=-_LINE separator}', "");
Expect(1, 8232, '\P{^Category=-_LINE separator}', "");
Expect(0, 8231, '\p{Category=-_LINE separator}', "");
Expect(1, 8231, '\p{^Category=-_LINE separator}', "");
Expect(1, 8231, '\P{Category=-_LINE separator}', "");
Expect(0, 8231, '\P{^Category=-_LINE separator}', "");
Error('\p{Is_General_Category=_zl/a/}');
Error('\P{Is_General_Category=_zl/a/}');
Expect(1, 8232, '\p{Is_General_Category=zl}', "");
Expect(0, 8232, '\p{^Is_General_Category=zl}', "");
Expect(0, 8232, '\P{Is_General_Category=zl}', "");
Expect(1, 8232, '\P{^Is_General_Category=zl}', "");
Expect(0, 8231, '\p{Is_General_Category=zl}', "");
Expect(1, 8231, '\p{^Is_General_Category=zl}', "");
Expect(1, 8231, '\P{Is_General_Category=zl}', "");
Expect(0, 8231, '\P{^Is_General_Category=zl}', "");
Expect(1, 8232, '\p{Is_General_Category= zl}', "");
Expect(0, 8232, '\p{^Is_General_Category= zl}', "");
Expect(0, 8232, '\P{Is_General_Category= zl}', "");
Expect(1, 8232, '\P{^Is_General_Category= zl}', "");
Expect(0, 8231, '\p{Is_General_Category= zl}', "");
Expect(1, 8231, '\p{^Is_General_Category= zl}', "");
Expect(1, 8231, '\P{Is_General_Category= zl}', "");
Expect(0, 8231, '\P{^Is_General_Category= zl}', "");
Error('\p{Is_Gc=_/a/line	SEPARATOR}');
Error('\P{Is_Gc=_/a/line	SEPARATOR}');
Expect(1, 8232, '\p{Is_Gc=lineseparator}', "");
Expect(0, 8232, '\p{^Is_Gc=lineseparator}', "");
Expect(0, 8232, '\P{Is_Gc=lineseparator}', "");
Expect(1, 8232, '\P{^Is_Gc=lineseparator}', "");
Expect(0, 8231, '\p{Is_Gc=lineseparator}', "");
Expect(1, 8231, '\p{^Is_Gc=lineseparator}', "");
Expect(1, 8231, '\P{Is_Gc=lineseparator}', "");
Expect(0, 8231, '\P{^Is_Gc=lineseparator}', "");
Expect(1, 8232, '\p{Is_Gc=_Line_Separator}', "");
Expect(0, 8232, '\p{^Is_Gc=_Line_Separator}', "");
Expect(0, 8232, '\P{Is_Gc=_Line_Separator}', "");
Expect(1, 8232, '\P{^Is_Gc=_Line_Separator}', "");
Expect(0, 8231, '\p{Is_Gc=_Line_Separator}', "");
Expect(1, 8231, '\p{^Is_Gc=_Line_Separator}', "");
Expect(1, 8231, '\P{Is_Gc=_Line_Separator}', "");
Expect(0, 8231, '\P{^Is_Gc=_Line_Separator}', "");
Error('\p{Is_Category=/a/zl}');
Error('\P{Is_Category=/a/zl}');
Expect(1, 8232, '\p{Is_Category=zl}', "");
Expect(0, 8232, '\p{^Is_Category=zl}', "");
Expect(0, 8232, '\P{Is_Category=zl}', "");
Expect(1, 8232, '\P{^Is_Category=zl}', "");
Expect(0, 8231, '\p{Is_Category=zl}', "");
Expect(1, 8231, '\p{^Is_Category=zl}', "");
Expect(1, 8231, '\P{Is_Category=zl}', "");
Expect(0, 8231, '\P{^Is_Category=zl}', "");
Expect(1, 8232, '\p{Is_Category=	ZL}', "");
Expect(0, 8232, '\p{^Is_Category=	ZL}', "");
Expect(0, 8232, '\P{Is_Category=	ZL}', "");
Expect(1, 8232, '\P{^Is_Category=	ZL}', "");
Expect(0, 8231, '\p{Is_Category=	ZL}', "");
Expect(1, 8231, '\p{^Is_Category=	ZL}', "");
Expect(1, 8231, '\P{Is_Category=	ZL}', "");
Expect(0, 8231, '\P{^Is_Category=	ZL}', "");
Error('\p{General_Category:		open:=Punctuation}');
Error('\P{General_Category:		open:=Punctuation}');
Expect(1, 40, '\p{General_Category=openpunctuation}', "");
Expect(0, 40, '\p{^General_Category=openpunctuation}', "");
Expect(0, 40, '\P{General_Category=openpunctuation}', "");
Expect(1, 40, '\P{^General_Category=openpunctuation}', "");
Expect(0, 39, '\p{General_Category=openpunctuation}', "");
Expect(1, 39, '\p{^General_Category=openpunctuation}', "");
Expect(1, 39, '\P{General_Category=openpunctuation}', "");
Expect(0, 39, '\P{^General_Category=openpunctuation}', "");
Expect(1, 40, '\p{General_Category=_OPEN-Punctuation}', "");
Expect(0, 40, '\p{^General_Category=_OPEN-Punctuation}', "");
Expect(0, 40, '\P{General_Category=_OPEN-Punctuation}', "");
Expect(1, 40, '\P{^General_Category=_OPEN-Punctuation}', "");
Expect(0, 39, '\p{General_Category=_OPEN-Punctuation}', "");
Expect(1, 39, '\p{^General_Category=_OPEN-Punctuation}', "");
Expect(1, 39, '\P{General_Category=_OPEN-Punctuation}', "");
Expect(0, 39, '\P{^General_Category=_OPEN-Punctuation}', "");
Error('\p{Gc=:=_ Ps}');
Error('\P{Gc=:=_ Ps}');
Expect(1, 40, '\p{Gc=ps}', "");
Expect(0, 40, '\p{^Gc=ps}', "");
Expect(0, 40, '\P{Gc=ps}', "");
Expect(1, 40, '\P{^Gc=ps}', "");
Expect(0, 39, '\p{Gc=ps}', "");
Expect(1, 39, '\p{^Gc=ps}', "");
Expect(1, 39, '\P{Gc=ps}', "");
Expect(0, 39, '\P{^Gc=ps}', "");
Expect(1, 40, '\p{Gc=		Ps}', "");
Expect(0, 40, '\p{^Gc=		Ps}', "");
Expect(0, 40, '\P{Gc=		Ps}', "");
Expect(1, 40, '\P{^Gc=		Ps}', "");
Expect(0, 39, '\p{Gc=		Ps}', "");
Expect(1, 39, '\p{^Gc=		Ps}', "");
Expect(1, 39, '\P{Gc=		Ps}', "");
Expect(0, 39, '\P{^Gc=		Ps}', "");
Error('\p{Category=/a/-_OpenPunctuation}');
Error('\P{Category=/a/-_OpenPunctuation}');
Expect(1, 40, '\p{Category:openpunctuation}', "");
Expect(0, 40, '\p{^Category:openpunctuation}', "");
Expect(0, 40, '\P{Category:openpunctuation}', "");
Expect(1, 40, '\P{^Category:openpunctuation}', "");
Expect(0, 39, '\p{Category:openpunctuation}', "");
Expect(1, 39, '\p{^Category:openpunctuation}', "");
Expect(1, 39, '\P{Category:openpunctuation}', "");
Expect(0, 39, '\P{^Category:openpunctuation}', "");
Expect(1, 40, '\p{Category=_OPENPunctuation}', "");
Expect(0, 40, '\p{^Category=_OPENPunctuation}', "");
Expect(0, 40, '\P{Category=_OPENPunctuation}', "");
Expect(1, 40, '\P{^Category=_OPENPunctuation}', "");
Expect(0, 39, '\p{Category=_OPENPunctuation}', "");
Expect(1, 39, '\p{^Category=_OPENPunctuation}', "");
Expect(1, 39, '\P{Category=_OPENPunctuation}', "");
Expect(0, 39, '\P{^Category=_OPENPunctuation}', "");
Error('\p{Is_General_Category=ps/a/}');
Error('\P{Is_General_Category=ps/a/}');
Expect(1, 40, '\p{Is_General_Category=ps}', "");
Expect(0, 40, '\p{^Is_General_Category=ps}', "");
Expect(0, 40, '\P{Is_General_Category=ps}', "");
Expect(1, 40, '\P{^Is_General_Category=ps}', "");
Expect(0, 39, '\p{Is_General_Category=ps}', "");
Expect(1, 39, '\p{^Is_General_Category=ps}', "");
Expect(1, 39, '\P{Is_General_Category=ps}', "");
Expect(0, 39, '\P{^Is_General_Category=ps}', "");
Expect(1, 40, '\p{Is_General_Category=	-Ps}', "");
Expect(0, 40, '\p{^Is_General_Category=	-Ps}', "");
Expect(0, 40, '\P{Is_General_Category=	-Ps}', "");
Expect(1, 40, '\P{^Is_General_Category=	-Ps}', "");
Expect(0, 39, '\p{Is_General_Category=	-Ps}', "");
Expect(1, 39, '\p{^Is_General_Category=	-Ps}', "");
Expect(1, 39, '\P{Is_General_Category=	-Ps}', "");
Expect(0, 39, '\P{^Is_General_Category=	-Ps}', "");
Error('\p{Is_Gc=-	open:=Punctuation}');
Error('\P{Is_Gc=-	open:=Punctuation}');
Expect(1, 40, '\p{Is_Gc=openpunctuation}', "");
Expect(0, 40, '\p{^Is_Gc=openpunctuation}', "");
Expect(0, 40, '\P{Is_Gc=openpunctuation}', "");
Expect(1, 40, '\P{^Is_Gc=openpunctuation}', "");
Expect(0, 39, '\p{Is_Gc=openpunctuation}', "");
Expect(1, 39, '\p{^Is_Gc=openpunctuation}', "");
Expect(1, 39, '\P{Is_Gc=openpunctuation}', "");
Expect(0, 39, '\P{^Is_Gc=openpunctuation}', "");
Expect(1, 40, '\p{Is_Gc=Open_Punctuation}', "");
Expect(0, 40, '\p{^Is_Gc=Open_Punctuation}', "");
Expect(0, 40, '\P{Is_Gc=Open_Punctuation}', "");
Expect(1, 40, '\P{^Is_Gc=Open_Punctuation}', "");
Expect(0, 39, '\p{Is_Gc=Open_Punctuation}', "");
Expect(1, 39, '\p{^Is_Gc=Open_Punctuation}', "");
Expect(1, 39, '\P{Is_Gc=Open_Punctuation}', "");
Expect(0, 39, '\P{^Is_Gc=Open_Punctuation}', "");
Error('\p{Is_Category=/a/PS}');
Error('\P{Is_Category=/a/PS}');
Expect(1, 40, '\p{Is_Category=ps}', "");
Expect(0, 40, '\p{^Is_Category=ps}', "");
Expect(0, 40, '\P{Is_Category=ps}', "");
Expect(1, 40, '\P{^Is_Category=ps}', "");
Expect(0, 39, '\p{Is_Category=ps}', "");
Expect(1, 39, '\p{^Is_Category=ps}', "");
Expect(1, 39, '\P{Is_Category=ps}', "");
Expect(0, 39, '\P{^Is_Category=ps}', "");
Expect(1, 40, '\p{Is_Category=_Ps}', "");
Expect(0, 40, '\p{^Is_Category=_Ps}', "");
Expect(0, 40, '\P{Is_Category=_Ps}', "");
Expect(1, 40, '\P{^Is_Category=_Ps}', "");
Expect(0, 39, '\p{Is_Category=_Ps}', "");
Expect(1, 39, '\p{^Is_Category=_Ps}', "");
Expect(1, 39, '\P{Is_Category=_Ps}', "");
Expect(0, 39, '\P{^Is_Category=_Ps}', "");
Error('\p{General_Category=:=-_math	Symbol}');
Error('\P{General_Category=:=-_math	Symbol}');
Expect(1, 43, '\p{General_Category=mathsymbol}', "");
Expect(0, 43, '\p{^General_Category=mathsymbol}', "");
Expect(0, 43, '\P{General_Category=mathsymbol}', "");
Expect(1, 43, '\P{^General_Category=mathsymbol}', "");
Expect(0, 42, '\p{General_Category=mathsymbol}', "");
Expect(1, 42, '\p{^General_Category=mathsymbol}', "");
Expect(1, 42, '\P{General_Category=mathsymbol}', "");
Expect(0, 42, '\P{^General_Category=mathsymbol}', "");
Expect(1, 43, '\p{General_Category:	  Math	symbol}', "");
Expect(0, 43, '\p{^General_Category:	  Math	symbol}', "");
Expect(0, 43, '\P{General_Category:	  Math	symbol}', "");
Expect(1, 43, '\P{^General_Category:	  Math	symbol}', "");
Expect(0, 42, '\p{General_Category:	  Math	symbol}', "");
Expect(1, 42, '\p{^General_Category:	  Math	symbol}', "");
Expect(1, 42, '\P{General_Category:	  Math	symbol}', "");
Expect(0, 42, '\P{^General_Category:	  Math	symbol}', "");
Error('\p{Gc=-_Sm:=}');
Error('\P{Gc=-_Sm:=}');
Expect(1, 43, '\p{Gc=sm}', "");
Expect(0, 43, '\p{^Gc=sm}', "");
Expect(0, 43, '\P{Gc=sm}', "");
Expect(1, 43, '\P{^Gc=sm}', "");
Expect(0, 42, '\p{Gc=sm}', "");
Expect(1, 42, '\p{^Gc=sm}', "");
Expect(1, 42, '\P{Gc=sm}', "");
Expect(0, 42, '\P{^Gc=sm}', "");
Expect(1, 43, '\p{Gc=-Sm}', "");
Expect(0, 43, '\p{^Gc=-Sm}', "");
Expect(0, 43, '\P{Gc=-Sm}', "");
Expect(1, 43, '\P{^Gc=-Sm}', "");
Expect(0, 42, '\p{Gc=-Sm}', "");
Expect(1, 42, '\p{^Gc=-Sm}', "");
Expect(1, 42, '\P{Gc=-Sm}', "");
Expect(0, 42, '\P{^Gc=-Sm}', "");
Error('\p{Category: 	math:=SYMBOL}');
Error('\P{Category: 	math:=SYMBOL}');
Expect(1, 43, '\p{Category=mathsymbol}', "");
Expect(0, 43, '\p{^Category=mathsymbol}', "");
Expect(0, 43, '\P{Category=mathsymbol}', "");
Expect(1, 43, '\P{^Category=mathsymbol}', "");
Expect(0, 42, '\p{Category=mathsymbol}', "");
Expect(1, 42, '\p{^Category=mathsymbol}', "");
Expect(1, 42, '\P{Category=mathsymbol}', "");
Expect(0, 42, '\P{^Category=mathsymbol}', "");
Expect(1, 43, '\p{Category=	 math_Symbol}', "");
Expect(0, 43, '\p{^Category=	 math_Symbol}', "");
Expect(0, 43, '\P{Category=	 math_Symbol}', "");
Expect(1, 43, '\P{^Category=	 math_Symbol}', "");
Expect(0, 42, '\p{Category=	 math_Symbol}', "");
Expect(1, 42, '\p{^Category=	 math_Symbol}', "");
Expect(1, 42, '\P{Category=	 math_Symbol}', "");
Expect(0, 42, '\P{^Category=	 math_Symbol}', "");
Error('\p{Is_General_Category:-/a/sm}');
Error('\P{Is_General_Category:-/a/sm}');
Expect(1, 43, '\p{Is_General_Category=sm}', "");
Expect(0, 43, '\p{^Is_General_Category=sm}', "");
Expect(0, 43, '\P{Is_General_Category=sm}', "");
Expect(1, 43, '\P{^Is_General_Category=sm}', "");
Expect(0, 42, '\p{Is_General_Category=sm}', "");
Expect(1, 42, '\p{^Is_General_Category=sm}', "");
Expect(1, 42, '\P{Is_General_Category=sm}', "");
Expect(0, 42, '\P{^Is_General_Category=sm}', "");
Expect(1, 43, '\p{Is_General_Category=_SM}', "");
Expect(0, 43, '\p{^Is_General_Category=_SM}', "");
Expect(0, 43, '\P{Is_General_Category=_SM}', "");
Expect(1, 43, '\P{^Is_General_Category=_SM}', "");
Expect(0, 42, '\p{Is_General_Category=_SM}', "");
Expect(1, 42, '\p{^Is_General_Category=_SM}', "");
Expect(1, 42, '\P{Is_General_Category=_SM}', "");
Expect(0, 42, '\P{^Is_General_Category=_SM}', "");
Error('\p{Is_Gc=:=Math-symbol}');
Error('\P{Is_Gc=:=Math-symbol}');
Expect(1, 43, '\p{Is_Gc=mathsymbol}', "");
Expect(0, 43, '\p{^Is_Gc=mathsymbol}', "");
Expect(0, 43, '\P{Is_Gc=mathsymbol}', "");
Expect(1, 43, '\P{^Is_Gc=mathsymbol}', "");
Expect(0, 42, '\p{Is_Gc=mathsymbol}', "");
Expect(1, 42, '\p{^Is_Gc=mathsymbol}', "");
Expect(1, 42, '\P{Is_Gc=mathsymbol}', "");
Expect(0, 42, '\P{^Is_Gc=mathsymbol}', "");
Expect(1, 43, '\p{Is_Gc= MathSymbol}', "");
Expect(0, 43, '\p{^Is_Gc= MathSymbol}', "");
Expect(0, 43, '\P{Is_Gc= MathSymbol}', "");
Expect(1, 43, '\P{^Is_Gc= MathSymbol}', "");
Expect(0, 42, '\p{Is_Gc= MathSymbol}', "");
Expect(1, 42, '\p{^Is_Gc= MathSymbol}', "");
Expect(1, 42, '\P{Is_Gc= MathSymbol}', "");
Expect(0, 42, '\P{^Is_Gc= MathSymbol}', "");
Error('\p{Is_Category=Sm/a/}');
Error('\P{Is_Category=Sm/a/}');
Expect(1, 43, '\p{Is_Category=sm}', "");
Expect(0, 43, '\p{^Is_Category=sm}', "");
Expect(0, 43, '\P{Is_Category=sm}', "");
Expect(1, 43, '\P{^Is_Category=sm}', "");
Expect(0, 42, '\p{Is_Category=sm}', "");
Expect(1, 42, '\p{^Is_Category=sm}', "");
Expect(1, 42, '\P{Is_Category=sm}', "");
Expect(0, 42, '\P{^Is_Category=sm}', "");
Expect(1, 43, '\p{Is_Category=		Sm}', "");
Expect(0, 43, '\p{^Is_Category=		Sm}', "");
Expect(0, 43, '\P{Is_Category=		Sm}', "");
Expect(1, 43, '\P{^Is_Category=		Sm}', "");
Expect(0, 42, '\p{Is_Category=		Sm}', "");
Expect(1, 42, '\p{^Is_Category=		Sm}', "");
Expect(1, 42, '\P{Is_Category=		Sm}', "");
Expect(0, 42, '\P{^Is_Category=		Sm}', "");
Error('\p{General_Category=_:=other Letter}');
Error('\P{General_Category=_:=other Letter}');
Expect(1, 443, '\p{General_Category=otherletter}', "");
Expect(0, 443, '\p{^General_Category=otherletter}', "");
Expect(0, 443, '\P{General_Category=otherletter}', "");
Expect(1, 443, '\P{^General_Category=otherletter}', "");
Expect(0, 442, '\p{General_Category=otherletter}', "");
Expect(1, 442, '\p{^General_Category=otherletter}', "");
Expect(1, 442, '\P{General_Category=otherletter}', "");
Expect(0, 442, '\P{^General_Category=otherletter}', "");
Expect(1, 443, '\p{General_Category:_Other_letter}', "");
Expect(0, 443, '\p{^General_Category:_Other_letter}', "");
Expect(0, 443, '\P{General_Category:_Other_letter}', "");
Expect(1, 443, '\P{^General_Category:_Other_letter}', "");
Expect(0, 442, '\p{General_Category:_Other_letter}', "");
Expect(1, 442, '\p{^General_Category:_Other_letter}', "");
Expect(1, 442, '\P{General_Category:_Other_letter}', "");
Expect(0, 442, '\P{^General_Category:_Other_letter}', "");
Error('\p{Gc=_LO/a/}');
Error('\P{Gc=_LO/a/}');
Expect(1, 443, '\p{Gc=lo}', "");
Expect(0, 443, '\p{^Gc=lo}', "");
Expect(0, 443, '\P{Gc=lo}', "");
Expect(1, 443, '\P{^Gc=lo}', "");
Expect(0, 442, '\p{Gc=lo}', "");
Expect(1, 442, '\p{^Gc=lo}', "");
Expect(1, 442, '\P{Gc=lo}', "");
Expect(0, 442, '\P{^Gc=lo}', "");
Expect(1, 443, '\p{Gc:   --Lo}', "");
Expect(0, 443, '\p{^Gc:   --Lo}', "");
Expect(0, 443, '\P{Gc:   --Lo}', "");
Expect(1, 443, '\P{^Gc:   --Lo}', "");
Expect(0, 442, '\p{Gc:   --Lo}', "");
Expect(1, 442, '\p{^Gc:   --Lo}', "");
Expect(1, 442, '\P{Gc:   --Lo}', "");
Expect(0, 442, '\P{^Gc:   --Lo}', "");
Error('\p{Category=_:=Other-Letter}');
Error('\P{Category=_:=Other-Letter}');
Expect(1, 443, '\p{Category=otherletter}', "");
Expect(0, 443, '\p{^Category=otherletter}', "");
Expect(0, 443, '\P{Category=otherletter}', "");
Expect(1, 443, '\P{^Category=otherletter}', "");
Expect(0, 442, '\p{Category=otherletter}', "");
Expect(1, 442, '\p{^Category=otherletter}', "");
Expect(1, 442, '\P{Category=otherletter}', "");
Expect(0, 442, '\P{^Category=otherletter}', "");
Expect(1, 443, '\p{Category=__Other letter}', "");
Expect(0, 443, '\p{^Category=__Other letter}', "");
Expect(0, 443, '\P{Category=__Other letter}', "");
Expect(1, 443, '\P{^Category=__Other letter}', "");
Expect(0, 442, '\p{Category=__Other letter}', "");
Expect(1, 442, '\p{^Category=__Other letter}', "");
Expect(1, 442, '\P{Category=__Other letter}', "");
Expect(0, 442, '\P{^Category=__Other letter}', "");
Error('\p{Is_General_Category=	:=Lo}');
Error('\P{Is_General_Category=	:=Lo}');
Expect(1, 443, '\p{Is_General_Category: lo}', "");
Expect(0, 443, '\p{^Is_General_Category: lo}', "");
Expect(0, 443, '\P{Is_General_Category: lo}', "");
Expect(1, 443, '\P{^Is_General_Category: lo}', "");
Expect(0, 442, '\p{Is_General_Category: lo}', "");
Expect(1, 442, '\p{^Is_General_Category: lo}', "");
Expect(1, 442, '\P{Is_General_Category: lo}', "");
Expect(0, 442, '\P{^Is_General_Category: lo}', "");
Expect(1, 443, '\p{Is_General_Category:	Lo}', "");
Expect(0, 443, '\p{^Is_General_Category:	Lo}', "");
Expect(0, 443, '\P{Is_General_Category:	Lo}', "");
Expect(1, 443, '\P{^Is_General_Category:	Lo}', "");
Expect(0, 442, '\p{Is_General_Category:	Lo}', "");
Expect(1, 442, '\p{^Is_General_Category:	Lo}', "");
Expect(1, 442, '\P{Is_General_Category:	Lo}', "");
Expect(0, 442, '\P{^Is_General_Category:	Lo}', "");
Error('\p{Is_Gc=	:=other-LETTER}');
Error('\P{Is_Gc=	:=other-LETTER}');
Expect(1, 443, '\p{Is_Gc=otherletter}', "");
Expect(0, 443, '\p{^Is_Gc=otherletter}', "");
Expect(0, 443, '\P{Is_Gc=otherletter}', "");
Expect(1, 443, '\P{^Is_Gc=otherletter}', "");
Expect(0, 442, '\p{Is_Gc=otherletter}', "");
Expect(1, 442, '\p{^Is_Gc=otherletter}', "");
Expect(1, 442, '\P{Is_Gc=otherletter}', "");
Expect(0, 442, '\P{^Is_Gc=otherletter}', "");
Expect(1, 443, '\p{Is_Gc=- Other-letter}', "");
Expect(0, 443, '\p{^Is_Gc=- Other-letter}', "");
Expect(0, 443, '\P{Is_Gc=- Other-letter}', "");
Expect(1, 443, '\P{^Is_Gc=- Other-letter}', "");
Expect(0, 442, '\p{Is_Gc=- Other-letter}', "");
Expect(1, 442, '\p{^Is_Gc=- Other-letter}', "");
Expect(1, 442, '\P{Is_Gc=- Other-letter}', "");
Expect(0, 442, '\P{^Is_Gc=- Other-letter}', "");
Error('\p{Is_Category=:=- LO}');
Error('\P{Is_Category=:=- LO}');
Expect(1, 443, '\p{Is_Category=lo}', "");
Expect(0, 443, '\p{^Is_Category=lo}', "");
Expect(0, 443, '\P{Is_Category=lo}', "");
Expect(1, 443, '\P{^Is_Category=lo}', "");
Expect(0, 442, '\p{Is_Category=lo}', "");
Expect(1, 442, '\p{^Is_Category=lo}', "");
Expect(1, 442, '\P{Is_Category=lo}', "");
Expect(0, 442, '\P{^Is_Category=lo}', "");
Expect(1, 443, '\p{Is_Category=	_Lo}', "");
Expect(0, 443, '\p{^Is_Category=	_Lo}', "");
Expect(0, 443, '\P{Is_Category=	_Lo}', "");
Expect(1, 443, '\P{^Is_Category=	_Lo}', "");
Expect(0, 442, '\p{Is_Category=	_Lo}', "");
Expect(1, 442, '\p{^Is_Category=	_Lo}', "");
Expect(1, 442, '\P{Is_Category=	_Lo}', "");
Expect(0, 442, '\P{^Is_Category=	_Lo}', "");
Error('\p{General_Category=	 Separator:=}');
Error('\P{General_Category=	 Separator:=}');
Expect(1, 32, '\p{General_Category=separator}', "");
Expect(0, 32, '\p{^General_Category=separator}', "");
Expect(0, 32, '\P{General_Category=separator}', "");
Expect(1, 32, '\P{^General_Category=separator}', "");
Expect(0, 31, '\p{General_Category=separator}', "");
Expect(1, 31, '\p{^General_Category=separator}', "");
Expect(1, 31, '\P{General_Category=separator}', "");
Expect(0, 31, '\P{^General_Category=separator}', "");
Expect(1, 32, '\p{General_Category:SEPARATOR}', "");
Expect(0, 32, '\p{^General_Category:SEPARATOR}', "");
Expect(0, 32, '\P{General_Category:SEPARATOR}', "");
Expect(1, 32, '\P{^General_Category:SEPARATOR}', "");
Expect(0, 31, '\p{General_Category:SEPARATOR}', "");
Expect(1, 31, '\p{^General_Category:SEPARATOR}', "");
Expect(1, 31, '\P{General_Category:SEPARATOR}', "");
Expect(0, 31, '\P{^General_Category:SEPARATOR}', "");
Error('\p{Gc=:=Z}');
Error('\P{Gc=:=Z}');
Expect(1, 32, '\p{Gc=z}', "");
Expect(0, 32, '\p{^Gc=z}', "");
Expect(0, 32, '\P{Gc=z}', "");
Expect(1, 32, '\P{^Gc=z}', "");
Expect(0, 31, '\p{Gc=z}', "");
Expect(1, 31, '\p{^Gc=z}', "");
Expect(1, 31, '\P{Gc=z}', "");
Expect(0, 31, '\P{^Gc=z}', "");
Expect(1, 32, '\p{Gc=Z}', "");
Expect(0, 32, '\p{^Gc=Z}', "");
Expect(0, 32, '\P{Gc=Z}', "");
Expect(1, 32, '\P{^Gc=Z}', "");
Expect(0, 31, '\p{Gc=Z}', "");
Expect(1, 31, '\p{^Gc=Z}', "");
Expect(1, 31, '\P{Gc=Z}', "");
Expect(0, 31, '\P{^Gc=Z}', "");
Error('\p{Category:	separator:=}');
Error('\P{Category:	separator:=}');
Expect(1, 32, '\p{Category: separator}', "");
Expect(0, 32, '\p{^Category: separator}', "");
Expect(0, 32, '\P{Category: separator}', "");
Expect(1, 32, '\P{^Category: separator}', "");
Expect(0, 31, '\p{Category: separator}', "");
Expect(1, 31, '\p{^Category: separator}', "");
Expect(1, 31, '\P{Category: separator}', "");
Expect(0, 31, '\P{^Category: separator}', "");
Expect(1, 32, '\p{Category:   _Separator}', "");
Expect(0, 32, '\p{^Category:   _Separator}', "");
Expect(0, 32, '\P{Category:   _Separator}', "");
Expect(1, 32, '\P{^Category:   _Separator}', "");
Expect(0, 31, '\p{Category:   _Separator}', "");
Expect(1, 31, '\p{^Category:   _Separator}', "");
Expect(1, 31, '\P{Category:   _Separator}', "");
Expect(0, 31, '\P{^Category:   _Separator}', "");
Error('\p{Is_General_Category=/a/	z}');
Error('\P{Is_General_Category=/a/	z}');
Expect(1, 32, '\p{Is_General_Category=z}', "");
Expect(0, 32, '\p{^Is_General_Category=z}', "");
Expect(0, 32, '\P{Is_General_Category=z}', "");
Expect(1, 32, '\P{^Is_General_Category=z}', "");
Expect(0, 31, '\p{Is_General_Category=z}', "");
Expect(1, 31, '\p{^Is_General_Category=z}', "");
Expect(1, 31, '\P{Is_General_Category=z}', "");
Expect(0, 31, '\P{^Is_General_Category=z}', "");
Expect(1, 32, '\p{Is_General_Category=		Z}', "");
Expect(0, 32, '\p{^Is_General_Category=		Z}', "");
Expect(0, 32, '\P{Is_General_Category=		Z}', "");
Expect(1, 32, '\P{^Is_General_Category=		Z}', "");
Expect(0, 31, '\p{Is_General_Category=		Z}', "");
Expect(1, 31, '\p{^Is_General_Category=		Z}', "");
Expect(1, 31, '\P{Is_General_Category=		Z}', "");
Expect(0, 31, '\P{^Is_General_Category=		Z}', "");
Error('\p{Is_Gc=:=  separator}');
Error('\P{Is_Gc=:=  separator}');
Expect(1, 32, '\p{Is_Gc=separator}', "");
Expect(0, 32, '\p{^Is_Gc=separator}', "");
Expect(0, 32, '\P{Is_Gc=separator}', "");
Expect(1, 32, '\P{^Is_Gc=separator}', "");
Expect(0, 31, '\p{Is_Gc=separator}', "");
Expect(1, 31, '\p{^Is_Gc=separator}', "");
Expect(1, 31, '\P{Is_Gc=separator}', "");
Expect(0, 31, '\P{^Is_Gc=separator}', "");
Expect(1, 32, '\p{Is_Gc:_	SEPARATOR}', "");
Expect(0, 32, '\p{^Is_Gc:_	SEPARATOR}', "");
Expect(0, 32, '\P{Is_Gc:_	SEPARATOR}', "");
Expect(1, 32, '\P{^Is_Gc:_	SEPARATOR}', "");
Expect(0, 31, '\p{Is_Gc:_	SEPARATOR}', "");
Expect(1, 31, '\p{^Is_Gc:_	SEPARATOR}', "");
Expect(1, 31, '\P{Is_Gc:_	SEPARATOR}', "");
Expect(0, 31, '\P{^Is_Gc:_	SEPARATOR}', "");
Error('\p{Is_Category=-Z:=}');
Error('\P{Is_Category=-Z:=}');
Expect(1, 32, '\p{Is_Category=z}', "");
Expect(0, 32, '\p{^Is_Category=z}', "");
Expect(0, 32, '\P{Is_Category=z}', "");
Expect(1, 32, '\P{^Is_Category=z}', "");
Expect(0, 31, '\p{Is_Category=z}', "");
Expect(1, 31, '\p{^Is_Category=z}', "");
Expect(1, 31, '\P{Is_Category=z}', "");
Expect(0, 31, '\P{^Is_Category=z}', "");
Expect(1, 32, '\p{Is_Category=	 z}', "");
Expect(0, 32, '\p{^Is_Category=	 z}', "");
Expect(0, 32, '\P{Is_Category=	 z}', "");
Expect(1, 32, '\P{^Is_Category=	 z}', "");
Expect(0, 31, '\p{Is_Category=	 z}', "");
Expect(1, 31, '\p{^Is_Category=	 z}', "");
Expect(1, 31, '\P{Is_Category=	 z}', "");
Expect(0, 31, '\P{^Is_Category=	 z}', "");
Error('\p{General_Category=:=-_other-Punctuation}');
Error('\P{General_Category=:=-_other-Punctuation}');
Expect(1, 35, '\p{General_Category=otherpunctuation}', "");
Expect(0, 35, '\p{^General_Category=otherpunctuation}', "");
Expect(0, 35, '\P{General_Category=otherpunctuation}', "");
Expect(1, 35, '\P{^General_Category=otherpunctuation}', "");
Expect(0, 32, '\p{General_Category=otherpunctuation}', "");
Expect(1, 32, '\p{^General_Category=otherpunctuation}', "");
Expect(1, 32, '\P{General_Category=otherpunctuation}', "");
Expect(0, 32, '\P{^General_Category=otherpunctuation}', "");
Expect(1, 35, '\p{General_Category=	other_punctuation}', "");
Expect(0, 35, '\p{^General_Category=	other_punctuation}', "");
Expect(0, 35, '\P{General_Category=	other_punctuation}', "");
Expect(1, 35, '\P{^General_Category=	other_punctuation}', "");
Expect(0, 32, '\p{General_Category=	other_punctuation}', "");
Expect(1, 32, '\p{^General_Category=	other_punctuation}', "");
Expect(1, 32, '\P{General_Category=	other_punctuation}', "");
Expect(0, 32, '\P{^General_Category=	other_punctuation}', "");
Error('\p{Gc=_ PO:=}');
Error('\P{Gc=_ PO:=}');
Expect(1, 35, '\p{Gc=po}', "");
Expect(0, 35, '\p{^Gc=po}', "");
Expect(0, 35, '\P{Gc=po}', "");
Expect(1, 35, '\P{^Gc=po}', "");
Expect(0, 32, '\p{Gc=po}', "");
Expect(1, 32, '\p{^Gc=po}', "");
Expect(1, 32, '\P{Gc=po}', "");
Expect(0, 32, '\P{^Gc=po}', "");
Expect(1, 35, '\p{Gc=_ po}', "");
Expect(0, 35, '\p{^Gc=_ po}', "");
Expect(0, 35, '\P{Gc=_ po}', "");
Expect(1, 35, '\P{^Gc=_ po}', "");
Expect(0, 32, '\p{Gc=_ po}', "");
Expect(1, 32, '\p{^Gc=_ po}', "");
Expect(1, 32, '\P{Gc=_ po}', "");
Expect(0, 32, '\P{^Gc=_ po}', "");
Error('\p{Category=-:=OTHER	punctuation}');
Error('\P{Category=-:=OTHER	punctuation}');
Expect(1, 35, '\p{Category=otherpunctuation}', "");
Expect(0, 35, '\p{^Category=otherpunctuation}', "");
Expect(0, 35, '\P{Category=otherpunctuation}', "");
Expect(1, 35, '\P{^Category=otherpunctuation}', "");
Expect(0, 32, '\p{Category=otherpunctuation}', "");
Expect(1, 32, '\p{^Category=otherpunctuation}', "");
Expect(1, 32, '\P{Category=otherpunctuation}', "");
Expect(0, 32, '\P{^Category=otherpunctuation}', "");
Expect(1, 35, '\p{Category= -Other-Punctuation}', "");
Expect(0, 35, '\p{^Category= -Other-Punctuation}', "");
Expect(0, 35, '\P{Category= -Other-Punctuation}', "");
Expect(1, 35, '\P{^Category= -Other-Punctuation}', "");
Expect(0, 32, '\p{Category= -Other-Punctuation}', "");
Expect(1, 32, '\p{^Category= -Other-Punctuation}', "");
Expect(1, 32, '\P{Category= -Other-Punctuation}', "");
Expect(0, 32, '\P{^Category= -Other-Punctuation}', "");
Error('\p{Is_General_Category=	:=po}');
Error('\P{Is_General_Category=	:=po}');
Expect(1, 35, '\p{Is_General_Category=po}', "");
Expect(0, 35, '\p{^Is_General_Category=po}', "");
Expect(0, 35, '\P{Is_General_Category=po}', "");
Expect(1, 35, '\P{^Is_General_Category=po}', "");
Expect(0, 32, '\p{Is_General_Category=po}', "");
Expect(1, 32, '\p{^Is_General_Category=po}', "");
Expect(1, 32, '\P{Is_General_Category=po}', "");
Expect(0, 32, '\P{^Is_General_Category=po}', "");
Expect(1, 35, '\p{Is_General_Category:		po}', "");
Expect(0, 35, '\p{^Is_General_Category:		po}', "");
Expect(0, 35, '\P{Is_General_Category:		po}', "");
Expect(1, 35, '\P{^Is_General_Category:		po}', "");
Expect(0, 32, '\p{Is_General_Category:		po}', "");
Expect(1, 32, '\p{^Is_General_Category:		po}', "");
Expect(1, 32, '\P{Is_General_Category:		po}', "");
Expect(0, 32, '\P{^Is_General_Category:		po}', "");
Error('\p{Is_Gc=other_PUNCTUATION:=}');
Error('\P{Is_Gc=other_PUNCTUATION:=}');
Expect(1, 35, '\p{Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\p{^Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\P{Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\P{^Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\p{Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\p{^Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\P{Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\P{^Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\p{Is_Gc: 	OTHER_punctuation}', "");
Expect(0, 35, '\p{^Is_Gc: 	OTHER_punctuation}', "");
Expect(0, 35, '\P{Is_Gc: 	OTHER_punctuation}', "");
Expect(1, 35, '\P{^Is_Gc: 	OTHER_punctuation}', "");
Expect(0, 32, '\p{Is_Gc: 	OTHER_punctuation}', "");
Expect(1, 32, '\p{^Is_Gc: 	OTHER_punctuation}', "");
Expect(1, 32, '\P{Is_Gc: 	OTHER_punctuation}', "");
Expect(0, 32, '\P{^Is_Gc: 	OTHER_punctuation}', "");
Error('\p{Is_Category= 	PO:=}');
Error('\P{Is_Category= 	PO:=}');
Expect(1, 35, '\p{Is_Category:   po}', "");
Expect(0, 35, '\p{^Is_Category:   po}', "");
Expect(0, 35, '\P{Is_Category:   po}', "");
Expect(1, 35, '\P{^Is_Category:   po}', "");
Expect(0, 32, '\p{Is_Category:   po}', "");
Expect(1, 32, '\p{^Is_Category:   po}', "");
Expect(1, 32, '\P{Is_Category:   po}', "");
Expect(0, 32, '\P{^Is_Category:   po}', "");
Expect(1, 35, '\p{Is_Category=	Po}', "");
Expect(0, 35, '\p{^Is_Category=	Po}', "");
Expect(0, 35, '\P{Is_Category=	Po}', "");
Expect(1, 35, '\P{^Is_Category=	Po}', "");
Expect(0, 32, '\p{Is_Category=	Po}', "");
Expect(1, 32, '\p{^Is_Category=	Po}', "");
Expect(1, 32, '\P{Is_Category=	Po}', "");
Expect(0, 32, '\P{^Is_Category=	Po}', "");
Error('\p{General_Category=	 SPACE Separator:=}');
Error('\P{General_Category=	 SPACE Separator:=}');
Expect(1, 32, '\p{General_Category=spaceseparator}', "");
Expect(0, 32, '\p{^General_Category=spaceseparator}', "");
Expect(0, 32, '\P{General_Category=spaceseparator}', "");
Expect(1, 32, '\P{^General_Category=spaceseparator}', "");
Expect(0, 31, '\p{General_Category=spaceseparator}', "");
Expect(1, 31, '\p{^General_Category=spaceseparator}', "");
Expect(1, 31, '\P{General_Category=spaceseparator}', "");
Expect(0, 31, '\P{^General_Category=spaceseparator}', "");
Expect(1, 32, '\p{General_Category: -	SPACE	separator}', "");
Expect(0, 32, '\p{^General_Category: -	SPACE	separator}', "");
Expect(0, 32, '\P{General_Category: -	SPACE	separator}', "");
Expect(1, 32, '\P{^General_Category: -	SPACE	separator}', "");
Expect(0, 31, '\p{General_Category: -	SPACE	separator}', "");
Expect(1, 31, '\p{^General_Category: -	SPACE	separator}', "");
Expect(1, 31, '\P{General_Category: -	SPACE	separator}', "");
Expect(0, 31, '\P{^General_Category: -	SPACE	separator}', "");
Error('\p{Gc=  Zs/a/}');
Error('\P{Gc=  Zs/a/}');
Expect(1, 32, '\p{Gc=zs}', "");
Expect(0, 32, '\p{^Gc=zs}', "");
Expect(0, 32, '\P{Gc=zs}', "");
Expect(1, 32, '\P{^Gc=zs}', "");
Expect(0, 31, '\p{Gc=zs}', "");
Expect(1, 31, '\p{^Gc=zs}', "");
Expect(1, 31, '\P{Gc=zs}', "");
Expect(0, 31, '\P{^Gc=zs}', "");
Expect(1, 32, '\p{Gc= -Zs}', "");
Expect(0, 32, '\p{^Gc= -Zs}', "");
Expect(0, 32, '\P{Gc= -Zs}', "");
Expect(1, 32, '\P{^Gc= -Zs}', "");
Expect(0, 31, '\p{Gc= -Zs}', "");
Expect(1, 31, '\p{^Gc= -Zs}', "");
Expect(1, 31, '\P{Gc= -Zs}', "");
Expect(0, 31, '\P{^Gc= -Zs}', "");
Error('\p{Category: /a/ _space_Separator}');
Error('\P{Category: /a/ _space_Separator}');
Expect(1, 32, '\p{Category=spaceseparator}', "");
Expect(0, 32, '\p{^Category=spaceseparator}', "");
Expect(0, 32, '\P{Category=spaceseparator}', "");
Expect(1, 32, '\P{^Category=spaceseparator}', "");
Expect(0, 31, '\p{Category=spaceseparator}', "");
Expect(1, 31, '\p{^Category=spaceseparator}', "");
Expect(1, 31, '\P{Category=spaceseparator}', "");
Expect(0, 31, '\P{^Category=spaceseparator}', "");
Expect(1, 32, '\p{Category= Space_Separator}', "");
Expect(0, 32, '\p{^Category= Space_Separator}', "");
Expect(0, 32, '\P{Category= Space_Separator}', "");
Expect(1, 32, '\P{^Category= Space_Separator}', "");
Expect(0, 31, '\p{Category= Space_Separator}', "");
Expect(1, 31, '\p{^Category= Space_Separator}', "");
Expect(1, 31, '\P{Category= Space_Separator}', "");
Expect(0, 31, '\P{^Category= Space_Separator}', "");
Error('\p{Is_General_Category=/a/ZS}');
Error('\P{Is_General_Category=/a/ZS}');
Expect(1, 32, '\p{Is_General_Category=zs}', "");
Expect(0, 32, '\p{^Is_General_Category=zs}', "");
Expect(0, 32, '\P{Is_General_Category=zs}', "");
Expect(1, 32, '\P{^Is_General_Category=zs}', "");
Expect(0, 31, '\p{Is_General_Category=zs}', "");
Expect(1, 31, '\p{^Is_General_Category=zs}', "");
Expect(1, 31, '\P{Is_General_Category=zs}', "");
Expect(0, 31, '\P{^Is_General_Category=zs}', "");
Expect(1, 32, '\p{Is_General_Category= Zs}', "");
Expect(0, 32, '\p{^Is_General_Category= Zs}', "");
Expect(0, 32, '\P{Is_General_Category= Zs}', "");
Expect(1, 32, '\P{^Is_General_Category= Zs}', "");
Expect(0, 31, '\p{Is_General_Category= Zs}', "");
Expect(1, 31, '\p{^Is_General_Category= Zs}', "");
Expect(1, 31, '\P{Is_General_Category= Zs}', "");
Expect(0, 31, '\P{^Is_General_Category= Zs}', "");
Error('\p{Is_Gc=/a/	Space Separator}');
Error('\P{Is_Gc=/a/	Space Separator}');
Expect(1, 32, '\p{Is_Gc=spaceseparator}', "");
Expect(0, 32, '\p{^Is_Gc=spaceseparator}', "");
Expect(0, 32, '\P{Is_Gc=spaceseparator}', "");
Expect(1, 32, '\P{^Is_Gc=spaceseparator}', "");
Expect(0, 31, '\p{Is_Gc=spaceseparator}', "");
Expect(1, 31, '\p{^Is_Gc=spaceseparator}', "");
Expect(1, 31, '\P{Is_Gc=spaceseparator}', "");
Expect(0, 31, '\P{^Is_Gc=spaceseparator}', "");
Expect(1, 32, '\p{Is_Gc: 		SpaceSeparator}', "");
Expect(0, 32, '\p{^Is_Gc: 		SpaceSeparator}', "");
Expect(0, 32, '\P{Is_Gc: 		SpaceSeparator}', "");
Expect(1, 32, '\P{^Is_Gc: 		SpaceSeparator}', "");
Expect(0, 31, '\p{Is_Gc: 		SpaceSeparator}', "");
Expect(1, 31, '\p{^Is_Gc: 		SpaceSeparator}', "");
Expect(1, 31, '\P{Is_Gc: 		SpaceSeparator}', "");
Expect(0, 31, '\P{^Is_Gc: 		SpaceSeparator}', "");
Error('\p{Is_Category=	/a/ZS}');
Error('\P{Is_Category=	/a/ZS}');
Expect(1, 32, '\p{Is_Category=zs}', "");
Expect(0, 32, '\p{^Is_Category=zs}', "");
Expect(0, 32, '\P{Is_Category=zs}', "");
Expect(1, 32, '\P{^Is_Category=zs}', "");
Expect(0, 31, '\p{Is_Category=zs}', "");
Expect(1, 31, '\p{^Is_Category=zs}', "");
Expect(1, 31, '\P{Is_Category=zs}', "");
Expect(0, 31, '\P{^Is_Category=zs}', "");
Expect(1, 32, '\p{Is_Category:	-ZS}', "");
Expect(0, 32, '\p{^Is_Category:	-ZS}', "");
Expect(0, 32, '\P{Is_Category:	-ZS}', "");
Expect(1, 32, '\P{^Is_Category:	-ZS}', "");
Expect(0, 31, '\p{Is_Category:	-ZS}', "");
Expect(1, 31, '\p{^Is_Category:	-ZS}', "");
Expect(1, 31, '\P{Is_Category:	-ZS}', "");
Expect(0, 31, '\P{^Is_Category:	-ZS}', "");
Error('\p{General_Category:	 Other/a/NUMBER}');
Error('\P{General_Category:	 Other/a/NUMBER}');
Expect(1, 179, '\p{General_Category=othernumber}', "");
Expect(0, 179, '\p{^General_Category=othernumber}', "");
Expect(0, 179, '\P{General_Category=othernumber}', "");
Expect(1, 179, '\P{^General_Category=othernumber}', "");
Expect(0, 177, '\p{General_Category=othernumber}', "");
Expect(1, 177, '\p{^General_Category=othernumber}', "");
Expect(1, 177, '\P{General_Category=othernumber}', "");
Expect(0, 177, '\P{^General_Category=othernumber}', "");
Expect(1, 179, '\p{General_Category= 	Other_Number}', "");
Expect(0, 179, '\p{^General_Category= 	Other_Number}', "");
Expect(0, 179, '\P{General_Category= 	Other_Number}', "");
Expect(1, 179, '\P{^General_Category= 	Other_Number}', "");
Expect(0, 177, '\p{General_Category= 	Other_Number}', "");
Expect(1, 177, '\p{^General_Category= 	Other_Number}', "");
Expect(1, 177, '\P{General_Category= 	Other_Number}', "");
Expect(0, 177, '\P{^General_Category= 	Other_Number}', "");
Error('\p{Gc=_:=NO}');
Error('\P{Gc=_:=NO}');
Expect(1, 179, '\p{Gc:	no}', "");
Expect(0, 179, '\p{^Gc:	no}', "");
Expect(0, 179, '\P{Gc:	no}', "");
Expect(1, 179, '\P{^Gc:	no}', "");
Expect(0, 177, '\p{Gc:	no}', "");
Expect(1, 177, '\p{^Gc:	no}', "");
Expect(1, 177, '\P{Gc:	no}', "");
Expect(0, 177, '\P{^Gc:	no}', "");
Expect(1, 179, '\p{Gc=		NO}', "");
Expect(0, 179, '\p{^Gc=		NO}', "");
Expect(0, 179, '\P{Gc=		NO}', "");
Expect(1, 179, '\P{^Gc=		NO}', "");
Expect(0, 177, '\p{Gc=		NO}', "");
Expect(1, 177, '\p{^Gc=		NO}', "");
Expect(1, 177, '\P{Gc=		NO}', "");
Expect(0, 177, '\P{^Gc=		NO}', "");
Error('\p{Category=_-OTHER	Number:=}');
Error('\P{Category=_-OTHER	Number:=}');
Expect(1, 179, '\p{Category=othernumber}', "");
Expect(0, 179, '\p{^Category=othernumber}', "");
Expect(0, 179, '\P{Category=othernumber}', "");
Expect(1, 179, '\P{^Category=othernumber}', "");
Expect(0, 177, '\p{Category=othernumber}', "");
Expect(1, 177, '\p{^Category=othernumber}', "");
Expect(1, 177, '\P{Category=othernumber}', "");
Expect(0, 177, '\P{^Category=othernumber}', "");
Expect(1, 179, '\p{Category=		OTHER	NUMBER}', "");
Expect(0, 179, '\p{^Category=		OTHER	NUMBER}', "");
Expect(0, 179, '\P{Category=		OTHER	NUMBER}', "");
Expect(1, 179, '\P{^Category=		OTHER	NUMBER}', "");
Expect(0, 177, '\p{Category=		OTHER	NUMBER}', "");
Expect(1, 177, '\p{^Category=		OTHER	NUMBER}', "");
Expect(1, 177, '\P{Category=		OTHER	NUMBER}', "");
Expect(0, 177, '\P{^Category=		OTHER	NUMBER}', "");
Error('\p{Is_General_Category=__No:=}');
Error('\P{Is_General_Category=__No:=}');
Expect(1, 179, '\p{Is_General_Category=no}', "");
Expect(0, 179, '\p{^Is_General_Category=no}', "");
Expect(0, 179, '\P{Is_General_Category=no}', "");
Expect(1, 179, '\P{^Is_General_Category=no}', "");
Expect(0, 177, '\p{Is_General_Category=no}', "");
Expect(1, 177, '\p{^Is_General_Category=no}', "");
Expect(1, 177, '\P{Is_General_Category=no}', "");
Expect(0, 177, '\P{^Is_General_Category=no}', "");
Expect(1, 179, '\p{Is_General_Category= No}', "");
Expect(0, 179, '\p{^Is_General_Category= No}', "");
Expect(0, 179, '\P{Is_General_Category= No}', "");
Expect(1, 179, '\P{^Is_General_Category= No}', "");
Expect(0, 177, '\p{Is_General_Category= No}', "");
Expect(1, 177, '\p{^Is_General_Category= No}', "");
Expect(1, 177, '\P{Is_General_Category= No}', "");
Expect(0, 177, '\P{^Is_General_Category= No}', "");
Error('\p{Is_Gc=-	Other/a/Number}');
Error('\P{Is_Gc=-	Other/a/Number}');
Expect(1, 179, '\p{Is_Gc=othernumber}', "");
Expect(0, 179, '\p{^Is_Gc=othernumber}', "");
Expect(0, 179, '\P{Is_Gc=othernumber}', "");
Expect(1, 179, '\P{^Is_Gc=othernumber}', "");
Expect(0, 177, '\p{Is_Gc=othernumber}', "");
Expect(1, 177, '\p{^Is_Gc=othernumber}', "");
Expect(1, 177, '\P{Is_Gc=othernumber}', "");
Expect(0, 177, '\P{^Is_Gc=othernumber}', "");
Expect(1, 179, '\p{Is_Gc:	Other_number}', "");
Expect(0, 179, '\p{^Is_Gc:	Other_number}', "");
Expect(0, 179, '\P{Is_Gc:	Other_number}', "");
Expect(1, 179, '\P{^Is_Gc:	Other_number}', "");
Expect(0, 177, '\p{Is_Gc:	Other_number}', "");
Expect(1, 177, '\p{^Is_Gc:	Other_number}', "");
Expect(1, 177, '\P{Is_Gc:	Other_number}', "");
Expect(0, 177, '\P{^Is_Gc:	Other_number}', "");
Error('\p{Is_Category=:=	-No}');
Error('\P{Is_Category=:=	-No}');
Expect(1, 179, '\p{Is_Category=no}', "");
Expect(0, 179, '\p{^Is_Category=no}', "");
Expect(0, 179, '\P{Is_Category=no}', "");
Expect(1, 179, '\P{^Is_Category=no}', "");
Expect(0, 177, '\p{Is_Category=no}', "");
Expect(1, 177, '\p{^Is_Category=no}', "");
Expect(1, 177, '\P{Is_Category=no}', "");
Expect(0, 177, '\P{^Is_Category=no}', "");
Expect(1, 179, '\p{Is_Category=-	No}', "");
Expect(0, 179, '\p{^Is_Category=-	No}', "");
Expect(0, 179, '\P{Is_Category=-	No}', "");
Expect(1, 179, '\P{^Is_Category=-	No}', "");
Expect(0, 177, '\p{Is_Category=-	No}', "");
Expect(1, 177, '\p{^Is_Category=-	No}', "");
Expect(1, 177, '\P{Is_Category=-	No}', "");
Expect(0, 177, '\P{^Is_Category=-	No}', "");
Error('\p{General_Category= -mark/a/}');
Error('\P{General_Category= -mark/a/}');
Expect(1, 879, '\p{General_Category=mark}', "");
Expect(0, 879, '\p{^General_Category=mark}', "");
Expect(0, 879, '\P{General_Category=mark}', "");
Expect(1, 879, '\P{^General_Category=mark}', "");
Expect(0, 767, '\p{General_Category=mark}', "");
Expect(1, 767, '\p{^General_Category=mark}', "");
Expect(1, 767, '\P{General_Category=mark}', "");
Expect(0, 767, '\P{^General_Category=mark}', "");
Expect(1, 879, '\p{General_Category=_Mark}', "");
Expect(0, 879, '\p{^General_Category=_Mark}', "");
Expect(0, 879, '\P{General_Category=_Mark}', "");
Expect(1, 879, '\P{^General_Category=_Mark}', "");
Expect(0, 767, '\p{General_Category=_Mark}', "");
Expect(1, 767, '\p{^General_Category=_Mark}', "");
Expect(1, 767, '\P{General_Category=_Mark}', "");
Expect(0, 767, '\P{^General_Category=_Mark}', "");
Error('\p{Gc=--M/a/}');
Error('\P{Gc=--M/a/}');
Expect(1, 879, '\p{Gc=m}', "");
Expect(0, 879, '\p{^Gc=m}', "");
Expect(0, 879, '\P{Gc=m}', "");
Expect(1, 879, '\P{^Gc=m}', "");
Expect(0, 767, '\p{Gc=m}', "");
Expect(1, 767, '\p{^Gc=m}', "");
Expect(1, 767, '\P{Gc=m}', "");
Expect(0, 767, '\P{^Gc=m}', "");
Expect(1, 879, '\p{Gc= M}', "");
Expect(0, 879, '\p{^Gc= M}', "");
Expect(0, 879, '\P{Gc= M}', "");
Expect(1, 879, '\P{^Gc= M}', "");
Expect(0, 767, '\p{Gc= M}', "");
Expect(1, 767, '\p{^Gc= M}', "");
Expect(1, 767, '\P{Gc= M}', "");
Expect(0, 767, '\P{^Gc= M}', "");
Error('\p{Category=/a/Mark}');
Error('\P{Category=/a/Mark}');
Expect(1, 879, '\p{Category=mark}', "");
Expect(0, 879, '\p{^Category=mark}', "");
Expect(0, 879, '\P{Category=mark}', "");
Expect(1, 879, '\P{^Category=mark}', "");
Expect(0, 767, '\p{Category=mark}', "");
Expect(1, 767, '\p{^Category=mark}', "");
Expect(1, 767, '\P{Category=mark}', "");
Expect(0, 767, '\P{^Category=mark}', "");
Expect(1, 879, '\p{Category:  Mark}', "");
Expect(0, 879, '\p{^Category:  Mark}', "");
Expect(0, 879, '\P{Category:  Mark}', "");
Expect(1, 879, '\P{^Category:  Mark}', "");
Expect(0, 767, '\p{Category:  Mark}', "");
Expect(1, 767, '\p{^Category:  Mark}', "");
Expect(1, 767, '\P{Category:  Mark}', "");
Expect(0, 767, '\P{^Category:  Mark}', "");
Error('\p{Is_General_Category:   /a/	_M}');
Error('\P{Is_General_Category:   /a/	_M}');
Expect(1, 879, '\p{Is_General_Category=m}', "");
Expect(0, 879, '\p{^Is_General_Category=m}', "");
Expect(0, 879, '\P{Is_General_Category=m}', "");
Expect(1, 879, '\P{^Is_General_Category=m}', "");
Expect(0, 767, '\p{Is_General_Category=m}', "");
Expect(1, 767, '\p{^Is_General_Category=m}', "");
Expect(1, 767, '\P{Is_General_Category=m}', "");
Expect(0, 767, '\P{^Is_General_Category=m}', "");
Expect(1, 879, '\p{Is_General_Category= _M}', "");
Expect(0, 879, '\p{^Is_General_Category= _M}', "");
Expect(0, 879, '\P{Is_General_Category= _M}', "");
Expect(1, 879, '\P{^Is_General_Category= _M}', "");
Expect(0, 767, '\p{Is_General_Category= _M}', "");
Expect(1, 767, '\p{^Is_General_Category= _M}', "");
Expect(1, 767, '\P{Is_General_Category= _M}', "");
Expect(0, 767, '\P{^Is_General_Category= _M}', "");
Error('\p{Is_Gc=_/a/Mark}');
Error('\P{Is_Gc=_/a/Mark}');
Expect(1, 879, '\p{Is_Gc=mark}', "");
Expect(0, 879, '\p{^Is_Gc=mark}', "");
Expect(0, 879, '\P{Is_Gc=mark}', "");
Expect(1, 879, '\P{^Is_Gc=mark}', "");
Expect(0, 767, '\p{Is_Gc=mark}', "");
Expect(1, 767, '\p{^Is_Gc=mark}', "");
Expect(1, 767, '\P{Is_Gc=mark}', "");
Expect(0, 767, '\P{^Is_Gc=mark}', "");
Expect(1, 879, '\p{Is_Gc=_-Mark}', "");
Expect(0, 879, '\p{^Is_Gc=_-Mark}', "");
Expect(0, 879, '\P{Is_Gc=_-Mark}', "");
Expect(1, 879, '\P{^Is_Gc=_-Mark}', "");
Expect(0, 767, '\p{Is_Gc=_-Mark}', "");
Expect(1, 767, '\p{^Is_Gc=_-Mark}', "");
Expect(1, 767, '\P{Is_Gc=_-Mark}', "");
Expect(0, 767, '\P{^Is_Gc=_-Mark}', "");
Error('\p{Is_Category=	:=m}');
Error('\P{Is_Category=	:=m}');
Expect(1, 879, '\p{Is_Category=m}', "");
Expect(0, 879, '\p{^Is_Category=m}', "");
Expect(0, 879, '\P{Is_Category=m}', "");
Expect(1, 879, '\P{^Is_Category=m}', "");
Expect(0, 767, '\p{Is_Category=m}', "");
Expect(1, 767, '\p{^Is_Category=m}', "");
Expect(1, 767, '\P{Is_Category=m}', "");
Expect(0, 767, '\P{^Is_Category=m}', "");
Expect(1, 879, '\p{Is_Category= M}', "");
Expect(0, 879, '\p{^Is_Category= M}', "");
Expect(0, 879, '\P{Is_Category= M}', "");
Expect(1, 879, '\P{^Is_Category= M}', "");
Expect(0, 767, '\p{Is_Category= M}', "");
Expect(1, 767, '\p{^Is_Category= M}', "");
Expect(1, 767, '\P{Is_Category= M}', "");
Expect(0, 767, '\P{^Is_Category= M}', "");
Error('\p{General_Category=_	Other/a/}');
Error('\P{General_Category=_	Other/a/}');
Expect(1, 31, '\p{General_Category=other}', "");
Expect(0, 31, '\p{^General_Category=other}', "");
Expect(0, 31, '\P{General_Category=other}', "");
Expect(1, 31, '\P{^General_Category=other}', "");
Expect(0, 126, '\p{General_Category=other}', "");
Expect(1, 126, '\p{^General_Category=other}', "");
Expect(1, 126, '\P{General_Category=other}', "");
Expect(0, 126, '\P{^General_Category=other}', "");
Expect(1, 31, '\p{General_Category=- other}', "");
Expect(0, 31, '\p{^General_Category=- other}', "");
Expect(0, 31, '\P{General_Category=- other}', "");
Expect(1, 31, '\P{^General_Category=- other}', "");
Expect(0, 126, '\p{General_Category=- other}', "");
Expect(1, 126, '\p{^General_Category=- other}', "");
Expect(1, 126, '\P{General_Category=- other}', "");
Expect(0, 126, '\P{^General_Category=- other}', "");
Error('\p{Gc=__C/a/}');
Error('\P{Gc=__C/a/}');
Expect(1, 31, '\p{Gc=c}', "");
Expect(0, 31, '\p{^Gc=c}', "");
Expect(0, 31, '\P{Gc=c}', "");
Expect(1, 31, '\P{^Gc=c}', "");
Expect(0, 126, '\p{Gc=c}', "");
Expect(1, 126, '\p{^Gc=c}', "");
Expect(1, 126, '\P{Gc=c}', "");
Expect(0, 126, '\P{^Gc=c}', "");
Expect(1, 31, '\p{Gc:_C}', "");
Expect(0, 31, '\p{^Gc:_C}', "");
Expect(0, 31, '\P{Gc:_C}', "");
Expect(1, 31, '\P{^Gc:_C}', "");
Expect(0, 126, '\p{Gc:_C}', "");
Expect(1, 126, '\p{^Gc:_C}', "");
Expect(1, 126, '\P{Gc:_C}', "");
Expect(0, 126, '\P{^Gc:_C}', "");
Error('\p{Category=- other:=}');
Error('\P{Category=- other:=}');
Expect(1, 31, '\p{Category:   other}', "");
Expect(0, 31, '\p{^Category:   other}', "");
Expect(0, 31, '\P{Category:   other}', "");
Expect(1, 31, '\P{^Category:   other}', "");
Expect(0, 126, '\p{Category:   other}', "");
Expect(1, 126, '\p{^Category:   other}', "");
Expect(1, 126, '\P{Category:   other}', "");
Expect(0, 126, '\P{^Category:   other}', "");
Expect(1, 31, '\p{Category=--OTHER}', "");
Expect(0, 31, '\p{^Category=--OTHER}', "");
Expect(0, 31, '\P{Category=--OTHER}', "");
Expect(1, 31, '\P{^Category=--OTHER}', "");
Expect(0, 126, '\p{Category=--OTHER}', "");
Expect(1, 126, '\p{^Category=--OTHER}', "");
Expect(1, 126, '\P{Category=--OTHER}', "");
Expect(0, 126, '\P{^Category=--OTHER}', "");
Error('\p{Is_General_Category=/a/	-c}');
Error('\P{Is_General_Category=/a/	-c}');
Expect(1, 31, '\p{Is_General_Category=c}', "");
Expect(0, 31, '\p{^Is_General_Category=c}', "");
Expect(0, 31, '\P{Is_General_Category=c}', "");
Expect(1, 31, '\P{^Is_General_Category=c}', "");
Expect(0, 126, '\p{Is_General_Category=c}', "");
Expect(1, 126, '\p{^Is_General_Category=c}', "");
Expect(1, 126, '\P{Is_General_Category=c}', "");
Expect(0, 126, '\P{^Is_General_Category=c}', "");
Expect(1, 31, '\p{Is_General_Category= _C}', "");
Expect(0, 31, '\p{^Is_General_Category= _C}', "");
Expect(0, 31, '\P{Is_General_Category= _C}', "");
Expect(1, 31, '\P{^Is_General_Category= _C}', "");
Expect(0, 126, '\p{Is_General_Category= _C}', "");
Expect(1, 126, '\p{^Is_General_Category= _C}', "");
Expect(1, 126, '\P{Is_General_Category= _C}', "");
Expect(0, 126, '\P{^Is_General_Category= _C}', "");
Error('\p{Is_Gc:   /a/  OTHER}');
Error('\P{Is_Gc:   /a/  OTHER}');
Expect(1, 31, '\p{Is_Gc=other}', "");
Expect(0, 31, '\p{^Is_Gc=other}', "");
Expect(0, 31, '\P{Is_Gc=other}', "");
Expect(1, 31, '\P{^Is_Gc=other}', "");
Expect(0, 126, '\p{Is_Gc=other}', "");
Expect(1, 126, '\p{^Is_Gc=other}', "");
Expect(1, 126, '\P{Is_Gc=other}', "");
Expect(0, 126, '\P{^Is_Gc=other}', "");
Expect(1, 31, '\p{Is_Gc= Other}', "");
Expect(0, 31, '\p{^Is_Gc= Other}', "");
Expect(0, 31, '\P{Is_Gc= Other}', "");
Expect(1, 31, '\P{^Is_Gc= Other}', "");
Expect(0, 126, '\p{Is_Gc= Other}', "");
Expect(1, 126, '\p{^Is_Gc= Other}', "");
Expect(1, 126, '\P{Is_Gc= Other}', "");
Expect(0, 126, '\P{^Is_Gc= Other}', "");
Error('\p{Is_Category:    C/a/}');
Error('\P{Is_Category:    C/a/}');
Expect(1, 31, '\p{Is_Category=c}', "");
Expect(0, 31, '\p{^Is_Category=c}', "");
Expect(0, 31, '\P{Is_Category=c}', "");
Expect(1, 31, '\P{^Is_Category=c}', "");
Expect(0, 126, '\p{Is_Category=c}', "");
Expect(1, 126, '\p{^Is_Category=c}', "");
Expect(1, 126, '\P{Is_Category=c}', "");
Expect(0, 126, '\P{^Is_Category=c}', "");
Expect(1, 31, '\p{Is_Category=--c}', "");
Expect(0, 31, '\p{^Is_Category=--c}', "");
Expect(0, 31, '\P{Is_Category=--c}', "");
Expect(1, 31, '\P{^Is_Category=--c}', "");
Expect(0, 126, '\p{Is_Category=--c}', "");
Expect(1, 126, '\p{^Is_Category=--c}', "");
Expect(1, 126, '\P{Is_Category=--c}', "");
Expect(0, 126, '\P{^Is_Category=--c}', "");
Error('\p{General_Category=	/a/ENCLOSING_mark}');
Error('\P{General_Category=	/a/ENCLOSING_mark}');
Expect(1, 1161, '\p{General_Category=enclosingmark}', "");
Expect(0, 1161, '\p{^General_Category=enclosingmark}', "");
Expect(0, 1161, '\P{General_Category=enclosingmark}', "");
Expect(1, 1161, '\P{^General_Category=enclosingmark}', "");
Expect(0, 1159, '\p{General_Category=enclosingmark}', "");
Expect(1, 1159, '\p{^General_Category=enclosingmark}', "");
Expect(1, 1159, '\P{General_Category=enclosingmark}', "");
Expect(0, 1159, '\P{^General_Category=enclosingmark}', "");
Expect(1, 1161, '\p{General_Category= -Enclosing Mark}', "");
Expect(0, 1161, '\p{^General_Category= -Enclosing Mark}', "");
Expect(0, 1161, '\P{General_Category= -Enclosing Mark}', "");
Expect(1, 1161, '\P{^General_Category= -Enclosing Mark}', "");
Expect(0, 1159, '\p{General_Category= -Enclosing Mark}', "");
Expect(1, 1159, '\p{^General_Category= -Enclosing Mark}', "");
Expect(1, 1159, '\P{General_Category= -Enclosing Mark}', "");
Expect(0, 1159, '\P{^General_Category= -Enclosing Mark}', "");
Error('\p{Gc=	Me:=}');
Error('\P{Gc=	Me:=}');
Expect(1, 1161, '\p{Gc=me}', "");
Expect(0, 1161, '\p{^Gc=me}', "");
Expect(0, 1161, '\P{Gc=me}', "");
Expect(1, 1161, '\P{^Gc=me}', "");
Expect(0, 1159, '\p{Gc=me}', "");
Expect(1, 1159, '\p{^Gc=me}', "");
Expect(1, 1159, '\P{Gc=me}', "");
Expect(0, 1159, '\P{^Gc=me}', "");
Expect(1, 1161, '\p{Gc=-_Me}', "");
Expect(0, 1161, '\p{^Gc=-_Me}', "");
Expect(0, 1161, '\P{Gc=-_Me}', "");
Expect(1, 1161, '\P{^Gc=-_Me}', "");
Expect(0, 1159, '\p{Gc=-_Me}', "");
Expect(1, 1159, '\p{^Gc=-_Me}', "");
Expect(1, 1159, '\P{Gc=-_Me}', "");
Expect(0, 1159, '\P{^Gc=-_Me}', "");
Error('\p{Category=/a/Enclosing_Mark}');
Error('\P{Category=/a/Enclosing_Mark}');
Expect(1, 1161, '\p{Category=enclosingmark}', "");
Expect(0, 1161, '\p{^Category=enclosingmark}', "");
Expect(0, 1161, '\P{Category=enclosingmark}', "");
Expect(1, 1161, '\P{^Category=enclosingmark}', "");
Expect(0, 1159, '\p{Category=enclosingmark}', "");
Expect(1, 1159, '\p{^Category=enclosingmark}', "");
Expect(1, 1159, '\P{Category=enclosingmark}', "");
Expect(0, 1159, '\P{^Category=enclosingmark}', "");
Expect(1, 1161, '\p{Category=	ENCLOSING-MARK}', "");
Expect(0, 1161, '\p{^Category=	ENCLOSING-MARK}', "");
Expect(0, 1161, '\P{Category=	ENCLOSING-MARK}', "");
Expect(1, 1161, '\P{^Category=	ENCLOSING-MARK}', "");
Expect(0, 1159, '\p{Category=	ENCLOSING-MARK}', "");
Expect(1, 1159, '\p{^Category=	ENCLOSING-MARK}', "");
Expect(1, 1159, '\P{Category=	ENCLOSING-MARK}', "");
Expect(0, 1159, '\P{^Category=	ENCLOSING-MARK}', "");
Error('\p{Is_General_Category=-/a/Me}');
Error('\P{Is_General_Category=-/a/Me}');
Expect(1, 1161, '\p{Is_General_Category=me}', "");
Expect(0, 1161, '\p{^Is_General_Category=me}', "");
Expect(0, 1161, '\P{Is_General_Category=me}', "");
Expect(1, 1161, '\P{^Is_General_Category=me}', "");
Expect(0, 1159, '\p{Is_General_Category=me}', "");
Expect(1, 1159, '\p{^Is_General_Category=me}', "");
Expect(1, 1159, '\P{Is_General_Category=me}', "");
Expect(0, 1159, '\P{^Is_General_Category=me}', "");
Expect(1, 1161, '\p{Is_General_Category=  me}', "");
Expect(0, 1161, '\p{^Is_General_Category=  me}', "");
Expect(0, 1161, '\P{Is_General_Category=  me}', "");
Expect(1, 1161, '\P{^Is_General_Category=  me}', "");
Expect(0, 1159, '\p{Is_General_Category=  me}', "");
Expect(1, 1159, '\p{^Is_General_Category=  me}', "");
Expect(1, 1159, '\P{Is_General_Category=  me}', "");
Expect(0, 1159, '\P{^Is_General_Category=  me}', "");
Error('\p{Is_Gc= /a/Enclosingmark}');
Error('\P{Is_Gc= /a/Enclosingmark}');
Expect(1, 1161, '\p{Is_Gc=enclosingmark}', "");
Expect(0, 1161, '\p{^Is_Gc=enclosingmark}', "");
Expect(0, 1161, '\P{Is_Gc=enclosingmark}', "");
Expect(1, 1161, '\P{^Is_Gc=enclosingmark}', "");
Expect(0, 1159, '\p{Is_Gc=enclosingmark}', "");
Expect(1, 1159, '\p{^Is_Gc=enclosingmark}', "");
Expect(1, 1159, '\P{Is_Gc=enclosingmark}', "");
Expect(0, 1159, '\P{^Is_Gc=enclosingmark}', "");
Expect(1, 1161, '\p{Is_Gc=- enclosingMark}', "");
Expect(0, 1161, '\p{^Is_Gc=- enclosingMark}', "");
Expect(0, 1161, '\P{Is_Gc=- enclosingMark}', "");
Expect(1, 1161, '\P{^Is_Gc=- enclosingMark}', "");
Expect(0, 1159, '\p{Is_Gc=- enclosingMark}', "");
Expect(1, 1159, '\p{^Is_Gc=- enclosingMark}', "");
Expect(1, 1159, '\P{Is_Gc=- enclosingMark}', "");
Expect(0, 1159, '\P{^Is_Gc=- enclosingMark}', "");
Error('\p{Is_Category:  Me:=}');
Error('\P{Is_Category:  Me:=}');
Expect(1, 1161, '\p{Is_Category=me}', "");
Expect(0, 1161, '\p{^Is_Category=me}', "");
Expect(0, 1161, '\P{Is_Category=me}', "");
Expect(1, 1161, '\P{^Is_Category=me}', "");
Expect(0, 1159, '\p{Is_Category=me}', "");
Expect(1, 1159, '\p{^Is_Category=me}', "");
Expect(1, 1159, '\P{Is_Category=me}', "");
Expect(0, 1159, '\P{^Is_Category=me}', "");
Expect(1, 1161, '\p{Is_Category=-ME}', "");
Expect(0, 1161, '\p{^Is_Category=-ME}', "");
Expect(0, 1161, '\P{Is_Category=-ME}', "");
Expect(1, 1161, '\P{^Is_Category=-ME}', "");
Expect(0, 1159, '\p{Is_Category=-ME}', "");
Expect(1, 1159, '\p{^Is_Category=-ME}', "");
Expect(1, 1159, '\P{Is_Category=-ME}', "");
Expect(0, 1159, '\P{^Is_Category=-ME}', "");
Error('\p{General_Category= -Titlecase/a/letter}');
Error('\P{General_Category= -Titlecase/a/letter}');
Expect(1, 453, '\p{General_Category:titlecaseletter}', "");
Expect(0, 453, '\p{^General_Category:titlecaseletter}', "");
Expect(0, 453, '\P{General_Category:titlecaseletter}', "");
Expect(1, 453, '\P{^General_Category:titlecaseletter}', "");
Expect(0, 452, '\p{General_Category:titlecaseletter}', "");
Expect(1, 452, '\p{^General_Category:titlecaseletter}', "");
Expect(1, 452, '\P{General_Category:titlecaseletter}', "");
Expect(0, 452, '\P{^General_Category:titlecaseletter}', "");
Expect(1, 453, '\p{General_Category=--titlecase Letter}', "");
Expect(0, 453, '\p{^General_Category=--titlecase Letter}', "");
Expect(0, 453, '\P{General_Category=--titlecase Letter}', "");
Expect(1, 453, '\P{^General_Category=--titlecase Letter}', "");
Expect(0, 452, '\p{General_Category=--titlecase Letter}', "");
Expect(1, 452, '\p{^General_Category=--titlecase Letter}', "");
Expect(1, 452, '\P{General_Category=--titlecase Letter}', "");
Expect(0, 452, '\P{^General_Category=--titlecase Letter}', "");
Error('\p{Gc=	/a/lt}');
Error('\P{Gc=	/a/lt}');
Expect(1, 453, '\p{Gc=lt}', "");
Expect(0, 453, '\p{^Gc=lt}', "");
Expect(0, 453, '\P{Gc=lt}', "");
Expect(1, 453, '\P{^Gc=lt}', "");
Expect(0, 452, '\p{Gc=lt}', "");
Expect(1, 452, '\p{^Gc=lt}', "");
Expect(1, 452, '\P{Gc=lt}', "");
Expect(0, 452, '\P{^Gc=lt}', "");
Expect(1, 453, '\p{Gc:__lt}', "");
Expect(0, 453, '\p{^Gc:__lt}', "");
Expect(0, 453, '\P{Gc:__lt}', "");
Expect(1, 453, '\P{^Gc:__lt}', "");
Expect(0, 452, '\p{Gc:__lt}', "");
Expect(1, 452, '\p{^Gc:__lt}', "");
Expect(1, 452, '\P{Gc:__lt}', "");
Expect(0, 452, '\P{^Gc:__lt}', "");
Error('\p{Category=/a/	TITLECASE-Letter}');
Error('\P{Category=/a/	TITLECASE-Letter}');
Expect(1, 453, '\p{Category=titlecaseletter}', "");
Expect(0, 453, '\p{^Category=titlecaseletter}', "");
Expect(0, 453, '\P{Category=titlecaseletter}', "");
Expect(1, 453, '\P{^Category=titlecaseletter}', "");
Expect(0, 452, '\p{Category=titlecaseletter}', "");
Expect(1, 452, '\p{^Category=titlecaseletter}', "");
Expect(1, 452, '\P{Category=titlecaseletter}', "");
Expect(0, 452, '\P{^Category=titlecaseletter}', "");
Expect(1, 453, '\p{Category=_	TITLECASE-Letter}', "");
Expect(0, 453, '\p{^Category=_	TITLECASE-Letter}', "");
Expect(0, 453, '\P{Category=_	TITLECASE-Letter}', "");
Expect(1, 453, '\P{^Category=_	TITLECASE-Letter}', "");
Expect(0, 452, '\p{Category=_	TITLECASE-Letter}', "");
Expect(1, 452, '\p{^Category=_	TITLECASE-Letter}', "");
Expect(1, 452, '\P{Category=_	TITLECASE-Letter}', "");
Expect(0, 452, '\P{^Category=_	TITLECASE-Letter}', "");
Error('\p{Is_General_Category=Lt:=}');
Error('\P{Is_General_Category=Lt:=}');
Expect(1, 453, '\p{Is_General_Category=lt}', "");
Expect(0, 453, '\p{^Is_General_Category=lt}', "");
Expect(0, 453, '\P{Is_General_Category=lt}', "");
Expect(1, 453, '\P{^Is_General_Category=lt}', "");
Expect(0, 452, '\p{Is_General_Category=lt}', "");
Expect(1, 452, '\p{^Is_General_Category=lt}', "");
Expect(1, 452, '\P{Is_General_Category=lt}', "");
Expect(0, 452, '\P{^Is_General_Category=lt}', "");
Expect(1, 453, '\p{Is_General_Category=	_Lt}', "");
Expect(0, 453, '\p{^Is_General_Category=	_Lt}', "");
Expect(0, 453, '\P{Is_General_Category=	_Lt}', "");
Expect(1, 453, '\P{^Is_General_Category=	_Lt}', "");
Expect(0, 452, '\p{Is_General_Category=	_Lt}', "");
Expect(1, 452, '\p{^Is_General_Category=	_Lt}', "");
Expect(1, 452, '\P{Is_General_Category=	_Lt}', "");
Expect(0, 452, '\P{^Is_General_Category=	_Lt}', "");
Error('\p{Is_Gc=:=	_Titlecase-Letter}');
Error('\P{Is_Gc=:=	_Titlecase-Letter}');
Expect(1, 453, '\p{Is_Gc=titlecaseletter}', "");
Expect(0, 453, '\p{^Is_Gc=titlecaseletter}', "");
Expect(0, 453, '\P{Is_Gc=titlecaseletter}', "");
Expect(1, 453, '\P{^Is_Gc=titlecaseletter}', "");
Expect(0, 452, '\p{Is_Gc=titlecaseletter}', "");
Expect(1, 452, '\p{^Is_Gc=titlecaseletter}', "");
Expect(1, 452, '\P{Is_Gc=titlecaseletter}', "");
Expect(0, 452, '\P{^Is_Gc=titlecaseletter}', "");
Expect(1, 453, '\p{Is_Gc=- TITLECASE-letter}', "");
Expect(0, 453, '\p{^Is_Gc=- TITLECASE-letter}', "");
Expect(0, 453, '\P{Is_Gc=- TITLECASE-letter}', "");
Expect(1, 453, '\P{^Is_Gc=- TITLECASE-letter}', "");
Expect(0, 452, '\p{Is_Gc=- TITLECASE-letter}', "");
Expect(1, 452, '\p{^Is_Gc=- TITLECASE-letter}', "");
Expect(1, 452, '\P{Is_Gc=- TITLECASE-letter}', "");
Expect(0, 452, '\P{^Is_Gc=- TITLECASE-letter}', "");
Error('\p{Is_Category= _Lt:=}');
Error('\P{Is_Category= _Lt:=}');
Expect(1, 453, '\p{Is_Category=lt}', "");
Expect(0, 453, '\p{^Is_Category=lt}', "");
Expect(0, 453, '\P{Is_Category=lt}', "");
Expect(1, 453, '\P{^Is_Category=lt}', "");
Expect(0, 452, '\p{Is_Category=lt}', "");
Expect(1, 452, '\p{^Is_Category=lt}', "");
Expect(1, 452, '\P{Is_Category=lt}', "");
Expect(0, 452, '\P{^Is_Category=lt}', "");
Expect(1, 453, '\p{Is_Category=_	LT}', "");
Expect(0, 453, '\p{^Is_Category=_	LT}', "");
Expect(0, 453, '\P{Is_Category=_	LT}', "");
Expect(1, 453, '\P{^Is_Category=_	LT}', "");
Expect(0, 452, '\p{Is_Category=_	LT}', "");
Expect(1, 452, '\p{^Is_Category=_	LT}', "");
Expect(1, 452, '\P{Is_Category=_	LT}', "");
Expect(0, 452, '\P{^Is_Category=_	LT}', "");
Error('\p{General_Category=-:=Punctuation}');
Error('\P{General_Category=-:=Punctuation}');
Expect(1, 35, '\p{General_Category=punctuation}', "");
Expect(0, 35, '\p{^General_Category=punctuation}', "");
Expect(0, 35, '\P{General_Category=punctuation}', "");
Expect(1, 35, '\P{^General_Category=punctuation}', "");
Expect(0, 32, '\p{General_Category=punctuation}', "");
Expect(1, 32, '\p{^General_Category=punctuation}', "");
Expect(1, 32, '\P{General_Category=punctuation}', "");
Expect(0, 32, '\P{^General_Category=punctuation}', "");
Expect(1, 35, '\p{General_Category= Punctuation}', "");
Expect(0, 35, '\p{^General_Category= Punctuation}', "");
Expect(0, 35, '\P{General_Category= Punctuation}', "");
Expect(1, 35, '\P{^General_Category= Punctuation}', "");
Expect(0, 32, '\p{General_Category= Punctuation}', "");
Expect(1, 32, '\p{^General_Category= Punctuation}', "");
Expect(1, 32, '\P{General_Category= Punctuation}', "");
Expect(0, 32, '\P{^General_Category= Punctuation}', "");
Error('\p{Gc:	-_P:=}');
Error('\P{Gc:	-_P:=}');
Expect(1, 35, '\p{Gc=p}', "");
Expect(0, 35, '\p{^Gc=p}', "");
Expect(0, 35, '\P{Gc=p}', "");
Expect(1, 35, '\P{^Gc=p}', "");
Expect(0, 32, '\p{Gc=p}', "");
Expect(1, 32, '\p{^Gc=p}', "");
Expect(1, 32, '\P{Gc=p}', "");
Expect(0, 32, '\P{^Gc=p}', "");
Expect(1, 35, '\p{Gc=-P}', "");
Expect(0, 35, '\p{^Gc=-P}', "");
Expect(0, 35, '\P{Gc=-P}', "");
Expect(1, 35, '\P{^Gc=-P}', "");
Expect(0, 32, '\p{Gc=-P}', "");
Expect(1, 32, '\p{^Gc=-P}', "");
Expect(1, 32, '\P{Gc=-P}', "");
Expect(0, 32, '\P{^Gc=-P}', "");
Error('\p{Category=-PUNCT/a/}');
Error('\P{Category=-PUNCT/a/}');
Expect(1, 35, '\p{Category=punct}', "");
Expect(0, 35, '\p{^Category=punct}', "");
Expect(0, 35, '\P{Category=punct}', "");
Expect(1, 35, '\P{^Category=punct}', "");
Expect(0, 32, '\p{Category=punct}', "");
Expect(1, 32, '\p{^Category=punct}', "");
Expect(1, 32, '\P{Category=punct}', "");
Expect(0, 32, '\P{^Category=punct}', "");
Expect(1, 35, '\p{Category: 	_Punct}', "");
Expect(0, 35, '\p{^Category: 	_Punct}', "");
Expect(0, 35, '\P{Category: 	_Punct}', "");
Expect(1, 35, '\P{^Category: 	_Punct}', "");
Expect(0, 32, '\p{Category: 	_Punct}', "");
Expect(1, 32, '\p{^Category: 	_Punct}', "");
Expect(1, 32, '\P{Category: 	_Punct}', "");
Expect(0, 32, '\P{^Category: 	_Punct}', "");
Error('\p{Is_General_Category=_/a/punctuation}');
Error('\P{Is_General_Category=_/a/punctuation}');
Expect(1, 35, '\p{Is_General_Category=punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category=punctuation}', "");
Expect(0, 35, '\P{Is_General_Category=punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category=punctuation}', "");
Expect(0, 32, '\p{Is_General_Category=punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category=punctuation}', "");
Expect(1, 32, '\P{Is_General_Category=punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category=punctuation}', "");
Expect(1, 35, '\p{Is_General_Category=-	Punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category=-	Punctuation}', "");
Expect(0, 35, '\P{Is_General_Category=-	Punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category=-	Punctuation}', "");
Expect(0, 32, '\p{Is_General_Category=-	Punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category=-	Punctuation}', "");
Expect(1, 32, '\P{Is_General_Category=-	Punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category=-	Punctuation}', "");
Error('\p{Is_Gc:    /a/p}');
Error('\P{Is_Gc:    /a/p}');
Expect(1, 35, '\p{Is_Gc=p}', "");
Expect(0, 35, '\p{^Is_Gc=p}', "");
Expect(0, 35, '\P{Is_Gc=p}', "");
Expect(1, 35, '\P{^Is_Gc=p}', "");
Expect(0, 32, '\p{Is_Gc=p}', "");
Expect(1, 32, '\p{^Is_Gc=p}', "");
Expect(1, 32, '\P{Is_Gc=p}', "");
Expect(0, 32, '\P{^Is_Gc=p}', "");
Expect(1, 35, '\p{Is_Gc:_ P}', "");
Expect(0, 35, '\p{^Is_Gc:_ P}', "");
Expect(0, 35, '\P{Is_Gc:_ P}', "");
Expect(1, 35, '\P{^Is_Gc:_ P}', "");
Expect(0, 32, '\p{Is_Gc:_ P}', "");
Expect(1, 32, '\p{^Is_Gc:_ P}', "");
Expect(1, 32, '\P{Is_Gc:_ P}', "");
Expect(0, 32, '\P{^Is_Gc:_ P}', "");
Error('\p{Is_Category=  Punct:=}');
Error('\P{Is_Category=  Punct:=}');
Expect(1, 35, '\p{Is_Category=punct}', "");
Expect(0, 35, '\p{^Is_Category=punct}', "");
Expect(0, 35, '\P{Is_Category=punct}', "");
Expect(1, 35, '\P{^Is_Category=punct}', "");
Expect(0, 32, '\p{Is_Category=punct}', "");
Expect(1, 32, '\p{^Is_Category=punct}', "");
Expect(1, 32, '\P{Is_Category=punct}', "");
Expect(0, 32, '\P{^Is_Category=punct}', "");
Expect(1, 35, '\p{Is_Category=-	Punct}', "");
Expect(0, 35, '\p{^Is_Category=-	Punct}', "");
Expect(0, 35, '\P{Is_Category=-	Punct}', "");
Expect(1, 35, '\P{^Is_Category=-	Punct}', "");
Expect(0, 32, '\p{Is_Category=-	Punct}', "");
Expect(1, 32, '\p{^Is_Category=-	Punct}', "");
Expect(1, 32, '\P{Is_Category=-	Punct}', "");
Expect(0, 32, '\P{^Is_Category=-	Punct}', "");
Error('\p{General_Category=	UPPERCASE/a/LETTER}');
Error('\P{General_Category=	UPPERCASE/a/LETTER}');
Expect(1, 90, '\p{General_Category=uppercaseletter}', "");
Expect(0, 90, '\p{^General_Category=uppercaseletter}', "");
Expect(0, 90, '\P{General_Category=uppercaseletter}', "");
Expect(1, 90, '\P{^General_Category=uppercaseletter}', "");
Expect(0, 64, '\p{General_Category=uppercaseletter}', "");
Expect(1, 64, '\p{^General_Category=uppercaseletter}', "");
Expect(1, 64, '\P{General_Category=uppercaseletter}', "");
Expect(0, 64, '\P{^General_Category=uppercaseletter}', "");
Expect(1, 90, '\p{General_Category:		_uppercase_Letter}', "");
Expect(0, 90, '\p{^General_Category:		_uppercase_Letter}', "");
Expect(0, 90, '\P{General_Category:		_uppercase_Letter}', "");
Expect(1, 90, '\P{^General_Category:		_uppercase_Letter}', "");
Expect(0, 64, '\p{General_Category:		_uppercase_Letter}', "");
Expect(1, 64, '\p{^General_Category:		_uppercase_Letter}', "");
Expect(1, 64, '\P{General_Category:		_uppercase_Letter}', "");
Expect(0, 64, '\P{^General_Category:		_uppercase_Letter}', "");
Error('\p{Gc=/a/-Lu}');
Error('\P{Gc=/a/-Lu}');
Expect(1, 90, '\p{Gc=lu}', "");
Expect(0, 90, '\p{^Gc=lu}', "");
Expect(0, 90, '\P{Gc=lu}', "");
Expect(1, 90, '\P{^Gc=lu}', "");
Expect(0, 64, '\p{Gc=lu}', "");
Expect(1, 64, '\p{^Gc=lu}', "");
Expect(1, 64, '\P{Gc=lu}', "");
Expect(0, 64, '\P{^Gc=lu}', "");
Expect(1, 90, '\p{Gc=_ Lu}', "");
Expect(0, 90, '\p{^Gc=_ Lu}', "");
Expect(0, 90, '\P{Gc=_ Lu}', "");
Expect(1, 90, '\P{^Gc=_ Lu}', "");
Expect(0, 64, '\p{Gc=_ Lu}', "");
Expect(1, 64, '\p{^Gc=_ Lu}', "");
Expect(1, 64, '\P{Gc=_ Lu}', "");
Expect(0, 64, '\P{^Gc=_ Lu}', "");
Error('\p{Category=:=	-Uppercaseletter}');
Error('\P{Category=:=	-Uppercaseletter}');
Expect(1, 90, '\p{Category=uppercaseletter}', "");
Expect(0, 90, '\p{^Category=uppercaseletter}', "");
Expect(0, 90, '\P{Category=uppercaseletter}', "");
Expect(1, 90, '\P{^Category=uppercaseletter}', "");
Expect(0, 64, '\p{Category=uppercaseletter}', "");
Expect(1, 64, '\p{^Category=uppercaseletter}', "");
Expect(1, 64, '\P{Category=uppercaseletter}', "");
Expect(0, 64, '\P{^Category=uppercaseletter}', "");
Expect(1, 90, '\p{Category=	UppercaseLetter}', "");
Expect(0, 90, '\p{^Category=	UppercaseLetter}', "");
Expect(0, 90, '\P{Category=	UppercaseLetter}', "");
Expect(1, 90, '\P{^Category=	UppercaseLetter}', "");
Expect(0, 64, '\p{Category=	UppercaseLetter}', "");
Expect(1, 64, '\p{^Category=	UppercaseLetter}', "");
Expect(1, 64, '\P{Category=	UppercaseLetter}', "");
Expect(0, 64, '\P{^Category=	UppercaseLetter}', "");
Error('\p{Is_General_Category=	/a/Lu}');
Error('\P{Is_General_Category=	/a/Lu}');
Expect(1, 90, '\p{Is_General_Category=lu}', "");
Expect(0, 90, '\p{^Is_General_Category=lu}', "");
Expect(0, 90, '\P{Is_General_Category=lu}', "");
Expect(1, 90, '\P{^Is_General_Category=lu}', "");
Expect(0, 64, '\p{Is_General_Category=lu}', "");
Expect(1, 64, '\p{^Is_General_Category=lu}', "");
Expect(1, 64, '\P{Is_General_Category=lu}', "");
Expect(0, 64, '\P{^Is_General_Category=lu}', "");
Expect(1, 90, '\p{Is_General_Category=-	lu}', "");
Expect(0, 90, '\p{^Is_General_Category=-	lu}', "");
Expect(0, 90, '\P{Is_General_Category=-	lu}', "");
Expect(1, 90, '\P{^Is_General_Category=-	lu}', "");
Expect(0, 64, '\p{Is_General_Category=-	lu}', "");
Expect(1, 64, '\p{^Is_General_Category=-	lu}', "");
Expect(1, 64, '\P{Is_General_Category=-	lu}', "");
Expect(0, 64, '\P{^Is_General_Category=-	lu}', "");
Error('\p{Is_Gc=/a/	UPPERCASE_letter}');
Error('\P{Is_Gc=/a/	UPPERCASE_letter}');
Expect(1, 90, '\p{Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\p{^Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\P{Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\P{^Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\p{Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\p{^Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\P{Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\P{^Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\p{Is_Gc=-Uppercase-Letter}', "");
Expect(0, 90, '\p{^Is_Gc=-Uppercase-Letter}', "");
Expect(0, 90, '\P{Is_Gc=-Uppercase-Letter}', "");
Expect(1, 90, '\P{^Is_Gc=-Uppercase-Letter}', "");
Expect(0, 64, '\p{Is_Gc=-Uppercase-Letter}', "");
Expect(1, 64, '\p{^Is_Gc=-Uppercase-Letter}', "");
Expect(1, 64, '\P{Is_Gc=-Uppercase-Letter}', "");
Expect(0, 64, '\P{^Is_Gc=-Uppercase-Letter}', "");
Error('\p{Is_Category:    :=lu}');
Error('\P{Is_Category:    :=lu}');
Expect(1, 90, '\p{Is_Category=lu}', "");
Expect(0, 90, '\p{^Is_Category=lu}', "");
Expect(0, 90, '\P{Is_Category=lu}', "");
Expect(1, 90, '\P{^Is_Category=lu}', "");
Expect(0, 64, '\p{Is_Category=lu}', "");
Expect(1, 64, '\p{^Is_Category=lu}', "");
Expect(1, 64, '\P{Is_Category=lu}', "");
Expect(0, 64, '\P{^Is_Category=lu}', "");
Expect(1, 90, '\p{Is_Category:  	LU}', "");
Expect(0, 90, '\p{^Is_Category:  	LU}', "");
Expect(0, 90, '\P{Is_Category:  	LU}', "");
Expect(1, 90, '\P{^Is_Category:  	LU}', "");
Expect(0, 64, '\p{Is_Category:  	LU}', "");
Expect(1, 64, '\p{^Is_Category:  	LU}', "");
Expect(1, 64, '\P{Is_Category:  	LU}', "");
Expect(0, 64, '\P{^Is_Category:  	LU}', "");
Error('\p{General_Category:   -/a/Number}');
Error('\P{General_Category:   -/a/Number}');
Expect(1, 57, '\p{General_Category=number}', "");
Expect(0, 57, '\p{^General_Category=number}', "");
Expect(0, 57, '\P{General_Category=number}', "");
Expect(1, 57, '\P{^General_Category=number}', "");
Expect(0, 47, '\p{General_Category=number}', "");
Expect(1, 47, '\p{^General_Category=number}', "");
Expect(1, 47, '\P{General_Category=number}', "");
Expect(0, 47, '\P{^General_Category=number}', "");
Expect(1, 57, '\p{General_Category= NUMBER}', "");
Expect(0, 57, '\p{^General_Category= NUMBER}', "");
Expect(0, 57, '\P{General_Category= NUMBER}', "");
Expect(1, 57, '\P{^General_Category= NUMBER}', "");
Expect(0, 47, '\p{General_Category= NUMBER}', "");
Expect(1, 47, '\p{^General_Category= NUMBER}', "");
Expect(1, 47, '\P{General_Category= NUMBER}', "");
Expect(0, 47, '\P{^General_Category= NUMBER}', "");
Error('\p{Gc:/a/  N}');
Error('\P{Gc:/a/  N}');
Expect(1, 57, '\p{Gc=n}', "");
Expect(0, 57, '\p{^Gc=n}', "");
Expect(0, 57, '\P{Gc=n}', "");
Expect(1, 57, '\P{^Gc=n}', "");
Expect(0, 47, '\p{Gc=n}', "");
Expect(1, 47, '\p{^Gc=n}', "");
Expect(1, 47, '\P{Gc=n}', "");
Expect(0, 47, '\P{^Gc=n}', "");
Expect(1, 57, '\p{Gc=-N}', "");
Expect(0, 57, '\p{^Gc=-N}', "");
Expect(0, 57, '\P{Gc=-N}', "");
Expect(1, 57, '\P{^Gc=-N}', "");
Expect(0, 47, '\p{Gc=-N}', "");
Expect(1, 47, '\p{^Gc=-N}', "");
Expect(1, 47, '\P{Gc=-N}', "");
Expect(0, 47, '\P{^Gc=-N}', "");
Error('\p{Category= _Number:=}');
Error('\P{Category= _Number:=}');
Expect(1, 57, '\p{Category=number}', "");
Expect(0, 57, '\p{^Category=number}', "");
Expect(0, 57, '\P{Category=number}', "");
Expect(1, 57, '\P{^Category=number}', "");
Expect(0, 47, '\p{Category=number}', "");
Expect(1, 47, '\p{^Category=number}', "");
Expect(1, 47, '\P{Category=number}', "");
Expect(0, 47, '\P{^Category=number}', "");
Expect(1, 57, '\p{Category=	number}', "");
Expect(0, 57, '\p{^Category=	number}', "");
Expect(0, 57, '\P{Category=	number}', "");
Expect(1, 57, '\P{^Category=	number}', "");
Expect(0, 47, '\p{Category=	number}', "");
Expect(1, 47, '\p{^Category=	number}', "");
Expect(1, 47, '\P{Category=	number}', "");
Expect(0, 47, '\P{^Category=	number}', "");
Error('\p{Is_General_Category=:=N}');
Error('\P{Is_General_Category=:=N}');
Expect(1, 57, '\p{Is_General_Category=n}', "");
Expect(0, 57, '\p{^Is_General_Category=n}', "");
Expect(0, 57, '\P{Is_General_Category=n}', "");
Expect(1, 57, '\P{^Is_General_Category=n}', "");
Expect(0, 47, '\p{Is_General_Category=n}', "");
Expect(1, 47, '\p{^Is_General_Category=n}', "");
Expect(1, 47, '\P{Is_General_Category=n}', "");
Expect(0, 47, '\P{^Is_General_Category=n}', "");
Expect(1, 57, '\p{Is_General_Category=-	N}', "");
Expect(0, 57, '\p{^Is_General_Category=-	N}', "");
Expect(0, 57, '\P{Is_General_Category=-	N}', "");
Expect(1, 57, '\P{^Is_General_Category=-	N}', "");
Expect(0, 47, '\p{Is_General_Category=-	N}', "");
Expect(1, 47, '\p{^Is_General_Category=-	N}', "");
Expect(1, 47, '\P{Is_General_Category=-	N}', "");
Expect(0, 47, '\P{^Is_General_Category=-	N}', "");
Error('\p{Is_Gc=	/a/Number}');
Error('\P{Is_Gc=	/a/Number}');
Expect(1, 57, '\p{Is_Gc=number}', "");
Expect(0, 57, '\p{^Is_Gc=number}', "");
Expect(0, 57, '\P{Is_Gc=number}', "");
Expect(1, 57, '\P{^Is_Gc=number}', "");
Expect(0, 47, '\p{Is_Gc=number}', "");
Expect(1, 47, '\p{^Is_Gc=number}', "");
Expect(1, 47, '\P{Is_Gc=number}', "");
Expect(0, 47, '\P{^Is_Gc=number}', "");
Expect(1, 57, '\p{Is_Gc=_ NUMBER}', "");
Expect(0, 57, '\p{^Is_Gc=_ NUMBER}', "");
Expect(0, 57, '\P{Is_Gc=_ NUMBER}', "");
Expect(1, 57, '\P{^Is_Gc=_ NUMBER}', "");
Expect(0, 47, '\p{Is_Gc=_ NUMBER}', "");
Expect(1, 47, '\p{^Is_Gc=_ NUMBER}', "");
Expect(1, 47, '\P{Is_Gc=_ NUMBER}', "");
Expect(0, 47, '\P{^Is_Gc=_ NUMBER}', "");
Error('\p{Is_Category=/a/N}');
Error('\P{Is_Category=/a/N}');
Expect(1, 57, '\p{Is_Category=n}', "");
Expect(0, 57, '\p{^Is_Category=n}', "");
Expect(0, 57, '\P{Is_Category=n}', "");
Expect(1, 57, '\P{^Is_Category=n}', "");
Expect(0, 47, '\p{Is_Category=n}', "");
Expect(1, 47, '\p{^Is_Category=n}', "");
Expect(1, 47, '\P{Is_Category=n}', "");
Expect(0, 47, '\P{^Is_Category=n}', "");
Expect(1, 57, '\p{Is_Category=__N}', "");
Expect(0, 57, '\p{^Is_Category=__N}', "");
Expect(0, 57, '\P{Is_Category=__N}', "");
Expect(1, 57, '\P{^Is_Category=__N}', "");
Expect(0, 47, '\p{Is_Category=__N}', "");
Expect(1, 47, '\p{^Is_Category=__N}', "");
Expect(1, 47, '\P{Is_Category=__N}', "");
Expect(0, 47, '\P{^Is_Category=__N}', "");
Error('\p{General_Category=__Final/a/Punctuation}');
Error('\P{General_Category=__Final/a/Punctuation}');
Expect(1, 187, '\p{General_Category=finalpunctuation}', "");
Expect(0, 187, '\p{^General_Category=finalpunctuation}', "");
Expect(0, 187, '\P{General_Category=finalpunctuation}', "");
Expect(1, 187, '\P{^General_Category=finalpunctuation}', "");
Expect(0, 186, '\p{General_Category=finalpunctuation}', "");
Expect(1, 186, '\p{^General_Category=finalpunctuation}', "");
Expect(1, 186, '\P{General_Category=finalpunctuation}', "");
Expect(0, 186, '\P{^General_Category=finalpunctuation}', "");
Expect(1, 187, '\p{General_Category=		FINAL	Punctuation}', "");
Expect(0, 187, '\p{^General_Category=		FINAL	Punctuation}', "");
Expect(0, 187, '\P{General_Category=		FINAL	Punctuation}', "");
Expect(1, 187, '\P{^General_Category=		FINAL	Punctuation}', "");
Expect(0, 186, '\p{General_Category=		FINAL	Punctuation}', "");
Expect(1, 186, '\p{^General_Category=		FINAL	Punctuation}', "");
Expect(1, 186, '\P{General_Category=		FINAL	Punctuation}', "");
Expect(0, 186, '\P{^General_Category=		FINAL	Punctuation}', "");
Error('\p{Gc=:=-	pf}');
Error('\P{Gc=:=-	pf}');
Expect(1, 187, '\p{Gc=pf}', "");
Expect(0, 187, '\p{^Gc=pf}', "");
Expect(0, 187, '\P{Gc=pf}', "");
Expect(1, 187, '\P{^Gc=pf}', "");
Expect(0, 186, '\p{Gc=pf}', "");
Expect(1, 186, '\p{^Gc=pf}', "");
Expect(1, 186, '\P{Gc=pf}', "");
Expect(0, 186, '\P{^Gc=pf}', "");
Expect(1, 187, '\p{Gc=-pf}', "");
Expect(0, 187, '\p{^Gc=-pf}', "");
Expect(0, 187, '\P{Gc=-pf}', "");
Expect(1, 187, '\P{^Gc=-pf}', "");
Expect(0, 186, '\p{Gc=-pf}', "");
Expect(1, 186, '\p{^Gc=-pf}', "");
Expect(1, 186, '\P{Gc=-pf}', "");
Expect(0, 186, '\P{^Gc=-pf}', "");
Error('\p{Category:	- FINAL Punctuation/a/}');
Error('\P{Category:	- FINAL Punctuation/a/}');
Expect(1, 187, '\p{Category=finalpunctuation}', "");
Expect(0, 187, '\p{^Category=finalpunctuation}', "");
Expect(0, 187, '\P{Category=finalpunctuation}', "");
Expect(1, 187, '\P{^Category=finalpunctuation}', "");
Expect(0, 186, '\p{Category=finalpunctuation}', "");
Expect(1, 186, '\p{^Category=finalpunctuation}', "");
Expect(1, 186, '\P{Category=finalpunctuation}', "");
Expect(0, 186, '\P{^Category=finalpunctuation}', "");
Expect(1, 187, '\p{Category= FINALPunctuation}', "");
Expect(0, 187, '\p{^Category= FINALPunctuation}', "");
Expect(0, 187, '\P{Category= FINALPunctuation}', "");
Expect(1, 187, '\P{^Category= FINALPunctuation}', "");
Expect(0, 186, '\p{Category= FINALPunctuation}', "");
Expect(1, 186, '\p{^Category= FINALPunctuation}', "");
Expect(1, 186, '\P{Category= FINALPunctuation}', "");
Expect(0, 186, '\P{^Category= FINALPunctuation}', "");
Error('\p{Is_General_Category=/a/	-pf}');
Error('\P{Is_General_Category=/a/	-pf}');
Expect(1, 187, '\p{Is_General_Category=pf}', "");
Expect(0, 187, '\p{^Is_General_Category=pf}', "");
Expect(0, 187, '\P{Is_General_Category=pf}', "");
Expect(1, 187, '\P{^Is_General_Category=pf}', "");
Expect(0, 186, '\p{Is_General_Category=pf}', "");
Expect(1, 186, '\p{^Is_General_Category=pf}', "");
Expect(1, 186, '\P{Is_General_Category=pf}', "");
Expect(0, 186, '\P{^Is_General_Category=pf}', "");
Expect(1, 187, '\p{Is_General_Category:   -	PF}', "");
Expect(0, 187, '\p{^Is_General_Category:   -	PF}', "");
Expect(0, 187, '\P{Is_General_Category:   -	PF}', "");
Expect(1, 187, '\P{^Is_General_Category:   -	PF}', "");
Expect(0, 186, '\p{Is_General_Category:   -	PF}', "");
Expect(1, 186, '\p{^Is_General_Category:   -	PF}', "");
Expect(1, 186, '\P{Is_General_Category:   -	PF}', "");
Expect(0, 186, '\P{^Is_General_Category:   -	PF}', "");
Error('\p{Is_Gc=:= -FinalPunctuation}');
Error('\P{Is_Gc=:= -FinalPunctuation}');
Expect(1, 187, '\p{Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\p{^Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\P{Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\P{^Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\p{Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\p{^Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\P{Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\P{^Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\p{Is_Gc=	FINAL PUNCTUATION}', "");
Expect(0, 187, '\p{^Is_Gc=	FINAL PUNCTUATION}', "");
Expect(0, 187, '\P{Is_Gc=	FINAL PUNCTUATION}', "");
Expect(1, 187, '\P{^Is_Gc=	FINAL PUNCTUATION}', "");
Expect(0, 186, '\p{Is_Gc=	FINAL PUNCTUATION}', "");
Expect(1, 186, '\p{^Is_Gc=	FINAL PUNCTUATION}', "");
Expect(1, 186, '\P{Is_Gc=	FINAL PUNCTUATION}', "");
Expect(0, 186, '\P{^Is_Gc=	FINAL PUNCTUATION}', "");
Error('\p{Is_Category=-PF:=}');
Error('\P{Is_Category=-PF:=}');
Expect(1, 187, '\p{Is_Category=pf}', "");
Expect(0, 187, '\p{^Is_Category=pf}', "");
Expect(0, 187, '\P{Is_Category=pf}', "");
Expect(1, 187, '\P{^Is_Category=pf}', "");
Expect(0, 186, '\p{Is_Category=pf}', "");
Expect(1, 186, '\p{^Is_Category=pf}', "");
Expect(1, 186, '\P{Is_Category=pf}', "");
Expect(0, 186, '\P{^Is_Category=pf}', "");
Expect(1, 187, '\p{Is_Category=__Pf}', "");
Expect(0, 187, '\p{^Is_Category=__Pf}', "");
Expect(0, 187, '\P{Is_Category=__Pf}', "");
Expect(1, 187, '\P{^Is_Category=__Pf}', "");
Expect(0, 186, '\p{Is_Category=__Pf}', "");
Expect(1, 186, '\p{^Is_Category=__Pf}', "");
Expect(1, 186, '\P{Is_Category=__Pf}', "");
Expect(0, 186, '\P{^Is_Category=__Pf}', "");
Error('\p{General_Category=/a/-	Unassigned}');
Error('\P{General_Category=/a/-	Unassigned}');
Expect(1, 889, '\p{General_Category=unassigned}', "");
Expect(0, 889, '\p{^General_Category=unassigned}', "");
Expect(0, 889, '\P{General_Category=unassigned}', "");
Expect(1, 889, '\P{^General_Category=unassigned}', "");
Expect(0, 887, '\p{General_Category=unassigned}', "");
Expect(1, 887, '\p{^General_Category=unassigned}', "");
Expect(1, 887, '\P{General_Category=unassigned}', "");
Expect(0, 887, '\P{^General_Category=unassigned}', "");
Expect(1, 889, '\p{General_Category=  Unassigned}', "");
Expect(0, 889, '\p{^General_Category=  Unassigned}', "");
Expect(0, 889, '\P{General_Category=  Unassigned}', "");
Expect(1, 889, '\P{^General_Category=  Unassigned}', "");
Expect(0, 887, '\p{General_Category=  Unassigned}', "");
Expect(1, 887, '\p{^General_Category=  Unassigned}', "");
Expect(1, 887, '\P{General_Category=  Unassigned}', "");
Expect(0, 887, '\P{^General_Category=  Unassigned}', "");
Error('\p{Gc=/a/	_cn}');
Error('\P{Gc=/a/	_cn}');
Expect(1, 889, '\p{Gc=cn}', "");
Expect(0, 889, '\p{^Gc=cn}', "");
Expect(0, 889, '\P{Gc=cn}', "");
Expect(1, 889, '\P{^Gc=cn}', "");
Expect(0, 887, '\p{Gc=cn}', "");
Expect(1, 887, '\p{^Gc=cn}', "");
Expect(1, 887, '\P{Gc=cn}', "");
Expect(0, 887, '\P{^Gc=cn}', "");
Expect(1, 889, '\p{Gc= -Cn}', "");
Expect(0, 889, '\p{^Gc= -Cn}', "");
Expect(0, 889, '\P{Gc= -Cn}', "");
Expect(1, 889, '\P{^Gc= -Cn}', "");
Expect(0, 887, '\p{Gc= -Cn}', "");
Expect(1, 887, '\p{^Gc= -Cn}', "");
Expect(1, 887, '\P{Gc= -Cn}', "");
Expect(0, 887, '\P{^Gc= -Cn}', "");
Error('\p{Category=_/a/UNASSIGNED}');
Error('\P{Category=_/a/UNASSIGNED}');
Expect(1, 889, '\p{Category=unassigned}', "");
Expect(0, 889, '\p{^Category=unassigned}', "");
Expect(0, 889, '\P{Category=unassigned}', "");
Expect(1, 889, '\P{^Category=unassigned}', "");
Expect(0, 887, '\p{Category=unassigned}', "");
Expect(1, 887, '\p{^Category=unassigned}', "");
Expect(1, 887, '\P{Category=unassigned}', "");
Expect(0, 887, '\P{^Category=unassigned}', "");
Expect(1, 889, '\p{Category= -unassigned}', "");
Expect(0, 889, '\p{^Category= -unassigned}', "");
Expect(0, 889, '\P{Category= -unassigned}', "");
Expect(1, 889, '\P{^Category= -unassigned}', "");
Expect(0, 887, '\p{Category= -unassigned}', "");
Expect(1, 887, '\p{^Category= -unassigned}', "");
Expect(1, 887, '\P{Category= -unassigned}', "");
Expect(0, 887, '\P{^Category= -unassigned}', "");
Error('\p{Is_General_Category=	:=Cn}');
Error('\P{Is_General_Category=	:=Cn}');
Expect(1, 889, '\p{Is_General_Category=cn}', "");
Expect(0, 889, '\p{^Is_General_Category=cn}', "");
Expect(0, 889, '\P{Is_General_Category=cn}', "");
Expect(1, 889, '\P{^Is_General_Category=cn}', "");
Expect(0, 887, '\p{Is_General_Category=cn}', "");
Expect(1, 887, '\p{^Is_General_Category=cn}', "");
Expect(1, 887, '\P{Is_General_Category=cn}', "");
Expect(0, 887, '\P{^Is_General_Category=cn}', "");
Expect(1, 889, '\p{Is_General_Category=	 cn}', "");
Expect(0, 889, '\p{^Is_General_Category=	 cn}', "");
Expect(0, 889, '\P{Is_General_Category=	 cn}', "");
Expect(1, 889, '\P{^Is_General_Category=	 cn}', "");
Expect(0, 887, '\p{Is_General_Category=	 cn}', "");
Expect(1, 887, '\p{^Is_General_Category=	 cn}', "");
Expect(1, 887, '\P{Is_General_Category=	 cn}', "");
Expect(0, 887, '\P{^Is_General_Category=	 cn}', "");
Error('\p{Is_Gc=-:=unassigned}');
Error('\P{Is_Gc=-:=unassigned}');
Expect(1, 889, '\p{Is_Gc=unassigned}', "");
Expect(0, 889, '\p{^Is_Gc=unassigned}', "");
Expect(0, 889, '\P{Is_Gc=unassigned}', "");
Expect(1, 889, '\P{^Is_Gc=unassigned}', "");
Expect(0, 887, '\p{Is_Gc=unassigned}', "");
Expect(1, 887, '\p{^Is_Gc=unassigned}', "");
Expect(1, 887, '\P{Is_Gc=unassigned}', "");
Expect(0, 887, '\P{^Is_Gc=unassigned}', "");
Expect(1, 889, '\p{Is_Gc= Unassigned}', "");
Expect(0, 889, '\p{^Is_Gc= Unassigned}', "");
Expect(0, 889, '\P{Is_Gc= Unassigned}', "");
Expect(1, 889, '\P{^Is_Gc= Unassigned}', "");
Expect(0, 887, '\p{Is_Gc= Unassigned}', "");
Expect(1, 887, '\p{^Is_Gc= Unassigned}', "");
Expect(1, 887, '\P{Is_Gc= Unassigned}', "");
Expect(0, 887, '\P{^Is_Gc= Unassigned}', "");
Error('\p{Is_Category=-CN/a/}');
Error('\P{Is_Category=-CN/a/}');
Expect(1, 889, '\p{Is_Category=cn}', "");
Expect(0, 889, '\p{^Is_Category=cn}', "");
Expect(0, 889, '\P{Is_Category=cn}', "");
Expect(1, 889, '\P{^Is_Category=cn}', "");
Expect(0, 887, '\p{Is_Category=cn}', "");
Expect(1, 887, '\p{^Is_Category=cn}', "");
Expect(1, 887, '\P{Is_Category=cn}', "");
Expect(0, 887, '\P{^Is_Category=cn}', "");
Expect(1, 889, '\p{Is_Category= cn}', "");
Expect(0, 889, '\p{^Is_Category= cn}', "");
Expect(0, 889, '\P{Is_Category= cn}', "");
Expect(1, 889, '\P{^Is_Category= cn}', "");
Expect(0, 887, '\p{Is_Category= cn}', "");
Expect(1, 887, '\p{^Is_Category= cn}', "");
Expect(1, 887, '\P{Is_Category= cn}', "");
Expect(0, 887, '\P{^Is_Category= cn}', "");
Error('\p{General_Category=_:=Decimal	Number}');
Error('\P{General_Category=_:=Decimal	Number}');
Expect(1, 57, '\p{General_Category=decimalnumber}', "");
Expect(0, 57, '\p{^General_Category=decimalnumber}', "");
Expect(0, 57, '\P{General_Category=decimalnumber}', "");
Expect(1, 57, '\P{^General_Category=decimalnumber}', "");
Expect(0, 47, '\p{General_Category=decimalnumber}', "");
Expect(1, 47, '\p{^General_Category=decimalnumber}', "");
Expect(1, 47, '\P{General_Category=decimalnumber}', "");
Expect(0, 47, '\P{^General_Category=decimalnumber}', "");
Expect(1, 57, '\p{General_Category=-_DecimalNumber}', "");
Expect(0, 57, '\p{^General_Category=-_DecimalNumber}', "");
Expect(0, 57, '\P{General_Category=-_DecimalNumber}', "");
Expect(1, 57, '\P{^General_Category=-_DecimalNumber}', "");
Expect(0, 47, '\p{General_Category=-_DecimalNumber}', "");
Expect(1, 47, '\p{^General_Category=-_DecimalNumber}', "");
Expect(1, 47, '\P{General_Category=-_DecimalNumber}', "");
Expect(0, 47, '\P{^General_Category=-_DecimalNumber}', "");
Error('\p{Gc=:= Nd}');
Error('\P{Gc=:= Nd}');
Expect(1, 57, '\p{Gc=nd}', "");
Expect(0, 57, '\p{^Gc=nd}', "");
Expect(0, 57, '\P{Gc=nd}', "");
Expect(1, 57, '\P{^Gc=nd}', "");
Expect(0, 47, '\p{Gc=nd}', "");
Expect(1, 47, '\p{^Gc=nd}', "");
Expect(1, 47, '\P{Gc=nd}', "");
Expect(0, 47, '\P{^Gc=nd}', "");
Expect(1, 57, '\p{Gc=-nd}', "");
Expect(0, 57, '\p{^Gc=-nd}', "");
Expect(0, 57, '\P{Gc=-nd}', "");
Expect(1, 57, '\P{^Gc=-nd}', "");
Expect(0, 47, '\p{Gc=-nd}', "");
Expect(1, 47, '\p{^Gc=-nd}', "");
Expect(1, 47, '\P{Gc=-nd}', "");
Expect(0, 47, '\P{^Gc=-nd}', "");
Error('\p{Category:    -DIGIT:=}');
Error('\P{Category:    -DIGIT:=}');
Expect(1, 57, '\p{Category=digit}', "");
Expect(0, 57, '\p{^Category=digit}', "");
Expect(0, 57, '\P{Category=digit}', "");
Expect(1, 57, '\P{^Category=digit}', "");
Expect(0, 47, '\p{Category=digit}', "");
Expect(1, 47, '\p{^Category=digit}', "");
Expect(1, 47, '\P{Category=digit}', "");
Expect(0, 47, '\P{^Category=digit}', "");
Expect(1, 57, '\p{Category=_digit}', "");
Expect(0, 57, '\p{^Category=_digit}', "");
Expect(0, 57, '\P{Category=_digit}', "");
Expect(1, 57, '\P{^Category=_digit}', "");
Expect(0, 47, '\p{Category=_digit}', "");
Expect(1, 47, '\p{^Category=_digit}', "");
Expect(1, 47, '\P{Category=_digit}', "");
Expect(0, 47, '\P{^Category=_digit}', "");
Error('\p{Is_General_Category=/a/DecimalNUMBER}');
Error('\P{Is_General_Category=/a/DecimalNUMBER}');
Expect(1, 57, '\p{Is_General_Category=decimalnumber}', "");
Expect(0, 57, '\p{^Is_General_Category=decimalnumber}', "");
Expect(0, 57, '\P{Is_General_Category=decimalnumber}', "");
Expect(1, 57, '\P{^Is_General_Category=decimalnumber}', "");
Expect(0, 47, '\p{Is_General_Category=decimalnumber}', "");
Expect(1, 47, '\p{^Is_General_Category=decimalnumber}', "");
Expect(1, 47, '\P{Is_General_Category=decimalnumber}', "");
Expect(0, 47, '\P{^Is_General_Category=decimalnumber}', "");
Expect(1, 57, '\p{Is_General_Category: -_Decimal_NUMBER}', "");
Expect(0, 57, '\p{^Is_General_Category: -_Decimal_NUMBER}', "");
Expect(0, 57, '\P{Is_General_Category: -_Decimal_NUMBER}', "");
Expect(1, 57, '\P{^Is_General_Category: -_Decimal_NUMBER}', "");
Expect(0, 47, '\p{Is_General_Category: -_Decimal_NUMBER}', "");
Expect(1, 47, '\p{^Is_General_Category: -_Decimal_NUMBER}', "");
Expect(1, 47, '\P{Is_General_Category: -_Decimal_NUMBER}', "");
Expect(0, 47, '\P{^Is_General_Category: -_Decimal_NUMBER}', "");
Error('\p{Is_Gc:/a/_ND}');
Error('\P{Is_Gc:/a/_ND}');
Expect(1, 57, '\p{Is_Gc=nd}', "");
Expect(0, 57, '\p{^Is_Gc=nd}', "");
Expect(0, 57, '\P{Is_Gc=nd}', "");
Expect(1, 57, '\P{^Is_Gc=nd}', "");
Expect(0, 47, '\p{Is_Gc=nd}', "");
Expect(1, 47, '\p{^Is_Gc=nd}', "");
Expect(1, 47, '\P{Is_Gc=nd}', "");
Expect(0, 47, '\P{^Is_Gc=nd}', "");
Expect(1, 57, '\p{Is_Gc:   Nd}', "");
Expect(0, 57, '\p{^Is_Gc:   Nd}', "");
Expect(0, 57, '\P{Is_Gc:   Nd}', "");
Expect(1, 57, '\P{^Is_Gc:   Nd}', "");
Expect(0, 47, '\p{Is_Gc:   Nd}', "");
Expect(1, 47, '\p{^Is_Gc:   Nd}', "");
Expect(1, 47, '\P{Is_Gc:   Nd}', "");
Expect(0, 47, '\P{^Is_Gc:   Nd}', "");
Error('\p{Is_Category:  :=Digit}');
Error('\P{Is_Category:  :=Digit}');
Expect(1, 57, '\p{Is_Category=digit}', "");
Expect(0, 57, '\p{^Is_Category=digit}', "");
Expect(0, 57, '\P{Is_Category=digit}', "");
Expect(1, 57, '\P{^Is_Category=digit}', "");
Expect(0, 47, '\p{Is_Category=digit}', "");
Expect(1, 47, '\p{^Is_Category=digit}', "");
Expect(1, 47, '\P{Is_Category=digit}', "");
Expect(0, 47, '\P{^Is_Category=digit}', "");
Expect(1, 57, '\p{Is_Category=	Digit}', "");
Expect(0, 57, '\p{^Is_Category=	Digit}', "");
Expect(0, 57, '\P{Is_Category=	Digit}', "");
Expect(1, 57, '\P{^Is_Category=	Digit}', "");
Expect(0, 47, '\p{Is_Category=	Digit}', "");
Expect(1, 47, '\p{^Is_Category=	Digit}', "");
Expect(1, 47, '\P{Is_Category=	Digit}', "");
Expect(0, 47, '\P{^Is_Category=	Digit}', "");
Error('\p{General_Category= :=PARAGRAPH_Separator}');
Error('\P{General_Category= :=PARAGRAPH_Separator}');
Expect(1, 8233, '\p{General_Category=paragraphseparator}', "");
Expect(0, 8233, '\p{^General_Category=paragraphseparator}', "");
Expect(0, 8233, '\P{General_Category=paragraphseparator}', "");
Expect(1, 8233, '\P{^General_Category=paragraphseparator}', "");
Expect(0, 8232, '\p{General_Category=paragraphseparator}', "");
Expect(1, 8232, '\p{^General_Category=paragraphseparator}', "");
Expect(1, 8232, '\P{General_Category=paragraphseparator}', "");
Expect(0, 8232, '\P{^General_Category=paragraphseparator}', "");
Expect(1, 8233, '\p{General_Category= _ParagraphSeparator}', "");
Expect(0, 8233, '\p{^General_Category= _ParagraphSeparator}', "");
Expect(0, 8233, '\P{General_Category= _ParagraphSeparator}', "");
Expect(1, 8233, '\P{^General_Category= _ParagraphSeparator}', "");
Expect(0, 8232, '\p{General_Category= _ParagraphSeparator}', "");
Expect(1, 8232, '\p{^General_Category= _ParagraphSeparator}', "");
Expect(1, 8232, '\P{General_Category= _ParagraphSeparator}', "");
Expect(0, 8232, '\P{^General_Category= _ParagraphSeparator}', "");
Error('\p{Gc=_-Zp:=}');
Error('\P{Gc=_-Zp:=}');
Expect(1, 8233, '\p{Gc:   zp}', "");
Expect(0, 8233, '\p{^Gc:   zp}', "");
Expect(0, 8233, '\P{Gc:   zp}', "");
Expect(1, 8233, '\P{^Gc:   zp}', "");
Expect(0, 8232, '\p{Gc:   zp}', "");
Expect(1, 8232, '\p{^Gc:   zp}', "");
Expect(1, 8232, '\P{Gc:   zp}', "");
Expect(0, 8232, '\P{^Gc:   zp}', "");
Expect(1, 8233, '\p{Gc=	-ZP}', "");
Expect(0, 8233, '\p{^Gc=	-ZP}', "");
Expect(0, 8233, '\P{Gc=	-ZP}', "");
Expect(1, 8233, '\P{^Gc=	-ZP}', "");
Expect(0, 8232, '\p{Gc=	-ZP}', "");
Expect(1, 8232, '\p{^Gc=	-ZP}', "");
Expect(1, 8232, '\P{Gc=	-ZP}', "");
Expect(0, 8232, '\P{^Gc=	-ZP}', "");
Error('\p{Category=-_Paragraph/a/SEPARATOR}');
Error('\P{Category=-_Paragraph/a/SEPARATOR}');
Expect(1, 8233, '\p{Category=paragraphseparator}', "");
Expect(0, 8233, '\p{^Category=paragraphseparator}', "");
Expect(0, 8233, '\P{Category=paragraphseparator}', "");
Expect(1, 8233, '\P{^Category=paragraphseparator}', "");
Expect(0, 8232, '\p{Category=paragraphseparator}', "");
Expect(1, 8232, '\p{^Category=paragraphseparator}', "");
Expect(1, 8232, '\P{Category=paragraphseparator}', "");
Expect(0, 8232, '\P{^Category=paragraphseparator}', "");
Expect(1, 8233, '\p{Category=_ paragraphSeparator}', "");
Expect(0, 8233, '\p{^Category=_ paragraphSeparator}', "");
Expect(0, 8233, '\P{Category=_ paragraphSeparator}', "");
Expect(1, 8233, '\P{^Category=_ paragraphSeparator}', "");
Expect(0, 8232, '\p{Category=_ paragraphSeparator}', "");
Expect(1, 8232, '\p{^Category=_ paragraphSeparator}', "");
Expect(1, 8232, '\P{Category=_ paragraphSeparator}', "");
Expect(0, 8232, '\P{^Category=_ paragraphSeparator}', "");
Error('\p{Is_General_Category:   /a/	 Zp}');
Error('\P{Is_General_Category:   /a/	 Zp}');
Expect(1, 8233, '\p{Is_General_Category=zp}', "");
Expect(0, 8233, '\p{^Is_General_Category=zp}', "");
Expect(0, 8233, '\P{Is_General_Category=zp}', "");
Expect(1, 8233, '\P{^Is_General_Category=zp}', "");
Expect(0, 8232, '\p{Is_General_Category=zp}', "");
Expect(1, 8232, '\p{^Is_General_Category=zp}', "");
Expect(1, 8232, '\P{Is_General_Category=zp}', "");
Expect(0, 8232, '\P{^Is_General_Category=zp}', "");
Expect(1, 8233, '\p{Is_General_Category= zp}', "");
Expect(0, 8233, '\p{^Is_General_Category= zp}', "");
Expect(0, 8233, '\P{Is_General_Category= zp}', "");
Expect(1, 8233, '\P{^Is_General_Category= zp}', "");
Expect(0, 8232, '\p{Is_General_Category= zp}', "");
Expect(1, 8232, '\p{^Is_General_Category= zp}', "");
Expect(1, 8232, '\P{Is_General_Category= zp}', "");
Expect(0, 8232, '\P{^Is_General_Category= zp}', "");
Error('\p{Is_Gc=__paragraphseparator/a/}');
Error('\P{Is_Gc=__paragraphseparator/a/}');
Expect(1, 8233, '\p{Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\p{^Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\P{Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\P{^Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\p{Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\p{^Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\P{Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\P{^Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\p{Is_Gc=	PARAGRAPHseparator}', "");
Expect(0, 8233, '\p{^Is_Gc=	PARAGRAPHseparator}', "");
Expect(0, 8233, '\P{Is_Gc=	PARAGRAPHseparator}', "");
Expect(1, 8233, '\P{^Is_Gc=	PARAGRAPHseparator}', "");
Expect(0, 8232, '\p{Is_Gc=	PARAGRAPHseparator}', "");
Expect(1, 8232, '\p{^Is_Gc=	PARAGRAPHseparator}', "");
Expect(1, 8232, '\P{Is_Gc=	PARAGRAPHseparator}', "");
Expect(0, 8232, '\P{^Is_Gc=	PARAGRAPHseparator}', "");
Error('\p{Is_Category=_ Zp/a/}');
Error('\P{Is_Category=_ Zp/a/}');
Expect(1, 8233, '\p{Is_Category:	zp}', "");
Expect(0, 8233, '\p{^Is_Category:	zp}', "");
Expect(0, 8233, '\P{Is_Category:	zp}', "");
Expect(1, 8233, '\P{^Is_Category:	zp}', "");
Expect(0, 8232, '\p{Is_Category:	zp}', "");
Expect(1, 8232, '\p{^Is_Category:	zp}', "");
Expect(1, 8232, '\P{Is_Category:	zp}', "");
Expect(0, 8232, '\P{^Is_Category:	zp}', "");
Expect(1, 8233, '\p{Is_Category=	-Zp}', "");
Expect(0, 8233, '\p{^Is_Category=	-Zp}', "");
Expect(0, 8233, '\P{Is_Category=	-Zp}', "");
Expect(1, 8233, '\P{^Is_Category=	-Zp}', "");
Expect(0, 8232, '\p{Is_Category=	-Zp}', "");
Expect(1, 8232, '\p{^Is_Category=	-Zp}', "");
Expect(1, 8232, '\P{Is_Category=	-Zp}', "");
Expect(0, 8232, '\P{^Is_Category=	-Zp}', "");
Error('\p{General_Category=/a/Modifier-LETTER}');
Error('\P{General_Category=/a/Modifier-LETTER}');
Expect(1, 705, '\p{General_Category=modifierletter}', "");
Expect(0, 705, '\p{^General_Category=modifierletter}', "");
Expect(0, 705, '\P{General_Category=modifierletter}', "");
Expect(1, 705, '\P{^General_Category=modifierletter}', "");
Expect(0, 687, '\p{General_Category=modifierletter}', "");
Expect(1, 687, '\p{^General_Category=modifierletter}', "");
Expect(1, 687, '\P{General_Category=modifierletter}', "");
Expect(0, 687, '\P{^General_Category=modifierletter}', "");
Expect(1, 705, '\p{General_Category=_ MODIFIER-Letter}', "");
Expect(0, 705, '\p{^General_Category=_ MODIFIER-Letter}', "");
Expect(0, 705, '\P{General_Category=_ MODIFIER-Letter}', "");
Expect(1, 705, '\P{^General_Category=_ MODIFIER-Letter}', "");
Expect(0, 687, '\p{General_Category=_ MODIFIER-Letter}', "");
Expect(1, 687, '\p{^General_Category=_ MODIFIER-Letter}', "");
Expect(1, 687, '\P{General_Category=_ MODIFIER-Letter}', "");
Expect(0, 687, '\P{^General_Category=_ MODIFIER-Letter}', "");
Error('\p{Gc::=lm}');
Error('\P{Gc::=lm}');
Expect(1, 705, '\p{Gc=lm}', "");
Expect(0, 705, '\p{^Gc=lm}', "");
Expect(0, 705, '\P{Gc=lm}', "");
Expect(1, 705, '\P{^Gc=lm}', "");
Expect(0, 687, '\p{Gc=lm}', "");
Expect(1, 687, '\p{^Gc=lm}', "");
Expect(1, 687, '\P{Gc=lm}', "");
Expect(0, 687, '\P{^Gc=lm}', "");
Expect(1, 705, '\p{Gc= lm}', "");
Expect(0, 705, '\p{^Gc= lm}', "");
Expect(0, 705, '\P{Gc= lm}', "");
Expect(1, 705, '\P{^Gc= lm}', "");
Expect(0, 687, '\p{Gc= lm}', "");
Expect(1, 687, '\p{^Gc= lm}', "");
Expect(1, 687, '\P{Gc= lm}', "");
Expect(0, 687, '\P{^Gc= lm}', "");
Error('\p{Category=_modifier:=LETTER}');
Error('\P{Category=_modifier:=LETTER}');
Expect(1, 705, '\p{Category=modifierletter}', "");
Expect(0, 705, '\p{^Category=modifierletter}', "");
Expect(0, 705, '\P{Category=modifierletter}', "");
Expect(1, 705, '\P{^Category=modifierletter}', "");
Expect(0, 687, '\p{Category=modifierletter}', "");
Expect(1, 687, '\p{^Category=modifierletter}', "");
Expect(1, 687, '\P{Category=modifierletter}', "");
Expect(0, 687, '\P{^Category=modifierletter}', "");
Expect(1, 705, '\p{Category:_Modifier	letter}', "");
Expect(0, 705, '\p{^Category:_Modifier	letter}', "");
Expect(0, 705, '\P{Category:_Modifier	letter}', "");
Expect(1, 705, '\P{^Category:_Modifier	letter}', "");
Expect(0, 687, '\p{Category:_Modifier	letter}', "");
Expect(1, 687, '\p{^Category:_Modifier	letter}', "");
Expect(1, 687, '\P{Category:_Modifier	letter}', "");
Expect(0, 687, '\P{^Category:_Modifier	letter}', "");
Error('\p{Is_General_Category=	-lm/a/}');
Error('\P{Is_General_Category=	-lm/a/}');
Expect(1, 705, '\p{Is_General_Category=lm}', "");
Expect(0, 705, '\p{^Is_General_Category=lm}', "");
Expect(0, 705, '\P{Is_General_Category=lm}', "");
Expect(1, 705, '\P{^Is_General_Category=lm}', "");
Expect(0, 687, '\p{Is_General_Category=lm}', "");
Expect(1, 687, '\p{^Is_General_Category=lm}', "");
Expect(1, 687, '\P{Is_General_Category=lm}', "");
Expect(0, 687, '\P{^Is_General_Category=lm}', "");
Expect(1, 705, '\p{Is_General_Category=	_Lm}', "");
Expect(0, 705, '\p{^Is_General_Category=	_Lm}', "");
Expect(0, 705, '\P{Is_General_Category=	_Lm}', "");
Expect(1, 705, '\P{^Is_General_Category=	_Lm}', "");
Expect(0, 687, '\p{Is_General_Category=	_Lm}', "");
Expect(1, 687, '\p{^Is_General_Category=	_Lm}', "");
Expect(1, 687, '\P{Is_General_Category=	_Lm}', "");
Expect(0, 687, '\P{^Is_General_Category=	_Lm}', "");
Error('\p{Is_Gc=	:=modifier LETTER}');
Error('\P{Is_Gc=	:=modifier LETTER}');
Expect(1, 705, '\p{Is_Gc=modifierletter}', "");
Expect(0, 705, '\p{^Is_Gc=modifierletter}', "");
Expect(0, 705, '\P{Is_Gc=modifierletter}', "");
Expect(1, 705, '\P{^Is_Gc=modifierletter}', "");
Expect(0, 687, '\p{Is_Gc=modifierletter}', "");
Expect(1, 687, '\p{^Is_Gc=modifierletter}', "");
Expect(1, 687, '\P{Is_Gc=modifierletter}', "");
Expect(0, 687, '\P{^Is_Gc=modifierletter}', "");
Expect(1, 705, '\p{Is_Gc=--Modifierletter}', "");
Expect(0, 705, '\p{^Is_Gc=--Modifierletter}', "");
Expect(0, 705, '\P{Is_Gc=--Modifierletter}', "");
Expect(1, 705, '\P{^Is_Gc=--Modifierletter}', "");
Expect(0, 687, '\p{Is_Gc=--Modifierletter}', "");
Expect(1, 687, '\p{^Is_Gc=--Modifierletter}', "");
Expect(1, 687, '\P{Is_Gc=--Modifierletter}', "");
Expect(0, 687, '\P{^Is_Gc=--Modifierletter}', "");
Error('\p{Is_Category=/a/--lm}');
Error('\P{Is_Category=/a/--lm}');
Expect(1, 705, '\p{Is_Category=lm}', "");
Expect(0, 705, '\p{^Is_Category=lm}', "");
Expect(0, 705, '\P{Is_Category=lm}', "");
Expect(1, 705, '\P{^Is_Category=lm}', "");
Expect(0, 687, '\p{Is_Category=lm}', "");
Expect(1, 687, '\p{^Is_Category=lm}', "");
Expect(1, 687, '\P{Is_Category=lm}', "");
Expect(0, 687, '\P{^Is_Category=lm}', "");
Expect(1, 705, '\p{Is_Category=	-Lm}', "");
Expect(0, 705, '\p{^Is_Category=	-Lm}', "");
Expect(0, 705, '\P{Is_Category=	-Lm}', "");
Expect(1, 705, '\P{^Is_Category=	-Lm}', "");
Expect(0, 687, '\p{Is_Category=	-Lm}', "");
Expect(1, 687, '\p{^Is_Category=	-Lm}', "");
Expect(1, 687, '\P{Is_Category=	-Lm}', "");
Expect(0, 687, '\P{^Is_Category=	-Lm}', "");
Error('\p{General_Category=  OTHER:=SYMBOL}');
Error('\P{General_Category=  OTHER:=SYMBOL}');
Expect(1, 167, '\p{General_Category=othersymbol}', "");
Expect(0, 167, '\p{^General_Category=othersymbol}', "");
Expect(0, 167, '\P{General_Category=othersymbol}', "");
Expect(1, 167, '\P{^General_Category=othersymbol}', "");
Expect(0, 165, '\p{General_Category=othersymbol}', "");
Expect(1, 165, '\p{^General_Category=othersymbol}', "");
Expect(1, 165, '\P{General_Category=othersymbol}', "");
Expect(0, 165, '\P{^General_Category=othersymbol}', "");
Expect(1, 167, '\p{General_Category=_	Other-symbol}', "");
Expect(0, 167, '\p{^General_Category=_	Other-symbol}', "");
Expect(0, 167, '\P{General_Category=_	Other-symbol}', "");
Expect(1, 167, '\P{^General_Category=_	Other-symbol}', "");
Expect(0, 165, '\p{General_Category=_	Other-symbol}', "");
Expect(1, 165, '\p{^General_Category=_	Other-symbol}', "");
Expect(1, 165, '\P{General_Category=_	Other-symbol}', "");
Expect(0, 165, '\P{^General_Category=_	Other-symbol}', "");
Error('\p{Gc=-:=so}');
Error('\P{Gc=-:=so}');
Expect(1, 167, '\p{Gc=so}', "");
Expect(0, 167, '\p{^Gc=so}', "");
Expect(0, 167, '\P{Gc=so}', "");
Expect(1, 167, '\P{^Gc=so}', "");
Expect(0, 165, '\p{Gc=so}', "");
Expect(1, 165, '\p{^Gc=so}', "");
Expect(1, 165, '\P{Gc=so}', "");
Expect(0, 165, '\P{^Gc=so}', "");
Expect(1, 167, '\p{Gc= 	SO}', "");
Expect(0, 167, '\p{^Gc= 	SO}', "");
Expect(0, 167, '\P{Gc= 	SO}', "");
Expect(1, 167, '\P{^Gc= 	SO}', "");
Expect(0, 165, '\p{Gc= 	SO}', "");
Expect(1, 165, '\p{^Gc= 	SO}', "");
Expect(1, 165, '\P{Gc= 	SO}', "");
Expect(0, 165, '\P{^Gc= 	SO}', "");
Error('\p{Category:   :=-_OtherSymbol}');
Error('\P{Category:   :=-_OtherSymbol}');
Expect(1, 167, '\p{Category=othersymbol}', "");
Expect(0, 167, '\p{^Category=othersymbol}', "");
Expect(0, 167, '\P{Category=othersymbol}', "");
Expect(1, 167, '\P{^Category=othersymbol}', "");
Expect(0, 165, '\p{Category=othersymbol}', "");
Expect(1, 165, '\p{^Category=othersymbol}', "");
Expect(1, 165, '\P{Category=othersymbol}', "");
Expect(0, 165, '\P{^Category=othersymbol}', "");
Expect(1, 167, '\p{Category: _Other_Symbol}', "");
Expect(0, 167, '\p{^Category: _Other_Symbol}', "");
Expect(0, 167, '\P{Category: _Other_Symbol}', "");
Expect(1, 167, '\P{^Category: _Other_Symbol}', "");
Expect(0, 165, '\p{Category: _Other_Symbol}', "");
Expect(1, 165, '\p{^Category: _Other_Symbol}', "");
Expect(1, 165, '\P{Category: _Other_Symbol}', "");
Expect(0, 165, '\P{^Category: _Other_Symbol}', "");
Error('\p{Is_General_Category= So/a/}');
Error('\P{Is_General_Category= So/a/}');
Expect(1, 167, '\p{Is_General_Category=so}', "");
Expect(0, 167, '\p{^Is_General_Category=so}', "");
Expect(0, 167, '\P{Is_General_Category=so}', "");
Expect(1, 167, '\P{^Is_General_Category=so}', "");
Expect(0, 165, '\p{Is_General_Category=so}', "");
Expect(1, 165, '\p{^Is_General_Category=so}', "");
Expect(1, 165, '\P{Is_General_Category=so}', "");
Expect(0, 165, '\P{^Is_General_Category=so}', "");
Expect(1, 167, '\p{Is_General_Category=- so}', "");
Expect(0, 167, '\p{^Is_General_Category=- so}', "");
Expect(0, 167, '\P{Is_General_Category=- so}', "");
Expect(1, 167, '\P{^Is_General_Category=- so}', "");
Expect(0, 165, '\p{Is_General_Category=- so}', "");
Expect(1, 165, '\p{^Is_General_Category=- so}', "");
Expect(1, 165, '\P{Is_General_Category=- so}', "");
Expect(0, 165, '\P{^Is_General_Category=- so}', "");
Error('\p{Is_Gc= /a/OTHER-symbol}');
Error('\P{Is_Gc= /a/OTHER-symbol}');
Expect(1, 167, '\p{Is_Gc:	othersymbol}', "");
Expect(0, 167, '\p{^Is_Gc:	othersymbol}', "");
Expect(0, 167, '\P{Is_Gc:	othersymbol}', "");
Expect(1, 167, '\P{^Is_Gc:	othersymbol}', "");
Expect(0, 165, '\p{Is_Gc:	othersymbol}', "");
Expect(1, 165, '\p{^Is_Gc:	othersymbol}', "");
Expect(1, 165, '\P{Is_Gc:	othersymbol}', "");
Expect(0, 165, '\P{^Is_Gc:	othersymbol}', "");
Expect(1, 167, '\p{Is_Gc=-_OTHERsymbol}', "");
Expect(0, 167, '\p{^Is_Gc=-_OTHERsymbol}', "");
Expect(0, 167, '\P{Is_Gc=-_OTHERsymbol}', "");
Expect(1, 167, '\P{^Is_Gc=-_OTHERsymbol}', "");
Expect(0, 165, '\p{Is_Gc=-_OTHERsymbol}', "");
Expect(1, 165, '\p{^Is_Gc=-_OTHERsymbol}', "");
Expect(1, 165, '\P{Is_Gc=-_OTHERsymbol}', "");
Expect(0, 165, '\P{^Is_Gc=-_OTHERsymbol}', "");
Error('\p{Is_Category= _So:=}');
Error('\P{Is_Category= _So:=}');
Expect(1, 167, '\p{Is_Category=so}', "");
Expect(0, 167, '\p{^Is_Category=so}', "");
Expect(0, 167, '\P{Is_Category=so}', "");
Expect(1, 167, '\P{^Is_Category=so}', "");
Expect(0, 165, '\p{Is_Category=so}', "");
Expect(1, 165, '\p{^Is_Category=so}', "");
Expect(1, 165, '\P{Is_Category=so}', "");
Expect(0, 165, '\P{^Is_Category=so}', "");
Expect(1, 167, '\p{Is_Category: _SO}', "");
Expect(0, 167, '\p{^Is_Category: _SO}', "");
Expect(0, 167, '\P{Is_Category: _SO}', "");
Expect(1, 167, '\P{^Is_Category: _SO}', "");
Expect(0, 165, '\p{Is_Category: _SO}', "");
Expect(1, 165, '\p{^Is_Category: _SO}', "");
Expect(1, 165, '\P{Is_Category: _SO}', "");
Expect(0, 165, '\P{^Is_Category: _SO}', "");
Error('\p{General_Category= _nonspacing:=Mark}');
Error('\P{General_Category= _nonspacing:=Mark}');
Expect(1, 879, '\p{General_Category=nonspacingmark}', "");
Expect(0, 879, '\p{^General_Category=nonspacingmark}', "");
Expect(0, 879, '\P{General_Category=nonspacingmark}', "");
Expect(1, 879, '\P{^General_Category=nonspacingmark}', "");
Expect(0, 767, '\p{General_Category=nonspacingmark}', "");
Expect(1, 767, '\p{^General_Category=nonspacingmark}', "");
Expect(1, 767, '\P{General_Category=nonspacingmark}', "");
Expect(0, 767, '\P{^General_Category=nonspacingmark}', "");
Expect(1, 879, '\p{General_Category=		Nonspacing	MARK}', "");
Expect(0, 879, '\p{^General_Category=		Nonspacing	MARK}', "");
Expect(0, 879, '\P{General_Category=		Nonspacing	MARK}', "");
Expect(1, 879, '\P{^General_Category=		Nonspacing	MARK}', "");
Expect(0, 767, '\p{General_Category=		Nonspacing	MARK}', "");
Expect(1, 767, '\p{^General_Category=		Nonspacing	MARK}', "");
Expect(1, 767, '\P{General_Category=		Nonspacing	MARK}', "");
Expect(0, 767, '\P{^General_Category=		Nonspacing	MARK}', "");
Error('\p{Gc=/a/ _MN}');
Error('\P{Gc=/a/ _MN}');
Expect(1, 879, '\p{Gc=mn}', "");
Expect(0, 879, '\p{^Gc=mn}', "");
Expect(0, 879, '\P{Gc=mn}', "");
Expect(1, 879, '\P{^Gc=mn}', "");
Expect(0, 767, '\p{Gc=mn}', "");
Expect(1, 767, '\p{^Gc=mn}', "");
Expect(1, 767, '\P{Gc=mn}', "");
Expect(0, 767, '\P{^Gc=mn}', "");
Expect(1, 879, '\p{Gc= -mn}', "");
Expect(0, 879, '\p{^Gc= -mn}', "");
Expect(0, 879, '\P{Gc= -mn}', "");
Expect(1, 879, '\P{^Gc= -mn}', "");
Expect(0, 767, '\p{Gc= -mn}', "");
Expect(1, 767, '\p{^Gc= -mn}', "");
Expect(1, 767, '\P{Gc= -mn}', "");
Expect(0, 767, '\P{^Gc= -mn}', "");
Error('\p{Category=	-NONSPACING mark/a/}');
Error('\P{Category=	-NONSPACING mark/a/}');
Expect(1, 879, '\p{Category=nonspacingmark}', "");
Expect(0, 879, '\p{^Category=nonspacingmark}', "");
Expect(0, 879, '\P{Category=nonspacingmark}', "");
Expect(1, 879, '\P{^Category=nonspacingmark}', "");
Expect(0, 767, '\p{Category=nonspacingmark}', "");
Expect(1, 767, '\p{^Category=nonspacingmark}', "");
Expect(1, 767, '\P{Category=nonspacingmark}', "");
Expect(0, 767, '\P{^Category=nonspacingmark}', "");
Expect(1, 879, '\p{Category:	-Nonspacing mark}', "");
Expect(0, 879, '\p{^Category:	-Nonspacing mark}', "");
Expect(0, 879, '\P{Category:	-Nonspacing mark}', "");
Expect(1, 879, '\P{^Category:	-Nonspacing mark}', "");
Expect(0, 767, '\p{Category:	-Nonspacing mark}', "");
Expect(1, 767, '\p{^Category:	-Nonspacing mark}', "");
Expect(1, 767, '\P{Category:	-Nonspacing mark}', "");
Expect(0, 767, '\P{^Category:	-Nonspacing mark}', "");
Error('\p{Is_General_Category=mn:=}');
Error('\P{Is_General_Category=mn:=}');
Expect(1, 879, '\p{Is_General_Category=mn}', "");
Expect(0, 879, '\p{^Is_General_Category=mn}', "");
Expect(0, 879, '\P{Is_General_Category=mn}', "");
Expect(1, 879, '\P{^Is_General_Category=mn}', "");
Expect(0, 767, '\p{Is_General_Category=mn}', "");
Expect(1, 767, '\p{^Is_General_Category=mn}', "");
Expect(1, 767, '\P{Is_General_Category=mn}', "");
Expect(0, 767, '\P{^Is_General_Category=mn}', "");
Expect(1, 879, '\p{Is_General_Category:   _-Mn}', "");
Expect(0, 879, '\p{^Is_General_Category:   _-Mn}', "");
Expect(0, 879, '\P{Is_General_Category:   _-Mn}', "");
Expect(1, 879, '\P{^Is_General_Category:   _-Mn}', "");
Expect(0, 767, '\p{Is_General_Category:   _-Mn}', "");
Expect(1, 767, '\p{^Is_General_Category:   _-Mn}', "");
Expect(1, 767, '\P{Is_General_Category:   _-Mn}', "");
Expect(0, 767, '\P{^Is_General_Category:   _-Mn}', "");
Error('\p{Is_Gc=		Nonspacing-Mark/a/}');
Error('\P{Is_Gc=		Nonspacing-Mark/a/}');
Expect(1, 879, '\p{Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Gc=_NONSPACINGMARK}', "");
Expect(0, 879, '\p{^Is_Gc=_NONSPACINGMARK}', "");
Expect(0, 879, '\P{Is_Gc=_NONSPACINGMARK}', "");
Expect(1, 879, '\P{^Is_Gc=_NONSPACINGMARK}', "");
Expect(0, 767, '\p{Is_Gc=_NONSPACINGMARK}', "");
Expect(1, 767, '\p{^Is_Gc=_NONSPACINGMARK}', "");
Expect(1, 767, '\P{Is_Gc=_NONSPACINGMARK}', "");
Expect(0, 767, '\P{^Is_Gc=_NONSPACINGMARK}', "");
Error('\p{Is_Category:  /a/MN}');
Error('\P{Is_Category:  /a/MN}');
Expect(1, 879, '\p{Is_Category=mn}', "");
Expect(0, 879, '\p{^Is_Category=mn}', "");
Expect(0, 879, '\P{Is_Category=mn}', "");
Expect(1, 879, '\P{^Is_Category=mn}', "");
Expect(0, 767, '\p{Is_Category=mn}', "");
Expect(1, 767, '\p{^Is_Category=mn}', "");
Expect(1, 767, '\P{Is_Category=mn}', "");
Expect(0, 767, '\P{^Is_Category=mn}', "");
Expect(1, 879, '\p{Is_Category=	MN}', "");
Expect(0, 879, '\p{^Is_Category=	MN}', "");
Expect(0, 879, '\P{Is_Category=	MN}', "");
Expect(1, 879, '\P{^Is_Category=	MN}', "");
Expect(0, 767, '\p{Is_Category=	MN}', "");
Expect(1, 767, '\p{^Is_Category=	MN}', "");
Expect(1, 767, '\P{Is_Category=	MN}', "");
Expect(0, 767, '\P{^Is_Category=	MN}', "");
Error('\p{General_Category=:=		DASH	PUNCTUATION}');
Error('\P{General_Category=:=		DASH	PUNCTUATION}');
Expect(1, 45, '\p{General_Category=dashpunctuation}', "");
Expect(0, 45, '\p{^General_Category=dashpunctuation}', "");
Expect(0, 45, '\P{General_Category=dashpunctuation}', "");
Expect(1, 45, '\P{^General_Category=dashpunctuation}', "");
Expect(0, 44, '\p{General_Category=dashpunctuation}', "");
Expect(1, 44, '\p{^General_Category=dashpunctuation}', "");
Expect(1, 44, '\P{General_Category=dashpunctuation}', "");
Expect(0, 44, '\P{^General_Category=dashpunctuation}', "");
Expect(1, 45, '\p{General_Category=- Dash punctuation}', "");
Expect(0, 45, '\p{^General_Category=- Dash punctuation}', "");
Expect(0, 45, '\P{General_Category=- Dash punctuation}', "");
Expect(1, 45, '\P{^General_Category=- Dash punctuation}', "");
Expect(0, 44, '\p{General_Category=- Dash punctuation}', "");
Expect(1, 44, '\p{^General_Category=- Dash punctuation}', "");
Expect(1, 44, '\P{General_Category=- Dash punctuation}', "");
Expect(0, 44, '\P{^General_Category=- Dash punctuation}', "");
Error('\p{Gc=-:=pd}');
Error('\P{Gc=-:=pd}');
Expect(1, 45, '\p{Gc=pd}', "");
Expect(0, 45, '\p{^Gc=pd}', "");
Expect(0, 45, '\P{Gc=pd}', "");
Expect(1, 45, '\P{^Gc=pd}', "");
Expect(0, 44, '\p{Gc=pd}', "");
Expect(1, 44, '\p{^Gc=pd}', "");
Expect(1, 44, '\P{Gc=pd}', "");
Expect(0, 44, '\P{^Gc=pd}', "");
Expect(1, 45, '\p{Gc= Pd}', "");
Expect(0, 45, '\p{^Gc= Pd}', "");
Expect(0, 45, '\P{Gc= Pd}', "");
Expect(1, 45, '\P{^Gc= Pd}', "");
Expect(0, 44, '\p{Gc= Pd}', "");
Expect(1, 44, '\p{^Gc= Pd}', "");
Expect(1, 44, '\P{Gc= Pd}', "");
Expect(0, 44, '\P{^Gc= Pd}', "");
Error('\p{Category=:=_-DashPUNCTUATION}');
Error('\P{Category=:=_-DashPUNCTUATION}');
Expect(1, 45, '\p{Category=dashpunctuation}', "");
Expect(0, 45, '\p{^Category=dashpunctuation}', "");
Expect(0, 45, '\P{Category=dashpunctuation}', "");
Expect(1, 45, '\P{^Category=dashpunctuation}', "");
Expect(0, 44, '\p{Category=dashpunctuation}', "");
Expect(1, 44, '\p{^Category=dashpunctuation}', "");
Expect(1, 44, '\P{Category=dashpunctuation}', "");
Expect(0, 44, '\P{^Category=dashpunctuation}', "");
Expect(1, 45, '\p{Category= 	dashPunctuation}', "");
Expect(0, 45, '\p{^Category= 	dashPunctuation}', "");
Expect(0, 45, '\P{Category= 	dashPunctuation}', "");
Expect(1, 45, '\P{^Category= 	dashPunctuation}', "");
Expect(0, 44, '\p{Category= 	dashPunctuation}', "");
Expect(1, 44, '\p{^Category= 	dashPunctuation}', "");
Expect(1, 44, '\P{Category= 	dashPunctuation}', "");
Expect(0, 44, '\P{^Category= 	dashPunctuation}', "");
Error('\p{Is_General_Category=/a/  Pd}');
Error('\P{Is_General_Category=/a/  Pd}');
Expect(1, 45, '\p{Is_General_Category=pd}', "");
Expect(0, 45, '\p{^Is_General_Category=pd}', "");
Expect(0, 45, '\P{Is_General_Category=pd}', "");
Expect(1, 45, '\P{^Is_General_Category=pd}', "");
Expect(0, 44, '\p{Is_General_Category=pd}', "");
Expect(1, 44, '\p{^Is_General_Category=pd}', "");
Expect(1, 44, '\P{Is_General_Category=pd}', "");
Expect(0, 44, '\P{^Is_General_Category=pd}', "");
Expect(1, 45, '\p{Is_General_Category:	Pd}', "");
Expect(0, 45, '\p{^Is_General_Category:	Pd}', "");
Expect(0, 45, '\P{Is_General_Category:	Pd}', "");
Expect(1, 45, '\P{^Is_General_Category:	Pd}', "");
Expect(0, 44, '\p{Is_General_Category:	Pd}', "");
Expect(1, 44, '\p{^Is_General_Category:	Pd}', "");
Expect(1, 44, '\P{Is_General_Category:	Pd}', "");
Expect(0, 44, '\P{^Is_General_Category:	Pd}', "");
Error('\p{Is_Gc=-_Dash/a/Punctuation}');
Error('\P{Is_Gc=-_Dash/a/Punctuation}');
Expect(1, 45, '\p{Is_Gc=dashpunctuation}', "");
Expect(0, 45, '\p{^Is_Gc=dashpunctuation}', "");
Expect(0, 45, '\P{Is_Gc=dashpunctuation}', "");
Expect(1, 45, '\P{^Is_Gc=dashpunctuation}', "");
Expect(0, 44, '\p{Is_Gc=dashpunctuation}', "");
Expect(1, 44, '\p{^Is_Gc=dashpunctuation}', "");
Expect(1, 44, '\P{Is_Gc=dashpunctuation}', "");
Expect(0, 44, '\P{^Is_Gc=dashpunctuation}', "");
Expect(1, 45, '\p{Is_Gc= _Dash_Punctuation}', "");
Expect(0, 45, '\p{^Is_Gc= _Dash_Punctuation}', "");
Expect(0, 45, '\P{Is_Gc= _Dash_Punctuation}', "");
Expect(1, 45, '\P{^Is_Gc= _Dash_Punctuation}', "");
Expect(0, 44, '\p{Is_Gc= _Dash_Punctuation}', "");
Expect(1, 44, '\p{^Is_Gc= _Dash_Punctuation}', "");
Expect(1, 44, '\P{Is_Gc= _Dash_Punctuation}', "");
Expect(0, 44, '\P{^Is_Gc= _Dash_Punctuation}', "");
Error('\p{Is_Category=:=PD}');
Error('\P{Is_Category=:=PD}');
Expect(1, 45, '\p{Is_Category=pd}', "");
Expect(0, 45, '\p{^Is_Category=pd}', "");
Expect(0, 45, '\P{Is_Category=pd}', "");
Expect(1, 45, '\P{^Is_Category=pd}', "");
Expect(0, 44, '\p{Is_Category=pd}', "");
Expect(1, 44, '\p{^Is_Category=pd}', "");
Expect(1, 44, '\P{Is_Category=pd}', "");
Expect(0, 44, '\P{^Is_Category=pd}', "");
Expect(1, 45, '\p{Is_Category=	PD}', "");
Expect(0, 45, '\p{^Is_Category=	PD}', "");
Expect(0, 45, '\P{Is_Category=	PD}', "");
Expect(1, 45, '\P{^Is_Category=	PD}', "");
Expect(0, 44, '\p{Is_Category=	PD}', "");
Expect(1, 44, '\p{^Is_Category=	PD}', "");
Expect(1, 44, '\P{Is_Category=	PD}', "");
Expect(0, 44, '\P{^Is_Category=	PD}', "");
Error('\p{General_Category=--letter Number:=}');
Error('\P{General_Category=--letter Number:=}');
Expect(1, 5872, '\p{General_Category=letternumber}', "");
Expect(0, 5872, '\p{^General_Category=letternumber}', "");
Expect(0, 5872, '\P{General_Category=letternumber}', "");
Expect(1, 5872, '\P{^General_Category=letternumber}', "");
Expect(0, 5869, '\p{General_Category=letternumber}', "");
Expect(1, 5869, '\p{^General_Category=letternumber}', "");
Expect(1, 5869, '\P{General_Category=letternumber}', "");
Expect(0, 5869, '\P{^General_Category=letternumber}', "");
Expect(1, 5872, '\p{General_Category= Letter-Number}', "");
Expect(0, 5872, '\p{^General_Category= Letter-Number}', "");
Expect(0, 5872, '\P{General_Category= Letter-Number}', "");
Expect(1, 5872, '\P{^General_Category= Letter-Number}', "");
Expect(0, 5869, '\p{General_Category= Letter-Number}', "");
Expect(1, 5869, '\p{^General_Category= Letter-Number}', "");
Expect(1, 5869, '\P{General_Category= Letter-Number}', "");
Expect(0, 5869, '\P{^General_Category= Letter-Number}', "");
Error('\p{Gc=	:=nl}');
Error('\P{Gc=	:=nl}');
Expect(1, 5872, '\p{Gc=nl}', "");
Expect(0, 5872, '\p{^Gc=nl}', "");
Expect(0, 5872, '\P{Gc=nl}', "");
Expect(1, 5872, '\P{^Gc=nl}', "");
Expect(0, 5869, '\p{Gc=nl}', "");
Expect(1, 5869, '\p{^Gc=nl}', "");
Expect(1, 5869, '\P{Gc=nl}', "");
Expect(0, 5869, '\P{^Gc=nl}', "");
Expect(1, 5872, '\p{Gc=	 Nl}', "");
Expect(0, 5872, '\p{^Gc=	 Nl}', "");
Expect(0, 5872, '\P{Gc=	 Nl}', "");
Expect(1, 5872, '\P{^Gc=	 Nl}', "");
Expect(0, 5869, '\p{Gc=	 Nl}', "");
Expect(1, 5869, '\p{^Gc=	 Nl}', "");
Expect(1, 5869, '\P{Gc=	 Nl}', "");
Expect(0, 5869, '\P{^Gc=	 Nl}', "");
Error('\p{Category:	/a/	 LETTER	Number}');
Error('\P{Category:	/a/	 LETTER	Number}');
Expect(1, 5872, '\p{Category=letternumber}', "");
Expect(0, 5872, '\p{^Category=letternumber}', "");
Expect(0, 5872, '\P{Category=letternumber}', "");
Expect(1, 5872, '\P{^Category=letternumber}', "");
Expect(0, 5869, '\p{Category=letternumber}', "");
Expect(1, 5869, '\p{^Category=letternumber}', "");
Expect(1, 5869, '\P{Category=letternumber}', "");
Expect(0, 5869, '\P{^Category=letternumber}', "");
Expect(1, 5872, '\p{Category=- letter-NUMBER}', "");
Expect(0, 5872, '\p{^Category=- letter-NUMBER}', "");
Expect(0, 5872, '\P{Category=- letter-NUMBER}', "");
Expect(1, 5872, '\P{^Category=- letter-NUMBER}', "");
Expect(0, 5869, '\p{Category=- letter-NUMBER}', "");
Expect(1, 5869, '\p{^Category=- letter-NUMBER}', "");
Expect(1, 5869, '\P{Category=- letter-NUMBER}', "");
Expect(0, 5869, '\P{^Category=- letter-NUMBER}', "");
Error('\p{Is_General_Category=:=	_NL}');
Error('\P{Is_General_Category=:=	_NL}');
Expect(1, 5872, '\p{Is_General_Category=nl}', "");
Expect(0, 5872, '\p{^Is_General_Category=nl}', "");
Expect(0, 5872, '\P{Is_General_Category=nl}', "");
Expect(1, 5872, '\P{^Is_General_Category=nl}', "");
Expect(0, 5869, '\p{Is_General_Category=nl}', "");
Expect(1, 5869, '\p{^Is_General_Category=nl}', "");
Expect(1, 5869, '\P{Is_General_Category=nl}', "");
Expect(0, 5869, '\P{^Is_General_Category=nl}', "");
Expect(1, 5872, '\p{Is_General_Category:   -_Nl}', "");
Expect(0, 5872, '\p{^Is_General_Category:   -_Nl}', "");
Expect(0, 5872, '\P{Is_General_Category:   -_Nl}', "");
Expect(1, 5872, '\P{^Is_General_Category:   -_Nl}', "");
Expect(0, 5869, '\p{Is_General_Category:   -_Nl}', "");
Expect(1, 5869, '\p{^Is_General_Category:   -_Nl}', "");
Expect(1, 5869, '\P{Is_General_Category:   -_Nl}', "");
Expect(0, 5869, '\P{^Is_General_Category:   -_Nl}', "");
Error('\p{Is_Gc= 	Letter:=Number}');
Error('\P{Is_Gc= 	Letter:=Number}');
Expect(1, 5872, '\p{Is_Gc=letternumber}', "");
Expect(0, 5872, '\p{^Is_Gc=letternumber}', "");
Expect(0, 5872, '\P{Is_Gc=letternumber}', "");
Expect(1, 5872, '\P{^Is_Gc=letternumber}', "");
Expect(0, 5869, '\p{Is_Gc=letternumber}', "");
Expect(1, 5869, '\p{^Is_Gc=letternumber}', "");
Expect(1, 5869, '\P{Is_Gc=letternumber}', "");
Expect(0, 5869, '\P{^Is_Gc=letternumber}', "");
Expect(1, 5872, '\p{Is_Gc=  letterNumber}', "");
Expect(0, 5872, '\p{^Is_Gc=  letterNumber}', "");
Expect(0, 5872, '\P{Is_Gc=  letterNumber}', "");
Expect(1, 5872, '\P{^Is_Gc=  letterNumber}', "");
Expect(0, 5869, '\p{Is_Gc=  letterNumber}', "");
Expect(1, 5869, '\p{^Is_Gc=  letterNumber}', "");
Expect(1, 5869, '\P{Is_Gc=  letterNumber}', "");
Expect(0, 5869, '\P{^Is_Gc=  letterNumber}', "");
Error('\p{Is_Category:	:=	_Nl}');
Error('\P{Is_Category:	:=	_Nl}');
Expect(1, 5872, '\p{Is_Category=nl}', "");
Expect(0, 5872, '\p{^Is_Category=nl}', "");
Expect(0, 5872, '\P{Is_Category=nl}', "");
Expect(1, 5872, '\P{^Is_Category=nl}', "");
Expect(0, 5869, '\p{Is_Category=nl}', "");
Expect(1, 5869, '\p{^Is_Category=nl}', "");
Expect(1, 5869, '\P{Is_Category=nl}', "");
Expect(0, 5869, '\P{^Is_Category=nl}', "");
Expect(1, 5872, '\p{Is_Category=__Nl}', "");
Expect(0, 5872, '\p{^Is_Category=__Nl}', "");
Expect(0, 5872, '\P{Is_Category=__Nl}', "");
Expect(1, 5872, '\P{^Is_Category=__Nl}', "");
Expect(0, 5869, '\p{Is_Category=__Nl}', "");
Expect(1, 5869, '\p{^Is_Category=__Nl}', "");
Expect(1, 5869, '\P{Is_Category=__Nl}', "");
Expect(0, 5869, '\P{^Is_Category=__Nl}', "");
Error('\p{General_Category= :=INITIAL_Punctuation}');
Error('\P{General_Category= :=INITIAL_Punctuation}');
Expect(1, 171, '\p{General_Category=initialpunctuation}', "");
Expect(0, 171, '\p{^General_Category=initialpunctuation}', "");
Expect(0, 171, '\P{General_Category=initialpunctuation}', "");
Expect(1, 171, '\P{^General_Category=initialpunctuation}', "");
Expect(0, 170, '\p{General_Category=initialpunctuation}', "");
Expect(1, 170, '\p{^General_Category=initialpunctuation}', "");
Expect(1, 170, '\P{General_Category=initialpunctuation}', "");
Expect(0, 170, '\P{^General_Category=initialpunctuation}', "");
Expect(1, 171, '\p{General_Category=	 InitialPUNCTUATION}', "");
Expect(0, 171, '\p{^General_Category=	 InitialPUNCTUATION}', "");
Expect(0, 171, '\P{General_Category=	 InitialPUNCTUATION}', "");
Expect(1, 171, '\P{^General_Category=	 InitialPUNCTUATION}', "");
Expect(0, 170, '\p{General_Category=	 InitialPUNCTUATION}', "");
Expect(1, 170, '\p{^General_Category=	 InitialPUNCTUATION}', "");
Expect(1, 170, '\P{General_Category=	 InitialPUNCTUATION}', "");
Expect(0, 170, '\P{^General_Category=	 InitialPUNCTUATION}', "");
Error('\p{Gc=  Pi:=}');
Error('\P{Gc=  Pi:=}');
Expect(1, 171, '\p{Gc=pi}', "");
Expect(0, 171, '\p{^Gc=pi}', "");
Expect(0, 171, '\P{Gc=pi}', "");
Expect(1, 171, '\P{^Gc=pi}', "");
Expect(0, 170, '\p{Gc=pi}', "");
Expect(1, 170, '\p{^Gc=pi}', "");
Expect(1, 170, '\P{Gc=pi}', "");
Expect(0, 170, '\P{^Gc=pi}', "");
Expect(1, 171, '\p{Gc=	 pi}', "");
Expect(0, 171, '\p{^Gc=	 pi}', "");
Expect(0, 171, '\P{Gc=	 pi}', "");
Expect(1, 171, '\P{^Gc=	 pi}', "");
Expect(0, 170, '\p{Gc=	 pi}', "");
Expect(1, 170, '\p{^Gc=	 pi}', "");
Expect(1, 170, '\P{Gc=	 pi}', "");
Expect(0, 170, '\P{^Gc=	 pi}', "");
Error('\p{Category= :=Initial	Punctuation}');
Error('\P{Category= :=Initial	Punctuation}');
Expect(1, 171, '\p{Category:initialpunctuation}', "");
Expect(0, 171, '\p{^Category:initialpunctuation}', "");
Expect(0, 171, '\P{Category:initialpunctuation}', "");
Expect(1, 171, '\P{^Category:initialpunctuation}', "");
Expect(0, 170, '\p{Category:initialpunctuation}', "");
Expect(1, 170, '\p{^Category:initialpunctuation}', "");
Expect(1, 170, '\P{Category:initialpunctuation}', "");
Expect(0, 170, '\P{^Category:initialpunctuation}', "");
Expect(1, 171, '\p{Category= -Initial_Punctuation}', "");
Expect(0, 171, '\p{^Category= -Initial_Punctuation}', "");
Expect(0, 171, '\P{Category= -Initial_Punctuation}', "");
Expect(1, 171, '\P{^Category= -Initial_Punctuation}', "");
Expect(0, 170, '\p{Category= -Initial_Punctuation}', "");
Expect(1, 170, '\p{^Category= -Initial_Punctuation}', "");
Expect(1, 170, '\P{Category= -Initial_Punctuation}', "");
Expect(0, 170, '\P{^Category= -Initial_Punctuation}', "");
Error('\p{Is_General_Category=__pi:=}');
Error('\P{Is_General_Category=__pi:=}');
Expect(1, 171, '\p{Is_General_Category: pi}', "");
Expect(0, 171, '\p{^Is_General_Category: pi}', "");
Expect(0, 171, '\P{Is_General_Category: pi}', "");
Expect(1, 171, '\P{^Is_General_Category: pi}', "");
Expect(0, 170, '\p{Is_General_Category: pi}', "");
Expect(1, 170, '\p{^Is_General_Category: pi}', "");
Expect(1, 170, '\P{Is_General_Category: pi}', "");
Expect(0, 170, '\P{^Is_General_Category: pi}', "");
Expect(1, 171, '\p{Is_General_Category= -pi}', "");
Expect(0, 171, '\p{^Is_General_Category= -pi}', "");
Expect(0, 171, '\P{Is_General_Category= -pi}', "");
Expect(1, 171, '\P{^Is_General_Category= -pi}', "");
Expect(0, 170, '\p{Is_General_Category= -pi}', "");
Expect(1, 170, '\p{^Is_General_Category= -pi}', "");
Expect(1, 170, '\P{Is_General_Category= -pi}', "");
Expect(0, 170, '\P{^Is_General_Category= -pi}', "");
Error('\p{Is_Gc=- Initial	PUNCTUATION/a/}');
Error('\P{Is_Gc=- Initial	PUNCTUATION/a/}');
Expect(1, 171, '\p{Is_Gc=initialpunctuation}', "");
Expect(0, 171, '\p{^Is_Gc=initialpunctuation}', "");
Expect(0, 171, '\P{Is_Gc=initialpunctuation}', "");
Expect(1, 171, '\P{^Is_Gc=initialpunctuation}', "");
Expect(0, 170, '\p{Is_Gc=initialpunctuation}', "");
Expect(1, 170, '\p{^Is_Gc=initialpunctuation}', "");
Expect(1, 170, '\P{Is_Gc=initialpunctuation}', "");
Expect(0, 170, '\P{^Is_Gc=initialpunctuation}', "");
Expect(1, 171, '\p{Is_Gc= 	Initial-Punctuation}', "");
Expect(0, 171, '\p{^Is_Gc= 	Initial-Punctuation}', "");
Expect(0, 171, '\P{Is_Gc= 	Initial-Punctuation}', "");
Expect(1, 171, '\P{^Is_Gc= 	Initial-Punctuation}', "");
Expect(0, 170, '\p{Is_Gc= 	Initial-Punctuation}', "");
Expect(1, 170, '\p{^Is_Gc= 	Initial-Punctuation}', "");
Expect(1, 170, '\P{Is_Gc= 	Initial-Punctuation}', "");
Expect(0, 170, '\P{^Is_Gc= 	Initial-Punctuation}', "");
Error('\p{Is_Category:	/a/- Pi}');
Error('\P{Is_Category:	/a/- Pi}');
Expect(1, 171, '\p{Is_Category=pi}', "");
Expect(0, 171, '\p{^Is_Category=pi}', "");
Expect(0, 171, '\P{Is_Category=pi}', "");
Expect(1, 171, '\P{^Is_Category=pi}', "");
Expect(0, 170, '\p{Is_Category=pi}', "");
Expect(1, 170, '\p{^Is_Category=pi}', "");
Expect(1, 170, '\P{Is_Category=pi}', "");
Expect(0, 170, '\P{^Is_Category=pi}', "");
Expect(1, 171, '\p{Is_Category= 	PI}', "");
Expect(0, 171, '\p{^Is_Category= 	PI}', "");
Expect(0, 171, '\P{Is_Category= 	PI}', "");
Expect(1, 171, '\P{^Is_Category= 	PI}', "");
Expect(0, 170, '\p{Is_Category= 	PI}', "");
Expect(1, 170, '\p{^Is_Category= 	PI}', "");
Expect(1, 170, '\P{Is_Category= 	PI}', "");
Expect(0, 170, '\P{^Is_Category= 	PI}', "");
Error('\p{General_Category:   /a/CurrencySymbol}');
Error('\P{General_Category:   /a/CurrencySymbol}');
Expect(1, 36, '\p{General_Category=currencysymbol}', "");
Expect(0, 36, '\p{^General_Category=currencysymbol}', "");
Expect(0, 36, '\P{General_Category=currencysymbol}', "");
Expect(1, 36, '\P{^General_Category=currencysymbol}', "");
Expect(0, 35, '\p{General_Category=currencysymbol}', "");
Expect(1, 35, '\p{^General_Category=currencysymbol}', "");
Expect(1, 35, '\P{General_Category=currencysymbol}', "");
Expect(0, 35, '\P{^General_Category=currencysymbol}', "");
Expect(1, 36, '\p{General_Category=		currency_Symbol}', "");
Expect(0, 36, '\p{^General_Category=		currency_Symbol}', "");
Expect(0, 36, '\P{General_Category=		currency_Symbol}', "");
Expect(1, 36, '\P{^General_Category=		currency_Symbol}', "");
Expect(0, 35, '\p{General_Category=		currency_Symbol}', "");
Expect(1, 35, '\p{^General_Category=		currency_Symbol}', "");
Expect(1, 35, '\P{General_Category=		currency_Symbol}', "");
Expect(0, 35, '\P{^General_Category=		currency_Symbol}', "");
Error('\p{Gc=:=	_Sc}');
Error('\P{Gc=:=	_Sc}');
Expect(1, 36, '\p{Gc=sc}', "");
Expect(0, 36, '\p{^Gc=sc}', "");
Expect(0, 36, '\P{Gc=sc}', "");
Expect(1, 36, '\P{^Gc=sc}', "");
Expect(0, 35, '\p{Gc=sc}', "");
Expect(1, 35, '\p{^Gc=sc}', "");
Expect(1, 35, '\P{Gc=sc}', "");
Expect(0, 35, '\P{^Gc=sc}', "");
Expect(1, 36, '\p{Gc= 	Sc}', "");
Expect(0, 36, '\p{^Gc= 	Sc}', "");
Expect(0, 36, '\P{Gc= 	Sc}', "");
Expect(1, 36, '\P{^Gc= 	Sc}', "");
Expect(0, 35, '\p{Gc= 	Sc}', "");
Expect(1, 35, '\p{^Gc= 	Sc}', "");
Expect(1, 35, '\P{Gc= 	Sc}', "");
Expect(0, 35, '\P{^Gc= 	Sc}', "");
Error('\p{Category=  currency_symbol/a/}');
Error('\P{Category=  currency_symbol/a/}');
Expect(1, 36, '\p{Category:   currencysymbol}', "");
Expect(0, 36, '\p{^Category:   currencysymbol}', "");
Expect(0, 36, '\P{Category:   currencysymbol}', "");
Expect(1, 36, '\P{^Category:   currencysymbol}', "");
Expect(0, 35, '\p{Category:   currencysymbol}', "");
Expect(1, 35, '\p{^Category:   currencysymbol}', "");
Expect(1, 35, '\P{Category:   currencysymbol}', "");
Expect(0, 35, '\P{^Category:   currencysymbol}', "");
Expect(1, 36, '\p{Category=_ CurrencySymbol}', "");
Expect(0, 36, '\p{^Category=_ CurrencySymbol}', "");
Expect(0, 36, '\P{Category=_ CurrencySymbol}', "");
Expect(1, 36, '\P{^Category=_ CurrencySymbol}', "");
Expect(0, 35, '\p{Category=_ CurrencySymbol}', "");
Expect(1, 35, '\p{^Category=_ CurrencySymbol}', "");
Expect(1, 35, '\P{Category=_ CurrencySymbol}', "");
Expect(0, 35, '\P{^Category=_ CurrencySymbol}', "");
Error('\p{Is_General_Category= 	Sc/a/}');
Error('\P{Is_General_Category= 	Sc/a/}');
Expect(1, 36, '\p{Is_General_Category:	sc}', "");
Expect(0, 36, '\p{^Is_General_Category:	sc}', "");
Expect(0, 36, '\P{Is_General_Category:	sc}', "");
Expect(1, 36, '\P{^Is_General_Category:	sc}', "");
Expect(0, 35, '\p{Is_General_Category:	sc}', "");
Expect(1, 35, '\p{^Is_General_Category:	sc}', "");
Expect(1, 35, '\P{Is_General_Category:	sc}', "");
Expect(0, 35, '\P{^Is_General_Category:	sc}', "");
Expect(1, 36, '\p{Is_General_Category=  Sc}', "");
Expect(0, 36, '\p{^Is_General_Category=  Sc}', "");
Expect(0, 36, '\P{Is_General_Category=  Sc}', "");
Expect(1, 36, '\P{^Is_General_Category=  Sc}', "");
Expect(0, 35, '\p{Is_General_Category=  Sc}', "");
Expect(1, 35, '\p{^Is_General_Category=  Sc}', "");
Expect(1, 35, '\P{Is_General_Category=  Sc}', "");
Expect(0, 35, '\P{^Is_General_Category=  Sc}', "");
Error('\p{Is_Gc=:=currency	symbol}');
Error('\P{Is_Gc=:=currency	symbol}');
Expect(1, 36, '\p{Is_Gc:	currencysymbol}', "");
Expect(0, 36, '\p{^Is_Gc:	currencysymbol}', "");
Expect(0, 36, '\P{Is_Gc:	currencysymbol}', "");
Expect(1, 36, '\P{^Is_Gc:	currencysymbol}', "");
Expect(0, 35, '\p{Is_Gc:	currencysymbol}', "");
Expect(1, 35, '\p{^Is_Gc:	currencysymbol}', "");
Expect(1, 35, '\P{Is_Gc:	currencysymbol}', "");
Expect(0, 35, '\P{^Is_Gc:	currencysymbol}', "");
Expect(1, 36, '\p{Is_Gc=-	Currency_SYMBOL}', "");
Expect(0, 36, '\p{^Is_Gc=-	Currency_SYMBOL}', "");
Expect(0, 36, '\P{Is_Gc=-	Currency_SYMBOL}', "");
Expect(1, 36, '\P{^Is_Gc=-	Currency_SYMBOL}', "");
Expect(0, 35, '\p{Is_Gc=-	Currency_SYMBOL}', "");
Expect(1, 35, '\p{^Is_Gc=-	Currency_SYMBOL}', "");
Expect(1, 35, '\P{Is_Gc=-	Currency_SYMBOL}', "");
Expect(0, 35, '\P{^Is_Gc=-	Currency_SYMBOL}', "");
Error('\p{Is_Category:   /a/-	Sc}');
Error('\P{Is_Category:   /a/-	Sc}');
Expect(1, 36, '\p{Is_Category=sc}', "");
Expect(0, 36, '\p{^Is_Category=sc}', "");
Expect(0, 36, '\P{Is_Category=sc}', "");
Expect(1, 36, '\P{^Is_Category=sc}', "");
Expect(0, 35, '\p{Is_Category=sc}', "");
Expect(1, 35, '\p{^Is_Category=sc}', "");
Expect(1, 35, '\P{Is_Category=sc}', "");
Expect(0, 35, '\P{^Is_Category=sc}', "");
Expect(1, 36, '\p{Is_Category= _Sc}', "");
Expect(0, 36, '\p{^Is_Category= _Sc}', "");
Expect(0, 36, '\P{Is_Category= _Sc}', "");
Expect(1, 36, '\P{^Is_Category= _Sc}', "");
Expect(0, 35, '\p{Is_Category= _Sc}', "");
Expect(1, 35, '\p{^Is_Category= _Sc}', "");
Expect(1, 35, '\P{Is_Category= _Sc}', "");
Expect(0, 35, '\P{^Is_Category= _Sc}', "");
Error('\p{General_Category=/a/-Format}');
Error('\P{General_Category=/a/-Format}');
Expect(1, 173, '\p{General_Category=format}', "");
Expect(0, 173, '\p{^General_Category=format}', "");
Expect(0, 173, '\P{General_Category=format}', "");
Expect(1, 173, '\P{^General_Category=format}', "");
Expect(0, 172, '\p{General_Category=format}', "");
Expect(1, 172, '\p{^General_Category=format}', "");
Expect(1, 172, '\P{General_Category=format}', "");
Expect(0, 172, '\P{^General_Category=format}', "");
Expect(1, 173, '\p{General_Category=	_Format}', "");
Expect(0, 173, '\p{^General_Category=	_Format}', "");
Expect(0, 173, '\P{General_Category=	_Format}', "");
Expect(1, 173, '\P{^General_Category=	_Format}', "");
Expect(0, 172, '\p{General_Category=	_Format}', "");
Expect(1, 172, '\p{^General_Category=	_Format}', "");
Expect(1, 172, '\P{General_Category=	_Format}', "");
Expect(0, 172, '\P{^General_Category=	_Format}', "");
Error('\p{Gc=:=_CF}');
Error('\P{Gc=:=_CF}');
Expect(1, 173, '\p{Gc=cf}', "");
Expect(0, 173, '\p{^Gc=cf}', "");
Expect(0, 173, '\P{Gc=cf}', "");
Expect(1, 173, '\P{^Gc=cf}', "");
Expect(0, 172, '\p{Gc=cf}', "");
Expect(1, 172, '\p{^Gc=cf}', "");
Expect(1, 172, '\P{Gc=cf}', "");
Expect(0, 172, '\P{^Gc=cf}', "");
Expect(1, 173, '\p{Gc=__CF}', "");
Expect(0, 173, '\p{^Gc=__CF}', "");
Expect(0, 173, '\P{Gc=__CF}', "");
Expect(1, 173, '\P{^Gc=__CF}', "");
Expect(0, 172, '\p{Gc=__CF}', "");
Expect(1, 172, '\p{^Gc=__CF}', "");
Expect(1, 172, '\P{Gc=__CF}', "");
Expect(0, 172, '\P{^Gc=__CF}', "");
Error('\p{Category=	 FORMAT:=}');
Error('\P{Category=	 FORMAT:=}');
Expect(1, 173, '\p{Category: format}', "");
Expect(0, 173, '\p{^Category: format}', "");
Expect(0, 173, '\P{Category: format}', "");
Expect(1, 173, '\P{^Category: format}', "");
Expect(0, 172, '\p{Category: format}', "");
Expect(1, 172, '\p{^Category: format}', "");
Expect(1, 172, '\P{Category: format}', "");
Expect(0, 172, '\P{^Category: format}', "");
Expect(1, 173, '\p{Category=Format}', "");
Expect(0, 173, '\p{^Category=Format}', "");
Expect(0, 173, '\P{Category=Format}', "");
Expect(1, 173, '\P{^Category=Format}', "");
Expect(0, 172, '\p{Category=Format}', "");
Expect(1, 172, '\p{^Category=Format}', "");
Expect(1, 172, '\P{Category=Format}', "");
Expect(0, 172, '\P{^Category=Format}', "");
Error('\p{Is_General_Category=  cf/a/}');
Error('\P{Is_General_Category=  cf/a/}');
Expect(1, 173, '\p{Is_General_Category=cf}', "");
Expect(0, 173, '\p{^Is_General_Category=cf}', "");
Expect(0, 173, '\P{Is_General_Category=cf}', "");
Expect(1, 173, '\P{^Is_General_Category=cf}', "");
Expect(0, 172, '\p{Is_General_Category=cf}', "");
Expect(1, 172, '\p{^Is_General_Category=cf}', "");
Expect(1, 172, '\P{Is_General_Category=cf}', "");
Expect(0, 172, '\P{^Is_General_Category=cf}', "");
Expect(1, 173, '\p{Is_General_Category=_CF}', "");
Expect(0, 173, '\p{^Is_General_Category=_CF}', "");
Expect(0, 173, '\P{Is_General_Category=_CF}', "");
Expect(1, 173, '\P{^Is_General_Category=_CF}', "");
Expect(0, 172, '\p{Is_General_Category=_CF}', "");
Expect(1, 172, '\p{^Is_General_Category=_CF}', "");
Expect(1, 172, '\P{Is_General_Category=_CF}', "");
Expect(0, 172, '\P{^Is_General_Category=_CF}', "");
Error('\p{Is_Gc=-	FORMAT:=}');
Error('\P{Is_Gc=-	FORMAT:=}');
Expect(1, 173, '\p{Is_Gc=format}', "");
Expect(0, 173, '\p{^Is_Gc=format}', "");
Expect(0, 173, '\P{Is_Gc=format}', "");
Expect(1, 173, '\P{^Is_Gc=format}', "");
Expect(0, 172, '\p{Is_Gc=format}', "");
Expect(1, 172, '\p{^Is_Gc=format}', "");
Expect(1, 172, '\P{Is_Gc=format}', "");
Expect(0, 172, '\P{^Is_Gc=format}', "");
Expect(1, 173, '\p{Is_Gc= Format}', "");
Expect(0, 173, '\p{^Is_Gc= Format}', "");
Expect(0, 173, '\P{Is_Gc= Format}', "");
Expect(1, 173, '\P{^Is_Gc= Format}', "");
Expect(0, 172, '\p{Is_Gc= Format}', "");
Expect(1, 172, '\p{^Is_Gc= Format}', "");
Expect(1, 172, '\P{Is_Gc= Format}', "");
Expect(0, 172, '\P{^Is_Gc= Format}', "");
Error('\p{Is_Category=-	Cf/a/}');
Error('\P{Is_Category=-	Cf/a/}');
Expect(1, 173, '\p{Is_Category=cf}', "");
Expect(0, 173, '\p{^Is_Category=cf}', "");
Expect(0, 173, '\P{Is_Category=cf}', "");
Expect(1, 173, '\P{^Is_Category=cf}', "");
Expect(0, 172, '\p{Is_Category=cf}', "");
Expect(1, 172, '\p{^Is_Category=cf}', "");
Expect(1, 172, '\P{Is_Category=cf}', "");
Expect(0, 172, '\P{^Is_Category=cf}', "");
Expect(1, 173, '\p{Is_Category=_-cf}', "");
Expect(0, 173, '\p{^Is_Category=_-cf}', "");
Expect(0, 173, '\P{Is_Category=_-cf}', "");
Expect(1, 173, '\P{^Is_Category=_-cf}', "");
Expect(0, 172, '\p{Is_Category=_-cf}', "");
Expect(1, 172, '\p{^Is_Category=_-cf}', "");
Expect(1, 172, '\P{Is_Category=_-cf}', "");
Expect(0, 172, '\P{^Is_Category=_-cf}', "");
Error('\p{Default_Ignorable_Code_Point:		-Yes:=}');
Error('\P{Default_Ignorable_Code_Point:		-Yes:=}');
Expect(1, 173, '\p{Default_Ignorable_Code_Point:	yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point:	yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point:	yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point:	yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point:	yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point:	yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point:	yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point:	yes}', "");
Expect(1, 173, '\p{Default_Ignorable_Code_Point=	_Yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point=	_Yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point=	_Yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point=	_Yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point=	_Yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point=	_Yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point=	_Yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point=	_Yes}', "");
Error('\p{DI: /a/	_Y}');
Error('\P{DI: /a/	_Y}');
Expect(1, 173, '\p{DI=y}', "");
Expect(0, 173, '\p{^DI=y}', "");
Expect(0, 173, '\P{DI=y}', "");
Expect(1, 173, '\P{^DI=y}', "");
Expect(0, 172, '\p{DI=y}', "");
Expect(1, 172, '\p{^DI=y}', "");
Expect(1, 172, '\P{DI=y}', "");
Expect(0, 172, '\P{^DI=y}', "");
Expect(1, 173, '\p{DI=	Y}', "");
Expect(0, 173, '\p{^DI=	Y}', "");
Expect(0, 173, '\P{DI=	Y}', "");
Expect(1, 173, '\P{^DI=	Y}', "");
Expect(0, 172, '\p{DI=	Y}', "");
Expect(1, 172, '\p{^DI=	Y}', "");
Expect(1, 172, '\P{DI=	Y}', "");
Expect(0, 172, '\P{^DI=	Y}', "");
Error('\p{Is_Default_Ignorable_Code_Point=  t/a/}');
Error('\P{Is_Default_Ignorable_Code_Point=  t/a/}');
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point=-T}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point=-T}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point=-T}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point=-T}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point=-T}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point=-T}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point=-T}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point=-T}', "");
Error('\p{Is_DI=/a/	 TRUE}');
Error('\P{Is_DI=/a/	 TRUE}');
Expect(1, 173, '\p{Is_DI=true}', "");
Expect(0, 173, '\p{^Is_DI=true}', "");
Expect(0, 173, '\P{Is_DI=true}', "");
Expect(1, 173, '\P{^Is_DI=true}', "");
Expect(0, 172, '\p{Is_DI=true}', "");
Expect(1, 172, '\p{^Is_DI=true}', "");
Expect(1, 172, '\P{Is_DI=true}', "");
Expect(0, 172, '\P{^Is_DI=true}', "");
Expect(1, 173, '\p{Is_DI=__True}', "");
Expect(0, 173, '\p{^Is_DI=__True}', "");
Expect(0, 173, '\P{Is_DI=__True}', "");
Expect(1, 173, '\P{^Is_DI=__True}', "");
Expect(0, 172, '\p{Is_DI=__True}', "");
Expect(1, 172, '\p{^Is_DI=__True}', "");
Expect(1, 172, '\P{Is_DI=__True}', "");
Expect(0, 172, '\P{^Is_DI=__True}', "");
Error('\p{Default_Ignorable_Code_Point=_ no:=}');
Error('\P{Default_Ignorable_Code_Point=_ no:=}');
Expect(1, 172, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\p{Default_Ignorable_Code_Point=-No}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point=-No}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point=-No}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point=-No}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point=-No}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point=-No}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point=-No}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point=-No}', "");
Error('\p{DI=_/a/N}');
Error('\P{DI=_/a/N}');
Expect(1, 172, '\p{DI:	n}', "");
Expect(0, 172, '\p{^DI:	n}', "");
Expect(0, 172, '\P{DI:	n}', "");
Expect(1, 172, '\P{^DI:	n}', "");
Expect(0, 173, '\p{DI:	n}', "");
Expect(1, 173, '\p{^DI:	n}', "");
Expect(1, 173, '\P{DI:	n}', "");
Expect(0, 173, '\P{^DI:	n}', "");
Expect(1, 172, '\p{DI=	_N}', "");
Expect(0, 172, '\p{^DI=	_N}', "");
Expect(0, 172, '\P{DI=	_N}', "");
Expect(1, 172, '\P{^DI=	_N}', "");
Expect(0, 173, '\p{DI=	_N}', "");
Expect(1, 173, '\p{^DI=	_N}', "");
Expect(1, 173, '\P{DI=	_N}', "");
Expect(0, 173, '\P{^DI=	_N}', "");
Error('\p{Is_Default_Ignorable_Code_Point=:=	-F}');
Error('\P{Is_Default_Ignorable_Code_Point=:=	-F}');
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point=- F}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point=- F}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point=- F}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point=- F}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point=- F}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point=- F}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point=- F}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point=- F}', "");
Error('\p{Is_DI=_false/a/}');
Error('\P{Is_DI=_false/a/}');
Expect(1, 172, '\p{Is_DI:   false}', "");
Expect(0, 172, '\p{^Is_DI:   false}', "");
Expect(0, 172, '\P{Is_DI:   false}', "");
Expect(1, 172, '\P{^Is_DI:   false}', "");
Expect(0, 173, '\p{Is_DI:   false}', "");
Expect(1, 173, '\p{^Is_DI:   false}', "");
Expect(1, 173, '\P{Is_DI:   false}', "");
Expect(0, 173, '\P{^Is_DI:   false}', "");
Expect(1, 172, '\p{Is_DI= False}', "");
Expect(0, 172, '\p{^Is_DI= False}', "");
Expect(0, 172, '\P{Is_DI= False}', "");
Expect(1, 172, '\P{^Is_DI= False}', "");
Expect(0, 173, '\p{Is_DI= False}', "");
Expect(1, 173, '\p{^Is_DI= False}', "");
Expect(1, 173, '\P{Is_DI= False}', "");
Expect(0, 173, '\P{^Is_DI= False}', "");
Error('\p{Terminal_Punctuation= /a/yes}');
Error('\P{Terminal_Punctuation= /a/yes}');
Expect(1, 33, '\p{Terminal_Punctuation=yes}', "");
Expect(0, 33, '\p{^Terminal_Punctuation=yes}', "");
Expect(0, 33, '\P{Terminal_Punctuation=yes}', "");
Expect(1, 33, '\P{^Terminal_Punctuation=yes}', "");
Expect(0, 32, '\p{Terminal_Punctuation=yes}', "");
Expect(1, 32, '\p{^Terminal_Punctuation=yes}', "");
Expect(1, 32, '\P{Terminal_Punctuation=yes}', "");
Expect(0, 32, '\P{^Terminal_Punctuation=yes}', "");
Expect(1, 33, '\p{Terminal_Punctuation=	 YES}', "");
Expect(0, 33, '\p{^Terminal_Punctuation=	 YES}', "");
Expect(0, 33, '\P{Terminal_Punctuation=	 YES}', "");
Expect(1, 33, '\P{^Terminal_Punctuation=	 YES}', "");
Expect(0, 32, '\p{Terminal_Punctuation=	 YES}', "");
Expect(1, 32, '\p{^Terminal_Punctuation=	 YES}', "");
Expect(1, 32, '\P{Terminal_Punctuation=	 YES}', "");
Expect(0, 32, '\P{^Terminal_Punctuation=	 YES}', "");
Error('\p{Term:	:=Y}');
Error('\P{Term:	:=Y}');
Expect(1, 33, '\p{Term=y}', "");
Expect(0, 33, '\p{^Term=y}', "");
Expect(0, 33, '\P{Term=y}', "");
Expect(1, 33, '\P{^Term=y}', "");
Expect(0, 32, '\p{Term=y}', "");
Expect(1, 32, '\p{^Term=y}', "");
Expect(1, 32, '\P{Term=y}', "");
Expect(0, 32, '\P{^Term=y}', "");
Expect(1, 33, '\p{Term=Y}', "");
Expect(0, 33, '\p{^Term=Y}', "");
Expect(0, 33, '\P{Term=Y}', "");
Expect(1, 33, '\P{^Term=Y}', "");
Expect(0, 32, '\p{Term=Y}', "");
Expect(1, 32, '\p{^Term=Y}', "");
Expect(1, 32, '\P{Term=Y}', "");
Expect(0, 32, '\P{^Term=Y}', "");
Error('\p{Is_Terminal_Punctuation= :=T}');
Error('\P{Is_Terminal_Punctuation= :=T}');
Expect(1, 33, '\p{Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\p{Is_Terminal_Punctuation=_	t}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=_	t}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=_	t}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=_	t}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=_	t}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=_	t}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=_	t}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=_	t}', "");
Error('\p{Is_Term=-/a/true}');
Error('\P{Is_Term=-/a/true}');
Expect(1, 33, '\p{Is_Term:	true}', "");
Expect(0, 33, '\p{^Is_Term:	true}', "");
Expect(0, 33, '\P{Is_Term:	true}', "");
Expect(1, 33, '\P{^Is_Term:	true}', "");
Expect(0, 32, '\p{Is_Term:	true}', "");
Expect(1, 32, '\p{^Is_Term:	true}', "");
Expect(1, 32, '\P{Is_Term:	true}', "");
Expect(0, 32, '\P{^Is_Term:	true}', "");
Expect(1, 33, '\p{Is_Term: 	-TRUE}', "");
Expect(0, 33, '\p{^Is_Term: 	-TRUE}', "");
Expect(0, 33, '\P{Is_Term: 	-TRUE}', "");
Expect(1, 33, '\P{^Is_Term: 	-TRUE}', "");
Expect(0, 32, '\p{Is_Term: 	-TRUE}', "");
Expect(1, 32, '\p{^Is_Term: 	-TRUE}', "");
Expect(1, 32, '\P{Is_Term: 	-TRUE}', "");
Expect(0, 32, '\P{^Is_Term: 	-TRUE}', "");
Error('\p{Terminal_Punctuation=/a/	 No}');
Error('\P{Terminal_Punctuation=/a/	 No}');
Expect(1, 32, '\p{Terminal_Punctuation=no}', "");
Expect(0, 32, '\p{^Terminal_Punctuation=no}', "");
Expect(0, 32, '\P{Terminal_Punctuation=no}', "");
Expect(1, 32, '\P{^Terminal_Punctuation=no}', "");
Expect(0, 33, '\p{Terminal_Punctuation=no}', "");
Expect(1, 33, '\p{^Terminal_Punctuation=no}', "");
Expect(1, 33, '\P{Terminal_Punctuation=no}', "");
Expect(0, 33, '\P{^Terminal_Punctuation=no}', "");
Expect(1, 32, '\p{Terminal_Punctuation:- NO}', "");
Expect(0, 32, '\p{^Terminal_Punctuation:- NO}', "");
Expect(0, 32, '\P{Terminal_Punctuation:- NO}', "");
Expect(1, 32, '\P{^Terminal_Punctuation:- NO}', "");
Expect(0, 33, '\p{Terminal_Punctuation:- NO}', "");
Expect(1, 33, '\p{^Terminal_Punctuation:- NO}', "");
Expect(1, 33, '\P{Terminal_Punctuation:- NO}', "");
Expect(0, 33, '\P{^Terminal_Punctuation:- NO}', "");
Error('\p{Term=	:=N}');
Error('\P{Term=	:=N}');
Expect(1, 32, '\p{Term=n}', "");
Expect(0, 32, '\p{^Term=n}', "");
Expect(0, 32, '\P{Term=n}', "");
Expect(1, 32, '\P{^Term=n}', "");
Expect(0, 33, '\p{Term=n}', "");
Expect(1, 33, '\p{^Term=n}', "");
Expect(1, 33, '\P{Term=n}', "");
Expect(0, 33, '\P{^Term=n}', "");
Expect(1, 32, '\p{Term= -n}', "");
Expect(0, 32, '\p{^Term= -n}', "");
Expect(0, 32, '\P{Term= -n}', "");
Expect(1, 32, '\P{^Term= -n}', "");
Expect(0, 33, '\p{Term= -n}', "");
Expect(1, 33, '\p{^Term= -n}', "");
Expect(1, 33, '\P{Term= -n}', "");
Expect(0, 33, '\P{^Term= -n}', "");
Error('\p{Is_Terminal_Punctuation=/a/F}');
Error('\P{Is_Terminal_Punctuation=/a/F}');
Expect(1, 32, '\p{Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\p{Is_Terminal_Punctuation=	-F}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=	-F}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=	-F}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=	-F}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=	-F}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=	-F}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=	-F}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=	-F}', "");
Error('\p{Is_Term=- false/a/}');
Error('\P{Is_Term=- false/a/}');
Expect(1, 32, '\p{Is_Term=false}', "");
Expect(0, 32, '\p{^Is_Term=false}', "");
Expect(0, 32, '\P{Is_Term=false}', "");
Expect(1, 32, '\P{^Is_Term=false}', "");
Expect(0, 33, '\p{Is_Term=false}', "");
Expect(1, 33, '\p{^Is_Term=false}', "");
Expect(1, 33, '\P{Is_Term=false}', "");
Expect(0, 33, '\P{^Is_Term=false}', "");
Expect(1, 32, '\p{Is_Term=- False}', "");
Expect(0, 32, '\p{^Is_Term=- False}', "");
Expect(0, 32, '\P{Is_Term=- False}', "");
Expect(1, 32, '\P{^Is_Term=- False}', "");
Expect(0, 33, '\p{Is_Term=- False}', "");
Expect(1, 33, '\p{^Is_Term=- False}', "");
Expect(1, 33, '\P{Is_Term=- False}', "");
Expect(0, 33, '\P{^Is_Term=- False}', "");
Test_X('÷ 0020 ÷ 0020 ÷');
Test_X('÷ 0020 × 0308 ÷ 0020 ÷');
Test_X('÷ 0020 ÷ 000D ÷');
Test_X('÷ 0020 × 0308 ÷ 000D ÷');
Test_X('÷ 0020 ÷ 000A ÷');
Test_X('÷ 0020 × 0308 ÷ 000A ÷');
Test_X('÷ 0020 ÷ 0001 ÷');
Test_X('÷ 0020 × 0308 ÷ 0001 ÷');
Test_X('÷ 0020 × 0300 ÷');
Test_X('÷ 0020 × 0308 × 0300 ÷');
Test_X('÷ 0020 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0903 ÷');
Test_X('÷ 0020 × 0308 × 0903 ÷');
Test_X('÷ 0020 ÷ 1100 ÷');
Test_X('÷ 0020 × 0308 ÷ 1100 ÷');
Test_X('÷ 0020 ÷ 1160 ÷');
Test_X('÷ 0020 × 0308 ÷ 1160 ÷');
Test_X('÷ 0020 ÷ 11A8 ÷');
Test_X('÷ 0020 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0020 ÷ AC00 ÷');
Test_X('÷ 0020 × 0308 ÷ AC00 ÷');
Test_X('÷ 0020 ÷ AC01 ÷');
Test_X('÷ 0020 × 0308 ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0020 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000D ÷ 000D ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000D × 000A ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000D ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0300 ÷');
Test_X('÷ 000D ÷ 0308 × 0300 ÷');
Test_X('÷ 000D ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0903 ÷');
Test_X('÷ 000D ÷ 0308 × 0903 ÷');
Test_X('÷ 000D ÷ 1100 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000D ÷ 1160 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000D ÷ 11A8 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000D ÷ AC00 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000D ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0020 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000A ÷ 000D ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000A ÷ 000A ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000A ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0300 ÷');
Test_X('÷ 000A ÷ 0308 × 0300 ÷');
Test_X('÷ 000A ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0903 ÷');
Test_X('÷ 000A ÷ 0308 × 0903 ÷');
Test_X('÷ 000A ÷ 1100 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000A ÷ 1160 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000A ÷ 11A8 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000A ÷ AC00 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000A ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0300 ÷');
Test_X('÷ 0001 ÷ 0308 × 0300 ÷');
Test_X('÷ 0001 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0903 ÷');
Test_X('÷ 0001 ÷ 0308 × 0903 ÷');
Test_X('÷ 0001 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0300 ÷ 0020 ÷');
Test_X('÷ 0300 × 0308 ÷ 0020 ÷');
Test_X('÷ 0300 ÷ 000D ÷');
Test_X('÷ 0300 × 0308 ÷ 000D ÷');
Test_X('÷ 0300 ÷ 000A ÷');
Test_X('÷ 0300 × 0308 ÷ 000A ÷');
Test_X('÷ 0300 ÷ 0001 ÷');
Test_X('÷ 0300 × 0308 ÷ 0001 ÷');
Test_X('÷ 0300 × 0300 ÷');
Test_X('÷ 0300 × 0308 × 0300 ÷');
Test_X('÷ 0300 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0903 ÷');
Test_X('÷ 0300 × 0308 × 0903 ÷');
Test_X('÷ 0300 ÷ 1100 ÷');
Test_X('÷ 0300 × 0308 ÷ 1100 ÷');
Test_X('÷ 0300 ÷ 1160 ÷');
Test_X('÷ 0300 × 0308 ÷ 1160 ÷');
Test_X('÷ 0300 ÷ 11A8 ÷');
Test_X('÷ 0300 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0300 ÷ AC00 ÷');
Test_X('÷ 0300 × 0308 ÷ AC00 ÷');
Test_X('÷ 0300 ÷ AC01 ÷');
Test_X('÷ 0300 × 0308 ÷ AC01 ÷');
Test_X('÷ 0E40 × 0020 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0020 ÷');
Test_X('÷ 0E40 ÷ 000D ÷');
Test_X('÷ 0E40 × 0308 ÷ 000D ÷');
Test_X('÷ 0E40 ÷ 000A ÷');
Test_X('÷ 0E40 × 0308 ÷ 000A ÷');
Test_X('÷ 0E40 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0300 ÷');
Test_X('÷ 0E40 × 0308 × 0300 ÷');
Test_X('÷ 0E40 × 0E40 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0E40 × 0903 ÷');
Test_X('÷ 0E40 × 0308 × 0903 ÷');
Test_X('÷ 0E40 × 1100 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1100 ÷');
Test_X('÷ 0E40 × 1160 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1160 ÷');
Test_X('÷ 0E40 × 11A8 ÷');
Test_X('÷ 0E40 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0E40 × AC00 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC00 ÷');
Test_X('÷ 0E40 × AC01 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC01 ÷');
Test_X('÷ 0903 ÷ 0020 ÷');
Test_X('÷ 0903 × 0308 ÷ 0020 ÷');
Test_X('÷ 0903 ÷ 000D ÷');
Test_X('÷ 0903 × 0308 ÷ 000D ÷');
Test_X('÷ 0903 ÷ 000A ÷');
Test_X('÷ 0903 × 0308 ÷ 000A ÷');
Test_X('÷ 0903 ÷ 0001 ÷');
Test_X('÷ 0903 × 0308 ÷ 0001 ÷');
Test_X('÷ 0903 × 0300 ÷');
Test_X('÷ 0903 × 0308 × 0300 ÷');
Test_X('÷ 0903 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0903 ÷');
Test_X('÷ 0903 × 0308 × 0903 ÷');
Test_X('÷ 0903 ÷ 1100 ÷');
Test_X('÷ 0903 × 0308 ÷ 1100 ÷');
Test_X('÷ 0903 ÷ 1160 ÷');
Test_X('÷ 0903 × 0308 ÷ 1160 ÷');
Test_X('÷ 0903 ÷ 11A8 ÷');
Test_X('÷ 0903 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0903 ÷ AC00 ÷');
Test_X('÷ 0903 × 0308 ÷ AC00 ÷');
Test_X('÷ 0903 ÷ AC01 ÷');
Test_X('÷ 0903 × 0308 ÷ AC01 ÷');
Test_X('÷ 1100 ÷ 0020 ÷');
Test_X('÷ 1100 × 0308 ÷ 0020 ÷');
Test_X('÷ 1100 ÷ 000D ÷');
Test_X('÷ 1100 × 0308 ÷ 000D ÷');
Test_X('÷ 1100 ÷ 000A ÷');
Test_X('÷ 1100 × 0308 ÷ 000A ÷');
Test_X('÷ 1100 ÷ 0001 ÷');
Test_X('÷ 1100 × 0308 ÷ 0001 ÷');
Test_X('÷ 1100 × 0300 ÷');
Test_X('÷ 1100 × 0308 × 0300 ÷');
Test_X('÷ 1100 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0903 ÷');
Test_X('÷ 1100 × 0308 × 0903 ÷');
Test_X('÷ 1100 × 1100 ÷');
Test_X('÷ 1100 × 0308 ÷ 1100 ÷');
Test_X('÷ 1100 × 1160 ÷');
Test_X('÷ 1100 × 0308 ÷ 1160 ÷');
Test_X('÷ 1100 ÷ 11A8 ÷');
Test_X('÷ 1100 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1100 × AC00 ÷');
Test_X('÷ 1100 × 0308 ÷ AC00 ÷');
Test_X('÷ 1100 × AC01 ÷');
Test_X('÷ 1100 × 0308 ÷ AC01 ÷');
Test_X('÷ 1160 ÷ 0020 ÷');
Test_X('÷ 1160 × 0308 ÷ 0020 ÷');
Test_X('÷ 1160 ÷ 000D ÷');
Test_X('÷ 1160 × 0308 ÷ 000D ÷');
Test_X('÷ 1160 ÷ 000A ÷');
Test_X('÷ 1160 × 0308 ÷ 000A ÷');
Test_X('÷ 1160 ÷ 0001 ÷');
Test_X('÷ 1160 × 0308 ÷ 0001 ÷');
Test_X('÷ 1160 × 0300 ÷');
Test_X('÷ 1160 × 0308 × 0300 ÷');
Test_X('÷ 1160 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0903 ÷');
Test_X('÷ 1160 × 0308 × 0903 ÷');
Test_X('÷ 1160 ÷ 1100 ÷');
Test_X('÷ 1160 × 0308 ÷ 1100 ÷');
Test_X('÷ 1160 × 1160 ÷');
Test_X('÷ 1160 × 0308 ÷ 1160 ÷');
Test_X('÷ 1160 × 11A8 ÷');
Test_X('÷ 1160 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1160 ÷ AC00 ÷');
Test_X('÷ 1160 × 0308 ÷ AC00 ÷');
Test_X('÷ 1160 ÷ AC01 ÷');
Test_X('÷ 1160 × 0308 ÷ AC01 ÷');
Test_X('÷ 11A8 ÷ 0020 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0020 ÷');
Test_X('÷ 11A8 ÷ 000D ÷');
Test_X('÷ 11A8 × 0308 ÷ 000D ÷');
Test_X('÷ 11A8 ÷ 000A ÷');
Test_X('÷ 11A8 × 0308 ÷ 000A ÷');
Test_X('÷ 11A8 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0300 ÷');
Test_X('÷ 11A8 × 0308 × 0300 ÷');
Test_X('÷ 11A8 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0903 ÷');
Test_X('÷ 11A8 × 0308 × 0903 ÷');
Test_X('÷ 11A8 ÷ 1100 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1100 ÷');
Test_X('÷ 11A8 ÷ 1160 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1160 ÷');
Test_X('÷ 11A8 × 11A8 ÷');
Test_X('÷ 11A8 × 0308 ÷ 11A8 ÷');
Test_X('÷ 11A8 ÷ AC00 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC00 ÷');
Test_X('÷ 11A8 ÷ AC01 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC01 ÷');
Test_X('÷ AC00 ÷ 0020 ÷');
Test_X('÷ AC00 × 0308 ÷ 0020 ÷');
Test_X('÷ AC00 ÷ 000D ÷');
Test_X('÷ AC00 × 0308 ÷ 000D ÷');
Test_X('÷ AC00 ÷ 000A ÷');
Test_X('÷ AC00 × 0308 ÷ 000A ÷');
Test_X('÷ AC00 ÷ 0001 ÷');
Test_X('÷ AC00 × 0308 ÷ 0001 ÷');
Test_X('÷ AC00 × 0300 ÷');
Test_X('÷ AC00 × 0308 × 0300 ÷');
Test_X('÷ AC00 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0903 ÷');
Test_X('÷ AC00 × 0308 × 0903 ÷');
Test_X('÷ AC00 ÷ 1100 ÷');
Test_X('÷ AC00 × 0308 ÷ 1100 ÷');
Test_X('÷ AC00 × 1160 ÷');
Test_X('÷ AC00 × 0308 ÷ 1160 ÷');
Test_X('÷ AC00 × 11A8 ÷');
Test_X('÷ AC00 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC00 ÷ AC00 ÷');
Test_X('÷ AC00 × 0308 ÷ AC00 ÷');
Test_X('÷ AC00 ÷ AC01 ÷');
Test_X('÷ AC00 × 0308 ÷ AC01 ÷');
Test_X('÷ AC01 ÷ 0020 ÷');
Test_X('÷ AC01 × 0308 ÷ 0020 ÷');
Test_X('÷ AC01 ÷ 000D ÷');
Test_X('÷ AC01 × 0308 ÷ 000D ÷');
Test_X('÷ AC01 ÷ 000A ÷');
Test_X('÷ AC01 × 0308 ÷ 000A ÷');
Test_X('÷ AC01 ÷ 0001 ÷');
Test_X('÷ AC01 × 0308 ÷ 0001 ÷');
Test_X('÷ AC01 × 0300 ÷');
Test_X('÷ AC01 × 0308 × 0300 ÷');
Test_X('÷ AC01 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0903 ÷');
Test_X('÷ AC01 × 0308 × 0903 ÷');
Test_X('÷ AC01 ÷ 1100 ÷');
Test_X('÷ AC01 × 0308 ÷ 1100 ÷');
Test_X('÷ AC01 ÷ 1160 ÷');
Test_X('÷ AC01 × 0308 ÷ 1160 ÷');
Test_X('÷ AC01 × 11A8 ÷');
Test_X('÷ AC01 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC01 ÷ AC00 ÷');
Test_X('÷ AC01 × 0308 ÷ AC00 ÷');
Test_X('÷ AC01 ÷ AC01 ÷');
Test_X('÷ AC01 × 0308 ÷ AC01 ÷');
Finished();
